
Winch2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d22c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001064  0800d400  0800d400  0001d400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e464  0800e464  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e464  0800e464  0001e464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e46c  0800e46c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e46c  0800e46c  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e470  0800e470  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  200001e4  0800e658  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b0c  0800e658  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bac  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002983  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00038748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00039a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af78  00000000  00000000  0003ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0f4  00000000  00000000  00065c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012bb45  00000000  00000000  00083d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001af8b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006524  00000000  00000000  001af904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d3e4 	.word	0x0800d3e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800d3e4 	.word	0x0800d3e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	0000      	movs	r0, r0
	...

08000fd0 <AS5600_GetRawAngle>:

	return ret;
}

uint8_t AS5600_GetRawAngle(AS5600_Handle_t* hAS56)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	const AS5600_OpRegister_t angleReg = AS5600_REGISTER_RAWANGLE_H;
 8000fd8:	230c      	movs	r3, #12
 8000fda:	73fb      	strb	r3, [r7, #15]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73bb      	strb	r3, [r7, #14]

	uint8_t raw[2] = {0};
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	81bb      	strh	r3, [r7, #12]

	if((hAS56->I2Chandle == NULL)) return ret;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <AS5600_GetRawAngle+0x20>
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	e02d      	b.n	800104c <AS5600_GetRawAngle+0x7c>

		//readByte(hAS56->I2Chandle, Address, subAddress);
	if(readMem(hAS56->I2Chandle, WHOAMI, angleReg, raw) != AS55600_SUCCESS) return ret;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	216c      	movs	r1, #108	; 0x6c
 8000ffc:	f000 f830 	bl	8001060 <readMem>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d001      	beq.n	800100a <AS5600_GetRawAngle+0x3a>
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	e020      	b.n	800104c <AS5600_GetRawAngle+0x7c>

	else ret = AS55600_SUCCESS;
 800100a:	2301      	movs	r3, #1
 800100c:	73bb      	strb	r3, [r7, #14]

	hAS56->rawAngle = (float)((uint16_t)((uint16_t)raw[0] << 8 | raw[1])) * 0.087;
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	7b7b      	ldrb	r3, [r7, #13]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff faad 	bl	8000588 <__aeabi_f2d>
 800102e:	a30a      	add	r3, pc, #40	; (adr r3, 8001058 <AS5600_GetRawAngle+0x88>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fb00 	bl	8000638 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdf2 	bl	8000c28 <__aeabi_d2f>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	609a      	str	r2, [r3, #8]

	return ret;
 800104a:	7bbb      	ldrb	r3, [r7, #14]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f3af 8000 	nop.w
 8001058:	cac08312 	.word	0xcac08312
 800105c:	3fb645a1 	.word	0x3fb645a1

08001060 <readMem>:
/*
 * Reads bytes of data
 */

uint8_t readMem(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress, uint8_t* raw)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	72fb      	strb	r3, [r7, #11]
 800106e:	4613      	mov	r3, r2
 8001070:	72bb      	strb	r3, [r7, #10]

	uint8_t rawData[2];

	if(HAL_I2C_Mem_Read(I2Chandle, Address, subAddress, I2C_MEMADD_SIZE_8BIT, rawData, 2, AS5600_I2C_TIMEOUT) != HAL_ERROR)
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	b299      	uxth	r1, r3
 8001076:	7abb      	ldrb	r3, [r7, #10]
 8001078:	b29a      	uxth	r2, r3
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2302      	movs	r3, #2
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f004 fc42 	bl	8005914 <HAL_I2C_Mem_Read>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d008      	beq.n	80010a8 <readMem+0x48>
	{
		raw[0] = rawData[0];
 8001096:	7d3a      	ldrb	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	701a      	strb	r2, [r3, #0]
		raw[1] = rawData[1];
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3301      	adds	r3, #1
 80010a0:	7d7a      	ldrb	r2, [r7, #21]
 80010a2:	701a      	strb	r2, [r3, #0]

		return 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <readMem+0x4a>
	}

	else return 0;
 80010a8:	2300      	movs	r3, #0

}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <SysTick_Handler>:
extern void MavLinkReceive(UART_HandleTypeDef* huart, uint8_t byte);

extern uint8_t byte;
//Core Tick Interrupt
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80010b6:	f003 fa13 	bl	80044e0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80010ba:	f003 fdf5 	bl	8004ca8 <HAL_SYSTICK_IRQHandler>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <TIM2_IRQHandler>:


//Timer Interrupt

void TIM2_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	//tim2.Instance->CNT
	Clicks = __HAL_TIM_GET_COUNTER(&tim2);
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <TIM2_IRQHandler+0x4c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <TIM2_IRQHandler+0x50>)
 80010d0:	6013      	str	r3, [r2, #0]
	click = (int16_t)Clicks;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <TIM2_IRQHandler+0x50>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <TIM2_IRQHandler+0x54>)
 80010da:	801a      	strh	r2, [r3, #0]
	Pulse = click * 0.25;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <TIM2_IRQHandler+0x54>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa3e 	bl	8000564 <__aeabi_i2d>
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <TIM2_IRQHandler+0x58>)
 80010ee:	f7ff faa3 	bl	8000638 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fd4d 	bl	8000b98 <__aeabi_d2iz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <TIM2_IRQHandler+0x5c>)
 8001104:	801a      	strh	r2, [r3, #0]

	HAL_TIM_IRQHandler(&tim2);
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM2_IRQHandler+0x4c>)
 8001108:	f007 ff12 	bl	8008f30 <HAL_TIM_IRQHandler>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000264 	.word	0x20000264
 8001114:	200005c4 	.word	0x200005c4
 8001118:	200005c8 	.word	0x200005c8
 800111c:	3fd00000 	.word	0x3fd00000
 8001120:	200005ca 	.word	0x200005ca

08001124 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&tim4);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM4_IRQHandler+0x10>)
 800112a:	f007 ff01 	bl	8008f30 <HAL_TIM_IRQHandler>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002ac 	.word	0x200002ac

08001138 <USART1_IRQHandler>:



//UART Interrupt
void USART1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	2201      	movs	r2, #1
 8001142:	4906      	ldr	r1, [pc, #24]	; (800115c <USART1_IRQHandler+0x24>)
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <USART1_IRQHandler+0x28>)
 8001146:	f008 fec8 	bl	8009eda <HAL_UART_Receive>

	MavLinkReceive(&huart1, receivedData);
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <USART1_IRQHandler+0x24>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <USART1_IRQHandler+0x28>)
 8001152:	f001 fe31 	bl	8002db8 <MavLinkReceive>
	//call the parsing funciton here
	//MavlinkHeartBeatSend(&huart1);

	return;
 8001156:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);
}
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000538 	.word	0x20000538
 8001160:	200004f0 	.word	0x200004f0

08001164 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, &receivedData, 1, HAL_MAX_DELAY);
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	2201      	movs	r2, #1
 800116e:	4906      	ldr	r1, [pc, #24]	; (8001188 <USART2_IRQHandler+0x24>)
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <USART2_IRQHandler+0x28>)
 8001172:	f008 feb2 	bl	8009eda <HAL_UART_Receive>

	MavLinkReceive(&huart2, receivedData);
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <USART2_IRQHandler+0x24>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <USART2_IRQHandler+0x28>)
 800117e:	f001 fe1b 	bl	8002db8 <MavLinkReceive>
	//call the parsing funciton here
	//MavLinkReceive(receivedData);

	return;
 8001182:	bf00      	nop

	HAL_UART_IRQHandler(&huart2);
}
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000538 	.word	0x20000538
 800118c:	200004ac 	.word	0x200004ac

08001190 <DMA2_Stream0_IRQHandler>:



void DMA2_Stream0_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_adc1);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001196:	f003 fe5d 	bl	8004e54 <HAL_DMA_IRQHandler>

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000044c 	.word	0x2000044c
 80011a4:	00000000 	.word	0x00000000

080011a8 <EXTI1_IRQHandler>:


///All the external interrupts

void EXTI1_IRQHandler()
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
	 *  This subroutine handles the Spring thing interrupt
	 *
	 *  PC1
	 */

	if(poop_back)
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <EXTI1_IRQHandler+0xb0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d044      	beq.n	8001240 <EXTI1_IRQHandler+0x98>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <EXTI1_IRQHandler+0xb4>)
 80011b8:	681c      	ldr	r4, [r3, #0]
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <EXTI1_IRQHandler+0xb4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f826 	bl	8000210 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	4621      	mov	r1, r4
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <EXTI1_IRQHandler+0xb8>)
 80011d0:	f008 fdf1 	bl	8009db6 <HAL_UART_Transmit>

		__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * 0/100);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <EXTI1_IRQHandler+0xbc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	; 0x34

		for(int i =0; i<12000; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e01f      	b.n	8001222 <EXTI1_IRQHandler+0x7a>
		{

			__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <EXTI1_IRQHandler+0xbc>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9ac 	bl	8000544 <__aeabi_ui2d>
 80011ec:	a318      	add	r3, pc, #96	; (adr r3, 8001250 <EXTI1_IRQHandler+0xa8>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa21 	bl	8000638 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <EXTI1_IRQHandler+0xc0>)
 8001204:	f7ff fb42 	bl	800088c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4915      	ldr	r1, [pc, #84]	; (8001264 <EXTI1_IRQHandler+0xbc>)
 800120e:	680c      	ldr	r4, [r1, #0]
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fce8 	bl	8000be8 <__aeabi_d2uiz>
 8001218:	4603      	mov	r3, r0
 800121a:	6363      	str	r3, [r4, #52]	; 0x34
		for(int i =0; i<12000; i++)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3301      	adds	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001228:	4293      	cmp	r3, r2
 800122a:	ddda      	ble.n	80011e2 <EXTI1_IRQHandler+0x3a>

		}

		__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * 0/100);
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <EXTI1_IRQHandler+0xbc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_TIM_PWM_Stop(&tim3, TIM_CHANNEL_1);


		poop_back = false;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <EXTI1_IRQHandler+0xb0>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
		spring_trig = true;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <EXTI1_IRQHandler+0xc4>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]

	}


	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001240:	2002      	movs	r0, #2
 8001242:	f004 f9ff 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	877be861 	.word	0x877be861
 8001254:	40278787 	.word	0x40278787
 8001258:	200005d2 	.word	0x200005d2
 800125c:	20000000 	.word	0x20000000
 8001260:	200004ac 	.word	0x200004ac
 8001264:	2000021c 	.word	0x2000021c
 8001268:	40590000 	.word	0x40590000
 800126c:	200005d4 	.word	0x200005d4

08001270 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	 * This is for the Bay Door
	 *
	 * PC2
	 */

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001274:	2004      	movs	r0, #4
 8001276:	f004 f9e5 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8001280:	b598      	push	{r3, r4, r7, lr}
 8001282:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PC3
	 */

	if(close_door)
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <EXTI3_IRQHandler+0xcc>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d059      	beq.n	8001340 <EXTI3_IRQHandler+0xc0>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <EXTI3_IRQHandler+0xd0>)
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <EXTI3_IRQHandler+0xd0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ffbb 	bl	8000210 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	4621      	mov	r1, r4
 80012a4:	482b      	ldr	r0, [pc, #172]	; (8001354 <EXTI3_IRQHandler+0xd4>)
 80012a6:	f008 fd86 	bl	8009db6 <HAL_UART_Transmit>

		__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * _8_BIT_MAP(0)/100);
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <EXTI3_IRQHandler+0xd8>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f948 	bl	8000544 <__aeabi_ui2d>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	f7ff f9bc 	bl	8000638 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <EXTI3_IRQHandler+0xdc>)
 80012ce:	f7ff fadd 	bl	800088c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4920      	ldr	r1, [pc, #128]	; (8001358 <EXTI3_IRQHandler+0xd8>)
 80012d8:	680c      	ldr	r4, [r1, #0]
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc83 	bl	8000be8 <__aeabi_d2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	6363      	str	r3, [r4, #52]	; 0x34




		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <EXTI3_IRQHandler+0xe0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2101      	movs	r1, #1
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <EXTI3_IRQHandler+0xe4>)
 80012f2:	f004 f98d 	bl	8005610 <HAL_GPIO_WritePin>
			for(int i =0; i<6000; i++){

				__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/
			__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * _8_BIT_MAP(0)/100);
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <EXTI3_IRQHandler+0xd8>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f922 	bl	8000544 <__aeabi_ui2d>
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	f7ff f996 	bl	8000638 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <EXTI3_IRQHandler+0xdc>)
 800131a:	f7ff fab7 	bl	800088c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <EXTI3_IRQHandler+0xd8>)
 8001324:	680c      	ldr	r4, [r1, #0]
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc5d 	bl	8000be8 <__aeabi_d2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_TIM_PWM_Stop(&tim3, TIM_CHANNEL_1);
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <EXTI3_IRQHandler+0xd8>)
 8001336:	f007 fac5 	bl	80088c4 <HAL_TIM_PWM_Stop>
			spring_trig = false;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <EXTI3_IRQHandler+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
	}


	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001340:	2008      	movs	r0, #8
 8001342:	f004 f97f 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
}
 8001346:	bf00      	nop
 8001348:	bd98      	pop	{r3, r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	200005d3 	.word	0x200005d3
 8001350:	20000004 	.word	0x20000004
 8001354:	200004ac 	.word	0x200004ac
 8001358:	2000021c 	.word	0x2000021c
 800135c:	40590000 	.word	0x40590000
 8001360:	200005d1 	.word	0x200005d1
 8001364:	40020800 	.word	0x40020800
 8001368:	200005d4 	.word	0x200005d4

0800136c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)

//PC13
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

	//HAL_Delay(10);
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <EXTI15_10_IRQHandler+0x28>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <EXTI15_10_IRQHandler+0x1c>
		GPIOA -> ODR ^= GPIO_PIN_5; // toggle LD2 LED
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <EXTI15_10_IRQHandler+0x2c>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <EXTI15_10_IRQHandler+0x2c>)
 8001382:	f083 0320 	eor.w	r3, r3, #32
 8001386:	6153      	str	r3, [r2, #20]

//	__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * 0/100);
//
//	while(1);

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001388:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800138c:	f004 f95a 	bl	8005644 <HAL_GPIO_EXTI_IRQHandler>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013c00 	.word	0x40013c00
 8001398:	40020000 	.word	0x40020000

0800139c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
//	AS5600_GetRawAngleIT(&as5600);
 /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <I2C1_EV_IRQHandler+0x10>)
 80013a2:	f004 fcdd 	bl	8005d60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000310 	.word	0x20000310

080013b0 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4053      	eors	r3, r2
 80013c6:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4053      	eors	r3, r2
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4053      	eors	r3, r2
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4053      	eors	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4053      	eors	r3, r2
 8001400:	b21b      	sxth	r3, r3
 8001402:	b29a      	uxth	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	801a      	strh	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001422:	801a      	strh	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 800143c:	f107 030e 	add.w	r3, r7, #14
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffe7 	bl	8001414 <crc_init>
	while (length--) {
 8001446:	e009      	b.n	800145c <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f107 020e 	add.w	r2, r7, #14
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffaa 	bl	80013b0 <crc_accumulate>
	while (length--) {
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	1e5a      	subs	r2, r3, #1
 8001460:	807a      	strh	r2, [r7, #2]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <crc_calculate+0x18>
        }
        return crcTmp;
 8001466:	89fb      	ldrh	r3, [r7, #14]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	4613      	mov	r3, r2
 800147c:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	617b      	str	r3, [r7, #20]
	while (length--) {
 8001482:	e007      	b.n	8001494 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	617a      	str	r2, [r7, #20]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff8e 	bl	80013b0 <crc_accumulate>
	while (length--) {
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	80fa      	strh	r2, [r7, #6]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f2      	bne.n	8001484 <crc_accumulate_buffer+0x14>
        }
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <mavlink_sha256_init+0x50>)
 80014c0:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <mavlink_sha256_init+0x54>)
 80014c6:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <mavlink_sha256_init+0x58>)
 80014cc:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <mavlink_sha256_init+0x5c>)
 80014d2:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <mavlink_sha256_init+0x60>)
 80014d8:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <mavlink_sha256_init+0x64>)
 80014de:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <mavlink_sha256_init+0x68>)
 80014e4:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <mavlink_sha256_init+0x6c>)
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	6a09e667 	.word	0x6a09e667
 80014fc:	bb67ae85 	.word	0xbb67ae85
 8001500:	3c6ef372 	.word	0x3c6ef372
 8001504:	a54ff53a 	.word	0xa54ff53a
 8001508:	510e527f 	.word	0x510e527f
 800150c:	9b05688c 	.word	0x9b05688c
 8001510:	1f83d9ab 	.word	0x1f83d9ab
 8001514:	5be0cd19 	.word	0x5be0cd19

08001518 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8001518:	b480      	push	{r7}
 800151a:	b0cf      	sub	sp, #316	; 0x13c
 800151c:	af00      	add	r7, sp, #0
 800151e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001522:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001526:	6018      	str	r0, [r3, #0]
 8001528:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800152c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001530:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8001532:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001536:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 8001542:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001546:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 8001552:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001556:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 8001562:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001566:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 8001572:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001576:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 8001582:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001586:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 8001592:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001596:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80015a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015a6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015b8:	e016      	b.n	80015e8 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 80015ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80015c4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80015de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015e2:	3301      	adds	r3, #1
 80015e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	dde4      	ble.n	80015ba <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 80015f0:	2310      	movs	r3, #16
 80015f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015f6:	e069      	b.n	80016cc <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80015f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015fc:	1e9a      	subs	r2, r3, #2
 80015fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160a:	ea4f 4273 	mov.w	r2, r3, ror #17
 800160e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001612:	1e99      	subs	r1, r3, #2
 8001614:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800161c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001620:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8001624:	405a      	eors	r2, r3
 8001626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800162a:	1e99      	subs	r1, r3, #2
 800162c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001634:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001638:	0a9b      	lsrs	r3, r3, #10
 800163a:	405a      	eors	r2, r3
 800163c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001640:	1fd9      	subs	r1, r3, #7
 8001642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800164a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800164e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001654:	f1a3 010f 	sub.w	r1, r3, #15
 8001658:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800165c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001660:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001664:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800166c:	f1a3 000f 	sub.w	r0, r3, #15
 8001670:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001678:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800167c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001680:	4059      	eors	r1, r3
 8001682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001686:	f1a3 000f 	sub.w	r0, r3, #15
 800168a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800168e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001692:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001696:	08db      	lsrs	r3, r3, #3
 8001698:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800169a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800169c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016a0:	f1a3 0110 	sub.w	r1, r3, #16
 80016a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016b0:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80016b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80016c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016c6:	3301      	adds	r3, #1
 80016c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016d0:	2b3f      	cmp	r3, #63	; 0x3f
 80016d2:	dd91      	ble.n	80015f8 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016da:	e078      	b.n	80017ce <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80016dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80016ec:	405a      	eors	r2, r3
 80016ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016f2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80016f6:	405a      	eors	r2, r3
 80016f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016fc:	441a      	add	r2, r3
 80016fe:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001702:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001706:	4019      	ands	r1, r3
 8001708:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800170c:	43d8      	mvns	r0, r3
 800170e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001712:	4003      	ands	r3, r0
 8001714:	404b      	eors	r3, r1
 8001716:	441a      	add	r2, r3
 8001718:	496e      	ldr	r1, [pc, #440]	; (80018d4 <mavlink_sha256_calc+0x3bc>)
 800171a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800171e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001722:	441a      	add	r2, r3
 8001724:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800172c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001730:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800173a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800173e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001742:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001746:	ea4f 3373 	mov.w	r3, r3, ror #13
 800174a:	405a      	eors	r2, r3
 800174c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001750:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001754:	405a      	eors	r2, r3
 8001756:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800175a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800175e:	4059      	eors	r1, r3
 8001760:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001764:	4019      	ands	r1, r3
 8001766:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800176a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800176e:	4003      	ands	r3, r0
 8001770:	404b      	eors	r3, r1
 8001772:	4413      	add	r3, r2
 8001774:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8001778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800177c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001780:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001784:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8001788:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800178c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001790:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001794:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001798:	4413      	add	r3, r2
 800179a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 800179e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80017a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80017ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80017b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80017ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017be:	4413      	add	r3, r2
 80017c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80017c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017c8:	3301      	adds	r3, #1
 80017ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017d2:	2b3f      	cmp	r3, #63	; 0x3f
 80017d4:	dd82      	ble.n	80016dc <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 80017d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017e6:	441a      	add	r2, r3
 80017e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 80017f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001804:	441a      	add	r2, r3
 8001806:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800180a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8001812:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001816:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001822:	441a      	add	r2, r3
 8001824:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8001830:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001834:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001840:	441a      	add	r2, r3
 8001842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001846:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 800184e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001852:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800185e:	441a      	add	r2, r3
 8001860:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001864:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 800186c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001870:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800187c:	441a      	add	r2, r3
 800187e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001882:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 800188a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800188e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a1a      	ldr	r2, [r3, #32]
 8001896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800189a:	441a      	add	r2, r3
 800189c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 80018a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018b8:	441a      	add	r2, r3
 80018ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018c6:	bf00      	nop
 80018c8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	0800d510 	.word	0x0800d510

080018d8 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b09c      	sub	sp, #112	; 0x70
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	441a      	add	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001902:	429a      	cmp	r2, r3
 8001904:	d904      	bls.n	8001910 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001912:	08db      	lsrs	r3, r3, #3
 8001914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001918:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 800191a:	e054      	b.n	80019c6 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 800191c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800191e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001922:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001928:	429a      	cmp	r2, r3
 800192a:	d201      	bcs.n	8001930 <mavlink_sha256_update+0x58>
            l = len;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001938:	4413      	add	r3, r2
 800193a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800193c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fe66 	bl	800a610 <memcpy>
	offset += l;
 8001944:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001948:	4413      	add	r3, r2
 800194a:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 800194c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800194e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001950:	4413      	add	r3, r2
 8001952:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 800195c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d131      	bne.n	80019c6 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3328      	adds	r3, #40	; 0x28
 8001966:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001968:	2300      	movs	r3, #0
 800196a:	663b      	str	r3, [r7, #96]	; 0x60
 800196c:	e020      	b.n	80019b0 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800196e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001974:	4413      	add	r3, r2
 8001976:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001978:	f107 0210 	add.w	r2, r7, #16
 800197c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	78da      	ldrb	r2, [r3, #3]
 8001988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800198a:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 800198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800198e:	3301      	adds	r3, #1
 8001990:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001992:	7892      	ldrb	r2, [r2, #2]
 8001994:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001998:	3302      	adds	r3, #2
 800199a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800199c:	7852      	ldrb	r2, [r2, #1]
 800199e:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80019a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a2:	3303      	adds	r3, #3
 80019a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80019aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ac:	3301      	adds	r3, #1
 80019ae:	663b      	str	r3, [r7, #96]	; 0x60
 80019b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	dddb      	ble.n	800196e <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f7ff fdab 	bl	8001518 <mavlink_sha256_calc>
	    offset = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1a7      	bne.n	800191c <mavlink_sha256_update+0x44>
	}
    }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3770      	adds	r7, #112	; 0x70
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b098      	sub	sp, #96	; 0x60
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80019ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ee:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 80019f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f6:	3301      	adds	r3, #1
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3308      	adds	r3, #8
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	3301      	adds	r3, #1
 8001a0a:	2247      	movs	r2, #71	; 0x47
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f008 fe0c 	bl	800a62c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1a:	3307      	adds	r3, #7
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	3360      	adds	r3, #96	; 0x60
 8001a20:	443b      	add	r3, r7
 8001a22:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0a1a      	lsrs	r2, r3, #8
 8001a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a2e:	3306      	adds	r3, #6
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	3360      	adds	r3, #96	; 0x60
 8001a34:	443b      	add	r3, r7
 8001a36:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0c1a      	lsrs	r2, r3, #16
 8001a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a42:	3305      	adds	r3, #5
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	3360      	adds	r3, #96	; 0x60
 8001a48:	443b      	add	r3, r7
 8001a4a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e1a      	lsrs	r2, r3, #24
 8001a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a56:	3304      	adds	r3, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	3360      	adds	r3, #96	; 0x60
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a68:	3303      	adds	r3, #3
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	3360      	adds	r3, #96	; 0x60
 8001a6e:	443b      	add	r3, r7
 8001a70:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0a1a      	lsrs	r2, r3, #8
 8001a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	3360      	adds	r3, #96	; 0x60
 8001a82:	443b      	add	r3, r7
 8001a84:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1a      	lsrs	r2, r3, #16
 8001a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	3360      	adds	r3, #96	; 0x60
 8001a96:	443b      	add	r3, r7
 8001a98:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	0e1b      	lsrs	r3, r3, #24
 8001aa2:	b2d9      	uxtb	r1, r3
 8001aa4:	f107 020c 	add.w	r2, r7, #12
 8001aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aaa:	4413      	add	r3, r2
 8001aac:	460a      	mov	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ab2:	f103 0208 	add.w	r2, r3, #8
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff0b 	bl	80018d8 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	78da      	ldrb	r2, [r3, #3]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ad0:	7892      	ldrb	r2, [r2, #2]
 8001ad2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ada:	7852      	ldrb	r2, [r2, #1]
 8001adc:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	3304      	adds	r3, #4
 8001aec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aee:	79d2      	ldrb	r2, [r2, #7]
 8001af0:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3305      	adds	r3, #5
 8001af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001af8:	7992      	ldrb	r2, [r2, #6]
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	3760      	adds	r7, #96	; 0x60
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <mavlink_get_channel_status+0x24>)
 8001b1a:	4413      	add	r3, r2
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	20000a6c 	.word	0x20000a6c

08001b2c <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f240 1223 	movw	r2, #291	; 0x123
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <mavlink_get_channel_buffer+0x24>)
 8001b42:	4413      	add	r3, r2
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	200005e0 	.word	0x200005e0

08001b54 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b0a0      	sub	sp, #128	; 0x80
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <mavlink_sign_packet+0x20>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <mavlink_sign_packet+0x24>
	    return 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e04f      	b.n	8001c18 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	785a      	ldrb	r2, [r3, #1]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f107 0110 	add.w	r1, r7, #16
 8001b92:	2206      	movs	r2, #6
 8001b94:	4618      	mov	r0, r3
 8001b96:	f008 fd3b 	bl	800a610 <memcpy>
	signing->timestamp++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ba0:	1c54      	adds	r4, r2, #1
 8001ba2:	f143 0500 	adc.w	r5, r3, #0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fc79 	bl	80014a8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f103 0110 	add.w	r1, r3, #16
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe88 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe81 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001bd6:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001bda:	f107 0318 	add.w	r3, r7, #24
 8001bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fe78 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001be8:	f107 0318 	add.w	r3, r7, #24
 8001bec:	2202      	movs	r2, #2
 8001bee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe70 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe69 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1dda      	adds	r2, r3, #7
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fee0 	bl	80019d6 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001c16:	230d      	movs	r3, #13
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3780      	adds	r7, #128	; 0x80
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdb0      	pop	{r4, r5, r7, pc}

08001c20 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001c2c:	e002      	b.n	8001c34 <_mav_trim_payload+0x14>
		length--;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d906      	bls.n	8001c48 <_mav_trim_payload+0x28>
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f2      	beq.n	8001c2e <_mav_trim_payload+0xe>
	}
	return length;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b0aa      	sub	sp, #168	; 0xa8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <mavlink_signature_check+0x16>
		return true;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e126      	b.n	8001ebc <mavlink_signature_check+0x264>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3302      	adds	r3, #2
 8001c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c84:	3307      	adds	r3, #7
 8001c86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8001c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc0a 	bl	80014a8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f103 0110 	add.w	r1, r3, #16
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fe19 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001caa:	220a      	movs	r2, #10
 8001cac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe11 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f103 010c 	add.w	r1, r3, #12
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe06 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fdfd 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fdf5 	bl	80018d8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001cee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe6c 	bl	80019d6 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8001cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d02:	2206      	movs	r2, #6
 8001d04:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f008 fc71 	bl	800a5f0 <memcmp>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <mavlink_signature_check+0xc0>
		return false;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e0d1      	b.n	8001ebc <mavlink_signature_check+0x264>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001d18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	f107 0318 	add.w	r3, r7, #24
 8001d38:	2206      	movs	r2, #6
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f008 fc68 	bl	800a610 <memcpy>

	if (signing_streams == NULL) {
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <mavlink_signature_check+0xf2>
		return false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e0b8      	b.n	8001ebc <mavlink_signature_check+0x264>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001d50:	e02b      	b.n	8001daa <mavlink_signature_check+0x152>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	79d9      	ldrb	r1, [r3, #7]
 8001d56:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	4403      	add	r3, r0
 8001d64:	3303      	adds	r3, #3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4299      	cmp	r1, r3
 8001d6a:	d119      	bne.n	8001da0 <mavlink_signature_check+0x148>
		    msg->compid == signing_streams->stream[i].compid &&
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7a19      	ldrb	r1, [r3, #8]
 8001d70:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001d74:	68b8      	ldr	r0, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4403      	add	r3, r0
 8001d7e:	3304      	adds	r3, #4
 8001d80:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001d82:	4299      	cmp	r1, r3
 8001d84:	d10c      	bne.n	8001da0 <mavlink_signature_check+0x148>
		    link_id == signing_streams->stream[i].link_id) {
 8001d86:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	3302      	adds	r3, #2
 8001d96:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001d98:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d00b      	beq.n	8001db8 <mavlink_signature_check+0x160>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001da0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001da4:	3301      	adds	r3, #1
 8001da6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3cd      	bcc.n	8001d52 <mavlink_signature_check+0xfa>
 8001db6:	e000      	b.n	8001dba <mavlink_signature_check+0x162>
			break;
 8001db8:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d13e      	bne.n	8001e44 <mavlink_signature_check+0x1ec>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	2b0f      	cmp	r3, #15
 8001dcc:	d901      	bls.n	8001dd2 <mavlink_signature_check+0x17a>
			// over max number of streams
			return false;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e074      	b.n	8001ebc <mavlink_signature_check+0x264>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd6:	493b      	ldr	r1, [pc, #236]	; (8001ec4 <mavlink_signature_check+0x26c>)
 8001dd8:	1854      	adds	r4, r2, r1
 8001dda:	f143 0500 	adc.w	r5, r3, #0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001de4:	4294      	cmp	r4, r2
 8001de6:	eb75 0303 	sbcs.w	r3, r5, r3
 8001dea:	d201      	bcs.n	8001df0 <mavlink_signature_check+0x198>
			return false;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e065      	b.n	8001ebc <mavlink_signature_check+0x264>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001df0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	79d8      	ldrb	r0, [r3, #7]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	3303      	adds	r3, #3
 8001e04:	4602      	mov	r2, r0
 8001e06:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001e08:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7a18      	ldrb	r0, [r3, #8]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001e20:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001e34:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	e01d      	b.n	8001e80 <mavlink_signature_check+0x228>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001e50:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	1d59      	adds	r1, r3, #5
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2206      	movs	r2, #6
 8001e66:	4618      	mov	r0, r3
 8001e68:	f008 fbd2 	bl	800a610 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e74:	4290      	cmp	r0, r2
 8001e76:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e7a:	d301      	bcc.n	8001e80 <mavlink_signature_check+0x228>
			// repeating old timestamp
			return false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e01d      	b.n	8001ebc <mavlink_signature_check+0x264>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001e80:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	1d58      	adds	r0, r3, #5
 8001e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e94:	3301      	adds	r3, #1
 8001e96:	2206      	movs	r2, #6
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f008 fbb9 	bl	800a610 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	eb71 0303 	sbcs.w	r3, r1, r3
 8001eae:	d204      	bcs.n	8001eba <mavlink_signature_check+0x262>
		signing->timestamp = tstamp.t64;
 8001eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	37a8      	adds	r7, #168	; 0xa8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec4:	005b8d80 	.word	0x005b8d80

08001ec8 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	b08f      	sub	sp, #60	; 0x3c
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	72fb      	strb	r3, [r7, #11]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7b1b      	ldrb	r3, [r3, #12]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001eee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <mavlink_finalize_message_buffer+0x4e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <mavlink_finalize_message_buffer+0x4e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <mavlink_finalize_message_buffer+0x4e>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <mavlink_finalize_message_buffer+0x50>
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001f1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001f28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <mavlink_finalize_message_buffer+0x6c>
 8001f30:	230d      	movs	r3, #13
 8001f32:	e000      	b.n	8001f36 <mavlink_finalize_message_buffer+0x6e>
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	22fe      	movs	r2, #254	; 0xfe
 8001f4c:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001f4e:	2306      	movs	r3, #6
 8001f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f54:	e002      	b.n	8001f5c <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22fd      	movs	r2, #253	; 0xfd
 8001f5a:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <mavlink_finalize_message_buffer+0xb2>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	330c      	adds	r3, #12
 8001f68:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe56 	bl	8001c20 <_mav_trim_payload>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	e001      	b.n	8001f7e <mavlink_finalize_message_buffer+0xb6>
 8001f7a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	7afa      	ldrb	r2, [r7, #11]
 8001f86:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	7aba      	ldrb	r2, [r7, #10]
 8001f8c:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001f94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	799a      	ldrb	r2, [r3, #6]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	799b      	ldrb	r3, [r3, #6]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	799b      	ldrb	r3, [r3, #6]
 8001fdc:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	79db      	ldrb	r3, [r3, #7]
 8001fe2:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	7a1b      	ldrb	r3, [r3, #8]
 8001fe8:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	7a5a      	ldrb	r2, [r3, #9]
 8001fee:	7a99      	ldrb	r1, [r3, #10]
 8001ff0:	0209      	lsls	r1, r1, #8
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	7adb      	ldrb	r3, [r3, #11]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	777b      	strb	r3, [r7, #29]
 8001ffe:	e030      	b.n	8002062 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	791b      	ldrb	r3, [r3, #4]
 8002004:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	795b      	ldrb	r3, [r3, #5]
 800200a:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	799b      	ldrb	r3, [r3, #6]
 8002010:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	79db      	ldrb	r3, [r3, #7]
 8002016:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	7a1b      	ldrb	r3, [r3, #8]
 800201c:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	7a5a      	ldrb	r2, [r3, #9]
 8002022:	7a99      	ldrb	r1, [r3, #10]
 8002024:	0209      	lsls	r1, r1, #8
 8002026:	430a      	orrs	r2, r1
 8002028:	7adb      	ldrb	r3, [r3, #11]
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	4313      	orrs	r3, r2
 800202e:	b2db      	uxtb	r3, r3
 8002030:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	7a5a      	ldrb	r2, [r3, #9]
 8002036:	7a99      	ldrb	r1, [r3, #10]
 8002038:	0209      	lsls	r1, r1, #8
 800203a:	430a      	orrs	r2, r1
 800203c:	7adb      	ldrb	r3, [r3, #11]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	4313      	orrs	r3, r2
 8002042:	121b      	asrs	r3, r3, #8
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	7a5a      	ldrb	r2, [r3, #9]
 800204e:	7a99      	ldrb	r1, [r3, #10]
 8002050:	0209      	lsls	r1, r1, #8
 8002052:	430a      	orrs	r2, r1
 8002054:	7adb      	ldrb	r3, [r3, #11]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	4313      	orrs	r3, r2
 800205a:	141b      	asrs	r3, r3, #16
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8002062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	3301      	adds	r3, #1
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f9db 	bl	8001430 <crc_calculate>
 800207a:	4603      	mov	r3, r0
 800207c:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f103 010c 	add.w	r1, r3, #12
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	78db      	ldrb	r3, [r3, #3]
 8002088:	b29a      	uxth	r2, r3
 800208a:	f107 0316 	add.w	r3, r7, #22
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f9ee 	bl	8001470 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8002094:	f107 0216 	add.w	r2, r7, #22
 8002098:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f986 	bl	80013b0 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80020a4:	8af9      	ldrh	r1, [r7, #22]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	330c      	adds	r3, #12
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	78d2      	ldrb	r2, [r2, #3]
 80020ae:	4413      	add	r3, r2
 80020b0:	b2ca      	uxtb	r2, r1
 80020b2:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80020b4:	8afb      	ldrh	r3, [r7, #22]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b299      	uxth	r1, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f103 020c 	add.w	r2, r3, #12
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	78db      	ldrb	r3, [r3, #3]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80020cc:	8afa      	ldrh	r2, [r7, #22]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80020d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01a      	beq.n	8002110 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	310c      	adds	r1, #12
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80020f4:	4401      	add	r1, r0
 80020f6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80020fa:	f107 0018 	add.w	r0, r7, #24
 80020fe:	9102      	str	r1, [sp, #8]
 8002100:	9201      	str	r2, [sp, #4]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4633      	mov	r3, r6
 8002106:	4602      	mov	r2, r0
 8002108:	4629      	mov	r1, r5
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff fd22 	bl	8001b54 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	b29a      	uxth	r2, r3
 8002116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211a:	b29b      	uxth	r3, r3
 800211c:	4413      	add	r3, r2
 800211e:	b29a      	uxth	r2, r3
 8002120:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002124:	b29b      	uxth	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b29b      	uxth	r3, r3
 800212a:	3302      	adds	r3, #2
 800212c:	b29b      	uxth	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	372c      	adds	r7, #44	; 0x2c
 8002132:	46bd      	mov	sp, r7
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002136 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b088      	sub	sp, #32
 800213a:	af04      	add	r7, sp, #16
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	4608      	mov	r0, r1
 8002140:	4611      	mov	r1, r2
 8002142:	461a      	mov	r2, r3
 8002144:	4603      	mov	r3, r0
 8002146:	70fb      	strb	r3, [r7, #3]
 8002148:	460b      	mov	r3, r1
 800214a:	70bb      	strb	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fcd6 	bl	8001b04 <mavlink_get_channel_status>
 8002158:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 800215a:	78ba      	ldrb	r2, [r7, #2]
 800215c:	78f9      	ldrb	r1, [r7, #3]
 800215e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	7f3b      	ldrb	r3, [r7, #28]
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	7e3b      	ldrb	r3, [r7, #24]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff feaa 	bl	8001ec8 <mavlink_finalize_message_buffer>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af04      	add	r7, sp, #16
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	4608      	mov	r0, r1
 8002188:	4611      	mov	r1, r2
 800218a:	461a      	mov	r2, r3
 800218c:	4603      	mov	r3, r0
 800218e:	70fb      	strb	r3, [r7, #3]
 8002190:	460b      	mov	r3, r1
 8002192:	70bb      	strb	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8002198:	78ba      	ldrb	r2, [r7, #2]
 800219a:	78f9      	ldrb	r1, [r7, #3]
 800219c:	7d3b      	ldrb	r3, [r7, #20]
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	7c3b      	ldrb	r3, [r7, #16]
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffc3 	bl	8002136 <mavlink_finalize_message_chan>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	3301      	adds	r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	709a      	strb	r2, [r3, #2]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	78db      	ldrb	r3, [r3, #3]
 80021e8:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	2bfe      	cmp	r3, #254	; 0xfe
 80021f0:	d13a      	bne.n	8002268 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80021f6:	2305      	movs	r3, #5
 80021f8:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	789a      	ldrb	r2, [r3, #2]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3301      	adds	r3, #1
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3302      	adds	r3, #2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	7992      	ldrb	r2, [r2, #6]
 8002212:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3303      	adds	r3, #3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	79d2      	ldrb	r2, [r2, #7]
 800221c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	7a12      	ldrb	r2, [r2, #8]
 8002226:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	7a5a      	ldrb	r2, [r3, #9]
 800222c:	7a99      	ldrb	r1, [r3, #10]
 800222e:	0209      	lsls	r1, r1, #8
 8002230:	430a      	orrs	r2, r1
 8002232:	7adb      	ldrb	r3, [r3, #11]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	4313      	orrs	r3, r2
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3305      	adds	r3, #5
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	1d98      	adds	r0, r3, #6
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f103 010c 	add.w	r1, r3, #12
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	78db      	ldrb	r3, [r3, #3]
 8002250:	461a      	mov	r2, r3
 8002252:	f008 f9dd 	bl	800a610 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8002256:	7dbb      	ldrb	r3, [r7, #22]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	78d2      	ldrb	r2, [r2, #3]
 800225c:	4413      	add	r3, r2
 800225e:	3301      	adds	r3, #1
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e06c      	b.n	8002342 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	330c      	adds	r3, #12
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fcd5 	bl	8001c20 <_mav_trim_payload>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800227a:	2309      	movs	r3, #9
 800227c:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	789a      	ldrb	r2, [r3, #2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3301      	adds	r3, #1
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3302      	adds	r3, #2
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	7912      	ldrb	r2, [r2, #4]
 8002296:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3303      	adds	r3, #3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	7952      	ldrb	r2, [r2, #5]
 80022a0:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	7992      	ldrb	r2, [r2, #6]
 80022aa:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3305      	adds	r3, #5
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	79d2      	ldrb	r2, [r2, #7]
 80022b4:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3306      	adds	r3, #6
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	7a12      	ldrb	r2, [r2, #8]
 80022be:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7a5a      	ldrb	r2, [r3, #9]
 80022c4:	7a99      	ldrb	r1, [r3, #10]
 80022c6:	0209      	lsls	r1, r1, #8
 80022c8:	430a      	orrs	r2, r1
 80022ca:	7adb      	ldrb	r3, [r3, #11]
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	4313      	orrs	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3307      	adds	r3, #7
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	7a5a      	ldrb	r2, [r3, #9]
 80022de:	7a99      	ldrb	r1, [r3, #10]
 80022e0:	0209      	lsls	r1, r1, #8
 80022e2:	430a      	orrs	r2, r1
 80022e4:	7adb      	ldrb	r3, [r3, #11]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	4313      	orrs	r3, r2
 80022ea:	121a      	asrs	r2, r3, #8
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3308      	adds	r3, #8
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	7a5a      	ldrb	r2, [r3, #9]
 80022f8:	7a99      	ldrb	r1, [r3, #10]
 80022fa:	0209      	lsls	r1, r1, #8
 80022fc:	430a      	orrs	r2, r1
 80022fe:	7adb      	ldrb	r3, [r3, #11]
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	4313      	orrs	r3, r2
 8002304:	141a      	asrs	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3309      	adds	r3, #9
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f103 000a 	add.w	r0, r3, #10
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	330c      	adds	r3, #12
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	4619      	mov	r1, r3
 800231c:	f008 f978 	bl	800a610 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8002320:	7dba      	ldrb	r2, [r7, #22]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	4413      	add	r3, r2
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	791b      	ldrb	r3, [r3, #4]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <mavlink_msg_to_send_buffer+0x164>
 800233a:	230d      	movs	r3, #13
 800233c:	e000      	b.n	8002340 <mavlink_msg_to_send_buffer+0x166>
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	b2da      	uxtb	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b29a      	uxth	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	3301      	adds	r3, #1
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1c98      	adds	r0, r3, #2
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8002370:	7dfa      	ldrb	r2, [r7, #23]
 8002372:	4619      	mov	r1, r3
 8002374:	f008 f94c 	bl	800a610 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8002378:	7dbb      	ldrb	r3, [r7, #22]
 800237a:	b29a      	uxth	r2, r3
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4413      	add	r3, r2
 8002382:	b29a      	uxth	r2, r3
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	3303      	adds	r3, #3
 800238e:	b29b      	uxth	r3, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 80023a4:	f107 030e 	add.w	r3, r7, #14
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f833 	bl	8001414 <crc_init>
	msg->checksum = crcTmp;
 80023ae:	89fa      	ldrh	r2, [r7, #14]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	801a      	strh	r2, [r3, #0]
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 80023d0:	f107 020e 	add.w	r2, r7, #14
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe ffe9 	bl	80013b0 <crc_accumulate>
	msg->checksum = checksum;
 80023de:	89fa      	ldrh	r2, [r7, #14]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	801a      	strh	r2, [r3, #0]
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	23dc      	movs	r3, #220	; 0xdc
 80023fa:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80023fc:	e025      	b.n	800244a <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	3301      	adds	r3, #1
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800240a:	491f      	ldr	r1, [pc, #124]	; (8002488 <mavlink_get_msg_entry+0x9c>)
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d203      	bcs.n	8002428 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
                continue;
 8002426:	e010      	b.n	800244a <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8002428:	4917      	ldr	r1, [pc, #92]	; (8002488 <mavlink_get_msg_entry+0x9c>)
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d902      	bls.n	8002444 <mavlink_get_msg_entry+0x58>
                low = mid;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	617b      	str	r3, [r7, #20]
                continue;
 8002442:	e002      	b.n	800244a <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	617b      	str	r3, [r7, #20]
            break;
 8002448:	e003      	b.n	8002452 <mavlink_get_msg_entry+0x66>
        while (low < high) {
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	429a      	cmp	r2, r3
 8002450:	d3d5      	bcc.n	80023fe <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <mavlink_get_msg_entry+0x9c>)
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	e006      	b.n	800247a <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <mavlink_get_msg_entry+0x9c>)
 8002478:	4413      	add	r3, r2
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	0800d610 	.word	0x0800d610

0800248c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	78db      	ldrb	r3, [r3, #3]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f200 826e 	bhi.w	800298c <mavlink_frame_char_buffer+0x500>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <mavlink_frame_char_buffer+0x2c>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024f9 	.word	0x080024f9
 80024bc:	080024f9 	.word	0x080024f9
 80024c0:	08002557 	.word	0x08002557
 80024c4:	080025bd 	.word	0x080025bd
 80024c8:	080025f5 	.word	0x080025f5
 80024cc:	0800260d 	.word	0x0800260d
 80024d0:	08002625 	.word	0x08002625
 80024d4:	0800263d 	.word	0x0800263d
 80024d8:	08002655 	.word	0x08002655
 80024dc:	080026af 	.word	0x080026af
 80024e0:	080026fb 	.word	0x080026fb
 80024e4:	08002757 	.word	0x08002757
 80024e8:	0800278f 	.word	0x0800278f
 80024ec:	0800281b 	.word	0x0800281b
 80024f0:	0800281b 	.word	0x0800281b
 80024f4:	080028d7 	.word	0x080028d7
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	2bfd      	cmp	r3, #253	; 0xfd
 80024fc:	d113      	bne.n	8002526 <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2202      	movs	r2, #2
 8002502:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	7b1b      	ldrb	r3, [r3, #12]
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff ff3a 	bl	8002398 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8002524:	e229      	b.n	800297a <mavlink_frame_char_buffer+0x4ee>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2bfe      	cmp	r3, #254	; 0xfe
 800252a:	f040 8226 	bne.w	800297a <mavlink_frame_char_buffer+0x4ee>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2202      	movs	r2, #2
 8002532:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	7b1b      	ldrb	r3, [r3, #12]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff ff22 	bl	8002398 <mavlink_start_checksum>
		break;
 8002554:	e211      	b.n	800297a <mavlink_frame_char_buffer+0x4ee>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00f      	beq.n	800257e <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	3301      	adds	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 800256a:	68b8      	ldr	r0, [r7, #8]
 800256c:	f7ff fe25 	bl	80021ba <_mav_parse_error>
			status->msg_received = 0;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2201      	movs	r2, #1
 800257a:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 800257c:	e206      	b.n	800298c <mavlink_frame_char_buffer+0x500>
			rxmsg->len = c;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	79fa      	ldrb	r2, [r7, #7]
 8002582:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4619      	mov	r1, r3
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff ff14 	bl	80023bc <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2205      	movs	r2, #5
 80025b0:	70da      	strb	r2, [r3, #3]
		break;
 80025b2:	e1eb      	b.n	800298c <mavlink_frame_char_buffer+0x500>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2203      	movs	r2, #3
 80025b8:	70da      	strb	r2, [r3, #3]
		break;
 80025ba:	e1e7      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	79fa      	ldrb	r2, [r7, #7]
 80025c0:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	791b      	ldrb	r3, [r3, #4]
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f7ff fdf3 	bl	80021ba <_mav_parse_error>
			status->msg_received = 0;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2201      	movs	r2, #1
 80025de:	70da      	strb	r2, [r3, #3]
			break;
 80025e0:	e1d4      	b.n	800298c <mavlink_frame_char_buffer+0x500>
		}
		mavlink_update_checksum(rxmsg, c);
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4619      	mov	r1, r3
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff fee8 	bl	80023bc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2204      	movs	r2, #4
 80025f0:	70da      	strb	r2, [r3, #3]
		break;
 80025f2:	e1cb      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	4619      	mov	r1, r3
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff fedc 	bl	80023bc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2205      	movs	r2, #5
 8002608:	70da      	strb	r2, [r3, #3]
		break;
 800260a:	e1bf      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4619      	mov	r1, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff fed0 	bl	80023bc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2206      	movs	r2, #6
 8002620:	70da      	strb	r2, [r3, #3]
		break;
 8002622:	e1b3      	b.n	800298c <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	79fa      	ldrb	r2, [r7, #7]
 8002628:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fec4 	bl	80023bc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2207      	movs	r2, #7
 8002638:	70da      	strb	r2, [r3, #3]
		break;
 800263a:	e1a7      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4619      	mov	r1, r3
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff feb8 	bl	80023bc <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2208      	movs	r2, #8
 8002650:	70da      	strb	r2, [r3, #3]
		break;
 8002652:	e19b      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	b2d9      	uxtb	r1, r3
 800265e:	2000      	movs	r0, #0
 8002660:	4301      	orrs	r1, r0
 8002662:	7251      	strb	r1, [r2, #9]
 8002664:	0a19      	lsrs	r1, r3, #8
 8002666:	b2c9      	uxtb	r1, r1
 8002668:	2000      	movs	r0, #0
 800266a:	4301      	orrs	r1, r0
 800266c:	7291      	strb	r1, [r2, #10]
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2100      	movs	r1, #0
 8002674:	430b      	orrs	r3, r1
 8002676:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4619      	mov	r1, r3
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fe9d 	bl	80023bc <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	7b1b      	ldrb	r3, [r3, #12]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	78db      	ldrb	r3, [r3, #3]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	220b      	movs	r2, #11
 800269a:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 800269c:	e176      	b.n	800298c <mavlink_frame_char_buffer+0x500>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	220c      	movs	r2, #12
 80026a2:	70da      	strb	r2, [r3, #3]
		break;
 80026a4:	e172      	b.n	800298c <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2209      	movs	r2, #9
 80026aa:	70da      	strb	r2, [r3, #3]
		break;
 80026ac:	e16e      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	7a5a      	ldrb	r2, [r3, #9]
 80026b2:	7a99      	ldrb	r1, [r3, #10]
 80026b4:	0209      	lsls	r1, r1, #8
 80026b6:	430a      	orrs	r2, r1
 80026b8:	7adb      	ldrb	r3, [r3, #11]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	4313      	orrs	r3, r2
 80026be:	461a      	mov	r2, r3
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	b2d1      	uxtb	r1, r2
 80026ce:	2000      	movs	r0, #0
 80026d0:	4301      	orrs	r1, r0
 80026d2:	7259      	strb	r1, [r3, #9]
 80026d4:	0a11      	lsrs	r1, r2, #8
 80026d6:	b2c9      	uxtb	r1, r1
 80026d8:	2000      	movs	r0, #0
 80026da:	4301      	orrs	r1, r0
 80026dc:	7299      	strb	r1, [r3, #10]
 80026de:	0c12      	lsrs	r2, r2, #16
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	2100      	movs	r1, #0
 80026e4:	430a      	orrs	r2, r1
 80026e6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	4619      	mov	r1, r3
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fe65 	bl	80023bc <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	220a      	movs	r2, #10
 80026f6:	70da      	strb	r2, [r3, #3]
		break;
 80026f8:	e148      	b.n	800298c <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	7a5a      	ldrb	r2, [r3, #9]
 80026fe:	7a99      	ldrb	r1, [r3, #10]
 8002700:	0209      	lsls	r1, r1, #8
 8002702:	430a      	orrs	r2, r1
 8002704:	7adb      	ldrb	r3, [r3, #11]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	4313      	orrs	r3, r2
 800270a:	461a      	mov	r2, r3
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	4313      	orrs	r3, r2
 8002712:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	b2d1      	uxtb	r1, r2
 800271a:	2000      	movs	r0, #0
 800271c:	4301      	orrs	r1, r0
 800271e:	7259      	strb	r1, [r3, #9]
 8002720:	0a11      	lsrs	r1, r2, #8
 8002722:	b2c9      	uxtb	r1, r1
 8002724:	2000      	movs	r0, #0
 8002726:	4301      	orrs	r1, r0
 8002728:	7299      	strb	r1, [r3, #10]
 800272a:	0c12      	lsrs	r2, r2, #16
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	2100      	movs	r1, #0
 8002730:	430a      	orrs	r2, r1
 8002732:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff fe3f 	bl	80023bc <mavlink_update_checksum>
		if(rxmsg->len > 0){
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	78db      	ldrb	r3, [r3, #3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	220b      	movs	r2, #11
 800274a:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 800274c:	e11e      	b.n	800298c <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	220c      	movs	r2, #12
 8002752:	70da      	strb	r2, [r3, #3]
		break;
 8002754:	e11a      	b.n	800298c <mavlink_frame_char_buffer+0x500>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f103 020c 	add.w	r2, r3, #12
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	1c59      	adds	r1, r3, #1
 8002762:	b2c8      	uxtb	r0, r1
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	7108      	strb	r0, [r1, #4]
 8002768:	4413      	add	r3, r2
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4619      	mov	r1, r3
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fe22 	bl	80023bc <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	791a      	ldrb	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 80fc 	bne.w	800297e <mavlink_frame_char_buffer+0x4f2>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	220c      	movs	r2, #12
 800278a:	70da      	strb	r2, [r3, #3]
		}
		break;
 800278c:	e0f7      	b.n	800297e <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	7a5a      	ldrb	r2, [r3, #9]
 8002792:	7a99      	ldrb	r1, [r3, #10]
 8002794:	0209      	lsls	r1, r1, #8
 8002796:	430a      	orrs	r2, r1
 8002798:	7adb      	ldrb	r3, [r3, #11]
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	4313      	orrs	r3, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fe24 	bl	80023ec <mavlink_get_msg_entry>
 80027a4:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <mavlink_frame_char_buffer+0x326>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	791b      	ldrb	r3, [r3, #4]
 80027b0:	e000      	b.n	80027b4 <mavlink_frame_char_buffer+0x328>
 80027b2:	2300      	movs	r3, #0
 80027b4:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	4619      	mov	r1, r3
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fdfe 	bl	80023bc <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 80027c0:	79fa      	ldrb	r2, [r7, #7]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d003      	beq.n	80027d6 <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	220e      	movs	r2, #14
 80027d2:	70da      	strb	r2, [r3, #3]
 80027d4:	e002      	b.n	80027dc <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	220d      	movs	r2, #13
 80027da:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	79fa      	ldrb	r2, [r7, #7]
 80027e0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80cb 	beq.w	8002982 <mavlink_frame_char_buffer+0x4f6>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	791a      	ldrb	r2, [r3, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	799b      	ldrb	r3, [r3, #6]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f080 80c4 	bcs.w	8002982 <mavlink_frame_char_buffer+0x4f6>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	330c      	adds	r3, #12
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	7912      	ldrb	r2, [r2, #4]
 8002802:	1898      	adds	r0, r3, r2
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	799b      	ldrb	r3, [r3, #6]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	791b      	ldrb	r3, [r3, #4]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	461a      	mov	r2, r3
 8002812:	2100      	movs	r1, #0
 8002814:	f007 ff0a 	bl	800a62c <memset>
		}
		break;
 8002818:	e0b3      	b.n	8002982 <mavlink_frame_char_buffer+0x4f6>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	78db      	ldrb	r3, [r3, #3]
 800281e:	2b0e      	cmp	r3, #14
 8002820:	d008      	beq.n	8002834 <mavlink_frame_char_buffer+0x3a8>
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29b      	uxth	r3, r3
 8002830:	429a      	cmp	r2, r3
 8002832:	d003      	beq.n	800283c <mavlink_frame_char_buffer+0x3b0>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2202      	movs	r2, #2
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e002      	b.n	8002842 <mavlink_frame_char_buffer+0x3b6>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	79fa      	ldrb	r2, [r7, #7]
 8002846:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	791b      	ldrb	r3, [r3, #4]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00e      	beq.n	8002874 <mavlink_frame_char_buffer+0x3e8>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	220f      	movs	r2, #15
 800285a:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	220d      	movs	r2, #13
 8002860:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	f000 808d 	beq.w	8002986 <mavlink_frame_char_buffer+0x4fa>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8002872:	e088      	b.n	8002986 <mavlink_frame_char_buffer+0x4fa>
			if (status->signing &&
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01f      	beq.n	80028bc <mavlink_frame_char_buffer+0x430>
			   	(status->signing->accept_unsigned_callback == NULL ||
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <mavlink_frame_char_buffer+0x422>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	7a59      	ldrb	r1, [r3, #9]
 8002890:	7a98      	ldrb	r0, [r3, #10]
 8002892:	0200      	lsls	r0, r0, #8
 8002894:	4301      	orrs	r1, r0
 8002896:	7adb      	ldrb	r3, [r3, #11]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	430b      	orrs	r3, r1
 800289c:	4619      	mov	r1, r3
 800289e:	68b8      	ldr	r0, [r7, #8]
 80028a0:	4790      	blx	r2
 80028a2:	4603      	mov	r3, r0
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <mavlink_frame_char_buffer+0x430>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d002      	beq.n	80028bc <mavlink_frame_char_buffer+0x430>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2203      	movs	r2, #3
 80028ba:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2201      	movs	r2, #1
 80028c0:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05e      	beq.n	8002986 <mavlink_frame_char_buffer+0x4fa>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80028c8:	f240 1223 	movw	r2, #291	; 0x123
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f007 fe9e 	bl	800a610 <memcpy>
		break;
 80028d4:	e057      	b.n	8002986 <mavlink_frame_char_buffer+0x4fa>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	7b5b      	ldrb	r3, [r3, #13]
 80028da:	f1c3 030d 	rsb	r3, r3, #13
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	79fa      	ldrb	r2, [r7, #7]
 80028e4:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	7b5b      	ldrb	r3, [r3, #13]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	7b5b      	ldrb	r3, [r3, #13]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d146      	bne.n	800298a <mavlink_frame_char_buffer+0x4fe>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6918      	ldr	r0, [r3, #16]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4619      	mov	r1, r3
 8002908:	f7ff f9a6 	bl	8001c58 <mavlink_signature_check>
 800290c:	4603      	mov	r3, r0
 800290e:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d017      	beq.n	800294c <mavlink_frame_char_buffer+0x4c0>
			   	(status->signing->accept_unsigned_callback &&
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <mavlink_frame_char_buffer+0x4c0>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	7a59      	ldrb	r1, [r3, #9]
 8002930:	7a98      	ldrb	r0, [r3, #10]
 8002932:	0200      	lsls	r0, r0, #8
 8002934:	4301      	orrs	r1, r0
 8002936:	7adb      	ldrb	r3, [r3, #11]
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	430b      	orrs	r3, r1
 800293c:	4619      	mov	r1, r3
 800293e:	68b8      	ldr	r0, [r7, #8]
 8002940:	4790      	blx	r2
 8002942:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <mavlink_frame_char_buffer+0x4c0>
				// accepted via application level override
				sig_ok = true;
 8002948:	2301      	movs	r3, #1
 800294a:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 800294c:	7ffb      	ldrb	r3, [r7, #31]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <mavlink_frame_char_buffer+0x4ce>
				status->msg_received = MAVLINK_FRAMING_OK;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e002      	b.n	8002960 <mavlink_frame_char_buffer+0x4d4>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2203      	movs	r2, #3
 800295e:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2201      	movs	r2, #1
 8002964:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800296c:	f240 1223 	movw	r2, #291	; 0x123
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f007 fe4c 	bl	800a610 <memcpy>
			}
		}
		break;
 8002978:	e007      	b.n	800298a <mavlink_frame_char_buffer+0x4fe>
		break;
 800297a:	bf00      	nop
 800297c:	e006      	b.n	800298c <mavlink_frame_char_buffer+0x500>
		break;
 800297e:	bf00      	nop
 8002980:	e004      	b.n	800298c <mavlink_frame_char_buffer+0x500>
		break;
 8002982:	bf00      	nop
 8002984:	e002      	b.n	800298c <mavlink_frame_char_buffer+0x500>
		break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <mavlink_frame_char_buffer+0x500>
		break;
 800298a:	bf00      	nop
	}

	bufferIndex++;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	3301      	adds	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d110      	bne.n	80029bc <mavlink_frame_char_buffer+0x530>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	799a      	ldrb	r2, [r3, #6]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	891b      	ldrh	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <mavlink_frame_char_buffer+0x524>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	891b      	ldrh	r3, [r3, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <mavlink_frame_char_buffer+0x53e>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	78da      	ldrb	r2, [r3, #3]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01a      	beq.n	8002a06 <mavlink_frame_char_buffer+0x57a>
           r_mavlink_status->parse_state = status->parse_state;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	78da      	ldrb	r2, [r3, #3]
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	791a      	ldrb	r2, [r3, #4]
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	795b      	ldrb	r3, [r3, #5]
 80029e4:	3301      	adds	r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	891a      	ldrh	r2, [r3, #8]
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	7b1a      	ldrb	r2, [r3, #12]
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d110      	bne.n	8002a36 <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop

08002a44 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60ba      	str	r2, [r7, #8]
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4603      	mov	r3, r0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	460b      	mov	r3, r1
 8002a54:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f867 	bl	8001b2c <mavlink_get_channel_buffer>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f84e 	bl	8001b04 <mavlink_get_channel_status>
 8002a68:	4601      	mov	r1, r0
 8002a6a:	7bba      	ldrb	r2, [r7, #14]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff fd0a 	bl	800248c <mavlink_frame_char_buffer>
 8002a78:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}

08002a82 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b088      	sub	sp, #32
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60ba      	str	r2, [r7, #8]
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	460b      	mov	r3, r1
 8002a92:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002a94:	7bb9      	ldrb	r1, [r7, #14]
 8002a96:	7bf8      	ldrb	r0, [r7, #15]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f7ff ffd2 	bl	8002a44 <mavlink_frame_char>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002aa4:	7ffb      	ldrb	r3, [r7, #31]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d002      	beq.n	8002ab0 <mavlink_parse_char+0x2e>
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d120      	bne.n	8002af2 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f83a 	bl	8001b2c <mavlink_get_channel_buffer>
 8002ab8:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f821 	bl	8001b04 <mavlink_get_channel_status>
 8002ac2:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f7ff fb78 	bl	80021ba <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002ad6:	7bbb      	ldrb	r3, [r7, #14]
 8002ad8:	2bfd      	cmp	r3, #253	; 0xfd
 8002ada:	d108      	bne.n	8002aee <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002ae8:	69b8      	ldr	r0, [r7, #24]
 8002aea:	f7ff fc55 	bl	8002398 <mavlink_start_checksum>
	    }
	    return 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8002af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <mavlink_msg_attitude_decode>:
 *
 * @param msg The message to decode
 * @param attitude C-struct to decode the message contents into
 */
static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    attitude->yaw = mavlink_msg_attitude_get_yaw(msg);
    attitude->rollspeed = mavlink_msg_attitude_get_rollspeed(msg);
    attitude->pitchspeed = mavlink_msg_attitude_get_pitchspeed(msg);
    attitude->yawspeed = mavlink_msg_attitude_get_yawspeed(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_ATTITUDE_LEN? msg->len : MAVLINK_MSG_ID_ATTITUDE_LEN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	2b1c      	cmp	r3, #28
 8002b0c:	bf28      	it	cs
 8002b0e:	231c      	movcs	r3, #28
 8002b10:	73fb      	strb	r3, [r7, #15]
        memset(attitude, 0, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8002b12:	221c      	movs	r2, #28
 8002b14:	2100      	movs	r1, #0
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f007 fd88 	bl	800a62c <memset>
    memcpy(attitude, _MAV_PAYLOAD(msg), len);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	4619      	mov	r1, r3
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f007 fd73 	bl	800a610 <memcpy>
#endif
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <mavlink_msg_command_int_decode>:
 *
 * @param msg The message to decode
 * @param command_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_int_decode(const mavlink_message_t* msg, mavlink_command_int_t* command_int)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
    command_int->target_component = mavlink_msg_command_int_get_target_component(msg);
    command_int->frame = mavlink_msg_command_int_get_frame(msg);
    command_int->current = mavlink_msg_command_int_get_current(msg);
    command_int->autocontinue = mavlink_msg_command_int_get_autocontinue(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_INT_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_INT_LEN;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	78db      	ldrb	r3, [r3, #3]
 8002b40:	2b23      	cmp	r3, #35	; 0x23
 8002b42:	bf28      	it	cs
 8002b44:	2323      	movcs	r3, #35	; 0x23
 8002b46:	73fb      	strb	r3, [r7, #15]
        memset(command_int, 0, MAVLINK_MSG_ID_COMMAND_INT_LEN);
 8002b48:	2223      	movs	r2, #35	; 0x23
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	6838      	ldr	r0, [r7, #0]
 8002b4e:	f007 fd6d 	bl	800a62c <memset>
    memcpy(command_int, _MAV_PAYLOAD(msg), len);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	330c      	adds	r3, #12
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6838      	ldr	r0, [r7, #0]
 8002b5c:	f007 fd58 	bl	800a610 <memcpy>
#endif
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    command_long->command = mavlink_msg_command_long_get_command(msg);
    command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
    command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
    command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_LONG_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_LONG_LEN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	78db      	ldrb	r3, [r3, #3]
 8002b76:	2b21      	cmp	r3, #33	; 0x21
 8002b78:	bf28      	it	cs
 8002b7a:	2321      	movcs	r3, #33	; 0x21
 8002b7c:	73fb      	strb	r3, [r7, #15]
        memset(command_long, 0, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8002b7e:	2221      	movs	r2, #33	; 0x21
 8002b80:	2100      	movs	r1, #0
 8002b82:	6838      	ldr	r0, [r7, #0]
 8002b84:	f007 fd52 	bl	800a62c <memset>
    memcpy(command_long, _MAV_PAYLOAD(msg), len);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f007 fd3d 	bl	800a610 <memcpy>
#endif
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <mavlink_msg_command_ack_pack>:
 * @param target_component  Component ID of the target recipient. This is the ID of the system that sent the command for which this COMMAND_ACK is an acknowledgement.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t command, uint8_t result, uint8_t progress, int32_t result_param2, uint8_t target_system, uint8_t target_component)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b088      	sub	sp, #32
 8002ba2:	af02      	add	r7, sp, #8
 8002ba4:	603a      	str	r2, [r7, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	460b      	mov	r3, r1
 8002bae:	71bb      	strb	r3, [r7, #6]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80bb      	strh	r3, [r7, #4]
    _mav_put_uint8_t(buf, 9, target_component);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
#else
    mavlink_command_ack_t packet;
    packet.command = command;
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
 8002bb6:	81bb      	strh	r3, [r7, #12]
    packet.result = result;
 8002bb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bbc:	73bb      	strb	r3, [r7, #14]
    packet.progress = progress;
 8002bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bc2:	73fb      	strb	r3, [r7, #15]
    packet.result_param2 = result_param2;
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	613b      	str	r3, [r7, #16]
    packet.target_system = target_system;
 8002bc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bcc:	753b      	strb	r3, [r7, #20]
    packet.target_component = target_component;
 8002bce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002bd2:	757b      	strb	r3, [r7, #21]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	f107 010c 	add.w	r1, r7, #12
 8002bdc:	220a      	movs	r2, #10
 8002bde:	4618      	mov	r0, r3
 8002be0:	f007 fd16 	bl	800a610 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMMAND_ACK;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8002bec:	725a      	strb	r2, [r3, #9]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	729a      	strb	r2, [r3, #10]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_COMMAND_ACK_MIN_LEN, MAVLINK_MSG_ID_COMMAND_ACK_LEN, MAVLINK_MSG_ID_COMMAND_ACK_CRC);
 8002bf6:	79ba      	ldrb	r2, [r7, #6]
 8002bf8:	79f9      	ldrb	r1, [r7, #7]
 8002bfa:	238f      	movs	r3, #143	; 0x8f
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	230a      	movs	r3, #10
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2303      	movs	r3, #3
 8002c04:	6838      	ldr	r0, [r7, #0]
 8002c06:	f7ff faba 	bl	800217e <mavlink_finalize_message>
 8002c0a:	4603      	mov	r3, r0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <mavlink_msg_command_ack_decode>:
 *
 * @param msg The message to decode
 * @param command_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    command_ack->progress = mavlink_msg_command_ack_get_progress(msg);
    command_ack->result_param2 = mavlink_msg_command_ack_get_result_param2(msg);
    command_ack->target_system = mavlink_msg_command_ack_get_target_system(msg);
    command_ack->target_component = mavlink_msg_command_ack_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_ACK_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_ACK_LEN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	78db      	ldrb	r3, [r3, #3]
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	bf28      	it	cs
 8002c26:	230a      	movcs	r3, #10
 8002c28:	73fb      	strb	r3, [r7, #15]
        memset(command_ack, 0, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
 8002c2a:	220a      	movs	r2, #10
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	f007 fcfc 	bl	800a62c <memset>
    memcpy(command_ack, _MAV_PAYLOAD(msg), len);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	330c      	adds	r3, #12
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	f007 fce7 	bl	800a610 <memcpy>
#endif
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <mavlink_msg_battery_status_decode>:
 *
 * @param msg The message to decode
 * @param battery_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
    battery_status->charge_state = mavlink_msg_battery_status_get_charge_state(msg);
    mavlink_msg_battery_status_get_voltages_ext(msg, battery_status->voltages_ext);
    battery_status->mode = mavlink_msg_battery_status_get_mode(msg);
    battery_status->fault_bitmask = mavlink_msg_battery_status_get_fault_bitmask(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_BATTERY_STATUS_LEN? msg->len : MAVLINK_MSG_ID_BATTERY_STATUS_LEN;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	78db      	ldrb	r3, [r3, #3]
 8002c58:	2b36      	cmp	r3, #54	; 0x36
 8002c5a:	bf28      	it	cs
 8002c5c:	2336      	movcs	r3, #54	; 0x36
 8002c5e:	73fb      	strb	r3, [r7, #15]
        memset(battery_status, 0, MAVLINK_MSG_ID_BATTERY_STATUS_LEN);
 8002c60:	2236      	movs	r2, #54	; 0x36
 8002c62:	2100      	movs	r1, #0
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	f007 fce1 	bl	800a62c <memset>
    memcpy(battery_status, _MAV_PAYLOAD(msg), len);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	4619      	mov	r1, r3
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	f007 fccc 	bl	800a610 <memcpy>
#endif
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <mavlink_msg_winch_status_pack>:
 * @param status  Status flags
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_winch_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float line_length, float speed, float tension, float voltage, float current, int16_t temperature, uint32_t status)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b094      	sub	sp, #80	; 0x50
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	4603      	mov	r3, r0
 8002c88:	61ba      	str	r2, [r7, #24]
 8002c8a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c8e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c92:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c96:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c9a:	ed87 2a01 	vstr	s4, [r7, #4]
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	77bb      	strb	r3, [r7, #30]
    _mav_put_int16_t(buf, 32, temperature);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_WINCH_STATUS_LEN);
#else
    mavlink_winch_status_t packet;
    packet.time_usec = time_usec;
 8002ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ca8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    packet.line_length = line_length;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.speed = speed;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    packet.tension = tension;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
    packet.voltage = voltage;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
    packet.current = current;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    packet.status = status;
 8002cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    packet.temperature = temperature;
 8002cc4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002cc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_WINCH_STATUS_LEN);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	f107 0120 	add.w	r1, r7, #32
 8002cd4:	2222      	movs	r2, #34	; 0x22
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f007 fc9a 	bl	800a610 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_WINCH_STATUS;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8002ce4:	725a      	strb	r2, [r3, #9]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 8002cec:	729a      	strb	r2, [r3, #10]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_WINCH_STATUS_MIN_LEN, MAVLINK_MSG_ID_WINCH_STATUS_LEN, MAVLINK_MSG_ID_WINCH_STATUS_CRC);
 8002cf2:	7fba      	ldrb	r2, [r7, #30]
 8002cf4:	7ff9      	ldrb	r1, [r7, #31]
 8002cf6:	2375      	movs	r3, #117	; 0x75
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	2322      	movs	r3, #34	; 0x22
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2322      	movs	r3, #34	; 0x22
 8002d00:	69b8      	ldr	r0, [r7, #24]
 8002d02:	f7ff fa3c 	bl	800217e <mavlink_finalize_message>
 8002d06:	4603      	mov	r3, r0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3748      	adds	r7, #72	; 0x48
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	603a      	str	r2, [r7, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	71bb      	strb	r3, [r7, #6]
 8002d22:	4613      	mov	r3, r2
 8002d24:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8002d2a:	797b      	ldrb	r3, [r7, #5]
 8002d2c:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8002d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d32:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002d34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d38:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8002d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d3e:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8002d40:	2303      	movs	r3, #3
 8002d42:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	f107 010c 	add.w	r1, r7, #12
 8002d4c:	2209      	movs	r2, #9
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f007 fc5e 	bl	800a610 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	725a      	strb	r2, [r3, #9]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	729a      	strb	r2, [r3, #10]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002d62:	79ba      	ldrb	r2, [r7, #6]
 8002d64:	79f9      	ldrb	r1, [r7, #7]
 8002d66:	2332      	movs	r3, #50	; 0x32
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2309      	movs	r3, #9
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2309      	movs	r3, #9
 8002d70:	6838      	ldr	r0, [r7, #0]
 8002d72:	f7ff fa04 	bl	800217e <mavlink_finalize_message>
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	78db      	ldrb	r3, [r3, #3]
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	bf28      	it	cs
 8002d92:	2309      	movcs	r3, #9
 8002d94:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002d96:	2209      	movs	r2, #9
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6838      	ldr	r0, [r7, #0]
 8002d9c:	f007 fc46 	bl	800a62c <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	330c      	adds	r3, #12
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f007 fc31 	bl	800a610 <memcpy>
#endif
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <MavLinkReceive>:
uint16_t ComID = 0;


//Connected to the UART Interrupt. Try to differ the sub-routine to handle the complicated task.
void MavLinkReceive(UART_HandleTypeDef* huart, uint8_t byte)
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002dc4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8002dc8:	6018      	str	r0, [r3, #0]
 8002dca:	460a      	mov	r2, r1
 8002dcc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002dd0:	f2a3 23b5 	subw	r3, r3, #693	; 0x2b5
 8002dd4:	701a      	strb	r2, [r3, #0]
	mavlink_message_t msg;
	mavlink_status_t status;
	uint8_t* buff[64] = {0};
 8002dd6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002dda:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8002dde:	4618      	mov	r0, r3
 8002de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de4:	461a      	mov	r2, r3
 8002de6:	2100      	movs	r1, #0
 8002de8:	f007 fc20 	bl	800a62c <memset>

		if(mavlink_parse_char(MAVLINK_COMM_3, byte, &msg, &status))
 8002dec:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8002df0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002df4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002df8:	f2a3 23b5 	subw	r3, r3, #693	; 0x2b5
 8002dfc:	7819      	ldrb	r1, [r3, #0]
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2003      	movs	r0, #3
 8002e02:	f7ff fe3e 	bl	8002a82 <mavlink_parse_char>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80e8 	beq.w	8002fde <MavLinkReceive+0x226>
		{


			switch(msg.msgid)
 8002e0e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002e12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002e1c:	2b93      	cmp	r3, #147	; 0x93
 8002e1e:	d046      	beq.n	8002eae <MavLinkReceive+0xf6>
 8002e20:	2b93      	cmp	r3, #147	; 0x93
 8002e22:	f300 80db 	bgt.w	8002fdc <MavLinkReceive+0x224>
 8002e26:	2b4d      	cmp	r3, #77	; 0x4d
 8002e28:	d04a      	beq.n	8002ec0 <MavLinkReceive+0x108>
 8002e2a:	2b4d      	cmp	r3, #77	; 0x4d
 8002e2c:	f300 80d6 	bgt.w	8002fdc <MavLinkReceive+0x224>
 8002e30:	2b4c      	cmp	r3, #76	; 0x4c
 8002e32:	d067      	beq.n	8002f04 <MavLinkReceive+0x14c>
 8002e34:	2b4c      	cmp	r3, #76	; 0x4c
 8002e36:	f300 80d1 	bgt.w	8002fdc <MavLinkReceive+0x224>
 8002e3a:	2b4b      	cmp	r3, #75	; 0x4b
 8002e3c:	f000 8085 	beq.w	8002f4a <MavLinkReceive+0x192>
 8002e40:	2b4b      	cmp	r3, #75	; 0x4b
 8002e42:	f300 80cb 	bgt.w	8002fdc <MavLinkReceive+0x224>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <MavLinkReceive+0x98>
 8002e4a:	2b1e      	cmp	r3, #30
 8002e4c:	d026      	beq.n	8002e9c <MavLinkReceive+0xe4>
				}
			}
			break;

			default:
			break;
 8002e4e:	e0c5      	b.n	8002fdc <MavLinkReceive+0x224>
					mavlink_msg_heartbeat_decode(&msg, &heartbeat);
 8002e50:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002e54:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff90 	bl	8002d80 <mavlink_msg_heartbeat_decode>
					sprintf((char*)buff, "Heartbeat Status: %d, TYPE: %d\r\n", heartbeat.system_status, heartbeat.type);
 8002e60:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002e64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002e68:	79db      	ldrb	r3, [r3, #7]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002e7a:	495b      	ldr	r1, [pc, #364]	; (8002fe8 <MavLinkReceive+0x230>)
 8002e7c:	f008 f848 	bl	800af10 <siprintf>
					HAL_UART_Transmit(huart, (uint8_t *)buff, sizeof(buff), HAL_MAX_DELAY);
 8002e80:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002e84:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002e88:	f5a3 702d 	sub.w	r0, r3, #692	; 0x2b4
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e94:	6800      	ldr	r0, [r0, #0]
 8002e96:	f006 ff8e 	bl	8009db6 <HAL_UART_Transmit>
				break;
 8002e9a:	e0a0      	b.n	8002fde <MavLinkReceive+0x226>
					mavlink_msg_attitude_decode(&msg, &attitude);
 8002e9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ea0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fe28 	bl	8002afc <mavlink_msg_attitude_decode>
				break;
 8002eac:	e097      	b.n	8002fde <MavLinkReceive+0x226>
					mavlink_msg_battery_status_decode(&msg, &battery);
 8002eae:	f107 020c 	add.w	r2, r7, #12
 8002eb2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fec6 	bl	8002c4a <mavlink_msg_battery_status_decode>
				break;
 8002ebe:	e08e      	b.n	8002fde <MavLinkReceive+0x226>
					mavlink_msg_command_ack_decode(&msg, &cmdack);
 8002ec0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002ec4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fea2 	bl	8002c14 <mavlink_msg_command_ack_decode>
					sprintf((char*)buff, "Do CMD ACK: %d\r\n", cmdack.command);
 8002ed0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002ed4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ee0:	4942      	ldr	r1, [pc, #264]	; (8002fec <MavLinkReceive+0x234>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f008 f814 	bl	800af10 <siprintf>
					HAL_UART_Transmit(huart, (uint8_t *)buff, sizeof(buff), HAL_MAX_DELAY);
 8002ee8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002eec:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002ef0:	f5a3 702d 	sub.w	r0, r3, #692	; 0x2b4
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efc:	6800      	ldr	r0, [r0, #0]
 8002efe:	f006 ff5a 	bl	8009db6 <HAL_UART_Transmit>
				break;
 8002f02:	e06c      	b.n	8002fde <MavLinkReceive+0x226>
					mavlink_msg_command_long_decode(&msg, &command_long);
 8002f04:	f107 020c 	add.w	r2, r7, #12
 8002f08:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe2a 	bl	8002b68 <mavlink_msg_command_long_decode>
					int command = command_long.command;
 8002f14:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002f18:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002f1c:	8b9b      	ldrh	r3, [r3, #28]
 8002f1e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8002f22:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002f26:	2bb7      	cmp	r3, #183	; 0xb7
 8002f28:	d009      	beq.n	8002f3e <MavLinkReceive+0x186>
 8002f2a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002f2e:	f24a 6268 	movw	r2, #42600	; 0xa668
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d107      	bne.n	8002f46 <MavLinkReceive+0x18e>
							time_to_ack = true;
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <MavLinkReceive+0x238>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
						break;
 8002f3c:	e004      	b.n	8002f48 <MavLinkReceive+0x190>
								command = 42;
 8002f3e:	232a      	movs	r3, #42	; 0x2a
 8002f40:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
						break;
 8002f44:	e000      	b.n	8002f48 <MavLinkReceive+0x190>
							break;
 8002f46:	bf00      	nop
				break;
 8002f48:	e049      	b.n	8002fde <MavLinkReceive+0x226>
					mavlink_msg_command_int_decode(&msg, &command_int);
 8002f4a:	f107 020c 	add.w	r2, r7, #12
 8002f4e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fdec 	bl	8002b32 <mavlink_msg_command_int_decode>
					switch(command_int.command)
 8002f5a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002f5e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002f62:	8b9b      	ldrh	r3, [r3, #28]
 8002f64:	2bb7      	cmp	r3, #183	; 0xb7
 8002f66:	d003      	beq.n	8002f70 <MavLinkReceive+0x1b8>
 8002f68:	f24a 6268 	movw	r2, #42600	; 0xa668
 8002f6c:	4293      	cmp	r3, r2
						break;
 8002f6e:	e033      	b.n	8002fd8 <MavLinkReceive+0x220>
						sprintf((char*)buff, "Do Set Servo CMD Status: %f, TYPE: %f\r\n", command_int.param1, command_int.param2);
 8002f70:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002f74:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fb04 	bl	8000588 <__aeabi_f2d>
 8002f80:	4604      	mov	r4, r0
 8002f82:	460d      	mov	r5, r1
 8002f84:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002f88:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd fafa 	bl	8000588 <__aeabi_f2d>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	4913      	ldr	r1, [pc, #76]	; (8002ff4 <MavLinkReceive+0x23c>)
 8002fa6:	f007 ffb3 	bl	800af10 <siprintf>
						HAL_UART_Transmit(huart, (uint8_t *)buff, sizeof(buff), HAL_MAX_DELAY);
 8002faa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002fae:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002fb2:	f5a3 702d 	sub.w	r0, r3, #692	; 0x2b4
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fbe:	6800      	ldr	r0, [r0, #0]
 8002fc0:	f006 fef9 	bl	8009db6 <HAL_UART_Transmit>
						time_to_ack = true;
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <MavLinkReceive+0x238>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
						ComID = command_int.command;
 8002fca:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002fce:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002fd2:	8b9a      	ldrh	r2, [r3, #28]
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MavLinkReceive+0x240>)
 8002fd6:	801a      	strh	r2, [r3, #0]
						break;
 8002fd8:	bf00      	nop
			break;
 8002fda:	e000      	b.n	8002fde <MavLinkReceive+0x226>
			break;
 8002fdc:	bf00      	nop
		{

		}


}
 8002fde:	bf00      	nop
 8002fe0:	f507 772e 	add.w	r7, r7, #696	; 0x2b8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe8:	0800d42c 	.word	0x0800d42c
 8002fec:	0800d450 	.word	0x0800d450
 8002ff0:	20000200 	.word	0x20000200
 8002ff4:	0800d464 	.word	0x0800d464
 8002ff8:	20000202 	.word	0x20000202

08002ffc <MavlinkHeartBeatSend>:

}


uint8_t MavlinkHeartBeatSend(UART_HandleTypeDef* huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8003002:	af04      	add	r7, sp, #16
 8003004:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003008:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800300c:	6018      	str	r0, [r3, #0]
	mavlink_message_t msg;
	uint8_t buf[MAVLINK_MAX_PACKET_LEN];

	//int sysid = 20;                   ///< ID 20 for this airplane. 1 PX, 255 ground station
	//int compid = 158;                ///< The component sending the message
	int type = MAV_TYPE_QUADROTOR;   ///< This system is an airplane / fixed wing
 800300e:	2302      	movs	r3, #2
 8003010:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

	// Define the system type, in this case an airplane -> on-board controller
	//uint8_t system_type = MAV_TYPE_GENERIC;
	uint8_t autopilot_type = MAV_AUTOPILOT_PX4;
 8003014:	230c      	movs	r3, #12
 8003016:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253

	uint8_t system_mode = MAV_MODE_PREFLIGHT; ///< Booting up
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
	uint32_t custom_mode = 100;                 ///< Custom mode, can be defined by user/adopter
 8003020:	2364      	movs	r3, #100	; 0x64
 8003022:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint8_t system_state = MAV_STATE_STANDBY; ///< System ready for flight
 8003026:	2303      	movs	r3, #3
 8003028:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	// Pack the message
	mavlink_msg_heartbeat_pack(21,20, &msg, type, autopilot_type, system_mode, custom_mode, system_state);
 800302c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003030:	b2d9      	uxtb	r1, r3
 8003032:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8003036:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 800303a:	9303      	str	r3, [sp, #12]
 800303c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	460b      	mov	r3, r1
 8003050:	2114      	movs	r1, #20
 8003052:	2015      	movs	r0, #21
 8003054:	f7ff fe5c 	bl	8002d10 <mavlink_msg_heartbeat_pack>

	// Copy the message to the send buffer
	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 8003058:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f8b9 	bl	80021da <mavlink_msg_to_send_buffer>
 8003068:	4603      	mov	r3, r0
 800306a:	f8a7 3248 	strh.w	r3, [r7, #584]	; 0x248

	HAL_Delay(2000);
 800306e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003072:	f001 fa55 	bl	8004520 <HAL_Delay>

	HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8003076:	f8b7 2248 	ldrh.w	r2, [r7, #584]	; 0x248
 800307a:	f107 010c 	add.w	r1, r7, #12
 800307e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003082:	f5a3 7015 	sub.w	r0, r3, #596	; 0x254
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	6800      	ldr	r0, [r0, #0]
 800308c:	f006 fe93 	bl	8009db6 <HAL_UART_Transmit>

	return len;
 8003090:	f8b7 3248 	ldrh.w	r3, [r7, #584]	; 0x248
 8003094:	b2db      	uxtb	r3, r3


}
 8003096:	4618      	mov	r0, r3
 8003098:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <MavlinkWinchStatus>:

}


uint8_t MavlinkWinchStatus(UART_HandleTypeDef* huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80030a6:	af04      	add	r7, sp, #16
 80030a8:	f507 7112 	add.w	r1, r7, #584	; 0x248
 80030ac:	f5a1 7111 	sub.w	r1, r1, #580	; 0x244
 80030b0:	6008      	str	r0, [r1, #0]

	mavlink_message_t msg;
	uint8_t buf[MAVLINK_MAX_PACKET_LEN];

	// Pack the message
	mavlink_msg_winch_status_pack(1, MAV_COMP_ID_USER1, &msg, uwTick, 20, 2, 1, 12, 5, 20, 1);
 80030b2:	4920      	ldr	r1, [pc, #128]	; (8003134 <MavlinkWinchStatus+0x94>)
 80030b4:	6809      	ldr	r1, [r1, #0]
 80030b6:	2000      	movs	r0, #0
 80030b8:	460a      	mov	r2, r1
 80030ba:	4603      	mov	r3, r0
 80030bc:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80030c0:	2001      	movs	r0, #1
 80030c2:	9003      	str	r0, [sp, #12]
 80030c4:	2014      	movs	r0, #20
 80030c6:	9002      	str	r0, [sp, #8]
 80030c8:	e9cd 2300 	strd	r2, r3, [sp]
 80030cc:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80030d0:	eef2 1a08 	vmov.f32	s3, #40	; 0x41400000  12.0
 80030d4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80030d8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80030dc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80030e0:	460a      	mov	r2, r1
 80030e2:	2119      	movs	r1, #25
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff fdcb 	bl	8002c80 <mavlink_msg_winch_status_pack>

	// Copy the message to the send buffer
	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 80030ea:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff f870 	bl	80021da <mavlink_msg_to_send_buffer>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246

	HAL_Delay(2000);
 8003100:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003104:	f001 fa0c 	bl	8004520 <HAL_Delay>

	HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8003108:	f8b7 2246 	ldrh.w	r2, [r7, #582]	; 0x246
 800310c:	f107 0108 	add.w	r1, r7, #8
 8003110:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003114:	f5a3 7011 	sub.w	r0, r3, #580	; 0x244
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
 800311c:	6800      	ldr	r0, [r0, #0]
 800311e:	f006 fe4a 	bl	8009db6 <HAL_UART_Transmit>

	return len;
 8003122:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 8003126:	b2db      	uxtb	r3, r3


}
 8003128:	4618      	mov	r0, r3
 800312a:	f507 7712 	add.w	r7, r7, #584	; 0x248
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000af8 	.word	0x20000af8

08003138 <MavlinkCmdAcknowledge>:

uint8_t MavlinkCmdAcknowledge(UART_HandleTypeDef* huart, uint8_t command_id, uint8_t target_system, uint8_t target_component)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800313e:	af06      	add	r7, sp, #24
 8003140:	f507 7412 	add.w	r4, r7, #584	; 0x248
 8003144:	f5a4 7411 	sub.w	r4, r4, #580	; 0x244
 8003148:	6020      	str	r0, [r4, #0]
 800314a:	460c      	mov	r4, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003154:	f2a3 2345 	subw	r3, r3, #581	; 0x245
 8003158:	4622      	mov	r2, r4
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003160:	f2a3 2346 	subw	r3, r3, #582	; 0x246
 8003164:	4602      	mov	r2, r0
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800316c:	f2a3 2347 	subw	r3, r3, #583	; 0x247
 8003170:	460a      	mov	r2, r1
 8003172:	701a      	strb	r2, [r3, #0]

	mavlink_message_t msg;
	uint8_t buf[MAVLINK_MAX_PACKET_LEN];

	uint8_t result = MAV_RESULT_ACCEPTED;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	uint8_t progress = result; //For simple cmds.
 800317a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800317e:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246

	// Pack the message
	mavlink_msg_command_ack_pack(21, 20, &msg, MAV_CMD_DO_WINCH, result, progress, 0, 1, MAV_COMP_ID_ALL);
 8003182:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003186:	2300      	movs	r3, #0
 8003188:	9304      	str	r3, [sp, #16]
 800318a:	2301      	movs	r3, #1
 800318c:	9303      	str	r3, [sp, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f24a 6368 	movw	r3, #42600	; 0xa668
 80031a2:	2114      	movs	r1, #20
 80031a4:	2015      	movs	r0, #21
 80031a6:	f7ff fcfa 	bl	8002b9e <mavlink_msg_command_ack_pack>

	// Copy the message to the send buffer
	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 80031aa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff f810 	bl	80021da <mavlink_msg_to_send_buffer>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f8a7 3244 	strh.w	r3, [r7, #580]	; 0x244

	HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 80031c0:	f8b7 2244 	ldrh.w	r2, [r7, #580]	; 0x244
 80031c4:	f107 0108 	add.w	r1, r7, #8
 80031c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80031cc:	f5a3 7011 	sub.w	r0, r3, #580	; 0x244
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	6800      	ldr	r0, [r0, #0]
 80031d6:	f006 fdee 	bl	8009db6 <HAL_UART_Transmit>

	return len;
 80031da:	f8b7 3244 	ldrh.w	r3, [r7, #580]	; 0x244
 80031de:	b2db      	uxtb	r3, r3


}
 80031e0:	4618      	mov	r0, r3
 80031e2:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}

080031ea <Universal_Inits>:
uint32_t rev = 0;

uint32_t rawNew = 0;
uint32_t ratio = 0;

void Universal_Inits() {
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0

	HAL_Init();
 80031ee:	f001 f925 	bl	800443c <HAL_Init>
	SystemClockConfig(SYS_CLOCK_FREQ_50MHz);
 80031f2:	2032      	movs	r0, #50	; 0x32
 80031f4:	f000 fc3a 	bl	8003a6c <SystemClockConfig>
	LSE_Config();
 80031f8:	f000 fd1a 	bl	8003c30 <LSE_Config>
	MX_DMA_Init();
 80031fc:	f000 fc16 	bl	8003a2c <MX_DMA_Init>
	MX_ADC1_Init();
 8003200:	f000 fbc2 	bl	8003988 <MX_ADC1_Init>
	Timer3_Init();
 8003204:	f000 fad4 	bl	80037b0 <Timer3_Init>
	Timer2_Init();
 8003208:	f000 fb16 	bl	8003838 <Timer2_Init>
	Timer4_Init();
 800320c:	f000 fb68 	bl	80038e0 <Timer4_Init>
	UART2_Init();
 8003210:	f000 fd18 	bl	8003c44 <UART2_Init>
	UART1_Init();
 8003214:	f000 fd3c 	bl	8003c90 <UART1_Init>
	GPIO_Init();
 8003218:	f000 f9de 	bl	80035d8 <GPIO_Init>
	MX_I2C1_Init();
 800321c:	f000 fa9a 	bl	8003754 <MX_I2C1_Init>

}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <main>:


int main()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
	//Inits

	Universal_Inits();
 800322a:	f7ff ffde 	bl	80031ea <Universal_Inits>

	memset(buf, 0, sizeof(buf));
 800322e:	2240      	movs	r2, #64	; 0x40
 8003230:	2100      	movs	r1, #0
 8003232:	4831      	ldr	r0, [pc, #196]	; (80032f8 <main+0xd4>)
 8003234:	f007 f9fa 	bl	800a62c <memset>
	memset(buf_tick, 0, sizeof(buf_tick));
 8003238:	2240      	movs	r2, #64	; 0x40
 800323a:	2100      	movs	r1, #0
 800323c:	482f      	ldr	r0, [pc, #188]	; (80032fc <main+0xd8>)
 800323e:	f007 f9f5 	bl	800a62c <memset>
	//Transmit to the terminal at start
	char* user_data = "REDWING LABS\r\n";
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <main+0xdc>)
 8003244:	607b      	str	r3, [r7, #4]
	uint16_t data_len = strlen(user_data);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fc ffe2 	bl	8000210 <strlen>
 800324c:	4603      	mov	r3, r0
 800324e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);
 8003250:	887a      	ldrh	r2, [r7, #2]
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	482a      	ldr	r0, [pc, #168]	; (8003304 <main+0xe0>)
 800325a:	f006 fdac 	bl	8009db6 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4828      	ldr	r0, [pc, #160]	; (8003308 <main+0xe4>)
 8003268:	f006 fda5 	bl	8009db6 <HAL_UART_Transmit>

	if(HAL_TIM_Encoder_Start_IT(&tim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_handler();
 800326c:	213c      	movs	r1, #60	; 0x3c
 800326e:	4827      	ldr	r0, [pc, #156]	; (800330c <main+0xe8>)
 8003270:	f005 fdb0 	bl	8008dd4 <HAL_TIM_Encoder_Start_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <main+0x5a>
 800327a:	f000 fd2f 	bl	8003cdc <Error_handler>

	if (HAL_TIM_PWM_Start(&tim3, TIM_CHANNEL_1) != HAL_OK) Error_handler();
 800327e:	2100      	movs	r1, #0
 8003280:	4823      	ldr	r0, [pc, #140]	; (8003310 <main+0xec>)
 8003282:	f005 fa57 	bl	8008734 <HAL_TIM_PWM_Start>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <main+0x6c>
 800328c:	f000 fd26 	bl	8003cdc <Error_handler>
	if (HAL_TIM_PWM_Start(&tim3, TIM_CHANNEL_2) != HAL_OK) Error_handler();
 8003290:	2104      	movs	r1, #4
 8003292:	481f      	ldr	r0, [pc, #124]	; (8003310 <main+0xec>)
 8003294:	f005 fa4e 	bl	8008734 <HAL_TIM_PWM_Start>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <main+0x7e>
 800329e:	f000 fd1d 	bl	8003cdc <Error_handler>

	if(HAL_TIM_IC_Start_IT(&tim4, TIM_CHANNEL_1)!= HAL_OK) Error_handler();
 80032a2:	2100      	movs	r1, #0
 80032a4:	481b      	ldr	r0, [pc, #108]	; (8003314 <main+0xf0>)
 80032a6:	f005 fbcd 	bl	8008a44 <HAL_TIM_IC_Start_IT>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <main+0x90>
 80032b0:	f000 fd14 	bl	8003cdc <Error_handler>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80032b4:	2201      	movs	r2, #1
 80032b6:	2120      	movs	r1, #32
 80032b8:	4817      	ldr	r0, [pc, #92]	; (8003318 <main+0xf4>)
 80032ba:	f002 f9a9 	bl	8005610 <HAL_GPIO_WritePin>
		 */


		//MX_WINCH_START_SEQ();

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80032be:	2200      	movs	r2, #0
 80032c0:	2120      	movs	r1, #32
 80032c2:	4815      	ldr	r0, [pc, #84]	; (8003318 <main+0xf4>)
 80032c4:	f002 f9a4 	bl	8005610 <HAL_GPIO_WritePin>
		//HAL_Delay(2000);

		//MX_WINCH_UP_MOTO_RAMP_UP_DOWN();


		uint8_t byte = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	707b      	strb	r3, [r7, #1]

		while(1)
		{


			MavlinkHeartBeatSend(&huart1);
 80032cc:	480e      	ldr	r0, [pc, #56]	; (8003308 <main+0xe4>)
 80032ce:	f7ff fe95 	bl	8002ffc <MavlinkHeartBeatSend>

			MavlinkWinchStatus(&huart1);
 80032d2:	480d      	ldr	r0, [pc, #52]	; (8003308 <main+0xe4>)
 80032d4:	f7ff fee4 	bl	80030a0 <MavlinkWinchStatus>
//			MavlinkDoCMDSend(&huart1);

			//MavLinkRequestData(&huart1);


			if(time_to_ack) MavlinkCmdAcknowledge(&huart2, ComID, 1, 0);
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <main+0xf8>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <main+0xcc>
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <main+0xfc>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b2d9      	uxtb	r1, r3
 80032e6:	2300      	movs	r3, #0
 80032e8:	2201      	movs	r2, #1
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <main+0xe0>)
 80032ec:	f7ff ff24 	bl	8003138 <MavlinkCmdAcknowledge>

			HAL_Delay(200);
 80032f0:	20c8      	movs	r0, #200	; 0xc8
 80032f2:	f001 f915 	bl	8004520 <HAL_Delay>
			MavlinkHeartBeatSend(&huart1);
 80032f6:	e7e9      	b.n	80032cc <main+0xa8>
 80032f8:	2000053c 	.word	0x2000053c
 80032fc:	2000057c 	.word	0x2000057c
 8003300:	0800d49c 	.word	0x0800d49c
 8003304:	200004ac 	.word	0x200004ac
 8003308:	200004f0 	.word	0x200004f0
 800330c:	20000264 	.word	0x20000264
 8003310:	2000021c 	.word	0x2000021c
 8003314:	200002ac 	.word	0x200002ac
 8003318:	40020000 	.word	0x40020000
 800331c:	20000200 	.word	0x20000200
 8003320:	20000202 	.word	0x20000202

08003324 <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a58      	ldr	r2, [pc, #352]	; (8003494 <HAL_TIM_IC_CaptureCallback+0x170>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f040 80a9 	bne.w	800348a <HAL_TIM_IC_CaptureCallback+0x166>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <HAL_TIM_IC_CaptureCallback+0x174>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8003340:	2100      	movs	r1, #0
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f006 f84e 	bl	80093e4 <HAL_TIM_ReadCapturedValue>
 8003348:	4603      	mov	r3, r0
 800334a:	4a54      	ldr	r2, [pc, #336]	; (800349c <HAL_TIM_IC_CaptureCallback+0x178>)
 800334c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800334e:	4b52      	ldr	r3, [pc, #328]	; (8003498 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8003354:	e099      	b.n	800348a <HAL_TIM_IC_CaptureCallback+0x166>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8003356:	2100      	movs	r1, #0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f006 f843 	bl	80093e4 <HAL_TIM_ReadCapturedValue>
 800335e:	4603      	mov	r3, r0
 8003360:	4a4f      	ldr	r2, [pc, #316]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003362:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8003364:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_TIM_IC_CaptureCallback+0x178>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d907      	bls.n	8003380 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b49      	ldr	r3, [pc, #292]	; (800349c <HAL_TIM_IC_CaptureCallback+0x178>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	4a4a      	ldr	r2, [pc, #296]	; (80034a4 <HAL_TIM_IC_CaptureCallback+0x180>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00f      	b.n	80033a0 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8003380:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_TIM_IC_CaptureCallback+0x178>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d909      	bls.n	80033a0 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800338c:	4b44      	ldr	r3, [pc, #272]	; (80034a0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_TIM_IC_CaptureCallback+0x178>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800339a:	33ff      	adds	r3, #255	; 0xff
 800339c:	4a41      	ldr	r2, [pc, #260]	; (80034a4 <HAL_TIM_IC_CaptureCallback+0x180>)
 800339e:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80033a0:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_TIM_IC_CaptureCallback+0x184>)
 80033a2:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_TIM_IC_CaptureCallback+0x180>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80033b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_TIM_IC_CaptureCallback+0x188>)
 80033ba:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 80033be:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80034b0 <HAL_TIM_IC_CaptureCallback+0x18c>
 80033c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80033c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ca:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 80033ce:	4b35      	ldr	r3, [pc, #212]	; (80034a4 <HAL_TIM_IC_CaptureCallback+0x180>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033da:	edd7 7a02 	vldr	s15, [r7, #8]
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e6:	ee17 2a90 	vmov	r2, s15
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x190>)
 80033ec:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 80033ee:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x190>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f240 726b 	movw	r2, #1899	; 0x76b
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d903      	bls.n	8003402 <HAL_TIM_IC_CaptureCallback+0xde>
				Start_Flag = true;
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x194>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e03c      	b.n	800347c <HAL_TIM_IC_CaptureCallback+0x158>
			else if(usWidth > THROTTLE_HALF && usWidth < (THROTTLE_FULL-100))
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f240 52aa 	movw	r2, #1450	; 0x5aa
 800340a:	4293      	cmp	r3, r2
 800340c:	d90b      	bls.n	8003426 <HAL_TIM_IC_CaptureCallback+0x102>
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003416:	d206      	bcs.n	8003426 <HAL_TIM_IC_CaptureCallback+0x102>
				Start_Flag = false;
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_TIM_IC_CaptureCallback+0x194>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
				trig = 0;
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_TIM_IC_CaptureCallback+0x198>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e02a      	b.n	800347c <HAL_TIM_IC_CaptureCallback+0x158>
			else if(usWidth < THROTTLE_NULL)
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f240 424b 	movw	r2, #1099	; 0x44b
 800342e:	4293      	cmp	r3, r2
 8003430:	d824      	bhi.n	800347c <HAL_TIM_IC_CaptureCallback+0x158>
				e_stop = true;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * _8_BIT_MAP(0)/100);
 8003438:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f881 	bl	8000544 <__aeabi_ui2d>
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f7fd f8f5 	bl	8000638 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 800345c:	f7fd fa16 	bl	800088c <__aeabi_ddiv>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4917      	ldr	r1, [pc, #92]	; (80034c4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8003466:	680c      	ldr	r4, [r1, #0]
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fbbc 	bl	8000be8 <__aeabi_d2uiz>
 8003470:	4603      	mov	r3, r0
 8003472:	6363      	str	r3, [r4, #52]	; 0x34
				HAL_TIM_PWM_Stop(&tim3, TIM_CHANNEL_1);
 8003474:	2100      	movs	r1, #0
 8003476:	4813      	ldr	r0, [pc, #76]	; (80034c4 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8003478:	f005 fa24 	bl	80088c4 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_TIM_IC_CaptureCallback+0x174>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop
 8003494:	40000800 	.word	0x40000800
 8003498:	20000210 	.word	0x20000210
 800349c:	20000204 	.word	0x20000204
 80034a0:	20000208 	.word	0x20000208
 80034a4:	2000020c 	.word	0x2000020c
 80034a8:	49742400 	.word	0x49742400
 80034ac:	20000218 	.word	0x20000218
 80034b0:	49742400 	.word	0x49742400
 80034b4:	20000214 	.word	0x20000214
 80034b8:	200005d0 	.word	0x200005d0
 80034bc:	200005c0 	.word	0x200005c0
 80034c0:	200005d5 	.word	0x200005d5
 80034c4:	2000021c 	.word	0x2000021c
 80034c8:	40590000 	.word	0x40590000
 80034cc:	00000000 	.word	0x00000000

080034d0 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0

	indx++;  //Monitors the time
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_SYSTICK_Callback+0xe0>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_SYSTICK_Callback+0xe0>)
 80034de:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 80034e0:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_SYSTICK_Callback+0xe4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a33      	ldr	r2, [pc, #204]	; (80035b4 <HAL_SYSTICK_Callback+0xe4>)
 80034e8:	6013      	str	r3, [r2, #0]


	if(Start_Flag)
 80034ea:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_SYSTICK_Callback+0xe8>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d014      	beq.n	800351c <HAL_SYSTICK_Callback+0x4c>
	{
		++trig;
 80034f2:	4b32      	ldr	r3, [pc, #200]	; (80035bc <HAL_SYSTICK_Callback+0xec>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <HAL_SYSTICK_Callback+0xec>)
 80034fa:	6013      	str	r3, [r2, #0]
		if(trig >= 5000)
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_SYSTICK_Callback+0xec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f241 3287 	movw	r2, #4999	; 0x1387
 8003504:	4293      	cmp	r3, r2
 8003506:	d906      	bls.n	8003516 <HAL_SYSTICK_Callback+0x46>
		{
			START_THE_SEQUENCE = true;
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_SYSTICK_Callback+0xf0>)
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
			Start_Flag = false;
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_SYSTICK_Callback+0xe8>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e002      	b.n	800351c <HAL_SYSTICK_Callback+0x4c>
		}


		else {

			START_THE_SEQUENCE = false;
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_SYSTICK_Callback+0xf0>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		}
	}


	if(indx == 100)  // every 9 millisecond
 800351c:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_SYSTICK_Callback+0xe0>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	2b64      	cmp	r3, #100	; 0x64
 8003522:	d139      	bne.n	8003598 <HAL_SYSTICK_Callback+0xc8>
	{
		//Calculate the rpm
//		ClicksPsec = (Pulse - OldPulse);  // Pulse or Clicks Per Second
//		OldPulse = Pulse;
		indx = 0;
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_SYSTICK_Callback+0xe0>)
 8003526:	2200      	movs	r2, #0
 8003528:	801a      	strh	r2, [r3, #0]
//
//		RPM__ = (float)((float)ClicksPsec / 7) * 6000;
//		Length = (2 * __PI * 2.6 * Pulse) * 0.001428;
		AS5600_GetRawAngle(&as5600);
 800352a:	4826      	ldr	r0, [pc, #152]	; (80035c4 <HAL_SYSTICK_Callback+0xf4>)
 800352c:	f7fd fd50 	bl	8000fd0 <AS5600_GetRawAngle>

		if(tim3.Instance->CCR1 != 0)
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_SYSTICK_Callback+0xf8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d02e      	beq.n	8003598 <HAL_SYSTICK_Callback+0xc8>
		{

			if(as5600.rawAngle > rawAngle)
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_SYSTICK_Callback+0xf4>)
 800353c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_SYSTICK_Callback+0xfc>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	dd04      	ble.n	8003560 <HAL_SYSTICK_Callback+0x90>
			{
				rev++;
 8003556:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <HAL_SYSTICK_Callback+0x100>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_SYSTICK_Callback+0x100>)
 800355e:	6013      	str	r3, [r2, #0]
			}

			Length = (2 * __PI * __RADIUS * rev) * 0.01;
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_SYSTICK_Callback+0x100>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffed 	bl	8000544 <__aeabi_ui2d>
 800356a:	a30d      	add	r3, pc, #52	; (adr r3, 80035a0 <HAL_SYSTICK_Callback+0xd0>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd f862 	bl	8000638 <__aeabi_dmul>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	a30a      	add	r3, pc, #40	; (adr r3, 80035a8 <HAL_SYSTICK_Callback+0xd8>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fd f859 	bl	8000638 <__aeabi_dmul>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	f7fd fb4b 	bl	8000c28 <__aeabi_d2f>
 8003592:	4603      	mov	r3, r0
 8003594:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <HAL_SYSTICK_Callback+0x104>)
 8003596:	6013      	str	r3, [r2, #0]
		}

	}


}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	f3af 8000 	nop.w
 80035a0:	900f5736 	.word	0x900f5736
 80035a4:	40305616 	.word	0x40305616
 80035a8:	47ae147b 	.word	0x47ae147b
 80035ac:	3f847ae1 	.word	0x3f847ae1
 80035b0:	2000053a 	.word	0x2000053a
 80035b4:	200005bc 	.word	0x200005bc
 80035b8:	200005d0 	.word	0x200005d0
 80035bc:	200005c0 	.word	0x200005c0
 80035c0:	200005d6 	.word	0x200005d6
 80035c4:	20000364 	.word	0x20000364
 80035c8:	2000021c 	.word	0x2000021c
 80035cc:	200005d8 	.word	0x200005d8
 80035d0:	200005dc 	.word	0x200005dc
 80035d4:	200005cc 	.word	0x200005cc

080035d8 <GPIO_Init>:

}


void GPIO_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
	//Low level and high level initialization
	__HAL_RCC_GPIOC_CLK_ENABLE(); //Enable the clock
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	4b50      	ldr	r3, [pc, #320]	; (8003724 <GPIO_Init+0x14c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <GPIO_Init+0x14c>)
 80035e8:	f043 0304 	orr.w	r3, r3, #4
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <GPIO_Init+0x14c>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4b49      	ldr	r3, [pc, #292]	; (8003724 <GPIO_Init+0x14c>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a48      	ldr	r2, [pc, #288]	; (8003724 <GPIO_Init+0x14c>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b46      	ldr	r3, [pc, #280]	; (8003724 <GPIO_Init+0x14c>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	683b      	ldr	r3, [r7, #0]

	//This is for the Door Motor
	mdoor_dir.Pin = GPIO_PIN_8;
 8003616:	4b44      	ldr	r3, [pc, #272]	; (8003728 <GPIO_Init+0x150>)
 8003618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800361c:	601a      	str	r2, [r3, #0]
	mdoor_dir.Mode = GPIO_MODE_OUTPUT_PP;
 800361e:	4b42      	ldr	r3, [pc, #264]	; (8003728 <GPIO_Init+0x150>)
 8003620:	2201      	movs	r2, #1
 8003622:	605a      	str	r2, [r3, #4]
	mdoor_dir.Pull = GPIO_NOPULL;
 8003624:	4b40      	ldr	r3, [pc, #256]	; (8003728 <GPIO_Init+0x150>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
	mdoor_dir.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <GPIO_Init+0x150>)
 800362c:	2200      	movs	r2, #0
 800362e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &mdoor_dir);
 8003630:	493d      	ldr	r1, [pc, #244]	; (8003728 <GPIO_Init+0x150>)
 8003632:	483e      	ldr	r0, [pc, #248]	; (800372c <GPIO_Init+0x154>)
 8003634:	f001 fe58 	bl	80052e8 <HAL_GPIO_Init>

	//This is for the Winch Motor
	m_dir.Pin = GPIO_PIN_0;
 8003638:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <GPIO_Init+0x158>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
	m_dir.Mode = GPIO_MODE_OUTPUT_PP;
 800363e:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <GPIO_Init+0x158>)
 8003640:	2201      	movs	r2, #1
 8003642:	605a      	str	r2, [r3, #4]
	m_dir.Pull = GPIO_NOPULL;
 8003644:	4b3a      	ldr	r3, [pc, #232]	; (8003730 <GPIO_Init+0x158>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
	m_dir.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	4b39      	ldr	r3, [pc, #228]	; (8003730 <GPIO_Init+0x158>)
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &m_dir);
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <GPIO_Init+0x158>)
 8003652:	4838      	ldr	r0, [pc, #224]	; (8003734 <GPIO_Init+0x15c>)
 8003654:	f001 fe48 	bl	80052e8 <HAL_GPIO_Init>


	//This is disabled for now cuz its causing interrupt at the start up, need to inspect this
	ext_btn.Pin = GPIO_PIN_1;
 8003658:	4b37      	ldr	r3, [pc, #220]	; (8003738 <GPIO_Init+0x160>)
 800365a:	2202      	movs	r2, #2
 800365c:	601a      	str	r2, [r3, #0]
	ext_btn.Mode = GPIO_MODE_IT_FALLING;
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <GPIO_Init+0x160>)
 8003660:	4a36      	ldr	r2, [pc, #216]	; (800373c <GPIO_Init+0x164>)
 8003662:	605a      	str	r2, [r3, #4]
	ext_btn.Pull = GPIO_PULLUP;
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <GPIO_Init+0x160>)
 8003666:	2201      	movs	r2, #1
 8003668:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &ext_btn);
 800366a:	4933      	ldr	r1, [pc, #204]	; (8003738 <GPIO_Init+0x160>)
 800366c:	4831      	ldr	r0, [pc, #196]	; (8003734 <GPIO_Init+0x15c>)
 800366e:	f001 fe3b 	bl	80052e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003672:	2007      	movs	r0, #7
 8003674:	f001 fae1 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI1_IRQn,15,0);
 8003678:	2200      	movs	r2, #0
 800367a:	210f      	movs	r1, #15
 800367c:	2007      	movs	r0, #7
 800367e:	f001 fac0 	bl	8004c02 <HAL_NVIC_SetPriority>


	//Ext Int Pin 2 for the roof
	b_roof.Pin = GPIO_PIN_2;
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <GPIO_Init+0x168>)
 8003684:	2204      	movs	r2, #4
 8003686:	601a      	str	r2, [r3, #0]
	b_roof.Mode = GPIO_MODE_IT_FALLING;
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <GPIO_Init+0x168>)
 800368a:	4a2c      	ldr	r2, [pc, #176]	; (800373c <GPIO_Init+0x164>)
 800368c:	605a      	str	r2, [r3, #4]
	b_roof.Pull = GPIO_PULLUP;
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <GPIO_Init+0x168>)
 8003690:	2201      	movs	r2, #1
 8003692:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &b_roof);
 8003694:	492a      	ldr	r1, [pc, #168]	; (8003740 <GPIO_Init+0x168>)
 8003696:	4827      	ldr	r0, [pc, #156]	; (8003734 <GPIO_Init+0x15c>)
 8003698:	f001 fe26 	bl	80052e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800369c:	2008      	movs	r0, #8
 800369e:	f001 facc 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_IRQn,15,0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	210f      	movs	r1, #15
 80036a6:	2008      	movs	r0, #8
 80036a8:	f001 faab 	bl	8004c02 <HAL_NVIC_SetPriority>

	//Ext Int Pin 3 for the door
	b_door.Pin = GPIO_PIN_3;
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <GPIO_Init+0x16c>)
 80036ae:	2208      	movs	r2, #8
 80036b0:	601a      	str	r2, [r3, #0]
	b_door.Mode = GPIO_MODE_IT_RISING;
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <GPIO_Init+0x16c>)
 80036b4:	4a24      	ldr	r2, [pc, #144]	; (8003748 <GPIO_Init+0x170>)
 80036b6:	605a      	str	r2, [r3, #4]
	b_door.Pull = GPIO_PULLUP;
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <GPIO_Init+0x16c>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &b_door);
 80036be:	4921      	ldr	r1, [pc, #132]	; (8003744 <GPIO_Init+0x16c>)
 80036c0:	481c      	ldr	r0, [pc, #112]	; (8003734 <GPIO_Init+0x15c>)
 80036c2:	f001 fe11 	bl	80052e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80036c6:	2009      	movs	r0, #9
 80036c8:	f001 fab7 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI3_IRQn,15,0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	210f      	movs	r1, #15
 80036d0:	2009      	movs	r0, #9
 80036d2:	f001 fa96 	bl	8004c02 <HAL_NVIC_SetPriority>

	//This is for the inbuilt led
	ledgpio.Pin = GPIO_PIN_5;
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <GPIO_Init+0x174>)
 80036d8:	2220      	movs	r2, #32
 80036da:	601a      	str	r2, [r3, #0]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <GPIO_Init+0x174>)
 80036de:	2201      	movs	r2, #1
 80036e0:	605a      	str	r2, [r3, #4]
	ledgpio.Pull = GPIO_NOPULL;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <GPIO_Init+0x174>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80036e8:	4918      	ldr	r1, [pc, #96]	; (800374c <GPIO_Init+0x174>)
 80036ea:	4810      	ldr	r0, [pc, #64]	; (800372c <GPIO_Init+0x154>)
 80036ec:	f001 fdfc 	bl	80052e8 <HAL_GPIO_Init>

	//This is for the inbuilt btn int
	btn.Pin = GPIO_PIN_13;
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <GPIO_Init+0x178>)
 80036f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036f6:	601a      	str	r2, [r3, #0]
	btn.Mode = GPIO_MODE_IT_RISING;
 80036f8:	4b15      	ldr	r3, [pc, #84]	; (8003750 <GPIO_Init+0x178>)
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <GPIO_Init+0x170>)
 80036fc:	605a      	str	r2, [r3, #4]
	btn.Pull = GPIO_PULLUP;
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <GPIO_Init+0x178>)
 8003700:	2201      	movs	r2, #1
 8003702:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIOC, &btn);
 8003704:	4912      	ldr	r1, [pc, #72]	; (8003750 <GPIO_Init+0x178>)
 8003706:	480b      	ldr	r0, [pc, #44]	; (8003734 <GPIO_Init+0x15c>)
 8003708:	f001 fdee 	bl	80052e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800370c:	2028      	movs	r0, #40	; 0x28
 800370e:	f001 fa94 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn,15,0);
 8003712:	2200      	movs	r2, #0
 8003714:	210f      	movs	r1, #15
 8003716:	2028      	movs	r0, #40	; 0x28
 8003718:	f001 fa73 	bl	8004c02 <HAL_NVIC_SetPriority>

}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	200003c8 	.word	0x200003c8
 800372c:	40020000 	.word	0x40020000
 8003730:	200003b4 	.word	0x200003b4
 8003734:	40020800 	.word	0x40020800
 8003738:	200003a0 	.word	0x200003a0
 800373c:	10210000 	.word	0x10210000
 8003740:	200003f0 	.word	0x200003f0
 8003744:	200003dc 	.word	0x200003dc
 8003748:	10110000 	.word	0x10110000
 800374c:	2000038c 	.word	0x2000038c
 8003750:	20000378 	.word	0x20000378

08003754 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <MX_I2C1_Init+0x50>)
 800375a:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <MX_I2C1_Init+0x54>)
 800375c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <MX_I2C1_Init+0x50>)
 8003760:	4a12      	ldr	r2, [pc, #72]	; (80037ac <MX_I2C1_Init+0x58>)
 8003762:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <MX_I2C1_Init+0x50>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <MX_I2C1_Init+0x50>)
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <MX_I2C1_Init+0x50>)
 8003772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003776:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <MX_I2C1_Init+0x50>)
 800377a:	2200      	movs	r2, #0
 800377c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <MX_I2C1_Init+0x50>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <MX_I2C1_Init+0x50>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <MX_I2C1_Init+0x50>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003790:	4804      	ldr	r0, [pc, #16]	; (80037a4 <MX_I2C1_Init+0x50>)
 8003792:	f001 ff7b 	bl	800568c <HAL_I2C_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_I2C1_Init+0x4c>
	{
		Error_handler();
 800379c:	f000 fa9e 	bl	8003cdc <Error_handler>
	}
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000310 	.word	0x20000310
 80037a8:	40005400 	.word	0x40005400
 80037ac:	000186a0 	.word	0x000186a0

080037b0 <Timer3_Init>:

void Timer3_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	 * Period = time_period * time_delay //
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */
	tim3.Instance = TIM3;
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <Timer3_Init+0x7c>)
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <Timer3_Init+0x80>)
 80037b8:	601a      	str	r2, [r3, #0]
	tim3.Init.CounterMode = TIM_COUNTERMODE_UP; // set as up counter
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <Timer3_Init+0x7c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
	tim3.Init.Period = 3000 - 1; // for one milli second
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <Timer3_Init+0x7c>)
 80037c2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80037c6:	60da      	str	r2, [r3, #12]
	tim3.Init.Prescaler = 50 - 1;//49;
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <Timer3_Init+0x7c>)
 80037ca:	2231      	movs	r2, #49	; 0x31
 80037cc:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_PWM_Init(&tim3) != HAL_OK) Error_handler();  //Timer 2 is configured
 80037ce:	4817      	ldr	r0, [pc, #92]	; (800382c <Timer3_Init+0x7c>)
 80037d0:	f004 ff60 	bl	8008694 <HAL_TIM_PWM_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <Timer3_Init+0x2e>
 80037da:	f000 fa7f 	bl	8003cdc <Error_handler>
	 /*
		 * Working with the timer2 Output channel for PWM generation, for more info @ref general purpose timer in reference manual
		 * 1. Init the timer Output to Compare the time base
		 * 2. Config  the output channel for PWM
	 */
	memset(&timerPWMconfig, 0 , sizeof(timerPWMconfig));
 80037de:	221c      	movs	r2, #28
 80037e0:	2100      	movs	r1, #0
 80037e2:	4814      	ldr	r0, [pc, #80]	; (8003834 <Timer3_Init+0x84>)
 80037e4:	f006 ff22 	bl	800a62c <memset>
	timerPWMconfig.OCMode = TIM_OCMODE_PWM1;
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <Timer3_Init+0x84>)
 80037ea:	2260      	movs	r2, #96	; 0x60
 80037ec:	601a      	str	r2, [r3, #0]
	timerPWMconfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <Timer3_Init+0x84>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
	// PWM for 0% DutyCycl
	timerPWMconfig.Pulse = tim3.Init.Period * 0/100;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <Timer3_Init+0x84>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_PWM_ConfigChannel(&tim3, &timerPWMconfig, TIM_CHANNEL_1) != HAL_OK) Error_handler();
 80037fa:	2200      	movs	r2, #0
 80037fc:	490d      	ldr	r1, [pc, #52]	; (8003834 <Timer3_Init+0x84>)
 80037fe:	480b      	ldr	r0, [pc, #44]	; (800382c <Timer3_Init+0x7c>)
 8003800:	f005 fd32 	bl	8009268 <HAL_TIM_PWM_ConfigChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <Timer3_Init+0x5e>
 800380a:	f000 fa67 	bl	8003cdc <Error_handler>


	timerPWMconfig.Pulse = tim3.Init.Period * 0/100;
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <Timer3_Init+0x84>)
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_PWM_ConfigChannel(&tim3, &timerPWMconfig, TIM_CHANNEL_2) != HAL_OK) Error_handler();
 8003814:	2204      	movs	r2, #4
 8003816:	4907      	ldr	r1, [pc, #28]	; (8003834 <Timer3_Init+0x84>)
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <Timer3_Init+0x7c>)
 800381a:	f005 fd25 	bl	8009268 <HAL_TIM_PWM_ConfigChannel>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <Timer3_Init+0x78>
 8003824:	f000 fa5a 	bl	8003cdc <Error_handler>
	if(HAL_TIM_PWM_ConfigChannel(&tim3, &timerPWMconfig, TIM_CHANNEL_3) != HAL_OK) Error_handler();
	// PWM for 95% DutyCycle
	timerPWMconfig.Pulse = tim3.Init.Period * 95/100;
	if(HAL_TIM_PWM_ConfigChannel(&tim3, &timerPWMconfig, TIM_CHANNEL_4) != HAL_OK) Error_handler();
#endif
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	2000021c 	.word	0x2000021c
 8003830:	40000400 	.word	0x40000400
 8003834:	200002f4 	.word	0x200002f4

08003838 <Timer2_Init>:

void Timer2_Init()
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0

	TIM_Encoder_InitTypeDef sConfig = {0};
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f006 fef0 	bl	800a62c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
//	timerPWMconfig.OCPolarity = TIM_OCNPOLARITY_HIGH;
//	timerPWMconfig.Pulse = 0;  //With 0
//
//	if(HAL_TIM_PWM_ConfigChannel(&tim2, &timerPWMconfig, TIM_CHANNEL_1) != HAL_OK) Error_handler();

	tim2.Instance = TIM2;
 8003854:	4b21      	ldr	r3, [pc, #132]	; (80038dc <Timer2_Init+0xa4>)
 8003856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800385a:	601a      	str	r2, [r3, #0]
	tim2.Init.Prescaler = 0;
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <Timer2_Init+0xa4>)
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <Timer2_Init+0xa4>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
	tim2.Init.Period = 65535;
 8003868:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <Timer2_Init+0xa4>)
 800386a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800386e:	60da      	str	r2, [r3, #12]
	tim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <Timer2_Init+0xa4>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
	tim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <Timer2_Init+0xa4>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800387c:	2303      	movs	r3, #3
 800387e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003880:	2302      	movs	r3, #2
 8003882:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003890:	2302      	movs	r3, #2
 8003892:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003894:	2301      	movs	r3, #1
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003898:	2300      	movs	r3, #0
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&tim2, &sConfig) != HAL_OK)
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	4619      	mov	r1, r3
 80038a6:	480d      	ldr	r0, [pc, #52]	; (80038dc <Timer2_Init+0xa4>)
 80038a8:	f005 f9ee 	bl	8008c88 <HAL_TIM_Encoder_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <Timer2_Init+0x7e>
	{
		Error_handler();
 80038b2:	f000 fa13 	bl	8003cdc <Error_handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&tim2, &sMasterConfig) != HAL_OK)
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <Timer2_Init+0xa4>)
 80038c4:	f006 f99a 	bl	8009bfc <HAL_TIMEx_MasterConfigSynchronization>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <Timer2_Init+0x9a>
	{
		Error_handler();
 80038ce:	f000 fa05 	bl	8003cdc <Error_handler>
	}


}
 80038d2:	bf00      	nop
 80038d4:	3730      	adds	r7, #48	; 0x30
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000264 	.word	0x20000264

080038e0 <Timer4_Init>:


void Timer4_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0


	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e6:	f107 0310 	add.w	r3, r7, #16
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80038f0:	463b      	mov	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]

	tim4.Instance = TIM4;
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <Timer4_Init+0xa0>)
 80038fe:	4a21      	ldr	r2, [pc, #132]	; (8003984 <Timer4_Init+0xa4>)
 8003900:	601a      	str	r2, [r3, #0]
	tim4.Init.Prescaler = 50-1;
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <Timer4_Init+0xa0>)
 8003904:	2231      	movs	r2, #49	; 0x31
 8003906:	605a      	str	r2, [r3, #4]
	tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <Timer4_Init+0xa0>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
	tim4.Init.Period = 65535;
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <Timer4_Init+0xa0>)
 8003910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003914:	60da      	str	r2, [r3, #12]
	tim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <Timer4_Init+0xa0>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
	tim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391c:	4b18      	ldr	r3, [pc, #96]	; (8003980 <Timer4_Init+0xa0>)
 800391e:	2200      	movs	r2, #0
 8003920:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&tim4) != HAL_OK)
 8003922:	4817      	ldr	r0, [pc, #92]	; (8003980 <Timer4_Init+0xa0>)
 8003924:	f005 f83e 	bl	80089a4 <HAL_TIM_IC_Init>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <Timer4_Init+0x52>
	{
	Error_handler();
 800392e:	f000 f9d5 	bl	8003cdc <Error_handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&tim4, &sMasterConfig) != HAL_OK)
 800393a:	f107 0310 	add.w	r3, r7, #16
 800393e:	4619      	mov	r1, r3
 8003940:	480f      	ldr	r0, [pc, #60]	; (8003980 <Timer4_Init+0xa0>)
 8003942:	f006 f95b 	bl	8009bfc <HAL_TIMEx_MasterConfigSynchronization>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <Timer4_Init+0x70>
	{
	Error_handler();
 800394c:	f000 f9c6 	bl	8003cdc <Error_handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003950:	230a      	movs	r3, #10
 8003952:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003954:	2301      	movs	r3, #1
 8003956:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&tim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003960:	463b      	mov	r3, r7
 8003962:	2200      	movs	r2, #0
 8003964:	4619      	mov	r1, r3
 8003966:	4806      	ldr	r0, [pc, #24]	; (8003980 <Timer4_Init+0xa0>)
 8003968:	f005 fbea 	bl	8009140 <HAL_TIM_IC_ConfigChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <Timer4_Init+0x96>
	{
	Error_handler();
 8003972:	f000 f9b3 	bl	8003cdc <Error_handler>
	}

}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200002ac 	.word	0x200002ac
 8003984:	40000800 	.word	0x40000800

08003988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 800398e:	463b      	mov	r3, r7
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <MX_ADC1_Init+0x98>)
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <MX_ADC1_Init+0x9c>)
 800399e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <MX_ADC1_Init+0xa0>)
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039e6:	480e      	ldr	r0, [pc, #56]	; (8003a20 <MX_ADC1_Init+0x98>)
 80039e8:	f000 fdbe 	bl	8004568 <HAL_ADC_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_ADC1_Init+0x6e>
  {
    Error_handler();
 80039f2:	f000 f973 	bl	8003cdc <Error_handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80039f6:	2304      	movs	r3, #4
 80039f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80039fe:	2307      	movs	r3, #7
 8003a00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a02:	463b      	mov	r3, r7
 8003a04:	4619      	mov	r1, r3
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <MX_ADC1_Init+0x98>)
 8003a08:	f000 fdf2 	bl	80045f0 <HAL_ADC_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_ADC1_Init+0x8e>
  {
    Error_handler();
 8003a12:	f000 f963 	bl	8003cdc <Error_handler>
  }

}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000404 	.word	0x20000404
 8003a24:	40012000 	.word	0x40012000
 8003a28:	0f000001 	.word	0x0f000001

08003a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <MX_DMA_Init+0x3c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <MX_DMA_Init+0x3c>)
 8003a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <MX_DMA_Init+0x3c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	2038      	movs	r0, #56	; 0x38
 8003a54:	f001 f8d5 	bl	8004c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a58:	2038      	movs	r0, #56	; 0x38
 8003a5a:	f001 f8ee 	bl	8004c3a <HAL_NVIC_EnableIRQ>

}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <SystemClockConfig>:



void SystemClockConfig(uint8_t clock_freq)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b096      	sub	sp, #88	; 0x58
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
				 *  4. PLL by sourcing HSE clock
				 */
				RCC_OscInitTypeDef osc_init;
				RCC_ClkInitTypeDef clk_init;

				memset(&osc_init,0, sizeof(osc_init));
 8003a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7a:	2234      	movs	r2, #52	; 0x34
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f006 fdd4 	bl	800a62c <memset>

				osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;  // For HSE or LSE since we need both
 8003a84:	2305      	movs	r3, #5
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
				osc_init.HSEState = RCC_HSE_BYPASS;  // This is for HSE
 8003a88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
				osc_init.LSEState = RCC_LSE_ON;      // This is for LSE
 8003a8e:	2301      	movs	r3, #1
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
				osc_init.PLL.PLLState = RCC_PLL_ON;
 8003a92:	2302      	movs	r3, #2
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
				osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40

				switch(clock_freq)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2bb4      	cmp	r3, #180	; 0xb4
 8003aa0:	d059      	beq.n	8003b56 <SystemClockConfig+0xea>
 8003aa2:	2bb4      	cmp	r3, #180	; 0xb4
 8003aa4:	f300 80b6 	bgt.w	8003c14 <SystemClockConfig+0x1a8>
 8003aa8:	2b78      	cmp	r3, #120	; 0x78
 8003aaa:	d03a      	beq.n	8003b22 <SystemClockConfig+0xb6>
 8003aac:	2b78      	cmp	r3, #120	; 0x78
 8003aae:	f300 80b1 	bgt.w	8003c14 <SystemClockConfig+0x1a8>
 8003ab2:	2b32      	cmp	r3, #50	; 0x32
 8003ab4:	d002      	beq.n	8003abc <SystemClockConfig+0x50>
 8003ab6:	2b50      	cmp	r3, #80	; 0x50
 8003ab8:	d01a      	beq.n	8003af0 <SystemClockConfig+0x84>
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV4;
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;

						flash_latency = FLASH_LATENCY_5;
					}
					default: return;
 8003aba:	e0ab      	b.n	8003c14 <SystemClockConfig+0x1a8>
						osc_init.PLL.PLLM = 8;
 8003abc:	2308      	movs	r3, #8
 8003abe:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 100;
 8003ac0:	2364      	movs	r3, #100	; 0x64
 8003ac2:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8003ad0:	230f      	movs	r3, #15
 8003ad2:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8003adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae0:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8003ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae6:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_1;
 8003ae8:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <SystemClockConfig+0x1b0>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
						break;
 8003aee:	e06c      	b.n	8003bca <SystemClockConfig+0x15e>
						osc_init.PLL.PLLM = 8;
 8003af0:	2308      	movs	r3, #8
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 160;
 8003af4:	23a0      	movs	r3, #160	; 0xa0
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;
 8003af8:	2302      	movs	r3, #2
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;
 8003afc:	2302      	movs	r3, #2
 8003afe:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;
 8003b00:	2302      	movs	r3, #2
 8003b02:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8003b04:	230f      	movs	r3, #15
 8003b06:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8003b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b14:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV1;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_2;
 8003b1a:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <SystemClockConfig+0x1b0>)
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	601a      	str	r2, [r3, #0]
						break;
 8003b20:	e053      	b.n	8003bca <SystemClockConfig+0x15e>
						osc_init.PLL.PLLM = 8;
 8003b22:	2308      	movs	r3, #8
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 240;
 8003b26:	23f0      	movs	r3, #240	; 0xf0
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;
 8003b32:	2302      	movs	r3, #2
 8003b34:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8003b36:	230f      	movs	r3, #15
 8003b38:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV4;
 8003b42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b46:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8003b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4c:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_3;
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <SystemClockConfig+0x1b0>)
 8003b50:	2203      	movs	r2, #3
 8003b52:	601a      	str	r2, [r3, #0]
						break;
 8003b54:	e039      	b.n	8003bca <SystemClockConfig+0x15e>
						__HAL_RCC_PWR_CLK_ENABLE(); // ALways enable the clock for anything
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <SystemClockConfig+0x1b4>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <SystemClockConfig+0x1b4>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <SystemClockConfig+0x1b4>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
						__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <SystemClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <SystemClockConfig+0x1b8>)
 8003b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <SystemClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
						__HAL_PWR_OVERDRIVE_ENABLE();
 8003b8e:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <SystemClockConfig+0x1bc>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
						osc_init.PLL.PLLM = 8;
 8003b94:	2308      	movs	r3, #8
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
						osc_init.PLL.PLLN = 360;
 8003b98:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
						osc_init.PLL.PLLP = 2;   // default
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
						osc_init.PLL.PLLQ = 2;   // default
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	653b      	str	r3, [r7, #80]	; 0x50
						osc_init.PLL.PLLR = 2;   // default
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	657b      	str	r3, [r7, #84]	; 0x54
						clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_HCLK;
 8003baa:	230f      	movs	r3, #15
 8003bac:	613b      	str	r3, [r7, #16]
						clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	617b      	str	r3, [r7, #20]
						clk_init.AHBCLKDivider = RCC_CFGR_HPRE_DIV1;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
						clk_init.APB1CLKDivider = RCC_CFGR_PPRE1_DIV4;
 8003bb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bba:	61fb      	str	r3, [r7, #28]
						clk_init.APB2CLKDivider = RCC_CFGR_PPRE1_DIV2;
 8003bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bc0:	623b      	str	r3, [r7, #32]
						flash_latency = FLASH_LATENCY_5;
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <SystemClockConfig+0x1b0>)
 8003bc4:	2205      	movs	r2, #5
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e025      	b.n	8003c16 <SystemClockConfig+0x1aa>
				}

			if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) Error_handler();
 8003bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 fac2 	bl	8008158 <HAL_RCC_OscConfig>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <SystemClockConfig+0x172>
 8003bda:	f000 f87f 	bl	8003cdc <Error_handler>

		    // after this line if everything is okay HSE is succefully turned on
			if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) Error_handler();
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <SystemClockConfig+0x1b0>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 ff03 	bl	80079f4 <HAL_RCC_ClockConfig>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <SystemClockConfig+0x18c>
 8003bf4:	f000 f872 	bl	8003cdc <Error_handler>
			 * SYSTICK CONFIG
			 * Since we have changed the clock config from default frequency to the application specific
			 * We need to change the clock config  going into the arm cortex processor. (prcoessor side clock config).
			 */

			HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ 1000);
 8003bf8:	f004 f84a 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <SystemClockConfig+0x1c0>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f825 	bl	8004c56 <HAL_SYSTICK_Config>
			HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // There is a pre-scalar @Ref ClockTree
 8003c0c:	2004      	movs	r0, #4
 8003c0e:	f001 f82f 	bl	8004c70 <HAL_SYSTICK_CLKSourceConfig>
 8003c12:	e000      	b.n	8003c16 <SystemClockConfig+0x1aa>
					default: return;
 8003c14:	bf00      	nop
}
 8003c16:	3758      	adds	r7, #88	; 0x58
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000534 	.word	0x20000534
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
 8003c28:	420e0040 	.word	0x420e0040
 8003c2c:	10624dd3 	.word	0x10624dd3

08003c30 <LSE_Config>:

void LSE_Config()
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
	osc_init.LSEState = RCC_LSE_ON;
	if(HAL_RCC_OscConfig(&osc_init)) Error_handler();
#endif
	// Selects the clock soure to output on any one of the pin
	// MCO1 = PA8 and MCO2 = PA9
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCOSOURCE_LSE, RCC_MCODIV_1);
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f003 ffc0 	bl	8007bc0 <HAL_RCC_MCOConfig>
}
 8003c40:	bf00      	nop
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART2_Init>:

void UART2_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <UART2_Init+0x44>)
 8003c4a:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <UART2_Init+0x48>)
 8003c4c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <UART2_Init+0x44>)
 8003c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c54:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <UART2_Init+0x44>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <UART2_Init+0x44>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <UART2_Init+0x44>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]
	//huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <UART2_Init+0x44>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <UART2_Init+0x44>)
 8003c70:	220c      	movs	r2, #12
 8003c72:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_handler();  // If there is a problem
 8003c74:	4804      	ldr	r0, [pc, #16]	; (8003c88 <UART2_Init+0x44>)
 8003c76:	f006 f851 	bl	8009d1c <HAL_UART_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <UART2_Init+0x40>
 8003c80:	f000 f82c 	bl	8003cdc <Error_handler>

}
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200004ac 	.word	0x200004ac
 8003c8c:	40004400 	.word	0x40004400

08003c90 <UART1_Init>:

void UART1_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart1.Instance = USART1;
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <UART1_Init+0x44>)
 8003c96:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <UART1_Init+0x48>)
 8003c98:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <UART1_Init+0x44>)
 8003c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ca0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <UART1_Init+0x44>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <UART1_Init+0x44>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <UART1_Init+0x44>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
	//huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.Parity = UART_PARITY_NONE;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <UART1_Init+0x44>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <UART1_Init+0x44>)
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK) Error_handler();  // If there is a problem
 8003cc0:	4804      	ldr	r0, [pc, #16]	; (8003cd4 <UART1_Init+0x44>)
 8003cc2:	f006 f82b 	bl	8009d1c <HAL_UART_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <UART1_Init+0x40>
 8003ccc:	f000 f806 	bl	8003cdc <Error_handler>

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200004f0 	.word	0x200004f0
 8003cd8:	40011000 	.word	0x40011000

08003cdc <Error_handler>:

void Error_handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce0:	b672      	cpsid	i
}
 8003ce2:	bf00      	nop
	__disable_irq();
	while(1);
 8003ce4:	e7fe      	b.n	8003ce4 <Error_handler+0x8>
	...

08003ce8 <HAL_MspInit>:

GPIO_InitTypeDef tim2ch1gpio;
GPIO_InitTypeDef tim3ch1gpio;

void HAL_MspInit(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	 * Low level initialization
	 * 1. Set up the priority grouping of the arm cortex mx processor
	 * 2. Enable the required sustem exceptions of the arm cortex mx processors
	 * 3. Configure the Priority for the system exceptions
	 */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 ff7d 	bl	8004bec <HAL_NVIC_SetPriorityGrouping>

	SCB->SHCSR |= 0x7 << 16; // usage fault, memory fault, bus fault systems
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_MspInit+0x40>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_MspInit+0x40>)
 8003cf8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003cfc:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	f06f 000b 	mvn.w	r0, #11
 8003d06:	f000 ff7c 	bl	8004c02 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f06f 000a 	mvn.w	r0, #10
 8003d12:	f000 ff76 	bl	8004c02 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	f06f 0009 	mvn.w	r0, #9
 8003d1e:	f000 ff70 	bl	8004c02 <HAL_NVIC_SetPriority>
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	 * 1.Enable the peripheral clocks
	 * 2.Config the gpio pins to its respective alternate functionality pins refer datasheet
	 * PA0 ->ch1, PA1->ch2, PB10->ch3, PB11->ch4
	 * 3.Enable the interrupt priority and interrupt
	 */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6413      	str	r3, [r2, #64]	; 0x40
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	6313      	str	r3, [r2, #48]	; 0x30
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_TIM_PWM_MspInit+0xc8>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]

	tim3ch1gpio.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_7 ; // Added GPIO Pin to Control the LED using PWM
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_TIM_PWM_MspInit+0xcc>)
 8003da6:	22c3      	movs	r2, #195	; 0xc3
 8003da8:	601a      	str	r2, [r3, #0]
	tim3ch1gpio.Mode = GPIO_MODE_AF_PP;
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_TIM_PWM_MspInit+0xcc>)
 8003dac:	2202      	movs	r2, #2
 8003dae:	605a      	str	r2, [r3, #4]
	tim3ch1gpio.Alternate = GPIO_AF2_TIM3; // According to the data sheet
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_TIM_PWM_MspInit+0xcc>)
 8003db2:	2202      	movs	r2, #2
 8003db4:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &tim3ch1gpio);
 8003db6:	4910      	ldr	r1, [pc, #64]	; (8003df8 <HAL_TIM_PWM_MspInit+0xcc>)
 8003db8:	4810      	ldr	r0, [pc, #64]	; (8003dfc <HAL_TIM_PWM_MspInit+0xd0>)
 8003dba:	f001 fa95 	bl	80052e8 <HAL_GPIO_Init>

	tim2ch1gpio.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_TIM_PWM_MspInit+0xd4>)
 8003dc0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003dc4:	601a      	str	r2, [r3, #0]
	tim2ch1gpio.Mode = GPIO_MODE_AF_PP;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_TIM_PWM_MspInit+0xd4>)
 8003dc8:	2202      	movs	r2, #2
 8003dca:	605a      	str	r2, [r3, #4]
	tim2ch1gpio.Alternate = GPIO_AF1_TIM2; // According to the data sheet
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_TIM_PWM_MspInit+0xd4>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &tim2ch1gpio);
 8003dd2:	490b      	ldr	r1, [pc, #44]	; (8003e00 <HAL_TIM_PWM_MspInit+0xd4>)
 8003dd4:	480b      	ldr	r0, [pc, #44]	; (8003e04 <HAL_TIM_PWM_MspInit+0xd8>)
 8003dd6:	f001 fa87 	bl	80052e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dda:	201c      	movs	r0, #28
 8003ddc:	f000 ff2d 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 8003de0:	2200      	movs	r2, #0
 8003de2:	210e      	movs	r1, #14
 8003de4:	201c      	movs	r0, #28
 8003de6:	f000 ff0c 	bl	8004c02 <HAL_NVIC_SetPriority>


}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800
 8003df8:	20000ae0 	.word	0x20000ae0
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	20000acc 	.word	0x20000acc
 8003e04:	40020400 	.word	0x40020400

08003e08 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	 * 2. Do the pin muxing config
	 * 3. Enable the IRQ and set up the priority
	 */
	GPIO_InitTypeDef gpio_uart;

	__HAL_RCC_USART2_CLK_ENABLE();
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e20:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e36:	f043 0310 	orr.w	r3, r3, #16
 8003e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	4a23      	ldr	r2, [pc, #140]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6313      	str	r3, [r2, #48]	; 0x30
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_UART_MspInit+0xd8>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]

	 gpio_uart.Pin = GPIO_PIN_2 | GPIO_PIN_9;// UART2_TX AND UART1_TX
 8003e64:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003e68:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode = GPIO_MODE_AF_PP;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8003e72:	2300      	movs	r3, #0
 8003e74:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; // Alternate functionality for TX_RX
 8003e76:	2307      	movs	r3, #7
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4818      	ldr	r0, [pc, #96]	; (8003ee4 <HAL_UART_MspInit+0xdc>)
 8003e82:	f001 fa31 	bl	80052e8 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3 | GPIO_PIN_10 ;//UART1_RX
 8003e86:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003e8a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	4619      	mov	r1, r3
 8003e92:	4814      	ldr	r0, [pc, #80]	; (8003ee4 <HAL_UART_MspInit+0xdc>)
 8003e94:	f001 fa28 	bl	80052e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e98:	2026      	movs	r0, #38	; 0x26
 8003e9a:	f000 fece 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,3,0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2103      	movs	r1, #3
 8003ea2:	2026      	movs	r0, #38	; 0x26
 8003ea4:	f000 fead 	bl	8004c02 <HAL_NVIC_SetPriority>

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <HAL_UART_MspInit+0xe0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_UART_MspInit+0xe0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0220 	orr.w	r2, r2, #32
 8003eb6:	60da      	str	r2, [r3, #12]

	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003eb8:	2025      	movs	r0, #37	; 0x25
 8003eba:	f000 febe 	bl	8004c3a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2106      	movs	r1, #6
 8003ec2:	2025      	movs	r0, #37	; 0x25
 8003ec4:	f000 fe9d 	bl	8004c02 <HAL_NVIC_SetPriority>

	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <HAL_UART_MspInit+0xe4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <HAL_UART_MspInit+0xe4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0220 	orr.w	r2, r2, #32
 8003ed6:	60da      	str	r2, [r3, #12]


}
 8003ed8:	bf00      	nop
 8003eda:	3728      	adds	r7, #40	; 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40020000 	.word	0x40020000
 8003ee8:	200004ac 	.word	0x200004ac
 8003eec:	200004f0 	.word	0x200004f0

08003ef0 <HAL_TIM_Encoder_MspInit>:



void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d133      	bne.n	8003f7a <HAL_TIM_Encoder_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	4619      	mov	r1, r3
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f66:	f001 f9bf 	bl	80052e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	201c      	movs	r0, #28
 8003f70:	f000 fe47 	bl	8004c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f74:	201c      	movs	r0, #28
 8003f76:	f000 fe60 	bl	8004c3a <HAL_NVIC_EnableIRQ>

  }

}
 8003f7a:	bf00      	nop
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020000 	.word	0x40020000

08003f8c <HAL_TIM_IC_MspInit>:


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08c      	sub	sp, #48	; 0x30
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	f107 031c 	add.w	r3, r7, #28
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
	  if(htim_ic->Instance==TIM1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a36      	ldr	r2, [pc, #216]	; (8004084 <HAL_TIM_IC_MspInit+0xf8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d12d      	bne.n	800400a <HAL_TIM_IC_MspInit+0x7e>
	  {

	    /* Peripheral clock enable */
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fbe:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	69bb      	ldr	r3, [r7, #24]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	4a2d      	ldr	r2, [pc, #180]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	697b      	ldr	r3, [r7, #20]
	    /**TIM1 GPIO Configuration
	    PA9     ------> TIM1_CH2
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fea:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	4619      	mov	r1, r3
 8004002:	4822      	ldr	r0, [pc, #136]	; (800408c <HAL_TIM_IC_MspInit+0x100>)
 8004004:	f001 f970 	bl	80052e8 <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
	    HAL_NVIC_EnableIRQ(TIM4_IRQn);

	  }

}
 8004008:	e038      	b.n	800407c <HAL_TIM_IC_MspInit+0xf0>
	  else if(htim_ic->Instance==TIM4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_TIM_IC_MspInit+0x104>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d133      	bne.n	800407c <HAL_TIM_IC_MspInit+0xf0>
	    __HAL_RCC_TIM4_CLK_ENABLE();
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6413      	str	r3, [r2, #64]	; 0x40
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	6313      	str	r3, [r2, #48]	; 0x30
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_TIM_IC_MspInit+0xfc>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800404c:	2340      	movs	r3, #64	; 0x40
 800404e:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	2302      	movs	r3, #2
 8004052:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004058:	2300      	movs	r3, #0
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800405c:	2302      	movs	r3, #2
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004060:	f107 031c 	add.w	r3, r7, #28
 8004064:	4619      	mov	r1, r3
 8004066:	480b      	ldr	r0, [pc, #44]	; (8004094 <HAL_TIM_IC_MspInit+0x108>)
 8004068:	f001 f93e 	bl	80052e8 <HAL_GPIO_Init>
	    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800406c:	2200      	movs	r2, #0
 800406e:	2100      	movs	r1, #0
 8004070:	201e      	movs	r0, #30
 8004072:	f000 fdc6 	bl	8004c02 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004076:	201e      	movs	r0, #30
 8004078:	f000 fddf 	bl	8004c3a <HAL_NVIC_EnableIRQ>
}
 800407c:	bf00      	nop
 800407e:	3730      	adds	r7, #48	; 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40010000 	.word	0x40010000
 8004088:	40023800 	.word	0x40023800
 800408c:	40020000 	.word	0x40020000
 8004090:	40000800 	.word	0x40000800
 8004094:	40020400 	.word	0x40020400

08004098 <HAL_ADC_MspInit>:

}


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a33      	ldr	r2, [pc, #204]	; (8004184 <HAL_ADC_MspInit+0xec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d160      	bne.n	800417c <HAL_ADC_MspInit+0xe4>
  {

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	4b32      	ldr	r3, [pc, #200]	; (8004188 <HAL_ADC_MspInit+0xf0>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	4a31      	ldr	r2, [pc, #196]	; (8004188 <HAL_ADC_MspInit+0xf0>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ca:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_ADC_MspInit+0xf0>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_ADC_MspInit+0xf0>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <HAL_ADC_MspInit+0xf0>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <HAL_ADC_MspInit+0xf0>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040f2:	2310      	movs	r3, #16
 80040f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f6:	2303      	movs	r3, #3
 80040f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4619      	mov	r1, r3
 8004104:	4821      	ldr	r0, [pc, #132]	; (800418c <HAL_ADC_MspInit+0xf4>)
 8004106:	f001 f8ef 	bl	80052e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800410a:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 800410c:	4a21      	ldr	r2, [pc, #132]	; (8004194 <HAL_ADC_MspInit+0xfc>)
 800410e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004110:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004112:	2200      	movs	r2, #0
 8004114:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 800411e:	2200      	movs	r2, #0
 8004120:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004128:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 800412c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004130:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004134:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 800413c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004140:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004144:	2200      	movs	r2, #0
 8004146:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 800414a:	2204      	movs	r2, #4
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004150:	2203      	movs	r2, #3
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004156:	2200      	movs	r2, #0
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004160:	480b      	ldr	r0, [pc, #44]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004162:	f000 fda7 	bl	8004cb4 <HAL_DMA_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_ADC_MspInit+0xd8>
    {
      Error_handler();
 800416c:	f7ff fdb6 	bl	8003cdc <Error_handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a07      	ldr	r2, [pc, #28]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
 8004176:	4a06      	ldr	r2, [pc, #24]	; (8004190 <HAL_ADC_MspInit+0xf8>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 800417c:	bf00      	nop
 800417e:	3728      	adds	r7, #40	; 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40012000 	.word	0x40012000
 8004188:	40023800 	.word	0x40023800
 800418c:	40020000 	.word	0x40020000
 8004190:	2000044c 	.word	0x2000044c
 8004194:	40026410 	.word	0x40026410

08004198 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 0314 	add.w	r3, r7, #20
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <HAL_I2C_MspInit+0x94>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d134      	bne.n	8004224 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <HAL_I2C_MspInit+0x98>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_I2C_MspInit+0x98>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_I2C_MspInit+0x98>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80041d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80041da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041dc:	2312      	movs	r3, #18
 80041de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041e8:	2304      	movs	r3, #4
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	4810      	ldr	r0, [pc, #64]	; (8004234 <HAL_I2C_MspInit+0x9c>)
 80041f4:	f001 f878 	bl	80052e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_I2C_MspInit+0x98>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <HAL_I2C_MspInit+0x98>)
 8004202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_I2C_MspInit+0x98>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004214:	2200      	movs	r2, #0
 8004216:	2100      	movs	r1, #0
 8004218:	201f      	movs	r0, #31
 800421a:	f000 fcf2 	bl	8004c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800421e:	201f      	movs	r0, #31
 8004220:	f000 fd0b 	bl	8004c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004224:	bf00      	nop
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40005400 	.word	0x40005400
 8004230:	40023800 	.word	0x40023800
 8004234:	40020400 	.word	0x40020400

08004238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
	return 1;
 800423c:	2301      	movs	r3, #1
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_kill>:

int _kill(int pid, int sig)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004252:	f006 f9a3 	bl	800a59c <__errno>
 8004256:	4603      	mov	r3, r0
 8004258:	2216      	movs	r2, #22
 800425a:	601a      	str	r2, [r3, #0]
	return -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_exit>:

void _exit (int status)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004270:	f04f 31ff 	mov.w	r1, #4294967295
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ffe7 	bl	8004248 <_kill>
	while (1) {}		/* Make sure we hang here */
 800427a:	e7fe      	b.n	800427a <_exit+0x12>

0800427c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e00a      	b.n	80042a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800428e:	f3af 8000 	nop.w
 8004292:	4601      	mov	r1, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	b2ca      	uxtb	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	dbf0      	blt.n	800428e <_read+0x12>
	}

return len;
 80042ac:	687b      	ldr	r3, [r7, #4]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e009      	b.n	80042dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	60ba      	str	r2, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	dbf1      	blt.n	80042c8 <_write+0x12>
	}
	return len;
 80042e4:	687b      	ldr	r3, [r7, #4]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <_close>:

int _close(int file)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
	return -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004316:	605a      	str	r2, [r3, #4]
	return 0;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_isatty>:

int _isatty(int file)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
	return 1;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
	return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <_sbrk+0x5c>)
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <_sbrk+0x60>)
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <_sbrk+0x64>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <_sbrk+0x64>)
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <_sbrk+0x68>)
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <_sbrk+0x64>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d207      	bcs.n	8004398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004388:	f006 f908 	bl	800a59c <__errno>
 800438c:	4603      	mov	r3, r0
 800438e:	220c      	movs	r2, #12
 8004390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e009      	b.n	80043ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <_sbrk+0x64>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <_sbrk+0x64>)
 80043a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20020000 	.word	0x20020000
 80043b8:	00000400 	.word	0x00000400
 80043bc:	20000af4 	.word	0x20000af4
 80043c0:	20000b10 	.word	0x20000b10

080043c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <SystemInit+0x20>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	4a05      	ldr	r2, [pc, #20]	; (80043e4 <SystemInit+0x20>)
 80043d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043ec:	480d      	ldr	r0, [pc, #52]	; (8004424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043ee:	490e      	ldr	r1, [pc, #56]	; (8004428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043f0:	4a0e      	ldr	r2, [pc, #56]	; (800442c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043f4:	e002      	b.n	80043fc <LoopCopyDataInit>

080043f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043fa:	3304      	adds	r3, #4

080043fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004400:	d3f9      	bcc.n	80043f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004404:	4c0b      	ldr	r4, [pc, #44]	; (8004434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004408:	e001      	b.n	800440e <LoopFillZerobss>

0800440a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800440a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800440c:	3204      	adds	r2, #4

0800440e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800440e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004410:	d3fb      	bcc.n	800440a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004412:	f7ff ffd7 	bl	80043c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004416:	f006 f8c7 	bl	800a5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800441a:	f7fe ff03 	bl	8003224 <main>
  bx  lr    
 800441e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004428:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800442c:	0800e474 	.word	0x0800e474
  ldr r2, =_sbss
 8004430:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004434:	20000b0c 	.word	0x20000b0c

08004438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004438:	e7fe      	b.n	8004438 <ADC_IRQHandler>
	...

0800443c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_Init+0x40>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0d      	ldr	r2, [pc, #52]	; (800447c <HAL_Init+0x40>)
 8004446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_Init+0x40>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <HAL_Init+0x40>)
 8004452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_Init+0x40>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a07      	ldr	r2, [pc, #28]	; (800447c <HAL_Init+0x40>)
 800445e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004464:	2003      	movs	r0, #3
 8004466:	f000 fbc1 	bl	8004bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800446a:	2000      	movs	r0, #0
 800446c:	f000 f808 	bl	8004480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004470:	f7ff fc3a 	bl	8003ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023c00 	.word	0x40023c00

08004480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_InitTick+0x54>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_InitTick+0x58>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004496:	fbb3 f3f1 	udiv	r3, r3, r1
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fbd9 	bl	8004c56 <HAL_SYSTICK_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e00e      	b.n	80044cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d80a      	bhi.n	80044ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044b4:	2200      	movs	r2, #0
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
 80044bc:	f000 fba1 	bl	8004c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044c0:	4a06      	ldr	r2, [pc, #24]	; (80044dc <HAL_InitTick+0x5c>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000008 	.word	0x20000008
 80044d8:	20000010 	.word	0x20000010
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_IncTick+0x20>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_IncTick+0x24>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4413      	add	r3, r2
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <HAL_IncTick+0x24>)
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000010 	.word	0x20000010
 8004504:	20000af8 	.word	0x20000af8

08004508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return uwTick;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_GetTick+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000af8 	.word	0x20000af8

08004520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004528:	f7ff ffee 	bl	8004508 <HAL_GetTick>
 800452c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d005      	beq.n	8004546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_Delay+0x44>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004546:	bf00      	nop
 8004548:	f7ff ffde 	bl	8004508 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	429a      	cmp	r2, r3
 8004556:	d8f7      	bhi.n	8004548 <HAL_Delay+0x28>
  {
  }
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000010 	.word	0x20000010

08004568 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e033      	b.n	80045e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fd86 	bl	8004098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045ae:	f023 0302 	bic.w	r3, r3, #2
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f94a 	bl	8004854 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
 80045d6:	e001      	b.n	80045dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e113      	b.n	8004834 <HAL_ADC_ConfigChannel+0x244>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b09      	cmp	r3, #9
 800461a:	d925      	bls.n	8004668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68d9      	ldr	r1, [r3, #12]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	3b1e      	subs	r3, #30
 8004632:	2207      	movs	r2, #7
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43da      	mvns	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	400a      	ands	r2, r1
 8004640:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68d9      	ldr	r1, [r3, #12]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	4618      	mov	r0, r3
 8004654:	4603      	mov	r3, r0
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4403      	add	r3, r0
 800465a:	3b1e      	subs	r3, #30
 800465c:	409a      	lsls	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e022      	b.n	80046ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6919      	ldr	r1, [r3, #16]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	4613      	mov	r3, r2
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	4413      	add	r3, r2
 800467c:	2207      	movs	r2, #7
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43da      	mvns	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	400a      	ands	r2, r1
 800468a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6919      	ldr	r1, [r3, #16]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	4618      	mov	r0, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4403      	add	r3, r0
 80046a4:	409a      	lsls	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d824      	bhi.n	8004700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	3b05      	subs	r3, #5
 80046c8:	221f      	movs	r2, #31
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43da      	mvns	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	400a      	ands	r2, r1
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4618      	mov	r0, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	3b05      	subs	r3, #5
 80046f2:	fa00 f203 	lsl.w	r2, r0, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	635a      	str	r2, [r3, #52]	; 0x34
 80046fe:	e04c      	b.n	800479a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	d824      	bhi.n	8004752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	3b23      	subs	r3, #35	; 0x23
 800471a:	221f      	movs	r2, #31
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43da      	mvns	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	400a      	ands	r2, r1
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	4618      	mov	r0, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	3b23      	subs	r3, #35	; 0x23
 8004744:	fa00 f203 	lsl.w	r2, r0, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
 8004750:	e023      	b.n	800479a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	3b41      	subs	r3, #65	; 0x41
 8004764:	221f      	movs	r2, #31
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43da      	mvns	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	400a      	ands	r2, r1
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	4618      	mov	r0, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	3b41      	subs	r3, #65	; 0x41
 800478e:	fa00 f203 	lsl.w	r2, r0, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800479a:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_ADC_ConfigChannel+0x250>)
 800479c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a28      	ldr	r2, [pc, #160]	; (8004844 <HAL_ADC_ConfigChannel+0x254>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10f      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x1d8>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b12      	cmp	r3, #18
 80047ae:	d10b      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_ADC_ConfigChannel+0x254>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d12b      	bne.n	800482a <HAL_ADC_ConfigChannel+0x23a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_ADC_ConfigChannel+0x258>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <HAL_ADC_ConfigChannel+0x1f4>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b11      	cmp	r3, #17
 80047e2:	d122      	bne.n	800482a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <HAL_ADC_ConfigChannel+0x258>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d111      	bne.n	800482a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004806:	4b11      	ldr	r3, [pc, #68]	; (800484c <HAL_ADC_ConfigChannel+0x25c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a11      	ldr	r2, [pc, #68]	; (8004850 <HAL_ADC_ConfigChannel+0x260>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0c9a      	lsrs	r2, r3, #18
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800481c:	e002      	b.n	8004824 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3b01      	subs	r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f9      	bne.n	800481e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40012300 	.word	0x40012300
 8004844:	40012000 	.word	0x40012000
 8004848:	10000012 	.word	0x10000012
 800484c:	20000008 	.word	0x20000008
 8004850:	431bde83 	.word	0x431bde83

08004854 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800485c:	4b79      	ldr	r3, [pc, #484]	; (8004a44 <ADC_Init+0x1f0>)
 800485e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	021a      	lsls	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6899      	ldr	r1, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <ADC_Init+0x1f4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800491c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6899      	ldr	r1, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	e00f      	b.n	8004952 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0202 	bic.w	r2, r2, #2
 8004960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	7e1b      	ldrb	r3, [r3, #24]
 800496c:	005a      	lsls	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01b      	beq.n	80049b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800498e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800499e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	3b01      	subs	r3, #1
 80049ac:	035a      	lsls	r2, r3, #13
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	e007      	b.n	80049c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	051a      	lsls	r2, r3, #20
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6899      	ldr	r1, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a0a:	025a      	lsls	r2, r3, #9
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	029a      	lsls	r2, r3, #10
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40012300 	.word	0x40012300
 8004a48:	0f000001 	.word	0x0f000001

08004a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <__NVIC_SetPriorityGrouping+0x44>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <__NVIC_SetPriorityGrouping+0x44>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	60d3      	str	r3, [r2, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <__NVIC_GetPriorityGrouping+0x18>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 0307 	and.w	r3, r3, #7
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	db0b      	blt.n	8004ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	f003 021f 	and.w	r2, r3, #31
 8004ac8:	4907      	ldr	r1, [pc, #28]	; (8004ae8 <__NVIC_EnableIRQ+0x38>)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	e000e100 	.word	0xe000e100

08004aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	6039      	str	r1, [r7, #0]
 8004af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	db0a      	blt.n	8004b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	490c      	ldr	r1, [pc, #48]	; (8004b38 <__NVIC_SetPriority+0x4c>)
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	0112      	lsls	r2, r2, #4
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	440b      	add	r3, r1
 8004b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b14:	e00a      	b.n	8004b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4908      	ldr	r1, [pc, #32]	; (8004b3c <__NVIC_SetPriority+0x50>)
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	3b04      	subs	r3, #4
 8004b24:	0112      	lsls	r2, r2, #4
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	440b      	add	r3, r1
 8004b2a:	761a      	strb	r2, [r3, #24]
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	e000e100 	.word	0xe000e100
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b089      	sub	sp, #36	; 0x24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f1c3 0307 	rsb	r3, r3, #7
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	bf28      	it	cs
 8004b5e:	2304      	movcs	r3, #4
 8004b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	d902      	bls.n	8004b70 <NVIC_EncodePriority+0x30>
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	3b03      	subs	r3, #3
 8004b6e:	e000      	b.n	8004b72 <NVIC_EncodePriority+0x32>
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b74:	f04f 32ff 	mov.w	r2, #4294967295
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	401a      	ands	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b88:	f04f 31ff 	mov.w	r1, #4294967295
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	43d9      	mvns	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b98:	4313      	orrs	r3, r2
         );
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3724      	adds	r7, #36	; 0x24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb8:	d301      	bcc.n	8004bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e00f      	b.n	8004bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <SysTick_Config+0x40>)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bc6:	210f      	movs	r1, #15
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	f7ff ff8e 	bl	8004aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <SysTick_Config+0x40>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <SysTick_Config+0x40>)
 8004bd8:	2207      	movs	r2, #7
 8004bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000e010 	.word	0xe000e010

08004bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff29 	bl	8004a4c <__NVIC_SetPriorityGrouping>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	4603      	mov	r3, r0
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c14:	f7ff ff3e 	bl	8004a94 <__NVIC_GetPriorityGrouping>
 8004c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff8e 	bl	8004b40 <NVIC_EncodePriority>
 8004c24:	4602      	mov	r2, r0
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff5d 	bl	8004aec <__NVIC_SetPriority>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff31 	bl	8004ab0 <__NVIC_EnableIRQ>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ffa2 	bl	8004ba8 <SysTick_Config>
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d106      	bne.n	8004c8c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c84:	f043 0304 	orr.w	r3, r3, #4
 8004c88:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004c8a:	e005      	b.n	8004c98 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	e000e010 	.word	0xe000e010

08004ca8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004cac:	f7fe fc10 	bl	80034d0 <HAL_SYSTICK_Callback>
}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff fc22 	bl	8004508 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e099      	b.n	8004e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cf0:	e00f      	b.n	8004d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cf2:	f7ff fc09 	bl	8004508 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b05      	cmp	r3, #5
 8004cfe:	d908      	bls.n	8004d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2203      	movs	r2, #3
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e078      	b.n	8004e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e8      	bne.n	8004cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4b38      	ldr	r3, [pc, #224]	; (8004e0c <HAL_DMA_Init+0x158>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	4313      	orrs	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 0307 	bic.w	r3, r3, #7
 8004d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d117      	bne.n	8004dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fa19 	bl	80051f0 <DMA_CheckFifoParam>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2240      	movs	r2, #64	; 0x40
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e016      	b.n	8004e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9d0 	bl	8005184 <DMA_CalcBaseAndBitshift>
 8004de4:	4603      	mov	r3, r0
 8004de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dec:	223f      	movs	r2, #63	; 0x3f
 8004dee:	409a      	lsls	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	f010803f 	.word	0xf010803f

08004e10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d004      	beq.n	8004e2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2280      	movs	r2, #128	; 0x80
 8004e28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e00c      	b.n	8004e48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2205      	movs	r2, #5
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e60:	4b8e      	ldr	r3, [pc, #568]	; (800509c <HAL_DMA_IRQHandler+0x248>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a8e      	ldr	r2, [pc, #568]	; (80050a0 <HAL_DMA_IRQHandler+0x24c>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0a9b      	lsrs	r3, r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	2208      	movs	r2, #8
 8004e80:	409a      	lsls	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01a      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	2208      	movs	r2, #8
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	f043 0201 	orr.w	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d012      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f043 0202 	orr.w	r2, r3, #2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	2204      	movs	r2, #4
 8004efc:	409a      	lsls	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	2204      	movs	r2, #4
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	2210      	movs	r2, #16
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d043      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d03c      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	2210      	movs	r2, #16
 8004f50:	409a      	lsls	r2, r3
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d018      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d108      	bne.n	8004f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d024      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
 8004f82:	e01f      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01b      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
 8004f94:	e016      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d107      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0208 	bic.w	r2, r2, #8
 8004fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	2220      	movs	r2, #32
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 808f 	beq.w	80050f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8087 	beq.w	80050f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	2220      	movs	r2, #32
 8004fec:	409a      	lsls	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d136      	bne.n	800506c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0216 	bic.w	r2, r2, #22
 800500c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800501c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <HAL_DMA_IRQHandler+0x1da>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0208 	bic.w	r2, r2, #8
 800503c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005042:	223f      	movs	r2, #63	; 0x3f
 8005044:	409a      	lsls	r2, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	d07e      	beq.n	8005160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
        }
        return;
 800506a:	e079      	b.n	8005160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01d      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10d      	bne.n	80050a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	2b00      	cmp	r3, #0
 800508e:	d031      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4798      	blx	r3
 8005098:	e02c      	b.n	80050f4 <HAL_DMA_IRQHandler+0x2a0>
 800509a:	bf00      	nop
 800509c:	20000008 	.word	0x20000008
 80050a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d023      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	e01e      	b.n	80050f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0210 	bic.w	r2, r2, #16
 80050d2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d032      	beq.n	8005162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d022      	beq.n	800514e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2205      	movs	r2, #5
 800510c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	3301      	adds	r3, #1
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d307      	bcc.n	800513c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f2      	bne.n	8005120 <HAL_DMA_IRQHandler+0x2cc>
 800513a:	e000      	b.n	800513e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800513c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
 800515e:	e000      	b.n	8005162 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005160:	bf00      	nop
    }
  }
}
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005176:	b2db      	uxtb	r3, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	3b10      	subs	r3, #16
 8005194:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800519e:	4a13      	ldr	r2, [pc, #76]	; (80051ec <DMA_CalcBaseAndBitshift+0x68>)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d909      	bls.n	80051c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	659a      	str	r2, [r3, #88]	; 0x58
 80051c4:	e007      	b.n	80051d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	aaaaaaab 	.word	0xaaaaaaab
 80051ec:	0800e084 	.word	0x0800e084

080051f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11f      	bne.n	800524a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d856      	bhi.n	80052be <DMA_CheckFifoParam+0xce>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <DMA_CheckFifoParam+0x28>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	0800523b 	.word	0x0800523b
 8005220:	08005229 	.word	0x08005229
 8005224:	080052bf 	.word	0x080052bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d046      	beq.n	80052c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005238:	e043      	b.n	80052c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005242:	d140      	bne.n	80052c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005248:	e03d      	b.n	80052c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	d121      	bne.n	8005298 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d837      	bhi.n	80052ca <DMA_CheckFifoParam+0xda>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <DMA_CheckFifoParam+0x70>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005271 	.word	0x08005271
 8005264:	08005277 	.word	0x08005277
 8005268:	08005271 	.word	0x08005271
 800526c:	08005289 	.word	0x08005289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e030      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d025      	beq.n	80052ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005286:	e022      	b.n	80052ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005290:	d11f      	bne.n	80052d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005296:	e01c      	b.n	80052d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d903      	bls.n	80052a6 <DMA_CheckFifoParam+0xb6>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d003      	beq.n	80052ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052a4:	e018      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
      break;
 80052aa:	e015      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00e      	beq.n	80052d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e00b      	b.n	80052d6 <DMA_CheckFifoParam+0xe6>
      break;
 80052be:	bf00      	nop
 80052c0:	e00a      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052c2:	bf00      	nop
 80052c4:	e008      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052c6:	bf00      	nop
 80052c8:	e006      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ca:	bf00      	nop
 80052cc:	e004      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ce:	bf00      	nop
 80052d0:	e002      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052d2:	bf00      	nop
 80052d4:	e000      	b.n	80052d8 <DMA_CheckFifoParam+0xe8>
      break;
 80052d6:	bf00      	nop
    }
  } 
  
  return status; 
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop

080052e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e165      	b.n	80055d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005304:	2201      	movs	r2, #1
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	429a      	cmp	r2, r3
 800531e:	f040 8154 	bne.w	80055ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d005      	beq.n	800533a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005336:	2b02      	cmp	r3, #2
 8005338:	d130      	bne.n	800539c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005370:	2201      	movs	r2, #1
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 0201 	and.w	r2, r3, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d017      	beq.n	80053d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2203      	movs	r2, #3
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d123      	bne.n	800542c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	08da      	lsrs	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3208      	adds	r2, #8
 80053ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	220f      	movs	r2, #15
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	08da      	lsrs	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3208      	adds	r2, #8
 8005426:	69b9      	ldr	r1, [r7, #24]
 8005428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2203      	movs	r2, #3
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0203 	and.w	r2, r3, #3
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 80ae 	beq.w	80055ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	4b5d      	ldr	r3, [pc, #372]	; (80055e8 <HAL_GPIO_Init+0x300>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	4a5c      	ldr	r2, [pc, #368]	; (80055e8 <HAL_GPIO_Init+0x300>)
 8005478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800547c:	6453      	str	r3, [r2, #68]	; 0x44
 800547e:	4b5a      	ldr	r3, [pc, #360]	; (80055e8 <HAL_GPIO_Init+0x300>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800548a:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_GPIO_Init+0x304>)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	3302      	adds	r3, #2
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	220f      	movs	r2, #15
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a4f      	ldr	r2, [pc, #316]	; (80055f0 <HAL_GPIO_Init+0x308>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d025      	beq.n	8005502 <HAL_GPIO_Init+0x21a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a4e      	ldr	r2, [pc, #312]	; (80055f4 <HAL_GPIO_Init+0x30c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01f      	beq.n	80054fe <HAL_GPIO_Init+0x216>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a4d      	ldr	r2, [pc, #308]	; (80055f8 <HAL_GPIO_Init+0x310>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d019      	beq.n	80054fa <HAL_GPIO_Init+0x212>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a4c      	ldr	r2, [pc, #304]	; (80055fc <HAL_GPIO_Init+0x314>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_GPIO_Init+0x20e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a4b      	ldr	r2, [pc, #300]	; (8005600 <HAL_GPIO_Init+0x318>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00d      	beq.n	80054f2 <HAL_GPIO_Init+0x20a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a4a      	ldr	r2, [pc, #296]	; (8005604 <HAL_GPIO_Init+0x31c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <HAL_GPIO_Init+0x206>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a49      	ldr	r2, [pc, #292]	; (8005608 <HAL_GPIO_Init+0x320>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_GPIO_Init+0x202>
 80054e6:	2306      	movs	r3, #6
 80054e8:	e00c      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 80054ea:	2307      	movs	r3, #7
 80054ec:	e00a      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 80054ee:	2305      	movs	r3, #5
 80054f0:	e008      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 80054f2:	2304      	movs	r3, #4
 80054f4:	e006      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 80054f6:	2303      	movs	r3, #3
 80054f8:	e004      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e002      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_GPIO_Init+0x21c>
 8005502:	2300      	movs	r3, #0
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	f002 0203 	and.w	r2, r2, #3
 800550a:	0092      	lsls	r2, r2, #2
 800550c:	4093      	lsls	r3, r2
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005514:	4935      	ldr	r1, [pc, #212]	; (80055ec <HAL_GPIO_Init+0x304>)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	089b      	lsrs	r3, r3, #2
 800551a:	3302      	adds	r3, #2
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005522:	4b3a      	ldr	r3, [pc, #232]	; (800560c <HAL_GPIO_Init+0x324>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005546:	4a31      	ldr	r2, [pc, #196]	; (800560c <HAL_GPIO_Init+0x324>)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800554c:	4b2f      	ldr	r3, [pc, #188]	; (800560c <HAL_GPIO_Init+0x324>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_GPIO_Init+0x324>)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005576:	4b25      	ldr	r3, [pc, #148]	; (800560c <HAL_GPIO_Init+0x324>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_GPIO_Init+0x324>)
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_GPIO_Init+0x324>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_GPIO_Init+0x324>)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	f67f ae96 	bls.w	8005304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	3724      	adds	r7, #36	; 0x24
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40013800 	.word	0x40013800
 80055f0:	40020000 	.word	0x40020000
 80055f4:	40020400 	.word	0x40020400
 80055f8:	40020800 	.word	0x40020800
 80055fc:	40020c00 	.word	0x40020c00
 8005600:	40021000 	.word	0x40021000
 8005604:	40021400 	.word	0x40021400
 8005608:	40021800 	.word	0x40021800
 800560c:	40013c00 	.word	0x40013c00

08005610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
 800561c:	4613      	mov	r3, r2
 800561e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800562c:	e003      	b.n	8005636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800562e:	887b      	ldrh	r3, [r7, #2]
 8005630:	041a      	lsls	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	619a      	str	r2, [r3, #24]
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800565a:	4a05      	ldr	r2, [pc, #20]	; (8005670 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f806 	bl	8005674 <HAL_GPIO_EXTI_Callback>
  }
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40013c00 	.word	0x40013c00

08005674 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e12b      	b.n	80058f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fe fd70 	bl	8004198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056f0:	f002 fada 	bl	8007ca8 <HAL_RCC_GetPCLK1Freq>
 80056f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4a81      	ldr	r2, [pc, #516]	; (8005900 <HAL_I2C_Init+0x274>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d807      	bhi.n	8005710 <HAL_I2C_Init+0x84>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a80      	ldr	r2, [pc, #512]	; (8005904 <HAL_I2C_Init+0x278>)
 8005704:	4293      	cmp	r3, r2
 8005706:	bf94      	ite	ls
 8005708:	2301      	movls	r3, #1
 800570a:	2300      	movhi	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e006      	b.n	800571e <HAL_I2C_Init+0x92>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a7d      	ldr	r2, [pc, #500]	; (8005908 <HAL_I2C_Init+0x27c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	bf94      	ite	ls
 8005718:	2301      	movls	r3, #1
 800571a:	2300      	movhi	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0e7      	b.n	80058f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a78      	ldr	r2, [pc, #480]	; (800590c <HAL_I2C_Init+0x280>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	0c9b      	lsrs	r3, r3, #18
 8005730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4a6a      	ldr	r2, [pc, #424]	; (8005900 <HAL_I2C_Init+0x274>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d802      	bhi.n	8005760 <HAL_I2C_Init+0xd4>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3301      	adds	r3, #1
 800575e:	e009      	b.n	8005774 <HAL_I2C_Init+0xe8>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	4a69      	ldr	r2, [pc, #420]	; (8005910 <HAL_I2C_Init+0x284>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	099b      	lsrs	r3, r3, #6
 8005772:	3301      	adds	r3, #1
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	430b      	orrs	r3, r1
 800577a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005786:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	495c      	ldr	r1, [pc, #368]	; (8005900 <HAL_I2C_Init+0x274>)
 8005790:	428b      	cmp	r3, r1
 8005792:	d819      	bhi.n	80057c8 <HAL_I2C_Init+0x13c>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	1e59      	subs	r1, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fbb1 f3f3 	udiv	r3, r1, r3
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057a8:	400b      	ands	r3, r1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_I2C_Init+0x138>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1e59      	subs	r1, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057bc:	3301      	adds	r3, #1
 80057be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c2:	e051      	b.n	8005868 <HAL_I2C_Init+0x1dc>
 80057c4:	2304      	movs	r3, #4
 80057c6:	e04f      	b.n	8005868 <HAL_I2C_Init+0x1dc>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d111      	bne.n	80057f4 <HAL_I2C_Init+0x168>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1e58      	subs	r0, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	440b      	add	r3, r1
 80057de:	fbb0 f3f3 	udiv	r3, r0, r3
 80057e2:	3301      	adds	r3, #1
 80057e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	e012      	b.n	800581a <HAL_I2C_Init+0x18e>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1e58      	subs	r0, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6859      	ldr	r1, [r3, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	0099      	lsls	r1, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	fbb0 f3f3 	udiv	r3, r0, r3
 800580a:	3301      	adds	r3, #1
 800580c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_I2C_Init+0x196>
 800581e:	2301      	movs	r3, #1
 8005820:	e022      	b.n	8005868 <HAL_I2C_Init+0x1dc>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10e      	bne.n	8005848 <HAL_I2C_Init+0x1bc>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1e58      	subs	r0, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6859      	ldr	r1, [r3, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	440b      	add	r3, r1
 8005838:	fbb0 f3f3 	udiv	r3, r0, r3
 800583c:	3301      	adds	r3, #1
 800583e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005846:	e00f      	b.n	8005868 <HAL_I2C_Init+0x1dc>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1e58      	subs	r0, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	0099      	lsls	r1, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	fbb0 f3f3 	udiv	r3, r0, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	6809      	ldr	r1, [r1, #0]
 800586c:	4313      	orrs	r3, r2
 800586e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6911      	ldr	r1, [r2, #16]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68d2      	ldr	r2, [r2, #12]
 80058a2:	4311      	orrs	r1, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	000186a0 	.word	0x000186a0
 8005904:	001e847f 	.word	0x001e847f
 8005908:	003d08ff 	.word	0x003d08ff
 800590c:	431bde83 	.word	0x431bde83
 8005910:	10624dd3 	.word	0x10624dd3

08005914 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	; 0x30
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	461a      	mov	r2, r3
 8005922:	4603      	mov	r3, r0
 8005924:	817b      	strh	r3, [r7, #10]
 8005926:	460b      	mov	r3, r1
 8005928:	813b      	strh	r3, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800592e:	f7fe fdeb 	bl	8004508 <HAL_GetTick>
 8005932:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b20      	cmp	r3, #32
 800593e:	f040 8208 	bne.w	8005d52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2319      	movs	r3, #25
 8005948:	2201      	movs	r2, #1
 800594a:	497b      	ldr	r1, [pc, #492]	; (8005b38 <HAL_I2C_Mem_Read+0x224>)
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f001 fe67 	bl	8007620 <I2C_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	e1fb      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_I2C_Mem_Read+0x56>
 8005966:	2302      	movs	r3, #2
 8005968:	e1f4      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b01      	cmp	r3, #1
 800597e:	d007      	beq.n	8005990 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800599e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2222      	movs	r2, #34	; 0x22
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2240      	movs	r2, #64	; 0x40
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a5b      	ldr	r2, [pc, #364]	; (8005b3c <HAL_I2C_Mem_Read+0x228>)
 80059d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059d2:	88f8      	ldrh	r0, [r7, #6]
 80059d4:	893a      	ldrh	r2, [r7, #8]
 80059d6:	8979      	ldrh	r1, [r7, #10]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f001 fc8c 	bl	8007300 <I2C_RequestMemoryRead>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e1b0      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d113      	bne.n	8005a22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e184      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d11b      	bne.n	8005a62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e164      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d11b      	bne.n	8005aa2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	e144      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ab8:	e138      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	f200 80f1 	bhi.w	8005ca6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d123      	bne.n	8005b14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ace:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f001 feef 	bl	80078b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e139      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b12:	e10b      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d14e      	bne.n	8005bba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2200      	movs	r2, #0
 8005b24:	4906      	ldr	r1, [pc, #24]	; (8005b40 <HAL_I2C_Mem_Read+0x22c>)
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f001 fd7a 	bl	8007620 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e10e      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
 8005b36:	bf00      	nop
 8005b38:	00100002 	.word	0x00100002
 8005b3c:	ffff0000 	.word	0xffff0000
 8005b40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bb8:	e0b8      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4966      	ldr	r1, [pc, #408]	; (8005d5c <HAL_I2C_Mem_Read+0x448>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f001 fd2b 	bl	8007620 <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0bf      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	494f      	ldr	r1, [pc, #316]	; (8005d5c <HAL_I2C_Mem_Read+0x448>)
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f001 fcfd 	bl	8007620 <I2C_WaitOnFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e091      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ca4:	e042      	b.n	8005d2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 fe02 	bl	80078b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e04c      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d118      	bne.n	8005d2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f47f aec2 	bne.w	8005aba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e000      	b.n	8005d54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d52:	2302      	movs	r3, #2
  }
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3728      	adds	r7, #40	; 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	00010004 	.word	0x00010004

08005d60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d003      	beq.n	8005d98 <HAL_I2C_EV_IRQHandler+0x38>
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	f040 80c1 	bne.w	8005f1a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <HAL_I2C_EV_IRQHandler+0x6e>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005db8:	d003      	beq.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x62>
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005dc0:	d101      	bne.n	8005dc6 <HAL_I2C_EV_IRQHandler+0x66>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x68>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	f000 8132 	beq.w	8006032 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <HAL_I2C_EV_IRQHandler+0x92>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	0a5b      	lsrs	r3, r3, #9
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 fdea 	bl	80079be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fcdc 	bl	80067a8 <I2C_Master_SB>
 8005df0:	e092      	b.n	8005f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_I2C_EV_IRQHandler+0xb2>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	0a5b      	lsrs	r3, r3, #9
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd52 	bl	80068b4 <I2C_Master_ADD10>
 8005e10:	e082      	b.n	8005f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_I2C_EV_IRQHandler+0xd2>
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	0a5b      	lsrs	r3, r3, #9
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fd6c 	bl	8006908 <I2C_Master_ADDR>
 8005e30:	e072      	b.n	8005f18 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	089b      	lsrs	r3, r3, #2
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d03b      	beq.n	8005eb6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	f000 80f3 	beq.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	09db      	lsrs	r3, r3, #7
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00f      	beq.n	8005e7c <HAL_I2C_EV_IRQHandler+0x11c>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	0a9b      	lsrs	r3, r3, #10
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <HAL_I2C_EV_IRQHandler+0x11c>
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d103      	bne.n	8005e7c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f94c 	bl	8006112 <I2C_MasterTransmit_TXE>
 8005e7a:	e04d      	b.n	8005f18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80d6 	beq.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	0a5b      	lsrs	r3, r3, #9
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80cf 	beq.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	2b21      	cmp	r3, #33	; 0x21
 8005e9c:	d103      	bne.n	8005ea6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9d3 	bl	800624a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ea4:	e0c7      	b.n	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	f040 80c4 	bne.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa41 	bl	8006336 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eb4:	e0bf      	b.n	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec4:	f000 80b7 	beq.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	099b      	lsrs	r3, r3, #6
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00f      	beq.n	8005ef4 <HAL_I2C_EV_IRQHandler+0x194>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	0a9b      	lsrs	r3, r3, #10
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_I2C_EV_IRQHandler+0x194>
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fab6 	bl	800645e <I2C_MasterReceive_RXNE>
 8005ef2:	e011      	b.n	8005f18 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 809a 	beq.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	0a5b      	lsrs	r3, r3, #9
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 8093 	beq.w	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fb5f 	bl	80065d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f16:	e08e      	b.n	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f18:	e08d      	b.n	8006036 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	e007      	b.n	8005f3c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d012      	beq.n	8005f6e <HAL_I2C_EV_IRQHandler+0x20e>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	0a5b      	lsrs	r3, r3, #9
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005f64:	69b9      	ldr	r1, [r7, #24]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 ff1d 	bl	8006da6 <I2C_Slave_ADDR>
 8005f6c:	e066      	b.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <HAL_I2C_EV_IRQHandler+0x22e>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	0a5b      	lsrs	r3, r3, #9
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 ff58 	bl	8006e3c <I2C_Slave_STOPF>
 8005f8c:	e056      	b.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	2b21      	cmp	r3, #33	; 0x21
 8005f92:	d002      	beq.n	8005f9a <HAL_I2C_EV_IRQHandler+0x23a>
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b29      	cmp	r3, #41	; 0x29
 8005f98:	d125      	bne.n	8005fe6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	09db      	lsrs	r3, r3, #7
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00f      	beq.n	8005fc6 <HAL_I2C_EV_IRQHandler+0x266>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	0a9b      	lsrs	r3, r3, #10
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <HAL_I2C_EV_IRQHandler+0x266>
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fe33 	bl	8006c2a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fc4:	e039      	b.n	800603a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d033      	beq.n	800603a <HAL_I2C_EV_IRQHandler+0x2da>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	0a5b      	lsrs	r3, r3, #9
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02d      	beq.n	800603a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fe60 	bl	8006ca4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe4:	e029      	b.n	800603a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	099b      	lsrs	r3, r3, #6
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00f      	beq.n	8006012 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	0a9b      	lsrs	r3, r3, #10
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	089b      	lsrs	r3, r3, #2
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fe6b 	bl	8006ce6 <I2C_SlaveReceive_RXNE>
 8006010:	e014      	b.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	089b      	lsrs	r3, r3, #2
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	0a5b      	lsrs	r3, r3, #9
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fe99 	bl	8006d62 <I2C_SlaveReceive_BTF>
 8006030:	e004      	b.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006032:	bf00      	nop
 8006034:	e002      	b.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800603a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
 800609e:	4613      	mov	r3, r2
 80060a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006128:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d150      	bne.n	80061da <I2C_MasterTransmit_TXE+0xc8>
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b21      	cmp	r3, #33	; 0x21
 800613c:	d14d      	bne.n	80061da <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b08      	cmp	r3, #8
 8006142:	d01d      	beq.n	8006180 <I2C_MasterTransmit_TXE+0x6e>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b20      	cmp	r3, #32
 8006148:	d01a      	beq.n	8006180 <I2C_MasterTransmit_TXE+0x6e>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006150:	d016      	beq.n	8006180 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006160:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2211      	movs	r2, #17
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff62 	bl	8006042 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800617e:	e060      	b.n	8006242 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800618e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800619e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d107      	bne.n	80061ca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff ff7d 	bl	80060c2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061c8:	e03b      	b.n	8006242 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff ff35 	bl	8006042 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061d8:	e033      	b.n	8006242 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b21      	cmp	r3, #33	; 0x21
 80061de:	d005      	beq.n	80061ec <I2C_MasterTransmit_TXE+0xda>
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d12d      	bne.n	8006242 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2b22      	cmp	r3, #34	; 0x22
 80061ea:	d12a      	bne.n	8006242 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d108      	bne.n	8006208 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006204:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006206:	e01c      	b.n	8006242 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d103      	bne.n	800621c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f88e 	bl	8006336 <I2C_MemoryTransmit_TXE_BTF>
}
 800621a:	e012      	b.n	8006242 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006240:	e7ff      	b.n	8006242 <I2C_MasterTransmit_TXE+0x130>
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b21      	cmp	r3, #33	; 0x21
 8006262:	d164      	bne.n	800632e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d012      	beq.n	8006294 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006292:	e04c      	b.n	800632e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b08      	cmp	r3, #8
 8006298:	d01d      	beq.n	80062d6 <I2C_MasterTransmit_BTF+0x8c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b20      	cmp	r3, #32
 800629e:	d01a      	beq.n	80062d6 <I2C_MasterTransmit_BTF+0x8c>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062a6:	d016      	beq.n	80062d6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062b6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2211      	movs	r2, #17
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff feb7 	bl	8006042 <HAL_I2C_MasterTxCpltCallback>
}
 80062d4:	e02b      	b.n	800632e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062e4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d107      	bne.n	8006320 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff fed2 	bl	80060c2 <HAL_I2C_MemTxCpltCallback>
}
 800631e:	e006      	b.n	800632e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fe8a 	bl	8006042 <HAL_I2C_MasterTxCpltCallback>
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634a:	2b00      	cmp	r3, #0
 800634c:	d11d      	bne.n	800638a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10b      	bne.n	800636e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	b2da      	uxtb	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006366:	1c9a      	adds	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800636c:	e073      	b.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	b29b      	uxth	r3, r3
 8006374:	121b      	asrs	r3, r3, #8
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006388:	e065      	b.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10b      	bne.n	80063aa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006396:	b2da      	uxtb	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063a8:	e055      	b.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d151      	bne.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b22      	cmp	r3, #34	; 0x22
 80063b6:	d10d      	bne.n	80063d4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063d2:	e040      	b.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d015      	beq.n	800640a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b21      	cmp	r3, #33	; 0x21
 80063e2:	d112      	bne.n	800640a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006408:	e025      	b.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d120      	bne.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b21      	cmp	r3, #33	; 0x21
 8006418:	d11d      	bne.n	8006456 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006428:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006438:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff fe36 	bl	80060c2 <HAL_I2C_MemTxCpltCallback>
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b22      	cmp	r3, #34	; 0x22
 8006470:	f040 80ac 	bne.w	80065cc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b03      	cmp	r3, #3
 8006480:	d921      	bls.n	80064c6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	f040 808c 	bne.w	80065cc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80064c4:	e082      	b.n	80065cc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d075      	beq.n	80065ba <I2C_MasterReceive_RXNE+0x15c>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d002      	beq.n	80064da <I2C_MasterReceive_RXNE+0x7c>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d16f      	bne.n	80065ba <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f9b8 	bl	8007850 <I2C_WaitOnSTOPRequestThroughIT>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d142      	bne.n	800656c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006504:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d10a      	bne.n	8006556 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fdc1 	bl	80060d6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006554:	e03a      	b.n	80065cc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2212      	movs	r2, #18
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fd76 	bl	8006056 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800656a:	e02f      	b.n	80065cc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800657a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fd99 	bl	80060ea <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065b8:	e008      	b.n	80065cc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c8:	605a      	str	r2, [r3, #4]
}
 80065ca:	e7ff      	b.n	80065cc <I2C_MasterReceive_RXNE+0x16e>
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d11b      	bne.n	8006624 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006622:	e0bd      	b.n	80067a0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d129      	bne.n	8006682 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b04      	cmp	r3, #4
 8006642:	d00a      	beq.n	800665a <I2C_MasterReceive_BTF+0x86>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d007      	beq.n	800665a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006658:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006680:	e08e      	b.n	80067a0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d176      	bne.n	800677a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d002      	beq.n	8006698 <I2C_MasterReceive_BTF+0xc4>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b10      	cmp	r3, #16
 8006696:	d108      	bne.n	80066aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e019      	b.n	80066de <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d002      	beq.n	80066b6 <I2C_MasterReceive_BTF+0xe2>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d108      	bne.n	80066c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e00a      	b.n	80066de <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b10      	cmp	r3, #16
 80066cc:	d007      	beq.n	80066de <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006738:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d10a      	bne.n	8006764 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fcba 	bl	80060d6 <HAL_I2C_MemRxCpltCallback>
}
 8006762:	e01d      	b.n	80067a0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2212      	movs	r2, #18
 8006770:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fc6f 	bl	8006056 <HAL_I2C_MasterRxCpltCallback>
}
 8006778:	e012      	b.n	80067a0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d117      	bne.n	80067ec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80067d6:	e067      	b.n	80068a8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	611a      	str	r2, [r3, #16]
}
 80067ea:	e05d      	b.n	80068a8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f4:	d133      	bne.n	800685e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b21      	cmp	r3, #33	; 0x21
 8006800:	d109      	bne.n	8006816 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	b2db      	uxtb	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006812:	611a      	str	r2, [r3, #16]
 8006814:	e008      	b.n	8006828 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <I2C_Master_SB+0x92>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d032      	beq.n	80068a8 <I2C_Master_SB+0x100>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d02d      	beq.n	80068a8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685a:	605a      	str	r2, [r3, #4]
}
 800685c:	e024      	b.n	80068a8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10e      	bne.n	8006884 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	b29b      	uxth	r3, r3
 800686c:	11db      	asrs	r3, r3, #7
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0306 	and.w	r3, r3, #6
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f063 030f 	orn	r3, r3, #15
 800687a:	b2da      	uxtb	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	611a      	str	r2, [r3, #16]
}
 8006882:	e011      	b.n	80068a8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	2b01      	cmp	r3, #1
 800688a:	d10d      	bne.n	80068a8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006890:	b29b      	uxth	r3, r3
 8006892:	11db      	asrs	r3, r3, #7
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 0306 	and.w	r3, r3, #6
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f063 030e 	orn	r3, r3, #14
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	611a      	str	r2, [r3, #16]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <I2C_Master_ADD10+0x26>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d108      	bne.n	80068ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <I2C_Master_ADD10+0x48>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fa:	605a      	str	r2, [r3, #4]
  }
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006908:	b480      	push	{r7}
 800690a:	b091      	sub	sp, #68	; 0x44
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b22      	cmp	r3, #34	; 0x22
 8006930:	f040 8169 	bne.w	8006c06 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10f      	bne.n	800695c <I2C_Master_ADDR+0x54>
 800693c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d10b      	bne.n	800695c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006944:	2300      	movs	r3, #0
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	633b      	str	r3, [r7, #48]	; 0x30
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	e160      	b.n	8006c1e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11d      	bne.n	80069a0 <I2C_Master_ADDR+0x98>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800696c:	d118      	bne.n	80069a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696e:	2300      	movs	r3, #0
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006992:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	651a      	str	r2, [r3, #80]	; 0x50
 800699e:	e13e      	b.n	8006c1e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d113      	bne.n	80069d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069aa:	2300      	movs	r3, #0
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e115      	b.n	8006bfe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f040 808a 	bne.w	8006af2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069e4:	d137      	bne.n	8006a56 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a04:	d113      	bne.n	8006a2e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a14:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	e0e7      	b.n	8006bfe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	e0d3      	b.n	8006bfe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d02e      	beq.n	8006aba <I2C_Master_ADDR+0x1b2>
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d02b      	beq.n	8006aba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	2b12      	cmp	r3, #18
 8006a66:	d102      	bne.n	8006a6e <I2C_Master_ADDR+0x166>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d125      	bne.n	8006aba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d00e      	beq.n	8006a92 <I2C_Master_ADDR+0x18a>
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d00b      	beq.n	8006a92 <I2C_Master_ADDR+0x18a>
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d008      	beq.n	8006a92 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e007      	b.n	8006aa2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aa0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	e0a1      	b.n	8006bfe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aca:	2300      	movs	r3, #0
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	e085      	b.n	8006bfe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d14d      	bne.n	8006b98 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d016      	beq.n	8006b30 <I2C_Master_ADDR+0x228>
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d013      	beq.n	8006b30 <I2C_Master_ADDR+0x228>
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d010      	beq.n	8006b30 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e007      	b.n	8006b40 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b3e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4e:	d117      	bne.n	8006b80 <I2C_Master_ADDR+0x278>
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b56:	d00b      	beq.n	8006b70 <I2C_Master_ADDR+0x268>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d008      	beq.n	8006b70 <I2C_Master_ADDR+0x268>
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d005      	beq.n	8006b70 <I2C_Master_ADDR+0x268>
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d002      	beq.n	8006b70 <I2C_Master_ADDR+0x268>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	d107      	bne.n	8006b80 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b7e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	e032      	b.n	8006bfe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb6:	d117      	bne.n	8006be8 <I2C_Master_ADDR+0x2e0>
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bbe:	d00b      	beq.n	8006bd8 <I2C_Master_ADDR+0x2d0>
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d008      	beq.n	8006bd8 <I2C_Master_ADDR+0x2d0>
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d005      	beq.n	8006bd8 <I2C_Master_ADDR+0x2d0>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	2b10      	cmp	r3, #16
 8006bd0:	d002      	beq.n	8006bd8 <I2C_Master_ADDR+0x2d0>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d107      	bne.n	8006be8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006be6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c04:	e00b      	b.n	8006c1e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	e7ff      	b.n	8006c1e <I2C_Master_ADDR+0x316>
 8006c1e:	bf00      	nop
 8006c20:	3744      	adds	r7, #68	; 0x44
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02b      	beq.n	8006c9c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d114      	bne.n	8006c9c <I2C_SlaveTransmit_TXE+0x72>
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b29      	cmp	r3, #41	; 0x29
 8006c76:	d111      	bne.n	8006c9c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2221      	movs	r2, #33	; 0x21
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2228      	movs	r2, #40	; 0x28
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f9e7 	bl	800606a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d011      	beq.n	8006cda <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d02c      	beq.n	8006d5a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d114      	bne.n	8006d5a <I2C_SlaveReceive_RXNE+0x74>
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b2a      	cmp	r3, #42	; 0x2a
 8006d34:	d111      	bne.n	8006d5a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d44:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2222      	movs	r2, #34	; 0x22
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2228      	movs	r2, #40	; 0x28
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff f992 	bl	800607e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d012      	beq.n	8006d9a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dc0:	2b28      	cmp	r3, #40	; 0x28
 8006dc2:	d127      	bne.n	8006e14 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	089b      	lsrs	r3, r3, #2
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	09db      	lsrs	r3, r3, #7
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	81bb      	strh	r3, [r7, #12]
 8006df6:	e002      	b.n	8006dfe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e06:	89ba      	ldrh	r2, [r7, #12]
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff f940 	bl	8006092 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e12:	e00e      	b.n	8006e32 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e14:	2300      	movs	r3, #0
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	60bb      	str	r3, [r7, #8]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	d172      	bne.n	8006f80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b22      	cmp	r3, #34	; 0x22
 8006e9e:	d002      	beq.n	8006ea6 <I2C_Slave_STOPF+0x6a>
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea4:	d135      	bne.n	8006f12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f043 0204 	orr.w	r2, r3, #4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe f942 	bl	8005168 <HAL_DMA_GetState>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d049      	beq.n	8006f7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	4a69      	ldr	r2, [pc, #420]	; (8007094 <I2C_Slave_STOPF+0x258>)
 8006ef0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd ff8a 	bl	8004e10 <HAL_DMA_Abort_IT>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d03d      	beq.n	8006f7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f10:	e035      	b.n	8006f7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f043 0204 	orr.w	r2, r3, #4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f90c 	bl	8005168 <HAL_DMA_GetState>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d014      	beq.n	8006f80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	4a4e      	ldr	r2, [pc, #312]	; (8007094 <I2C_Slave_STOPF+0x258>)
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd ff54 	bl	8004e10 <HAL_DMA_Abort_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	e000      	b.n	8006f80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d03e      	beq.n	8007008 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d112      	bne.n	8006fbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d112      	bne.n	8006ff2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f043 0204 	orr.w	r2, r3, #4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f843 	bl	800709c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007016:	e039      	b.n	800708c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b2a      	cmp	r3, #42	; 0x2a
 800701c:	d109      	bne.n	8007032 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2228      	movs	r2, #40	; 0x28
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff f826 	bl	800607e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b28      	cmp	r3, #40	; 0x28
 800703c:	d111      	bne.n	8007062 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a15      	ldr	r2, [pc, #84]	; (8007098 <I2C_Slave_STOPF+0x25c>)
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff f827 	bl	80060ae <HAL_I2C_ListenCpltCallback>
}
 8007060:	e014      	b.n	800708c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	2b22      	cmp	r3, #34	; 0x22
 8007068:	d002      	beq.n	8007070 <I2C_Slave_STOPF+0x234>
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b22      	cmp	r3, #34	; 0x22
 800706e:	d10d      	bne.n	800708c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fe fff9 	bl	800607e <HAL_I2C_SlaveRxCpltCallback>
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	080074d1 	.word	0x080074d1
 8007098:	ffff0000 	.word	0xffff0000

0800709c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d002      	beq.n	80070c0 <I2C_ITError+0x24>
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d10a      	bne.n	80070d6 <I2C_ITError+0x3a>
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b22      	cmp	r3, #34	; 0x22
 80070c4:	d107      	bne.n	80070d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070dc:	2b28      	cmp	r3, #40	; 0x28
 80070de:	d107      	bne.n	80070f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2228      	movs	r2, #40	; 0x28
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070ee:	e015      	b.n	800711c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fe:	d00a      	beq.n	8007116 <I2C_ITError+0x7a>
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2b60      	cmp	r3, #96	; 0x60
 8007104:	d007      	beq.n	8007116 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	d162      	bne.n	80071f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800713a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b01      	cmp	r3, #1
 8007148:	d020      	beq.n	800718c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	4a6a      	ldr	r2, [pc, #424]	; (80072f8 <I2C_ITError+0x25c>)
 8007150:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd fe5a 	bl	8004e10 <HAL_DMA_Abort_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8089 	beq.w	8007276 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007186:	4610      	mov	r0, r2
 8007188:	4798      	blx	r3
 800718a:	e074      	b.n	8007276 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	4a59      	ldr	r2, [pc, #356]	; (80072f8 <I2C_ITError+0x25c>)
 8007192:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	4618      	mov	r0, r3
 800719a:	f7fd fe39 	bl	8004e10 <HAL_DMA_Abort_IT>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d068      	beq.n	8007276 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d10b      	bne.n	80071ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	e041      	b.n	8007276 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b60      	cmp	r3, #96	; 0x60
 80071fc:	d125      	bne.n	800724a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d10b      	bne.n	8007232 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0201 	bic.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe ff5b 	bl	80060fe <HAL_I2C_AbortCpltCallback>
 8007248:	e015      	b.n	8007276 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b40      	cmp	r3, #64	; 0x40
 8007256:	d10b      	bne.n	8007270 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7fe ff3a 	bl	80060ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10e      	bne.n	80072a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800728c:	2b00      	cmp	r3, #0
 800728e:	d109      	bne.n	80072a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d113      	bne.n	80072f0 <I2C_ITError+0x254>
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b28      	cmp	r3, #40	; 0x28
 80072cc:	d110      	bne.n	80072f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <I2C_ITError+0x260>)
 80072d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fe fedf 	bl	80060ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	080074d1 	.word	0x080074d1
 80072fc:	ffff0000 	.word	0xffff0000

08007300 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	4608      	mov	r0, r1
 800730a:	4611      	mov	r1, r2
 800730c:	461a      	mov	r2, r3
 800730e:	4603      	mov	r3, r0
 8007310:	817b      	strh	r3, [r7, #10]
 8007312:	460b      	mov	r3, r1
 8007314:	813b      	strh	r3, [r7, #8]
 8007316:	4613      	mov	r3, r2
 8007318:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007328:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2200      	movs	r2, #0
 8007342:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f96a 	bl	8007620 <I2C_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00d      	beq.n	800736e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007360:	d103      	bne.n	800736a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e0aa      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800736e:	897b      	ldrh	r3, [r7, #10]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800737c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	4952      	ldr	r1, [pc, #328]	; (80074cc <I2C_RequestMemoryRead+0x1cc>)
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f9a2 	bl	80076ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e097      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ac:	6a39      	ldr	r1, [r7, #32]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 fa0c 	bl	80077cc <I2C_WaitOnTXEFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d107      	bne.n	80073d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e076      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d105      	bne.n	80073e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073dc:	893b      	ldrh	r3, [r7, #8]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	611a      	str	r2, [r3, #16]
 80073e6:	e021      	b.n	800742c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073e8:	893b      	ldrh	r3, [r7, #8]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f8:	6a39      	ldr	r1, [r7, #32]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f9e6 	bl	80077cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00d      	beq.n	8007422 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	2b04      	cmp	r3, #4
 800740c:	d107      	bne.n	800741e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e050      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007422:	893b      	ldrh	r3, [r7, #8]
 8007424:	b2da      	uxtb	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800742c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742e:	6a39      	ldr	r1, [r7, #32]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f9cb 	bl	80077cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	2b04      	cmp	r3, #4
 8007442:	d107      	bne.n	8007454 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007452:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e035      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007466:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2200      	movs	r2, #0
 8007470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f8d3 	bl	8007620 <I2C_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00d      	beq.n	800749c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748e:	d103      	bne.n	8007498 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e013      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800749c:	897b      	ldrh	r3, [r7, #10]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	6a3a      	ldr	r2, [r7, #32]
 80074b0:	4906      	ldr	r1, [pc, #24]	; (80074cc <I2C_RequestMemoryRead+0x1cc>)
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f90b 	bl	80076ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	00010002 	.word	0x00010002

080074d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80074ea:	4b4b      	ldr	r3, [pc, #300]	; (8007618 <I2C_DMAAbort+0x148>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	08db      	lsrs	r3, r3, #3
 80074f0:	4a4a      	ldr	r2, [pc, #296]	; (800761c <I2C_DMAAbort+0x14c>)
 80074f2:	fba2 2303 	umull	r2, r3, r2, r3
 80074f6:	0a1a      	lsrs	r2, r3, #8
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	00da      	lsls	r2, r3, #3
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f043 0220 	orr.w	r2, r3, #32
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007516:	e00a      	b.n	800752e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3b01      	subs	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800752c:	d0ea      	beq.n	8007504 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753a:	2200      	movs	r2, #0
 800753c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	2200      	movs	r2, #0
 800754c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800755c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2200      	movs	r2, #0
 8007562:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	2200      	movs	r2, #0
 8007572:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	2200      	movs	r2, #0
 8007582:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0201 	bic.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d10e      	bne.n	80075be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2200      	movs	r2, #0
 80075b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7fe fda1 	bl	80060fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075bc:	e027      	b.n	800760e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075be:	7cfb      	ldrb	r3, [r7, #19]
 80075c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075c4:	2b28      	cmp	r3, #40	; 0x28
 80075c6:	d117      	bne.n	80075f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2228      	movs	r2, #40	; 0x28
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80075f6:	e007      	b.n	8007608 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007608:	6978      	ldr	r0, [r7, #20]
 800760a:	f7fe fd6e 	bl	80060ea <HAL_I2C_ErrorCallback>
}
 800760e:	bf00      	nop
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000008 	.word	0x20000008
 800761c:	14f8b589 	.word	0x14f8b589

08007620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007630:	e025      	b.n	800767e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d021      	beq.n	800767e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763a:	f7fc ff65 	bl	8004508 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d302      	bcc.n	8007650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d116      	bne.n	800767e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e023      	b.n	80076c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	0c1b      	lsrs	r3, r3, #16
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d10d      	bne.n	80076a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	43da      	mvns	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4013      	ands	r3, r2
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	bf0c      	ite	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	2300      	movne	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	e00c      	b.n	80076be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	43da      	mvns	r2, r3
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4013      	ands	r3, r2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d0b6      	beq.n	8007632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076dc:	e051      	b.n	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ec:	d123      	bne.n	8007736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007706:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f043 0204 	orr.w	r2, r3, #4
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e046      	b.n	80077c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d021      	beq.n	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773e:	f7fc fee3 	bl	8004508 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d302      	bcc.n	8007754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d116      	bne.n	8007782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e020      	b.n	80077c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	0c1b      	lsrs	r3, r3, #16
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d10c      	bne.n	80077a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	43da      	mvns	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4013      	ands	r3, r2
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e00b      	b.n	80077be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	43da      	mvns	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	4013      	ands	r3, r2
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d18d      	bne.n	80076de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077d8:	e02d      	b.n	8007836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f8c0 	bl	8007960 <I2C_IsAcknowledgeFailed>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e02d      	b.n	8007846 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d021      	beq.n	8007836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f2:	f7fc fe89 	bl	8004508 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d116      	bne.n	8007836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	f043 0220 	orr.w	r2, r3, #32
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e007      	b.n	8007846 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007840:	2b80      	cmp	r3, #128	; 0x80
 8007842:	d1ca      	bne.n	80077da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800785c:	4b13      	ldr	r3, [pc, #76]	; (80078ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007864:	fba2 2303 	umull	r2, r3, r2, r3
 8007868:	0a1a      	lsrs	r2, r3, #8
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3b01      	subs	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d107      	bne.n	800788e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	f043 0220 	orr.w	r2, r3, #32
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e008      	b.n	80078a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800789c:	d0e9      	beq.n	8007872 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000008 	.word	0x20000008
 80078b0:	14f8b589 	.word	0x14f8b589

080078b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078c0:	e042      	b.n	8007948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d119      	bne.n	8007904 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f06f 0210 	mvn.w	r2, #16
 80078d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e029      	b.n	8007958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007904:	f7fc fe00 	bl	8004508 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	d302      	bcc.n	800791a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d116      	bne.n	8007948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e007      	b.n	8007958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	d1b5      	bne.n	80078c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007976:	d11b      	bne.n	80079b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	f043 0204 	orr.w	r2, r3, #4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80079ce:	d103      	bne.n	80079d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80079d6:	e007      	b.n	80079e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079e0:	d102      	bne.n	80079e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2208      	movs	r2, #8
 80079e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0cc      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a08:	4b68      	ldr	r3, [pc, #416]	; (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d90c      	bls.n	8007a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a16:	4b65      	ldr	r3, [pc, #404]	; (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1e:	4b63      	ldr	r3, [pc, #396]	; (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e0b8      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d020      	beq.n	8007a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a48:	4b59      	ldr	r3, [pc, #356]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	4a58      	ldr	r2, [pc, #352]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a60:	4b53      	ldr	r3, [pc, #332]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a52      	ldr	r2, [pc, #328]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a6c:	4b50      	ldr	r3, [pc, #320]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	494d      	ldr	r1, [pc, #308]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d044      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a92:	4b47      	ldr	r3, [pc, #284]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d119      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e07f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d107      	bne.n	8007ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ab2:	4b3f      	ldr	r3, [pc, #252]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e06f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac2:	4b3b      	ldr	r3, [pc, #236]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e067      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ad2:	4b37      	ldr	r3, [pc, #220]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4934      	ldr	r1, [pc, #208]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ae4:	f7fc fd10 	bl	8004508 <HAL_GetTick>
 8007ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aea:	e00a      	b.n	8007b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aec:	f7fc fd0c 	bl	8004508 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e04f      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 020c 	and.w	r2, r3, #12
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d1eb      	bne.n	8007aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b14:	4b25      	ldr	r3, [pc, #148]	; (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d20c      	bcs.n	8007b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b22:	4b22      	ldr	r3, [pc, #136]	; (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2a:	4b20      	ldr	r3, [pc, #128]	; (8007bac <HAL_RCC_ClockConfig+0x1b8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d001      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e032      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b48:	4b19      	ldr	r3, [pc, #100]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	4916      	ldr	r1, [pc, #88]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	490e      	ldr	r1, [pc, #56]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b7a:	f000 f8bd 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	490a      	ldr	r1, [pc, #40]	; (8007bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007b8c:	5ccb      	ldrb	r3, [r1, r3]
 8007b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b96:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <HAL_RCC_ClockConfig+0x1c8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fc fc70 	bl	8004480 <HAL_InitTick>

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40023c00 	.word	0x40023c00
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	0800e06c 	.word	0x0800e06c
 8007bb8:	20000008 	.word	0x20000008
 8007bbc:	2000000c 	.word	0x2000000c

08007bc0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08c      	sub	sp, #48	; 0x30
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d129      	bne.n	8007c26 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
 8007bd6:	4b2b      	ldr	r3, [pc, #172]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007bdc:	f043 0301 	orr.w	r3, r3, #1
 8007be0:	6313      	str	r3, [r2, #48]	; 0x30
 8007be2:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007c00:	2300      	movs	r3, #0
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007c04:	f107 031c 	add.w	r3, r7, #28
 8007c08:	4619      	mov	r1, r3
 8007c0a:	481f      	ldr	r0, [pc, #124]	; (8007c88 <HAL_RCC_MCOConfig+0xc8>)
 8007c0c:	f7fd fb6c 	bl	80052e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007c10:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	4919      	ldr	r1, [pc, #100]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007c24:	e029      	b.n	8007c7a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c30:	f043 0304 	orr.w	r3, r3, #4
 8007c34:	6313      	str	r3, [r2, #48]	; 0x30
 8007c36:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007c54:	2300      	movs	r3, #0
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007c58:	f107 031c 	add.w	r3, r7, #28
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	480b      	ldr	r0, [pc, #44]	; (8007c8c <HAL_RCC_MCOConfig+0xcc>)
 8007c60:	f7fd fb42 	bl	80052e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007c64:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	00d9      	lsls	r1, r3, #3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	4903      	ldr	r1, [pc, #12]	; (8007c84 <HAL_RCC_MCOConfig+0xc4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	608b      	str	r3, [r1, #8]
}
 8007c7a:	bf00      	nop
 8007c7c:	3730      	adds	r7, #48	; 0x30
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	40023800 	.word	0x40023800
 8007c88:	40020000 	.word	0x40020000
 8007c8c:	40020800 	.word	0x40020800

08007c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000008 	.word	0x20000008

08007ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cac:	f7ff fff0 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	0a9b      	lsrs	r3, r3, #10
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	4903      	ldr	r1, [pc, #12]	; (8007ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cbe:	5ccb      	ldrb	r3, [r1, r3]
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	0800e07c 	.word	0x0800e07c

08007cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007cd4:	f7ff ffdc 	bl	8007c90 <HAL_RCC_GetHCLKFreq>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	0b5b      	lsrs	r3, r3, #13
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	4903      	ldr	r1, [pc, #12]	; (8007cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ce6:	5ccb      	ldrb	r3, [r1, r3]
 8007ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40023800 	.word	0x40023800
 8007cf4:	0800e07c 	.word	0x0800e07c

08007cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cfc:	b0ae      	sub	sp, #184	; 0xb8
 8007cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d1e:	4bcb      	ldr	r3, [pc, #812]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	2b0c      	cmp	r3, #12
 8007d28:	f200 8206 	bhi.w	8008138 <HAL_RCC_GetSysClockFreq+0x440>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d69 	.word	0x08007d69
 8007d38:	08008139 	.word	0x08008139
 8007d3c:	08008139 	.word	0x08008139
 8007d40:	08008139 	.word	0x08008139
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08008139 	.word	0x08008139
 8007d4c:	08008139 	.word	0x08008139
 8007d50:	08008139 	.word	0x08008139
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08008139 	.word	0x08008139
 8007d5c:	08008139 	.word	0x08008139
 8007d60:	08008139 	.word	0x08008139
 8007d64:	08007f69 	.word	0x08007f69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d68:	4bb9      	ldr	r3, [pc, #740]	; (8008050 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007d6e:	e1e7      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d70:	4bb8      	ldr	r3, [pc, #736]	; (8008054 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d76:	e1e3      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d78:	4bb4      	ldr	r3, [pc, #720]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d84:	4bb1      	ldr	r3, [pc, #708]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d071      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d90:	4bae      	ldr	r3, [pc, #696]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	099b      	lsrs	r3, r3, #6
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007db6:	4622      	mov	r2, r4
 8007db8:	462b      	mov	r3, r5
 8007dba:	f04f 0000 	mov.w	r0, #0
 8007dbe:	f04f 0100 	mov.w	r1, #0
 8007dc2:	0159      	lsls	r1, r3, #5
 8007dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dc8:	0150      	lsls	r0, r2, #5
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4621      	mov	r1, r4
 8007dd0:	1a51      	subs	r1, r2, r1
 8007dd2:	6439      	str	r1, [r7, #64]	; 0x40
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dda:	647b      	str	r3, [r7, #68]	; 0x44
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007de8:	4649      	mov	r1, r9
 8007dea:	018b      	lsls	r3, r1, #6
 8007dec:	4641      	mov	r1, r8
 8007dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007df2:	4641      	mov	r1, r8
 8007df4:	018a      	lsls	r2, r1, #6
 8007df6:	4641      	mov	r1, r8
 8007df8:	1a51      	subs	r1, r2, r1
 8007dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007e10:	4649      	mov	r1, r9
 8007e12:	00cb      	lsls	r3, r1, #3
 8007e14:	4641      	mov	r1, r8
 8007e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	00ca      	lsls	r2, r1, #3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	4622      	mov	r2, r4
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	460a      	mov	r2, r1
 8007e2e:	eb42 0303 	adc.w	r3, r2, r3
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e40:	4629      	mov	r1, r5
 8007e42:	024b      	lsls	r3, r1, #9
 8007e44:	4621      	mov	r1, r4
 8007e46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	024a      	lsls	r2, r1, #9
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4619      	mov	r1, r3
 8007e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e64:	f7f8 ff30 	bl	8000cc8 <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e72:	e067      	b.n	8007f44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e74:	4b75      	ldr	r3, [pc, #468]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	099b      	lsrs	r3, r3, #6
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e8e:	2300      	movs	r3, #0
 8007e90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007e96:	4622      	mov	r2, r4
 8007e98:	462b      	mov	r3, r5
 8007e9a:	f04f 0000 	mov.w	r0, #0
 8007e9e:	f04f 0100 	mov.w	r1, #0
 8007ea2:	0159      	lsls	r1, r3, #5
 8007ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ea8:	0150      	lsls	r0, r2, #5
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4621      	mov	r1, r4
 8007eb0:	1a51      	subs	r1, r2, r1
 8007eb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007ec8:	4649      	mov	r1, r9
 8007eca:	018b      	lsls	r3, r1, #6
 8007ecc:	4641      	mov	r1, r8
 8007ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	018a      	lsls	r2, r1, #6
 8007ed6:	4641      	mov	r1, r8
 8007ed8:	ebb2 0a01 	subs.w	sl, r2, r1
 8007edc:	4649      	mov	r1, r9
 8007ede:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007eee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ef6:	4692      	mov	sl, r2
 8007ef8:	469b      	mov	fp, r3
 8007efa:	4623      	mov	r3, r4
 8007efc:	eb1a 0303 	adds.w	r3, sl, r3
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	462b      	mov	r3, r5
 8007f04:	eb4b 0303 	adc.w	r3, fp, r3
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007f16:	4629      	mov	r1, r5
 8007f18:	028b      	lsls	r3, r1, #10
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f20:	4621      	mov	r1, r4
 8007f22:	028a      	lsls	r2, r1, #10
 8007f24:	4610      	mov	r0, r2
 8007f26:	4619      	mov	r1, r3
 8007f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f30:	677a      	str	r2, [r7, #116]	; 0x74
 8007f32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007f36:	f7f8 fec7 	bl	8000cc8 <__aeabi_uldivmod>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4613      	mov	r3, r2
 8007f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f44:	4b41      	ldr	r3, [pc, #260]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	0c1b      	lsrs	r3, r3, #16
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	3301      	adds	r3, #1
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007f66:	e0eb      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f68:	4b38      	ldr	r3, [pc, #224]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f74:	4b35      	ldr	r3, [pc, #212]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d06b      	beq.n	8008058 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f80:	4b32      	ldr	r3, [pc, #200]	; (800804c <HAL_RCC_GetSysClockFreq+0x354>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	099b      	lsrs	r3, r3, #6
 8007f86:	2200      	movs	r2, #0
 8007f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f92:	663b      	str	r3, [r7, #96]	; 0x60
 8007f94:	2300      	movs	r3, #0
 8007f96:	667b      	str	r3, [r7, #100]	; 0x64
 8007f98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f04f 0000 	mov.w	r0, #0
 8007fa4:	f04f 0100 	mov.w	r1, #0
 8007fa8:	0159      	lsls	r1, r3, #5
 8007faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fae:	0150      	lsls	r0, r2, #5
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	1a51      	subs	r1, r2, r1
 8007fb8:	61b9      	str	r1, [r7, #24]
 8007fba:	4629      	mov	r1, r5
 8007fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8007fc0:	61fb      	str	r3, [r7, #28]
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007fce:	4659      	mov	r1, fp
 8007fd0:	018b      	lsls	r3, r1, #6
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fd8:	4651      	mov	r1, sl
 8007fda:	018a      	lsls	r2, r1, #6
 8007fdc:	4651      	mov	r1, sl
 8007fde:	ebb2 0801 	subs.w	r8, r2, r1
 8007fe2:	4659      	mov	r1, fp
 8007fe4:	eb63 0901 	sbc.w	r9, r3, r1
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ffc:	4690      	mov	r8, r2
 8007ffe:	4699      	mov	r9, r3
 8008000:	4623      	mov	r3, r4
 8008002:	eb18 0303 	adds.w	r3, r8, r3
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	462b      	mov	r3, r5
 800800a:	eb49 0303 	adc.w	r3, r9, r3
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800801c:	4629      	mov	r1, r5
 800801e:	024b      	lsls	r3, r1, #9
 8008020:	4621      	mov	r1, r4
 8008022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008026:	4621      	mov	r1, r4
 8008028:	024a      	lsls	r2, r1, #9
 800802a:	4610      	mov	r0, r2
 800802c:	4619      	mov	r1, r3
 800802e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008032:	2200      	movs	r2, #0
 8008034:	65bb      	str	r3, [r7, #88]	; 0x58
 8008036:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008038:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800803c:	f7f8 fe44 	bl	8000cc8 <__aeabi_uldivmod>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4613      	mov	r3, r2
 8008046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800804a:	e065      	b.n	8008118 <HAL_RCC_GetSysClockFreq+0x420>
 800804c:	40023800 	.word	0x40023800
 8008050:	00f42400 	.word	0x00f42400
 8008054:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008058:	4b3d      	ldr	r3, [pc, #244]	; (8008150 <HAL_RCC_GetSysClockFreq+0x458>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	099b      	lsrs	r3, r3, #6
 800805e:	2200      	movs	r2, #0
 8008060:	4618      	mov	r0, r3
 8008062:	4611      	mov	r1, r2
 8008064:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008068:	653b      	str	r3, [r7, #80]	; 0x50
 800806a:	2300      	movs	r3, #0
 800806c:	657b      	str	r3, [r7, #84]	; 0x54
 800806e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008072:	4642      	mov	r2, r8
 8008074:	464b      	mov	r3, r9
 8008076:	f04f 0000 	mov.w	r0, #0
 800807a:	f04f 0100 	mov.w	r1, #0
 800807e:	0159      	lsls	r1, r3, #5
 8008080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008084:	0150      	lsls	r0, r2, #5
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	4641      	mov	r1, r8
 800808c:	1a51      	subs	r1, r2, r1
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4649      	mov	r1, r9
 8008092:	eb63 0301 	sbc.w	r3, r3, r1
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80080a4:	4659      	mov	r1, fp
 80080a6:	018b      	lsls	r3, r1, #6
 80080a8:	4651      	mov	r1, sl
 80080aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080ae:	4651      	mov	r1, sl
 80080b0:	018a      	lsls	r2, r1, #6
 80080b2:	4651      	mov	r1, sl
 80080b4:	1a54      	subs	r4, r2, r1
 80080b6:	4659      	mov	r1, fp
 80080b8:	eb63 0501 	sbc.w	r5, r3, r1
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	00eb      	lsls	r3, r5, #3
 80080c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ca:	00e2      	lsls	r2, r4, #3
 80080cc:	4614      	mov	r4, r2
 80080ce:	461d      	mov	r5, r3
 80080d0:	4643      	mov	r3, r8
 80080d2:	18e3      	adds	r3, r4, r3
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	464b      	mov	r3, r9
 80080d8:	eb45 0303 	adc.w	r3, r5, r3
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080ea:	4629      	mov	r1, r5
 80080ec:	028b      	lsls	r3, r1, #10
 80080ee:	4621      	mov	r1, r4
 80080f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080f4:	4621      	mov	r1, r4
 80080f6:	028a      	lsls	r2, r1, #10
 80080f8:	4610      	mov	r0, r2
 80080fa:	4619      	mov	r1, r3
 80080fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008100:	2200      	movs	r2, #0
 8008102:	64bb      	str	r3, [r7, #72]	; 0x48
 8008104:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008106:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800810a:	f7f8 fddd 	bl	8000cc8 <__aeabi_uldivmod>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4613      	mov	r3, r2
 8008114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008118:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <HAL_RCC_GetSysClockFreq+0x458>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	0f1b      	lsrs	r3, r3, #28
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800812a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008136:	e003      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCC_GetSysClockFreq+0x45c>)
 800813a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800813e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008144:	4618      	mov	r0, r3
 8008146:	37b8      	adds	r7, #184	; 0xb8
 8008148:	46bd      	mov	sp, r7
 800814a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800814e:	bf00      	nop
 8008150:	40023800 	.word	0x40023800
 8008154:	00f42400 	.word	0x00f42400

08008158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e28d      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 8083 	beq.w	800827e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008178:	4b94      	ldr	r3, [pc, #592]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 030c 	and.w	r3, r3, #12
 8008180:	2b04      	cmp	r3, #4
 8008182:	d019      	beq.n	80081b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008184:	4b91      	ldr	r3, [pc, #580]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800818c:	2b08      	cmp	r3, #8
 800818e:	d106      	bne.n	800819e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008190:	4b8e      	ldr	r3, [pc, #568]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819c:	d00c      	beq.n	80081b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800819e:	4b8b      	ldr	r3, [pc, #556]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081a6:	2b0c      	cmp	r3, #12
 80081a8:	d112      	bne.n	80081d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081aa:	4b88      	ldr	r3, [pc, #544]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b6:	d10b      	bne.n	80081d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081b8:	4b84      	ldr	r3, [pc, #528]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d05b      	beq.n	800827c <HAL_RCC_OscConfig+0x124>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d157      	bne.n	800827c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e25a      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d106      	bne.n	80081e8 <HAL_RCC_OscConfig+0x90>
 80081da:	4b7c      	ldr	r3, [pc, #496]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a7b      	ldr	r2, [pc, #492]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	e01d      	b.n	8008224 <HAL_RCC_OscConfig+0xcc>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081f0:	d10c      	bne.n	800820c <HAL_RCC_OscConfig+0xb4>
 80081f2:	4b76      	ldr	r3, [pc, #472]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a75      	ldr	r2, [pc, #468]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80081f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	4b73      	ldr	r3, [pc, #460]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a72      	ldr	r2, [pc, #456]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e00b      	b.n	8008224 <HAL_RCC_OscConfig+0xcc>
 800820c:	4b6f      	ldr	r3, [pc, #444]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a6e      	ldr	r2, [pc, #440]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	4b6c      	ldr	r3, [pc, #432]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a6b      	ldr	r2, [pc, #428]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800821e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d013      	beq.n	8008254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822c:	f7fc f96c 	bl	8004508 <HAL_GetTick>
 8008230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008234:	f7fc f968 	bl	8004508 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b64      	cmp	r3, #100	; 0x64
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e21f      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008246:	4b61      	ldr	r3, [pc, #388]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0f0      	beq.n	8008234 <HAL_RCC_OscConfig+0xdc>
 8008252:	e014      	b.n	800827e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008254:	f7fc f958 	bl	8004508 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800825c:	f7fc f954 	bl	8004508 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b64      	cmp	r3, #100	; 0x64
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e20b      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800826e:	4b57      	ldr	r3, [pc, #348]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f0      	bne.n	800825c <HAL_RCC_OscConfig+0x104>
 800827a:	e000      	b.n	800827e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800827c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d06f      	beq.n	800836a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800828a:	4b50      	ldr	r3, [pc, #320]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 030c 	and.w	r3, r3, #12
 8008292:	2b00      	cmp	r3, #0
 8008294:	d017      	beq.n	80082c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008296:	4b4d      	ldr	r3, [pc, #308]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d105      	bne.n	80082ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082a2:	4b4a      	ldr	r3, [pc, #296]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ae:	4b47      	ldr	r3, [pc, #284]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d11c      	bne.n	80082f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ba:	4b44      	ldr	r3, [pc, #272]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d116      	bne.n	80082f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082c6:	4b41      	ldr	r3, [pc, #260]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <HAL_RCC_OscConfig+0x186>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d001      	beq.n	80082de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e1d3      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082de:	4b3b      	ldr	r3, [pc, #236]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	4937      	ldr	r1, [pc, #220]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082f2:	e03a      	b.n	800836a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d020      	beq.n	800833e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082fc:	4b34      	ldr	r3, [pc, #208]	; (80083d0 <HAL_RCC_OscConfig+0x278>)
 80082fe:	2201      	movs	r2, #1
 8008300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008302:	f7fc f901 	bl	8004508 <HAL_GetTick>
 8008306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008308:	e008      	b.n	800831c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800830a:	f7fc f8fd 	bl	8004508 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e1b4      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800831c:	4b2b      	ldr	r3, [pc, #172]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0f0      	beq.n	800830a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008328:	4b28      	ldr	r3, [pc, #160]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4925      	ldr	r1, [pc, #148]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008338:	4313      	orrs	r3, r2
 800833a:	600b      	str	r3, [r1, #0]
 800833c:	e015      	b.n	800836a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800833e:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <HAL_RCC_OscConfig+0x278>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008344:	f7fc f8e0 	bl	8004508 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800834c:	f7fc f8dc 	bl	8004508 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e193      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800835e:	4b1b      	ldr	r3, [pc, #108]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1f0      	bne.n	800834c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d036      	beq.n	80083e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d016      	beq.n	80083ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800837e:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <HAL_RCC_OscConfig+0x27c>)
 8008380:	2201      	movs	r2, #1
 8008382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008384:	f7fc f8c0 	bl	8004508 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800838c:	f7fc f8bc 	bl	8004508 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e173      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <HAL_RCC_OscConfig+0x274>)
 80083a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0x234>
 80083aa:	e01b      	b.n	80083e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <HAL_RCC_OscConfig+0x27c>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b2:	f7fc f8a9 	bl	8004508 <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083b8:	e00e      	b.n	80083d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083ba:	f7fc f8a5 	bl	8004508 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d907      	bls.n	80083d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e15c      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
 80083cc:	40023800 	.word	0x40023800
 80083d0:	42470000 	.word	0x42470000
 80083d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083d8:	4b8a      	ldr	r3, [pc, #552]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80083da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1ea      	bne.n	80083ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8097 	beq.w	8008520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083f6:	4b83      	ldr	r3, [pc, #524]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10f      	bne.n	8008422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	4b7f      	ldr	r3, [pc, #508]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	4a7e      	ldr	r2, [pc, #504]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800840c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008410:	6413      	str	r3, [r2, #64]	; 0x40
 8008412:	4b7c      	ldr	r3, [pc, #496]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800841a:	60bb      	str	r3, [r7, #8]
 800841c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800841e:	2301      	movs	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008422:	4b79      	ldr	r3, [pc, #484]	; (8008608 <HAL_RCC_OscConfig+0x4b0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842a:	2b00      	cmp	r3, #0
 800842c:	d118      	bne.n	8008460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800842e:	4b76      	ldr	r3, [pc, #472]	; (8008608 <HAL_RCC_OscConfig+0x4b0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a75      	ldr	r2, [pc, #468]	; (8008608 <HAL_RCC_OscConfig+0x4b0>)
 8008434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800843a:	f7fc f865 	bl	8004508 <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008440:	e008      	b.n	8008454 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008442:	f7fc f861 	bl	8004508 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e118      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008454:	4b6c      	ldr	r3, [pc, #432]	; (8008608 <HAL_RCC_OscConfig+0x4b0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0f0      	beq.n	8008442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d106      	bne.n	8008476 <HAL_RCC_OscConfig+0x31e>
 8008468:	4b66      	ldr	r3, [pc, #408]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800846a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846c:	4a65      	ldr	r2, [pc, #404]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	6713      	str	r3, [r2, #112]	; 0x70
 8008474:	e01c      	b.n	80084b0 <HAL_RCC_OscConfig+0x358>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	2b05      	cmp	r3, #5
 800847c:	d10c      	bne.n	8008498 <HAL_RCC_OscConfig+0x340>
 800847e:	4b61      	ldr	r3, [pc, #388]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008482:	4a60      	ldr	r2, [pc, #384]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008484:	f043 0304 	orr.w	r3, r3, #4
 8008488:	6713      	str	r3, [r2, #112]	; 0x70
 800848a:	4b5e      	ldr	r3, [pc, #376]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	4a5d      	ldr	r2, [pc, #372]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	6713      	str	r3, [r2, #112]	; 0x70
 8008496:	e00b      	b.n	80084b0 <HAL_RCC_OscConfig+0x358>
 8008498:	4b5a      	ldr	r3, [pc, #360]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800849a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849c:	4a59      	ldr	r2, [pc, #356]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	6713      	str	r3, [r2, #112]	; 0x70
 80084a4:	4b57      	ldr	r3, [pc, #348]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80084a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a8:	4a56      	ldr	r2, [pc, #344]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80084aa:	f023 0304 	bic.w	r3, r3, #4
 80084ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d015      	beq.n	80084e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b8:	f7fc f826 	bl	8004508 <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084be:	e00a      	b.n	80084d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084c0:	f7fc f822 	bl	8004508 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e0d7      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084d6:	4b4b      	ldr	r3, [pc, #300]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0ee      	beq.n	80084c0 <HAL_RCC_OscConfig+0x368>
 80084e2:	e014      	b.n	800850e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e4:	f7fc f810 	bl	8004508 <HAL_GetTick>
 80084e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ea:	e00a      	b.n	8008502 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084ec:	f7fc f80c 	bl	8004508 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e0c1      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008502:	4b40      	ldr	r3, [pc, #256]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1ee      	bne.n	80084ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d105      	bne.n	8008520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008514:	4b3b      	ldr	r3, [pc, #236]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800851a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800851e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80ad 	beq.w	8008684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800852a:	4b36      	ldr	r3, [pc, #216]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f003 030c 	and.w	r3, r3, #12
 8008532:	2b08      	cmp	r3, #8
 8008534:	d060      	beq.n	80085f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d145      	bne.n	80085ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800853e:	4b33      	ldr	r3, [pc, #204]	; (800860c <HAL_RCC_OscConfig+0x4b4>)
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fb ffe0 	bl	8004508 <HAL_GetTick>
 8008548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800854c:	f7fb ffdc 	bl	8004508 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e093      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800855e:	4b29      	ldr	r3, [pc, #164]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	69da      	ldr	r2, [r3, #28]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	019b      	lsls	r3, r3, #6
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	3b01      	subs	r3, #1
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	061b      	lsls	r3, r3, #24
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	071b      	lsls	r3, r3, #28
 8008596:	491b      	ldr	r1, [pc, #108]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 8008598:	4313      	orrs	r3, r2
 800859a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800859c:	4b1b      	ldr	r3, [pc, #108]	; (800860c <HAL_RCC_OscConfig+0x4b4>)
 800859e:	2201      	movs	r2, #1
 80085a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a2:	f7fb ffb1 	bl	8004508 <HAL_GetTick>
 80085a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085a8:	e008      	b.n	80085bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085aa:	f7fb ffad 	bl	8004508 <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e064      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085bc:	4b11      	ldr	r3, [pc, #68]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f0      	beq.n	80085aa <HAL_RCC_OscConfig+0x452>
 80085c8:	e05c      	b.n	8008684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <HAL_RCC_OscConfig+0x4b4>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d0:	f7fb ff9a 	bl	8004508 <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085d8:	f7fb ff96 	bl	8004508 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e04d      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <HAL_RCC_OscConfig+0x4ac>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1f0      	bne.n	80085d8 <HAL_RCC_OscConfig+0x480>
 80085f6:	e045      	b.n	8008684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d107      	bne.n	8008610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e040      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
 8008604:	40023800 	.word	0x40023800
 8008608:	40007000 	.word	0x40007000
 800860c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008610:	4b1f      	ldr	r3, [pc, #124]	; (8008690 <HAL_RCC_OscConfig+0x538>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d030      	beq.n	8008680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008628:	429a      	cmp	r2, r3
 800862a:	d129      	bne.n	8008680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008636:	429a      	cmp	r2, r3
 8008638:	d122      	bne.n	8008680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008640:	4013      	ands	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008648:	4293      	cmp	r3, r2
 800864a:	d119      	bne.n	8008680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	085b      	lsrs	r3, r3, #1
 8008658:	3b01      	subs	r3, #1
 800865a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800865c:	429a      	cmp	r2, r3
 800865e:	d10f      	bne.n	8008680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800866c:	429a      	cmp	r2, r3
 800866e:	d107      	bne.n	8008680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800867c:	429a      	cmp	r2, r3
 800867e:	d001      	beq.n	8008684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e000      	b.n	8008686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	40023800 	.word	0x40023800

08008694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e041      	b.n	800872a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fb fb36 	bl	8003d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f000 fef2 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <HAL_TIM_PWM_Start+0x24>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	e022      	b.n	800879e <HAL_TIM_PWM_Start+0x6a>
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b04      	cmp	r3, #4
 800875c:	d109      	bne.n	8008772 <HAL_TIM_PWM_Start+0x3e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b01      	cmp	r3, #1
 8008768:	bf14      	ite	ne
 800876a:	2301      	movne	r3, #1
 800876c:	2300      	moveq	r3, #0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	e015      	b.n	800879e <HAL_TIM_PWM_Start+0x6a>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b08      	cmp	r3, #8
 8008776:	d109      	bne.n	800878c <HAL_TIM_PWM_Start+0x58>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b01      	cmp	r3, #1
 8008782:	bf14      	ite	ne
 8008784:	2301      	movne	r3, #1
 8008786:	2300      	moveq	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	e008      	b.n	800879e <HAL_TIM_PWM_Start+0x6a>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	bf14      	ite	ne
 8008798:	2301      	movne	r3, #1
 800879a:	2300      	moveq	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e07c      	b.n	80088a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <HAL_TIM_PWM_Start+0x82>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087b4:	e013      	b.n	80087de <HAL_TIM_PWM_Start+0xaa>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d104      	bne.n	80087c6 <HAL_TIM_PWM_Start+0x92>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c4:	e00b      	b.n	80087de <HAL_TIM_PWM_Start+0xaa>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d104      	bne.n	80087d6 <HAL_TIM_PWM_Start+0xa2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087d4:	e003      	b.n	80087de <HAL_TIM_PWM_Start+0xaa>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2201      	movs	r2, #1
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f001 f9e2 	bl	8009bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a2d      	ldr	r2, [pc, #180]	; (80088a8 <HAL_TIM_PWM_Start+0x174>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIM_PWM_Start+0xcc>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a2c      	ldr	r2, [pc, #176]	; (80088ac <HAL_TIM_PWM_Start+0x178>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d101      	bne.n	8008804 <HAL_TIM_PWM_Start+0xd0>
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <HAL_TIM_PWM_Start+0xd2>
 8008804:	2300      	movs	r3, #0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a22      	ldr	r2, [pc, #136]	; (80088a8 <HAL_TIM_PWM_Start+0x174>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d022      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882c:	d01d      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <HAL_TIM_PWM_Start+0x17c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d018      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <HAL_TIM_PWM_Start+0x180>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d013      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1c      	ldr	r2, [pc, #112]	; (80088b8 <HAL_TIM_PWM_Start+0x184>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00e      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a16      	ldr	r2, [pc, #88]	; (80088ac <HAL_TIM_PWM_Start+0x178>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d009      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a18      	ldr	r2, [pc, #96]	; (80088bc <HAL_TIM_PWM_Start+0x188>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d004      	beq.n	800886a <HAL_TIM_PWM_Start+0x136>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <HAL_TIM_PWM_Start+0x18c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d111      	bne.n	800888e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b06      	cmp	r3, #6
 800887a:	d010      	beq.n	800889e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888c:	e007      	b.n	800889e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40000400 	.word	0x40000400
 80088b4:	40000800 	.word	0x40000800
 80088b8:	40000c00 	.word	0x40000c00
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40001800 	.word	0x40001800

080088c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f96a 	bl	8009bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a2e      	ldr	r2, [pc, #184]	; (800899c <HAL_TIM_PWM_Stop+0xd8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_TIM_PWM_Stop+0x2c>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a2d      	ldr	r2, [pc, #180]	; (80089a0 <HAL_TIM_PWM_Stop+0xdc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d101      	bne.n	80088f4 <HAL_TIM_PWM_Stop+0x30>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <HAL_TIM_PWM_Stop+0x32>
 80088f4:	2300      	movs	r3, #0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d017      	beq.n	800892a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	f241 1311 	movw	r3, #4369	; 0x1111
 8008904:	4013      	ands	r3, r2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10f      	bne.n	800892a <HAL_TIM_PWM_Stop+0x66>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6a1a      	ldr	r2, [r3, #32]
 8008910:	f240 4344 	movw	r3, #1092	; 0x444
 8008914:	4013      	ands	r3, r2
 8008916:	2b00      	cmp	r3, #0
 8008918:	d107      	bne.n	800892a <HAL_TIM_PWM_Stop+0x66>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6a1a      	ldr	r2, [r3, #32]
 8008930:	f241 1311 	movw	r3, #4369	; 0x1111
 8008934:	4013      	ands	r3, r2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10f      	bne.n	800895a <HAL_TIM_PWM_Stop+0x96>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	f240 4344 	movw	r3, #1092	; 0x444
 8008944:	4013      	ands	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d107      	bne.n	800895a <HAL_TIM_PWM_Stop+0x96>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <HAL_TIM_PWM_Stop+0xa6>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008968:	e013      	b.n	8008992 <HAL_TIM_PWM_Stop+0xce>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b04      	cmp	r3, #4
 800896e:	d104      	bne.n	800897a <HAL_TIM_PWM_Stop+0xb6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008978:	e00b      	b.n	8008992 <HAL_TIM_PWM_Stop+0xce>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d104      	bne.n	800898a <HAL_TIM_PWM_Stop+0xc6>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008988:	e003      	b.n	8008992 <HAL_TIM_PWM_Stop+0xce>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400

080089a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e041      	b.n	8008a3a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fb fade 	bl	8003f8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f000 fd6a 	bl	80094bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_TIM_IC_Start_IT+0x1a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	e013      	b.n	8008a86 <HAL_TIM_IC_Start_IT+0x42>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d104      	bne.n	8008a6e <HAL_TIM_IC_Start_IT+0x2a>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	e00b      	b.n	8008a86 <HAL_TIM_IC_Start_IT+0x42>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d104      	bne.n	8008a7e <HAL_TIM_IC_Start_IT+0x3a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	e003      	b.n	8008a86 <HAL_TIM_IC_Start_IT+0x42>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <HAL_TIM_IC_Start_IT+0x54>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	e013      	b.n	8008ac0 <HAL_TIM_IC_Start_IT+0x7c>
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d104      	bne.n	8008aa8 <HAL_TIM_IC_Start_IT+0x64>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	e00b      	b.n	8008ac0 <HAL_TIM_IC_Start_IT+0x7c>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	d104      	bne.n	8008ab8 <HAL_TIM_IC_Start_IT+0x74>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	e003      	b.n	8008ac0 <HAL_TIM_IC_Start_IT+0x7c>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d102      	bne.n	8008ace <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d001      	beq.n	8008ad2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e0c7      	b.n	8008c62 <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <HAL_TIM_IC_Start_IT+0x9e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae0:	e013      	b.n	8008b0a <HAL_TIM_IC_Start_IT+0xc6>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d104      	bne.n	8008af2 <HAL_TIM_IC_Start_IT+0xae>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008af0:	e00b      	b.n	8008b0a <HAL_TIM_IC_Start_IT+0xc6>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d104      	bne.n	8008b02 <HAL_TIM_IC_Start_IT+0xbe>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b00:	e003      	b.n	8008b0a <HAL_TIM_IC_Start_IT+0xc6>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <HAL_TIM_IC_Start_IT+0xd6>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b18:	e013      	b.n	8008b42 <HAL_TIM_IC_Start_IT+0xfe>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d104      	bne.n	8008b2a <HAL_TIM_IC_Start_IT+0xe6>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b28:	e00b      	b.n	8008b42 <HAL_TIM_IC_Start_IT+0xfe>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d104      	bne.n	8008b3a <HAL_TIM_IC_Start_IT+0xf6>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2202      	movs	r2, #2
 8008b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b38:	e003      	b.n	8008b42 <HAL_TIM_IC_Start_IT+0xfe>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b0c      	cmp	r3, #12
 8008b46:	d841      	bhi.n	8008bcc <HAL_TIM_IC_Start_IT+0x188>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <HAL_TIM_IC_Start_IT+0x10c>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b85 	.word	0x08008b85
 8008b54:	08008bcd 	.word	0x08008bcd
 8008b58:	08008bcd 	.word	0x08008bcd
 8008b5c:	08008bcd 	.word	0x08008bcd
 8008b60:	08008b97 	.word	0x08008b97
 8008b64:	08008bcd 	.word	0x08008bcd
 8008b68:	08008bcd 	.word	0x08008bcd
 8008b6c:	08008bcd 	.word	0x08008bcd
 8008b70:	08008ba9 	.word	0x08008ba9
 8008b74:	08008bcd 	.word	0x08008bcd
 8008b78:	08008bcd 	.word	0x08008bcd
 8008b7c:	08008bcd 	.word	0x08008bcd
 8008b80:	08008bbb 	.word	0x08008bbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0202 	orr.w	r2, r2, #2
 8008b92:	60da      	str	r2, [r3, #12]
      break;
 8008b94:	e01b      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f042 0204 	orr.w	r2, r2, #4
 8008ba4:	60da      	str	r2, [r3, #12]
      break;
 8008ba6:	e012      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0208 	orr.w	r2, r2, #8
 8008bb6:	60da      	str	r2, [r3, #12]
      break;
 8008bb8:	e009      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0210 	orr.w	r2, r2, #16
 8008bc8:	60da      	str	r2, [r3, #12]
      break;
 8008bca:	e000      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8008bcc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ffea 	bl	8009bb0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a22      	ldr	r2, [pc, #136]	; (8008c6c <HAL_TIM_IC_Start_IT+0x228>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d022      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bee:	d01d      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a1e      	ldr	r2, [pc, #120]	; (8008c70 <HAL_TIM_IC_Start_IT+0x22c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d018      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1d      	ldr	r2, [pc, #116]	; (8008c74 <HAL_TIM_IC_Start_IT+0x230>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d013      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <HAL_TIM_IC_Start_IT+0x234>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00e      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1a      	ldr	r2, [pc, #104]	; (8008c7c <HAL_TIM_IC_Start_IT+0x238>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d009      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	; (8008c80 <HAL_TIM_IC_Start_IT+0x23c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d004      	beq.n	8008c2c <HAL_TIM_IC_Start_IT+0x1e8>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <HAL_TIM_IC_Start_IT+0x240>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d111      	bne.n	8008c50 <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b06      	cmp	r3, #6
 8008c3c:	d010      	beq.n	8008c60 <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0201 	orr.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c4e:	e007      	b.n	8008c60 <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	40010000 	.word	0x40010000
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800
 8008c78:	40000c00 	.word	0x40000c00
 8008c7c:	40010400 	.word	0x40010400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40001800 	.word	0x40001800

08008c88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e097      	b.n	8008dcc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7fb f91d 	bl	8003ef0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ccc:	f023 0307 	bic.w	r3, r3, #7
 8008cd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f000 fbed 	bl	80094bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d0a:	f023 0303 	bic.w	r3, r3, #3
 8008d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d28:	f023 030c 	bic.w	r3, r3, #12
 8008d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	4313      	orrs	r3, r2
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	011a      	lsls	r2, r3, #4
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	031b      	lsls	r3, r3, #12
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008d66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008d6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008df4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d110      	bne.n	8008e26 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d102      	bne.n	8008e10 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e0a:	7b7b      	ldrb	r3, [r7, #13]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d001      	beq.n	8008e14 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e089      	b.n	8008f28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e24:	e031      	b.n	8008e8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d110      	bne.n	8008e4e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d102      	bne.n	8008e38 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e32:	7b3b      	ldrb	r3, [r7, #12]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d001      	beq.n	8008e3c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e075      	b.n	8008f28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e4c:	e01d      	b.n	8008e8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d108      	bne.n	8008e66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d105      	bne.n	8008e66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e5a:	7b7b      	ldrb	r3, [r7, #13]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d102      	bne.n	8008e66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e60:	7b3b      	ldrb	r3, [r7, #12]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d001      	beq.n	8008e6a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e05e      	b.n	8008f28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b04      	cmp	r3, #4
 8008e94:	d010      	beq.n	8008eb8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008e96:	e01f      	b.n	8008ed8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fe85 	bl	8009bb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f042 0202 	orr.w	r2, r2, #2
 8008eb4:	60da      	str	r2, [r3, #12]
      break;
 8008eb6:	e02e      	b.n	8008f16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	2104      	movs	r1, #4
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fe75 	bl	8009bb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0204 	orr.w	r2, r2, #4
 8008ed4:	60da      	str	r2, [r3, #12]
      break;
 8008ed6:	e01e      	b.n	8008f16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2201      	movs	r2, #1
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fe65 	bl	8009bb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2201      	movs	r2, #1
 8008eec:	2104      	movs	r1, #4
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fe5e 	bl	8009bb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0202 	orr.w	r2, r2, #2
 8008f02:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0204 	orr.w	r2, r2, #4
 8008f12:	60da      	str	r2, [r3, #12]
      break;
 8008f14:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0201 	orr.w	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d122      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d11b      	bne.n	8008f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0202 	mvn.w	r2, #2
 8008f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fa f9d6 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8008f78:	e005      	b.n	8008f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa80 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa87 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d122      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d11b      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f06f 0204 	mvn.w	r2, #4
 8008fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7fa f9ac 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8008fcc:	e005      	b.n	8008fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa56 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa5d 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d122      	bne.n	8009034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d11b      	bne.n	8009034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0208 	mvn.w	r2, #8
 8009004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2204      	movs	r2, #4
 800900a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7fa f982 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8009020:	e005      	b.n	800902e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa2c 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fa33 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	2b10      	cmp	r3, #16
 8009040:	d122      	bne.n	8009088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b10      	cmp	r3, #16
 800904e:	d11b      	bne.n	8009088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f06f 0210 	mvn.w	r2, #16
 8009058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2208      	movs	r2, #8
 800905e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fa f958 	bl	8003324 <HAL_TIM_IC_CaptureCallback>
 8009074:	e005      	b.n	8009082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa02 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fa09 	bl	8009494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b01      	cmp	r3, #1
 8009094:	d10e      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d107      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0201 	mvn.w	r2, #1
 80090ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f9dc 	bl	800946c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090be:	2b80      	cmp	r3, #128	; 0x80
 80090c0:	d10e      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090cc:	2b80      	cmp	r3, #128	; 0x80
 80090ce:	d107      	bne.n	80090e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fe14 	bl	8009d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d10e      	bne.n	800910c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f8:	2b40      	cmp	r3, #64	; 0x40
 80090fa:	d107      	bne.n	800910c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9ce 	bl	80094a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b20      	cmp	r3, #32
 8009118:	d10e      	bne.n	8009138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f003 0320 	and.w	r3, r3, #32
 8009124:	2b20      	cmp	r3, #32
 8009126:	d107      	bne.n	8009138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f06f 0220 	mvn.w	r2, #32
 8009130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fdde 	bl	8009cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_TIM_IC_ConfigChannel+0x1a>
 8009156:	2302      	movs	r3, #2
 8009158:	e082      	b.n	8009260 <HAL_TIM_IC_ConfigChannel+0x120>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d11b      	bne.n	80091a0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	6819      	ldr	r1, [r3, #0]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f000 fbf0 	bl	800995c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 020c 	bic.w	r2, r2, #12
 800918a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6999      	ldr	r1, [r3, #24]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	619a      	str	r2, [r3, #24]
 800919e:	e05a      	b.n	8009256 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d11c      	bne.n	80091e0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f000 fc45 	bl	8009a44 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80091c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6999      	ldr	r1, [r3, #24]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	021a      	lsls	r2, r3, #8
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	619a      	str	r2, [r3, #24]
 80091de:	e03a      	b.n	8009256 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b08      	cmp	r3, #8
 80091e4:	d11b      	bne.n	800921e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6819      	ldr	r1, [r3, #0]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f000 fc62 	bl	8009abe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69da      	ldr	r2, [r3, #28]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 020c 	bic.w	r2, r2, #12
 8009208:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69d9      	ldr	r1, [r3, #28]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	61da      	str	r2, [r3, #28]
 800921c:	e01b      	b.n	8009256 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6819      	ldr	r1, [r3, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f000 fc82 	bl	8009b36 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009240:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69d9      	ldr	r1, [r3, #28]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	021a      	lsls	r2, r3, #8
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800927e:	2302      	movs	r3, #2
 8009280:	e0ac      	b.n	80093dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b0c      	cmp	r3, #12
 800928e:	f200 809f 	bhi.w	80093d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009292:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	080092cd 	.word	0x080092cd
 800929c:	080093d1 	.word	0x080093d1
 80092a0:	080093d1 	.word	0x080093d1
 80092a4:	080093d1 	.word	0x080093d1
 80092a8:	0800930d 	.word	0x0800930d
 80092ac:	080093d1 	.word	0x080093d1
 80092b0:	080093d1 	.word	0x080093d1
 80092b4:	080093d1 	.word	0x080093d1
 80092b8:	0800934f 	.word	0x0800934f
 80092bc:	080093d1 	.word	0x080093d1
 80092c0:	080093d1 	.word	0x080093d1
 80092c4:	080093d1 	.word	0x080093d1
 80092c8:	0800938f 	.word	0x0800938f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f992 	bl	80095fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0208 	orr.w	r2, r2, #8
 80092e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0204 	bic.w	r2, r2, #4
 80092f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6999      	ldr	r1, [r3, #24]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	619a      	str	r2, [r3, #24]
      break;
 800930a:	e062      	b.n	80093d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f9e2 	bl	80096dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699a      	ldr	r2, [r3, #24]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6999      	ldr	r1, [r3, #24]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	021a      	lsls	r2, r3, #8
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	619a      	str	r2, [r3, #24]
      break;
 800934c:	e041      	b.n	80093d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fa37 	bl	80097c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f042 0208 	orr.w	r2, r2, #8
 8009368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0204 	bic.w	r2, r2, #4
 8009378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69d9      	ldr	r1, [r3, #28]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691a      	ldr	r2, [r3, #16]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	61da      	str	r2, [r3, #28]
      break;
 800938c:	e021      	b.n	80093d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68b9      	ldr	r1, [r7, #8]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fa8b 	bl	80098b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69da      	ldr	r2, [r3, #28]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69da      	ldr	r2, [r3, #28]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	69d9      	ldr	r1, [r3, #28]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	021a      	lsls	r2, r3, #8
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	61da      	str	r2, [r3, #28]
      break;
 80093ce:	e000      	b.n	80093d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80093d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b0c      	cmp	r3, #12
 80093f6:	d831      	bhi.n	800945c <HAL_TIM_ReadCapturedValue+0x78>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <HAL_TIM_ReadCapturedValue+0x1c>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009435 	.word	0x08009435
 8009404:	0800945d 	.word	0x0800945d
 8009408:	0800945d 	.word	0x0800945d
 800940c:	0800945d 	.word	0x0800945d
 8009410:	0800943f 	.word	0x0800943f
 8009414:	0800945d 	.word	0x0800945d
 8009418:	0800945d 	.word	0x0800945d
 800941c:	0800945d 	.word	0x0800945d
 8009420:	08009449 	.word	0x08009449
 8009424:	0800945d 	.word	0x0800945d
 8009428:	0800945d 	.word	0x0800945d
 800942c:	0800945d 	.word	0x0800945d
 8009430:	08009453 	.word	0x08009453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943a:	60fb      	str	r3, [r7, #12]

      break;
 800943c:	e00f      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	60fb      	str	r3, [r7, #12]

      break;
 8009446:	e00a      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944e:	60fb      	str	r3, [r7, #12]

      break;
 8009450:	e005      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	60fb      	str	r3, [r7, #12]

      break;
 800945a:	e000      	b.n	800945e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800945c:	bf00      	nop
  }

  return tmpreg;
 800945e:	68fb      	ldr	r3, [r7, #12]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a40      	ldr	r2, [pc, #256]	; (80095d0 <TIM_Base_SetConfig+0x114>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d013      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094da:	d00f      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a3d      	ldr	r2, [pc, #244]	; (80095d4 <TIM_Base_SetConfig+0x118>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00b      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a3c      	ldr	r2, [pc, #240]	; (80095d8 <TIM_Base_SetConfig+0x11c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d007      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a3b      	ldr	r2, [pc, #236]	; (80095dc <TIM_Base_SetConfig+0x120>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d003      	beq.n	80094fc <TIM_Base_SetConfig+0x40>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a3a      	ldr	r2, [pc, #232]	; (80095e0 <TIM_Base_SetConfig+0x124>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d108      	bne.n	800950e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a2f      	ldr	r2, [pc, #188]	; (80095d0 <TIM_Base_SetConfig+0x114>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d02b      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951c:	d027      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a2c      	ldr	r2, [pc, #176]	; (80095d4 <TIM_Base_SetConfig+0x118>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d023      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a2b      	ldr	r2, [pc, #172]	; (80095d8 <TIM_Base_SetConfig+0x11c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d01f      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a2a      	ldr	r2, [pc, #168]	; (80095dc <TIM_Base_SetConfig+0x120>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d01b      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a29      	ldr	r2, [pc, #164]	; (80095e0 <TIM_Base_SetConfig+0x124>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d017      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a28      	ldr	r2, [pc, #160]	; (80095e4 <TIM_Base_SetConfig+0x128>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a27      	ldr	r2, [pc, #156]	; (80095e8 <TIM_Base_SetConfig+0x12c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00f      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a26      	ldr	r2, [pc, #152]	; (80095ec <TIM_Base_SetConfig+0x130>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00b      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a25      	ldr	r2, [pc, #148]	; (80095f0 <TIM_Base_SetConfig+0x134>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d007      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a24      	ldr	r2, [pc, #144]	; (80095f4 <TIM_Base_SetConfig+0x138>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_Base_SetConfig+0xb2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a23      	ldr	r2, [pc, #140]	; (80095f8 <TIM_Base_SetConfig+0x13c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d108      	bne.n	8009580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a0a      	ldr	r2, [pc, #40]	; (80095d0 <TIM_Base_SetConfig+0x114>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_Base_SetConfig+0xf8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a0c      	ldr	r2, [pc, #48]	; (80095e0 <TIM_Base_SetConfig+0x124>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d103      	bne.n	80095bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	691a      	ldr	r2, [r3, #16]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	615a      	str	r2, [r3, #20]
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40010000 	.word	0x40010000
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00
 80095e0:	40010400 	.word	0x40010400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40014400 	.word	0x40014400
 80095ec:	40014800 	.word	0x40014800
 80095f0:	40001800 	.word	0x40001800
 80095f4:	40001c00 	.word	0x40001c00
 80095f8:	40002000 	.word	0x40002000

080095fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	f023 0201 	bic.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800962a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0303 	bic.w	r3, r3, #3
 8009632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f023 0302 	bic.w	r3, r3, #2
 8009644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a20      	ldr	r2, [pc, #128]	; (80096d4 <TIM_OC1_SetConfig+0xd8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d003      	beq.n	8009660 <TIM_OC1_SetConfig+0x64>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a1f      	ldr	r2, [pc, #124]	; (80096d8 <TIM_OC1_SetConfig+0xdc>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10c      	bne.n	800967a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f023 0308 	bic.w	r3, r3, #8
 8009666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	4313      	orrs	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f023 0304 	bic.w	r3, r3, #4
 8009678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <TIM_OC1_SetConfig+0xd8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_OC1_SetConfig+0x8e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <TIM_OC1_SetConfig+0xdc>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d111      	bne.n	80096ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	621a      	str	r2, [r3, #32]
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40010400 	.word	0x40010400

080096dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f023 0210 	bic.w	r2, r3, #16
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f023 0320 	bic.w	r3, r3, #32
 8009726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a22      	ldr	r2, [pc, #136]	; (80097c0 <TIM_OC2_SetConfig+0xe4>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_OC2_SetConfig+0x68>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a21      	ldr	r2, [pc, #132]	; (80097c4 <TIM_OC2_SetConfig+0xe8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d10d      	bne.n	8009760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800974a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	011b      	lsls	r3, r3, #4
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800975e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a17      	ldr	r2, [pc, #92]	; (80097c0 <TIM_OC2_SetConfig+0xe4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d003      	beq.n	8009770 <TIM_OC2_SetConfig+0x94>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a16      	ldr	r2, [pc, #88]	; (80097c4 <TIM_OC2_SetConfig+0xe8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d113      	bne.n	8009798 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800977e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	4313      	orrs	r3, r2
 800978a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	621a      	str	r2, [r3, #32]
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40010000 	.word	0x40010000
 80097c4:	40010400 	.word	0x40010400

080097c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0303 	bic.w	r3, r3, #3
 80097fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4313      	orrs	r3, r2
 8009808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	4313      	orrs	r3, r2
 800981c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a21      	ldr	r2, [pc, #132]	; (80098a8 <TIM_OC3_SetConfig+0xe0>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d003      	beq.n	800982e <TIM_OC3_SetConfig+0x66>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a20      	ldr	r2, [pc, #128]	; (80098ac <TIM_OC3_SetConfig+0xe4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d10d      	bne.n	800984a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a16      	ldr	r2, [pc, #88]	; (80098a8 <TIM_OC3_SetConfig+0xe0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_OC3_SetConfig+0x92>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a15      	ldr	r2, [pc, #84]	; (80098ac <TIM_OC3_SetConfig+0xe4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d113      	bne.n	8009882 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	011b      	lsls	r3, r3, #4
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	621a      	str	r2, [r3, #32]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	40010000 	.word	0x40010000
 80098ac:	40010400 	.word	0x40010400

080098b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	021b      	lsls	r3, r3, #8
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	031b      	lsls	r3, r3, #12
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	4313      	orrs	r3, r2
 8009906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a12      	ldr	r2, [pc, #72]	; (8009954 <TIM_OC4_SetConfig+0xa4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d003      	beq.n	8009918 <TIM_OC4_SetConfig+0x68>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a11      	ldr	r2, [pc, #68]	; (8009958 <TIM_OC4_SetConfig+0xa8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d109      	bne.n	800992c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800991e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	019b      	lsls	r3, r3, #6
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	621a      	str	r2, [r3, #32]
}
 8009946:	bf00      	nop
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40010000 	.word	0x40010000
 8009958:	40010400 	.word	0x40010400

0800995c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	f023 0201 	bic.w	r2, r3, #1
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4a28      	ldr	r2, [pc, #160]	; (8009a28 <TIM_TI1_SetConfig+0xcc>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01b      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009990:	d017      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4a25      	ldr	r2, [pc, #148]	; (8009a2c <TIM_TI1_SetConfig+0xd0>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d013      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4a24      	ldr	r2, [pc, #144]	; (8009a30 <TIM_TI1_SetConfig+0xd4>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00f      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4a23      	ldr	r2, [pc, #140]	; (8009a34 <TIM_TI1_SetConfig+0xd8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00b      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4a22      	ldr	r2, [pc, #136]	; (8009a38 <TIM_TI1_SetConfig+0xdc>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d007      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4a21      	ldr	r2, [pc, #132]	; (8009a3c <TIM_TI1_SetConfig+0xe0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d003      	beq.n	80099c2 <TIM_TI1_SetConfig+0x66>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4a20      	ldr	r2, [pc, #128]	; (8009a40 <TIM_TI1_SetConfig+0xe4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d101      	bne.n	80099c6 <TIM_TI1_SetConfig+0x6a>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <TIM_TI1_SetConfig+0x6c>
 80099c6:	2300      	movs	r3, #0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4313      	orrs	r3, r2
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	e003      	b.n	80099e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f043 0301 	orr.w	r3, r3, #1
 80099e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f023 030a 	bic.w	r3, r3, #10
 8009a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f003 030a 	and.w	r3, r3, #10
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	621a      	str	r2, [r3, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	40010000 	.word	0x40010000
 8009a2c:	40000400 	.word	0x40000400
 8009a30:	40000800 	.word	0x40000800
 8009a34:	40000c00 	.word	0x40000c00
 8009a38:	40010400 	.word	0x40010400
 8009a3c:	40014000 	.word	0x40014000
 8009a40:	40001800 	.word	0x40001800

08009a44 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f023 0210 	bic.w	r2, r3, #16
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	021b      	lsls	r3, r3, #8
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	031b      	lsls	r3, r3, #12
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	621a      	str	r2, [r3, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b087      	sub	sp, #28
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
 8009aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009afa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b087      	sub	sp, #28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	021b      	lsls	r3, r3, #8
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	031b      	lsls	r3, r3, #12
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	031b      	lsls	r3, r3, #12
 8009b8e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	621a      	str	r2, [r3, #32]
}
 8009ba4:	bf00      	nop
 8009ba6:	371c      	adds	r7, #28
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f003 031f 	and.w	r3, r3, #31
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a1a      	ldr	r2, [r3, #32]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	401a      	ands	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 031f 	and.w	r3, r3, #31
 8009be2:	6879      	ldr	r1, [r7, #4]
 8009be4:	fa01 f303 	lsl.w	r3, r1, r3
 8009be8:	431a      	orrs	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	621a      	str	r2, [r3, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e05a      	b.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a21      	ldr	r2, [pc, #132]	; (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d022      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c60:	d01d      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a1d      	ldr	r2, [pc, #116]	; (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d018      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00e      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d009      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a17      	ldr	r2, [pc, #92]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d004      	beq.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d10c      	bne.n	8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40010400 	.word	0x40010400
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40001800 	.word	0x40001800

08009cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e03f      	b.n	8009dae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7fa f860 	bl	8003e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2224      	movs	r2, #36	; 0x24
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f9a7 	bl	800a0b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	691a      	ldr	r2, [r3, #16]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695a      	ldr	r2, [r3, #20]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b08a      	sub	sp, #40	; 0x28
 8009dba:	af02      	add	r7, sp, #8
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	603b      	str	r3, [r7, #0]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b20      	cmp	r3, #32
 8009dd4:	d17c      	bne.n	8009ed0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <HAL_UART_Transmit+0x2c>
 8009ddc:	88fb      	ldrh	r3, [r7, #6]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e075      	b.n	8009ed2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d101      	bne.n	8009df4 <HAL_UART_Transmit+0x3e>
 8009df0:	2302      	movs	r3, #2
 8009df2:	e06e      	b.n	8009ed2 <HAL_UART_Transmit+0x11c>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2221      	movs	r2, #33	; 0x21
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e0a:	f7fa fb7d 	bl	8004508 <HAL_GetTick>
 8009e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	88fa      	ldrh	r2, [r7, #6]
 8009e14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	88fa      	ldrh	r2, [r7, #6]
 8009e1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e24:	d108      	bne.n	8009e38 <HAL_UART_Transmit+0x82>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d104      	bne.n	8009e38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	61bb      	str	r3, [r7, #24]
 8009e36:	e003      	b.n	8009e40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e48:	e02a      	b.n	8009ea0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2200      	movs	r2, #0
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f8e2 	bl	800a01e <UART_WaitOnFlagUntilTimeout>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e036      	b.n	8009ed2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10b      	bne.n	8009e82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	3302      	adds	r3, #2
 8009e7e:	61bb      	str	r3, [r7, #24]
 8009e80:	e007      	b.n	8009e92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	781a      	ldrb	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1cf      	bne.n	8009e4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2140      	movs	r1, #64	; 0x40
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 f8b2 	bl	800a01e <UART_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e006      	b.n	8009ed2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e000      	b.n	8009ed2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ed0:	2302      	movs	r3, #2
  }
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b08a      	sub	sp, #40	; 0x28
 8009ede:	af02      	add	r7, sp, #8
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	603b      	str	r3, [r7, #0]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	f040 808c 	bne.w	800a014 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <HAL_UART_Receive+0x2e>
 8009f02:	88fb      	ldrh	r3, [r7, #6]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e084      	b.n	800a016 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_UART_Receive+0x40>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e07d      	b.n	800a016 <HAL_UART_Receive+0x13c>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2222      	movs	r2, #34	; 0x22
 8009f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f36:	f7fa fae7 	bl	8004508 <HAL_GetTick>
 8009f3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	88fa      	ldrh	r2, [r7, #6]
 8009f46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f50:	d108      	bne.n	8009f64 <HAL_UART_Receive+0x8a>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e003      	b.n	8009f6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009f74:	e043      	b.n	8009ffe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2120      	movs	r1, #32
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 f84c 	bl	800a01e <UART_WaitOnFlagUntilTimeout>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e042      	b.n	800a016 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10c      	bne.n	8009fb0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	3302      	adds	r3, #2
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	e01f      	b.n	8009ff0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	d007      	beq.n	8009fca <HAL_UART_Receive+0xf0>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <HAL_UART_Receive+0xfe>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e008      	b.n	8009fea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	3301      	adds	r3, #1
 8009fee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a002:	b29b      	uxth	r3, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1b6      	bne.n	8009f76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2220      	movs	r2, #32
 800a00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	e000      	b.n	800a016 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a014:	2302      	movs	r3, #2
  }
}
 800a016:	4618      	mov	r0, r3
 800a018:	3720      	adds	r7, #32
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	603b      	str	r3, [r7, #0]
 800a02a:	4613      	mov	r3, r2
 800a02c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a02e:	e02c      	b.n	800a08a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d028      	beq.n	800a08a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d007      	beq.n	800a04e <UART_WaitOnFlagUntilTimeout+0x30>
 800a03e:	f7fa fa63 	bl	8004508 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d21d      	bcs.n	800a08a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a05c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	695a      	ldr	r2, [r3, #20]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2220      	movs	r2, #32
 800a072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e00f      	b.n	800a0aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	4013      	ands	r3, r2
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	429a      	cmp	r2, r3
 800a098:	bf0c      	ite	eq
 800a09a:	2301      	moveq	r3, #1
 800a09c:	2300      	movne	r3, #0
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d0c3      	beq.n	800a030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b8:	b0c0      	sub	sp, #256	; 0x100
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d0:	68d9      	ldr	r1, [r3, #12]
 800a0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	ea40 0301 	orr.w	r3, r0, r1
 800a0dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a10c:	f021 010c 	bic.w	r1, r1, #12
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a11a:	430b      	orrs	r3, r1
 800a11c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12e:	6999      	ldr	r1, [r3, #24]
 800a130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	ea40 0301 	orr.w	r3, r0, r1
 800a13a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	4b8f      	ldr	r3, [pc, #572]	; (800a380 <UART_SetConfig+0x2cc>)
 800a144:	429a      	cmp	r2, r3
 800a146:	d005      	beq.n	800a154 <UART_SetConfig+0xa0>
 800a148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	4b8d      	ldr	r3, [pc, #564]	; (800a384 <UART_SetConfig+0x2d0>)
 800a150:	429a      	cmp	r2, r3
 800a152:	d104      	bne.n	800a15e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a154:	f7fd fdbc 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 800a158:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a15c:	e003      	b.n	800a166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a15e:	f7fd fda3 	bl	8007ca8 <HAL_RCC_GetPCLK1Freq>
 800a162:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a170:	f040 810c 	bne.w	800a38c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a17e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a186:	4622      	mov	r2, r4
 800a188:	462b      	mov	r3, r5
 800a18a:	1891      	adds	r1, r2, r2
 800a18c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a18e:	415b      	adcs	r3, r3
 800a190:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a196:	4621      	mov	r1, r4
 800a198:	eb12 0801 	adds.w	r8, r2, r1
 800a19c:	4629      	mov	r1, r5
 800a19e:	eb43 0901 	adc.w	r9, r3, r1
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1b6:	4690      	mov	r8, r2
 800a1b8:	4699      	mov	r9, r3
 800a1ba:	4623      	mov	r3, r4
 800a1bc:	eb18 0303 	adds.w	r3, r8, r3
 800a1c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	eb49 0303 	adc.w	r3, r9, r3
 800a1ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a1de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	18db      	adds	r3, r3, r3
 800a1e6:	653b      	str	r3, [r7, #80]	; 0x50
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	eb42 0303 	adc.w	r3, r2, r3
 800a1ee:	657b      	str	r3, [r7, #84]	; 0x54
 800a1f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a1f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a1f8:	f7f6 fd66 	bl	8000cc8 <__aeabi_uldivmod>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4b61      	ldr	r3, [pc, #388]	; (800a388 <UART_SetConfig+0x2d4>)
 800a202:	fba3 2302 	umull	r2, r3, r3, r2
 800a206:	095b      	lsrs	r3, r3, #5
 800a208:	011c      	lsls	r4, r3, #4
 800a20a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a214:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a21c:	4642      	mov	r2, r8
 800a21e:	464b      	mov	r3, r9
 800a220:	1891      	adds	r1, r2, r2
 800a222:	64b9      	str	r1, [r7, #72]	; 0x48
 800a224:	415b      	adcs	r3, r3
 800a226:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a22c:	4641      	mov	r1, r8
 800a22e:	eb12 0a01 	adds.w	sl, r2, r1
 800a232:	4649      	mov	r1, r9
 800a234:	eb43 0b01 	adc.w	fp, r3, r1
 800a238:	f04f 0200 	mov.w	r2, #0
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a24c:	4692      	mov	sl, r2
 800a24e:	469b      	mov	fp, r3
 800a250:	4643      	mov	r3, r8
 800a252:	eb1a 0303 	adds.w	r3, sl, r3
 800a256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a25a:	464b      	mov	r3, r9
 800a25c:	eb4b 0303 	adc.w	r3, fp, r3
 800a260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a270:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a278:	460b      	mov	r3, r1
 800a27a:	18db      	adds	r3, r3, r3
 800a27c:	643b      	str	r3, [r7, #64]	; 0x40
 800a27e:	4613      	mov	r3, r2
 800a280:	eb42 0303 	adc.w	r3, r2, r3
 800a284:	647b      	str	r3, [r7, #68]	; 0x44
 800a286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a28a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a28e:	f7f6 fd1b 	bl	8000cc8 <__aeabi_uldivmod>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4611      	mov	r1, r2
 800a298:	4b3b      	ldr	r3, [pc, #236]	; (800a388 <UART_SetConfig+0x2d4>)
 800a29a:	fba3 2301 	umull	r2, r3, r3, r1
 800a29e:	095b      	lsrs	r3, r3, #5
 800a2a0:	2264      	movs	r2, #100	; 0x64
 800a2a2:	fb02 f303 	mul.w	r3, r2, r3
 800a2a6:	1acb      	subs	r3, r1, r3
 800a2a8:	00db      	lsls	r3, r3, #3
 800a2aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a2ae:	4b36      	ldr	r3, [pc, #216]	; (800a388 <UART_SetConfig+0x2d4>)
 800a2b0:	fba3 2302 	umull	r2, r3, r3, r2
 800a2b4:	095b      	lsrs	r3, r3, #5
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2bc:	441c      	add	r4, r3
 800a2be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a2cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	1891      	adds	r1, r2, r2
 800a2d6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a2d8:	415b      	adcs	r3, r3
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	1851      	adds	r1, r2, r1
 800a2e4:	6339      	str	r1, [r7, #48]	; 0x30
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	414b      	adcs	r3, r1
 800a2ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	f04f 0300 	mov.w	r3, #0
 800a2f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a2f8:	4659      	mov	r1, fp
 800a2fa:	00cb      	lsls	r3, r1, #3
 800a2fc:	4651      	mov	r1, sl
 800a2fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a302:	4651      	mov	r1, sl
 800a304:	00ca      	lsls	r2, r1, #3
 800a306:	4610      	mov	r0, r2
 800a308:	4619      	mov	r1, r3
 800a30a:	4603      	mov	r3, r0
 800a30c:	4642      	mov	r2, r8
 800a30e:	189b      	adds	r3, r3, r2
 800a310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a314:	464b      	mov	r3, r9
 800a316:	460a      	mov	r2, r1
 800a318:	eb42 0303 	adc.w	r3, r2, r3
 800a31c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a32c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a334:	460b      	mov	r3, r1
 800a336:	18db      	adds	r3, r3, r3
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
 800a33a:	4613      	mov	r3, r2
 800a33c:	eb42 0303 	adc.w	r3, r2, r3
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a34a:	f7f6 fcbd 	bl	8000cc8 <__aeabi_uldivmod>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <UART_SetConfig+0x2d4>)
 800a354:	fba3 1302 	umull	r1, r3, r3, r2
 800a358:	095b      	lsrs	r3, r3, #5
 800a35a:	2164      	movs	r1, #100	; 0x64
 800a35c:	fb01 f303 	mul.w	r3, r1, r3
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	3332      	adds	r3, #50	; 0x32
 800a366:	4a08      	ldr	r2, [pc, #32]	; (800a388 <UART_SetConfig+0x2d4>)
 800a368:	fba2 2303 	umull	r2, r3, r2, r3
 800a36c:	095b      	lsrs	r3, r3, #5
 800a36e:	f003 0207 	and.w	r2, r3, #7
 800a372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4422      	add	r2, r4
 800a37a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a37c:	e105      	b.n	800a58a <UART_SetConfig+0x4d6>
 800a37e:	bf00      	nop
 800a380:	40011000 	.word	0x40011000
 800a384:	40011400 	.word	0x40011400
 800a388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a38c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a390:	2200      	movs	r2, #0
 800a392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a396:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a39a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a39e:	4642      	mov	r2, r8
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	1891      	adds	r1, r2, r2
 800a3a4:	6239      	str	r1, [r7, #32]
 800a3a6:	415b      	adcs	r3, r3
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	1854      	adds	r4, r2, r1
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	eb43 0501 	adc.w	r5, r3, r1
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	00eb      	lsls	r3, r5, #3
 800a3c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3c6:	00e2      	lsls	r2, r4, #3
 800a3c8:	4614      	mov	r4, r2
 800a3ca:	461d      	mov	r5, r3
 800a3cc:	4643      	mov	r3, r8
 800a3ce:	18e3      	adds	r3, r4, r3
 800a3d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3d4:	464b      	mov	r3, r9
 800a3d6:	eb45 0303 	adc.w	r3, r5, r3
 800a3da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3ee:	f04f 0200 	mov.w	r2, #0
 800a3f2:	f04f 0300 	mov.w	r3, #0
 800a3f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	008b      	lsls	r3, r1, #2
 800a3fe:	4621      	mov	r1, r4
 800a400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a404:	4621      	mov	r1, r4
 800a406:	008a      	lsls	r2, r1, #2
 800a408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a40c:	f7f6 fc5c 	bl	8000cc8 <__aeabi_uldivmod>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4b60      	ldr	r3, [pc, #384]	; (800a598 <UART_SetConfig+0x4e4>)
 800a416:	fba3 2302 	umull	r2, r3, r3, r2
 800a41a:	095b      	lsrs	r3, r3, #5
 800a41c:	011c      	lsls	r4, r3, #4
 800a41e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a422:	2200      	movs	r2, #0
 800a424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a42c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a430:	4642      	mov	r2, r8
 800a432:	464b      	mov	r3, r9
 800a434:	1891      	adds	r1, r2, r2
 800a436:	61b9      	str	r1, [r7, #24]
 800a438:	415b      	adcs	r3, r3
 800a43a:	61fb      	str	r3, [r7, #28]
 800a43c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a440:	4641      	mov	r1, r8
 800a442:	1851      	adds	r1, r2, r1
 800a444:	6139      	str	r1, [r7, #16]
 800a446:	4649      	mov	r1, r9
 800a448:	414b      	adcs	r3, r1
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	f04f 0200 	mov.w	r2, #0
 800a450:	f04f 0300 	mov.w	r3, #0
 800a454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a458:	4659      	mov	r1, fp
 800a45a:	00cb      	lsls	r3, r1, #3
 800a45c:	4651      	mov	r1, sl
 800a45e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a462:	4651      	mov	r1, sl
 800a464:	00ca      	lsls	r2, r1, #3
 800a466:	4610      	mov	r0, r2
 800a468:	4619      	mov	r1, r3
 800a46a:	4603      	mov	r3, r0
 800a46c:	4642      	mov	r2, r8
 800a46e:	189b      	adds	r3, r3, r2
 800a470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a474:	464b      	mov	r3, r9
 800a476:	460a      	mov	r2, r1
 800a478:	eb42 0303 	adc.w	r3, r2, r3
 800a47c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	67bb      	str	r3, [r7, #120]	; 0x78
 800a48a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a48c:	f04f 0200 	mov.w	r2, #0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a498:	4649      	mov	r1, r9
 800a49a:	008b      	lsls	r3, r1, #2
 800a49c:	4641      	mov	r1, r8
 800a49e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	008a      	lsls	r2, r1, #2
 800a4a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a4aa:	f7f6 fc0d 	bl	8000cc8 <__aeabi_uldivmod>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4b39      	ldr	r3, [pc, #228]	; (800a598 <UART_SetConfig+0x4e4>)
 800a4b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	2164      	movs	r1, #100	; 0x64
 800a4bc:	fb01 f303 	mul.w	r3, r1, r3
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	3332      	adds	r3, #50	; 0x32
 800a4c6:	4a34      	ldr	r2, [pc, #208]	; (800a598 <UART_SetConfig+0x4e4>)
 800a4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4cc:	095b      	lsrs	r3, r3, #5
 800a4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4d2:	441c      	add	r4, r3
 800a4d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4d8:	2200      	movs	r2, #0
 800a4da:	673b      	str	r3, [r7, #112]	; 0x70
 800a4dc:	677a      	str	r2, [r7, #116]	; 0x74
 800a4de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	464b      	mov	r3, r9
 800a4e6:	1891      	adds	r1, r2, r2
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	415b      	adcs	r3, r3
 800a4ec:	60fb      	str	r3, [r7, #12]
 800a4ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	1851      	adds	r1, r2, r1
 800a4f6:	6039      	str	r1, [r7, #0]
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	414b      	adcs	r3, r1
 800a4fc:	607b      	str	r3, [r7, #4]
 800a4fe:	f04f 0200 	mov.w	r2, #0
 800a502:	f04f 0300 	mov.w	r3, #0
 800a506:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a50a:	4659      	mov	r1, fp
 800a50c:	00cb      	lsls	r3, r1, #3
 800a50e:	4651      	mov	r1, sl
 800a510:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a514:	4651      	mov	r1, sl
 800a516:	00ca      	lsls	r2, r1, #3
 800a518:	4610      	mov	r0, r2
 800a51a:	4619      	mov	r1, r3
 800a51c:	4603      	mov	r3, r0
 800a51e:	4642      	mov	r2, r8
 800a520:	189b      	adds	r3, r3, r2
 800a522:	66bb      	str	r3, [r7, #104]	; 0x68
 800a524:	464b      	mov	r3, r9
 800a526:	460a      	mov	r2, r1
 800a528:	eb42 0303 	adc.w	r3, r2, r3
 800a52c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	663b      	str	r3, [r7, #96]	; 0x60
 800a538:	667a      	str	r2, [r7, #100]	; 0x64
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a546:	4649      	mov	r1, r9
 800a548:	008b      	lsls	r3, r1, #2
 800a54a:	4641      	mov	r1, r8
 800a54c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a550:	4641      	mov	r1, r8
 800a552:	008a      	lsls	r2, r1, #2
 800a554:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a558:	f7f6 fbb6 	bl	8000cc8 <__aeabi_uldivmod>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4b0d      	ldr	r3, [pc, #52]	; (800a598 <UART_SetConfig+0x4e4>)
 800a562:	fba3 1302 	umull	r1, r3, r3, r2
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	2164      	movs	r1, #100	; 0x64
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	3332      	adds	r3, #50	; 0x32
 800a574:	4a08      	ldr	r2, [pc, #32]	; (800a598 <UART_SetConfig+0x4e4>)
 800a576:	fba2 2303 	umull	r2, r3, r2, r3
 800a57a:	095b      	lsrs	r3, r3, #5
 800a57c:	f003 020f 	and.w	r2, r3, #15
 800a580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4422      	add	r2, r4
 800a588:	609a      	str	r2, [r3, #8]
}
 800a58a:	bf00      	nop
 800a58c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a590:	46bd      	mov	sp, r7
 800a592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a596:	bf00      	nop
 800a598:	51eb851f 	.word	0x51eb851f

0800a59c <__errno>:
 800a59c:	4b01      	ldr	r3, [pc, #4]	; (800a5a4 <__errno+0x8>)
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000014 	.word	0x20000014

0800a5a8 <__libc_init_array>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	4d0d      	ldr	r5, [pc, #52]	; (800a5e0 <__libc_init_array+0x38>)
 800a5ac:	4c0d      	ldr	r4, [pc, #52]	; (800a5e4 <__libc_init_array+0x3c>)
 800a5ae:	1b64      	subs	r4, r4, r5
 800a5b0:	10a4      	asrs	r4, r4, #2
 800a5b2:	2600      	movs	r6, #0
 800a5b4:	42a6      	cmp	r6, r4
 800a5b6:	d109      	bne.n	800a5cc <__libc_init_array+0x24>
 800a5b8:	4d0b      	ldr	r5, [pc, #44]	; (800a5e8 <__libc_init_array+0x40>)
 800a5ba:	4c0c      	ldr	r4, [pc, #48]	; (800a5ec <__libc_init_array+0x44>)
 800a5bc:	f002 ff12 	bl	800d3e4 <_init>
 800a5c0:	1b64      	subs	r4, r4, r5
 800a5c2:	10a4      	asrs	r4, r4, #2
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	42a6      	cmp	r6, r4
 800a5c8:	d105      	bne.n	800a5d6 <__libc_init_array+0x2e>
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d0:	4798      	blx	r3
 800a5d2:	3601      	adds	r6, #1
 800a5d4:	e7ee      	b.n	800a5b4 <__libc_init_array+0xc>
 800a5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5da:	4798      	blx	r3
 800a5dc:	3601      	adds	r6, #1
 800a5de:	e7f2      	b.n	800a5c6 <__libc_init_array+0x1e>
 800a5e0:	0800e46c 	.word	0x0800e46c
 800a5e4:	0800e46c 	.word	0x0800e46c
 800a5e8:	0800e46c 	.word	0x0800e46c
 800a5ec:	0800e470 	.word	0x0800e470

0800a5f0 <memcmp>:
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	3901      	subs	r1, #1
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4290      	cmp	r0, r2
 800a5f8:	d101      	bne.n	800a5fe <memcmp+0xe>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e005      	b.n	800a60a <memcmp+0x1a>
 800a5fe:	7803      	ldrb	r3, [r0, #0]
 800a600:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a604:	42a3      	cmp	r3, r4
 800a606:	d001      	beq.n	800a60c <memcmp+0x1c>
 800a608:	1b18      	subs	r0, r3, r4
 800a60a:	bd10      	pop	{r4, pc}
 800a60c:	3001      	adds	r0, #1
 800a60e:	e7f2      	b.n	800a5f6 <memcmp+0x6>

0800a610 <memcpy>:
 800a610:	440a      	add	r2, r1
 800a612:	4291      	cmp	r1, r2
 800a614:	f100 33ff 	add.w	r3, r0, #4294967295
 800a618:	d100      	bne.n	800a61c <memcpy+0xc>
 800a61a:	4770      	bx	lr
 800a61c:	b510      	push	{r4, lr}
 800a61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a622:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a626:	4291      	cmp	r1, r2
 800a628:	d1f9      	bne.n	800a61e <memcpy+0xe>
 800a62a:	bd10      	pop	{r4, pc}

0800a62c <memset>:
 800a62c:	4402      	add	r2, r0
 800a62e:	4603      	mov	r3, r0
 800a630:	4293      	cmp	r3, r2
 800a632:	d100      	bne.n	800a636 <memset+0xa>
 800a634:	4770      	bx	lr
 800a636:	f803 1b01 	strb.w	r1, [r3], #1
 800a63a:	e7f9      	b.n	800a630 <memset+0x4>

0800a63c <__cvt>:
 800a63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a640:	ec55 4b10 	vmov	r4, r5, d0
 800a644:	2d00      	cmp	r5, #0
 800a646:	460e      	mov	r6, r1
 800a648:	4619      	mov	r1, r3
 800a64a:	462b      	mov	r3, r5
 800a64c:	bfbb      	ittet	lt
 800a64e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a652:	461d      	movlt	r5, r3
 800a654:	2300      	movge	r3, #0
 800a656:	232d      	movlt	r3, #45	; 0x2d
 800a658:	700b      	strb	r3, [r1, #0]
 800a65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a65c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a660:	4691      	mov	r9, r2
 800a662:	f023 0820 	bic.w	r8, r3, #32
 800a666:	bfbc      	itt	lt
 800a668:	4622      	movlt	r2, r4
 800a66a:	4614      	movlt	r4, r2
 800a66c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a670:	d005      	beq.n	800a67e <__cvt+0x42>
 800a672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a676:	d100      	bne.n	800a67a <__cvt+0x3e>
 800a678:	3601      	adds	r6, #1
 800a67a:	2102      	movs	r1, #2
 800a67c:	e000      	b.n	800a680 <__cvt+0x44>
 800a67e:	2103      	movs	r1, #3
 800a680:	ab03      	add	r3, sp, #12
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	ab02      	add	r3, sp, #8
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	ec45 4b10 	vmov	d0, r4, r5
 800a68c:	4653      	mov	r3, sl
 800a68e:	4632      	mov	r2, r6
 800a690:	f000 fcea 	bl	800b068 <_dtoa_r>
 800a694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a698:	4607      	mov	r7, r0
 800a69a:	d102      	bne.n	800a6a2 <__cvt+0x66>
 800a69c:	f019 0f01 	tst.w	r9, #1
 800a6a0:	d022      	beq.n	800a6e8 <__cvt+0xac>
 800a6a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6a6:	eb07 0906 	add.w	r9, r7, r6
 800a6aa:	d110      	bne.n	800a6ce <__cvt+0x92>
 800a6ac:	783b      	ldrb	r3, [r7, #0]
 800a6ae:	2b30      	cmp	r3, #48	; 0x30
 800a6b0:	d10a      	bne.n	800a6c8 <__cvt+0x8c>
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7f6 fa25 	bl	8000b08 <__aeabi_dcmpeq>
 800a6be:	b918      	cbnz	r0, 800a6c8 <__cvt+0x8c>
 800a6c0:	f1c6 0601 	rsb	r6, r6, #1
 800a6c4:	f8ca 6000 	str.w	r6, [sl]
 800a6c8:	f8da 3000 	ldr.w	r3, [sl]
 800a6cc:	4499      	add	r9, r3
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f7f6 fa17 	bl	8000b08 <__aeabi_dcmpeq>
 800a6da:	b108      	cbz	r0, 800a6e0 <__cvt+0xa4>
 800a6dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6e0:	2230      	movs	r2, #48	; 0x30
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	454b      	cmp	r3, r9
 800a6e6:	d307      	bcc.n	800a6f8 <__cvt+0xbc>
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6ec:	1bdb      	subs	r3, r3, r7
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	b004      	add	sp, #16
 800a6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f8:	1c59      	adds	r1, r3, #1
 800a6fa:	9103      	str	r1, [sp, #12]
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	e7f0      	b.n	800a6e2 <__cvt+0xa6>

0800a700 <__exponent>:
 800a700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a702:	4603      	mov	r3, r0
 800a704:	2900      	cmp	r1, #0
 800a706:	bfb8      	it	lt
 800a708:	4249      	neglt	r1, r1
 800a70a:	f803 2b02 	strb.w	r2, [r3], #2
 800a70e:	bfb4      	ite	lt
 800a710:	222d      	movlt	r2, #45	; 0x2d
 800a712:	222b      	movge	r2, #43	; 0x2b
 800a714:	2909      	cmp	r1, #9
 800a716:	7042      	strb	r2, [r0, #1]
 800a718:	dd2a      	ble.n	800a770 <__exponent+0x70>
 800a71a:	f10d 0407 	add.w	r4, sp, #7
 800a71e:	46a4      	mov	ip, r4
 800a720:	270a      	movs	r7, #10
 800a722:	46a6      	mov	lr, r4
 800a724:	460a      	mov	r2, r1
 800a726:	fb91 f6f7 	sdiv	r6, r1, r7
 800a72a:	fb07 1516 	mls	r5, r7, r6, r1
 800a72e:	3530      	adds	r5, #48	; 0x30
 800a730:	2a63      	cmp	r2, #99	; 0x63
 800a732:	f104 34ff 	add.w	r4, r4, #4294967295
 800a736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a73a:	4631      	mov	r1, r6
 800a73c:	dcf1      	bgt.n	800a722 <__exponent+0x22>
 800a73e:	3130      	adds	r1, #48	; 0x30
 800a740:	f1ae 0502 	sub.w	r5, lr, #2
 800a744:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a748:	1c44      	adds	r4, r0, #1
 800a74a:	4629      	mov	r1, r5
 800a74c:	4561      	cmp	r1, ip
 800a74e:	d30a      	bcc.n	800a766 <__exponent+0x66>
 800a750:	f10d 0209 	add.w	r2, sp, #9
 800a754:	eba2 020e 	sub.w	r2, r2, lr
 800a758:	4565      	cmp	r5, ip
 800a75a:	bf88      	it	hi
 800a75c:	2200      	movhi	r2, #0
 800a75e:	4413      	add	r3, r2
 800a760:	1a18      	subs	r0, r3, r0
 800a762:	b003      	add	sp, #12
 800a764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a76a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a76e:	e7ed      	b.n	800a74c <__exponent+0x4c>
 800a770:	2330      	movs	r3, #48	; 0x30
 800a772:	3130      	adds	r1, #48	; 0x30
 800a774:	7083      	strb	r3, [r0, #2]
 800a776:	70c1      	strb	r1, [r0, #3]
 800a778:	1d03      	adds	r3, r0, #4
 800a77a:	e7f1      	b.n	800a760 <__exponent+0x60>

0800a77c <_printf_float>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	ed2d 8b02 	vpush	{d8}
 800a784:	b08d      	sub	sp, #52	; 0x34
 800a786:	460c      	mov	r4, r1
 800a788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a78c:	4616      	mov	r6, r2
 800a78e:	461f      	mov	r7, r3
 800a790:	4605      	mov	r5, r0
 800a792:	f001 fa57 	bl	800bc44 <_localeconv_r>
 800a796:	f8d0 a000 	ldr.w	sl, [r0]
 800a79a:	4650      	mov	r0, sl
 800a79c:	f7f5 fd38 	bl	8000210 <strlen>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	9305      	str	r3, [sp, #20]
 800a7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7b0:	3307      	adds	r3, #7
 800a7b2:	f023 0307 	bic.w	r3, r3, #7
 800a7b6:	f103 0208 	add.w	r2, r3, #8
 800a7ba:	f8c8 2000 	str.w	r2, [r8]
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7ce:	9307      	str	r3, [sp, #28]
 800a7d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7d4:	ee08 0a10 	vmov	s16, r0
 800a7d8:	4b9f      	ldr	r3, [pc, #636]	; (800aa58 <_printf_float+0x2dc>)
 800a7da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e2:	f7f6 f9c3 	bl	8000b6c <__aeabi_dcmpun>
 800a7e6:	bb88      	cbnz	r0, 800a84c <_printf_float+0xd0>
 800a7e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ec:	4b9a      	ldr	r3, [pc, #616]	; (800aa58 <_printf_float+0x2dc>)
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	f7f6 f99d 	bl	8000b30 <__aeabi_dcmple>
 800a7f6:	bb48      	cbnz	r0, 800a84c <_printf_float+0xd0>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	4649      	mov	r1, r9
 800a800:	f7f6 f98c 	bl	8000b1c <__aeabi_dcmplt>
 800a804:	b110      	cbz	r0, 800a80c <_printf_float+0x90>
 800a806:	232d      	movs	r3, #45	; 0x2d
 800a808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a80c:	4b93      	ldr	r3, [pc, #588]	; (800aa5c <_printf_float+0x2e0>)
 800a80e:	4894      	ldr	r0, [pc, #592]	; (800aa60 <_printf_float+0x2e4>)
 800a810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a814:	bf94      	ite	ls
 800a816:	4698      	movls	r8, r3
 800a818:	4680      	movhi	r8, r0
 800a81a:	2303      	movs	r3, #3
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	9b05      	ldr	r3, [sp, #20]
 800a820:	f023 0204 	bic.w	r2, r3, #4
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	f04f 0900 	mov.w	r9, #0
 800a82a:	9700      	str	r7, [sp, #0]
 800a82c:	4633      	mov	r3, r6
 800a82e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a830:	4621      	mov	r1, r4
 800a832:	4628      	mov	r0, r5
 800a834:	f000 f9d8 	bl	800abe8 <_printf_common>
 800a838:	3001      	adds	r0, #1
 800a83a:	f040 8090 	bne.w	800a95e <_printf_float+0x1e2>
 800a83e:	f04f 30ff 	mov.w	r0, #4294967295
 800a842:	b00d      	add	sp, #52	; 0x34
 800a844:	ecbd 8b02 	vpop	{d8}
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	4642      	mov	r2, r8
 800a84e:	464b      	mov	r3, r9
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f6 f98a 	bl	8000b6c <__aeabi_dcmpun>
 800a858:	b140      	cbz	r0, 800a86c <_printf_float+0xf0>
 800a85a:	464b      	mov	r3, r9
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bfbc      	itt	lt
 800a860:	232d      	movlt	r3, #45	; 0x2d
 800a862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a866:	487f      	ldr	r0, [pc, #508]	; (800aa64 <_printf_float+0x2e8>)
 800a868:	4b7f      	ldr	r3, [pc, #508]	; (800aa68 <_printf_float+0x2ec>)
 800a86a:	e7d1      	b.n	800a810 <_printf_float+0x94>
 800a86c:	6863      	ldr	r3, [r4, #4]
 800a86e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a872:	9206      	str	r2, [sp, #24]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	d13f      	bne.n	800a8f8 <_printf_float+0x17c>
 800a878:	2306      	movs	r3, #6
 800a87a:	6063      	str	r3, [r4, #4]
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	6861      	ldr	r1, [r4, #4]
 800a880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a884:	2300      	movs	r3, #0
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	ab0a      	add	r3, sp, #40	; 0x28
 800a88a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a88e:	ab09      	add	r3, sp, #36	; 0x24
 800a890:	ec49 8b10 	vmov	d0, r8, r9
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a89c:	4628      	mov	r0, r5
 800a89e:	f7ff fecd 	bl	800a63c <__cvt>
 800a8a2:	9b06      	ldr	r3, [sp, #24]
 800a8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8a6:	2b47      	cmp	r3, #71	; 0x47
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	d108      	bne.n	800a8be <_printf_float+0x142>
 800a8ac:	1cc8      	adds	r0, r1, #3
 800a8ae:	db02      	blt.n	800a8b6 <_printf_float+0x13a>
 800a8b0:	6863      	ldr	r3, [r4, #4]
 800a8b2:	4299      	cmp	r1, r3
 800a8b4:	dd41      	ble.n	800a93a <_printf_float+0x1be>
 800a8b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a8ba:	fa5f fb8b 	uxtb.w	fp, fp
 800a8be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8c2:	d820      	bhi.n	800a906 <_printf_float+0x18a>
 800a8c4:	3901      	subs	r1, #1
 800a8c6:	465a      	mov	r2, fp
 800a8c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8cc:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ce:	f7ff ff17 	bl	800a700 <__exponent>
 800a8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d4:	1813      	adds	r3, r2, r0
 800a8d6:	2a01      	cmp	r2, #1
 800a8d8:	4681      	mov	r9, r0
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	dc02      	bgt.n	800a8e4 <_printf_float+0x168>
 800a8de:	6822      	ldr	r2, [r4, #0]
 800a8e0:	07d2      	lsls	r2, r2, #31
 800a8e2:	d501      	bpl.n	800a8e8 <_printf_float+0x16c>
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	6123      	str	r3, [r4, #16]
 800a8e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d09c      	beq.n	800a82a <_printf_float+0xae>
 800a8f0:	232d      	movs	r3, #45	; 0x2d
 800a8f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f6:	e798      	b.n	800a82a <_printf_float+0xae>
 800a8f8:	9a06      	ldr	r2, [sp, #24]
 800a8fa:	2a47      	cmp	r2, #71	; 0x47
 800a8fc:	d1be      	bne.n	800a87c <_printf_float+0x100>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1bc      	bne.n	800a87c <_printf_float+0x100>
 800a902:	2301      	movs	r3, #1
 800a904:	e7b9      	b.n	800a87a <_printf_float+0xfe>
 800a906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a90a:	d118      	bne.n	800a93e <_printf_float+0x1c2>
 800a90c:	2900      	cmp	r1, #0
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	dd0b      	ble.n	800a92a <_printf_float+0x1ae>
 800a912:	6121      	str	r1, [r4, #16]
 800a914:	b913      	cbnz	r3, 800a91c <_printf_float+0x1a0>
 800a916:	6822      	ldr	r2, [r4, #0]
 800a918:	07d0      	lsls	r0, r2, #31
 800a91a:	d502      	bpl.n	800a922 <_printf_float+0x1a6>
 800a91c:	3301      	adds	r3, #1
 800a91e:	440b      	add	r3, r1
 800a920:	6123      	str	r3, [r4, #16]
 800a922:	65a1      	str	r1, [r4, #88]	; 0x58
 800a924:	f04f 0900 	mov.w	r9, #0
 800a928:	e7de      	b.n	800a8e8 <_printf_float+0x16c>
 800a92a:	b913      	cbnz	r3, 800a932 <_printf_float+0x1b6>
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	07d2      	lsls	r2, r2, #31
 800a930:	d501      	bpl.n	800a936 <_printf_float+0x1ba>
 800a932:	3302      	adds	r3, #2
 800a934:	e7f4      	b.n	800a920 <_printf_float+0x1a4>
 800a936:	2301      	movs	r3, #1
 800a938:	e7f2      	b.n	800a920 <_printf_float+0x1a4>
 800a93a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	4299      	cmp	r1, r3
 800a942:	db05      	blt.n	800a950 <_printf_float+0x1d4>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	6121      	str	r1, [r4, #16]
 800a948:	07d8      	lsls	r0, r3, #31
 800a94a:	d5ea      	bpl.n	800a922 <_printf_float+0x1a6>
 800a94c:	1c4b      	adds	r3, r1, #1
 800a94e:	e7e7      	b.n	800a920 <_printf_float+0x1a4>
 800a950:	2900      	cmp	r1, #0
 800a952:	bfd4      	ite	le
 800a954:	f1c1 0202 	rsble	r2, r1, #2
 800a958:	2201      	movgt	r2, #1
 800a95a:	4413      	add	r3, r2
 800a95c:	e7e0      	b.n	800a920 <_printf_float+0x1a4>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	055a      	lsls	r2, r3, #21
 800a962:	d407      	bmi.n	800a974 <_printf_float+0x1f8>
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	4642      	mov	r2, r8
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	d12c      	bne.n	800a9cc <_printf_float+0x250>
 800a972:	e764      	b.n	800a83e <_printf_float+0xc2>
 800a974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a978:	f240 80e0 	bls.w	800ab3c <_printf_float+0x3c0>
 800a97c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a980:	2200      	movs	r2, #0
 800a982:	2300      	movs	r3, #0
 800a984:	f7f6 f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 800a988:	2800      	cmp	r0, #0
 800a98a:	d034      	beq.n	800a9f6 <_printf_float+0x27a>
 800a98c:	4a37      	ldr	r2, [pc, #220]	; (800aa6c <_printf_float+0x2f0>)
 800a98e:	2301      	movs	r3, #1
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f af51 	beq.w	800a83e <_printf_float+0xc2>
 800a99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	db02      	blt.n	800a9aa <_printf_float+0x22e>
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	07d8      	lsls	r0, r3, #31
 800a9a8:	d510      	bpl.n	800a9cc <_printf_float+0x250>
 800a9aa:	ee18 3a10 	vmov	r3, s16
 800a9ae:	4652      	mov	r2, sl
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	f43f af41 	beq.w	800a83e <_printf_float+0xc2>
 800a9bc:	f04f 0800 	mov.w	r8, #0
 800a9c0:	f104 091a 	add.w	r9, r4, #26
 800a9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	4543      	cmp	r3, r8
 800a9ca:	dc09      	bgt.n	800a9e0 <_printf_float+0x264>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	079b      	lsls	r3, r3, #30
 800a9d0:	f100 8105 	bmi.w	800abde <_printf_float+0x462>
 800a9d4:	68e0      	ldr	r0, [r4, #12]
 800a9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d8:	4298      	cmp	r0, r3
 800a9da:	bfb8      	it	lt
 800a9dc:	4618      	movlt	r0, r3
 800a9de:	e730      	b.n	800a842 <_printf_float+0xc6>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	464a      	mov	r2, r9
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	f43f af27 	beq.w	800a83e <_printf_float+0xc2>
 800a9f0:	f108 0801 	add.w	r8, r8, #1
 800a9f4:	e7e6      	b.n	800a9c4 <_printf_float+0x248>
 800a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	dc39      	bgt.n	800aa70 <_printf_float+0x2f4>
 800a9fc:	4a1b      	ldr	r2, [pc, #108]	; (800aa6c <_printf_float+0x2f0>)
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f af19 	beq.w	800a83e <_printf_float+0xc2>
 800aa0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa10:	4313      	orrs	r3, r2
 800aa12:	d102      	bne.n	800aa1a <_printf_float+0x29e>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	07d9      	lsls	r1, r3, #31
 800aa18:	d5d8      	bpl.n	800a9cc <_printf_float+0x250>
 800aa1a:	ee18 3a10 	vmov	r3, s16
 800aa1e:	4652      	mov	r2, sl
 800aa20:	4631      	mov	r1, r6
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b8      	blx	r7
 800aa26:	3001      	adds	r0, #1
 800aa28:	f43f af09 	beq.w	800a83e <_printf_float+0xc2>
 800aa2c:	f04f 0900 	mov.w	r9, #0
 800aa30:	f104 0a1a 	add.w	sl, r4, #26
 800aa34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa36:	425b      	negs	r3, r3
 800aa38:	454b      	cmp	r3, r9
 800aa3a:	dc01      	bgt.n	800aa40 <_printf_float+0x2c4>
 800aa3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3e:	e792      	b.n	800a966 <_printf_float+0x1ea>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4652      	mov	r2, sl
 800aa44:	4631      	mov	r1, r6
 800aa46:	4628      	mov	r0, r5
 800aa48:	47b8      	blx	r7
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	f43f aef7 	beq.w	800a83e <_printf_float+0xc2>
 800aa50:	f109 0901 	add.w	r9, r9, #1
 800aa54:	e7ee      	b.n	800aa34 <_printf_float+0x2b8>
 800aa56:	bf00      	nop
 800aa58:	7fefffff 	.word	0x7fefffff
 800aa5c:	0800e090 	.word	0x0800e090
 800aa60:	0800e094 	.word	0x0800e094
 800aa64:	0800e09c 	.word	0x0800e09c
 800aa68:	0800e098 	.word	0x0800e098
 800aa6c:	0800e0a0 	.word	0x0800e0a0
 800aa70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa74:	429a      	cmp	r2, r3
 800aa76:	bfa8      	it	ge
 800aa78:	461a      	movge	r2, r3
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	4691      	mov	r9, r2
 800aa7e:	dc37      	bgt.n	800aaf0 <_printf_float+0x374>
 800aa80:	f04f 0b00 	mov.w	fp, #0
 800aa84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa88:	f104 021a 	add.w	r2, r4, #26
 800aa8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa8e:	9305      	str	r3, [sp, #20]
 800aa90:	eba3 0309 	sub.w	r3, r3, r9
 800aa94:	455b      	cmp	r3, fp
 800aa96:	dc33      	bgt.n	800ab00 <_printf_float+0x384>
 800aa98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	db3b      	blt.n	800ab18 <_printf_float+0x39c>
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	07da      	lsls	r2, r3, #31
 800aaa4:	d438      	bmi.n	800ab18 <_printf_float+0x39c>
 800aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa8:	9a05      	ldr	r2, [sp, #20]
 800aaaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaac:	1a9a      	subs	r2, r3, r2
 800aaae:	eba3 0901 	sub.w	r9, r3, r1
 800aab2:	4591      	cmp	r9, r2
 800aab4:	bfa8      	it	ge
 800aab6:	4691      	movge	r9, r2
 800aab8:	f1b9 0f00 	cmp.w	r9, #0
 800aabc:	dc35      	bgt.n	800ab2a <_printf_float+0x3ae>
 800aabe:	f04f 0800 	mov.w	r8, #0
 800aac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aac6:	f104 0a1a 	add.w	sl, r4, #26
 800aaca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	eba3 0309 	sub.w	r3, r3, r9
 800aad4:	4543      	cmp	r3, r8
 800aad6:	f77f af79 	ble.w	800a9cc <_printf_float+0x250>
 800aada:	2301      	movs	r3, #1
 800aadc:	4652      	mov	r2, sl
 800aade:	4631      	mov	r1, r6
 800aae0:	4628      	mov	r0, r5
 800aae2:	47b8      	blx	r7
 800aae4:	3001      	adds	r0, #1
 800aae6:	f43f aeaa 	beq.w	800a83e <_printf_float+0xc2>
 800aaea:	f108 0801 	add.w	r8, r8, #1
 800aaee:	e7ec      	b.n	800aaca <_printf_float+0x34e>
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4642      	mov	r2, r8
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	47b8      	blx	r7
 800aafa:	3001      	adds	r0, #1
 800aafc:	d1c0      	bne.n	800aa80 <_printf_float+0x304>
 800aafe:	e69e      	b.n	800a83e <_printf_float+0xc2>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	9205      	str	r2, [sp, #20]
 800ab08:	47b8      	blx	r7
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	f43f ae97 	beq.w	800a83e <_printf_float+0xc2>
 800ab10:	9a05      	ldr	r2, [sp, #20]
 800ab12:	f10b 0b01 	add.w	fp, fp, #1
 800ab16:	e7b9      	b.n	800aa8c <_printf_float+0x310>
 800ab18:	ee18 3a10 	vmov	r3, s16
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	4631      	mov	r1, r6
 800ab20:	4628      	mov	r0, r5
 800ab22:	47b8      	blx	r7
 800ab24:	3001      	adds	r0, #1
 800ab26:	d1be      	bne.n	800aaa6 <_printf_float+0x32a>
 800ab28:	e689      	b.n	800a83e <_printf_float+0xc2>
 800ab2a:	9a05      	ldr	r2, [sp, #20]
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	4442      	add	r2, r8
 800ab30:	4631      	mov	r1, r6
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b8      	blx	r7
 800ab36:	3001      	adds	r0, #1
 800ab38:	d1c1      	bne.n	800aabe <_printf_float+0x342>
 800ab3a:	e680      	b.n	800a83e <_printf_float+0xc2>
 800ab3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab3e:	2a01      	cmp	r2, #1
 800ab40:	dc01      	bgt.n	800ab46 <_printf_float+0x3ca>
 800ab42:	07db      	lsls	r3, r3, #31
 800ab44:	d538      	bpl.n	800abb8 <_printf_float+0x43c>
 800ab46:	2301      	movs	r3, #1
 800ab48:	4642      	mov	r2, r8
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	f43f ae74 	beq.w	800a83e <_printf_float+0xc2>
 800ab56:	ee18 3a10 	vmov	r3, s16
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b8      	blx	r7
 800ab62:	3001      	adds	r0, #1
 800ab64:	f43f ae6b 	beq.w	800a83e <_printf_float+0xc2>
 800ab68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f7f5 ffca 	bl	8000b08 <__aeabi_dcmpeq>
 800ab74:	b9d8      	cbnz	r0, 800abae <_printf_float+0x432>
 800ab76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab78:	f108 0201 	add.w	r2, r8, #1
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4628      	mov	r0, r5
 800ab82:	47b8      	blx	r7
 800ab84:	3001      	adds	r0, #1
 800ab86:	d10e      	bne.n	800aba6 <_printf_float+0x42a>
 800ab88:	e659      	b.n	800a83e <_printf_float+0xc2>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	4652      	mov	r2, sl
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b8      	blx	r7
 800ab94:	3001      	adds	r0, #1
 800ab96:	f43f ae52 	beq.w	800a83e <_printf_float+0xc2>
 800ab9a:	f108 0801 	add.w	r8, r8, #1
 800ab9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba0:	3b01      	subs	r3, #1
 800aba2:	4543      	cmp	r3, r8
 800aba4:	dcf1      	bgt.n	800ab8a <_printf_float+0x40e>
 800aba6:	464b      	mov	r3, r9
 800aba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800abac:	e6dc      	b.n	800a968 <_printf_float+0x1ec>
 800abae:	f04f 0800 	mov.w	r8, #0
 800abb2:	f104 0a1a 	add.w	sl, r4, #26
 800abb6:	e7f2      	b.n	800ab9e <_printf_float+0x422>
 800abb8:	2301      	movs	r3, #1
 800abba:	4642      	mov	r2, r8
 800abbc:	e7df      	b.n	800ab7e <_printf_float+0x402>
 800abbe:	2301      	movs	r3, #1
 800abc0:	464a      	mov	r2, r9
 800abc2:	4631      	mov	r1, r6
 800abc4:	4628      	mov	r0, r5
 800abc6:	47b8      	blx	r7
 800abc8:	3001      	adds	r0, #1
 800abca:	f43f ae38 	beq.w	800a83e <_printf_float+0xc2>
 800abce:	f108 0801 	add.w	r8, r8, #1
 800abd2:	68e3      	ldr	r3, [r4, #12]
 800abd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abd6:	1a5b      	subs	r3, r3, r1
 800abd8:	4543      	cmp	r3, r8
 800abda:	dcf0      	bgt.n	800abbe <_printf_float+0x442>
 800abdc:	e6fa      	b.n	800a9d4 <_printf_float+0x258>
 800abde:	f04f 0800 	mov.w	r8, #0
 800abe2:	f104 0919 	add.w	r9, r4, #25
 800abe6:	e7f4      	b.n	800abd2 <_printf_float+0x456>

0800abe8 <_printf_common>:
 800abe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abec:	4616      	mov	r6, r2
 800abee:	4699      	mov	r9, r3
 800abf0:	688a      	ldr	r2, [r1, #8]
 800abf2:	690b      	ldr	r3, [r1, #16]
 800abf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abf8:	4293      	cmp	r3, r2
 800abfa:	bfb8      	it	lt
 800abfc:	4613      	movlt	r3, r2
 800abfe:	6033      	str	r3, [r6, #0]
 800ac00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac04:	4607      	mov	r7, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	b10a      	cbz	r2, 800ac0e <_printf_common+0x26>
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	6033      	str	r3, [r6, #0]
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	0699      	lsls	r1, r3, #26
 800ac12:	bf42      	ittt	mi
 800ac14:	6833      	ldrmi	r3, [r6, #0]
 800ac16:	3302      	addmi	r3, #2
 800ac18:	6033      	strmi	r3, [r6, #0]
 800ac1a:	6825      	ldr	r5, [r4, #0]
 800ac1c:	f015 0506 	ands.w	r5, r5, #6
 800ac20:	d106      	bne.n	800ac30 <_printf_common+0x48>
 800ac22:	f104 0a19 	add.w	sl, r4, #25
 800ac26:	68e3      	ldr	r3, [r4, #12]
 800ac28:	6832      	ldr	r2, [r6, #0]
 800ac2a:	1a9b      	subs	r3, r3, r2
 800ac2c:	42ab      	cmp	r3, r5
 800ac2e:	dc26      	bgt.n	800ac7e <_printf_common+0x96>
 800ac30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac34:	1e13      	subs	r3, r2, #0
 800ac36:	6822      	ldr	r2, [r4, #0]
 800ac38:	bf18      	it	ne
 800ac3a:	2301      	movne	r3, #1
 800ac3c:	0692      	lsls	r2, r2, #26
 800ac3e:	d42b      	bmi.n	800ac98 <_printf_common+0xb0>
 800ac40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac44:	4649      	mov	r1, r9
 800ac46:	4638      	mov	r0, r7
 800ac48:	47c0      	blx	r8
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	d01e      	beq.n	800ac8c <_printf_common+0xa4>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	68e5      	ldr	r5, [r4, #12]
 800ac52:	6832      	ldr	r2, [r6, #0]
 800ac54:	f003 0306 	and.w	r3, r3, #6
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	bf08      	it	eq
 800ac5c:	1aad      	subeq	r5, r5, r2
 800ac5e:	68a3      	ldr	r3, [r4, #8]
 800ac60:	6922      	ldr	r2, [r4, #16]
 800ac62:	bf0c      	ite	eq
 800ac64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac68:	2500      	movne	r5, #0
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	bfc4      	itt	gt
 800ac6e:	1a9b      	subgt	r3, r3, r2
 800ac70:	18ed      	addgt	r5, r5, r3
 800ac72:	2600      	movs	r6, #0
 800ac74:	341a      	adds	r4, #26
 800ac76:	42b5      	cmp	r5, r6
 800ac78:	d11a      	bne.n	800acb0 <_printf_common+0xc8>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e008      	b.n	800ac90 <_printf_common+0xa8>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4652      	mov	r2, sl
 800ac82:	4649      	mov	r1, r9
 800ac84:	4638      	mov	r0, r7
 800ac86:	47c0      	blx	r8
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d103      	bne.n	800ac94 <_printf_common+0xac>
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac94:	3501      	adds	r5, #1
 800ac96:	e7c6      	b.n	800ac26 <_printf_common+0x3e>
 800ac98:	18e1      	adds	r1, r4, r3
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	2030      	movs	r0, #48	; 0x30
 800ac9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aca2:	4422      	add	r2, r4
 800aca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acac:	3302      	adds	r3, #2
 800acae:	e7c7      	b.n	800ac40 <_printf_common+0x58>
 800acb0:	2301      	movs	r3, #1
 800acb2:	4622      	mov	r2, r4
 800acb4:	4649      	mov	r1, r9
 800acb6:	4638      	mov	r0, r7
 800acb8:	47c0      	blx	r8
 800acba:	3001      	adds	r0, #1
 800acbc:	d0e6      	beq.n	800ac8c <_printf_common+0xa4>
 800acbe:	3601      	adds	r6, #1
 800acc0:	e7d9      	b.n	800ac76 <_printf_common+0x8e>
	...

0800acc4 <_printf_i>:
 800acc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	7e0f      	ldrb	r7, [r1, #24]
 800acca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800accc:	2f78      	cmp	r7, #120	; 0x78
 800acce:	4691      	mov	r9, r2
 800acd0:	4680      	mov	r8, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	469a      	mov	sl, r3
 800acd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acda:	d807      	bhi.n	800acec <_printf_i+0x28>
 800acdc:	2f62      	cmp	r7, #98	; 0x62
 800acde:	d80a      	bhi.n	800acf6 <_printf_i+0x32>
 800ace0:	2f00      	cmp	r7, #0
 800ace2:	f000 80d8 	beq.w	800ae96 <_printf_i+0x1d2>
 800ace6:	2f58      	cmp	r7, #88	; 0x58
 800ace8:	f000 80a3 	beq.w	800ae32 <_printf_i+0x16e>
 800acec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acf4:	e03a      	b.n	800ad6c <_printf_i+0xa8>
 800acf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acfa:	2b15      	cmp	r3, #21
 800acfc:	d8f6      	bhi.n	800acec <_printf_i+0x28>
 800acfe:	a101      	add	r1, pc, #4	; (adr r1, 800ad04 <_printf_i+0x40>)
 800ad00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad04:	0800ad5d 	.word	0x0800ad5d
 800ad08:	0800ad71 	.word	0x0800ad71
 800ad0c:	0800aced 	.word	0x0800aced
 800ad10:	0800aced 	.word	0x0800aced
 800ad14:	0800aced 	.word	0x0800aced
 800ad18:	0800aced 	.word	0x0800aced
 800ad1c:	0800ad71 	.word	0x0800ad71
 800ad20:	0800aced 	.word	0x0800aced
 800ad24:	0800aced 	.word	0x0800aced
 800ad28:	0800aced 	.word	0x0800aced
 800ad2c:	0800aced 	.word	0x0800aced
 800ad30:	0800ae7d 	.word	0x0800ae7d
 800ad34:	0800ada1 	.word	0x0800ada1
 800ad38:	0800ae5f 	.word	0x0800ae5f
 800ad3c:	0800aced 	.word	0x0800aced
 800ad40:	0800aced 	.word	0x0800aced
 800ad44:	0800ae9f 	.word	0x0800ae9f
 800ad48:	0800aced 	.word	0x0800aced
 800ad4c:	0800ada1 	.word	0x0800ada1
 800ad50:	0800aced 	.word	0x0800aced
 800ad54:	0800aced 	.word	0x0800aced
 800ad58:	0800ae67 	.word	0x0800ae67
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	1d1a      	adds	r2, r3, #4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	602a      	str	r2, [r5, #0]
 800ad64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0a3      	b.n	800aeb8 <_printf_i+0x1f4>
 800ad70:	6820      	ldr	r0, [r4, #0]
 800ad72:	6829      	ldr	r1, [r5, #0]
 800ad74:	0606      	lsls	r6, r0, #24
 800ad76:	f101 0304 	add.w	r3, r1, #4
 800ad7a:	d50a      	bpl.n	800ad92 <_printf_i+0xce>
 800ad7c:	680e      	ldr	r6, [r1, #0]
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	2e00      	cmp	r6, #0
 800ad82:	da03      	bge.n	800ad8c <_printf_i+0xc8>
 800ad84:	232d      	movs	r3, #45	; 0x2d
 800ad86:	4276      	negs	r6, r6
 800ad88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad8c:	485e      	ldr	r0, [pc, #376]	; (800af08 <_printf_i+0x244>)
 800ad8e:	230a      	movs	r3, #10
 800ad90:	e019      	b.n	800adc6 <_printf_i+0x102>
 800ad92:	680e      	ldr	r6, [r1, #0]
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad9a:	bf18      	it	ne
 800ad9c:	b236      	sxthne	r6, r6
 800ad9e:	e7ef      	b.n	800ad80 <_printf_i+0xbc>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	6820      	ldr	r0, [r4, #0]
 800ada4:	1d19      	adds	r1, r3, #4
 800ada6:	6029      	str	r1, [r5, #0]
 800ada8:	0601      	lsls	r1, r0, #24
 800adaa:	d501      	bpl.n	800adb0 <_printf_i+0xec>
 800adac:	681e      	ldr	r6, [r3, #0]
 800adae:	e002      	b.n	800adb6 <_printf_i+0xf2>
 800adb0:	0646      	lsls	r6, r0, #25
 800adb2:	d5fb      	bpl.n	800adac <_printf_i+0xe8>
 800adb4:	881e      	ldrh	r6, [r3, #0]
 800adb6:	4854      	ldr	r0, [pc, #336]	; (800af08 <_printf_i+0x244>)
 800adb8:	2f6f      	cmp	r7, #111	; 0x6f
 800adba:	bf0c      	ite	eq
 800adbc:	2308      	moveq	r3, #8
 800adbe:	230a      	movne	r3, #10
 800adc0:	2100      	movs	r1, #0
 800adc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adc6:	6865      	ldr	r5, [r4, #4]
 800adc8:	60a5      	str	r5, [r4, #8]
 800adca:	2d00      	cmp	r5, #0
 800adcc:	bfa2      	ittt	ge
 800adce:	6821      	ldrge	r1, [r4, #0]
 800add0:	f021 0104 	bicge.w	r1, r1, #4
 800add4:	6021      	strge	r1, [r4, #0]
 800add6:	b90e      	cbnz	r6, 800addc <_printf_i+0x118>
 800add8:	2d00      	cmp	r5, #0
 800adda:	d04d      	beq.n	800ae78 <_printf_i+0x1b4>
 800addc:	4615      	mov	r5, r2
 800adde:	fbb6 f1f3 	udiv	r1, r6, r3
 800ade2:	fb03 6711 	mls	r7, r3, r1, r6
 800ade6:	5dc7      	ldrb	r7, [r0, r7]
 800ade8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adec:	4637      	mov	r7, r6
 800adee:	42bb      	cmp	r3, r7
 800adf0:	460e      	mov	r6, r1
 800adf2:	d9f4      	bls.n	800adde <_printf_i+0x11a>
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d10b      	bne.n	800ae10 <_printf_i+0x14c>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	07de      	lsls	r6, r3, #31
 800adfc:	d508      	bpl.n	800ae10 <_printf_i+0x14c>
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	6861      	ldr	r1, [r4, #4]
 800ae02:	4299      	cmp	r1, r3
 800ae04:	bfde      	ittt	le
 800ae06:	2330      	movle	r3, #48	; 0x30
 800ae08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae10:	1b52      	subs	r2, r2, r5
 800ae12:	6122      	str	r2, [r4, #16]
 800ae14:	f8cd a000 	str.w	sl, [sp]
 800ae18:	464b      	mov	r3, r9
 800ae1a:	aa03      	add	r2, sp, #12
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f7ff fee2 	bl	800abe8 <_printf_common>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d14c      	bne.n	800aec2 <_printf_i+0x1fe>
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	b004      	add	sp, #16
 800ae2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae32:	4835      	ldr	r0, [pc, #212]	; (800af08 <_printf_i+0x244>)
 800ae34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae38:	6829      	ldr	r1, [r5, #0]
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae40:	6029      	str	r1, [r5, #0]
 800ae42:	061d      	lsls	r5, r3, #24
 800ae44:	d514      	bpl.n	800ae70 <_printf_i+0x1ac>
 800ae46:	07df      	lsls	r7, r3, #31
 800ae48:	bf44      	itt	mi
 800ae4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae4e:	6023      	strmi	r3, [r4, #0]
 800ae50:	b91e      	cbnz	r6, 800ae5a <_printf_i+0x196>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	f023 0320 	bic.w	r3, r3, #32
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	2310      	movs	r3, #16
 800ae5c:	e7b0      	b.n	800adc0 <_printf_i+0xfc>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	f043 0320 	orr.w	r3, r3, #32
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	2378      	movs	r3, #120	; 0x78
 800ae68:	4828      	ldr	r0, [pc, #160]	; (800af0c <_printf_i+0x248>)
 800ae6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae6e:	e7e3      	b.n	800ae38 <_printf_i+0x174>
 800ae70:	0659      	lsls	r1, r3, #25
 800ae72:	bf48      	it	mi
 800ae74:	b2b6      	uxthmi	r6, r6
 800ae76:	e7e6      	b.n	800ae46 <_printf_i+0x182>
 800ae78:	4615      	mov	r5, r2
 800ae7a:	e7bb      	b.n	800adf4 <_printf_i+0x130>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	6826      	ldr	r6, [r4, #0]
 800ae80:	6961      	ldr	r1, [r4, #20]
 800ae82:	1d18      	adds	r0, r3, #4
 800ae84:	6028      	str	r0, [r5, #0]
 800ae86:	0635      	lsls	r5, r6, #24
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	d501      	bpl.n	800ae90 <_printf_i+0x1cc>
 800ae8c:	6019      	str	r1, [r3, #0]
 800ae8e:	e002      	b.n	800ae96 <_printf_i+0x1d2>
 800ae90:	0670      	lsls	r0, r6, #25
 800ae92:	d5fb      	bpl.n	800ae8c <_printf_i+0x1c8>
 800ae94:	8019      	strh	r1, [r3, #0]
 800ae96:	2300      	movs	r3, #0
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	4615      	mov	r5, r2
 800ae9c:	e7ba      	b.n	800ae14 <_printf_i+0x150>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	602a      	str	r2, [r5, #0]
 800aea4:	681d      	ldr	r5, [r3, #0]
 800aea6:	6862      	ldr	r2, [r4, #4]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7f5 f9b8 	bl	8000220 <memchr>
 800aeb0:	b108      	cbz	r0, 800aeb6 <_printf_i+0x1f2>
 800aeb2:	1b40      	subs	r0, r0, r5
 800aeb4:	6060      	str	r0, [r4, #4]
 800aeb6:	6863      	ldr	r3, [r4, #4]
 800aeb8:	6123      	str	r3, [r4, #16]
 800aeba:	2300      	movs	r3, #0
 800aebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aec0:	e7a8      	b.n	800ae14 <_printf_i+0x150>
 800aec2:	6923      	ldr	r3, [r4, #16]
 800aec4:	462a      	mov	r2, r5
 800aec6:	4649      	mov	r1, r9
 800aec8:	4640      	mov	r0, r8
 800aeca:	47d0      	blx	sl
 800aecc:	3001      	adds	r0, #1
 800aece:	d0ab      	beq.n	800ae28 <_printf_i+0x164>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	079b      	lsls	r3, r3, #30
 800aed4:	d413      	bmi.n	800aefe <_printf_i+0x23a>
 800aed6:	68e0      	ldr	r0, [r4, #12]
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	4298      	cmp	r0, r3
 800aedc:	bfb8      	it	lt
 800aede:	4618      	movlt	r0, r3
 800aee0:	e7a4      	b.n	800ae2c <_printf_i+0x168>
 800aee2:	2301      	movs	r3, #1
 800aee4:	4632      	mov	r2, r6
 800aee6:	4649      	mov	r1, r9
 800aee8:	4640      	mov	r0, r8
 800aeea:	47d0      	blx	sl
 800aeec:	3001      	adds	r0, #1
 800aeee:	d09b      	beq.n	800ae28 <_printf_i+0x164>
 800aef0:	3501      	adds	r5, #1
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	9903      	ldr	r1, [sp, #12]
 800aef6:	1a5b      	subs	r3, r3, r1
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dcf2      	bgt.n	800aee2 <_printf_i+0x21e>
 800aefc:	e7eb      	b.n	800aed6 <_printf_i+0x212>
 800aefe:	2500      	movs	r5, #0
 800af00:	f104 0619 	add.w	r6, r4, #25
 800af04:	e7f5      	b.n	800aef2 <_printf_i+0x22e>
 800af06:	bf00      	nop
 800af08:	0800e0a2 	.word	0x0800e0a2
 800af0c:	0800e0b3 	.word	0x0800e0b3

0800af10 <siprintf>:
 800af10:	b40e      	push	{r1, r2, r3}
 800af12:	b500      	push	{lr}
 800af14:	b09c      	sub	sp, #112	; 0x70
 800af16:	ab1d      	add	r3, sp, #116	; 0x74
 800af18:	9002      	str	r0, [sp, #8]
 800af1a:	9006      	str	r0, [sp, #24]
 800af1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af20:	4809      	ldr	r0, [pc, #36]	; (800af48 <siprintf+0x38>)
 800af22:	9107      	str	r1, [sp, #28]
 800af24:	9104      	str	r1, [sp, #16]
 800af26:	4909      	ldr	r1, [pc, #36]	; (800af4c <siprintf+0x3c>)
 800af28:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2c:	9105      	str	r1, [sp, #20]
 800af2e:	6800      	ldr	r0, [r0, #0]
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	a902      	add	r1, sp, #8
 800af34:	f001 fb68 	bl	800c608 <_svfiprintf_r>
 800af38:	9b02      	ldr	r3, [sp, #8]
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	b01c      	add	sp, #112	; 0x70
 800af40:	f85d eb04 	ldr.w	lr, [sp], #4
 800af44:	b003      	add	sp, #12
 800af46:	4770      	bx	lr
 800af48:	20000014 	.word	0x20000014
 800af4c:	ffff0208 	.word	0xffff0208

0800af50 <quorem>:
 800af50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	6903      	ldr	r3, [r0, #16]
 800af56:	690c      	ldr	r4, [r1, #16]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	4607      	mov	r7, r0
 800af5c:	f2c0 8081 	blt.w	800b062 <quorem+0x112>
 800af60:	3c01      	subs	r4, #1
 800af62:	f101 0814 	add.w	r8, r1, #20
 800af66:	f100 0514 	add.w	r5, r0, #20
 800af6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af78:	3301      	adds	r3, #1
 800af7a:	429a      	cmp	r2, r3
 800af7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af84:	fbb2 f6f3 	udiv	r6, r2, r3
 800af88:	d331      	bcc.n	800afee <quorem+0x9e>
 800af8a:	f04f 0e00 	mov.w	lr, #0
 800af8e:	4640      	mov	r0, r8
 800af90:	46ac      	mov	ip, r5
 800af92:	46f2      	mov	sl, lr
 800af94:	f850 2b04 	ldr.w	r2, [r0], #4
 800af98:	b293      	uxth	r3, r2
 800af9a:	fb06 e303 	mla	r3, r6, r3, lr
 800af9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	ebaa 0303 	sub.w	r3, sl, r3
 800afa8:	f8dc a000 	ldr.w	sl, [ip]
 800afac:	0c12      	lsrs	r2, r2, #16
 800afae:	fa13 f38a 	uxtah	r3, r3, sl
 800afb2:	fb06 e202 	mla	r2, r6, r2, lr
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	9b00      	ldr	r3, [sp, #0]
 800afba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afbe:	b292      	uxth	r2, r2
 800afc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afc8:	f8bd 3000 	ldrh.w	r3, [sp]
 800afcc:	4581      	cmp	r9, r0
 800afce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afd2:	f84c 3b04 	str.w	r3, [ip], #4
 800afd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afda:	d2db      	bcs.n	800af94 <quorem+0x44>
 800afdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800afe0:	b92b      	cbnz	r3, 800afee <quorem+0x9e>
 800afe2:	9b01      	ldr	r3, [sp, #4]
 800afe4:	3b04      	subs	r3, #4
 800afe6:	429d      	cmp	r5, r3
 800afe8:	461a      	mov	r2, r3
 800afea:	d32e      	bcc.n	800b04a <quorem+0xfa>
 800afec:	613c      	str	r4, [r7, #16]
 800afee:	4638      	mov	r0, r7
 800aff0:	f001 f8b6 	bl	800c160 <__mcmp>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	db24      	blt.n	800b042 <quorem+0xf2>
 800aff8:	3601      	adds	r6, #1
 800affa:	4628      	mov	r0, r5
 800affc:	f04f 0c00 	mov.w	ip, #0
 800b000:	f858 2b04 	ldr.w	r2, [r8], #4
 800b004:	f8d0 e000 	ldr.w	lr, [r0]
 800b008:	b293      	uxth	r3, r2
 800b00a:	ebac 0303 	sub.w	r3, ip, r3
 800b00e:	0c12      	lsrs	r2, r2, #16
 800b010:	fa13 f38e 	uxtah	r3, r3, lr
 800b014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b022:	45c1      	cmp	r9, r8
 800b024:	f840 3b04 	str.w	r3, [r0], #4
 800b028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b02c:	d2e8      	bcs.n	800b000 <quorem+0xb0>
 800b02e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b036:	b922      	cbnz	r2, 800b042 <quorem+0xf2>
 800b038:	3b04      	subs	r3, #4
 800b03a:	429d      	cmp	r5, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	d30a      	bcc.n	800b056 <quorem+0x106>
 800b040:	613c      	str	r4, [r7, #16]
 800b042:	4630      	mov	r0, r6
 800b044:	b003      	add	sp, #12
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	6812      	ldr	r2, [r2, #0]
 800b04c:	3b04      	subs	r3, #4
 800b04e:	2a00      	cmp	r2, #0
 800b050:	d1cc      	bne.n	800afec <quorem+0x9c>
 800b052:	3c01      	subs	r4, #1
 800b054:	e7c7      	b.n	800afe6 <quorem+0x96>
 800b056:	6812      	ldr	r2, [r2, #0]
 800b058:	3b04      	subs	r3, #4
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	d1f0      	bne.n	800b040 <quorem+0xf0>
 800b05e:	3c01      	subs	r4, #1
 800b060:	e7eb      	b.n	800b03a <quorem+0xea>
 800b062:	2000      	movs	r0, #0
 800b064:	e7ee      	b.n	800b044 <quorem+0xf4>
	...

0800b068 <_dtoa_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	ed2d 8b04 	vpush	{d8-d9}
 800b070:	ec57 6b10 	vmov	r6, r7, d0
 800b074:	b093      	sub	sp, #76	; 0x4c
 800b076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b07c:	9106      	str	r1, [sp, #24]
 800b07e:	ee10 aa10 	vmov	sl, s0
 800b082:	4604      	mov	r4, r0
 800b084:	9209      	str	r2, [sp, #36]	; 0x24
 800b086:	930c      	str	r3, [sp, #48]	; 0x30
 800b088:	46bb      	mov	fp, r7
 800b08a:	b975      	cbnz	r5, 800b0aa <_dtoa_r+0x42>
 800b08c:	2010      	movs	r0, #16
 800b08e:	f000 fddd 	bl	800bc4c <malloc>
 800b092:	4602      	mov	r2, r0
 800b094:	6260      	str	r0, [r4, #36]	; 0x24
 800b096:	b920      	cbnz	r0, 800b0a2 <_dtoa_r+0x3a>
 800b098:	4ba7      	ldr	r3, [pc, #668]	; (800b338 <_dtoa_r+0x2d0>)
 800b09a:	21ea      	movs	r1, #234	; 0xea
 800b09c:	48a7      	ldr	r0, [pc, #668]	; (800b33c <_dtoa_r+0x2d4>)
 800b09e:	f001 fbc3 	bl	800c828 <__assert_func>
 800b0a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0a6:	6005      	str	r5, [r0, #0]
 800b0a8:	60c5      	str	r5, [r0, #12]
 800b0aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ac:	6819      	ldr	r1, [r3, #0]
 800b0ae:	b151      	cbz	r1, 800b0c6 <_dtoa_r+0x5e>
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	604a      	str	r2, [r1, #4]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4093      	lsls	r3, r2
 800b0b8:	608b      	str	r3, [r1, #8]
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 fe0e 	bl	800bcdc <_Bfree>
 800b0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	1e3b      	subs	r3, r7, #0
 800b0c8:	bfaa      	itet	ge
 800b0ca:	2300      	movge	r3, #0
 800b0cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b0d0:	f8c8 3000 	strge.w	r3, [r8]
 800b0d4:	4b9a      	ldr	r3, [pc, #616]	; (800b340 <_dtoa_r+0x2d8>)
 800b0d6:	bfbc      	itt	lt
 800b0d8:	2201      	movlt	r2, #1
 800b0da:	f8c8 2000 	strlt.w	r2, [r8]
 800b0de:	ea33 030b 	bics.w	r3, r3, fp
 800b0e2:	d11b      	bne.n	800b11c <_dtoa_r+0xb4>
 800b0e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0f0:	4333      	orrs	r3, r6
 800b0f2:	f000 8592 	beq.w	800bc1a <_dtoa_r+0xbb2>
 800b0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f8:	b963      	cbnz	r3, 800b114 <_dtoa_r+0xac>
 800b0fa:	4b92      	ldr	r3, [pc, #584]	; (800b344 <_dtoa_r+0x2dc>)
 800b0fc:	e022      	b.n	800b144 <_dtoa_r+0xdc>
 800b0fe:	4b92      	ldr	r3, [pc, #584]	; (800b348 <_dtoa_r+0x2e0>)
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	3308      	adds	r3, #8
 800b104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	9801      	ldr	r0, [sp, #4]
 800b10a:	b013      	add	sp, #76	; 0x4c
 800b10c:	ecbd 8b04 	vpop	{d8-d9}
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	4b8b      	ldr	r3, [pc, #556]	; (800b344 <_dtoa_r+0x2dc>)
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	3303      	adds	r3, #3
 800b11a:	e7f3      	b.n	800b104 <_dtoa_r+0x9c>
 800b11c:	2200      	movs	r2, #0
 800b11e:	2300      	movs	r3, #0
 800b120:	4650      	mov	r0, sl
 800b122:	4659      	mov	r1, fp
 800b124:	f7f5 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 800b128:	ec4b ab19 	vmov	d9, sl, fp
 800b12c:	4680      	mov	r8, r0
 800b12e:	b158      	cbz	r0, 800b148 <_dtoa_r+0xe0>
 800b130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b132:	2301      	movs	r3, #1
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 856b 	beq.w	800bc14 <_dtoa_r+0xbac>
 800b13e:	4883      	ldr	r0, [pc, #524]	; (800b34c <_dtoa_r+0x2e4>)
 800b140:	6018      	str	r0, [r3, #0]
 800b142:	1e43      	subs	r3, r0, #1
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	e7df      	b.n	800b108 <_dtoa_r+0xa0>
 800b148:	ec4b ab10 	vmov	d0, sl, fp
 800b14c:	aa10      	add	r2, sp, #64	; 0x40
 800b14e:	a911      	add	r1, sp, #68	; 0x44
 800b150:	4620      	mov	r0, r4
 800b152:	f001 f8ab 	bl	800c2ac <__d2b>
 800b156:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b15a:	ee08 0a10 	vmov	s16, r0
 800b15e:	2d00      	cmp	r5, #0
 800b160:	f000 8084 	beq.w	800b26c <_dtoa_r+0x204>
 800b164:	ee19 3a90 	vmov	r3, s19
 800b168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b16c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b170:	4656      	mov	r6, sl
 800b172:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b17a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b17e:	4b74      	ldr	r3, [pc, #464]	; (800b350 <_dtoa_r+0x2e8>)
 800b180:	2200      	movs	r2, #0
 800b182:	4630      	mov	r0, r6
 800b184:	4639      	mov	r1, r7
 800b186:	f7f5 f89f 	bl	80002c8 <__aeabi_dsub>
 800b18a:	a365      	add	r3, pc, #404	; (adr r3, 800b320 <_dtoa_r+0x2b8>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 fa52 	bl	8000638 <__aeabi_dmul>
 800b194:	a364      	add	r3, pc, #400	; (adr r3, 800b328 <_dtoa_r+0x2c0>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f5 f897 	bl	80002cc <__adddf3>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	460f      	mov	r7, r1
 800b1a4:	f7f5 f9de 	bl	8000564 <__aeabi_i2d>
 800b1a8:	a361      	add	r3, pc, #388	; (adr r3, 800b330 <_dtoa_r+0x2c8>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 fa43 	bl	8000638 <__aeabi_dmul>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 f887 	bl	80002cc <__adddf3>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	f7f5 fce9 	bl	8000b98 <__aeabi_d2iz>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	9000      	str	r0, [sp, #0]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	4639      	mov	r1, r7
 800b1d0:	f7f5 fca4 	bl	8000b1c <__aeabi_dcmplt>
 800b1d4:	b150      	cbz	r0, 800b1ec <_dtoa_r+0x184>
 800b1d6:	9800      	ldr	r0, [sp, #0]
 800b1d8:	f7f5 f9c4 	bl	8000564 <__aeabi_i2d>
 800b1dc:	4632      	mov	r2, r6
 800b1de:	463b      	mov	r3, r7
 800b1e0:	f7f5 fc92 	bl	8000b08 <__aeabi_dcmpeq>
 800b1e4:	b910      	cbnz	r0, 800b1ec <_dtoa_r+0x184>
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	2b16      	cmp	r3, #22
 800b1f0:	d85a      	bhi.n	800b2a8 <_dtoa_r+0x240>
 800b1f2:	9a00      	ldr	r2, [sp, #0]
 800b1f4:	4b57      	ldr	r3, [pc, #348]	; (800b354 <_dtoa_r+0x2ec>)
 800b1f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	ec51 0b19 	vmov	r0, r1, d9
 800b202:	f7f5 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 800b206:	2800      	cmp	r0, #0
 800b208:	d050      	beq.n	800b2ac <_dtoa_r+0x244>
 800b20a:	9b00      	ldr	r3, [sp, #0]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	2300      	movs	r3, #0
 800b212:	930b      	str	r3, [sp, #44]	; 0x2c
 800b214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b216:	1b5d      	subs	r5, r3, r5
 800b218:	1e6b      	subs	r3, r5, #1
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	bf45      	ittet	mi
 800b21e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b222:	9304      	strmi	r3, [sp, #16]
 800b224:	2300      	movpl	r3, #0
 800b226:	2300      	movmi	r3, #0
 800b228:	bf4c      	ite	mi
 800b22a:	9305      	strmi	r3, [sp, #20]
 800b22c:	9304      	strpl	r3, [sp, #16]
 800b22e:	9b00      	ldr	r3, [sp, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db3d      	blt.n	800b2b0 <_dtoa_r+0x248>
 800b234:	9b05      	ldr	r3, [sp, #20]
 800b236:	9a00      	ldr	r2, [sp, #0]
 800b238:	920a      	str	r2, [sp, #40]	; 0x28
 800b23a:	4413      	add	r3, r2
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	2300      	movs	r3, #0
 800b240:	9307      	str	r3, [sp, #28]
 800b242:	9b06      	ldr	r3, [sp, #24]
 800b244:	2b09      	cmp	r3, #9
 800b246:	f200 8089 	bhi.w	800b35c <_dtoa_r+0x2f4>
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	bfc4      	itt	gt
 800b24e:	3b04      	subgt	r3, #4
 800b250:	9306      	strgt	r3, [sp, #24]
 800b252:	9b06      	ldr	r3, [sp, #24]
 800b254:	f1a3 0302 	sub.w	r3, r3, #2
 800b258:	bfcc      	ite	gt
 800b25a:	2500      	movgt	r5, #0
 800b25c:	2501      	movle	r5, #1
 800b25e:	2b03      	cmp	r3, #3
 800b260:	f200 8087 	bhi.w	800b372 <_dtoa_r+0x30a>
 800b264:	e8df f003 	tbb	[pc, r3]
 800b268:	59383a2d 	.word	0x59383a2d
 800b26c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b270:	441d      	add	r5, r3
 800b272:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b276:	2b20      	cmp	r3, #32
 800b278:	bfc1      	itttt	gt
 800b27a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b27e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b282:	fa0b f303 	lslgt.w	r3, fp, r3
 800b286:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b28a:	bfda      	itte	le
 800b28c:	f1c3 0320 	rsble	r3, r3, #32
 800b290:	fa06 f003 	lslle.w	r0, r6, r3
 800b294:	4318      	orrgt	r0, r3
 800b296:	f7f5 f955 	bl	8000544 <__aeabi_ui2d>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4606      	mov	r6, r0
 800b29e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2a2:	3d01      	subs	r5, #1
 800b2a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2a6:	e76a      	b.n	800b17e <_dtoa_r+0x116>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e7b2      	b.n	800b212 <_dtoa_r+0x1aa>
 800b2ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2ae:	e7b1      	b.n	800b214 <_dtoa_r+0x1ac>
 800b2b0:	9b04      	ldr	r3, [sp, #16]
 800b2b2:	9a00      	ldr	r2, [sp, #0]
 800b2b4:	1a9b      	subs	r3, r3, r2
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	4253      	negs	r3, r2
 800b2ba:	9307      	str	r3, [sp, #28]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	930a      	str	r3, [sp, #40]	; 0x28
 800b2c0:	e7bf      	b.n	800b242 <_dtoa_r+0x1da>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	9308      	str	r3, [sp, #32]
 800b2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	dc55      	bgt.n	800b378 <_dtoa_r+0x310>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2d6:	e00c      	b.n	800b2f2 <_dtoa_r+0x28a>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e7f3      	b.n	800b2c4 <_dtoa_r+0x25c>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e0:	9308      	str	r3, [sp, #32]
 800b2e2:	9b00      	ldr	r3, [sp, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	9302      	str	r3, [sp, #8]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	bfb8      	it	lt
 800b2f0:	2301      	movlt	r3, #1
 800b2f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	6042      	str	r2, [r0, #4]
 800b2f8:	2204      	movs	r2, #4
 800b2fa:	f102 0614 	add.w	r6, r2, #20
 800b2fe:	429e      	cmp	r6, r3
 800b300:	6841      	ldr	r1, [r0, #4]
 800b302:	d93d      	bls.n	800b380 <_dtoa_r+0x318>
 800b304:	4620      	mov	r0, r4
 800b306:	f000 fca9 	bl	800bc5c <_Balloc>
 800b30a:	9001      	str	r0, [sp, #4]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d13b      	bne.n	800b388 <_dtoa_r+0x320>
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <_dtoa_r+0x2f0>)
 800b312:	4602      	mov	r2, r0
 800b314:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b318:	e6c0      	b.n	800b09c <_dtoa_r+0x34>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e7df      	b.n	800b2de <_dtoa_r+0x276>
 800b31e:	bf00      	nop
 800b320:	636f4361 	.word	0x636f4361
 800b324:	3fd287a7 	.word	0x3fd287a7
 800b328:	8b60c8b3 	.word	0x8b60c8b3
 800b32c:	3fc68a28 	.word	0x3fc68a28
 800b330:	509f79fb 	.word	0x509f79fb
 800b334:	3fd34413 	.word	0x3fd34413
 800b338:	0800e0d1 	.word	0x0800e0d1
 800b33c:	0800e0e8 	.word	0x0800e0e8
 800b340:	7ff00000 	.word	0x7ff00000
 800b344:	0800e0cd 	.word	0x0800e0cd
 800b348:	0800e0c4 	.word	0x0800e0c4
 800b34c:	0800e0a1 	.word	0x0800e0a1
 800b350:	3ff80000 	.word	0x3ff80000
 800b354:	0800e1d8 	.word	0x0800e1d8
 800b358:	0800e143 	.word	0x0800e143
 800b35c:	2501      	movs	r5, #1
 800b35e:	2300      	movs	r3, #0
 800b360:	9306      	str	r3, [sp, #24]
 800b362:	9508      	str	r5, [sp, #32]
 800b364:	f04f 33ff 	mov.w	r3, #4294967295
 800b368:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b36c:	2200      	movs	r2, #0
 800b36e:	2312      	movs	r3, #18
 800b370:	e7b0      	b.n	800b2d4 <_dtoa_r+0x26c>
 800b372:	2301      	movs	r3, #1
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	e7f5      	b.n	800b364 <_dtoa_r+0x2fc>
 800b378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b37e:	e7b8      	b.n	800b2f2 <_dtoa_r+0x28a>
 800b380:	3101      	adds	r1, #1
 800b382:	6041      	str	r1, [r0, #4]
 800b384:	0052      	lsls	r2, r2, #1
 800b386:	e7b8      	b.n	800b2fa <_dtoa_r+0x292>
 800b388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38a:	9a01      	ldr	r2, [sp, #4]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	9b03      	ldr	r3, [sp, #12]
 800b390:	2b0e      	cmp	r3, #14
 800b392:	f200 809d 	bhi.w	800b4d0 <_dtoa_r+0x468>
 800b396:	2d00      	cmp	r5, #0
 800b398:	f000 809a 	beq.w	800b4d0 <_dtoa_r+0x468>
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	dd32      	ble.n	800b408 <_dtoa_r+0x3a0>
 800b3a2:	4ab7      	ldr	r2, [pc, #732]	; (800b680 <_dtoa_r+0x618>)
 800b3a4:	f003 030f 	and.w	r3, r3, #15
 800b3a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3b0:	9b00      	ldr	r3, [sp, #0]
 800b3b2:	05d8      	lsls	r0, r3, #23
 800b3b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b3b8:	d516      	bpl.n	800b3e8 <_dtoa_r+0x380>
 800b3ba:	4bb2      	ldr	r3, [pc, #712]	; (800b684 <_dtoa_r+0x61c>)
 800b3bc:	ec51 0b19 	vmov	r0, r1, d9
 800b3c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3c4:	f7f5 fa62 	bl	800088c <__aeabi_ddiv>
 800b3c8:	f007 070f 	and.w	r7, r7, #15
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	468b      	mov	fp, r1
 800b3d0:	2503      	movs	r5, #3
 800b3d2:	4eac      	ldr	r6, [pc, #688]	; (800b684 <_dtoa_r+0x61c>)
 800b3d4:	b957      	cbnz	r7, 800b3ec <_dtoa_r+0x384>
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	4650      	mov	r0, sl
 800b3dc:	4659      	mov	r1, fp
 800b3de:	f7f5 fa55 	bl	800088c <__aeabi_ddiv>
 800b3e2:	4682      	mov	sl, r0
 800b3e4:	468b      	mov	fp, r1
 800b3e6:	e028      	b.n	800b43a <_dtoa_r+0x3d2>
 800b3e8:	2502      	movs	r5, #2
 800b3ea:	e7f2      	b.n	800b3d2 <_dtoa_r+0x36a>
 800b3ec:	07f9      	lsls	r1, r7, #31
 800b3ee:	d508      	bpl.n	800b402 <_dtoa_r+0x39a>
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3f8:	f7f5 f91e 	bl	8000638 <__aeabi_dmul>
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	4680      	mov	r8, r0
 800b400:	4689      	mov	r9, r1
 800b402:	107f      	asrs	r7, r7, #1
 800b404:	3608      	adds	r6, #8
 800b406:	e7e5      	b.n	800b3d4 <_dtoa_r+0x36c>
 800b408:	f000 809b 	beq.w	800b542 <_dtoa_r+0x4da>
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	4f9d      	ldr	r7, [pc, #628]	; (800b684 <_dtoa_r+0x61c>)
 800b410:	425e      	negs	r6, r3
 800b412:	4b9b      	ldr	r3, [pc, #620]	; (800b680 <_dtoa_r+0x618>)
 800b414:	f006 020f 	and.w	r2, r6, #15
 800b418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	ec51 0b19 	vmov	r0, r1, d9
 800b424:	f7f5 f908 	bl	8000638 <__aeabi_dmul>
 800b428:	1136      	asrs	r6, r6, #4
 800b42a:	4682      	mov	sl, r0
 800b42c:	468b      	mov	fp, r1
 800b42e:	2300      	movs	r3, #0
 800b430:	2502      	movs	r5, #2
 800b432:	2e00      	cmp	r6, #0
 800b434:	d17a      	bne.n	800b52c <_dtoa_r+0x4c4>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1d3      	bne.n	800b3e2 <_dtoa_r+0x37a>
 800b43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8082 	beq.w	800b546 <_dtoa_r+0x4de>
 800b442:	4b91      	ldr	r3, [pc, #580]	; (800b688 <_dtoa_r+0x620>)
 800b444:	2200      	movs	r2, #0
 800b446:	4650      	mov	r0, sl
 800b448:	4659      	mov	r1, fp
 800b44a:	f7f5 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d079      	beq.n	800b546 <_dtoa_r+0x4de>
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d076      	beq.n	800b546 <_dtoa_r+0x4de>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	dd36      	ble.n	800b4cc <_dtoa_r+0x464>
 800b45e:	9b00      	ldr	r3, [sp, #0]
 800b460:	4650      	mov	r0, sl
 800b462:	4659      	mov	r1, fp
 800b464:	1e5f      	subs	r7, r3, #1
 800b466:	2200      	movs	r2, #0
 800b468:	4b88      	ldr	r3, [pc, #544]	; (800b68c <_dtoa_r+0x624>)
 800b46a:	f7f5 f8e5 	bl	8000638 <__aeabi_dmul>
 800b46e:	9e02      	ldr	r6, [sp, #8]
 800b470:	4682      	mov	sl, r0
 800b472:	468b      	mov	fp, r1
 800b474:	3501      	adds	r5, #1
 800b476:	4628      	mov	r0, r5
 800b478:	f7f5 f874 	bl	8000564 <__aeabi_i2d>
 800b47c:	4652      	mov	r2, sl
 800b47e:	465b      	mov	r3, fp
 800b480:	f7f5 f8da 	bl	8000638 <__aeabi_dmul>
 800b484:	4b82      	ldr	r3, [pc, #520]	; (800b690 <_dtoa_r+0x628>)
 800b486:	2200      	movs	r2, #0
 800b488:	f7f4 ff20 	bl	80002cc <__adddf3>
 800b48c:	46d0      	mov	r8, sl
 800b48e:	46d9      	mov	r9, fp
 800b490:	4682      	mov	sl, r0
 800b492:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b496:	2e00      	cmp	r6, #0
 800b498:	d158      	bne.n	800b54c <_dtoa_r+0x4e4>
 800b49a:	4b7e      	ldr	r3, [pc, #504]	; (800b694 <_dtoa_r+0x62c>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f4 ff11 	bl	80002c8 <__aeabi_dsub>
 800b4a6:	4652      	mov	r2, sl
 800b4a8:	465b      	mov	r3, fp
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4689      	mov	r9, r1
 800b4ae:	f7f5 fb53 	bl	8000b58 <__aeabi_dcmpgt>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f040 8295 	bne.w	800b9e2 <_dtoa_r+0x97a>
 800b4b8:	4652      	mov	r2, sl
 800b4ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	f7f5 fb2b 	bl	8000b1c <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f040 8289 	bne.w	800b9de <_dtoa_r+0x976>
 800b4cc:	ec5b ab19 	vmov	sl, fp, d9
 800b4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f2c0 8148 	blt.w	800b768 <_dtoa_r+0x700>
 800b4d8:	9a00      	ldr	r2, [sp, #0]
 800b4da:	2a0e      	cmp	r2, #14
 800b4dc:	f300 8144 	bgt.w	800b768 <_dtoa_r+0x700>
 800b4e0:	4b67      	ldr	r3, [pc, #412]	; (800b680 <_dtoa_r+0x618>)
 800b4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f280 80d5 	bge.w	800b69c <_dtoa_r+0x634>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f300 80d1 	bgt.w	800b69c <_dtoa_r+0x634>
 800b4fa:	f040 826f 	bne.w	800b9dc <_dtoa_r+0x974>
 800b4fe:	4b65      	ldr	r3, [pc, #404]	; (800b694 <_dtoa_r+0x62c>)
 800b500:	2200      	movs	r2, #0
 800b502:	4640      	mov	r0, r8
 800b504:	4649      	mov	r1, r9
 800b506:	f7f5 f897 	bl	8000638 <__aeabi_dmul>
 800b50a:	4652      	mov	r2, sl
 800b50c:	465b      	mov	r3, fp
 800b50e:	f7f5 fb19 	bl	8000b44 <__aeabi_dcmpge>
 800b512:	9e03      	ldr	r6, [sp, #12]
 800b514:	4637      	mov	r7, r6
 800b516:	2800      	cmp	r0, #0
 800b518:	f040 8245 	bne.w	800b9a6 <_dtoa_r+0x93e>
 800b51c:	9d01      	ldr	r5, [sp, #4]
 800b51e:	2331      	movs	r3, #49	; 0x31
 800b520:	f805 3b01 	strb.w	r3, [r5], #1
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	3301      	adds	r3, #1
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	e240      	b.n	800b9ae <_dtoa_r+0x946>
 800b52c:	07f2      	lsls	r2, r6, #31
 800b52e:	d505      	bpl.n	800b53c <_dtoa_r+0x4d4>
 800b530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b534:	f7f5 f880 	bl	8000638 <__aeabi_dmul>
 800b538:	3501      	adds	r5, #1
 800b53a:	2301      	movs	r3, #1
 800b53c:	1076      	asrs	r6, r6, #1
 800b53e:	3708      	adds	r7, #8
 800b540:	e777      	b.n	800b432 <_dtoa_r+0x3ca>
 800b542:	2502      	movs	r5, #2
 800b544:	e779      	b.n	800b43a <_dtoa_r+0x3d2>
 800b546:	9f00      	ldr	r7, [sp, #0]
 800b548:	9e03      	ldr	r6, [sp, #12]
 800b54a:	e794      	b.n	800b476 <_dtoa_r+0x40e>
 800b54c:	9901      	ldr	r1, [sp, #4]
 800b54e:	4b4c      	ldr	r3, [pc, #304]	; (800b680 <_dtoa_r+0x618>)
 800b550:	4431      	add	r1, r6
 800b552:	910d      	str	r1, [sp, #52]	; 0x34
 800b554:	9908      	ldr	r1, [sp, #32]
 800b556:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b55a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b55e:	2900      	cmp	r1, #0
 800b560:	d043      	beq.n	800b5ea <_dtoa_r+0x582>
 800b562:	494d      	ldr	r1, [pc, #308]	; (800b698 <_dtoa_r+0x630>)
 800b564:	2000      	movs	r0, #0
 800b566:	f7f5 f991 	bl	800088c <__aeabi_ddiv>
 800b56a:	4652      	mov	r2, sl
 800b56c:	465b      	mov	r3, fp
 800b56e:	f7f4 feab 	bl	80002c8 <__aeabi_dsub>
 800b572:	9d01      	ldr	r5, [sp, #4]
 800b574:	4682      	mov	sl, r0
 800b576:	468b      	mov	fp, r1
 800b578:	4649      	mov	r1, r9
 800b57a:	4640      	mov	r0, r8
 800b57c:	f7f5 fb0c 	bl	8000b98 <__aeabi_d2iz>
 800b580:	4606      	mov	r6, r0
 800b582:	f7f4 ffef 	bl	8000564 <__aeabi_i2d>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	3630      	adds	r6, #48	; 0x30
 800b594:	f805 6b01 	strb.w	r6, [r5], #1
 800b598:	4652      	mov	r2, sl
 800b59a:	465b      	mov	r3, fp
 800b59c:	4680      	mov	r8, r0
 800b59e:	4689      	mov	r9, r1
 800b5a0:	f7f5 fabc 	bl	8000b1c <__aeabi_dcmplt>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d163      	bne.n	800b670 <_dtoa_r+0x608>
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	4936      	ldr	r1, [pc, #216]	; (800b688 <_dtoa_r+0x620>)
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	f7f4 fe8a 	bl	80002c8 <__aeabi_dsub>
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	f7f5 fab0 	bl	8000b1c <__aeabi_dcmplt>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f040 80b5 	bne.w	800b72c <_dtoa_r+0x6c4>
 800b5c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5c4:	429d      	cmp	r5, r3
 800b5c6:	d081      	beq.n	800b4cc <_dtoa_r+0x464>
 800b5c8:	4b30      	ldr	r3, [pc, #192]	; (800b68c <_dtoa_r+0x624>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4650      	mov	r0, sl
 800b5ce:	4659      	mov	r1, fp
 800b5d0:	f7f5 f832 	bl	8000638 <__aeabi_dmul>
 800b5d4:	4b2d      	ldr	r3, [pc, #180]	; (800b68c <_dtoa_r+0x624>)
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	468b      	mov	fp, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f7f5 f82a 	bl	8000638 <__aeabi_dmul>
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	4689      	mov	r9, r1
 800b5e8:	e7c6      	b.n	800b578 <_dtoa_r+0x510>
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	4659      	mov	r1, fp
 800b5ee:	f7f5 f823 	bl	8000638 <__aeabi_dmul>
 800b5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5f4:	9d01      	ldr	r5, [sp, #4]
 800b5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	468b      	mov	fp, r1
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	4640      	mov	r0, r8
 800b600:	f7f5 faca 	bl	8000b98 <__aeabi_d2iz>
 800b604:	4606      	mov	r6, r0
 800b606:	f7f4 ffad 	bl	8000564 <__aeabi_i2d>
 800b60a:	3630      	adds	r6, #48	; 0x30
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	4640      	mov	r0, r8
 800b612:	4649      	mov	r1, r9
 800b614:	f7f4 fe58 	bl	80002c8 <__aeabi_dsub>
 800b618:	f805 6b01 	strb.w	r6, [r5], #1
 800b61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b61e:	429d      	cmp	r5, r3
 800b620:	4680      	mov	r8, r0
 800b622:	4689      	mov	r9, r1
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	d124      	bne.n	800b674 <_dtoa_r+0x60c>
 800b62a:	4b1b      	ldr	r3, [pc, #108]	; (800b698 <_dtoa_r+0x630>)
 800b62c:	4650      	mov	r0, sl
 800b62e:	4659      	mov	r1, fp
 800b630:	f7f4 fe4c 	bl	80002cc <__adddf3>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4640      	mov	r0, r8
 800b63a:	4649      	mov	r1, r9
 800b63c:	f7f5 fa8c 	bl	8000b58 <__aeabi_dcmpgt>
 800b640:	2800      	cmp	r0, #0
 800b642:	d173      	bne.n	800b72c <_dtoa_r+0x6c4>
 800b644:	4652      	mov	r2, sl
 800b646:	465b      	mov	r3, fp
 800b648:	4913      	ldr	r1, [pc, #76]	; (800b698 <_dtoa_r+0x630>)
 800b64a:	2000      	movs	r0, #0
 800b64c:	f7f4 fe3c 	bl	80002c8 <__aeabi_dsub>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f5 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	f43f af35 	beq.w	800b4cc <_dtoa_r+0x464>
 800b662:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b664:	1e6b      	subs	r3, r5, #1
 800b666:	930f      	str	r3, [sp, #60]	; 0x3c
 800b668:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b66c:	2b30      	cmp	r3, #48	; 0x30
 800b66e:	d0f8      	beq.n	800b662 <_dtoa_r+0x5fa>
 800b670:	9700      	str	r7, [sp, #0]
 800b672:	e049      	b.n	800b708 <_dtoa_r+0x6a0>
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <_dtoa_r+0x624>)
 800b676:	f7f4 ffdf 	bl	8000638 <__aeabi_dmul>
 800b67a:	4680      	mov	r8, r0
 800b67c:	4689      	mov	r9, r1
 800b67e:	e7bd      	b.n	800b5fc <_dtoa_r+0x594>
 800b680:	0800e1d8 	.word	0x0800e1d8
 800b684:	0800e1b0 	.word	0x0800e1b0
 800b688:	3ff00000 	.word	0x3ff00000
 800b68c:	40240000 	.word	0x40240000
 800b690:	401c0000 	.word	0x401c0000
 800b694:	40140000 	.word	0x40140000
 800b698:	3fe00000 	.word	0x3fe00000
 800b69c:	9d01      	ldr	r5, [sp, #4]
 800b69e:	4656      	mov	r6, sl
 800b6a0:	465f      	mov	r7, fp
 800b6a2:	4642      	mov	r2, r8
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f5 f8ef 	bl	800088c <__aeabi_ddiv>
 800b6ae:	f7f5 fa73 	bl	8000b98 <__aeabi_d2iz>
 800b6b2:	4682      	mov	sl, r0
 800b6b4:	f7f4 ff56 	bl	8000564 <__aeabi_i2d>
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	464b      	mov	r3, r9
 800b6bc:	f7f4 ffbc 	bl	8000638 <__aeabi_dmul>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b6cc:	f7f4 fdfc 	bl	80002c8 <__aeabi_dsub>
 800b6d0:	f805 6b01 	strb.w	r6, [r5], #1
 800b6d4:	9e01      	ldr	r6, [sp, #4]
 800b6d6:	9f03      	ldr	r7, [sp, #12]
 800b6d8:	1bae      	subs	r6, r5, r6
 800b6da:	42b7      	cmp	r7, r6
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	d135      	bne.n	800b74e <_dtoa_r+0x6e6>
 800b6e2:	f7f4 fdf3 	bl	80002cc <__adddf3>
 800b6e6:	4642      	mov	r2, r8
 800b6e8:	464b      	mov	r3, r9
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460f      	mov	r7, r1
 800b6ee:	f7f5 fa33 	bl	8000b58 <__aeabi_dcmpgt>
 800b6f2:	b9d0      	cbnz	r0, 800b72a <_dtoa_r+0x6c2>
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f5 fa04 	bl	8000b08 <__aeabi_dcmpeq>
 800b700:	b110      	cbz	r0, 800b708 <_dtoa_r+0x6a0>
 800b702:	f01a 0f01 	tst.w	sl, #1
 800b706:	d110      	bne.n	800b72a <_dtoa_r+0x6c2>
 800b708:	4620      	mov	r0, r4
 800b70a:	ee18 1a10 	vmov	r1, s16
 800b70e:	f000 fae5 	bl	800bcdc <_Bfree>
 800b712:	2300      	movs	r3, #0
 800b714:	9800      	ldr	r0, [sp, #0]
 800b716:	702b      	strb	r3, [r5, #0]
 800b718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b71a:	3001      	adds	r0, #1
 800b71c:	6018      	str	r0, [r3, #0]
 800b71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b720:	2b00      	cmp	r3, #0
 800b722:	f43f acf1 	beq.w	800b108 <_dtoa_r+0xa0>
 800b726:	601d      	str	r5, [r3, #0]
 800b728:	e4ee      	b.n	800b108 <_dtoa_r+0xa0>
 800b72a:	9f00      	ldr	r7, [sp, #0]
 800b72c:	462b      	mov	r3, r5
 800b72e:	461d      	mov	r5, r3
 800b730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b734:	2a39      	cmp	r2, #57	; 0x39
 800b736:	d106      	bne.n	800b746 <_dtoa_r+0x6de>
 800b738:	9a01      	ldr	r2, [sp, #4]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d1f7      	bne.n	800b72e <_dtoa_r+0x6c6>
 800b73e:	9901      	ldr	r1, [sp, #4]
 800b740:	2230      	movs	r2, #48	; 0x30
 800b742:	3701      	adds	r7, #1
 800b744:	700a      	strb	r2, [r1, #0]
 800b746:	781a      	ldrb	r2, [r3, #0]
 800b748:	3201      	adds	r2, #1
 800b74a:	701a      	strb	r2, [r3, #0]
 800b74c:	e790      	b.n	800b670 <_dtoa_r+0x608>
 800b74e:	4ba6      	ldr	r3, [pc, #664]	; (800b9e8 <_dtoa_r+0x980>)
 800b750:	2200      	movs	r2, #0
 800b752:	f7f4 ff71 	bl	8000638 <__aeabi_dmul>
 800b756:	2200      	movs	r2, #0
 800b758:	2300      	movs	r3, #0
 800b75a:	4606      	mov	r6, r0
 800b75c:	460f      	mov	r7, r1
 800b75e:	f7f5 f9d3 	bl	8000b08 <__aeabi_dcmpeq>
 800b762:	2800      	cmp	r0, #0
 800b764:	d09d      	beq.n	800b6a2 <_dtoa_r+0x63a>
 800b766:	e7cf      	b.n	800b708 <_dtoa_r+0x6a0>
 800b768:	9a08      	ldr	r2, [sp, #32]
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	f000 80d7 	beq.w	800b91e <_dtoa_r+0x8b6>
 800b770:	9a06      	ldr	r2, [sp, #24]
 800b772:	2a01      	cmp	r2, #1
 800b774:	f300 80ba 	bgt.w	800b8ec <_dtoa_r+0x884>
 800b778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b77a:	2a00      	cmp	r2, #0
 800b77c:	f000 80b2 	beq.w	800b8e4 <_dtoa_r+0x87c>
 800b780:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b784:	9e07      	ldr	r6, [sp, #28]
 800b786:	9d04      	ldr	r5, [sp, #16]
 800b788:	9a04      	ldr	r2, [sp, #16]
 800b78a:	441a      	add	r2, r3
 800b78c:	9204      	str	r2, [sp, #16]
 800b78e:	9a05      	ldr	r2, [sp, #20]
 800b790:	2101      	movs	r1, #1
 800b792:	441a      	add	r2, r3
 800b794:	4620      	mov	r0, r4
 800b796:	9205      	str	r2, [sp, #20]
 800b798:	f000 fb58 	bl	800be4c <__i2b>
 800b79c:	4607      	mov	r7, r0
 800b79e:	2d00      	cmp	r5, #0
 800b7a0:	dd0c      	ble.n	800b7bc <_dtoa_r+0x754>
 800b7a2:	9b05      	ldr	r3, [sp, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dd09      	ble.n	800b7bc <_dtoa_r+0x754>
 800b7a8:	42ab      	cmp	r3, r5
 800b7aa:	9a04      	ldr	r2, [sp, #16]
 800b7ac:	bfa8      	it	ge
 800b7ae:	462b      	movge	r3, r5
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	9204      	str	r2, [sp, #16]
 800b7b4:	9a05      	ldr	r2, [sp, #20]
 800b7b6:	1aed      	subs	r5, r5, r3
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	9305      	str	r3, [sp, #20]
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	b31b      	cbz	r3, 800b808 <_dtoa_r+0x7a0>
 800b7c0:	9b08      	ldr	r3, [sp, #32]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 80af 	beq.w	800b926 <_dtoa_r+0x8be>
 800b7c8:	2e00      	cmp	r6, #0
 800b7ca:	dd13      	ble.n	800b7f4 <_dtoa_r+0x78c>
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fbfb 	bl	800bfcc <__pow5mult>
 800b7d6:	ee18 2a10 	vmov	r2, s16
 800b7da:	4601      	mov	r1, r0
 800b7dc:	4607      	mov	r7, r0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 fb4a 	bl	800be78 <__multiply>
 800b7e4:	ee18 1a10 	vmov	r1, s16
 800b7e8:	4680      	mov	r8, r0
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 fa76 	bl	800bcdc <_Bfree>
 800b7f0:	ee08 8a10 	vmov	s16, r8
 800b7f4:	9b07      	ldr	r3, [sp, #28]
 800b7f6:	1b9a      	subs	r2, r3, r6
 800b7f8:	d006      	beq.n	800b808 <_dtoa_r+0x7a0>
 800b7fa:	ee18 1a10 	vmov	r1, s16
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 fbe4 	bl	800bfcc <__pow5mult>
 800b804:	ee08 0a10 	vmov	s16, r0
 800b808:	2101      	movs	r1, #1
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 fb1e 	bl	800be4c <__i2b>
 800b810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b812:	2b00      	cmp	r3, #0
 800b814:	4606      	mov	r6, r0
 800b816:	f340 8088 	ble.w	800b92a <_dtoa_r+0x8c2>
 800b81a:	461a      	mov	r2, r3
 800b81c:	4601      	mov	r1, r0
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fbd4 	bl	800bfcc <__pow5mult>
 800b824:	9b06      	ldr	r3, [sp, #24]
 800b826:	2b01      	cmp	r3, #1
 800b828:	4606      	mov	r6, r0
 800b82a:	f340 8081 	ble.w	800b930 <_dtoa_r+0x8c8>
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	6933      	ldr	r3, [r6, #16]
 800b834:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b838:	6918      	ldr	r0, [r3, #16]
 800b83a:	f000 fab7 	bl	800bdac <__hi0bits>
 800b83e:	f1c0 0020 	rsb	r0, r0, #32
 800b842:	9b05      	ldr	r3, [sp, #20]
 800b844:	4418      	add	r0, r3
 800b846:	f010 001f 	ands.w	r0, r0, #31
 800b84a:	f000 8092 	beq.w	800b972 <_dtoa_r+0x90a>
 800b84e:	f1c0 0320 	rsb	r3, r0, #32
 800b852:	2b04      	cmp	r3, #4
 800b854:	f340 808a 	ble.w	800b96c <_dtoa_r+0x904>
 800b858:	f1c0 001c 	rsb	r0, r0, #28
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	4403      	add	r3, r0
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	4403      	add	r3, r0
 800b866:	4405      	add	r5, r0
 800b868:	9305      	str	r3, [sp, #20]
 800b86a:	9b04      	ldr	r3, [sp, #16]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd07      	ble.n	800b880 <_dtoa_r+0x818>
 800b870:	ee18 1a10 	vmov	r1, s16
 800b874:	461a      	mov	r2, r3
 800b876:	4620      	mov	r0, r4
 800b878:	f000 fc02 	bl	800c080 <__lshift>
 800b87c:	ee08 0a10 	vmov	s16, r0
 800b880:	9b05      	ldr	r3, [sp, #20]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dd05      	ble.n	800b892 <_dtoa_r+0x82a>
 800b886:	4631      	mov	r1, r6
 800b888:	461a      	mov	r2, r3
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fbf8 	bl	800c080 <__lshift>
 800b890:	4606      	mov	r6, r0
 800b892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d06e      	beq.n	800b976 <_dtoa_r+0x90e>
 800b898:	ee18 0a10 	vmov	r0, s16
 800b89c:	4631      	mov	r1, r6
 800b89e:	f000 fc5f 	bl	800c160 <__mcmp>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	da67      	bge.n	800b976 <_dtoa_r+0x90e>
 800b8a6:	9b00      	ldr	r3, [sp, #0]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	ee18 1a10 	vmov	r1, s16
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fa33 	bl	800bd20 <__multadd>
 800b8ba:	9b08      	ldr	r3, [sp, #32]
 800b8bc:	ee08 0a10 	vmov	s16, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 81b1 	beq.w	800bc28 <_dtoa_r+0xbc0>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f000 fa27 	bl	800bd20 <__multadd>
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	f300 808e 	bgt.w	800b9f8 <_dtoa_r+0x990>
 800b8dc:	9b06      	ldr	r3, [sp, #24]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	dc51      	bgt.n	800b986 <_dtoa_r+0x91e>
 800b8e2:	e089      	b.n	800b9f8 <_dtoa_r+0x990>
 800b8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8ea:	e74b      	b.n	800b784 <_dtoa_r+0x71c>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	1e5e      	subs	r6, r3, #1
 800b8f0:	9b07      	ldr	r3, [sp, #28]
 800b8f2:	42b3      	cmp	r3, r6
 800b8f4:	bfbf      	itttt	lt
 800b8f6:	9b07      	ldrlt	r3, [sp, #28]
 800b8f8:	9607      	strlt	r6, [sp, #28]
 800b8fa:	1af2      	sublt	r2, r6, r3
 800b8fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8fe:	bfb6      	itet	lt
 800b900:	189b      	addlt	r3, r3, r2
 800b902:	1b9e      	subge	r6, r3, r6
 800b904:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	bfb8      	it	lt
 800b90a:	2600      	movlt	r6, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bfb7      	itett	lt
 800b910:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b914:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b918:	1a9d      	sublt	r5, r3, r2
 800b91a:	2300      	movlt	r3, #0
 800b91c:	e734      	b.n	800b788 <_dtoa_r+0x720>
 800b91e:	9e07      	ldr	r6, [sp, #28]
 800b920:	9d04      	ldr	r5, [sp, #16]
 800b922:	9f08      	ldr	r7, [sp, #32]
 800b924:	e73b      	b.n	800b79e <_dtoa_r+0x736>
 800b926:	9a07      	ldr	r2, [sp, #28]
 800b928:	e767      	b.n	800b7fa <_dtoa_r+0x792>
 800b92a:	9b06      	ldr	r3, [sp, #24]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	dc18      	bgt.n	800b962 <_dtoa_r+0x8fa>
 800b930:	f1ba 0f00 	cmp.w	sl, #0
 800b934:	d115      	bne.n	800b962 <_dtoa_r+0x8fa>
 800b936:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b93a:	b993      	cbnz	r3, 800b962 <_dtoa_r+0x8fa>
 800b93c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b940:	0d1b      	lsrs	r3, r3, #20
 800b942:	051b      	lsls	r3, r3, #20
 800b944:	b183      	cbz	r3, 800b968 <_dtoa_r+0x900>
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	3301      	adds	r3, #1
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	9b05      	ldr	r3, [sp, #20]
 800b94e:	3301      	adds	r3, #1
 800b950:	9305      	str	r3, [sp, #20]
 800b952:	f04f 0801 	mov.w	r8, #1
 800b956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f47f af6a 	bne.w	800b832 <_dtoa_r+0x7ca>
 800b95e:	2001      	movs	r0, #1
 800b960:	e76f      	b.n	800b842 <_dtoa_r+0x7da>
 800b962:	f04f 0800 	mov.w	r8, #0
 800b966:	e7f6      	b.n	800b956 <_dtoa_r+0x8ee>
 800b968:	4698      	mov	r8, r3
 800b96a:	e7f4      	b.n	800b956 <_dtoa_r+0x8ee>
 800b96c:	f43f af7d 	beq.w	800b86a <_dtoa_r+0x802>
 800b970:	4618      	mov	r0, r3
 800b972:	301c      	adds	r0, #28
 800b974:	e772      	b.n	800b85c <_dtoa_r+0x7f4>
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	dc37      	bgt.n	800b9ec <_dtoa_r+0x984>
 800b97c:	9b06      	ldr	r3, [sp, #24]
 800b97e:	2b02      	cmp	r3, #2
 800b980:	dd34      	ble.n	800b9ec <_dtoa_r+0x984>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	9b02      	ldr	r3, [sp, #8]
 800b988:	b96b      	cbnz	r3, 800b9a6 <_dtoa_r+0x93e>
 800b98a:	4631      	mov	r1, r6
 800b98c:	2205      	movs	r2, #5
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 f9c6 	bl	800bd20 <__multadd>
 800b994:	4601      	mov	r1, r0
 800b996:	4606      	mov	r6, r0
 800b998:	ee18 0a10 	vmov	r0, s16
 800b99c:	f000 fbe0 	bl	800c160 <__mcmp>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	f73f adbb 	bgt.w	800b51c <_dtoa_r+0x4b4>
 800b9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a8:	9d01      	ldr	r5, [sp, #4]
 800b9aa:	43db      	mvns	r3, r3
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	f04f 0800 	mov.w	r8, #0
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 f991 	bl	800bcdc <_Bfree>
 800b9ba:	2f00      	cmp	r7, #0
 800b9bc:	f43f aea4 	beq.w	800b708 <_dtoa_r+0x6a0>
 800b9c0:	f1b8 0f00 	cmp.w	r8, #0
 800b9c4:	d005      	beq.n	800b9d2 <_dtoa_r+0x96a>
 800b9c6:	45b8      	cmp	r8, r7
 800b9c8:	d003      	beq.n	800b9d2 <_dtoa_r+0x96a>
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 f985 	bl	800bcdc <_Bfree>
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 f981 	bl	800bcdc <_Bfree>
 800b9da:	e695      	b.n	800b708 <_dtoa_r+0x6a0>
 800b9dc:	2600      	movs	r6, #0
 800b9de:	4637      	mov	r7, r6
 800b9e0:	e7e1      	b.n	800b9a6 <_dtoa_r+0x93e>
 800b9e2:	9700      	str	r7, [sp, #0]
 800b9e4:	4637      	mov	r7, r6
 800b9e6:	e599      	b.n	800b51c <_dtoa_r+0x4b4>
 800b9e8:	40240000 	.word	0x40240000
 800b9ec:	9b08      	ldr	r3, [sp, #32]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80ca 	beq.w	800bb88 <_dtoa_r+0xb20>
 800b9f4:	9b03      	ldr	r3, [sp, #12]
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	2d00      	cmp	r5, #0
 800b9fa:	dd05      	ble.n	800ba08 <_dtoa_r+0x9a0>
 800b9fc:	4639      	mov	r1, r7
 800b9fe:	462a      	mov	r2, r5
 800ba00:	4620      	mov	r0, r4
 800ba02:	f000 fb3d 	bl	800c080 <__lshift>
 800ba06:	4607      	mov	r7, r0
 800ba08:	f1b8 0f00 	cmp.w	r8, #0
 800ba0c:	d05b      	beq.n	800bac6 <_dtoa_r+0xa5e>
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 f923 	bl	800bc5c <_Balloc>
 800ba16:	4605      	mov	r5, r0
 800ba18:	b928      	cbnz	r0, 800ba26 <_dtoa_r+0x9be>
 800ba1a:	4b87      	ldr	r3, [pc, #540]	; (800bc38 <_dtoa_r+0xbd0>)
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba22:	f7ff bb3b 	b.w	800b09c <_dtoa_r+0x34>
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	3202      	adds	r2, #2
 800ba2a:	0092      	lsls	r2, r2, #2
 800ba2c:	f107 010c 	add.w	r1, r7, #12
 800ba30:	300c      	adds	r0, #12
 800ba32:	f7fe fded 	bl	800a610 <memcpy>
 800ba36:	2201      	movs	r2, #1
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 fb20 	bl	800c080 <__lshift>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	f103 0901 	add.w	r9, r3, #1
 800ba46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	9305      	str	r3, [sp, #20]
 800ba4e:	f00a 0301 	and.w	r3, sl, #1
 800ba52:	46b8      	mov	r8, r7
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	4607      	mov	r7, r0
 800ba58:	4631      	mov	r1, r6
 800ba5a:	ee18 0a10 	vmov	r0, s16
 800ba5e:	f7ff fa77 	bl	800af50 <quorem>
 800ba62:	4641      	mov	r1, r8
 800ba64:	9002      	str	r0, [sp, #8]
 800ba66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba6a:	ee18 0a10 	vmov	r0, s16
 800ba6e:	f000 fb77 	bl	800c160 <__mcmp>
 800ba72:	463a      	mov	r2, r7
 800ba74:	9003      	str	r0, [sp, #12]
 800ba76:	4631      	mov	r1, r6
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 fb8d 	bl	800c198 <__mdiff>
 800ba7e:	68c2      	ldr	r2, [r0, #12]
 800ba80:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba84:	4605      	mov	r5, r0
 800ba86:	bb02      	cbnz	r2, 800baca <_dtoa_r+0xa62>
 800ba88:	4601      	mov	r1, r0
 800ba8a:	ee18 0a10 	vmov	r0, s16
 800ba8e:	f000 fb67 	bl	800c160 <__mcmp>
 800ba92:	4602      	mov	r2, r0
 800ba94:	4629      	mov	r1, r5
 800ba96:	4620      	mov	r0, r4
 800ba98:	9207      	str	r2, [sp, #28]
 800ba9a:	f000 f91f 	bl	800bcdc <_Bfree>
 800ba9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800baa2:	ea43 0102 	orr.w	r1, r3, r2
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	430b      	orrs	r3, r1
 800baaa:	464d      	mov	r5, r9
 800baac:	d10f      	bne.n	800bace <_dtoa_r+0xa66>
 800baae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bab2:	d02a      	beq.n	800bb0a <_dtoa_r+0xaa2>
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dd02      	ble.n	800bac0 <_dtoa_r+0xa58>
 800baba:	9b02      	ldr	r3, [sp, #8]
 800babc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bac0:	f88b a000 	strb.w	sl, [fp]
 800bac4:	e775      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bac6:	4638      	mov	r0, r7
 800bac8:	e7ba      	b.n	800ba40 <_dtoa_r+0x9d8>
 800baca:	2201      	movs	r2, #1
 800bacc:	e7e2      	b.n	800ba94 <_dtoa_r+0xa2c>
 800bace:	9b03      	ldr	r3, [sp, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	db04      	blt.n	800bade <_dtoa_r+0xa76>
 800bad4:	9906      	ldr	r1, [sp, #24]
 800bad6:	430b      	orrs	r3, r1
 800bad8:	9904      	ldr	r1, [sp, #16]
 800bada:	430b      	orrs	r3, r1
 800badc:	d122      	bne.n	800bb24 <_dtoa_r+0xabc>
 800bade:	2a00      	cmp	r2, #0
 800bae0:	ddee      	ble.n	800bac0 <_dtoa_r+0xa58>
 800bae2:	ee18 1a10 	vmov	r1, s16
 800bae6:	2201      	movs	r2, #1
 800bae8:	4620      	mov	r0, r4
 800baea:	f000 fac9 	bl	800c080 <__lshift>
 800baee:	4631      	mov	r1, r6
 800baf0:	ee08 0a10 	vmov	s16, r0
 800baf4:	f000 fb34 	bl	800c160 <__mcmp>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	dc03      	bgt.n	800bb04 <_dtoa_r+0xa9c>
 800bafc:	d1e0      	bne.n	800bac0 <_dtoa_r+0xa58>
 800bafe:	f01a 0f01 	tst.w	sl, #1
 800bb02:	d0dd      	beq.n	800bac0 <_dtoa_r+0xa58>
 800bb04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb08:	d1d7      	bne.n	800baba <_dtoa_r+0xa52>
 800bb0a:	2339      	movs	r3, #57	; 0x39
 800bb0c:	f88b 3000 	strb.w	r3, [fp]
 800bb10:	462b      	mov	r3, r5
 800bb12:	461d      	mov	r5, r3
 800bb14:	3b01      	subs	r3, #1
 800bb16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb1a:	2a39      	cmp	r2, #57	; 0x39
 800bb1c:	d071      	beq.n	800bc02 <_dtoa_r+0xb9a>
 800bb1e:	3201      	adds	r2, #1
 800bb20:	701a      	strb	r2, [r3, #0]
 800bb22:	e746      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	dd07      	ble.n	800bb38 <_dtoa_r+0xad0>
 800bb28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb2c:	d0ed      	beq.n	800bb0a <_dtoa_r+0xaa2>
 800bb2e:	f10a 0301 	add.w	r3, sl, #1
 800bb32:	f88b 3000 	strb.w	r3, [fp]
 800bb36:	e73c      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bb38:	9b05      	ldr	r3, [sp, #20]
 800bb3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb3e:	4599      	cmp	r9, r3
 800bb40:	d047      	beq.n	800bbd2 <_dtoa_r+0xb6a>
 800bb42:	ee18 1a10 	vmov	r1, s16
 800bb46:	2300      	movs	r3, #0
 800bb48:	220a      	movs	r2, #10
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f000 f8e8 	bl	800bd20 <__multadd>
 800bb50:	45b8      	cmp	r8, r7
 800bb52:	ee08 0a10 	vmov	s16, r0
 800bb56:	f04f 0300 	mov.w	r3, #0
 800bb5a:	f04f 020a 	mov.w	r2, #10
 800bb5e:	4641      	mov	r1, r8
 800bb60:	4620      	mov	r0, r4
 800bb62:	d106      	bne.n	800bb72 <_dtoa_r+0xb0a>
 800bb64:	f000 f8dc 	bl	800bd20 <__multadd>
 800bb68:	4680      	mov	r8, r0
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	f109 0901 	add.w	r9, r9, #1
 800bb70:	e772      	b.n	800ba58 <_dtoa_r+0x9f0>
 800bb72:	f000 f8d5 	bl	800bd20 <__multadd>
 800bb76:	4639      	mov	r1, r7
 800bb78:	4680      	mov	r8, r0
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	220a      	movs	r2, #10
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f000 f8ce 	bl	800bd20 <__multadd>
 800bb84:	4607      	mov	r7, r0
 800bb86:	e7f1      	b.n	800bb6c <_dtoa_r+0xb04>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	9302      	str	r3, [sp, #8]
 800bb8c:	9d01      	ldr	r5, [sp, #4]
 800bb8e:	ee18 0a10 	vmov	r0, s16
 800bb92:	4631      	mov	r1, r6
 800bb94:	f7ff f9dc 	bl	800af50 <quorem>
 800bb98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	f805 ab01 	strb.w	sl, [r5], #1
 800bba2:	1aea      	subs	r2, r5, r3
 800bba4:	9b02      	ldr	r3, [sp, #8]
 800bba6:	4293      	cmp	r3, r2
 800bba8:	dd09      	ble.n	800bbbe <_dtoa_r+0xb56>
 800bbaa:	ee18 1a10 	vmov	r1, s16
 800bbae:	2300      	movs	r3, #0
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 f8b4 	bl	800bd20 <__multadd>
 800bbb8:	ee08 0a10 	vmov	s16, r0
 800bbbc:	e7e7      	b.n	800bb8e <_dtoa_r+0xb26>
 800bbbe:	9b02      	ldr	r3, [sp, #8]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfc8      	it	gt
 800bbc4:	461d      	movgt	r5, r3
 800bbc6:	9b01      	ldr	r3, [sp, #4]
 800bbc8:	bfd8      	it	le
 800bbca:	2501      	movle	r5, #1
 800bbcc:	441d      	add	r5, r3
 800bbce:	f04f 0800 	mov.w	r8, #0
 800bbd2:	ee18 1a10 	vmov	r1, s16
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f000 fa51 	bl	800c080 <__lshift>
 800bbde:	4631      	mov	r1, r6
 800bbe0:	ee08 0a10 	vmov	s16, r0
 800bbe4:	f000 fabc 	bl	800c160 <__mcmp>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	dc91      	bgt.n	800bb10 <_dtoa_r+0xaa8>
 800bbec:	d102      	bne.n	800bbf4 <_dtoa_r+0xb8c>
 800bbee:	f01a 0f01 	tst.w	sl, #1
 800bbf2:	d18d      	bne.n	800bb10 <_dtoa_r+0xaa8>
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	461d      	mov	r5, r3
 800bbf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbfc:	2a30      	cmp	r2, #48	; 0x30
 800bbfe:	d0fa      	beq.n	800bbf6 <_dtoa_r+0xb8e>
 800bc00:	e6d7      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bc02:	9a01      	ldr	r2, [sp, #4]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d184      	bne.n	800bb12 <_dtoa_r+0xaaa>
 800bc08:	9b00      	ldr	r3, [sp, #0]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	2331      	movs	r3, #49	; 0x31
 800bc10:	7013      	strb	r3, [r2, #0]
 800bc12:	e6ce      	b.n	800b9b2 <_dtoa_r+0x94a>
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <_dtoa_r+0xbd4>)
 800bc16:	f7ff ba95 	b.w	800b144 <_dtoa_r+0xdc>
 800bc1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f aa6e 	bne.w	800b0fe <_dtoa_r+0x96>
 800bc22:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <_dtoa_r+0xbd8>)
 800bc24:	f7ff ba8e 	b.w	800b144 <_dtoa_r+0xdc>
 800bc28:	9b02      	ldr	r3, [sp, #8]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	dcae      	bgt.n	800bb8c <_dtoa_r+0xb24>
 800bc2e:	9b06      	ldr	r3, [sp, #24]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	f73f aea8 	bgt.w	800b986 <_dtoa_r+0x91e>
 800bc36:	e7a9      	b.n	800bb8c <_dtoa_r+0xb24>
 800bc38:	0800e143 	.word	0x0800e143
 800bc3c:	0800e0a0 	.word	0x0800e0a0
 800bc40:	0800e0c4 	.word	0x0800e0c4

0800bc44 <_localeconv_r>:
 800bc44:	4800      	ldr	r0, [pc, #0]	; (800bc48 <_localeconv_r+0x4>)
 800bc46:	4770      	bx	lr
 800bc48:	20000168 	.word	0x20000168

0800bc4c <malloc>:
 800bc4c:	4b02      	ldr	r3, [pc, #8]	; (800bc58 <malloc+0xc>)
 800bc4e:	4601      	mov	r1, r0
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	f000 bc09 	b.w	800c468 <_malloc_r>
 800bc56:	bf00      	nop
 800bc58:	20000014 	.word	0x20000014

0800bc5c <_Balloc>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	b976      	cbnz	r6, 800bc84 <_Balloc+0x28>
 800bc66:	2010      	movs	r0, #16
 800bc68:	f7ff fff0 	bl	800bc4c <malloc>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	6260      	str	r0, [r4, #36]	; 0x24
 800bc70:	b920      	cbnz	r0, 800bc7c <_Balloc+0x20>
 800bc72:	4b18      	ldr	r3, [pc, #96]	; (800bcd4 <_Balloc+0x78>)
 800bc74:	4818      	ldr	r0, [pc, #96]	; (800bcd8 <_Balloc+0x7c>)
 800bc76:	2166      	movs	r1, #102	; 0x66
 800bc78:	f000 fdd6 	bl	800c828 <__assert_func>
 800bc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc80:	6006      	str	r6, [r0, #0]
 800bc82:	60c6      	str	r6, [r0, #12]
 800bc84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc86:	68f3      	ldr	r3, [r6, #12]
 800bc88:	b183      	cbz	r3, 800bcac <_Balloc+0x50>
 800bc8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc92:	b9b8      	cbnz	r0, 800bcc4 <_Balloc+0x68>
 800bc94:	2101      	movs	r1, #1
 800bc96:	fa01 f605 	lsl.w	r6, r1, r5
 800bc9a:	1d72      	adds	r2, r6, #5
 800bc9c:	0092      	lsls	r2, r2, #2
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fb60 	bl	800c364 <_calloc_r>
 800bca4:	b160      	cbz	r0, 800bcc0 <_Balloc+0x64>
 800bca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcaa:	e00e      	b.n	800bcca <_Balloc+0x6e>
 800bcac:	2221      	movs	r2, #33	; 0x21
 800bcae:	2104      	movs	r1, #4
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 fb57 	bl	800c364 <_calloc_r>
 800bcb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcb8:	60f0      	str	r0, [r6, #12]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e4      	bne.n	800bc8a <_Balloc+0x2e>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	6802      	ldr	r2, [r0, #0]
 800bcc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcca:	2300      	movs	r3, #0
 800bccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcd0:	e7f7      	b.n	800bcc2 <_Balloc+0x66>
 800bcd2:	bf00      	nop
 800bcd4:	0800e0d1 	.word	0x0800e0d1
 800bcd8:	0800e154 	.word	0x0800e154

0800bcdc <_Bfree>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bce0:	4605      	mov	r5, r0
 800bce2:	460c      	mov	r4, r1
 800bce4:	b976      	cbnz	r6, 800bd04 <_Bfree+0x28>
 800bce6:	2010      	movs	r0, #16
 800bce8:	f7ff ffb0 	bl	800bc4c <malloc>
 800bcec:	4602      	mov	r2, r0
 800bcee:	6268      	str	r0, [r5, #36]	; 0x24
 800bcf0:	b920      	cbnz	r0, 800bcfc <_Bfree+0x20>
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <_Bfree+0x3c>)
 800bcf4:	4809      	ldr	r0, [pc, #36]	; (800bd1c <_Bfree+0x40>)
 800bcf6:	218a      	movs	r1, #138	; 0x8a
 800bcf8:	f000 fd96 	bl	800c828 <__assert_func>
 800bcfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd00:	6006      	str	r6, [r0, #0]
 800bd02:	60c6      	str	r6, [r0, #12]
 800bd04:	b13c      	cbz	r4, 800bd16 <_Bfree+0x3a>
 800bd06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd08:	6862      	ldr	r2, [r4, #4]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd10:	6021      	str	r1, [r4, #0]
 800bd12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	0800e0d1 	.word	0x0800e0d1
 800bd1c:	0800e154 	.word	0x0800e154

0800bd20 <__multadd>:
 800bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd24:	690d      	ldr	r5, [r1, #16]
 800bd26:	4607      	mov	r7, r0
 800bd28:	460c      	mov	r4, r1
 800bd2a:	461e      	mov	r6, r3
 800bd2c:	f101 0c14 	add.w	ip, r1, #20
 800bd30:	2000      	movs	r0, #0
 800bd32:	f8dc 3000 	ldr.w	r3, [ip]
 800bd36:	b299      	uxth	r1, r3
 800bd38:	fb02 6101 	mla	r1, r2, r1, r6
 800bd3c:	0c1e      	lsrs	r6, r3, #16
 800bd3e:	0c0b      	lsrs	r3, r1, #16
 800bd40:	fb02 3306 	mla	r3, r2, r6, r3
 800bd44:	b289      	uxth	r1, r1
 800bd46:	3001      	adds	r0, #1
 800bd48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd4c:	4285      	cmp	r5, r0
 800bd4e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd56:	dcec      	bgt.n	800bd32 <__multadd+0x12>
 800bd58:	b30e      	cbz	r6, 800bd9e <__multadd+0x7e>
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	42ab      	cmp	r3, r5
 800bd5e:	dc19      	bgt.n	800bd94 <__multadd+0x74>
 800bd60:	6861      	ldr	r1, [r4, #4]
 800bd62:	4638      	mov	r0, r7
 800bd64:	3101      	adds	r1, #1
 800bd66:	f7ff ff79 	bl	800bc5c <_Balloc>
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	b928      	cbnz	r0, 800bd7a <__multadd+0x5a>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	4b0c      	ldr	r3, [pc, #48]	; (800bda4 <__multadd+0x84>)
 800bd72:	480d      	ldr	r0, [pc, #52]	; (800bda8 <__multadd+0x88>)
 800bd74:	21b5      	movs	r1, #181	; 0xb5
 800bd76:	f000 fd57 	bl	800c828 <__assert_func>
 800bd7a:	6922      	ldr	r2, [r4, #16]
 800bd7c:	3202      	adds	r2, #2
 800bd7e:	f104 010c 	add.w	r1, r4, #12
 800bd82:	0092      	lsls	r2, r2, #2
 800bd84:	300c      	adds	r0, #12
 800bd86:	f7fe fc43 	bl	800a610 <memcpy>
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	f7ff ffa5 	bl	800bcdc <_Bfree>
 800bd92:	4644      	mov	r4, r8
 800bd94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd98:	3501      	adds	r5, #1
 800bd9a:	615e      	str	r6, [r3, #20]
 800bd9c:	6125      	str	r5, [r4, #16]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	0800e143 	.word	0x0800e143
 800bda8:	0800e154 	.word	0x0800e154

0800bdac <__hi0bits>:
 800bdac:	0c03      	lsrs	r3, r0, #16
 800bdae:	041b      	lsls	r3, r3, #16
 800bdb0:	b9d3      	cbnz	r3, 800bde8 <__hi0bits+0x3c>
 800bdb2:	0400      	lsls	r0, r0, #16
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdba:	bf04      	itt	eq
 800bdbc:	0200      	lsleq	r0, r0, #8
 800bdbe:	3308      	addeq	r3, #8
 800bdc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdc4:	bf04      	itt	eq
 800bdc6:	0100      	lsleq	r0, r0, #4
 800bdc8:	3304      	addeq	r3, #4
 800bdca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdce:	bf04      	itt	eq
 800bdd0:	0080      	lsleq	r0, r0, #2
 800bdd2:	3302      	addeq	r3, #2
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	db05      	blt.n	800bde4 <__hi0bits+0x38>
 800bdd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bddc:	f103 0301 	add.w	r3, r3, #1
 800bde0:	bf08      	it	eq
 800bde2:	2320      	moveq	r3, #32
 800bde4:	4618      	mov	r0, r3
 800bde6:	4770      	bx	lr
 800bde8:	2300      	movs	r3, #0
 800bdea:	e7e4      	b.n	800bdb6 <__hi0bits+0xa>

0800bdec <__lo0bits>:
 800bdec:	6803      	ldr	r3, [r0, #0]
 800bdee:	f013 0207 	ands.w	r2, r3, #7
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	d00b      	beq.n	800be0e <__lo0bits+0x22>
 800bdf6:	07da      	lsls	r2, r3, #31
 800bdf8:	d423      	bmi.n	800be42 <__lo0bits+0x56>
 800bdfa:	0798      	lsls	r0, r3, #30
 800bdfc:	bf49      	itett	mi
 800bdfe:	085b      	lsrmi	r3, r3, #1
 800be00:	089b      	lsrpl	r3, r3, #2
 800be02:	2001      	movmi	r0, #1
 800be04:	600b      	strmi	r3, [r1, #0]
 800be06:	bf5c      	itt	pl
 800be08:	600b      	strpl	r3, [r1, #0]
 800be0a:	2002      	movpl	r0, #2
 800be0c:	4770      	bx	lr
 800be0e:	b298      	uxth	r0, r3
 800be10:	b9a8      	cbnz	r0, 800be3e <__lo0bits+0x52>
 800be12:	0c1b      	lsrs	r3, r3, #16
 800be14:	2010      	movs	r0, #16
 800be16:	b2da      	uxtb	r2, r3
 800be18:	b90a      	cbnz	r2, 800be1e <__lo0bits+0x32>
 800be1a:	3008      	adds	r0, #8
 800be1c:	0a1b      	lsrs	r3, r3, #8
 800be1e:	071a      	lsls	r2, r3, #28
 800be20:	bf04      	itt	eq
 800be22:	091b      	lsreq	r3, r3, #4
 800be24:	3004      	addeq	r0, #4
 800be26:	079a      	lsls	r2, r3, #30
 800be28:	bf04      	itt	eq
 800be2a:	089b      	lsreq	r3, r3, #2
 800be2c:	3002      	addeq	r0, #2
 800be2e:	07da      	lsls	r2, r3, #31
 800be30:	d403      	bmi.n	800be3a <__lo0bits+0x4e>
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	f100 0001 	add.w	r0, r0, #1
 800be38:	d005      	beq.n	800be46 <__lo0bits+0x5a>
 800be3a:	600b      	str	r3, [r1, #0]
 800be3c:	4770      	bx	lr
 800be3e:	4610      	mov	r0, r2
 800be40:	e7e9      	b.n	800be16 <__lo0bits+0x2a>
 800be42:	2000      	movs	r0, #0
 800be44:	4770      	bx	lr
 800be46:	2020      	movs	r0, #32
 800be48:	4770      	bx	lr
	...

0800be4c <__i2b>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	460c      	mov	r4, r1
 800be50:	2101      	movs	r1, #1
 800be52:	f7ff ff03 	bl	800bc5c <_Balloc>
 800be56:	4602      	mov	r2, r0
 800be58:	b928      	cbnz	r0, 800be66 <__i2b+0x1a>
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <__i2b+0x24>)
 800be5c:	4805      	ldr	r0, [pc, #20]	; (800be74 <__i2b+0x28>)
 800be5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be62:	f000 fce1 	bl	800c828 <__assert_func>
 800be66:	2301      	movs	r3, #1
 800be68:	6144      	str	r4, [r0, #20]
 800be6a:	6103      	str	r3, [r0, #16]
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	bf00      	nop
 800be70:	0800e143 	.word	0x0800e143
 800be74:	0800e154 	.word	0x0800e154

0800be78 <__multiply>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	4691      	mov	r9, r2
 800be7e:	690a      	ldr	r2, [r1, #16]
 800be80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be84:	429a      	cmp	r2, r3
 800be86:	bfb8      	it	lt
 800be88:	460b      	movlt	r3, r1
 800be8a:	460c      	mov	r4, r1
 800be8c:	bfbc      	itt	lt
 800be8e:	464c      	movlt	r4, r9
 800be90:	4699      	movlt	r9, r3
 800be92:	6927      	ldr	r7, [r4, #16]
 800be94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	6861      	ldr	r1, [r4, #4]
 800be9c:	eb07 060a 	add.w	r6, r7, sl
 800bea0:	42b3      	cmp	r3, r6
 800bea2:	b085      	sub	sp, #20
 800bea4:	bfb8      	it	lt
 800bea6:	3101      	addlt	r1, #1
 800bea8:	f7ff fed8 	bl	800bc5c <_Balloc>
 800beac:	b930      	cbnz	r0, 800bebc <__multiply+0x44>
 800beae:	4602      	mov	r2, r0
 800beb0:	4b44      	ldr	r3, [pc, #272]	; (800bfc4 <__multiply+0x14c>)
 800beb2:	4845      	ldr	r0, [pc, #276]	; (800bfc8 <__multiply+0x150>)
 800beb4:	f240 115d 	movw	r1, #349	; 0x15d
 800beb8:	f000 fcb6 	bl	800c828 <__assert_func>
 800bebc:	f100 0514 	add.w	r5, r0, #20
 800bec0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bec4:	462b      	mov	r3, r5
 800bec6:	2200      	movs	r2, #0
 800bec8:	4543      	cmp	r3, r8
 800beca:	d321      	bcc.n	800bf10 <__multiply+0x98>
 800becc:	f104 0314 	add.w	r3, r4, #20
 800bed0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bed4:	f109 0314 	add.w	r3, r9, #20
 800bed8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	1b3a      	subs	r2, r7, r4
 800bee0:	3a15      	subs	r2, #21
 800bee2:	f022 0203 	bic.w	r2, r2, #3
 800bee6:	3204      	adds	r2, #4
 800bee8:	f104 0115 	add.w	r1, r4, #21
 800beec:	428f      	cmp	r7, r1
 800beee:	bf38      	it	cc
 800bef0:	2204      	movcc	r2, #4
 800bef2:	9201      	str	r2, [sp, #4]
 800bef4:	9a02      	ldr	r2, [sp, #8]
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d80c      	bhi.n	800bf16 <__multiply+0x9e>
 800befc:	2e00      	cmp	r6, #0
 800befe:	dd03      	ble.n	800bf08 <__multiply+0x90>
 800bf00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d05a      	beq.n	800bfbe <__multiply+0x146>
 800bf08:	6106      	str	r6, [r0, #16]
 800bf0a:	b005      	add	sp, #20
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf10:	f843 2b04 	str.w	r2, [r3], #4
 800bf14:	e7d8      	b.n	800bec8 <__multiply+0x50>
 800bf16:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf1a:	f1ba 0f00 	cmp.w	sl, #0
 800bf1e:	d024      	beq.n	800bf6a <__multiply+0xf2>
 800bf20:	f104 0e14 	add.w	lr, r4, #20
 800bf24:	46a9      	mov	r9, r5
 800bf26:	f04f 0c00 	mov.w	ip, #0
 800bf2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf2e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf32:	fa1f fb82 	uxth.w	fp, r2
 800bf36:	b289      	uxth	r1, r1
 800bf38:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf40:	f8d9 2000 	ldr.w	r2, [r9]
 800bf44:	4461      	add	r1, ip
 800bf46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf52:	b289      	uxth	r1, r1
 800bf54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf58:	4577      	cmp	r7, lr
 800bf5a:	f849 1b04 	str.w	r1, [r9], #4
 800bf5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf62:	d8e2      	bhi.n	800bf2a <__multiply+0xb2>
 800bf64:	9a01      	ldr	r2, [sp, #4]
 800bf66:	f845 c002 	str.w	ip, [r5, r2]
 800bf6a:	9a03      	ldr	r2, [sp, #12]
 800bf6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf70:	3304      	adds	r3, #4
 800bf72:	f1b9 0f00 	cmp.w	r9, #0
 800bf76:	d020      	beq.n	800bfba <__multiply+0x142>
 800bf78:	6829      	ldr	r1, [r5, #0]
 800bf7a:	f104 0c14 	add.w	ip, r4, #20
 800bf7e:	46ae      	mov	lr, r5
 800bf80:	f04f 0a00 	mov.w	sl, #0
 800bf84:	f8bc b000 	ldrh.w	fp, [ip]
 800bf88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf8c:	fb09 220b 	mla	r2, r9, fp, r2
 800bf90:	4492      	add	sl, r2
 800bf92:	b289      	uxth	r1, r1
 800bf94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf98:	f84e 1b04 	str.w	r1, [lr], #4
 800bf9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfa0:	f8be 1000 	ldrh.w	r1, [lr]
 800bfa4:	0c12      	lsrs	r2, r2, #16
 800bfa6:	fb09 1102 	mla	r1, r9, r2, r1
 800bfaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfae:	4567      	cmp	r7, ip
 800bfb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfb4:	d8e6      	bhi.n	800bf84 <__multiply+0x10c>
 800bfb6:	9a01      	ldr	r2, [sp, #4]
 800bfb8:	50a9      	str	r1, [r5, r2]
 800bfba:	3504      	adds	r5, #4
 800bfbc:	e79a      	b.n	800bef4 <__multiply+0x7c>
 800bfbe:	3e01      	subs	r6, #1
 800bfc0:	e79c      	b.n	800befc <__multiply+0x84>
 800bfc2:	bf00      	nop
 800bfc4:	0800e143 	.word	0x0800e143
 800bfc8:	0800e154 	.word	0x0800e154

0800bfcc <__pow5mult>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	f012 0203 	ands.w	r2, r2, #3
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	d007      	beq.n	800bfec <__pow5mult+0x20>
 800bfdc:	4c25      	ldr	r4, [pc, #148]	; (800c074 <__pow5mult+0xa8>)
 800bfde:	3a01      	subs	r2, #1
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfe6:	f7ff fe9b 	bl	800bd20 <__multadd>
 800bfea:	4607      	mov	r7, r0
 800bfec:	10ad      	asrs	r5, r5, #2
 800bfee:	d03d      	beq.n	800c06c <__pow5mult+0xa0>
 800bff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bff2:	b97c      	cbnz	r4, 800c014 <__pow5mult+0x48>
 800bff4:	2010      	movs	r0, #16
 800bff6:	f7ff fe29 	bl	800bc4c <malloc>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6270      	str	r0, [r6, #36]	; 0x24
 800bffe:	b928      	cbnz	r0, 800c00c <__pow5mult+0x40>
 800c000:	4b1d      	ldr	r3, [pc, #116]	; (800c078 <__pow5mult+0xac>)
 800c002:	481e      	ldr	r0, [pc, #120]	; (800c07c <__pow5mult+0xb0>)
 800c004:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c008:	f000 fc0e 	bl	800c828 <__assert_func>
 800c00c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c010:	6004      	str	r4, [r0, #0]
 800c012:	60c4      	str	r4, [r0, #12]
 800c014:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c01c:	b94c      	cbnz	r4, 800c032 <__pow5mult+0x66>
 800c01e:	f240 2171 	movw	r1, #625	; 0x271
 800c022:	4630      	mov	r0, r6
 800c024:	f7ff ff12 	bl	800be4c <__i2b>
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c02e:	4604      	mov	r4, r0
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	f04f 0900 	mov.w	r9, #0
 800c036:	07eb      	lsls	r3, r5, #31
 800c038:	d50a      	bpl.n	800c050 <__pow5mult+0x84>
 800c03a:	4639      	mov	r1, r7
 800c03c:	4622      	mov	r2, r4
 800c03e:	4630      	mov	r0, r6
 800c040:	f7ff ff1a 	bl	800be78 <__multiply>
 800c044:	4639      	mov	r1, r7
 800c046:	4680      	mov	r8, r0
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fe47 	bl	800bcdc <_Bfree>
 800c04e:	4647      	mov	r7, r8
 800c050:	106d      	asrs	r5, r5, #1
 800c052:	d00b      	beq.n	800c06c <__pow5mult+0xa0>
 800c054:	6820      	ldr	r0, [r4, #0]
 800c056:	b938      	cbnz	r0, 800c068 <__pow5mult+0x9c>
 800c058:	4622      	mov	r2, r4
 800c05a:	4621      	mov	r1, r4
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff ff0b 	bl	800be78 <__multiply>
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	f8c0 9000 	str.w	r9, [r0]
 800c068:	4604      	mov	r4, r0
 800c06a:	e7e4      	b.n	800c036 <__pow5mult+0x6a>
 800c06c:	4638      	mov	r0, r7
 800c06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c072:	bf00      	nop
 800c074:	0800e2a0 	.word	0x0800e2a0
 800c078:	0800e0d1 	.word	0x0800e0d1
 800c07c:	0800e154 	.word	0x0800e154

0800c080 <__lshift>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	460c      	mov	r4, r1
 800c086:	6849      	ldr	r1, [r1, #4]
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	4607      	mov	r7, r0
 800c092:	4691      	mov	r9, r2
 800c094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c098:	f108 0601 	add.w	r6, r8, #1
 800c09c:	42b3      	cmp	r3, r6
 800c09e:	db0b      	blt.n	800c0b8 <__lshift+0x38>
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff fddb 	bl	800bc5c <_Balloc>
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	b948      	cbnz	r0, 800c0be <__lshift+0x3e>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <__lshift+0xd8>)
 800c0ae:	482b      	ldr	r0, [pc, #172]	; (800c15c <__lshift+0xdc>)
 800c0b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0b4:	f000 fbb8 	bl	800c828 <__assert_func>
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	e7ee      	b.n	800c09c <__lshift+0x1c>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f100 0114 	add.w	r1, r0, #20
 800c0c4:	f100 0210 	add.w	r2, r0, #16
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	4553      	cmp	r3, sl
 800c0cc:	db37      	blt.n	800c13e <__lshift+0xbe>
 800c0ce:	6920      	ldr	r0, [r4, #16]
 800c0d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0d4:	f104 0314 	add.w	r3, r4, #20
 800c0d8:	f019 091f 	ands.w	r9, r9, #31
 800c0dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0e4:	d02f      	beq.n	800c146 <__lshift+0xc6>
 800c0e6:	f1c9 0e20 	rsb	lr, r9, #32
 800c0ea:	468a      	mov	sl, r1
 800c0ec:	f04f 0c00 	mov.w	ip, #0
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	fa02 f209 	lsl.w	r2, r2, r9
 800c0f6:	ea42 020c 	orr.w	r2, r2, ip
 800c0fa:	f84a 2b04 	str.w	r2, [sl], #4
 800c0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c102:	4298      	cmp	r0, r3
 800c104:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c108:	d8f2      	bhi.n	800c0f0 <__lshift+0x70>
 800c10a:	1b03      	subs	r3, r0, r4
 800c10c:	3b15      	subs	r3, #21
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	3304      	adds	r3, #4
 800c114:	f104 0215 	add.w	r2, r4, #21
 800c118:	4290      	cmp	r0, r2
 800c11a:	bf38      	it	cc
 800c11c:	2304      	movcc	r3, #4
 800c11e:	f841 c003 	str.w	ip, [r1, r3]
 800c122:	f1bc 0f00 	cmp.w	ip, #0
 800c126:	d001      	beq.n	800c12c <__lshift+0xac>
 800c128:	f108 0602 	add.w	r6, r8, #2
 800c12c:	3e01      	subs	r6, #1
 800c12e:	4638      	mov	r0, r7
 800c130:	612e      	str	r6, [r5, #16]
 800c132:	4621      	mov	r1, r4
 800c134:	f7ff fdd2 	bl	800bcdc <_Bfree>
 800c138:	4628      	mov	r0, r5
 800c13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c142:	3301      	adds	r3, #1
 800c144:	e7c1      	b.n	800c0ca <__lshift+0x4a>
 800c146:	3904      	subs	r1, #4
 800c148:	f853 2b04 	ldr.w	r2, [r3], #4
 800c14c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c150:	4298      	cmp	r0, r3
 800c152:	d8f9      	bhi.n	800c148 <__lshift+0xc8>
 800c154:	e7ea      	b.n	800c12c <__lshift+0xac>
 800c156:	bf00      	nop
 800c158:	0800e143 	.word	0x0800e143
 800c15c:	0800e154 	.word	0x0800e154

0800c160 <__mcmp>:
 800c160:	b530      	push	{r4, r5, lr}
 800c162:	6902      	ldr	r2, [r0, #16]
 800c164:	690c      	ldr	r4, [r1, #16]
 800c166:	1b12      	subs	r2, r2, r4
 800c168:	d10e      	bne.n	800c188 <__mcmp+0x28>
 800c16a:	f100 0314 	add.w	r3, r0, #20
 800c16e:	3114      	adds	r1, #20
 800c170:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c174:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c178:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c17c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c180:	42a5      	cmp	r5, r4
 800c182:	d003      	beq.n	800c18c <__mcmp+0x2c>
 800c184:	d305      	bcc.n	800c192 <__mcmp+0x32>
 800c186:	2201      	movs	r2, #1
 800c188:	4610      	mov	r0, r2
 800c18a:	bd30      	pop	{r4, r5, pc}
 800c18c:	4283      	cmp	r3, r0
 800c18e:	d3f3      	bcc.n	800c178 <__mcmp+0x18>
 800c190:	e7fa      	b.n	800c188 <__mcmp+0x28>
 800c192:	f04f 32ff 	mov.w	r2, #4294967295
 800c196:	e7f7      	b.n	800c188 <__mcmp+0x28>

0800c198 <__mdiff>:
 800c198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	4606      	mov	r6, r0
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	4690      	mov	r8, r2
 800c1a6:	f7ff ffdb 	bl	800c160 <__mcmp>
 800c1aa:	1e05      	subs	r5, r0, #0
 800c1ac:	d110      	bne.n	800c1d0 <__mdiff+0x38>
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff fd53 	bl	800bc5c <_Balloc>
 800c1b6:	b930      	cbnz	r0, 800c1c6 <__mdiff+0x2e>
 800c1b8:	4b3a      	ldr	r3, [pc, #232]	; (800c2a4 <__mdiff+0x10c>)
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	f240 2132 	movw	r1, #562	; 0x232
 800c1c0:	4839      	ldr	r0, [pc, #228]	; (800c2a8 <__mdiff+0x110>)
 800c1c2:	f000 fb31 	bl	800c828 <__assert_func>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d0:	bfa4      	itt	ge
 800c1d2:	4643      	movge	r3, r8
 800c1d4:	46a0      	movge	r8, r4
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1dc:	bfa6      	itte	ge
 800c1de:	461c      	movge	r4, r3
 800c1e0:	2500      	movge	r5, #0
 800c1e2:	2501      	movlt	r5, #1
 800c1e4:	f7ff fd3a 	bl	800bc5c <_Balloc>
 800c1e8:	b920      	cbnz	r0, 800c1f4 <__mdiff+0x5c>
 800c1ea:	4b2e      	ldr	r3, [pc, #184]	; (800c2a4 <__mdiff+0x10c>)
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1f2:	e7e5      	b.n	800c1c0 <__mdiff+0x28>
 800c1f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1f8:	6926      	ldr	r6, [r4, #16]
 800c1fa:	60c5      	str	r5, [r0, #12]
 800c1fc:	f104 0914 	add.w	r9, r4, #20
 800c200:	f108 0514 	add.w	r5, r8, #20
 800c204:	f100 0e14 	add.w	lr, r0, #20
 800c208:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c20c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c210:	f108 0210 	add.w	r2, r8, #16
 800c214:	46f2      	mov	sl, lr
 800c216:	2100      	movs	r1, #0
 800c218:	f859 3b04 	ldr.w	r3, [r9], #4
 800c21c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c220:	fa1f f883 	uxth.w	r8, r3
 800c224:	fa11 f18b 	uxtah	r1, r1, fp
 800c228:	0c1b      	lsrs	r3, r3, #16
 800c22a:	eba1 0808 	sub.w	r8, r1, r8
 800c22e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c232:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c236:	fa1f f888 	uxth.w	r8, r8
 800c23a:	1419      	asrs	r1, r3, #16
 800c23c:	454e      	cmp	r6, r9
 800c23e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c242:	f84a 3b04 	str.w	r3, [sl], #4
 800c246:	d8e7      	bhi.n	800c218 <__mdiff+0x80>
 800c248:	1b33      	subs	r3, r6, r4
 800c24a:	3b15      	subs	r3, #21
 800c24c:	f023 0303 	bic.w	r3, r3, #3
 800c250:	3304      	adds	r3, #4
 800c252:	3415      	adds	r4, #21
 800c254:	42a6      	cmp	r6, r4
 800c256:	bf38      	it	cc
 800c258:	2304      	movcc	r3, #4
 800c25a:	441d      	add	r5, r3
 800c25c:	4473      	add	r3, lr
 800c25e:	469e      	mov	lr, r3
 800c260:	462e      	mov	r6, r5
 800c262:	4566      	cmp	r6, ip
 800c264:	d30e      	bcc.n	800c284 <__mdiff+0xec>
 800c266:	f10c 0203 	add.w	r2, ip, #3
 800c26a:	1b52      	subs	r2, r2, r5
 800c26c:	f022 0203 	bic.w	r2, r2, #3
 800c270:	3d03      	subs	r5, #3
 800c272:	45ac      	cmp	ip, r5
 800c274:	bf38      	it	cc
 800c276:	2200      	movcc	r2, #0
 800c278:	441a      	add	r2, r3
 800c27a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c27e:	b17b      	cbz	r3, 800c2a0 <__mdiff+0x108>
 800c280:	6107      	str	r7, [r0, #16]
 800c282:	e7a3      	b.n	800c1cc <__mdiff+0x34>
 800c284:	f856 8b04 	ldr.w	r8, [r6], #4
 800c288:	fa11 f288 	uxtah	r2, r1, r8
 800c28c:	1414      	asrs	r4, r2, #16
 800c28e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c292:	b292      	uxth	r2, r2
 800c294:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c298:	f84e 2b04 	str.w	r2, [lr], #4
 800c29c:	1421      	asrs	r1, r4, #16
 800c29e:	e7e0      	b.n	800c262 <__mdiff+0xca>
 800c2a0:	3f01      	subs	r7, #1
 800c2a2:	e7ea      	b.n	800c27a <__mdiff+0xe2>
 800c2a4:	0800e143 	.word	0x0800e143
 800c2a8:	0800e154 	.word	0x0800e154

0800c2ac <__d2b>:
 800c2ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	4689      	mov	r9, r1
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	ec57 6b10 	vmov	r6, r7, d0
 800c2b8:	4690      	mov	r8, r2
 800c2ba:	f7ff fccf 	bl	800bc5c <_Balloc>
 800c2be:	4604      	mov	r4, r0
 800c2c0:	b930      	cbnz	r0, 800c2d0 <__d2b+0x24>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4b25      	ldr	r3, [pc, #148]	; (800c35c <__d2b+0xb0>)
 800c2c6:	4826      	ldr	r0, [pc, #152]	; (800c360 <__d2b+0xb4>)
 800c2c8:	f240 310a 	movw	r1, #778	; 0x30a
 800c2cc:	f000 faac 	bl	800c828 <__assert_func>
 800c2d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c2d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2d8:	bb35      	cbnz	r5, 800c328 <__d2b+0x7c>
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	d028      	beq.n	800c332 <__d2b+0x86>
 800c2e0:	4668      	mov	r0, sp
 800c2e2:	9600      	str	r6, [sp, #0]
 800c2e4:	f7ff fd82 	bl	800bdec <__lo0bits>
 800c2e8:	9900      	ldr	r1, [sp, #0]
 800c2ea:	b300      	cbz	r0, 800c32e <__d2b+0x82>
 800c2ec:	9a01      	ldr	r2, [sp, #4]
 800c2ee:	f1c0 0320 	rsb	r3, r0, #32
 800c2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	40c2      	lsrs	r2, r0
 800c2fa:	6163      	str	r3, [r4, #20]
 800c2fc:	9201      	str	r2, [sp, #4]
 800c2fe:	9b01      	ldr	r3, [sp, #4]
 800c300:	61a3      	str	r3, [r4, #24]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bf14      	ite	ne
 800c306:	2202      	movne	r2, #2
 800c308:	2201      	moveq	r2, #1
 800c30a:	6122      	str	r2, [r4, #16]
 800c30c:	b1d5      	cbz	r5, 800c344 <__d2b+0x98>
 800c30e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c312:	4405      	add	r5, r0
 800c314:	f8c9 5000 	str.w	r5, [r9]
 800c318:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c31c:	f8c8 0000 	str.w	r0, [r8]
 800c320:	4620      	mov	r0, r4
 800c322:	b003      	add	sp, #12
 800c324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c32c:	e7d5      	b.n	800c2da <__d2b+0x2e>
 800c32e:	6161      	str	r1, [r4, #20]
 800c330:	e7e5      	b.n	800c2fe <__d2b+0x52>
 800c332:	a801      	add	r0, sp, #4
 800c334:	f7ff fd5a 	bl	800bdec <__lo0bits>
 800c338:	9b01      	ldr	r3, [sp, #4]
 800c33a:	6163      	str	r3, [r4, #20]
 800c33c:	2201      	movs	r2, #1
 800c33e:	6122      	str	r2, [r4, #16]
 800c340:	3020      	adds	r0, #32
 800c342:	e7e3      	b.n	800c30c <__d2b+0x60>
 800c344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c348:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c34c:	f8c9 0000 	str.w	r0, [r9]
 800c350:	6918      	ldr	r0, [r3, #16]
 800c352:	f7ff fd2b 	bl	800bdac <__hi0bits>
 800c356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c35a:	e7df      	b.n	800c31c <__d2b+0x70>
 800c35c:	0800e143 	.word	0x0800e143
 800c360:	0800e154 	.word	0x0800e154

0800c364 <_calloc_r>:
 800c364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c366:	fba1 2402 	umull	r2, r4, r1, r2
 800c36a:	b94c      	cbnz	r4, 800c380 <_calloc_r+0x1c>
 800c36c:	4611      	mov	r1, r2
 800c36e:	9201      	str	r2, [sp, #4]
 800c370:	f000 f87a 	bl	800c468 <_malloc_r>
 800c374:	9a01      	ldr	r2, [sp, #4]
 800c376:	4605      	mov	r5, r0
 800c378:	b930      	cbnz	r0, 800c388 <_calloc_r+0x24>
 800c37a:	4628      	mov	r0, r5
 800c37c:	b003      	add	sp, #12
 800c37e:	bd30      	pop	{r4, r5, pc}
 800c380:	220c      	movs	r2, #12
 800c382:	6002      	str	r2, [r0, #0]
 800c384:	2500      	movs	r5, #0
 800c386:	e7f8      	b.n	800c37a <_calloc_r+0x16>
 800c388:	4621      	mov	r1, r4
 800c38a:	f7fe f94f 	bl	800a62c <memset>
 800c38e:	e7f4      	b.n	800c37a <_calloc_r+0x16>

0800c390 <_free_r>:
 800c390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c392:	2900      	cmp	r1, #0
 800c394:	d044      	beq.n	800c420 <_free_r+0x90>
 800c396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c39a:	9001      	str	r0, [sp, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f1a1 0404 	sub.w	r4, r1, #4
 800c3a2:	bfb8      	it	lt
 800c3a4:	18e4      	addlt	r4, r4, r3
 800c3a6:	f000 fa9b 	bl	800c8e0 <__malloc_lock>
 800c3aa:	4a1e      	ldr	r2, [pc, #120]	; (800c424 <_free_r+0x94>)
 800c3ac:	9801      	ldr	r0, [sp, #4]
 800c3ae:	6813      	ldr	r3, [r2, #0]
 800c3b0:	b933      	cbnz	r3, 800c3c0 <_free_r+0x30>
 800c3b2:	6063      	str	r3, [r4, #4]
 800c3b4:	6014      	str	r4, [r2, #0]
 800c3b6:	b003      	add	sp, #12
 800c3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3bc:	f000 ba96 	b.w	800c8ec <__malloc_unlock>
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d908      	bls.n	800c3d6 <_free_r+0x46>
 800c3c4:	6825      	ldr	r5, [r4, #0]
 800c3c6:	1961      	adds	r1, r4, r5
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	bf01      	itttt	eq
 800c3cc:	6819      	ldreq	r1, [r3, #0]
 800c3ce:	685b      	ldreq	r3, [r3, #4]
 800c3d0:	1949      	addeq	r1, r1, r5
 800c3d2:	6021      	streq	r1, [r4, #0]
 800c3d4:	e7ed      	b.n	800c3b2 <_free_r+0x22>
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	b10b      	cbz	r3, 800c3e0 <_free_r+0x50>
 800c3dc:	42a3      	cmp	r3, r4
 800c3de:	d9fa      	bls.n	800c3d6 <_free_r+0x46>
 800c3e0:	6811      	ldr	r1, [r2, #0]
 800c3e2:	1855      	adds	r5, r2, r1
 800c3e4:	42a5      	cmp	r5, r4
 800c3e6:	d10b      	bne.n	800c400 <_free_r+0x70>
 800c3e8:	6824      	ldr	r4, [r4, #0]
 800c3ea:	4421      	add	r1, r4
 800c3ec:	1854      	adds	r4, r2, r1
 800c3ee:	42a3      	cmp	r3, r4
 800c3f0:	6011      	str	r1, [r2, #0]
 800c3f2:	d1e0      	bne.n	800c3b6 <_free_r+0x26>
 800c3f4:	681c      	ldr	r4, [r3, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	6053      	str	r3, [r2, #4]
 800c3fa:	4421      	add	r1, r4
 800c3fc:	6011      	str	r1, [r2, #0]
 800c3fe:	e7da      	b.n	800c3b6 <_free_r+0x26>
 800c400:	d902      	bls.n	800c408 <_free_r+0x78>
 800c402:	230c      	movs	r3, #12
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	e7d6      	b.n	800c3b6 <_free_r+0x26>
 800c408:	6825      	ldr	r5, [r4, #0]
 800c40a:	1961      	adds	r1, r4, r5
 800c40c:	428b      	cmp	r3, r1
 800c40e:	bf04      	itt	eq
 800c410:	6819      	ldreq	r1, [r3, #0]
 800c412:	685b      	ldreq	r3, [r3, #4]
 800c414:	6063      	str	r3, [r4, #4]
 800c416:	bf04      	itt	eq
 800c418:	1949      	addeq	r1, r1, r5
 800c41a:	6021      	streq	r1, [r4, #0]
 800c41c:	6054      	str	r4, [r2, #4]
 800c41e:	e7ca      	b.n	800c3b6 <_free_r+0x26>
 800c420:	b003      	add	sp, #12
 800c422:	bd30      	pop	{r4, r5, pc}
 800c424:	20000afc 	.word	0x20000afc

0800c428 <sbrk_aligned>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	4e0e      	ldr	r6, [pc, #56]	; (800c464 <sbrk_aligned+0x3c>)
 800c42c:	460c      	mov	r4, r1
 800c42e:	6831      	ldr	r1, [r6, #0]
 800c430:	4605      	mov	r5, r0
 800c432:	b911      	cbnz	r1, 800c43a <sbrk_aligned+0x12>
 800c434:	f000 f9e8 	bl	800c808 <_sbrk_r>
 800c438:	6030      	str	r0, [r6, #0]
 800c43a:	4621      	mov	r1, r4
 800c43c:	4628      	mov	r0, r5
 800c43e:	f000 f9e3 	bl	800c808 <_sbrk_r>
 800c442:	1c43      	adds	r3, r0, #1
 800c444:	d00a      	beq.n	800c45c <sbrk_aligned+0x34>
 800c446:	1cc4      	adds	r4, r0, #3
 800c448:	f024 0403 	bic.w	r4, r4, #3
 800c44c:	42a0      	cmp	r0, r4
 800c44e:	d007      	beq.n	800c460 <sbrk_aligned+0x38>
 800c450:	1a21      	subs	r1, r4, r0
 800c452:	4628      	mov	r0, r5
 800c454:	f000 f9d8 	bl	800c808 <_sbrk_r>
 800c458:	3001      	adds	r0, #1
 800c45a:	d101      	bne.n	800c460 <sbrk_aligned+0x38>
 800c45c:	f04f 34ff 	mov.w	r4, #4294967295
 800c460:	4620      	mov	r0, r4
 800c462:	bd70      	pop	{r4, r5, r6, pc}
 800c464:	20000b00 	.word	0x20000b00

0800c468 <_malloc_r>:
 800c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46c:	1ccd      	adds	r5, r1, #3
 800c46e:	f025 0503 	bic.w	r5, r5, #3
 800c472:	3508      	adds	r5, #8
 800c474:	2d0c      	cmp	r5, #12
 800c476:	bf38      	it	cc
 800c478:	250c      	movcc	r5, #12
 800c47a:	2d00      	cmp	r5, #0
 800c47c:	4607      	mov	r7, r0
 800c47e:	db01      	blt.n	800c484 <_malloc_r+0x1c>
 800c480:	42a9      	cmp	r1, r5
 800c482:	d905      	bls.n	800c490 <_malloc_r+0x28>
 800c484:	230c      	movs	r3, #12
 800c486:	603b      	str	r3, [r7, #0]
 800c488:	2600      	movs	r6, #0
 800c48a:	4630      	mov	r0, r6
 800c48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c490:	4e2e      	ldr	r6, [pc, #184]	; (800c54c <_malloc_r+0xe4>)
 800c492:	f000 fa25 	bl	800c8e0 <__malloc_lock>
 800c496:	6833      	ldr	r3, [r6, #0]
 800c498:	461c      	mov	r4, r3
 800c49a:	bb34      	cbnz	r4, 800c4ea <_malloc_r+0x82>
 800c49c:	4629      	mov	r1, r5
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f7ff ffc2 	bl	800c428 <sbrk_aligned>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	d14d      	bne.n	800c546 <_malloc_r+0xde>
 800c4aa:	6834      	ldr	r4, [r6, #0]
 800c4ac:	4626      	mov	r6, r4
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	d140      	bne.n	800c534 <_malloc_r+0xcc>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	eb04 0803 	add.w	r8, r4, r3
 800c4bc:	f000 f9a4 	bl	800c808 <_sbrk_r>
 800c4c0:	4580      	cmp	r8, r0
 800c4c2:	d13a      	bne.n	800c53a <_malloc_r+0xd2>
 800c4c4:	6821      	ldr	r1, [r4, #0]
 800c4c6:	3503      	adds	r5, #3
 800c4c8:	1a6d      	subs	r5, r5, r1
 800c4ca:	f025 0503 	bic.w	r5, r5, #3
 800c4ce:	3508      	adds	r5, #8
 800c4d0:	2d0c      	cmp	r5, #12
 800c4d2:	bf38      	it	cc
 800c4d4:	250c      	movcc	r5, #12
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7ff ffa5 	bl	800c428 <sbrk_aligned>
 800c4de:	3001      	adds	r0, #1
 800c4e0:	d02b      	beq.n	800c53a <_malloc_r+0xd2>
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	442b      	add	r3, r5
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	e00e      	b.n	800c508 <_malloc_r+0xa0>
 800c4ea:	6822      	ldr	r2, [r4, #0]
 800c4ec:	1b52      	subs	r2, r2, r5
 800c4ee:	d41e      	bmi.n	800c52e <_malloc_r+0xc6>
 800c4f0:	2a0b      	cmp	r2, #11
 800c4f2:	d916      	bls.n	800c522 <_malloc_r+0xba>
 800c4f4:	1961      	adds	r1, r4, r5
 800c4f6:	42a3      	cmp	r3, r4
 800c4f8:	6025      	str	r5, [r4, #0]
 800c4fa:	bf18      	it	ne
 800c4fc:	6059      	strne	r1, [r3, #4]
 800c4fe:	6863      	ldr	r3, [r4, #4]
 800c500:	bf08      	it	eq
 800c502:	6031      	streq	r1, [r6, #0]
 800c504:	5162      	str	r2, [r4, r5]
 800c506:	604b      	str	r3, [r1, #4]
 800c508:	4638      	mov	r0, r7
 800c50a:	f104 060b 	add.w	r6, r4, #11
 800c50e:	f000 f9ed 	bl	800c8ec <__malloc_unlock>
 800c512:	f026 0607 	bic.w	r6, r6, #7
 800c516:	1d23      	adds	r3, r4, #4
 800c518:	1af2      	subs	r2, r6, r3
 800c51a:	d0b6      	beq.n	800c48a <_malloc_r+0x22>
 800c51c:	1b9b      	subs	r3, r3, r6
 800c51e:	50a3      	str	r3, [r4, r2]
 800c520:	e7b3      	b.n	800c48a <_malloc_r+0x22>
 800c522:	6862      	ldr	r2, [r4, #4]
 800c524:	42a3      	cmp	r3, r4
 800c526:	bf0c      	ite	eq
 800c528:	6032      	streq	r2, [r6, #0]
 800c52a:	605a      	strne	r2, [r3, #4]
 800c52c:	e7ec      	b.n	800c508 <_malloc_r+0xa0>
 800c52e:	4623      	mov	r3, r4
 800c530:	6864      	ldr	r4, [r4, #4]
 800c532:	e7b2      	b.n	800c49a <_malloc_r+0x32>
 800c534:	4634      	mov	r4, r6
 800c536:	6876      	ldr	r6, [r6, #4]
 800c538:	e7b9      	b.n	800c4ae <_malloc_r+0x46>
 800c53a:	230c      	movs	r3, #12
 800c53c:	603b      	str	r3, [r7, #0]
 800c53e:	4638      	mov	r0, r7
 800c540:	f000 f9d4 	bl	800c8ec <__malloc_unlock>
 800c544:	e7a1      	b.n	800c48a <_malloc_r+0x22>
 800c546:	6025      	str	r5, [r4, #0]
 800c548:	e7de      	b.n	800c508 <_malloc_r+0xa0>
 800c54a:	bf00      	nop
 800c54c:	20000afc 	.word	0x20000afc

0800c550 <__ssputs_r>:
 800c550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c554:	688e      	ldr	r6, [r1, #8]
 800c556:	429e      	cmp	r6, r3
 800c558:	4682      	mov	sl, r0
 800c55a:	460c      	mov	r4, r1
 800c55c:	4690      	mov	r8, r2
 800c55e:	461f      	mov	r7, r3
 800c560:	d838      	bhi.n	800c5d4 <__ssputs_r+0x84>
 800c562:	898a      	ldrh	r2, [r1, #12]
 800c564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c568:	d032      	beq.n	800c5d0 <__ssputs_r+0x80>
 800c56a:	6825      	ldr	r5, [r4, #0]
 800c56c:	6909      	ldr	r1, [r1, #16]
 800c56e:	eba5 0901 	sub.w	r9, r5, r1
 800c572:	6965      	ldr	r5, [r4, #20]
 800c574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c57c:	3301      	adds	r3, #1
 800c57e:	444b      	add	r3, r9
 800c580:	106d      	asrs	r5, r5, #1
 800c582:	429d      	cmp	r5, r3
 800c584:	bf38      	it	cc
 800c586:	461d      	movcc	r5, r3
 800c588:	0553      	lsls	r3, r2, #21
 800c58a:	d531      	bpl.n	800c5f0 <__ssputs_r+0xa0>
 800c58c:	4629      	mov	r1, r5
 800c58e:	f7ff ff6b 	bl	800c468 <_malloc_r>
 800c592:	4606      	mov	r6, r0
 800c594:	b950      	cbnz	r0, 800c5ac <__ssputs_r+0x5c>
 800c596:	230c      	movs	r3, #12
 800c598:	f8ca 3000 	str.w	r3, [sl]
 800c59c:	89a3      	ldrh	r3, [r4, #12]
 800c59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ac:	6921      	ldr	r1, [r4, #16]
 800c5ae:	464a      	mov	r2, r9
 800c5b0:	f7fe f82e 	bl	800a610 <memcpy>
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	6126      	str	r6, [r4, #16]
 800c5c2:	6165      	str	r5, [r4, #20]
 800c5c4:	444e      	add	r6, r9
 800c5c6:	eba5 0509 	sub.w	r5, r5, r9
 800c5ca:	6026      	str	r6, [r4, #0]
 800c5cc:	60a5      	str	r5, [r4, #8]
 800c5ce:	463e      	mov	r6, r7
 800c5d0:	42be      	cmp	r6, r7
 800c5d2:	d900      	bls.n	800c5d6 <__ssputs_r+0x86>
 800c5d4:	463e      	mov	r6, r7
 800c5d6:	6820      	ldr	r0, [r4, #0]
 800c5d8:	4632      	mov	r2, r6
 800c5da:	4641      	mov	r1, r8
 800c5dc:	f000 f966 	bl	800c8ac <memmove>
 800c5e0:	68a3      	ldr	r3, [r4, #8]
 800c5e2:	1b9b      	subs	r3, r3, r6
 800c5e4:	60a3      	str	r3, [r4, #8]
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	4433      	add	r3, r6
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	e7db      	b.n	800c5a8 <__ssputs_r+0x58>
 800c5f0:	462a      	mov	r2, r5
 800c5f2:	f000 f981 	bl	800c8f8 <_realloc_r>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d1e1      	bne.n	800c5c0 <__ssputs_r+0x70>
 800c5fc:	6921      	ldr	r1, [r4, #16]
 800c5fe:	4650      	mov	r0, sl
 800c600:	f7ff fec6 	bl	800c390 <_free_r>
 800c604:	e7c7      	b.n	800c596 <__ssputs_r+0x46>
	...

0800c608 <_svfiprintf_r>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	4698      	mov	r8, r3
 800c60e:	898b      	ldrh	r3, [r1, #12]
 800c610:	061b      	lsls	r3, r3, #24
 800c612:	b09d      	sub	sp, #116	; 0x74
 800c614:	4607      	mov	r7, r0
 800c616:	460d      	mov	r5, r1
 800c618:	4614      	mov	r4, r2
 800c61a:	d50e      	bpl.n	800c63a <_svfiprintf_r+0x32>
 800c61c:	690b      	ldr	r3, [r1, #16]
 800c61e:	b963      	cbnz	r3, 800c63a <_svfiprintf_r+0x32>
 800c620:	2140      	movs	r1, #64	; 0x40
 800c622:	f7ff ff21 	bl	800c468 <_malloc_r>
 800c626:	6028      	str	r0, [r5, #0]
 800c628:	6128      	str	r0, [r5, #16]
 800c62a:	b920      	cbnz	r0, 800c636 <_svfiprintf_r+0x2e>
 800c62c:	230c      	movs	r3, #12
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	f04f 30ff 	mov.w	r0, #4294967295
 800c634:	e0d1      	b.n	800c7da <_svfiprintf_r+0x1d2>
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	616b      	str	r3, [r5, #20]
 800c63a:	2300      	movs	r3, #0
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	2320      	movs	r3, #32
 800c640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c644:	f8cd 800c 	str.w	r8, [sp, #12]
 800c648:	2330      	movs	r3, #48	; 0x30
 800c64a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7f4 <_svfiprintf_r+0x1ec>
 800c64e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c652:	f04f 0901 	mov.w	r9, #1
 800c656:	4623      	mov	r3, r4
 800c658:	469a      	mov	sl, r3
 800c65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c65e:	b10a      	cbz	r2, 800c664 <_svfiprintf_r+0x5c>
 800c660:	2a25      	cmp	r2, #37	; 0x25
 800c662:	d1f9      	bne.n	800c658 <_svfiprintf_r+0x50>
 800c664:	ebba 0b04 	subs.w	fp, sl, r4
 800c668:	d00b      	beq.n	800c682 <_svfiprintf_r+0x7a>
 800c66a:	465b      	mov	r3, fp
 800c66c:	4622      	mov	r2, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	4638      	mov	r0, r7
 800c672:	f7ff ff6d 	bl	800c550 <__ssputs_r>
 800c676:	3001      	adds	r0, #1
 800c678:	f000 80aa 	beq.w	800c7d0 <_svfiprintf_r+0x1c8>
 800c67c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c67e:	445a      	add	r2, fp
 800c680:	9209      	str	r2, [sp, #36]	; 0x24
 800c682:	f89a 3000 	ldrb.w	r3, [sl]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 80a2 	beq.w	800c7d0 <_svfiprintf_r+0x1c8>
 800c68c:	2300      	movs	r3, #0
 800c68e:	f04f 32ff 	mov.w	r2, #4294967295
 800c692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c696:	f10a 0a01 	add.w	sl, sl, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	9307      	str	r3, [sp, #28]
 800c69e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c6a4:	4654      	mov	r4, sl
 800c6a6:	2205      	movs	r2, #5
 800c6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ac:	4851      	ldr	r0, [pc, #324]	; (800c7f4 <_svfiprintf_r+0x1ec>)
 800c6ae:	f7f3 fdb7 	bl	8000220 <memchr>
 800c6b2:	9a04      	ldr	r2, [sp, #16]
 800c6b4:	b9d8      	cbnz	r0, 800c6ee <_svfiprintf_r+0xe6>
 800c6b6:	06d0      	lsls	r0, r2, #27
 800c6b8:	bf44      	itt	mi
 800c6ba:	2320      	movmi	r3, #32
 800c6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c0:	0711      	lsls	r1, r2, #28
 800c6c2:	bf44      	itt	mi
 800c6c4:	232b      	movmi	r3, #43	; 0x2b
 800c6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d0:	d015      	beq.n	800c6fe <_svfiprintf_r+0xf6>
 800c6d2:	9a07      	ldr	r2, [sp, #28]
 800c6d4:	4654      	mov	r4, sl
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f04f 0c0a 	mov.w	ip, #10
 800c6dc:	4621      	mov	r1, r4
 800c6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6e2:	3b30      	subs	r3, #48	; 0x30
 800c6e4:	2b09      	cmp	r3, #9
 800c6e6:	d94e      	bls.n	800c786 <_svfiprintf_r+0x17e>
 800c6e8:	b1b0      	cbz	r0, 800c718 <_svfiprintf_r+0x110>
 800c6ea:	9207      	str	r2, [sp, #28]
 800c6ec:	e014      	b.n	800c718 <_svfiprintf_r+0x110>
 800c6ee:	eba0 0308 	sub.w	r3, r0, r8
 800c6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	9304      	str	r3, [sp, #16]
 800c6fa:	46a2      	mov	sl, r4
 800c6fc:	e7d2      	b.n	800c6a4 <_svfiprintf_r+0x9c>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	1d19      	adds	r1, r3, #4
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	9103      	str	r1, [sp, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfbb      	ittet	lt
 800c70a:	425b      	neglt	r3, r3
 800c70c:	f042 0202 	orrlt.w	r2, r2, #2
 800c710:	9307      	strge	r3, [sp, #28]
 800c712:	9307      	strlt	r3, [sp, #28]
 800c714:	bfb8      	it	lt
 800c716:	9204      	strlt	r2, [sp, #16]
 800c718:	7823      	ldrb	r3, [r4, #0]
 800c71a:	2b2e      	cmp	r3, #46	; 0x2e
 800c71c:	d10c      	bne.n	800c738 <_svfiprintf_r+0x130>
 800c71e:	7863      	ldrb	r3, [r4, #1]
 800c720:	2b2a      	cmp	r3, #42	; 0x2a
 800c722:	d135      	bne.n	800c790 <_svfiprintf_r+0x188>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	1d1a      	adds	r2, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	9203      	str	r2, [sp, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfb8      	it	lt
 800c730:	f04f 33ff 	movlt.w	r3, #4294967295
 800c734:	3402      	adds	r4, #2
 800c736:	9305      	str	r3, [sp, #20]
 800c738:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c804 <_svfiprintf_r+0x1fc>
 800c73c:	7821      	ldrb	r1, [r4, #0]
 800c73e:	2203      	movs	r2, #3
 800c740:	4650      	mov	r0, sl
 800c742:	f7f3 fd6d 	bl	8000220 <memchr>
 800c746:	b140      	cbz	r0, 800c75a <_svfiprintf_r+0x152>
 800c748:	2340      	movs	r3, #64	; 0x40
 800c74a:	eba0 000a 	sub.w	r0, r0, sl
 800c74e:	fa03 f000 	lsl.w	r0, r3, r0
 800c752:	9b04      	ldr	r3, [sp, #16]
 800c754:	4303      	orrs	r3, r0
 800c756:	3401      	adds	r4, #1
 800c758:	9304      	str	r3, [sp, #16]
 800c75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75e:	4826      	ldr	r0, [pc, #152]	; (800c7f8 <_svfiprintf_r+0x1f0>)
 800c760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c764:	2206      	movs	r2, #6
 800c766:	f7f3 fd5b 	bl	8000220 <memchr>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d038      	beq.n	800c7e0 <_svfiprintf_r+0x1d8>
 800c76e:	4b23      	ldr	r3, [pc, #140]	; (800c7fc <_svfiprintf_r+0x1f4>)
 800c770:	bb1b      	cbnz	r3, 800c7ba <_svfiprintf_r+0x1b2>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	3307      	adds	r3, #7
 800c776:	f023 0307 	bic.w	r3, r3, #7
 800c77a:	3308      	adds	r3, #8
 800c77c:	9303      	str	r3, [sp, #12]
 800c77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c780:	4433      	add	r3, r6
 800c782:	9309      	str	r3, [sp, #36]	; 0x24
 800c784:	e767      	b.n	800c656 <_svfiprintf_r+0x4e>
 800c786:	fb0c 3202 	mla	r2, ip, r2, r3
 800c78a:	460c      	mov	r4, r1
 800c78c:	2001      	movs	r0, #1
 800c78e:	e7a5      	b.n	800c6dc <_svfiprintf_r+0xd4>
 800c790:	2300      	movs	r3, #0
 800c792:	3401      	adds	r4, #1
 800c794:	9305      	str	r3, [sp, #20]
 800c796:	4619      	mov	r1, r3
 800c798:	f04f 0c0a 	mov.w	ip, #10
 800c79c:	4620      	mov	r0, r4
 800c79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a2:	3a30      	subs	r2, #48	; 0x30
 800c7a4:	2a09      	cmp	r2, #9
 800c7a6:	d903      	bls.n	800c7b0 <_svfiprintf_r+0x1a8>
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0c5      	beq.n	800c738 <_svfiprintf_r+0x130>
 800c7ac:	9105      	str	r1, [sp, #20]
 800c7ae:	e7c3      	b.n	800c738 <_svfiprintf_r+0x130>
 800c7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e7f0      	b.n	800c79c <_svfiprintf_r+0x194>
 800c7ba:	ab03      	add	r3, sp, #12
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <_svfiprintf_r+0x1f8>)
 800c7c2:	a904      	add	r1, sp, #16
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	f7fd ffd9 	bl	800a77c <_printf_float>
 800c7ca:	1c42      	adds	r2, r0, #1
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	d1d6      	bne.n	800c77e <_svfiprintf_r+0x176>
 800c7d0:	89ab      	ldrh	r3, [r5, #12]
 800c7d2:	065b      	lsls	r3, r3, #25
 800c7d4:	f53f af2c 	bmi.w	800c630 <_svfiprintf_r+0x28>
 800c7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7da:	b01d      	add	sp, #116	; 0x74
 800c7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e0:	ab03      	add	r3, sp, #12
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	462a      	mov	r2, r5
 800c7e6:	4b06      	ldr	r3, [pc, #24]	; (800c800 <_svfiprintf_r+0x1f8>)
 800c7e8:	a904      	add	r1, sp, #16
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f7fe fa6a 	bl	800acc4 <_printf_i>
 800c7f0:	e7eb      	b.n	800c7ca <_svfiprintf_r+0x1c2>
 800c7f2:	bf00      	nop
 800c7f4:	0800e2ac 	.word	0x0800e2ac
 800c7f8:	0800e2b6 	.word	0x0800e2b6
 800c7fc:	0800a77d 	.word	0x0800a77d
 800c800:	0800c551 	.word	0x0800c551
 800c804:	0800e2b2 	.word	0x0800e2b2

0800c808 <_sbrk_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	4d06      	ldr	r5, [pc, #24]	; (800c824 <_sbrk_r+0x1c>)
 800c80c:	2300      	movs	r3, #0
 800c80e:	4604      	mov	r4, r0
 800c810:	4608      	mov	r0, r1
 800c812:	602b      	str	r3, [r5, #0]
 800c814:	f7f7 fda0 	bl	8004358 <_sbrk>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d102      	bne.n	800c822 <_sbrk_r+0x1a>
 800c81c:	682b      	ldr	r3, [r5, #0]
 800c81e:	b103      	cbz	r3, 800c822 <_sbrk_r+0x1a>
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	20000b04 	.word	0x20000b04

0800c828 <__assert_func>:
 800c828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82a:	4614      	mov	r4, r2
 800c82c:	461a      	mov	r2, r3
 800c82e:	4b09      	ldr	r3, [pc, #36]	; (800c854 <__assert_func+0x2c>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4605      	mov	r5, r0
 800c834:	68d8      	ldr	r0, [r3, #12]
 800c836:	b14c      	cbz	r4, 800c84c <__assert_func+0x24>
 800c838:	4b07      	ldr	r3, [pc, #28]	; (800c858 <__assert_func+0x30>)
 800c83a:	9100      	str	r1, [sp, #0]
 800c83c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c840:	4906      	ldr	r1, [pc, #24]	; (800c85c <__assert_func+0x34>)
 800c842:	462b      	mov	r3, r5
 800c844:	f000 f80e 	bl	800c864 <fiprintf>
 800c848:	f000 faac 	bl	800cda4 <abort>
 800c84c:	4b04      	ldr	r3, [pc, #16]	; (800c860 <__assert_func+0x38>)
 800c84e:	461c      	mov	r4, r3
 800c850:	e7f3      	b.n	800c83a <__assert_func+0x12>
 800c852:	bf00      	nop
 800c854:	20000014 	.word	0x20000014
 800c858:	0800e2bd 	.word	0x0800e2bd
 800c85c:	0800e2ca 	.word	0x0800e2ca
 800c860:	0800e2f8 	.word	0x0800e2f8

0800c864 <fiprintf>:
 800c864:	b40e      	push	{r1, r2, r3}
 800c866:	b503      	push	{r0, r1, lr}
 800c868:	4601      	mov	r1, r0
 800c86a:	ab03      	add	r3, sp, #12
 800c86c:	4805      	ldr	r0, [pc, #20]	; (800c884 <fiprintf+0x20>)
 800c86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c872:	6800      	ldr	r0, [r0, #0]
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	f000 f897 	bl	800c9a8 <_vfiprintf_r>
 800c87a:	b002      	add	sp, #8
 800c87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c880:	b003      	add	sp, #12
 800c882:	4770      	bx	lr
 800c884:	20000014 	.word	0x20000014

0800c888 <__ascii_mbtowc>:
 800c888:	b082      	sub	sp, #8
 800c88a:	b901      	cbnz	r1, 800c88e <__ascii_mbtowc+0x6>
 800c88c:	a901      	add	r1, sp, #4
 800c88e:	b142      	cbz	r2, 800c8a2 <__ascii_mbtowc+0x1a>
 800c890:	b14b      	cbz	r3, 800c8a6 <__ascii_mbtowc+0x1e>
 800c892:	7813      	ldrb	r3, [r2, #0]
 800c894:	600b      	str	r3, [r1, #0]
 800c896:	7812      	ldrb	r2, [r2, #0]
 800c898:	1e10      	subs	r0, r2, #0
 800c89a:	bf18      	it	ne
 800c89c:	2001      	movne	r0, #1
 800c89e:	b002      	add	sp, #8
 800c8a0:	4770      	bx	lr
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	e7fb      	b.n	800c89e <__ascii_mbtowc+0x16>
 800c8a6:	f06f 0001 	mvn.w	r0, #1
 800c8aa:	e7f8      	b.n	800c89e <__ascii_mbtowc+0x16>

0800c8ac <memmove>:
 800c8ac:	4288      	cmp	r0, r1
 800c8ae:	b510      	push	{r4, lr}
 800c8b0:	eb01 0402 	add.w	r4, r1, r2
 800c8b4:	d902      	bls.n	800c8bc <memmove+0x10>
 800c8b6:	4284      	cmp	r4, r0
 800c8b8:	4623      	mov	r3, r4
 800c8ba:	d807      	bhi.n	800c8cc <memmove+0x20>
 800c8bc:	1e43      	subs	r3, r0, #1
 800c8be:	42a1      	cmp	r1, r4
 800c8c0:	d008      	beq.n	800c8d4 <memmove+0x28>
 800c8c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ca:	e7f8      	b.n	800c8be <memmove+0x12>
 800c8cc:	4402      	add	r2, r0
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	428a      	cmp	r2, r1
 800c8d2:	d100      	bne.n	800c8d6 <memmove+0x2a>
 800c8d4:	bd10      	pop	{r4, pc}
 800c8d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8de:	e7f7      	b.n	800c8d0 <memmove+0x24>

0800c8e0 <__malloc_lock>:
 800c8e0:	4801      	ldr	r0, [pc, #4]	; (800c8e8 <__malloc_lock+0x8>)
 800c8e2:	f000 bc1f 	b.w	800d124 <__retarget_lock_acquire_recursive>
 800c8e6:	bf00      	nop
 800c8e8:	20000b08 	.word	0x20000b08

0800c8ec <__malloc_unlock>:
 800c8ec:	4801      	ldr	r0, [pc, #4]	; (800c8f4 <__malloc_unlock+0x8>)
 800c8ee:	f000 bc1a 	b.w	800d126 <__retarget_lock_release_recursive>
 800c8f2:	bf00      	nop
 800c8f4:	20000b08 	.word	0x20000b08

0800c8f8 <_realloc_r>:
 800c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4614      	mov	r4, r2
 800c900:	460e      	mov	r6, r1
 800c902:	b921      	cbnz	r1, 800c90e <_realloc_r+0x16>
 800c904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	4611      	mov	r1, r2
 800c90a:	f7ff bdad 	b.w	800c468 <_malloc_r>
 800c90e:	b92a      	cbnz	r2, 800c91c <_realloc_r+0x24>
 800c910:	f7ff fd3e 	bl	800c390 <_free_r>
 800c914:	4625      	mov	r5, r4
 800c916:	4628      	mov	r0, r5
 800c918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91c:	f000 fc6a 	bl	800d1f4 <_malloc_usable_size_r>
 800c920:	4284      	cmp	r4, r0
 800c922:	4607      	mov	r7, r0
 800c924:	d802      	bhi.n	800c92c <_realloc_r+0x34>
 800c926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c92a:	d812      	bhi.n	800c952 <_realloc_r+0x5a>
 800c92c:	4621      	mov	r1, r4
 800c92e:	4640      	mov	r0, r8
 800c930:	f7ff fd9a 	bl	800c468 <_malloc_r>
 800c934:	4605      	mov	r5, r0
 800c936:	2800      	cmp	r0, #0
 800c938:	d0ed      	beq.n	800c916 <_realloc_r+0x1e>
 800c93a:	42bc      	cmp	r4, r7
 800c93c:	4622      	mov	r2, r4
 800c93e:	4631      	mov	r1, r6
 800c940:	bf28      	it	cs
 800c942:	463a      	movcs	r2, r7
 800c944:	f7fd fe64 	bl	800a610 <memcpy>
 800c948:	4631      	mov	r1, r6
 800c94a:	4640      	mov	r0, r8
 800c94c:	f7ff fd20 	bl	800c390 <_free_r>
 800c950:	e7e1      	b.n	800c916 <_realloc_r+0x1e>
 800c952:	4635      	mov	r5, r6
 800c954:	e7df      	b.n	800c916 <_realloc_r+0x1e>

0800c956 <__sfputc_r>:
 800c956:	6893      	ldr	r3, [r2, #8]
 800c958:	3b01      	subs	r3, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	b410      	push	{r4}
 800c95e:	6093      	str	r3, [r2, #8]
 800c960:	da08      	bge.n	800c974 <__sfputc_r+0x1e>
 800c962:	6994      	ldr	r4, [r2, #24]
 800c964:	42a3      	cmp	r3, r4
 800c966:	db01      	blt.n	800c96c <__sfputc_r+0x16>
 800c968:	290a      	cmp	r1, #10
 800c96a:	d103      	bne.n	800c974 <__sfputc_r+0x1e>
 800c96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c970:	f000 b94a 	b.w	800cc08 <__swbuf_r>
 800c974:	6813      	ldr	r3, [r2, #0]
 800c976:	1c58      	adds	r0, r3, #1
 800c978:	6010      	str	r0, [r2, #0]
 800c97a:	7019      	strb	r1, [r3, #0]
 800c97c:	4608      	mov	r0, r1
 800c97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <__sfputs_r>:
 800c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	4614      	mov	r4, r2
 800c98c:	18d5      	adds	r5, r2, r3
 800c98e:	42ac      	cmp	r4, r5
 800c990:	d101      	bne.n	800c996 <__sfputs_r+0x12>
 800c992:	2000      	movs	r0, #0
 800c994:	e007      	b.n	800c9a6 <__sfputs_r+0x22>
 800c996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c99a:	463a      	mov	r2, r7
 800c99c:	4630      	mov	r0, r6
 800c99e:	f7ff ffda 	bl	800c956 <__sfputc_r>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	d1f3      	bne.n	800c98e <__sfputs_r+0xa>
 800c9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9a8 <_vfiprintf_r>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	b09d      	sub	sp, #116	; 0x74
 800c9b0:	4614      	mov	r4, r2
 800c9b2:	4698      	mov	r8, r3
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	b118      	cbz	r0, 800c9c0 <_vfiprintf_r+0x18>
 800c9b8:	6983      	ldr	r3, [r0, #24]
 800c9ba:	b90b      	cbnz	r3, 800c9c0 <_vfiprintf_r+0x18>
 800c9bc:	f000 fb14 	bl	800cfe8 <__sinit>
 800c9c0:	4b89      	ldr	r3, [pc, #548]	; (800cbe8 <_vfiprintf_r+0x240>)
 800c9c2:	429d      	cmp	r5, r3
 800c9c4:	d11b      	bne.n	800c9fe <_vfiprintf_r+0x56>
 800c9c6:	6875      	ldr	r5, [r6, #4]
 800c9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ca:	07d9      	lsls	r1, r3, #31
 800c9cc:	d405      	bmi.n	800c9da <_vfiprintf_r+0x32>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	059a      	lsls	r2, r3, #22
 800c9d2:	d402      	bmi.n	800c9da <_vfiprintf_r+0x32>
 800c9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d6:	f000 fba5 	bl	800d124 <__retarget_lock_acquire_recursive>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	071b      	lsls	r3, r3, #28
 800c9de:	d501      	bpl.n	800c9e4 <_vfiprintf_r+0x3c>
 800c9e0:	692b      	ldr	r3, [r5, #16]
 800c9e2:	b9eb      	cbnz	r3, 800ca20 <_vfiprintf_r+0x78>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f000 f96e 	bl	800ccc8 <__swsetup_r>
 800c9ec:	b1c0      	cbz	r0, 800ca20 <_vfiprintf_r+0x78>
 800c9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9f0:	07dc      	lsls	r4, r3, #31
 800c9f2:	d50e      	bpl.n	800ca12 <_vfiprintf_r+0x6a>
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	b01d      	add	sp, #116	; 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	4b7b      	ldr	r3, [pc, #492]	; (800cbec <_vfiprintf_r+0x244>)
 800ca00:	429d      	cmp	r5, r3
 800ca02:	d101      	bne.n	800ca08 <_vfiprintf_r+0x60>
 800ca04:	68b5      	ldr	r5, [r6, #8]
 800ca06:	e7df      	b.n	800c9c8 <_vfiprintf_r+0x20>
 800ca08:	4b79      	ldr	r3, [pc, #484]	; (800cbf0 <_vfiprintf_r+0x248>)
 800ca0a:	429d      	cmp	r5, r3
 800ca0c:	bf08      	it	eq
 800ca0e:	68f5      	ldreq	r5, [r6, #12]
 800ca10:	e7da      	b.n	800c9c8 <_vfiprintf_r+0x20>
 800ca12:	89ab      	ldrh	r3, [r5, #12]
 800ca14:	0598      	lsls	r0, r3, #22
 800ca16:	d4ed      	bmi.n	800c9f4 <_vfiprintf_r+0x4c>
 800ca18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca1a:	f000 fb84 	bl	800d126 <__retarget_lock_release_recursive>
 800ca1e:	e7e9      	b.n	800c9f4 <_vfiprintf_r+0x4c>
 800ca20:	2300      	movs	r3, #0
 800ca22:	9309      	str	r3, [sp, #36]	; 0x24
 800ca24:	2320      	movs	r3, #32
 800ca26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca2e:	2330      	movs	r3, #48	; 0x30
 800ca30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cbf4 <_vfiprintf_r+0x24c>
 800ca34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca38:	f04f 0901 	mov.w	r9, #1
 800ca3c:	4623      	mov	r3, r4
 800ca3e:	469a      	mov	sl, r3
 800ca40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca44:	b10a      	cbz	r2, 800ca4a <_vfiprintf_r+0xa2>
 800ca46:	2a25      	cmp	r2, #37	; 0x25
 800ca48:	d1f9      	bne.n	800ca3e <_vfiprintf_r+0x96>
 800ca4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca4e:	d00b      	beq.n	800ca68 <_vfiprintf_r+0xc0>
 800ca50:	465b      	mov	r3, fp
 800ca52:	4622      	mov	r2, r4
 800ca54:	4629      	mov	r1, r5
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7ff ff94 	bl	800c984 <__sfputs_r>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	f000 80aa 	beq.w	800cbb6 <_vfiprintf_r+0x20e>
 800ca62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca64:	445a      	add	r2, fp
 800ca66:	9209      	str	r2, [sp, #36]	; 0x24
 800ca68:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 80a2 	beq.w	800cbb6 <_vfiprintf_r+0x20e>
 800ca72:	2300      	movs	r3, #0
 800ca74:	f04f 32ff 	mov.w	r2, #4294967295
 800ca78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca7c:	f10a 0a01 	add.w	sl, sl, #1
 800ca80:	9304      	str	r3, [sp, #16]
 800ca82:	9307      	str	r3, [sp, #28]
 800ca84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca88:	931a      	str	r3, [sp, #104]	; 0x68
 800ca8a:	4654      	mov	r4, sl
 800ca8c:	2205      	movs	r2, #5
 800ca8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca92:	4858      	ldr	r0, [pc, #352]	; (800cbf4 <_vfiprintf_r+0x24c>)
 800ca94:	f7f3 fbc4 	bl	8000220 <memchr>
 800ca98:	9a04      	ldr	r2, [sp, #16]
 800ca9a:	b9d8      	cbnz	r0, 800cad4 <_vfiprintf_r+0x12c>
 800ca9c:	06d1      	lsls	r1, r2, #27
 800ca9e:	bf44      	itt	mi
 800caa0:	2320      	movmi	r3, #32
 800caa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa6:	0713      	lsls	r3, r2, #28
 800caa8:	bf44      	itt	mi
 800caaa:	232b      	movmi	r3, #43	; 0x2b
 800caac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cab0:	f89a 3000 	ldrb.w	r3, [sl]
 800cab4:	2b2a      	cmp	r3, #42	; 0x2a
 800cab6:	d015      	beq.n	800cae4 <_vfiprintf_r+0x13c>
 800cab8:	9a07      	ldr	r2, [sp, #28]
 800caba:	4654      	mov	r4, sl
 800cabc:	2000      	movs	r0, #0
 800cabe:	f04f 0c0a 	mov.w	ip, #10
 800cac2:	4621      	mov	r1, r4
 800cac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cac8:	3b30      	subs	r3, #48	; 0x30
 800caca:	2b09      	cmp	r3, #9
 800cacc:	d94e      	bls.n	800cb6c <_vfiprintf_r+0x1c4>
 800cace:	b1b0      	cbz	r0, 800cafe <_vfiprintf_r+0x156>
 800cad0:	9207      	str	r2, [sp, #28]
 800cad2:	e014      	b.n	800cafe <_vfiprintf_r+0x156>
 800cad4:	eba0 0308 	sub.w	r3, r0, r8
 800cad8:	fa09 f303 	lsl.w	r3, r9, r3
 800cadc:	4313      	orrs	r3, r2
 800cade:	9304      	str	r3, [sp, #16]
 800cae0:	46a2      	mov	sl, r4
 800cae2:	e7d2      	b.n	800ca8a <_vfiprintf_r+0xe2>
 800cae4:	9b03      	ldr	r3, [sp, #12]
 800cae6:	1d19      	adds	r1, r3, #4
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	9103      	str	r1, [sp, #12]
 800caec:	2b00      	cmp	r3, #0
 800caee:	bfbb      	ittet	lt
 800caf0:	425b      	neglt	r3, r3
 800caf2:	f042 0202 	orrlt.w	r2, r2, #2
 800caf6:	9307      	strge	r3, [sp, #28]
 800caf8:	9307      	strlt	r3, [sp, #28]
 800cafa:	bfb8      	it	lt
 800cafc:	9204      	strlt	r2, [sp, #16]
 800cafe:	7823      	ldrb	r3, [r4, #0]
 800cb00:	2b2e      	cmp	r3, #46	; 0x2e
 800cb02:	d10c      	bne.n	800cb1e <_vfiprintf_r+0x176>
 800cb04:	7863      	ldrb	r3, [r4, #1]
 800cb06:	2b2a      	cmp	r3, #42	; 0x2a
 800cb08:	d135      	bne.n	800cb76 <_vfiprintf_r+0x1ce>
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	1d1a      	adds	r2, r3, #4
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	9203      	str	r2, [sp, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	bfb8      	it	lt
 800cb16:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb1a:	3402      	adds	r4, #2
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc04 <_vfiprintf_r+0x25c>
 800cb22:	7821      	ldrb	r1, [r4, #0]
 800cb24:	2203      	movs	r2, #3
 800cb26:	4650      	mov	r0, sl
 800cb28:	f7f3 fb7a 	bl	8000220 <memchr>
 800cb2c:	b140      	cbz	r0, 800cb40 <_vfiprintf_r+0x198>
 800cb2e:	2340      	movs	r3, #64	; 0x40
 800cb30:	eba0 000a 	sub.w	r0, r0, sl
 800cb34:	fa03 f000 	lsl.w	r0, r3, r0
 800cb38:	9b04      	ldr	r3, [sp, #16]
 800cb3a:	4303      	orrs	r3, r0
 800cb3c:	3401      	adds	r4, #1
 800cb3e:	9304      	str	r3, [sp, #16]
 800cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb44:	482c      	ldr	r0, [pc, #176]	; (800cbf8 <_vfiprintf_r+0x250>)
 800cb46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb4a:	2206      	movs	r2, #6
 800cb4c:	f7f3 fb68 	bl	8000220 <memchr>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d03f      	beq.n	800cbd4 <_vfiprintf_r+0x22c>
 800cb54:	4b29      	ldr	r3, [pc, #164]	; (800cbfc <_vfiprintf_r+0x254>)
 800cb56:	bb1b      	cbnz	r3, 800cba0 <_vfiprintf_r+0x1f8>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	3307      	adds	r3, #7
 800cb5c:	f023 0307 	bic.w	r3, r3, #7
 800cb60:	3308      	adds	r3, #8
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb66:	443b      	add	r3, r7
 800cb68:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6a:	e767      	b.n	800ca3c <_vfiprintf_r+0x94>
 800cb6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb70:	460c      	mov	r4, r1
 800cb72:	2001      	movs	r0, #1
 800cb74:	e7a5      	b.n	800cac2 <_vfiprintf_r+0x11a>
 800cb76:	2300      	movs	r3, #0
 800cb78:	3401      	adds	r4, #1
 800cb7a:	9305      	str	r3, [sp, #20]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	f04f 0c0a 	mov.w	ip, #10
 800cb82:	4620      	mov	r0, r4
 800cb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb88:	3a30      	subs	r2, #48	; 0x30
 800cb8a:	2a09      	cmp	r2, #9
 800cb8c:	d903      	bls.n	800cb96 <_vfiprintf_r+0x1ee>
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0c5      	beq.n	800cb1e <_vfiprintf_r+0x176>
 800cb92:	9105      	str	r1, [sp, #20]
 800cb94:	e7c3      	b.n	800cb1e <_vfiprintf_r+0x176>
 800cb96:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e7f0      	b.n	800cb82 <_vfiprintf_r+0x1da>
 800cba0:	ab03      	add	r3, sp, #12
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	462a      	mov	r2, r5
 800cba6:	4b16      	ldr	r3, [pc, #88]	; (800cc00 <_vfiprintf_r+0x258>)
 800cba8:	a904      	add	r1, sp, #16
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f7fd fde6 	bl	800a77c <_printf_float>
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	1c78      	adds	r0, r7, #1
 800cbb4:	d1d6      	bne.n	800cb64 <_vfiprintf_r+0x1bc>
 800cbb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbb8:	07d9      	lsls	r1, r3, #31
 800cbba:	d405      	bmi.n	800cbc8 <_vfiprintf_r+0x220>
 800cbbc:	89ab      	ldrh	r3, [r5, #12]
 800cbbe:	059a      	lsls	r2, r3, #22
 800cbc0:	d402      	bmi.n	800cbc8 <_vfiprintf_r+0x220>
 800cbc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbc4:	f000 faaf 	bl	800d126 <__retarget_lock_release_recursive>
 800cbc8:	89ab      	ldrh	r3, [r5, #12]
 800cbca:	065b      	lsls	r3, r3, #25
 800cbcc:	f53f af12 	bmi.w	800c9f4 <_vfiprintf_r+0x4c>
 800cbd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbd2:	e711      	b.n	800c9f8 <_vfiprintf_r+0x50>
 800cbd4:	ab03      	add	r3, sp, #12
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	462a      	mov	r2, r5
 800cbda:	4b09      	ldr	r3, [pc, #36]	; (800cc00 <_vfiprintf_r+0x258>)
 800cbdc:	a904      	add	r1, sp, #16
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f7fe f870 	bl	800acc4 <_printf_i>
 800cbe4:	e7e4      	b.n	800cbb0 <_vfiprintf_r+0x208>
 800cbe6:	bf00      	nop
 800cbe8:	0800e424 	.word	0x0800e424
 800cbec:	0800e444 	.word	0x0800e444
 800cbf0:	0800e404 	.word	0x0800e404
 800cbf4:	0800e2ac 	.word	0x0800e2ac
 800cbf8:	0800e2b6 	.word	0x0800e2b6
 800cbfc:	0800a77d 	.word	0x0800a77d
 800cc00:	0800c985 	.word	0x0800c985
 800cc04:	0800e2b2 	.word	0x0800e2b2

0800cc08 <__swbuf_r>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	460e      	mov	r6, r1
 800cc0c:	4614      	mov	r4, r2
 800cc0e:	4605      	mov	r5, r0
 800cc10:	b118      	cbz	r0, 800cc1a <__swbuf_r+0x12>
 800cc12:	6983      	ldr	r3, [r0, #24]
 800cc14:	b90b      	cbnz	r3, 800cc1a <__swbuf_r+0x12>
 800cc16:	f000 f9e7 	bl	800cfe8 <__sinit>
 800cc1a:	4b21      	ldr	r3, [pc, #132]	; (800cca0 <__swbuf_r+0x98>)
 800cc1c:	429c      	cmp	r4, r3
 800cc1e:	d12b      	bne.n	800cc78 <__swbuf_r+0x70>
 800cc20:	686c      	ldr	r4, [r5, #4]
 800cc22:	69a3      	ldr	r3, [r4, #24]
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	071a      	lsls	r2, r3, #28
 800cc2a:	d52f      	bpl.n	800cc8c <__swbuf_r+0x84>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	b36b      	cbz	r3, 800cc8c <__swbuf_r+0x84>
 800cc30:	6923      	ldr	r3, [r4, #16]
 800cc32:	6820      	ldr	r0, [r4, #0]
 800cc34:	1ac0      	subs	r0, r0, r3
 800cc36:	6963      	ldr	r3, [r4, #20]
 800cc38:	b2f6      	uxtb	r6, r6
 800cc3a:	4283      	cmp	r3, r0
 800cc3c:	4637      	mov	r7, r6
 800cc3e:	dc04      	bgt.n	800cc4a <__swbuf_r+0x42>
 800cc40:	4621      	mov	r1, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f93c 	bl	800cec0 <_fflush_r>
 800cc48:	bb30      	cbnz	r0, 800cc98 <__swbuf_r+0x90>
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	60a3      	str	r3, [r4, #8]
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	6022      	str	r2, [r4, #0]
 800cc56:	701e      	strb	r6, [r3, #0]
 800cc58:	6963      	ldr	r3, [r4, #20]
 800cc5a:	3001      	adds	r0, #1
 800cc5c:	4283      	cmp	r3, r0
 800cc5e:	d004      	beq.n	800cc6a <__swbuf_r+0x62>
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	07db      	lsls	r3, r3, #31
 800cc64:	d506      	bpl.n	800cc74 <__swbuf_r+0x6c>
 800cc66:	2e0a      	cmp	r6, #10
 800cc68:	d104      	bne.n	800cc74 <__swbuf_r+0x6c>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f000 f927 	bl	800cec0 <_fflush_r>
 800cc72:	b988      	cbnz	r0, 800cc98 <__swbuf_r+0x90>
 800cc74:	4638      	mov	r0, r7
 800cc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <__swbuf_r+0x9c>)
 800cc7a:	429c      	cmp	r4, r3
 800cc7c:	d101      	bne.n	800cc82 <__swbuf_r+0x7a>
 800cc7e:	68ac      	ldr	r4, [r5, #8]
 800cc80:	e7cf      	b.n	800cc22 <__swbuf_r+0x1a>
 800cc82:	4b09      	ldr	r3, [pc, #36]	; (800cca8 <__swbuf_r+0xa0>)
 800cc84:	429c      	cmp	r4, r3
 800cc86:	bf08      	it	eq
 800cc88:	68ec      	ldreq	r4, [r5, #12]
 800cc8a:	e7ca      	b.n	800cc22 <__swbuf_r+0x1a>
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f000 f81a 	bl	800ccc8 <__swsetup_r>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d0cb      	beq.n	800cc30 <__swbuf_r+0x28>
 800cc98:	f04f 37ff 	mov.w	r7, #4294967295
 800cc9c:	e7ea      	b.n	800cc74 <__swbuf_r+0x6c>
 800cc9e:	bf00      	nop
 800cca0:	0800e424 	.word	0x0800e424
 800cca4:	0800e444 	.word	0x0800e444
 800cca8:	0800e404 	.word	0x0800e404

0800ccac <__ascii_wctomb>:
 800ccac:	b149      	cbz	r1, 800ccc2 <__ascii_wctomb+0x16>
 800ccae:	2aff      	cmp	r2, #255	; 0xff
 800ccb0:	bf85      	ittet	hi
 800ccb2:	238a      	movhi	r3, #138	; 0x8a
 800ccb4:	6003      	strhi	r3, [r0, #0]
 800ccb6:	700a      	strbls	r2, [r1, #0]
 800ccb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ccbc:	bf98      	it	ls
 800ccbe:	2001      	movls	r0, #1
 800ccc0:	4770      	bx	lr
 800ccc2:	4608      	mov	r0, r1
 800ccc4:	4770      	bx	lr
	...

0800ccc8 <__swsetup_r>:
 800ccc8:	4b32      	ldr	r3, [pc, #200]	; (800cd94 <__swsetup_r+0xcc>)
 800ccca:	b570      	push	{r4, r5, r6, lr}
 800cccc:	681d      	ldr	r5, [r3, #0]
 800ccce:	4606      	mov	r6, r0
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	b125      	cbz	r5, 800ccde <__swsetup_r+0x16>
 800ccd4:	69ab      	ldr	r3, [r5, #24]
 800ccd6:	b913      	cbnz	r3, 800ccde <__swsetup_r+0x16>
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f000 f985 	bl	800cfe8 <__sinit>
 800ccde:	4b2e      	ldr	r3, [pc, #184]	; (800cd98 <__swsetup_r+0xd0>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	d10f      	bne.n	800cd04 <__swsetup_r+0x3c>
 800cce4:	686c      	ldr	r4, [r5, #4]
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccec:	0719      	lsls	r1, r3, #28
 800ccee:	d42c      	bmi.n	800cd4a <__swsetup_r+0x82>
 800ccf0:	06dd      	lsls	r5, r3, #27
 800ccf2:	d411      	bmi.n	800cd18 <__swsetup_r+0x50>
 800ccf4:	2309      	movs	r3, #9
 800ccf6:	6033      	str	r3, [r6, #0]
 800ccf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccfc:	81a3      	strh	r3, [r4, #12]
 800ccfe:	f04f 30ff 	mov.w	r0, #4294967295
 800cd02:	e03e      	b.n	800cd82 <__swsetup_r+0xba>
 800cd04:	4b25      	ldr	r3, [pc, #148]	; (800cd9c <__swsetup_r+0xd4>)
 800cd06:	429c      	cmp	r4, r3
 800cd08:	d101      	bne.n	800cd0e <__swsetup_r+0x46>
 800cd0a:	68ac      	ldr	r4, [r5, #8]
 800cd0c:	e7eb      	b.n	800cce6 <__swsetup_r+0x1e>
 800cd0e:	4b24      	ldr	r3, [pc, #144]	; (800cda0 <__swsetup_r+0xd8>)
 800cd10:	429c      	cmp	r4, r3
 800cd12:	bf08      	it	eq
 800cd14:	68ec      	ldreq	r4, [r5, #12]
 800cd16:	e7e6      	b.n	800cce6 <__swsetup_r+0x1e>
 800cd18:	0758      	lsls	r0, r3, #29
 800cd1a:	d512      	bpl.n	800cd42 <__swsetup_r+0x7a>
 800cd1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd1e:	b141      	cbz	r1, 800cd32 <__swsetup_r+0x6a>
 800cd20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd24:	4299      	cmp	r1, r3
 800cd26:	d002      	beq.n	800cd2e <__swsetup_r+0x66>
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7ff fb31 	bl	800c390 <_free_r>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	6363      	str	r3, [r4, #52]	; 0x34
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	6063      	str	r3, [r4, #4]
 800cd3e:	6923      	ldr	r3, [r4, #16]
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	f043 0308 	orr.w	r3, r3, #8
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	6923      	ldr	r3, [r4, #16]
 800cd4c:	b94b      	cbnz	r3, 800cd62 <__swsetup_r+0x9a>
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd58:	d003      	beq.n	800cd62 <__swsetup_r+0x9a>
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f000 fa09 	bl	800d174 <__smakebuf_r>
 800cd62:	89a0      	ldrh	r0, [r4, #12]
 800cd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd68:	f010 0301 	ands.w	r3, r0, #1
 800cd6c:	d00a      	beq.n	800cd84 <__swsetup_r+0xbc>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60a3      	str	r3, [r4, #8]
 800cd72:	6963      	ldr	r3, [r4, #20]
 800cd74:	425b      	negs	r3, r3
 800cd76:	61a3      	str	r3, [r4, #24]
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	b943      	cbnz	r3, 800cd8e <__swsetup_r+0xc6>
 800cd7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd80:	d1ba      	bne.n	800ccf8 <__swsetup_r+0x30>
 800cd82:	bd70      	pop	{r4, r5, r6, pc}
 800cd84:	0781      	lsls	r1, r0, #30
 800cd86:	bf58      	it	pl
 800cd88:	6963      	ldrpl	r3, [r4, #20]
 800cd8a:	60a3      	str	r3, [r4, #8]
 800cd8c:	e7f4      	b.n	800cd78 <__swsetup_r+0xb0>
 800cd8e:	2000      	movs	r0, #0
 800cd90:	e7f7      	b.n	800cd82 <__swsetup_r+0xba>
 800cd92:	bf00      	nop
 800cd94:	20000014 	.word	0x20000014
 800cd98:	0800e424 	.word	0x0800e424
 800cd9c:	0800e444 	.word	0x0800e444
 800cda0:	0800e404 	.word	0x0800e404

0800cda4 <abort>:
 800cda4:	b508      	push	{r3, lr}
 800cda6:	2006      	movs	r0, #6
 800cda8:	f000 fa54 	bl	800d254 <raise>
 800cdac:	2001      	movs	r0, #1
 800cdae:	f7f7 fa5b 	bl	8004268 <_exit>
	...

0800cdb4 <__sflush_r>:
 800cdb4:	898a      	ldrh	r2, [r1, #12]
 800cdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdba:	4605      	mov	r5, r0
 800cdbc:	0710      	lsls	r0, r2, #28
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	d458      	bmi.n	800ce74 <__sflush_r+0xc0>
 800cdc2:	684b      	ldr	r3, [r1, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dc05      	bgt.n	800cdd4 <__sflush_r+0x20>
 800cdc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dc02      	bgt.n	800cdd4 <__sflush_r+0x20>
 800cdce:	2000      	movs	r0, #0
 800cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdd6:	2e00      	cmp	r6, #0
 800cdd8:	d0f9      	beq.n	800cdce <__sflush_r+0x1a>
 800cdda:	2300      	movs	r3, #0
 800cddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cde0:	682f      	ldr	r7, [r5, #0]
 800cde2:	602b      	str	r3, [r5, #0]
 800cde4:	d032      	beq.n	800ce4c <__sflush_r+0x98>
 800cde6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	075a      	lsls	r2, r3, #29
 800cdec:	d505      	bpl.n	800cdfa <__sflush_r+0x46>
 800cdee:	6863      	ldr	r3, [r4, #4]
 800cdf0:	1ac0      	subs	r0, r0, r3
 800cdf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdf4:	b10b      	cbz	r3, 800cdfa <__sflush_r+0x46>
 800cdf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce00:	6a21      	ldr	r1, [r4, #32]
 800ce02:	4628      	mov	r0, r5
 800ce04:	47b0      	blx	r6
 800ce06:	1c43      	adds	r3, r0, #1
 800ce08:	89a3      	ldrh	r3, [r4, #12]
 800ce0a:	d106      	bne.n	800ce1a <__sflush_r+0x66>
 800ce0c:	6829      	ldr	r1, [r5, #0]
 800ce0e:	291d      	cmp	r1, #29
 800ce10:	d82c      	bhi.n	800ce6c <__sflush_r+0xb8>
 800ce12:	4a2a      	ldr	r2, [pc, #168]	; (800cebc <__sflush_r+0x108>)
 800ce14:	40ca      	lsrs	r2, r1
 800ce16:	07d6      	lsls	r6, r2, #31
 800ce18:	d528      	bpl.n	800ce6c <__sflush_r+0xb8>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	6062      	str	r2, [r4, #4]
 800ce1e:	04d9      	lsls	r1, r3, #19
 800ce20:	6922      	ldr	r2, [r4, #16]
 800ce22:	6022      	str	r2, [r4, #0]
 800ce24:	d504      	bpl.n	800ce30 <__sflush_r+0x7c>
 800ce26:	1c42      	adds	r2, r0, #1
 800ce28:	d101      	bne.n	800ce2e <__sflush_r+0x7a>
 800ce2a:	682b      	ldr	r3, [r5, #0]
 800ce2c:	b903      	cbnz	r3, 800ce30 <__sflush_r+0x7c>
 800ce2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ce30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce32:	602f      	str	r7, [r5, #0]
 800ce34:	2900      	cmp	r1, #0
 800ce36:	d0ca      	beq.n	800cdce <__sflush_r+0x1a>
 800ce38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce3c:	4299      	cmp	r1, r3
 800ce3e:	d002      	beq.n	800ce46 <__sflush_r+0x92>
 800ce40:	4628      	mov	r0, r5
 800ce42:	f7ff faa5 	bl	800c390 <_free_r>
 800ce46:	2000      	movs	r0, #0
 800ce48:	6360      	str	r0, [r4, #52]	; 0x34
 800ce4a:	e7c1      	b.n	800cdd0 <__sflush_r+0x1c>
 800ce4c:	6a21      	ldr	r1, [r4, #32]
 800ce4e:	2301      	movs	r3, #1
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b0      	blx	r6
 800ce54:	1c41      	adds	r1, r0, #1
 800ce56:	d1c7      	bne.n	800cde8 <__sflush_r+0x34>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0c4      	beq.n	800cde8 <__sflush_r+0x34>
 800ce5e:	2b1d      	cmp	r3, #29
 800ce60:	d001      	beq.n	800ce66 <__sflush_r+0xb2>
 800ce62:	2b16      	cmp	r3, #22
 800ce64:	d101      	bne.n	800ce6a <__sflush_r+0xb6>
 800ce66:	602f      	str	r7, [r5, #0]
 800ce68:	e7b1      	b.n	800cdce <__sflush_r+0x1a>
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	e7ad      	b.n	800cdd0 <__sflush_r+0x1c>
 800ce74:	690f      	ldr	r7, [r1, #16]
 800ce76:	2f00      	cmp	r7, #0
 800ce78:	d0a9      	beq.n	800cdce <__sflush_r+0x1a>
 800ce7a:	0793      	lsls	r3, r2, #30
 800ce7c:	680e      	ldr	r6, [r1, #0]
 800ce7e:	bf08      	it	eq
 800ce80:	694b      	ldreq	r3, [r1, #20]
 800ce82:	600f      	str	r7, [r1, #0]
 800ce84:	bf18      	it	ne
 800ce86:	2300      	movne	r3, #0
 800ce88:	eba6 0807 	sub.w	r8, r6, r7
 800ce8c:	608b      	str	r3, [r1, #8]
 800ce8e:	f1b8 0f00 	cmp.w	r8, #0
 800ce92:	dd9c      	ble.n	800cdce <__sflush_r+0x1a>
 800ce94:	6a21      	ldr	r1, [r4, #32]
 800ce96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce98:	4643      	mov	r3, r8
 800ce9a:	463a      	mov	r2, r7
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b0      	blx	r6
 800cea0:	2800      	cmp	r0, #0
 800cea2:	dc06      	bgt.n	800ceb2 <__sflush_r+0xfe>
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceaa:	81a3      	strh	r3, [r4, #12]
 800ceac:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb0:	e78e      	b.n	800cdd0 <__sflush_r+0x1c>
 800ceb2:	4407      	add	r7, r0
 800ceb4:	eba8 0800 	sub.w	r8, r8, r0
 800ceb8:	e7e9      	b.n	800ce8e <__sflush_r+0xda>
 800ceba:	bf00      	nop
 800cebc:	20400001 	.word	0x20400001

0800cec0 <_fflush_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	690b      	ldr	r3, [r1, #16]
 800cec4:	4605      	mov	r5, r0
 800cec6:	460c      	mov	r4, r1
 800cec8:	b913      	cbnz	r3, 800ced0 <_fflush_r+0x10>
 800ceca:	2500      	movs	r5, #0
 800cecc:	4628      	mov	r0, r5
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	b118      	cbz	r0, 800ceda <_fflush_r+0x1a>
 800ced2:	6983      	ldr	r3, [r0, #24]
 800ced4:	b90b      	cbnz	r3, 800ceda <_fflush_r+0x1a>
 800ced6:	f000 f887 	bl	800cfe8 <__sinit>
 800ceda:	4b14      	ldr	r3, [pc, #80]	; (800cf2c <_fflush_r+0x6c>)
 800cedc:	429c      	cmp	r4, r3
 800cede:	d11b      	bne.n	800cf18 <_fflush_r+0x58>
 800cee0:	686c      	ldr	r4, [r5, #4]
 800cee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0ef      	beq.n	800ceca <_fflush_r+0xa>
 800ceea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ceec:	07d0      	lsls	r0, r2, #31
 800ceee:	d404      	bmi.n	800cefa <_fflush_r+0x3a>
 800cef0:	0599      	lsls	r1, r3, #22
 800cef2:	d402      	bmi.n	800cefa <_fflush_r+0x3a>
 800cef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cef6:	f000 f915 	bl	800d124 <__retarget_lock_acquire_recursive>
 800cefa:	4628      	mov	r0, r5
 800cefc:	4621      	mov	r1, r4
 800cefe:	f7ff ff59 	bl	800cdb4 <__sflush_r>
 800cf02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf04:	07da      	lsls	r2, r3, #31
 800cf06:	4605      	mov	r5, r0
 800cf08:	d4e0      	bmi.n	800cecc <_fflush_r+0xc>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	059b      	lsls	r3, r3, #22
 800cf0e:	d4dd      	bmi.n	800cecc <_fflush_r+0xc>
 800cf10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf12:	f000 f908 	bl	800d126 <__retarget_lock_release_recursive>
 800cf16:	e7d9      	b.n	800cecc <_fflush_r+0xc>
 800cf18:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <_fflush_r+0x70>)
 800cf1a:	429c      	cmp	r4, r3
 800cf1c:	d101      	bne.n	800cf22 <_fflush_r+0x62>
 800cf1e:	68ac      	ldr	r4, [r5, #8]
 800cf20:	e7df      	b.n	800cee2 <_fflush_r+0x22>
 800cf22:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <_fflush_r+0x74>)
 800cf24:	429c      	cmp	r4, r3
 800cf26:	bf08      	it	eq
 800cf28:	68ec      	ldreq	r4, [r5, #12]
 800cf2a:	e7da      	b.n	800cee2 <_fflush_r+0x22>
 800cf2c:	0800e424 	.word	0x0800e424
 800cf30:	0800e444 	.word	0x0800e444
 800cf34:	0800e404 	.word	0x0800e404

0800cf38 <std>:
 800cf38:	2300      	movs	r3, #0
 800cf3a:	b510      	push	{r4, lr}
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf46:	6083      	str	r3, [r0, #8]
 800cf48:	8181      	strh	r1, [r0, #12]
 800cf4a:	6643      	str	r3, [r0, #100]	; 0x64
 800cf4c:	81c2      	strh	r2, [r0, #14]
 800cf4e:	6183      	str	r3, [r0, #24]
 800cf50:	4619      	mov	r1, r3
 800cf52:	2208      	movs	r2, #8
 800cf54:	305c      	adds	r0, #92	; 0x5c
 800cf56:	f7fd fb69 	bl	800a62c <memset>
 800cf5a:	4b05      	ldr	r3, [pc, #20]	; (800cf70 <std+0x38>)
 800cf5c:	6263      	str	r3, [r4, #36]	; 0x24
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <std+0x3c>)
 800cf60:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <std+0x40>)
 800cf64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf66:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <std+0x44>)
 800cf68:	6224      	str	r4, [r4, #32]
 800cf6a:	6323      	str	r3, [r4, #48]	; 0x30
 800cf6c:	bd10      	pop	{r4, pc}
 800cf6e:	bf00      	nop
 800cf70:	0800d28d 	.word	0x0800d28d
 800cf74:	0800d2af 	.word	0x0800d2af
 800cf78:	0800d2e7 	.word	0x0800d2e7
 800cf7c:	0800d30b 	.word	0x0800d30b

0800cf80 <_cleanup_r>:
 800cf80:	4901      	ldr	r1, [pc, #4]	; (800cf88 <_cleanup_r+0x8>)
 800cf82:	f000 b8af 	b.w	800d0e4 <_fwalk_reent>
 800cf86:	bf00      	nop
 800cf88:	0800cec1 	.word	0x0800cec1

0800cf8c <__sfmoreglue>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	2268      	movs	r2, #104	; 0x68
 800cf90:	1e4d      	subs	r5, r1, #1
 800cf92:	4355      	muls	r5, r2
 800cf94:	460e      	mov	r6, r1
 800cf96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf9a:	f7ff fa65 	bl	800c468 <_malloc_r>
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	b140      	cbz	r0, 800cfb4 <__sfmoreglue+0x28>
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	e9c0 1600 	strd	r1, r6, [r0]
 800cfa8:	300c      	adds	r0, #12
 800cfaa:	60a0      	str	r0, [r4, #8]
 800cfac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfb0:	f7fd fb3c 	bl	800a62c <memset>
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	bd70      	pop	{r4, r5, r6, pc}

0800cfb8 <__sfp_lock_acquire>:
 800cfb8:	4801      	ldr	r0, [pc, #4]	; (800cfc0 <__sfp_lock_acquire+0x8>)
 800cfba:	f000 b8b3 	b.w	800d124 <__retarget_lock_acquire_recursive>
 800cfbe:	bf00      	nop
 800cfc0:	20000b09 	.word	0x20000b09

0800cfc4 <__sfp_lock_release>:
 800cfc4:	4801      	ldr	r0, [pc, #4]	; (800cfcc <__sfp_lock_release+0x8>)
 800cfc6:	f000 b8ae 	b.w	800d126 <__retarget_lock_release_recursive>
 800cfca:	bf00      	nop
 800cfcc:	20000b09 	.word	0x20000b09

0800cfd0 <__sinit_lock_acquire>:
 800cfd0:	4801      	ldr	r0, [pc, #4]	; (800cfd8 <__sinit_lock_acquire+0x8>)
 800cfd2:	f000 b8a7 	b.w	800d124 <__retarget_lock_acquire_recursive>
 800cfd6:	bf00      	nop
 800cfd8:	20000b0a 	.word	0x20000b0a

0800cfdc <__sinit_lock_release>:
 800cfdc:	4801      	ldr	r0, [pc, #4]	; (800cfe4 <__sinit_lock_release+0x8>)
 800cfde:	f000 b8a2 	b.w	800d126 <__retarget_lock_release_recursive>
 800cfe2:	bf00      	nop
 800cfe4:	20000b0a 	.word	0x20000b0a

0800cfe8 <__sinit>:
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	4604      	mov	r4, r0
 800cfec:	f7ff fff0 	bl	800cfd0 <__sinit_lock_acquire>
 800cff0:	69a3      	ldr	r3, [r4, #24]
 800cff2:	b11b      	cbz	r3, 800cffc <__sinit+0x14>
 800cff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff8:	f7ff bff0 	b.w	800cfdc <__sinit_lock_release>
 800cffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d000:	6523      	str	r3, [r4, #80]	; 0x50
 800d002:	4b13      	ldr	r3, [pc, #76]	; (800d050 <__sinit+0x68>)
 800d004:	4a13      	ldr	r2, [pc, #76]	; (800d054 <__sinit+0x6c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	62a2      	str	r2, [r4, #40]	; 0x28
 800d00a:	42a3      	cmp	r3, r4
 800d00c:	bf04      	itt	eq
 800d00e:	2301      	moveq	r3, #1
 800d010:	61a3      	streq	r3, [r4, #24]
 800d012:	4620      	mov	r0, r4
 800d014:	f000 f820 	bl	800d058 <__sfp>
 800d018:	6060      	str	r0, [r4, #4]
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 f81c 	bl	800d058 <__sfp>
 800d020:	60a0      	str	r0, [r4, #8]
 800d022:	4620      	mov	r0, r4
 800d024:	f000 f818 	bl	800d058 <__sfp>
 800d028:	2200      	movs	r2, #0
 800d02a:	60e0      	str	r0, [r4, #12]
 800d02c:	2104      	movs	r1, #4
 800d02e:	6860      	ldr	r0, [r4, #4]
 800d030:	f7ff ff82 	bl	800cf38 <std>
 800d034:	68a0      	ldr	r0, [r4, #8]
 800d036:	2201      	movs	r2, #1
 800d038:	2109      	movs	r1, #9
 800d03a:	f7ff ff7d 	bl	800cf38 <std>
 800d03e:	68e0      	ldr	r0, [r4, #12]
 800d040:	2202      	movs	r2, #2
 800d042:	2112      	movs	r1, #18
 800d044:	f7ff ff78 	bl	800cf38 <std>
 800d048:	2301      	movs	r3, #1
 800d04a:	61a3      	str	r3, [r4, #24]
 800d04c:	e7d2      	b.n	800cff4 <__sinit+0xc>
 800d04e:	bf00      	nop
 800d050:	0800e08c 	.word	0x0800e08c
 800d054:	0800cf81 	.word	0x0800cf81

0800d058 <__sfp>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	4607      	mov	r7, r0
 800d05c:	f7ff ffac 	bl	800cfb8 <__sfp_lock_acquire>
 800d060:	4b1e      	ldr	r3, [pc, #120]	; (800d0dc <__sfp+0x84>)
 800d062:	681e      	ldr	r6, [r3, #0]
 800d064:	69b3      	ldr	r3, [r6, #24]
 800d066:	b913      	cbnz	r3, 800d06e <__sfp+0x16>
 800d068:	4630      	mov	r0, r6
 800d06a:	f7ff ffbd 	bl	800cfe8 <__sinit>
 800d06e:	3648      	adds	r6, #72	; 0x48
 800d070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d074:	3b01      	subs	r3, #1
 800d076:	d503      	bpl.n	800d080 <__sfp+0x28>
 800d078:	6833      	ldr	r3, [r6, #0]
 800d07a:	b30b      	cbz	r3, 800d0c0 <__sfp+0x68>
 800d07c:	6836      	ldr	r6, [r6, #0]
 800d07e:	e7f7      	b.n	800d070 <__sfp+0x18>
 800d080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d084:	b9d5      	cbnz	r5, 800d0bc <__sfp+0x64>
 800d086:	4b16      	ldr	r3, [pc, #88]	; (800d0e0 <__sfp+0x88>)
 800d088:	60e3      	str	r3, [r4, #12]
 800d08a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d08e:	6665      	str	r5, [r4, #100]	; 0x64
 800d090:	f000 f847 	bl	800d122 <__retarget_lock_init_recursive>
 800d094:	f7ff ff96 	bl	800cfc4 <__sfp_lock_release>
 800d098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d09c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0a0:	6025      	str	r5, [r4, #0]
 800d0a2:	61a5      	str	r5, [r4, #24]
 800d0a4:	2208      	movs	r2, #8
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0ac:	f7fd fabe 	bl	800a62c <memset>
 800d0b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0bc:	3468      	adds	r4, #104	; 0x68
 800d0be:	e7d9      	b.n	800d074 <__sfp+0x1c>
 800d0c0:	2104      	movs	r1, #4
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f7ff ff62 	bl	800cf8c <__sfmoreglue>
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	6030      	str	r0, [r6, #0]
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d1d5      	bne.n	800d07c <__sfp+0x24>
 800d0d0:	f7ff ff78 	bl	800cfc4 <__sfp_lock_release>
 800d0d4:	230c      	movs	r3, #12
 800d0d6:	603b      	str	r3, [r7, #0]
 800d0d8:	e7ee      	b.n	800d0b8 <__sfp+0x60>
 800d0da:	bf00      	nop
 800d0dc:	0800e08c 	.word	0x0800e08c
 800d0e0:	ffff0001 	.word	0xffff0001

0800d0e4 <_fwalk_reent>:
 800d0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	4688      	mov	r8, r1
 800d0ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0f0:	2700      	movs	r7, #0
 800d0f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0f6:	f1b9 0901 	subs.w	r9, r9, #1
 800d0fa:	d505      	bpl.n	800d108 <_fwalk_reent+0x24>
 800d0fc:	6824      	ldr	r4, [r4, #0]
 800d0fe:	2c00      	cmp	r4, #0
 800d100:	d1f7      	bne.n	800d0f2 <_fwalk_reent+0xe>
 800d102:	4638      	mov	r0, r7
 800d104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d108:	89ab      	ldrh	r3, [r5, #12]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d907      	bls.n	800d11e <_fwalk_reent+0x3a>
 800d10e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d112:	3301      	adds	r3, #1
 800d114:	d003      	beq.n	800d11e <_fwalk_reent+0x3a>
 800d116:	4629      	mov	r1, r5
 800d118:	4630      	mov	r0, r6
 800d11a:	47c0      	blx	r8
 800d11c:	4307      	orrs	r7, r0
 800d11e:	3568      	adds	r5, #104	; 0x68
 800d120:	e7e9      	b.n	800d0f6 <_fwalk_reent+0x12>

0800d122 <__retarget_lock_init_recursive>:
 800d122:	4770      	bx	lr

0800d124 <__retarget_lock_acquire_recursive>:
 800d124:	4770      	bx	lr

0800d126 <__retarget_lock_release_recursive>:
 800d126:	4770      	bx	lr

0800d128 <__swhatbuf_r>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	460e      	mov	r6, r1
 800d12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d130:	2900      	cmp	r1, #0
 800d132:	b096      	sub	sp, #88	; 0x58
 800d134:	4614      	mov	r4, r2
 800d136:	461d      	mov	r5, r3
 800d138:	da08      	bge.n	800d14c <__swhatbuf_r+0x24>
 800d13a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	602a      	str	r2, [r5, #0]
 800d142:	061a      	lsls	r2, r3, #24
 800d144:	d410      	bmi.n	800d168 <__swhatbuf_r+0x40>
 800d146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d14a:	e00e      	b.n	800d16a <__swhatbuf_r+0x42>
 800d14c:	466a      	mov	r2, sp
 800d14e:	f000 f903 	bl	800d358 <_fstat_r>
 800d152:	2800      	cmp	r0, #0
 800d154:	dbf1      	blt.n	800d13a <__swhatbuf_r+0x12>
 800d156:	9a01      	ldr	r2, [sp, #4]
 800d158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d15c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d160:	425a      	negs	r2, r3
 800d162:	415a      	adcs	r2, r3
 800d164:	602a      	str	r2, [r5, #0]
 800d166:	e7ee      	b.n	800d146 <__swhatbuf_r+0x1e>
 800d168:	2340      	movs	r3, #64	; 0x40
 800d16a:	2000      	movs	r0, #0
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	b016      	add	sp, #88	; 0x58
 800d170:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d174 <__smakebuf_r>:
 800d174:	898b      	ldrh	r3, [r1, #12]
 800d176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d178:	079d      	lsls	r5, r3, #30
 800d17a:	4606      	mov	r6, r0
 800d17c:	460c      	mov	r4, r1
 800d17e:	d507      	bpl.n	800d190 <__smakebuf_r+0x1c>
 800d180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	2301      	movs	r3, #1
 800d18a:	6163      	str	r3, [r4, #20]
 800d18c:	b002      	add	sp, #8
 800d18e:	bd70      	pop	{r4, r5, r6, pc}
 800d190:	ab01      	add	r3, sp, #4
 800d192:	466a      	mov	r2, sp
 800d194:	f7ff ffc8 	bl	800d128 <__swhatbuf_r>
 800d198:	9900      	ldr	r1, [sp, #0]
 800d19a:	4605      	mov	r5, r0
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7ff f963 	bl	800c468 <_malloc_r>
 800d1a2:	b948      	cbnz	r0, 800d1b8 <__smakebuf_r+0x44>
 800d1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a8:	059a      	lsls	r2, r3, #22
 800d1aa:	d4ef      	bmi.n	800d18c <__smakebuf_r+0x18>
 800d1ac:	f023 0303 	bic.w	r3, r3, #3
 800d1b0:	f043 0302 	orr.w	r3, r3, #2
 800d1b4:	81a3      	strh	r3, [r4, #12]
 800d1b6:	e7e3      	b.n	800d180 <__smakebuf_r+0xc>
 800d1b8:	4b0d      	ldr	r3, [pc, #52]	; (800d1f0 <__smakebuf_r+0x7c>)
 800d1ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1bc:	89a3      	ldrh	r3, [r4, #12]
 800d1be:	6020      	str	r0, [r4, #0]
 800d1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1c4:	81a3      	strh	r3, [r4, #12]
 800d1c6:	9b00      	ldr	r3, [sp, #0]
 800d1c8:	6163      	str	r3, [r4, #20]
 800d1ca:	9b01      	ldr	r3, [sp, #4]
 800d1cc:	6120      	str	r0, [r4, #16]
 800d1ce:	b15b      	cbz	r3, 800d1e8 <__smakebuf_r+0x74>
 800d1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	f000 f8d1 	bl	800d37c <_isatty_r>
 800d1da:	b128      	cbz	r0, 800d1e8 <__smakebuf_r+0x74>
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	f023 0303 	bic.w	r3, r3, #3
 800d1e2:	f043 0301 	orr.w	r3, r3, #1
 800d1e6:	81a3      	strh	r3, [r4, #12]
 800d1e8:	89a0      	ldrh	r0, [r4, #12]
 800d1ea:	4305      	orrs	r5, r0
 800d1ec:	81a5      	strh	r5, [r4, #12]
 800d1ee:	e7cd      	b.n	800d18c <__smakebuf_r+0x18>
 800d1f0:	0800cf81 	.word	0x0800cf81

0800d1f4 <_malloc_usable_size_r>:
 800d1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f8:	1f18      	subs	r0, r3, #4
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfbc      	itt	lt
 800d1fe:	580b      	ldrlt	r3, [r1, r0]
 800d200:	18c0      	addlt	r0, r0, r3
 800d202:	4770      	bx	lr

0800d204 <_raise_r>:
 800d204:	291f      	cmp	r1, #31
 800d206:	b538      	push	{r3, r4, r5, lr}
 800d208:	4604      	mov	r4, r0
 800d20a:	460d      	mov	r5, r1
 800d20c:	d904      	bls.n	800d218 <_raise_r+0x14>
 800d20e:	2316      	movs	r3, #22
 800d210:	6003      	str	r3, [r0, #0]
 800d212:	f04f 30ff 	mov.w	r0, #4294967295
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d21a:	b112      	cbz	r2, 800d222 <_raise_r+0x1e>
 800d21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d220:	b94b      	cbnz	r3, 800d236 <_raise_r+0x32>
 800d222:	4620      	mov	r0, r4
 800d224:	f000 f830 	bl	800d288 <_getpid_r>
 800d228:	462a      	mov	r2, r5
 800d22a:	4601      	mov	r1, r0
 800d22c:	4620      	mov	r0, r4
 800d22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d232:	f000 b817 	b.w	800d264 <_kill_r>
 800d236:	2b01      	cmp	r3, #1
 800d238:	d00a      	beq.n	800d250 <_raise_r+0x4c>
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	d103      	bne.n	800d246 <_raise_r+0x42>
 800d23e:	2316      	movs	r3, #22
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	2001      	movs	r0, #1
 800d244:	e7e7      	b.n	800d216 <_raise_r+0x12>
 800d246:	2400      	movs	r4, #0
 800d248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d24c:	4628      	mov	r0, r5
 800d24e:	4798      	blx	r3
 800d250:	2000      	movs	r0, #0
 800d252:	e7e0      	b.n	800d216 <_raise_r+0x12>

0800d254 <raise>:
 800d254:	4b02      	ldr	r3, [pc, #8]	; (800d260 <raise+0xc>)
 800d256:	4601      	mov	r1, r0
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	f7ff bfd3 	b.w	800d204 <_raise_r>
 800d25e:	bf00      	nop
 800d260:	20000014 	.word	0x20000014

0800d264 <_kill_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	; (800d284 <_kill_r+0x20>)
 800d268:	2300      	movs	r3, #0
 800d26a:	4604      	mov	r4, r0
 800d26c:	4608      	mov	r0, r1
 800d26e:	4611      	mov	r1, r2
 800d270:	602b      	str	r3, [r5, #0]
 800d272:	f7f6 ffe9 	bl	8004248 <_kill>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d102      	bne.n	800d280 <_kill_r+0x1c>
 800d27a:	682b      	ldr	r3, [r5, #0]
 800d27c:	b103      	cbz	r3, 800d280 <_kill_r+0x1c>
 800d27e:	6023      	str	r3, [r4, #0]
 800d280:	bd38      	pop	{r3, r4, r5, pc}
 800d282:	bf00      	nop
 800d284:	20000b04 	.word	0x20000b04

0800d288 <_getpid_r>:
 800d288:	f7f6 bfd6 	b.w	8004238 <_getpid>

0800d28c <__sread>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	460c      	mov	r4, r1
 800d290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d294:	f000 f894 	bl	800d3c0 <_read_r>
 800d298:	2800      	cmp	r0, #0
 800d29a:	bfab      	itete	ge
 800d29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d29e:	89a3      	ldrhlt	r3, [r4, #12]
 800d2a0:	181b      	addge	r3, r3, r0
 800d2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2a6:	bfac      	ite	ge
 800d2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2aa:	81a3      	strhlt	r3, [r4, #12]
 800d2ac:	bd10      	pop	{r4, pc}

0800d2ae <__swrite>:
 800d2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b2:	461f      	mov	r7, r3
 800d2b4:	898b      	ldrh	r3, [r1, #12]
 800d2b6:	05db      	lsls	r3, r3, #23
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	4616      	mov	r6, r2
 800d2be:	d505      	bpl.n	800d2cc <__swrite+0x1e>
 800d2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f000 f868 	bl	800d39c <_lseek_r>
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2d6:	81a3      	strh	r3, [r4, #12]
 800d2d8:	4632      	mov	r2, r6
 800d2da:	463b      	mov	r3, r7
 800d2dc:	4628      	mov	r0, r5
 800d2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e2:	f000 b817 	b.w	800d314 <_write_r>

0800d2e6 <__sseek>:
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	460c      	mov	r4, r1
 800d2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ee:	f000 f855 	bl	800d39c <_lseek_r>
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	bf15      	itete	ne
 800d2f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d302:	81a3      	strheq	r3, [r4, #12]
 800d304:	bf18      	it	ne
 800d306:	81a3      	strhne	r3, [r4, #12]
 800d308:	bd10      	pop	{r4, pc}

0800d30a <__sclose>:
 800d30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30e:	f000 b813 	b.w	800d338 <_close_r>
	...

0800d314 <_write_r>:
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	4d07      	ldr	r5, [pc, #28]	; (800d334 <_write_r+0x20>)
 800d318:	4604      	mov	r4, r0
 800d31a:	4608      	mov	r0, r1
 800d31c:	4611      	mov	r1, r2
 800d31e:	2200      	movs	r2, #0
 800d320:	602a      	str	r2, [r5, #0]
 800d322:	461a      	mov	r2, r3
 800d324:	f7f6 ffc7 	bl	80042b6 <_write>
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	d102      	bne.n	800d332 <_write_r+0x1e>
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	b103      	cbz	r3, 800d332 <_write_r+0x1e>
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	20000b04 	.word	0x20000b04

0800d338 <_close_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4d06      	ldr	r5, [pc, #24]	; (800d354 <_close_r+0x1c>)
 800d33c:	2300      	movs	r3, #0
 800d33e:	4604      	mov	r4, r0
 800d340:	4608      	mov	r0, r1
 800d342:	602b      	str	r3, [r5, #0]
 800d344:	f7f6 ffd3 	bl	80042ee <_close>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d102      	bne.n	800d352 <_close_r+0x1a>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	b103      	cbz	r3, 800d352 <_close_r+0x1a>
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	20000b04 	.word	0x20000b04

0800d358 <_fstat_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d07      	ldr	r5, [pc, #28]	; (800d378 <_fstat_r+0x20>)
 800d35c:	2300      	movs	r3, #0
 800d35e:	4604      	mov	r4, r0
 800d360:	4608      	mov	r0, r1
 800d362:	4611      	mov	r1, r2
 800d364:	602b      	str	r3, [r5, #0]
 800d366:	f7f6 ffce 	bl	8004306 <_fstat>
 800d36a:	1c43      	adds	r3, r0, #1
 800d36c:	d102      	bne.n	800d374 <_fstat_r+0x1c>
 800d36e:	682b      	ldr	r3, [r5, #0]
 800d370:	b103      	cbz	r3, 800d374 <_fstat_r+0x1c>
 800d372:	6023      	str	r3, [r4, #0]
 800d374:	bd38      	pop	{r3, r4, r5, pc}
 800d376:	bf00      	nop
 800d378:	20000b04 	.word	0x20000b04

0800d37c <_isatty_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d06      	ldr	r5, [pc, #24]	; (800d398 <_isatty_r+0x1c>)
 800d380:	2300      	movs	r3, #0
 800d382:	4604      	mov	r4, r0
 800d384:	4608      	mov	r0, r1
 800d386:	602b      	str	r3, [r5, #0]
 800d388:	f7f6 ffcd 	bl	8004326 <_isatty>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_isatty_r+0x1a>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_isatty_r+0x1a>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	20000b04 	.word	0x20000b04

0800d39c <_lseek_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d07      	ldr	r5, [pc, #28]	; (800d3bc <_lseek_r+0x20>)
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	602a      	str	r2, [r5, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f7f6 ffc6 	bl	800433c <_lseek>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_lseek_r+0x1e>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_lseek_r+0x1e>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20000b04 	.word	0x20000b04

0800d3c0 <_read_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_read_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f6 ff54 	bl	800427c <_read>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_read_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_read_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20000b04 	.word	0x20000b04

0800d3e4 <_init>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	bf00      	nop
 800d3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ea:	bc08      	pop	{r3}
 800d3ec:	469e      	mov	lr, r3
 800d3ee:	4770      	bx	lr

0800d3f0 <_fini>:
 800d3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f2:	bf00      	nop
 800d3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3f6:	bc08      	pop	{r3}
 800d3f8:	469e      	mov	lr, r3
 800d3fa:	4770      	bx	lr
