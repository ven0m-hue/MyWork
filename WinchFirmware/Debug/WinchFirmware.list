
WinchFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e710  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800e8b0  0800e8b0  0001e8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edc4  0800edc4  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800edc4  0800edc4  0001edc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edcc  0800edcc  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edcc  0800edcc  0001edcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edd0  0800edd0  0001edd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800edd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  200002d8  0800f0ac  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001930  0800f0ac  00021930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d2e  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039fc  00000000  00000000  00038036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb12  00000000  00000000  0003e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c95  00000000  00000000  00059c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb0b  00000000  00000000  000728a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f3b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000661c  00000000  00000000  0010f404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e898 	.word	0x0800e898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800e898 	.word	0x0800e898

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_Universal_Init>:
static void MX_BomBay_Door_Close(void);
static void MX_Jump(void);

/* Private user code ---------------------------------------------------------*/
void MX_Universal_Init()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f001 fd08 	bl	80029b4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 fed8 	bl	8001d58 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_USB_DEVICE_Init();
 8000fa8:	f009 ff66 	bl	800ae78 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8000fac:	f001 f89c 	bl	80020e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fb0:	f000 ff3c 	bl	8001e2c <MX_ADC1_Init>
  MX_GPIO_Init();
 8000fb4:	f001 f8b8 	bl	8002128 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fb8:	f000 ff8a 	bl	8001ed0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fbc:	f000 ffdc 	bl	8001f78 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fc0:	f001 f83e 	bl	8002040 <MX_TIM4_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_Peripheral_Start_Init>:

void MX_Peripheral_Start_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	 *  1. Encoder IT Start
	 *  2. PWM CH1, CH2 Start
	 *  3. TIM Input Cpature Mode Start
	 *  4. ADC DMA Start
	 */
	if(HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_Handler();
 8000fcc:	213c      	movs	r1, #60	; 0x3c
 8000fce:	481d      	ldr	r0, [pc, #116]	; (8001044 <MX_Peripheral_Start_Init+0x7c>)
 8000fd0:	f005 fbea 	bl	80067a8 <HAL_TIM_Encoder_Start_IT>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_Peripheral_Start_Init+0x16>
 8000fda:	f001 f926 	bl	800222a <Error_Handler>

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4819      	ldr	r0, [pc, #100]	; (8001048 <MX_Peripheral_Start_Init+0x80>)
 8000fe2:	f005 f8bd 	bl	8006160 <HAL_TIM_PWM_Start>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_Peripheral_Start_Init+0x28>
 8000fec:	f001 f91d 	bl	800222a <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4815      	ldr	r0, [pc, #84]	; (8001048 <MX_Peripheral_Start_Init+0x80>)
 8000ff4:	f005 f8b4 	bl	8006160 <HAL_TIM_PWM_Start>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_Peripheral_Start_Init+0x3a>
 8000ffe:	f001 f914 	bl	800222a <Error_Handler>

	if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK) Error_Handler();
 8001002:	2100      	movs	r1, #0
 8001004:	4811      	ldr	r0, [pc, #68]	; (800104c <MX_Peripheral_Start_Init+0x84>)
 8001006:	f005 fa0f 	bl	8006428 <HAL_TIM_IC_Start_IT>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_Peripheral_Start_Init+0x4c>
 8001010:	f001 f90b 	bl	800222a <Error_Handler>

	if(HAL_ADC_Start_DMA(&hadc1, &Buf, 1) != HAL_OK) Error_Handler();
 8001014:	2201      	movs	r2, #1
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <MX_Peripheral_Start_Init+0x88>)
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_Peripheral_Start_Init+0x8c>)
 800101a:	f001 feb5 	bl	8002d88 <HAL_ADC_Start_DMA>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_Peripheral_Start_Init+0x60>
 8001024:	f001 f901 	bl	800222a <Error_Handler>

	/*
	 * 1.GPIO PIN Inits
	 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2101      	movs	r1, #1
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <MX_Peripheral_Start_Init+0x90>)
 800102e:	f003 f95d 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <MX_Peripheral_Start_Init+0x94>)
 800103a:	f003 f957 	bl	80042ec <HAL_GPIO_WritePin>

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000039c 	.word	0x2000039c
 8001048:	200003e4 	.word	0x200003e4
 800104c:	2000042c 	.word	0x2000042c
 8001050:	20000494 	.word	0x20000494
 8001054:	200002f4 	.word	0x200002f4
 8001058:	40020800 	.word	0x40020800
 800105c:	40020000 	.word	0x40020000

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
	MX_Universal_Init();
 8001064:	f7ff ff9a 	bl	8000f9c <MX_Universal_Init>

  /* MCU Peripherals Start Commands-------------------------------------------*/
	MX_Peripheral_Start_Init();
 8001068:	f7ff ffae 	bl	8000fc8 <MX_Peripheral_Start_Init>
	/*
	 * Winch Start Sequence
	 * 1. One reception of a signal of particular width start the winch sequence
	 * or else keep looping until forever.
	 */
	MX_WINCH_START_SEQ();
 800106c:	f000 f824 	bl	80010b8 <MX_WINCH_START_SEQ>
	 * 4. In the backend the encoder keeps counting and stores the final count as the setPoint for the winch up sequence.
	 *
	 * Spring triggering is the end of Winch Down Sequence.
	 */

	MX_BomBay_Door_Open();
 8001070:	f000 f836 	bl	80010e0 <MX_BomBay_Door_Open>

	HAL_Delay(1000); //Delay for the door to settle and prep for winch down.
 8001074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001078:	f001 fd0e 	bl	8002a98 <HAL_Delay>

	MX_WINCH_DOWN_GP_RAMP_UP();
 800107c:	f000 f8f4 	bl	8001268 <MX_WINCH_DOWN_GP_RAMP_UP>
	MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN();
 8001080:	f000 f992 	bl	80013a8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN>


	if(spring_trig)
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <main+0x50>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <main+0x3e>
	{
		if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800108c:	2100      	movs	r1, #0
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <main+0x54>)
 8001090:	f005 f866 	bl	8006160 <HAL_TIM_PWM_Start>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <main+0x3e>
 800109a:	f001 f8c6 	bl	800222a <Error_Handler>
	 *
	 * note TODO: current sensor for detecting if payload is landed.
	 *
	 */
	//This is the wait period for the winch up sequence.
	HAL_Delay(5000);
 800109e:	f241 3088 	movw	r0, #5000	; 0x1388
 80010a2:	f001 fcf9 	bl	8002a98 <HAL_Delay>

	MX_WINCH_UP_MOTO_RAMP_UP_DOWN();
 80010a6:	f000 fb67 	bl	8001778 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>

	//Until the flag for door open is not set do nothing
	//If it breaks the loop, it means hook has reached the bay roof
	//Start the Door Close sequence
	MX_BomBay_Door_Close();
 80010aa:	f000 f875 	bl	8001198 <MX_BomBay_Door_Close>


	while(1){};
 80010ae:	e7fe      	b.n	80010ae <main+0x4e>
 80010b0:	200004a1 	.word	0x200004a1
 80010b4:	200003e4 	.word	0x200003e4

080010b8 <MX_WINCH_START_SEQ>:

///////////////////////////////////////////////////////////////////////////////////////////APPLICATION_LEVEL_ROUTINES//////////////////////////////////////////////////////////////


static void MX_WINCH_START_SEQ()
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	/*
	 * This part loops until a signal of particular pulse width is captured.
	 */
	//UNUSED();
	while(!(Start_Flag));
 80010bc:	bf00      	nop
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_WINCH_START_SEQ+0x20>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	f083 0301 	eor.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f8      	bne.n	80010be <MX_WINCH_START_SEQ+0x6>

}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000000 	.word	0x20000000
 80010dc:	00000000 	.word	0x00000000

080010e0 <MX_BomBay_Door_Open>:


void MX_BomBay_Door_Open(void)
{
 80010e0:	b598      	push	{r3, r4, r7, lr}
 80010e2:	af00      	add	r7, sp, #0

	if(BOMBAY_OPEN_CLOSE > 0)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	4827      	ldr	r0, [pc, #156]	; (8001188 <MX_BomBay_Door_Open+0xa8>)
 80010ea:	f003 f8ff 	bl	80042ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4825      	ldr	r0, [pc, #148]	; (800118c <MX_BomBay_Door_Open+0xac>)
 80010f6:	f003 f8f9 	bl	80042ec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(BOMBAY_OPEN_CLOSE)/100);
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_BomBay_Door_Open+0xb0>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa08 	bl	8000514 <__aeabi_ui2d>
 8001104:	a31e      	add	r3, pc, #120	; (adr r3, 8001180 <MX_BomBay_Door_Open+0xa0>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fa7d 	bl	8000608 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_BomBay_Door_Open+0xb4>)
 800111c:	f7ff fb9e 	bl	800085c <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	491a      	ldr	r1, [pc, #104]	; (8001190 <MX_BomBay_Door_Open+0xb0>)
 8001126:	680c      	ldr	r4, [r1, #0]
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fd44 	bl	8000bb8 <__aeabi_d2uiz>
 8001130:	4603      	mov	r3, r0
 8001132:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_Delay(BOMBAY_DOOR_ONOFF_TIME);
 8001134:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001138:	f001 fcae 	bl	8002a98 <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_BomBay_Door_Open+0xb0>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9e7 	bl	8000514 <__aeabi_ui2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <MX_BomBay_Door_Open+0xb4>)
 8001160:	f7ff fb7c 	bl	800085c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4909      	ldr	r1, [pc, #36]	; (8001190 <MX_BomBay_Door_Open+0xb0>)
 800116a:	680c      	ldr	r4, [r1, #0]
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd22 	bl	8000bb8 <__aeabi_d2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	63a3      	str	r3, [r4, #56]	; 0x38
	else
	{
		//Halt and Do nothing.
		MX_Jump();
	}
}
 8001178:	bf00      	nop
 800117a:	bd98      	pop	{r3, r4, r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	fff3a6e7 	.word	0xfff3a6e7
 8001184:	4058ffff 	.word	0x4058ffff
 8001188:	40020800 	.word	0x40020800
 800118c:	40020000 	.word	0x40020000
 8001190:	200003e4 	.word	0x200003e4
 8001194:	40590000 	.word	0x40590000

08001198 <MX_BomBay_Door_Close>:


void MX_BomBay_Door_Close()
{
 8001198:	b598      	push	{r3, r4, r7, lr}
 800119a:	af00      	add	r7, sp, #0
	while(!(bay_door_close));
 800119c:	bf00      	nop
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_BomBay_Door_Close+0xb8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f8      	bne.n	800119e <MX_BomBay_Door_Close+0x6>

	if(BOMBAY_OPEN_CLOSE > 0)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	4828      	ldr	r0, [pc, #160]	; (8001254 <MX_BomBay_Door_Close+0xbc>)
 80011b2:	f003 f89b 	bl	80042ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_BomBay_Door_Close+0xc0>)
 80011be:	f003 f895 	bl	80042ec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(BOMBAY_OPEN_CLOSE)/100);
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_BomBay_Door_Close+0xc4>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9a4 	bl	8000514 <__aeabi_ui2d>
 80011cc:	a31e      	add	r3, pc, #120	; (adr r3, 8001248 <MX_BomBay_Door_Close+0xb0>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fa19 	bl	8000608 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_BomBay_Door_Close+0xc8>)
 80011e4:	f7ff fb3a 	bl	800085c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	491b      	ldr	r1, [pc, #108]	; (800125c <MX_BomBay_Door_Close+0xc4>)
 80011ee:	680c      	ldr	r4, [r1, #0]
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fce0 	bl	8000bb8 <__aeabi_d2uiz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_Delay(2200);
 80011fc:	f640 0098 	movw	r0, #2200	; 0x898
 8001200:	f001 fc4a 	bl	8002a98 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_BomBay_Door_Close+0xc4>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f983 	bl	8000514 <__aeabi_ui2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	f7ff f9f7 	bl	8000608 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_BomBay_Door_Close+0xc8>)
 8001228:	f7ff fb18 	bl	800085c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	490a      	ldr	r1, [pc, #40]	; (800125c <MX_BomBay_Door_Close+0xc4>)
 8001232:	680c      	ldr	r4, [r1, #0]
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcbe 	bl	8000bb8 <__aeabi_d2uiz>
 800123c:	4603      	mov	r3, r0
 800123e:	63a3      	str	r3, [r4, #56]	; 0x38
	{
		//Halt and Do nothing.
		MX_Jump();

	}
}
 8001240:	bf00      	nop
 8001242:	bd98      	pop	{r3, r4, r7, pc}
 8001244:	f3af 8000 	nop.w
 8001248:	fff3a6e7 	.word	0xfff3a6e7
 800124c:	4058ffff 	.word	0x4058ffff
 8001250:	200004a3 	.word	0x200004a3
 8001254:	40020800 	.word	0x40020800
 8001258:	40020000 	.word	0x40020000
 800125c:	200003e4 	.word	0x200003e4
 8001260:	40590000 	.word	0x40590000
 8001264:	00000000 	.word	0x00000000

08001268 <MX_WINCH_DOWN_GP_RAMP_UP>:
//	}
//}


void MX_WINCH_DOWN_GP_RAMP_UP(void)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af02      	add	r7, sp, #8


	while(gp_i >= 16)
 800126e:	e079      	b.n	8001364 <MX_WINCH_DOWN_GP_RAMP_UP+0xfc>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(PWM_FIXED)/100);
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <MX_WINCH_DOWN_GP_RAMP_UP+0x118>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f94d 	bl	8000514 <__aeabi_ui2d>
 800127a:	a33f      	add	r3, pc, #252	; (adr r3, 8001378 <MX_WINCH_DOWN_GP_RAMP_UP+0x110>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9c2 	bl	8000608 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <MX_WINCH_DOWN_GP_RAMP_UP+0x11c>)
 8001292:	f7ff fae3 	bl	800085c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4939      	ldr	r1, [pc, #228]	; (8001380 <MX_WINCH_DOWN_GP_RAMP_UP+0x118>)
 800129c:	680c      	ldr	r4, [r1, #0]
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fc89 	bl	8000bb8 <__aeabi_d2uiz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	6363      	str	r3, [r4, #52]	; 0x34

		HAL_Delay(PWM_ON_DELAY(PWM_FIXED));
 80012aa:	2001      	movs	r0, #1
 80012ac:	f001 fbf4 	bl	8002a98 <HAL_Delay>

		sprintf((char*)buf, "Period: %d, %d, %f\r\n", gp_i, Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_WINCH_DOWN_GP_RAMP_UP+0x120>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	461c      	mov	r4, r3
 80012b6:	4b35      	ldr	r3, [pc, #212]	; (800138c <MX_WINCH_DOWN_GP_RAMP_UP+0x124>)
 80012b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012bc:	461d      	mov	r5, r3
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <MX_WINCH_DOWN_GP_RAMP_UP+0x128>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001394 <MX_WINCH_DOWN_GP_RAMP_UP+0x12c>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	ee17 0a90 	vmov	r0, s15
 80012d6:	f7ff f93f 	bl	8000558 <__aeabi_f2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <MX_WINCH_DOWN_GP_RAMP_UP+0x130>)
 80012e0:	f7fe ffda 	bl	8000298 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_WINCH_DOWN_GP_RAMP_UP+0x134>)
 80012f2:	f7ff f989 	bl	8000608 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9cd 2300 	strd	r2, r3, [sp]
 80012fe:	462b      	mov	r3, r5
 8001300:	4622      	mov	r2, r4
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <MX_WINCH_DOWN_GP_RAMP_UP+0x138>)
 8001304:	4827      	ldr	r0, [pc, #156]	; (80013a4 <MX_WINCH_DOWN_GP_RAMP_UP+0x13c>)
 8001306:	f00b f84d 	bl	800c3a4 <siprintf>
		//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 800130a:	2140      	movs	r1, #64	; 0x40
 800130c:	4825      	ldr	r0, [pc, #148]	; (80013a4 <MX_WINCH_DOWN_GP_RAMP_UP+0x13c>)
 800130e:	f009 ff5b 	bl	800b1c8 <CDC_Transmit_FS>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001312:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_WINCH_DOWN_GP_RAMP_UP+0x118>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8fc 	bl	8000514 <__aeabi_ui2d>
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	f7ff f970 	bl	8000608 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_WINCH_DOWN_GP_RAMP_UP+0x11c>)
 8001336:	f7ff fa91 	bl	800085c <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4910      	ldr	r1, [pc, #64]	; (8001380 <MX_WINCH_DOWN_GP_RAMP_UP+0x118>)
 8001340:	680c      	ldr	r4, [r1, #0]
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc37 	bl	8000bb8 <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	6363      	str	r3, [r4, #52]	; 0x34

		gp_i /= GP_DIV;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_WINCH_DOWN_GP_RAMP_UP+0x120>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_WINCH_DOWN_GP_RAMP_UP+0x120>)
 8001358:	801a      	strh	r2, [r3, #0]
		HAL_Delay(gp_i);
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_WINCH_DOWN_GP_RAMP_UP+0x120>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fb9a 	bl	8002a98 <HAL_Delay>
	while(gp_i >= 16)
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_WINCH_DOWN_GP_RAMP_UP+0x120>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d881      	bhi.n	8001270 <MX_WINCH_DOWN_GP_RAMP_UP+0x8>

	}

}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bdb0      	pop	{r4, r5, r7, pc}
 8001374:	f3af 8000 	nop.w
 8001378:	877be861 	.word	0x877be861
 800137c:	40478787 	.word	0x40478787
 8001380:	200003e4 	.word	0x200003e4
 8001384:	40590000 	.word	0x40590000
 8001388:	20000002 	.word	0x20000002
 800138c:	20000492 	.word	0x20000492
 8001390:	20000494 	.word	0x20000494
 8001394:	3a534067 	.word	0x3a534067
 8001398:	40040000 	.word	0x40040000
 800139c:	40240000 	.word	0x40240000
 80013a0:	0800e8b0 	.word	0x0800e8b0
 80013a4:	200004a8 	.word	0x200004a8

080013a8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN>:

void MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN(void)
{
 80013a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af04      	add	r7, sp, #16
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 80013b2:	2279      	movs	r2, #121	; 0x79
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	e063      	b.n	8001480 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xd8>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf4>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8a9 	bl	8000514 <__aeabi_ui2d>
 80013c2:	4604      	mov	r4, r0
 80013c4:	460d      	mov	r5, r1
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8b2 	bl	8000534 <__aeabi_i2d>
 80013d0:	a32f      	add	r3, pc, #188	; (adr r3, 8001490 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xe8>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7ff f917 	bl	8000608 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4620      	mov	r0, r4
 80013e0:	4629      	mov	r1, r5
 80013e2:	f7ff f911 	bl	8000608 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf8>)
 80013f4:	f7ff fa32 	bl	800085c <__aeabi_ddiv>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4927      	ldr	r1, [pc, #156]	; (800149c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf4>)
 80013fe:	680c      	ldr	r4, [r1, #0]
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbd8 	bl	8000bb8 <__aeabi_d2uiz>
 8001408:	4603      	mov	r3, r0
 800140a:	6363      	str	r3, [r4, #52]	; 0x34
		sprintf((char*)buf, "PWM: %d, %d, %f\r\n", i, Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	461c      	mov	r4, r3
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xfc>)
 8001414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001418:	461d      	mov	r5, r3
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x100>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001426:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80014ac <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x104>
 800142a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142e:	ee17 0a90 	vmov	r0, s15
 8001432:	f7ff f891 	bl	8000558 <__aeabi_f2d>
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x108>)
 800143c:	f7fe ff2c 	bl	8000298 <__aeabi_dsub>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x10c>)
 800144e:	f7ff f8db 	bl	8000608 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
 800145a:	462b      	mov	r3, r5
 800145c:	4622      	mov	r2, r4
 800145e:	4916      	ldr	r1, [pc, #88]	; (80014b8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x110>)
 8001460:	4816      	ldr	r0, [pc, #88]	; (80014bc <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x114>)
 8001462:	f00a ff9f 	bl	800c3a4 <siprintf>

		//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x114>)
 800146a:	f009 fead 	bl	800b1c8 <CDC_Transmit_FS>

		HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 800146e:	2014      	movs	r0, #20
 8001470:	f001 fb12 	bl	8002a98 <HAL_Delay>
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 800147e:	801a      	strh	r2, [r3, #0]
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	2bb3      	cmp	r3, #179	; 0xb3
 8001486:	d997      	bls.n	80013b8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x10>
	}



	for(i = INTERMITENT_DC; i> 0; i -- )
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xf0>)
 800148a:	22b4      	movs	r2, #180	; 0xb4
 800148c:	801a      	strh	r2, [r3, #0]
 800148e:	e0d8      	b.n	8001642 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x29a>
 8001490:	190cb39b 	.word	0x190cb39b
 8001494:	3fd91919 	.word	0x3fd91919
 8001498:	200004a4 	.word	0x200004a4
 800149c:	200003e4 	.word	0x200003e4
 80014a0:	40590000 	.word	0x40590000
 80014a4:	20000492 	.word	0x20000492
 80014a8:	20000494 	.word	0x20000494
 80014ac:	3a534067 	.word	0x3a534067
 80014b0:	40040000 	.word	0x40040000
 80014b4:	40240000 	.word	0x40240000
 80014b8:	0800e8c8 	.word	0x0800e8c8
 80014bc:	200004a8 	.word	0x200004a8
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80014c0:	4b9d      	ldr	r3, [pc, #628]	; (8001738 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x390>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f825 	bl	8000514 <__aeabi_ui2d>
 80014ca:	4604      	mov	r4, r0
 80014cc:	460d      	mov	r5, r1
 80014ce:	4b9b      	ldr	r3, [pc, #620]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f82e 	bl	8000534 <__aeabi_i2d>
 80014d8:	a391      	add	r3, pc, #580	; (adr r3, 8001720 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x378>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f893 	bl	8000608 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7ff f88d 	bl	8000608 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b91      	ldr	r3, [pc, #580]	; (8001740 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x398>)
 80014fc:	f7ff f9ae 	bl	800085c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	498c      	ldr	r1, [pc, #560]	; (8001738 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x390>)
 8001506:	680c      	ldr	r4, [r1, #0]
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb54 	bl	8000bb8 <__aeabi_d2uiz>
 8001510:	4603      	mov	r3, r0
 8001512:	6363      	str	r3, [r4, #52]	; 0x34
			sprintf((char*)buf, "PWM: %d, %d, %f\r\n", i, Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 8001514:	4b89      	ldr	r3, [pc, #548]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	461c      	mov	r4, r3
 800151a:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x39c>)
 800151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001520:	461d      	mov	r5, r3
 8001522:	4b89      	ldr	r3, [pc, #548]	; (8001748 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800174c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a4>
 8001532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001536:	ee17 0a90 	vmov	r0, s15
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b83      	ldr	r3, [pc, #524]	; (8001750 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a8>)
 8001544:	f7fe fea8 	bl	8000298 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3ac>)
 8001556:	f7ff f857 	bl	8000608 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	e9cd 2300 	strd	r2, r3, [sp]
 8001562:	462b      	mov	r3, r5
 8001564:	4622      	mov	r2, r4
 8001566:	497c      	ldr	r1, [pc, #496]	; (8001758 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b0>)
 8001568:	487c      	ldr	r0, [pc, #496]	; (800175c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b4>)
 800156a:	f00a ff1b 	bl	800c3a4 <siprintf>

			//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
			CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	487a      	ldr	r0, [pc, #488]	; (800175c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b4>)
 8001572:	f009 fe29 	bl	800b1c8 <CDC_Transmit_FS>

			HAL_Delay(PWM_RAMP_DOWN_DURATION);    //This finishes the ramp up in
 8001576:	2055      	movs	r0, #85	; 0x55
 8001578:	f001 fa8e 	bl	8002a98 <HAL_Delay>

			if(i == 99 )
 800157c:	4b6f      	ldr	r3, [pc, #444]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	2b63      	cmp	r3, #99	; 0x63
 8001582:	d102      	bne.n	800158a <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e2>
			{
				//Its only after this point the Spring thing needs to be activated
				poop_back = true;
 8001584:	4b76      	ldr	r3, [pc, #472]	; (8001760 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b8>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
			}

			if(((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) < 1.0f)
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800174c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a4>
 800159a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159e:	ee17 0a90 	vmov	r0, s15
 80015a2:	f7fe ffd9 	bl	8000558 <__aeabi_f2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b69      	ldr	r3, [pc, #420]	; (8001750 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a8>)
 80015ac:	f7fe fe74 	bl	8000298 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b69      	ldr	r3, [pc, #420]	; (8001764 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3bc>)
 80015be:	f7ff fa95 	bl	8000aec <__aeabi_dcmplt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d036      	beq.n	8001636 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x28e>
			{
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80015c8:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x390>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffa1 	bl	8000514 <__aeabi_ui2d>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f7ff f815 	bl	8000608 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b55      	ldr	r3, [pc, #340]	; (8001740 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x398>)
 80015ec:	f7ff f936 	bl	800085c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4950      	ldr	r1, [pc, #320]	; (8001738 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x390>)
 80015f6:	680c      	ldr	r4, [r1, #0]
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fadc 	bl	8000bb8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	6363      	str	r3, [r4, #52]	; 0x34
				sprintf((char*)buf, "Payload Soft landed:@Current: %f\r\n", (float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800174c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a4>
 8001614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a8>)
 8001626:	f7fe fe37 	bl	8000298 <__aeabi_dsub>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	494e      	ldr	r1, [pc, #312]	; (8001768 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3c0>)
 8001630:	484a      	ldr	r0, [pc, #296]	; (800175c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b4>)
 8001632:	f00a feb7 	bl	800c3a4 <siprintf>
	for(i = INTERMITENT_DC; i> 0; i -- )
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	3b01      	subs	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b3f      	ldr	r3, [pc, #252]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f af3a 	bne.w	80014c0 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x118>
			}
		}


 	Counts = Pulse;
 800164c:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x39c>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	461a      	mov	r2, r3
 8001654:	4b45      	ldr	r3, [pc, #276]	; (800176c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3c4>)
 8001656:	601a      	str	r2, [r3, #0]

 	Length = (2 * __PI * 3.14 * Counts) * 0.1428;
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff59 	bl	8000514 <__aeabi_ui2d>
 8001662:	a331      	add	r3, pc, #196	; (adr r3, 8001728 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x380>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe ffce 	bl	8000608 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	a32e      	add	r3, pc, #184	; (adr r3, 8001730 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x388>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ffc5 	bl	8000608 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fab7 	bl	8000bf8 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	4a38      	ldr	r2, [pc, #224]	; (8001770 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3c8>)
 800168e:	6013      	str	r3, [r2, #0]

 	sprintf((char*)buf, "PWM | Current | Length: %d, %d, %f, %f\r\n", i, Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10, Length);
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x394>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	461e      	mov	r6, r3
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x39c>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	4698      	mov	r8, r3
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016aa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800174c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a4>
 80016ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff4f 	bl	8000558 <__aeabi_f2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3a8>)
 80016c0:	f7fe fdea 	bl	8000298 <__aeabi_dsub>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3ac>)
 80016d2:	f7fe ff99 	bl	8000608 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4614      	mov	r4, r2
 80016dc:	461d      	mov	r5, r3
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff38 	bl	8000558 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016f0:	e9cd 4500 	strd	r4, r5, [sp]
 80016f4:	4643      	mov	r3, r8
 80016f6:	4632      	mov	r2, r6
 80016f8:	491e      	ldr	r1, [pc, #120]	; (8001774 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3cc>)
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b4>)
 80016fc:	f00a fe52 	bl	800c3a4 <siprintf>
 	//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 	CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4816      	ldr	r0, [pc, #88]	; (800175c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b4>)
 8001704:	f009 fd60 	bl	800b1c8 <CDC_Transmit_FS>

 	memset(buf, 0, sizeof(buf));
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	2100      	movs	r1, #0
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x3b4>)
 800170e:	f00a f9d7 	bl	800bac0 <memset>

}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	190cb39b 	.word	0x190cb39b
 8001724:	3fd91919 	.word	0x3fd91919
 8001728:	f8cf92ae 	.word	0xf8cf92ae
 800172c:	4033baac 	.word	0x4033baac
 8001730:	38ef34d7 	.word	0x38ef34d7
 8001734:	3fc24745 	.word	0x3fc24745
 8001738:	200003e4 	.word	0x200003e4
 800173c:	200004a4 	.word	0x200004a4
 8001740:	40590000 	.word	0x40590000
 8001744:	20000492 	.word	0x20000492
 8001748:	20000494 	.word	0x20000494
 800174c:	3a534067 	.word	0x3a534067
 8001750:	40040000 	.word	0x40040000
 8001754:	40240000 	.word	0x40240000
 8001758:	0800e8c8 	.word	0x0800e8c8
 800175c:	200004a8 	.word	0x200004a8
 8001760:	200004a0 	.word	0x200004a0
 8001764:	3ff00000 	.word	0x3ff00000
 8001768:	0800e8dc 	.word	0x0800e8dc
 800176c:	20000498 	.word	0x20000498
 8001770:	2000049c 	.word	0x2000049c
 8001774:	0800e900 	.word	0x0800e900

08001778 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>:

void MX_WINCH_UP_MOTO_RAMP_UP_DOWN(void)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8

	//First things first change the direction
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2101      	movs	r1, #1
 8001782:	48b7      	ldr	r0, [pc, #732]	; (8001a60 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2e8>)
 8001784:	f002 fdb2 	bl	80042ec <HAL_GPIO_WritePin>


	uint32_t loop_5 = Counts * 0.1;  //Set the threshold
 8001788:	4bb6      	ldr	r3, [pc, #728]	; (8001a64 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2ec>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fec1 	bl	8000514 <__aeabi_ui2d>
 8001792:	a3ab      	add	r3, pc, #684	; (adr r3, 8001a40 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2c8>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff36 	bl	8000608 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff fa08 	bl	8000bb8 <__aeabi_d2uiz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	607b      	str	r3, [r7, #4]

	//Ramp Up Sequence

	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 80017ac:	4bae      	ldr	r3, [pc, #696]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017ae:	221e      	movs	r2, #30
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	e0cb      	b.n	800194c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1d4>
	{
		if(Pulse > loop_5)
 80017b4:	4bad      	ldr	r3, [pc, #692]	; (8001a6c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f4>)
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4293      	cmp	r3, r2
 80017c0:	d25e      	bcs.n	8001880 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x108>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80017c2:	4bab      	ldr	r3, [pc, #684]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fea4 	bl	8000514 <__aeabi_ui2d>
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
 80017d0:	4ba5      	ldr	r3, [pc, #660]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fead 	bl	8000534 <__aeabi_i2d>
 80017da:	a39b      	add	r3, pc, #620	; (adr r3, 8001a48 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2d0>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe ff12 	bl	8000608 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe ff0c 	bl	8000608 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	4b9d      	ldr	r3, [pc, #628]	; (8001a74 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80017fe:	f7ff f82d 	bl	800085c <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	499a      	ldr	r1, [pc, #616]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001808:	680c      	ldr	r4, [r1, #0]
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f9d3 	bl	8000bb8 <__aeabi_d2uiz>
 8001812:	4603      	mov	r3, r0
 8001814:	6363      	str	r3, [r4, #52]	; 0x34
			sprintf((char*)buf, "PWM: %d, %d, %f\r\n", i, Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 8001816:	4b94      	ldr	r3, [pc, #592]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	461c      	mov	r4, r3
 800181c:	4b93      	ldr	r3, [pc, #588]	; (8001a6c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f4>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	461d      	mov	r5, r3
 8001824:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x300>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001830:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001a7c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x304>
 8001834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001838:	ee17 0a90 	vmov	r0, s15
 800183c:	f7fe fe8c 	bl	8000558 <__aeabi_f2d>
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 8001846:	f7fe fd27 	bl	8000298 <__aeabi_dsub>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b8b      	ldr	r3, [pc, #556]	; (8001a84 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x30c>)
 8001858:	f7fe fed6 	bl	8000608 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	e9cd 2300 	strd	r2, r3, [sp]
 8001864:	462b      	mov	r3, r5
 8001866:	4622      	mov	r2, r4
 8001868:	4987      	ldr	r1, [pc, #540]	; (8001a88 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x310>)
 800186a:	4888      	ldr	r0, [pc, #544]	; (8001a8c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x314>)
 800186c:	f00a fd9a 	bl	800c3a4 <siprintf>

			//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
			CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8001870:	2140      	movs	r1, #64	; 0x40
 8001872:	4886      	ldr	r0, [pc, #536]	; (8001a8c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x314>)
 8001874:	f009 fca8 	bl	800b1c8 <CDC_Transmit_FS>

			HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 8001878:	2014      	movs	r0, #20
 800187a:	f001 f90d 	bl	8002a98 <HAL_Delay>
 800187e:	e05f      	b.n	8001940 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1c8>

		//This is unlikely to ever happen but for safety.
		else
		{
			//Write a very short but effective ramp_down so that there is not jerk at zero.
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(40)/100);
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe45 	bl	8000514 <__aeabi_ui2d>
 800188a:	a371      	add	r3, pc, #452	; (adr r3, 8001a50 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2d8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe feba 	bl	8000608 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80018a2:	f7fe ffdb 	bl	800085c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4971      	ldr	r1, [pc, #452]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80018ac:	680c      	ldr	r4, [r1, #0]
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f981 	bl	8000bb8 <__aeabi_d2uiz>
 80018b6:	4603      	mov	r3, r0
 80018b8:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 80018ba:	2014      	movs	r0, #20
 80018bc:	f001 f8ec 	bl	8002a98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(20)/100);
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe25 	bl	8000514 <__aeabi_ui2d>
 80018ca:	a363      	add	r3, pc, #396	; (adr r3, 8001a58 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2e0>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fe9a 	bl	8000608 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80018e2:	f7fe ffbb 	bl	800085c <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4961      	ldr	r1, [pc, #388]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80018ec:	680c      	ldr	r4, [r1, #0]
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f961 	bl	8000bb8 <__aeabi_d2uiz>
 80018f6:	4603      	mov	r3, r0
 80018f8:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 80018fa:	2014      	movs	r0, #20
 80018fc:	f001 f8cc 	bl	8002a98 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001900:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe05 	bl	8000514 <__aeabi_ui2d>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f7fe fe79 	bl	8000608 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 8001924:	f7fe ff9a 	bl	800085c <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4950      	ldr	r1, [pc, #320]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 800192e:	680c      	ldr	r4, [r1, #0]
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f940 	bl	8000bb8 <__aeabi_d2uiz>
 8001938:	4603      	mov	r3, r0
 800193a:	6363      	str	r3, [r4, #52]	; 0x34

			//And just stop, something's fishy!
			MX_Jump();
 800193c:	f000 fc70 	bl	8002220 <MX_Jump>
	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	2bb3      	cmp	r3, #179	; 0xb3
 8001952:	f67f af2f 	bls.w	80017b4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x3c>
	}


	//Ramp Down Sequence

	for(i = INTERMITENT_DC; i> 0; i -- )
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001958:	22b4      	movs	r2, #180	; 0xb4
 800195a:	801a      	strh	r2, [r3, #0]
 800195c:	e06b      	b.n	8001a36 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2be>
		{
			if(Pulse > loop_5)
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f4>)
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4293      	cmp	r3, r2
 800196a:	f080 8091 	bcs.w	8001a90 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x318>
			{
				//There is enough room to spool at the current rate do nothing different.
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdce 	bl	8000514 <__aeabi_ui2d>
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdd7 	bl	8000534 <__aeabi_i2d>
 8001986:	a330      	add	r3, pc, #192	; (adr r3, 8001a48 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2d0>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fe3c 	bl	8000608 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fe36 	bl	8000608 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80019aa:	f7fe ff57 	bl	800085c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	492f      	ldr	r1, [pc, #188]	; (8001a70 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80019b4:	680c      	ldr	r4, [r1, #0]
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f8fd 	bl	8000bb8 <__aeabi_d2uiz>
 80019be:	4603      	mov	r3, r0
 80019c0:	6363      	str	r3, [r4, #52]	; 0x34
				sprintf((char*)buf, "PWM: %d, %d, %f\r\n", i, Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	461c      	mov	r4, r3
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f4>)
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	461d      	mov	r5, r3
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x300>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019dc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001a7c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x304>
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	ee17 0a90 	vmov	r0, s15
 80019e8:	f7fe fdb6 	bl	8000558 <__aeabi_f2d>
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 80019f2:	f7fe fc51 	bl	8000298 <__aeabi_dsub>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x30c>)
 8001a04:	f7fe fe00 	bl	8000608 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a10:	462b      	mov	r3, r5
 8001a12:	4622      	mov	r2, r4
 8001a14:	491c      	ldr	r1, [pc, #112]	; (8001a88 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x310>)
 8001a16:	481d      	ldr	r0, [pc, #116]	; (8001a8c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x314>)
 8001a18:	f00a fcc4 	bl	800c3a4 <siprintf>

				//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
				CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8001a1c:	2140      	movs	r1, #64	; 0x40
 8001a1e:	481b      	ldr	r0, [pc, #108]	; (8001a8c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x314>)
 8001a20:	f009 fbd2 	bl	800b1c8 <CDC_Transmit_FS>

				HAL_Delay(PWM_RAMP_DOWN_DURATION);    //This finishes the ramp up in
 8001a24:	2055      	movs	r0, #85	; 0x55
 8001a26:	f001 f837 	bl	8002a98 <HAL_Delay>
	for(i = INTERMITENT_DC; i> 0; i -- )
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d18f      	bne.n	800195e <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1e6>
 8001a3e:	e028      	b.n	8001a92 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x31a>
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	3fb99999 	.word	0x3fb99999
 8001a48:	190cb39b 	.word	0x190cb39b
 8001a4c:	3fd91919 	.word	0x3fd91919
 8001a50:	5f4fe082 	.word	0x5f4fe082
 8001a54:	402f5f5f 	.word	0x402f5f5f
 8001a58:	5f4fe082 	.word	0x5f4fe082
 8001a5c:	401f5f5f 	.word	0x401f5f5f
 8001a60:	40020800 	.word	0x40020800
 8001a64:	20000498 	.word	0x20000498
 8001a68:	200004a4 	.word	0x200004a4
 8001a6c:	20000492 	.word	0x20000492
 8001a70:	200003e4 	.word	0x200003e4
 8001a74:	40590000 	.word	0x40590000
 8001a78:	20000494 	.word	0x20000494
 8001a7c:	3a534067 	.word	0x3a534067
 8001a80:	40040000 	.word	0x40040000
 8001a84:	40240000 	.word	0x40240000
 8001a88:	0800e8c8 	.word	0x0800e8c8
 8001a8c:	200004a8 	.word	0x200004a8
			}

			else break;
 8001a90:	bf00      	nop
		}


	//Its only after this point we need to activate the door close interrupt flag
	close_door = true;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x380>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]


	//After breaking
	//There is room to spool but not so much. Run at constant speed untill button gets triggered
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(PWM_CONSTANT)/100);
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x384>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd39 	bl	8000514 <__aeabi_ui2d>
 8001aa2:	a313      	add	r3, pc, #76	; (adr r3, 8001af0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x378>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fdae 	bl	8000608 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x388>)
 8001aba:	f7fe fecf 	bl	800085c <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x384>)
 8001ac4:	680c      	ldr	r4, [r1, #0]
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f875 	bl	8000bb8 <__aeabi_d2uiz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6363      	str	r3, [r4, #52]	; 0x34
	sprintf((char*)buf, "About to reach the payload bay @ PWM: %d\r\n", PWM_CONSTANT);
 8001ad2:	2228      	movs	r2, #40	; 0x28
 8001ad4:	490b      	ldr	r1, [pc, #44]	; (8001b04 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x38c>)
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x390>)
 8001ad8:	f00a fc64 	bl	800c3a4 <siprintf>

	//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
	CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));
 8001adc:	2140      	movs	r1, #64	; 0x40
 8001ade:	480a      	ldr	r0, [pc, #40]	; (8001b08 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x390>)
 8001ae0:	f009 fb72 	bl	800b1c8 <CDC_Transmit_FS>

}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bdb0      	pop	{r4, r5, r7, pc}
 8001aec:	f3af 8000 	nop.w
 8001af0:	5f4fe082 	.word	0x5f4fe082
 8001af4:	402f5f5f 	.word	0x402f5f5f
 8001af8:	200004a2 	.word	0x200004a2
 8001afc:	200003e4 	.word	0x200003e4
 8001b00:	40590000 	.word	0x40590000
 8001b04:	0800e92c 	.word	0x0800e92c
 8001b08:	200004a8 	.word	0x200004a8

08001b0c <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a3f      	ldr	r2, [pc, #252]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d177      	bne.n	8001c0e <HAL_TIM_IC_CaptureCallback+0x102>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x110>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <HAL_TIM_IC_CaptureCallback+0x30>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001b26:	2100      	movs	r1, #0
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 f951 	bl	8006dd0 <HAL_TIM_ReadCapturedValue>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001b32:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x110>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001b3a:	e068      	b.n	8001c0e <HAL_TIM_IC_CaptureCallback+0x102>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f005 f946 	bl	8006dd0 <HAL_TIM_ReadCapturedValue>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a37      	ldr	r2, [pc, #220]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001b48:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d907      	bls.n	8001b66 <HAL_TIM_IC_CaptureCallback+0x5a>
				Difference = IC_Val2-IC_Val1;
 8001b56:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e00f      	b.n	8001b86 <HAL_TIM_IC_CaptureCallback+0x7a>
			else if (IC_Val1 > IC_Val2)
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d909      	bls.n	8001b86 <HAL_TIM_IC_CaptureCallback+0x7a>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b80:	33ff      	adds	r3, #255	; 0xff
 8001b82:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001b84:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <HAL_TIM_IC_CaptureCallback+0x120>)
 8001b88:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b96:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 8001ba4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001c34 <HAL_TIM_IC_CaptureCallback+0x128>
 8001ba8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb0:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bcc:	ee17 2a90 	vmov	r2, s15
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bd2:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bdc:	d306      	bcc.n	8001bec <HAL_TIM_IC_CaptureCallback+0xe0>
				Start_Flag = true;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x130>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
				HAL_TIM_IC_MspDeInit(&htim4);
 8001be4:	4816      	ldr	r0, [pc, #88]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001be6:	f000 fcc7 	bl	8002578 <HAL_TIM_IC_MspDeInit>
 8001bea:	e009      	b.n	8001c00 <HAL_TIM_IC_CaptureCallback+0xf4>
			else if(usWidth >= THROTTLE_HALF && usWidth < THROTTLE_FULL)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d903      	bls.n	8001c00 <HAL_TIM_IC_CaptureCallback+0xf4>
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x110>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40000800 	.word	0x40000800
 8001c1c:	20000480 	.word	0x20000480
 8001c20:	20000474 	.word	0x20000474
 8001c24:	20000478 	.word	0x20000478
 8001c28:	2000047c 	.word	0x2000047c
 8001c2c:	49742400 	.word	0x49742400
 8001c30:	20000488 	.word	0x20000488
 8001c34:	49742400 	.word	0x49742400
 8001c38:	20000484 	.word	0x20000484
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	2000042c 	.word	0x2000042c

08001c44 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af02      	add	r7, sp, #8

	indx++;  //Monitors the time
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_SYSTICK_Callback+0xf0>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <HAL_SYSTICK_Callback+0xf0>)
 8001c54:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_SYSTICK_Callback+0xf4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <HAL_SYSTICK_Callback+0xf4>)
 8001c5e:	6013      	str	r3, [r2, #0]


	if(indx == ENCODER_RAMP_UP_COUNT)
 8001c60:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <HAL_SYSTICK_Callback+0xf0>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f641 4207 	movw	r2, #7175	; 0x1c07
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d12c      	bne.n	8001cc6 <HAL_SYSTICK_Callback+0x82>
	{

		sprintf((char*)buf_tick, "TICKS | Current: %d, %f\r\n", Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_SYSTICK_Callback+0xf8>)
 8001c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c72:	461c      	mov	r4, r3
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_SYSTICK_Callback+0xfc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c80:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001d44 <HAL_SYSTICK_Callback+0x100>
 8001c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c88:	ee17 0a90 	vmov	r0, s15
 8001c8c:	f7fe fc64 	bl	8000558 <__aeabi_f2d>
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_SYSTICK_Callback+0x104>)
 8001c96:	f7fe faff 	bl	8000298 <__aeabi_dsub>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_SYSTICK_Callback+0x108>)
 8001ca8:	f7fe fcae 	bl	8000608 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	4926      	ldr	r1, [pc, #152]	; (8001d50 <HAL_SYSTICK_Callback+0x10c>)
 8001cb8:	4826      	ldr	r0, [pc, #152]	; (8001d54 <HAL_SYSTICK_Callback+0x110>)
 8001cba:	f00a fb73 	bl	800c3a4 <siprintf>
		//HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);

		//Do the Flash Write Sequence here.
		//Flash_Write_Data(0x08060000, (uint32_t*)Pulse, 1);

		indx = 0;
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_SYSTICK_Callback+0xf0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	801a      	strh	r2, [r3, #0]
				indx = 0;
	}

	else{}

}
 8001cc4:	e031      	b.n	8001d2a <HAL_SYSTICK_Callback+0xe6>
	else if(indx == ENCODER_RAMP_DOWN_COUNT)
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_SYSTICK_Callback+0xf0>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	f247 02b2 	movw	r2, #28850	; 0x70b2
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12b      	bne.n	8001d2a <HAL_SYSTICK_Callback+0xe6>
		sprintf((char*)buf_tick, "TICKS | Current: %d, %f\r\n", Pulse, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10);
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_SYSTICK_Callback+0xf8>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_SYSTICK_Callback+0xfc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001d44 <HAL_SYSTICK_Callback+0x100>
 8001cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cee:	ee17 0a90 	vmov	r0, s15
 8001cf2:	f7fe fc31 	bl	8000558 <__aeabi_f2d>
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_SYSTICK_Callback+0x104>)
 8001cfc:	f7fe facc 	bl	8000298 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_SYSTICK_Callback+0x108>)
 8001d0e:	f7fe fc7b 	bl	8000608 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9cd 2300 	strd	r2, r3, [sp]
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <HAL_SYSTICK_Callback+0x10c>)
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <HAL_SYSTICK_Callback+0x110>)
 8001d20:	f00a fb40 	bl	800c3a4 <siprintf>
				indx = 0;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_SYSTICK_Callback+0xf0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	3704      	adds	r7, #4
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000534 	.word	0x20000534
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	20000492 	.word	0x20000492
 8001d40:	20000494 	.word	0x20000494
 8001d44:	3a534067 	.word	0x3a534067
 8001d48:	40040000 	.word	0x40040000
 8001d4c:	40240000 	.word	0x40240000
 8001d50:	0800e958 	.word	0x0800e958
 8001d54:	200004f4 	.word	0x200004f4

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	; 0x50
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2230      	movs	r2, #48	; 0x30
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f009 feaa 	bl	800bac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <SystemClock_Config+0xcc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <SystemClock_Config+0xcc>)
 8001d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <SystemClock_Config+0xcc>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <SystemClock_Config+0xd0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <SystemClock_Config+0xd0>)
 8001da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <SystemClock_Config+0xd0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001dd0:	2390      	movs	r3, #144	; 0x90
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fd3d 	bl	8005860 <HAL_RCC_OscConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dec:	f000 fa1d 	bl	800222a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df0:	230f      	movs	r3, #15
 8001df2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df4:	2302      	movs	r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 ff9f 	bl	8005d50 <HAL_RCC_ClockConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e18:	f000 fa07 	bl	800222a <Error_Handler>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3750      	adds	r7, #80	; 0x50
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000

08001e2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <MX_ADC1_Init+0x9c>)
 8001e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <MX_ADC1_Init+0xa0>)
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e8a:	480e      	ldr	r0, [pc, #56]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001e8c:	f000 fe28 	bl	8002ae0 <HAL_ADC_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f000 f9c8 	bl	800222a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <MX_ADC1_Init+0x98>)
 8001eac:	f001 f884 	bl	8002fb8 <HAL_ADC_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001eb6:	f000 f9b8 	bl	800222a <Error_Handler>
  }

}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002f4 	.word	0x200002f4
 8001ec8:	40012000 	.word	0x40012000
 8001ecc:	0f000001 	.word	0x0f000001

08001ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f009 fdee 	bl	800bac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
  	 * Load the number to the ARR register.(Only 16 bit wide)
  	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
  	 *
  	 */

  htim2.Instance = TIM2;
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f14:	2303      	movs	r3, #3
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001f40:	f004 fb8c 	bl	800665c <HAL_TIM_Encoder_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f4a:	f000 f96e 	bl	800222a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_TIM2_Init+0xa4>)
 8001f5c:	f005 faf4 	bl	8007548 <HAL_TIMEx_MasterConfigSynchronization>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f66:	f000 f960 	bl	800222a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3730      	adds	r7, #48	; 0x30
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000039c 	.word	0x2000039c

08001f78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7e:	f107 0320 	add.w	r3, r7, #32
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <MX_TIM3_Init+0xc4>)
 8001f9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1; //60MHz
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fa2:	223b      	movs	r2, #59	; 0x3b
 8001fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000-1;
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fc0:	481d      	ldr	r0, [pc, #116]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fc2:	f004 f87d 	bl	80060c0 <HAL_TIM_PWM_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001fcc:	f000 f92d 	bl	800222a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fd8:	f107 0320 	add.w	r3, r7, #32
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4816      	ldr	r0, [pc, #88]	; (8002038 <MX_TIM3_Init+0xc0>)
 8001fe0:	f005 fab2 	bl	8007548 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001fea:	f000 f91e 	bl	800222a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fee:	2360      	movs	r3, #96	; 0x60
 8001ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <MX_TIM3_Init+0xc0>)
 8002006:	f004 fe21 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002010:	f000 f90b 	bl	800222a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2204      	movs	r2, #4
 8002018:	4619      	mov	r1, r3
 800201a:	4807      	ldr	r0, [pc, #28]	; (8002038 <MX_TIM3_Init+0xc0>)
 800201c:	f004 fe16 	bl	8006c4c <HAL_TIM_PWM_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002026:	f000 f900 	bl	800222a <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 800202a:	4803      	ldr	r0, [pc, #12]	; (8002038 <MX_TIM3_Init+0xc0>)
 800202c:	f000 fa1a 	bl	8002464 <HAL_TIM_MspPostInit>

}
 8002030:	bf00      	nop
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200003e4 	.word	0x200003e4
 800203c:	40000400 	.word	0x40000400

08002040 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002050:	463b      	mov	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_TIM4_Init+0xa0>)
 800205e:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <MX_TIM4_Init+0xa4>)
 8002060:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <MX_TIM4_Init+0xa0>)
 8002064:	223b      	movs	r2, #59	; 0x3b
 8002066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_TIM4_Init+0xa0>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MX_TIM4_Init+0xa0>)
 8002070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <MX_TIM4_Init+0xa0>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM4_Init+0xa0>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002082:	4817      	ldr	r0, [pc, #92]	; (80020e0 <MX_TIM4_Init+0xa0>)
 8002084:	f004 f980 	bl	8006388 <HAL_TIM_IC_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800208e:	f000 f8cc 	bl	800222a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	4619      	mov	r1, r3
 80020a0:	480f      	ldr	r0, [pc, #60]	; (80020e0 <MX_TIM4_Init+0xa0>)
 80020a2:	f005 fa51 	bl	8007548 <HAL_TIMEx_MasterConfigSynchronization>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80020ac:	f000 f8bd 	bl	800222a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80020b0:	230a      	movs	r3, #10
 80020b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020c0:	463b      	mov	r3, r7
 80020c2:	2200      	movs	r2, #0
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <MX_TIM4_Init+0xa0>)
 80020c8:	f004 fd24 	bl	8006b14 <HAL_TIM_IC_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80020d2:	f000 f8aa 	bl	800222a <Error_Handler>
  }

}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000042c 	.word	0x2000042c
 80020e4:	40000800 	.word	0x40000800

080020e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_DMA_Init+0x3c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <MX_DMA_Init+0x3c>)
 80020f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_DMA_Init+0x3c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2038      	movs	r0, #56	; 0x38
 8002110:	f001 fad7 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002114:	2038      	movs	r0, #56	; 0x38
 8002116:	f001 faf0 	bl	80036fa <HAL_NVIC_EnableIRQ>

}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b34      	ldr	r3, [pc, #208]	; (8002214 <MX_GPIO_Init+0xec>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a33      	ldr	r2, [pc, #204]	; (8002214 <MX_GPIO_Init+0xec>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <MX_GPIO_Init+0xec>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <MX_GPIO_Init+0xec>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <MX_GPIO_Init+0xec>)
 8002164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <MX_GPIO_Init+0xec>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <MX_GPIO_Init+0xec>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a25      	ldr	r2, [pc, #148]	; (8002214 <MX_GPIO_Init+0xec>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <MX_GPIO_Init+0xec>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_GPIO_Init+0xec>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <MX_GPIO_Init+0xec>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_GPIO_Init+0xec>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, winch_dir_Pin|bay_dir_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80021b4:	4818      	ldr	r0, [pc, #96]	; (8002218 <MX_GPIO_Init+0xf0>)
 80021b6:	f002 f899 	bl	80042ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : spring_thing_ext_Pin */
  GPIO_InitStruct.Pin = spring_thing_ext_Pin;
 80021ba:	2308      	movs	r3, #8
 80021bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(spring_thing_ext_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4812      	ldr	r0, [pc, #72]	; (8002218 <MX_GPIO_Init+0xf0>)
 80021d0:	f001 fe24 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : winch_dir_Pin bay_dir_Pin */
  GPIO_InitStruct.Pin = winch_dir_Pin|bay_dir_Pin;
 80021d4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	480a      	ldr	r0, [pc, #40]	; (8002218 <MX_GPIO_Init+0xf0>)
 80021ee:	f001 fe15 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : roof_top_ext_Pin */
  GPIO_InitStruct.Pin = roof_top_ext_Pin;
 80021f2:	2301      	movs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(roof_top_ext_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_GPIO_Init+0xf4>)
 8002208:	f001 fe08 	bl	8003e1c <HAL_GPIO_Init>

}
 800220c:	bf00      	nop
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400

08002220 <MX_Jump>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void MX_Jump()
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002224:	b672      	cpsid	i
}
 8002226:	bf00      	nop
	__disable_irq();
	while(1);
 8002228:	e7fe      	b.n	8002228 <MX_Jump+0x8>

0800222a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800222e:	b672      	cpsid	i
}
 8002230:	bf00      	nop

	/*
	 * Can Add ASSERT Statements here, for debugging purpose only.
	 */
  __disable_irq();
  while (1)
 8002232:	e7fe      	b.n	8002232 <Error_Handler+0x8>

08002234 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_MspInit+0x4c>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_MspInit+0x4c>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a33      	ldr	r2, [pc, #204]	; (8002370 <HAL_ADC_MspInit+0xec>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d15f      	bne.n	8002366 <HAL_ADC_MspInit+0xe2>
  {

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b32      	ldr	r3, [pc, #200]	; (8002374 <HAL_ADC_MspInit+0xf0>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a31      	ldr	r2, [pc, #196]	; (8002374 <HAL_ADC_MspInit+0xf0>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_ADC_MspInit+0xf0>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_ADC_MspInit+0xf0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_ADC_MspInit+0xf0>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_ADC_MspInit+0xf0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = curr_sensor_Pin;
 80022de:	2310      	movs	r3, #16
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e2:	2303      	movs	r3, #3
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(curr_sensor_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4821      	ldr	r0, [pc, #132]	; (8002378 <HAL_ADC_MspInit+0xf4>)
 80022f2:	f001 fd93 	bl	8003e1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_ADC_MspInit+0xf8>)
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_ADC_MspInit+0xfc>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_ADC_MspInit+0xf8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_ADC_MspInit+0xf8>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002314:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800231c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002320:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002324:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800232c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002336:	2200      	movs	r2, #0
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800233a:	4810      	ldr	r0, [pc, #64]	; (800237c <HAL_ADC_MspInit+0xf8>)
 800233c:	f001 f9fe 	bl	800373c <HAL_DMA_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002346:	f7ff ff70 	bl	800222a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_ADC_MspInit+0xf8>)
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_ADC_MspInit+0xf8>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2012      	movs	r0, #18
 800235c:	f001 f9b1 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002360:	2012      	movs	r0, #18
 8002362:	f001 f9ca 	bl	80036fa <HAL_NVIC_EnableIRQ>

  }

}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40012000 	.word	0x40012000
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	2000033c 	.word	0x2000033c
 8002380:	40026410 	.word	0x40026410

08002384 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d133      	bne.n	800240e <HAL_TIM_Encoder_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_TIM_Encoder_MspInit+0x94>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <HAL_TIM_Encoder_MspInit+0x94>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_TIM_Encoder_MspInit+0x94>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_TIM_Encoder_MspInit+0x94>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_TIM_Encoder_MspInit+0x94>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_TIM_Encoder_MspInit+0x94>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder_a_Pin|encoder_b_Pin;
 80023de:	2303      	movs	r3, #3
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <HAL_TIM_Encoder_MspInit+0x98>)
 80023fa:	f001 fd0f 	bl	8003e1c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	201c      	movs	r0, #28
 8002404:	f001 f95d 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002408:	201c      	movs	r0, #28
 800240a:	f001 f976 	bl	80036fa <HAL_NVIC_EnableIRQ>

  }

}
 800240e:	bf00      	nop
 8002410:	3728      	adds	r7, #40	; 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000

08002420 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_TIM_PWM_MspInit+0x3c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10d      	bne.n	800244e <HAL_TIM_PWM_MspInit+0x2e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_TIM_PWM_MspInit+0x40>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <HAL_TIM_PWM_MspInit+0x40>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_TIM_PWM_MspInit+0x40>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

  }

}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40000400 	.word	0x40000400
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_TIM_MspPostInit+0x68>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d11d      	bne.n	80024c2 <HAL_TIM_MspPostInit+0x5e>
  {

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_TIM_MspPostInit+0x6c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_TIM_MspPostInit+0x6c>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_TIM_MspPostInit+0x6c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = winch_pwm_Pin|bay_door_pwm_Pin;
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_TIM_MspPostInit+0x70>)
 80024be:	f001 fcad 	bl	8003e1c <HAL_GPIO_Init>

  }

}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_TIM_IC_MspInit+0x94>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d133      	bne.n	8002562 <HAL_TIM_IC_MspInit+0x8a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_TIM_IC_MspInit+0x98>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_TIM_IC_MspInit+0x98>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_TIM_IC_MspInit+0x98>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_TIM_IC_MspInit+0x98>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <HAL_TIM_IC_MspInit+0x98>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_TIM_IC_MspInit+0x98>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = pixhawk_signal_Pin;
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002542:	2302      	movs	r3, #2
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pixhawk_signal_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <HAL_TIM_IC_MspInit+0x9c>)
 800254e:	f001 fc65 	bl	8003e1c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	201e      	movs	r0, #30
 8002558:	f001 f8b3 	bl	80036c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800255c:	201e      	movs	r0, #30
 800255e:	f001 f8cc 	bl	80036fa <HAL_NVIC_EnableIRQ>

  }

}
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40000800 	.word	0x40000800
 8002570:	40023800 	.word	0x40023800
 8002574:	40020400 	.word	0x40020400

08002578 <HAL_TIM_IC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef* htim_ic)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if(htim_ic->Instance==TIM4)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_TIM_IC_MspDeInit+0x30>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d109      	bne.n	800259e <HAL_TIM_IC_MspDeInit+0x26>
  {

    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_TIM_IC_MspDeInit+0x34>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_TIM_IC_MspDeInit+0x34>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6413      	str	r3, [r2, #64]	; 0x40

    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    HAL_GPIO_DeInit(pixhawk_signal_GPIO_Port, pixhawk_signal_Pin);
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <HAL_TIM_IC_MspDeInit+0x38>)
 800259a:	f001 fdc3 	bl	8004124 <HAL_GPIO_DeInit>

  }

}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020400 	.word	0x40020400

080025b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  while (1){}
 80025b8:	e7fe      	b.n	80025b8 <NMI_Handler+0x4>

080025ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  while (1){}
 80025be:	e7fe      	b.n	80025be <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  while (1){}
 80025c4:	e7fe      	b.n	80025c4 <MemManage_Handler+0x4>

080025c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  while (1){}
 80025ca:	e7fe      	b.n	80025ca <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  while (1){}
 80025d0:	e7fe      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
   HAL_IncTick();
 8002600:	f000 fa2a 	bl	8002a58 <HAL_IncTick>
   HAL_SYSTICK_IRQHandler();
 8002604:	f001 f893 	bl	800372e <HAL_SYSTICK_IRQHandler>
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <ADC_IRQHandler+0x10>)
 8002612:	f000 faa8 	bl	8002b66 <HAL_ADC_IRQHandler>
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200002f4 	.word	0x200002f4

08002620 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_adc1);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <DMA2_Stream0_IRQHandler+0x10>)
 8002626:	f001 f98f 	bl	8003948 <HAL_DMA_IRQHandler>

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000033c 	.word	0x2000033c

08002634 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0

  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <OTG_FS_IRQHandler+0x10>)
 800263a:	f001 ffe4 	bl	8004606 <HAL_PCD_IRQHandler>

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200011f4 	.word	0x200011f4

08002648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	//tim2.Instance->CNT
	Clicks = __HAL_TIM_GET_COUNTER(&htim2);
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <TIM2_IRQHandler+0x4c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	4a11      	ldr	r2, [pc, #68]	; (8002698 <TIM2_IRQHandler+0x50>)
 8002654:	6013      	str	r3, [r2, #0]
	click = (int16_t)Clicks;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <TIM2_IRQHandler+0x50>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b21a      	sxth	r2, r3
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <TIM2_IRQHandler+0x54>)
 800265e:	801a      	strh	r2, [r3, #0]
	Pulse = click * 0.25;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <TIM2_IRQHandler+0x54>)
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff64 	bl	8000534 <__aeabi_i2d>
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <TIM2_IRQHandler+0x58>)
 8002672:	f7fd ffc9 	bl	8000608 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fa73 	bl	8000b68 <__aeabi_d2iz>
 8002682:	4603      	mov	r3, r0
 8002684:	b21a      	sxth	r2, r3
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <TIM2_IRQHandler+0x5c>)
 8002688:	801a      	strh	r2, [r3, #0]

	HAL_TIM_IRQHandler(&htim2);
 800268a:	4802      	ldr	r0, [pc, #8]	; (8002694 <TIM2_IRQHandler+0x4c>)
 800268c:	f004 f93a 	bl	8006904 <HAL_TIM_IRQHandler>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000039c 	.word	0x2000039c
 8002698:	2000048c 	.word	0x2000048c
 800269c:	20000490 	.word	0x20000490
 80026a0:	3fd00000 	.word	0x3fd00000
 80026a4:	20000492 	.word	0x20000492

080026a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <TIM4_IRQHandler+0x10>)
 80026ae:	f004 f929 	bl	8006904 <HAL_TIM_IRQHandler>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000042c 	.word	0x2000042c

080026bc <EXTI0_IRQHandler>:
  * @brief This function handles External global interrupt 0.
  *
  */

void EXTI0_IRQHandler()
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	/*
	 *  This subroutine handles the Spring thing interrupt
	 *
	 *  PB0
	 */
	if(poop_back)
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <EXTI0_IRQHandler+0x34>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <EXTI0_IRQHandler+0x28>
	{
		//HAL_UART_Transmit(&huart2, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * 0/100);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <EXTI0_IRQHandler+0x38>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80026d0:	2100      	movs	r1, #0
 80026d2:	4808      	ldr	r0, [pc, #32]	; (80026f4 <EXTI0_IRQHandler+0x38>)
 80026d4:	f003 fdf4 	bl	80062c0 <HAL_TIM_PWM_Stop>


		poop_back = false; // Disable the flag
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <EXTI0_IRQHandler+0x34>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
		spring_trig = true; // Activate the flag
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <EXTI0_IRQHandler+0x3c>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]

	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f001 fe1b 	bl	8004320 <HAL_GPIO_EXTI_IRQHandler>

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200004a0 	.word	0x200004a0
 80026f4:	200003e4 	.word	0x200003e4
 80026f8:	200004a1 	.word	0x200004a1

080026fc <EXTI3_IRQHandler>:
  * @brief This function handles External global interrupt 3.
  *
  */

void EXTI3_IRQHandler()
{
 80026fc:	b598      	push	{r3, r4, r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PC3
	 */

	if(close_door)
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <EXTI3_IRQHandler+0xa0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d043      	beq.n	8002790 <EXTI3_IRQHandler+0x94>
	{
		//HAL_UART_Transmit(&huart2, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <EXTI3_IRQHandler+0xa4>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff01 	bl	8000514 <__aeabi_ui2d>
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f7fd ff75 	bl	8000608 <__aeabi_dmul>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <EXTI3_IRQHandler+0xa8>)
 800272c:	f7fe f896 	bl	800085c <__aeabi_ddiv>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	491a      	ldr	r1, [pc, #104]	; (80027a0 <EXTI3_IRQHandler+0xa4>)
 8002736:	680c      	ldr	r4, [r1, #0]
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa3c 	bl	8000bb8 <__aeabi_d2uiz>
 8002740:	4603      	mov	r3, r0
 8002742:	6363      	str	r3, [r4, #52]	; 0x34


		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <EXTI3_IRQHandler+0xac>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	2101      	movs	r1, #1
 800274e:	4817      	ldr	r0, [pc, #92]	; (80027ac <EXTI3_IRQHandler+0xb0>)
 8002750:	f001 fdcc 	bl	80042ec <HAL_GPIO_WritePin>

				__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <EXTI3_IRQHandler+0xa4>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fedb 	bl	8000514 <__aeabi_ui2d>
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f7fd ff4f 	bl	8000608 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <EXTI3_IRQHandler+0xa8>)
 8002778:	f7fe f870 	bl	800085c <__aeabi_ddiv>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <EXTI3_IRQHandler+0xa4>)
 8002782:	680c      	ldr	r4, [r1, #0]
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa16 	bl	8000bb8 <__aeabi_d2uiz>
 800278c:	4603      	mov	r3, r0
 800278e:	6363      	str	r3, [r4, #52]	; 0x34
	}


	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002790:	2008      	movs	r0, #8
 8002792:	f001 fdc5 	bl	8004320 <HAL_GPIO_EXTI_IRQHandler>

}
 8002796:	bf00      	nop
 8002798:	bd98      	pop	{r3, r4, r7, pc}
 800279a:	bf00      	nop
 800279c:	200004a2 	.word	0x200004a2
 80027a0:	200003e4 	.word	0x200003e4
 80027a4:	40590000 	.word	0x40590000
 80027a8:	200004a3 	.word	0x200004a3
 80027ac:	40020800 	.word	0x40020800

080027b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_kill>:

int _kill(int pid, int sig)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ca:	f009 f94f 	bl	800ba6c <__errno>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2216      	movs	r2, #22
 80027d2:	601a      	str	r2, [r3, #0]
	return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_exit>:

void _exit (int status)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ffe7 	bl	80027c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027f2:	e7fe      	b.n	80027f2 <_exit+0x12>

080027f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e00a      	b.n	800281c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002806:	f3af 8000 	nop.w
 800280a:	4601      	mov	r1, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	60ba      	str	r2, [r7, #8]
 8002812:	b2ca      	uxtb	r2, r1
 8002814:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	dbf0      	blt.n	8002806 <_read+0x12>
	}

return len;
 8002824:	687b      	ldr	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e009      	b.n	8002854 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	60ba      	str	r2, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3301      	adds	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbf1      	blt.n	8002840 <_write+0x12>
	}
	return len;
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_close>:

int _close(int file)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return -1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288e:	605a      	str	r2, [r3, #4]
	return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_isatty>:

int _isatty(int file)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	return 1;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
	return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <_sbrk+0x5c>)
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <_sbrk+0x60>)
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <_sbrk+0x64>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <_sbrk+0x68>)
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d207      	bcs.n	8002910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002900:	f009 f8b4 	bl	800ba6c <__errno>
 8002904:	4603      	mov	r3, r0
 8002906:	220c      	movs	r2, #12
 8002908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e009      	b.n	8002924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <_sbrk+0x64>)
 8002920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20010000 	.word	0x20010000
 8002930:	00000400 	.word	0x00000400
 8002934:	20000538 	.word	0x20000538
 8002938:	20001930 	.word	0x20001930

0800293c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <SystemInit+0x20>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <SystemInit+0x20>)
 8002948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002964:	480d      	ldr	r0, [pc, #52]	; (800299c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002966:	490e      	ldr	r1, [pc, #56]	; (80029a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800296c:	e002      	b.n	8002974 <LoopCopyDataInit>

0800296e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002972:	3304      	adds	r3, #4

08002974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002978:	d3f9      	bcc.n	800296e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297a:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800297c:	4c0b      	ldr	r4, [pc, #44]	; (80029ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002980:	e001      	b.n	8002986 <LoopFillZerobss>

08002982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002984:	3204      	adds	r2, #4

08002986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002988:	d3fb      	bcc.n	8002982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800298a:	f7ff ffd7 	bl	800293c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298e:	f009 f873 	bl	800ba78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002992:	f7fe fb65 	bl	8001060 <main>
  bx  lr    
 8002996:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002998:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a0:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80029a4:	0800edd4 	.word	0x0800edd4
  ldr r2, =_sbss
 80029a8:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80029ac:	20001930 	.word	0x20001930

080029b0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b0:	e7fe      	b.n	80029b0 <DMA1_Stream0_IRQHandler>
	...

080029b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <HAL_Init+0x40>)
 80029be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_Init+0x40>)
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_Init+0x40>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029dc:	2003      	movs	r0, #3
 80029de:	f000 fe65 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e2:	200f      	movs	r0, #15
 80029e4:	f000 f808 	bl	80029f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e8:	f7ff fc24 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x54>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_InitTick+0x58>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fe7d 	bl	8003716 <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00e      	b.n	8002a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d80a      	bhi.n	8002a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f000 fe45 	bl	80036c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a38:	4a06      	ldr	r2, [pc, #24]	; (8002a54 <HAL_InitTick+0x5c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	20000010 	.word	0x20000010
 8002a54:	2000000c 	.word	0x2000000c

08002a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x20>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_IncTick+0x24>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_IncTick+0x24>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000010 	.word	0x20000010
 8002a7c:	2000053c 	.word	0x2000053c

08002a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_GetTick+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2000053c 	.word	0x2000053c

08002a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff ffee 	bl	8002a80 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d005      	beq.n	8002abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_Delay+0x44>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002abe:	bf00      	nop
 8002ac0:	f7ff ffde 	bl	8002a80 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8f7      	bhi.n	8002ac0 <HAL_Delay+0x28>
  {
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000010 	.word	0x20000010

08002ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e033      	b.n	8002b5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fbc0 	bl	8002284 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b26:	f023 0302 	bic.w	r3, r3, #2
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fb62 	bl	80031fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4e:	e001      	b.n	8002b54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d049      	beq.n	8002c30 <HAL_ADC_IRQHandler+0xca>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d046      	beq.n	8002c30 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d12b      	bne.n	8002c20 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d127      	bne.n	8002c20 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d119      	bne.n	8002c20 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0220 	bic.w	r2, r2, #32
 8002bfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f9a1 	bl	8002f68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0212 	mvn.w	r2, #18
 8002c2e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d057      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0x190>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d054      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d139      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d12b      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d124      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11d      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d119      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fc06 	bl	80034f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 020c 	mvn.w	r2, #12
 8002cf4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d017      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x1d6>
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d014      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10d      	bne.n	8002d3c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f92f 	bl	8002f90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0201 	mvn.w	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d4a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d015      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x218>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f043 0202 	orr.w	r2, r3, #2
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0220 	mvn.w	r2, #32
 8002d6c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f918 	bl	8002fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0220 	mvn.w	r2, #32
 8002d7c:	601a      	str	r2, [r3, #0]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Start_DMA+0x1e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0ce      	b.n	8002f44 <HAL_ADC_Start_DMA+0x1bc>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d018      	beq.n	8002dee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dcc:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_ADC_Start_DMA+0x1c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5f      	ldr	r2, [pc, #380]	; (8002f50 <HAL_ADC_Start_DMA+0x1c8>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9a      	lsrs	r2, r3, #18
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d107      	bne.n	8002e0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	f040 8086 	bne.w	8002f2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5c:	d106      	bne.n	8002e6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f023 0206 	bic.w	r2, r3, #6
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
 8002e6a:	e002      	b.n	8002e72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e7a:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_ADC_Start_DMA+0x1cc>)
 8002e7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <HAL_ADC_Start_DMA+0x1d0>)
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_ADC_Start_DMA+0x1d4>)
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_ADC_Start_DMA+0x1d8>)
 8002e94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002eae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	334c      	adds	r3, #76	; 0x4c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f000 fce2 	bl	8003898 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10f      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d129      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	e020      	b.n	8002f42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_ADC_Start_DMA+0x1dc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d11b      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x1ba>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d114      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e00b      	b.n	8002f42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	431bde83 	.word	0x431bde83
 8002f54:	40012300 	.word	0x40012300
 8002f58:	080033f5 	.word	0x080033f5
 8002f5c:	080034af 	.word	0x080034af
 8002f60:	080034cb 	.word	0x080034cb
 8002f64:	40012000 	.word	0x40012000

08002f68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x1c>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e105      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x228>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d925      	bls.n	8003030 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b1e      	subs	r3, #30
 8002ffa:	2207      	movs	r2, #7
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43da      	mvns	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	400a      	ands	r2, r1
 8003008:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68d9      	ldr	r1, [r3, #12]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	4603      	mov	r3, r0
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4403      	add	r3, r0
 8003022:	3b1e      	subs	r3, #30
 8003024:	409a      	lsls	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	e022      	b.n	8003076 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6919      	ldr	r1, [r3, #16]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	2207      	movs	r2, #7
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	400a      	ands	r2, r1
 8003052:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6919      	ldr	r1, [r3, #16]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	4603      	mov	r3, r0
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4403      	add	r3, r0
 800306c:	409a      	lsls	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b06      	cmp	r3, #6
 800307c:	d824      	bhi.n	80030c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	3b05      	subs	r3, #5
 8003090:	221f      	movs	r2, #31
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43da      	mvns	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	400a      	ands	r2, r1
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	3b05      	subs	r3, #5
 80030ba:	fa00 f203 	lsl.w	r2, r0, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	635a      	str	r2, [r3, #52]	; 0x34
 80030c6:	e04c      	b.n	8003162 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d824      	bhi.n	800311a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b23      	subs	r3, #35	; 0x23
 80030e2:	221f      	movs	r2, #31
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43da      	mvns	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	400a      	ands	r2, r1
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4618      	mov	r0, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	3b23      	subs	r3, #35	; 0x23
 800310c:	fa00 f203 	lsl.w	r2, r0, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
 8003118:	e023      	b.n	8003162 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b41      	subs	r3, #65	; 0x41
 800312c:	221f      	movs	r2, #31
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	400a      	ands	r2, r1
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	4618      	mov	r0, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	3b41      	subs	r3, #65	; 0x41
 8003156:	fa00 f203 	lsl.w	r2, r0, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <HAL_ADC_ConfigChannel+0x234>)
 8003164:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <HAL_ADC_ConfigChannel+0x238>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d109      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1cc>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b12      	cmp	r3, #18
 8003176:	d105      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_ADC_ConfigChannel+0x238>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d123      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x21e>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d003      	beq.n	800319e <HAL_ADC_ConfigChannel+0x1e6>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b11      	cmp	r3, #17
 800319c:	d11b      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d111      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_ADC_ConfigChannel+0x23c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_ADC_ConfigChannel+0x240>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	0c9a      	lsrs	r2, r3, #18
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031c8:	e002      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f9      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40012300 	.word	0x40012300
 80031f0:	40012000 	.word	0x40012000
 80031f4:	20000008 	.word	0x20000008
 80031f8:	431bde83 	.word	0x431bde83

080031fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003204:	4b79      	ldr	r3, [pc, #484]	; (80033ec <ADC_Init+0x1f0>)
 8003206:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	021a      	lsls	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <ADC_Init+0x1f4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e00f      	b.n	80032fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0202 	bic.w	r2, r2, #2
 8003308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e1b      	ldrb	r3, [r3, #24]
 8003314:	005a      	lsls	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003336:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	3b01      	subs	r3, #1
 8003354:	035a      	lsls	r2, r3, #13
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e007      	b.n	8003370 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	3b01      	subs	r3, #1
 800338c:	051a      	lsls	r2, r3, #20
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033b2:	025a      	lsls	r2, r3, #9
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	029a      	lsls	r2, r3, #10
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40012300 	.word	0x40012300
 80033f0:	0f000001 	.word	0x0f000001

080033f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800340a:	2b00      	cmp	r3, #0
 800340c:	d13c      	bne.n	8003488 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d12b      	bne.n	8003480 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d127      	bne.n	8003480 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003448:	2b00      	cmp	r3, #0
 800344a:	d119      	bne.n	8003480 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0220 	bic.w	r2, r2, #32
 800345a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fd71 	bl	8002f68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003486:	e00e      	b.n	80034a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff fd85 	bl	8002fa4 <HAL_ADC_ErrorCallback>
}
 800349a:	e004      	b.n	80034a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fd5d 	bl	8002f7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff fd5a 	bl	8002fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <__NVIC_EnableIRQ+0x38>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	; (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
         );
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003678:	d301      	bcc.n	800367e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2301      	movs	r3, #1
 800367c:	e00f      	b.n	800369e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <SysTick_Config+0x40>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003686:	210f      	movs	r1, #15
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f7ff ff8e 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <SysTick_Config+0x40>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <SysTick_Config+0x40>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000e010 	.word	0xe000e010

080036ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff29 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d4:	f7ff ff3e 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	6978      	ldr	r0, [r7, #20]
 80036e0:	f7ff ff8e 	bl	8003600 <NVIC_EncodePriority>
 80036e4:	4602      	mov	r2, r0
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff5d 	bl	80035ac <__NVIC_SetPriority>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff31 	bl	8003570 <__NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffa2 	bl	8003668 <SysTick_Config>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003732:	f7fe fa87 	bl	8001c44 <HAL_SYSTICK_Callback>
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7ff f99a 	bl	8002a80 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e099      	b.n	800388c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003778:	e00f      	b.n	800379a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800377a:	f7ff f981 	bl	8002a80 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b05      	cmp	r3, #5
 8003786:	d908      	bls.n	800379a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2203      	movs	r2, #3
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e078      	b.n	800388c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e8      	bne.n	800377a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_DMA_Init+0x158>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b04      	cmp	r3, #4
 800382c:	d117      	bne.n	800385e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fa6f 	bl	8003d24 <DMA_CheckFifoParam>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800385a:	2301      	movs	r3, #1
 800385c:	e016      	b.n	800388c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa26 	bl	8003cb8 <DMA_CalcBaseAndBitshift>
 800386c:	4603      	mov	r3, r0
 800386e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	223f      	movs	r2, #63	; 0x3f
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	f010803f 	.word	0xf010803f

08003898 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_DMA_Start_IT+0x26>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e040      	b.n	8003940 <HAL_DMA_Start_IT+0xa8>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d12f      	bne.n	8003932 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f9b8 	bl	8003c5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	409a      	lsls	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0216 	orr.w	r2, r2, #22
 8003906:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0208 	orr.w	r2, r2, #8
 800391e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e005      	b.n	800393e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800393a:	2302      	movs	r3, #2
 800393c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800393e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003954:	4b8e      	ldr	r3, [pc, #568]	; (8003b90 <HAL_DMA_IRQHandler+0x248>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a8e      	ldr	r2, [pc, #568]	; (8003b94 <HAL_DMA_IRQHandler+0x24c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01a      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2208      	movs	r2, #8
 80039a2:	409a      	lsls	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2204      	movs	r2, #4
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2210      	movs	r2, #16
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d043      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2210      	movs	r2, #16
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d024      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	e01f      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
 8003a88:	e016      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0208 	bic.w	r2, r2, #8
 8003aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	2220      	movs	r2, #32
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 808f 	beq.w	8003be8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8087 	beq.w	8003be8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2220      	movs	r2, #32
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d136      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0216 	bic.w	r2, r2, #22
 8003b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_DMA_IRQHandler+0x1da>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0208 	bic.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	223f      	movs	r2, #63	; 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07e      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
        }
        return;
 8003b5e:	e079      	b.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d031      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	e02c      	b.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
 8003b8e:	bf00      	nop
 8003b90:	20000008 	.word	0x20000008
 8003b94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d023      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
 8003ba8:	e01e      	b.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0210 	bic.w	r2, r2, #16
 8003bc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d032      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2205      	movs	r2, #5
 8003c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d307      	bcc.n	8003c30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f2      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x2cc>
 8003c2e:	e000      	b.n	8003c32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c54:	bf00      	nop
    }
  }
}
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d108      	bne.n	8003c9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c9a:	e007      	b.n	8003cac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3b10      	subs	r3, #16
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <DMA_CalcBaseAndBitshift+0x64>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	091b      	lsrs	r3, r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d909      	bls.n	8003cfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	1d1a      	adds	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf8:	e007      	b.n	8003d0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	aaaaaaab 	.word	0xaaaaaaab
 8003d20:	0800e9e0 	.word	0x0800e9e0

08003d24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d11f      	bne.n	8003d7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d856      	bhi.n	8003df2 <DMA_CheckFifoParam+0xce>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <DMA_CheckFifoParam+0x28>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d6f 	.word	0x08003d6f
 8003d54:	08003d5d 	.word	0x08003d5d
 8003d58:	08003df3 	.word	0x08003df3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d046      	beq.n	8003df6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6c:	e043      	b.n	8003df6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d76:	d140      	bne.n	8003dfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e03d      	b.n	8003dfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d86:	d121      	bne.n	8003dcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d837      	bhi.n	8003dfe <DMA_CheckFifoParam+0xda>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <DMA_CheckFifoParam+0x70>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003dab 	.word	0x08003dab
 8003d9c:	08003da5 	.word	0x08003da5
 8003da0:	08003dbd 	.word	0x08003dbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e030      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d025      	beq.n	8003e02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dba:	e022      	b.n	8003e02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc4:	d11f      	bne.n	8003e06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dca:	e01c      	b.n	8003e06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d903      	bls.n	8003dda <DMA_CheckFifoParam+0xb6>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d003      	beq.n	8003de0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dd8:	e018      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dde:	e015      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      break;
 8003df0:	e00b      	b.n	8003e0a <DMA_CheckFifoParam+0xe6>
      break;
 8003df2:	bf00      	nop
 8003df4:	e00a      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e008      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e006      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e004      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
      break;
 8003e0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e159      	b.n	80040ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	f040 8148 	bne.w	80040e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d005      	beq.n	8003e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d130      	bne.n	8003ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	2203      	movs	r2, #3
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 0201 	and.w	r2, r3, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d017      	beq.n	8003f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d123      	bne.n	8003f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	08da      	lsrs	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3208      	adds	r2, #8
 8003f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	08da      	lsrs	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3208      	adds	r2, #8
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a2 	beq.w	80040e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b57      	ldr	r3, [pc, #348]	; (8004104 <HAL_GPIO_Init+0x2e8>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	4a56      	ldr	r2, [pc, #344]	; (8004104 <HAL_GPIO_Init+0x2e8>)
 8003fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb2:	4b54      	ldr	r3, [pc, #336]	; (8004104 <HAL_GPIO_Init+0x2e8>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fbe:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a49      	ldr	r2, [pc, #292]	; (800410c <HAL_GPIO_Init+0x2f0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d019      	beq.n	800401e <HAL_GPIO_Init+0x202>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a48      	ldr	r2, [pc, #288]	; (8004110 <HAL_GPIO_Init+0x2f4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_GPIO_Init+0x1fe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a47      	ldr	r2, [pc, #284]	; (8004114 <HAL_GPIO_Init+0x2f8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00d      	beq.n	8004016 <HAL_GPIO_Init+0x1fa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a46      	ldr	r2, [pc, #280]	; (8004118 <HAL_GPIO_Init+0x2fc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <HAL_GPIO_Init+0x1f6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a45      	ldr	r2, [pc, #276]	; (800411c <HAL_GPIO_Init+0x300>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_GPIO_Init+0x1f2>
 800400a:	2304      	movs	r3, #4
 800400c:	e008      	b.n	8004020 <HAL_GPIO_Init+0x204>
 800400e:	2307      	movs	r3, #7
 8004010:	e006      	b.n	8004020 <HAL_GPIO_Init+0x204>
 8004012:	2303      	movs	r3, #3
 8004014:	e004      	b.n	8004020 <HAL_GPIO_Init+0x204>
 8004016:	2302      	movs	r3, #2
 8004018:	e002      	b.n	8004020 <HAL_GPIO_Init+0x204>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_GPIO_Init+0x204>
 800401e:	2300      	movs	r3, #0
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f002 0203 	and.w	r2, r2, #3
 8004026:	0092      	lsls	r2, r2, #2
 8004028:	4093      	lsls	r3, r2
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004030:	4935      	ldr	r1, [pc, #212]	; (8004108 <HAL_GPIO_Init+0x2ec>)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	3302      	adds	r3, #2
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_GPIO_Init+0x304>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004062:	4a2f      	ldr	r2, [pc, #188]	; (8004120 <HAL_GPIO_Init+0x304>)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_GPIO_Init+0x304>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800408c:	4a24      	ldr	r2, [pc, #144]	; (8004120 <HAL_GPIO_Init+0x304>)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <HAL_GPIO_Init+0x304>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b6:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <HAL_GPIO_Init+0x304>)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <HAL_GPIO_Init+0x304>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e0:	4a0f      	ldr	r2, [pc, #60]	; (8004120 <HAL_GPIO_Init+0x304>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	f67f aea2 	bls.w	8003e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3724      	adds	r7, #36	; 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	40013800 	.word	0x40013800
 800410c:	40020000 	.word	0x40020000
 8004110:	40020400 	.word	0x40020400
 8004114:	40020800 	.word	0x40020800
 8004118:	40020c00 	.word	0x40020c00
 800411c:	40021000 	.word	0x40021000
 8004120:	40013c00 	.word	0x40013c00

08004124 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e0bb      	b.n	80042b8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004140:	2201      	movs	r2, #1
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	f040 80ab 	bne.w	80042b2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800415c:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_GPIO_DeInit+0x1ac>)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	3302      	adds	r3, #2
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220f      	movs	r2, #15
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a54      	ldr	r2, [pc, #336]	; (80042d4 <HAL_GPIO_DeInit+0x1b0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d019      	beq.n	80041ba <HAL_GPIO_DeInit+0x96>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a53      	ldr	r2, [pc, #332]	; (80042d8 <HAL_GPIO_DeInit+0x1b4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_GPIO_DeInit+0x92>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_GPIO_DeInit+0x1b8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00d      	beq.n	80041b2 <HAL_GPIO_DeInit+0x8e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <HAL_GPIO_DeInit+0x1bc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_DeInit+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a50      	ldr	r2, [pc, #320]	; (80042e4 <HAL_GPIO_DeInit+0x1c0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_GPIO_DeInit+0x86>
 80041a6:	2304      	movs	r3, #4
 80041a8:	e008      	b.n	80041bc <HAL_GPIO_DeInit+0x98>
 80041aa:	2307      	movs	r3, #7
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_DeInit+0x98>
 80041ae:	2303      	movs	r3, #3
 80041b0:	e004      	b.n	80041bc <HAL_GPIO_DeInit+0x98>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e002      	b.n	80041bc <HAL_GPIO_DeInit+0x98>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_GPIO_DeInit+0x98>
 80041ba:	2300      	movs	r3, #0
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	f002 0203 	and.w	r2, r2, #3
 80041c2:	0092      	lsls	r2, r2, #2
 80041c4:	4093      	lsls	r3, r2
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d132      	bne.n	8004232 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041cc:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	4944      	ldr	r1, [pc, #272]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041da:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	4941      	ldr	r1, [pc, #260]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041e8:	4b3f      	ldr	r3, [pc, #252]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	493d      	ldr	r1, [pc, #244]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041f6:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	493a      	ldr	r1, [pc, #232]	; (80042e8 <HAL_GPIO_DeInit+0x1c4>)
 8004200:	4013      	ands	r3, r2
 8004202:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	220f      	movs	r2, #15
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004214:	4a2e      	ldr	r2, [pc, #184]	; (80042d0 <HAL_GPIO_DeInit+0x1ac>)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	43da      	mvns	r2, r3
 8004224:	482a      	ldr	r0, [pc, #168]	; (80042d0 <HAL_GPIO_DeInit+0x1ac>)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	400a      	ands	r2, r1
 800422c:	3302      	adds	r3, #2
 800422e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	2103      	movs	r1, #3
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	220f      	movs	r2, #15
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	08d2      	lsrs	r2, r2, #3
 8004268:	4019      	ands	r1, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3208      	adds	r2, #8
 800426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	2103      	movs	r1, #3
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	2101      	movs	r1, #1
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2103      	movs	r1, #3
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	401a      	ands	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f af40 	bls.w	8004140 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40013800 	.word	0x40013800
 80042d4:	40020000 	.word	0x40020000
 80042d8:	40020400 	.word	0x40020400
 80042dc:	40020800 	.word	0x40020800
 80042e0:	40020c00 	.word	0x40020c00
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40013c00 	.word	0x40013c00

080042ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
 80042f8:	4613      	mov	r3, r2
 80042fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042fc:	787b      	ldrb	r3, [r7, #1]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004308:	e003      	b.n	8004312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f806 	bl	8004350 <HAL_GPIO_EXTI_Callback>
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40013c00 	.word	0x40013c00

08004350 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004368:	b08f      	sub	sp, #60	; 0x3c
 800436a:	af0a      	add	r7, sp, #40	; 0x28
 800436c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e10f      	b.n	8004598 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f007 f860 	bl	800b458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2203      	movs	r2, #3
 800439c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fa5d 	bl	8007876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	687e      	ldr	r6, [r7, #4]
 80043c4:	466d      	mov	r5, sp
 80043c6:	f106 0410 	add.w	r4, r6, #16
 80043ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80043da:	1d33      	adds	r3, r6, #4
 80043dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043de:	6838      	ldr	r0, [r7, #0]
 80043e0:	f003 f934 	bl	800764c <USB_CoreInit>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0d0      	b.n	8004598 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 fa4b 	bl	8007898 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	e04a      	b.n	800449e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	333d      	adds	r3, #61	; 0x3d
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	333c      	adds	r3, #60	; 0x3c
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	b298      	uxth	r0, r3
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3344      	adds	r3, #68	; 0x44
 8004444:	4602      	mov	r2, r0
 8004446:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3340      	adds	r3, #64	; 0x40
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3348      	adds	r3, #72	; 0x48
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	334c      	adds	r3, #76	; 0x4c
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004484:	7bfa      	ldrb	r2, [r7, #15]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	3354      	adds	r3, #84	; 0x54
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	3301      	adds	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d3af      	bcc.n	8004408 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]
 80044ac:	e044      	b.n	8004538 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800451c:	7bfa      	ldrb	r2, [r7, #15]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	3301      	adds	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	d3b5      	bcc.n	80044ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	687e      	ldr	r6, [r7, #4]
 800454a:	466d      	mov	r5, sp
 800454c:	f106 0410 	add.w	r4, r6, #16
 8004550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800455c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004560:	1d33      	adds	r3, r6, #4
 8004562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004564:	6838      	ldr	r0, [r7, #0]
 8004566:	f003 f9e3 	bl	8007930 <USB_DevInit>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e00d      	b.n	8004598 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f004 fb32 	bl	8008bfa <USB_DevDisconnect>

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_PCD_Start+0x1c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e020      	b.n	80045fe <HAL_PCD_Start+0x5e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d109      	bne.n	80045e0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d005      	beq.n	80045e0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f003 f935 	bl	8007854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 fae2 	bl	8008bb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004606:	b590      	push	{r4, r7, lr}
 8004608:	b08d      	sub	sp, #52	; 0x34
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f004 fba0 	bl	8008d62 <USB_GetMode>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 848a 	bne.w	8004f3e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f004 fb04 	bl	8008c3c <USB_ReadInterrupts>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8480 	beq.w	8004f3c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f004 faf1 	bl	8008c3c <USB_ReadInterrupts>
 800465a:	4603      	mov	r3, r0
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d107      	bne.n	8004674 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f002 0202 	and.w	r2, r2, #2
 8004672:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f004 fadf 	bl	8008c3c <USB_ReadInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d161      	bne.n	800474c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0210 	bic.w	r2, r2, #16
 8004696:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	3304      	adds	r3, #4
 80046b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	0c5b      	lsrs	r3, r3, #17
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d124      	bne.n	800470e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d035      	beq.n	800473c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6a38      	ldr	r0, [r7, #32]
 80046e4:	f004 f916 	bl	8008914 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046f4:	441a      	add	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6a1a      	ldr	r2, [r3, #32]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004706:	441a      	add	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
 800470c:	e016      	b.n	800473c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	0c5b      	lsrs	r3, r3, #17
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	2b06      	cmp	r3, #6
 8004718:	d110      	bne.n	800473c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004720:	2208      	movs	r2, #8
 8004722:	4619      	mov	r1, r3
 8004724:	6a38      	ldr	r0, [r7, #32]
 8004726:	f004 f8f5 	bl	8008914 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6a1a      	ldr	r2, [r3, #32]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004736:	441a      	add	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0210 	orr.w	r2, r2, #16
 800474a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f004 fa73 	bl	8008c3c <USB_ReadInterrupts>
 8004756:	4603      	mov	r3, r0
 8004758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004760:	f040 80a7 	bne.w	80048b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f004 fa78 	bl	8008c62 <USB_ReadDevAllOutEpInterrupt>
 8004772:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004774:	e099      	b.n	80048aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 808e 	beq.w	800489e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f004 fa9c 	bl	8008cca <USB_ReadDevOutEPInterrupt>
 8004792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	2301      	movs	r3, #1
 80047ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80047b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fec2 	bl	800553c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	2308      	movs	r3, #8
 80047d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80047d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 ff98 	bl	800570c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	461a      	mov	r2, r3
 80047f4:	2310      	movs	r3, #16
 80047f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d030      	beq.n	8004864 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d109      	bne.n	8004822 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004820:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d108      	bne.n	8004852 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2200      	movs	r2, #0
 8004844:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	b2db      	uxtb	r3, r3
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f006 feff 	bl	800b650 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2302      	movs	r3, #2
 8004862:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	461a      	mov	r2, r3
 800487c:	2320      	movs	r3, #32
 800487e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	461a      	mov	r2, r3
 8004898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800489c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	3301      	adds	r3, #1
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f af62 	bne.w	8004776 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 f9c0 	bl	8008c3c <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c6:	f040 80db 	bne.w	8004a80 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 f9e1 	bl	8008c96 <USB_ReadDevAllInEpInterrupt>
 80048d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80048da:	e0cd      	b.n	8004a78 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80c2 	beq.w	8004a6c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fa07 	bl	8008d06 <USB_ReadDevInEPInterrupt>
 80048f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d057      	beq.n	80049b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	2201      	movs	r2, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	43db      	mvns	r3, r3
 800491e:	69f9      	ldr	r1, [r7, #28]
 8004920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004924:	4013      	ands	r3, r2
 8004926:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	2301      	movs	r3, #1
 8004938:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d132      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334c      	adds	r3, #76	; 0x4c
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4403      	add	r3, r0
 8004962:	3348      	adds	r3, #72	; 0x48
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4419      	add	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4403      	add	r3, r0
 8004976:	334c      	adds	r3, #76	; 0x4c
 8004978:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d113      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x3a2>
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	3354      	adds	r3, #84	; 0x54
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d108      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049a0:	461a      	mov	r2, r3
 80049a2:	2101      	movs	r1, #1
 80049a4:	f004 fa0e 	bl	8008dc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f006 fdd3 	bl	800b55a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	461a      	mov	r2, r3
 80049cc:	2308      	movs	r3, #8
 80049ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	461a      	mov	r2, r3
 80049e8:	2310      	movs	r3, #16
 80049ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d023      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a14:	6a38      	ldr	r0, [r7, #32]
 8004a16:	f003 f8ef 	bl	8007bf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	3338      	adds	r3, #56	; 0x38
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	78db      	ldrb	r3, [r3, #3]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d108      	bne.n	8004a48 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f006 fe16 	bl	800b674 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	461a      	mov	r2, r3
 8004a56:	2302      	movs	r3, #2
 8004a58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fcdb 	bl	8005422 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	3301      	adds	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f47f af2e 	bne.w	80048dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f004 f8d9 	bl	8008c3c <USB_ReadInterrupts>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a94:	d122      	bne.n	8004adc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d108      	bne.n	8004ac6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004abc:	2100      	movs	r1, #0
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fec2 	bl	8005848 <HAL_PCDEx_LPM_Callback>
 8004ac4:	e002      	b.n	8004acc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f006 fdb4 	bl	800b634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f004 f8ab 	bl	8008c3c <USB_ReadInterrupts>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af0:	d112      	bne.n	8004b18 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d102      	bne.n	8004b08 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f006 fd70 	bl	800b5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b16:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 f88d 	bl	8008c3c <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2c:	f040 80b7 	bne.w	8004c9e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2110      	movs	r1, #16
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 f854 	bl	8007bf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b54:	e046      	b.n	8004be4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	461a      	mov	r2, r3
 8004b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	461a      	mov	r2, r3
 8004b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	3301      	adds	r3, #1
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d3b3      	bcc.n	8004b56 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bfc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1a:	f043 030b 	orr.w	r3, r3, #11
 8004c1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c30:	f043 030b 	orr.w	r3, r3, #11
 8004c34:	6453      	str	r3, [r2, #68]	; 0x44
 8004c36:	e015      	b.n	8004c64 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c4a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c4e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c5e:	f043 030b 	orr.w	r3, r3, #11
 8004c62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f004 f89b 	bl	8008dc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f003 ffca 	bl	8008c3c <USB_ReadInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d124      	bne.n	8004cfe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f004 f860 	bl	8008d7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f003 f815 	bl	8007cf2 <USB_GetDevSpeed>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681c      	ldr	r4, [r3, #0]
 8004cd4:	f001 f9e8 	bl	80060a8 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f002 fd14 	bl	8007710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f006 fc5e 	bl	800b5aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 ff9a 	bl	8008c3c <USB_ReadInterrupts>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d10a      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f006 fc3b 	bl	800b58e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f002 0208 	and.w	r2, r2, #8
 8004d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 ff85 	bl	8008c3c <USB_ReadInterrupts>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d122      	bne.n	8004d82 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4c:	e014      	b.n	8004d78 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d105      	bne.n	8004d72 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb27 	bl	80053c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	3301      	adds	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3e5      	bcc.n	8004d4e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f003 ff58 	bl	8008c3c <USB_ReadInterrupts>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d13b      	bne.n	8004e10 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9c:	e02b      	b.n	8004df6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3340      	adds	r3, #64	; 0x40
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d115      	bne.n	8004df0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da12      	bge.n	8004df0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	333f      	adds	r3, #63	; 0x3f
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fae8 	bl	80053c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	3301      	adds	r3, #1
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d3ce      	bcc.n	8004d9e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 ff11 	bl	8008c3c <USB_ReadInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e24:	d155      	bne.n	8004ed2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e26:	2301      	movs	r3, #1
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2a:	e045      	b.n	8004eb8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d12e      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da2b      	bge.n	8004eb2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004e66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d121      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eae:	6053      	str	r3, [r2, #4]
            break;
 8004eb0:	e007      	b.n	8004ec2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3b4      	bcc.n	8004e2c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 feb0 	bl	8008c3c <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d10a      	bne.n	8004efe <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f006 fbd5 	bl	800b698 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 fe9a 	bl	8008c3c <USB_ReadInterrupts>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d115      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f006 fbc5 	bl	800b6b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e000      	b.n	8004f3e <HAL_PCD_IRQHandler+0x938>
      return;
 8004f3c:	bf00      	nop
    }
  }
}
 8004f3e:	3734      	adds	r7, #52	; 0x34
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd90      	pop	{r4, r7, pc}

08004f44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_PCD_SetAddress+0x1a>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e013      	b.n	8004f86 <HAL_PCD_SetAddress+0x42>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f003 fdf8 	bl	8008b6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	70fb      	strb	r3, [r7, #3]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	803b      	strh	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da0f      	bge.n	8004fd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	3338      	adds	r3, #56	; 0x38
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3304      	adds	r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	705a      	strb	r2, [r3, #1]
 8004fd2:	e00f      	b.n	8004ff4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	3304      	adds	r3, #4
 8004fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005000:	883a      	ldrh	r2, [r7, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	78ba      	ldrb	r2, [r7, #2]
 800500a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800501e:	78bb      	ldrb	r3, [r7, #2]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d102      	bne.n	800502a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_PCD_EP_Open+0xaa>
 8005034:	2302      	movs	r3, #2
 8005036:	e00e      	b.n	8005056 <HAL_PCD_EP_Open+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68f9      	ldr	r1, [r7, #12]
 8005046:	4618      	mov	r0, r3
 8005048:	f002 fe78 	bl	8007d3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005054:	7afb      	ldrb	r3, [r7, #11]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800506a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	da0f      	bge.n	8005092 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	4613      	mov	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	3338      	adds	r3, #56	; 0x38
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	3304      	adds	r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	705a      	strb	r2, [r3, #1]
 8005090:	e00f      	b.n	80050b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	3304      	adds	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_PCD_EP_Close+0x6e>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e00e      	b.n	80050ea <HAL_PCD_EP_Close+0x8c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	4618      	mov	r0, r3
 80050dc:	f002 feb6 	bl	8007e4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	460b      	mov	r3, r1
 8005100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	3304      	adds	r3, #4
 800511a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005134:	7afb      	ldrb	r3, [r7, #11]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	b2da      	uxtb	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	6979      	ldr	r1, [r7, #20]
 8005166:	f003 f995 	bl	8008494 <USB_EP0StartXfer>
 800516a:	e008      	b.n	800517e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	6979      	ldr	r1, [r7, #20]
 800517a:	f002 ff43 	bl	8008004 <USB_EPStartXfer>
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80051aa:	681b      	ldr	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	460b      	mov	r3, r1
 80051c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c8:	7afb      	ldrb	r3, [r7, #11]
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	3338      	adds	r3, #56	; 0x38
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2200      	movs	r2, #0
 80051f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2201      	movs	r2, #1
 80051f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d102      	bne.n	8005212 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005212:	7afb      	ldrb	r3, [r7, #11]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	f003 f933 	bl	8008494 <USB_EP0StartXfer>
 800522e:	e008      	b.n	8005242 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6979      	ldr	r1, [r7, #20]
 800523e:	f002 fee1 	bl	8008004 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 020f 	and.w	r2, r3, #15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d901      	bls.n	800526a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e050      	b.n	800530c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800526a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da0f      	bge.n	8005292 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3338      	adds	r3, #56	; 0x38
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	3304      	adds	r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	705a      	strb	r2, [r3, #1]
 8005290:	e00d      	b.n	80052ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_PCD_EP_SetStall+0x82>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e01e      	b.n	800530c <HAL_PCD_EP_SetStall+0xc0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	4618      	mov	r0, r3
 80052de:	f003 fb71 	bl	80089c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	b2d9      	uxtb	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052fc:	461a      	mov	r2, r3
 80052fe:	f003 fd61 	bl	8008dc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d901      	bls.n	8005332 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e042      	b.n	80053b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005336:	2b00      	cmp	r3, #0
 8005338:	da0f      	bge.n	800535a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	3338      	adds	r3, #56	; 0x38
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	3304      	adds	r3, #4
 8005350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	705a      	strb	r2, [r3, #1]
 8005358:	e00f      	b.n	800537a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b2da      	uxtb	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_PCD_EP_ClrStall+0x86>
 8005396:	2302      	movs	r3, #2
 8005398:	e00e      	b.n	80053b8 <HAL_PCD_EP_ClrStall+0xa4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f003 fb79 	bl	8008aa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80053cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	da0c      	bge.n	80053ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	f003 020f 	and.w	r2, r3, #15
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	3338      	adds	r3, #56	; 0x38
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e00c      	b.n	8005408 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	3304      	adds	r3, #4
 8005406:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	4618      	mov	r0, r3
 8005410:	f003 f998 	bl	8008744 <USB_EPStopXfer>
 8005414:	4603      	mov	r3, r0
 8005416:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005418:	7afb      	ldrb	r3, [r7, #11]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b08a      	sub	sp, #40	; 0x28
 8005426:	af02      	add	r7, sp, #8
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	3338      	adds	r3, #56	; 0x38
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	3304      	adds	r3, #4
 8005448:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	429a      	cmp	r2, r3
 8005454:	d901      	bls.n	800545a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e06c      	b.n	8005534 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	429a      	cmp	r2, r3
 800546e:	d902      	bls.n	8005476 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3303      	adds	r3, #3
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800547e:	e02b      	b.n	80054d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	d902      	bls.n	800549c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	3303      	adds	r3, #3
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6919      	ldr	r1, [r3, #16]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4603      	mov	r3, r0
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f003 f9ec 	bl	8008898 <USB_WritePacket>

    ep->xfer_buff  += len;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	441a      	add	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	441a      	add	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d809      	bhi.n	8005502 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d203      	bcs.n	8005502 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1be      	bne.n	8005480 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	429a      	cmp	r2, r3
 800550c:	d811      	bhi.n	8005532 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	2201      	movs	r2, #1
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	43db      	mvns	r3, r3
 8005528:	6939      	ldr	r1, [r7, #16]
 800552a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552e:	4013      	ands	r3, r2
 8005530:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	333c      	adds	r3, #60	; 0x3c
 8005554:	3304      	adds	r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d17b      	bne.n	800566a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4a61      	ldr	r2, [pc, #388]	; (8005704 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	f240 80b9 	bls.w	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80b3 	beq.w	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a4:	6093      	str	r3, [r2, #8]
 80055a6:	e0a7      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	461a      	mov	r2, r3
 80055c0:	2320      	movs	r3, #32
 80055c2:	6093      	str	r3, [r2, #8]
 80055c4:	e098      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f040 8093 	bne.w	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4a4b      	ldr	r2, [pc, #300]	; (8005704 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d90f      	bls.n	80055fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f6:	6093      	str	r3, [r2, #8]
 80055f8:	e07e      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4413      	add	r3, r2
 800560c:	3304      	adds	r3, #4
 800560e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	440b      	add	r3, r1
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d114      	bne.n	800565c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005644:	461a      	mov	r2, r3
 8005646:	2101      	movs	r1, #1
 8005648:	f003 fbbc 	bl	8008dc4 <USB_EP0_OutStart>
 800564c:	e006      	b.n	800565c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	441a      	add	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f005 ff5e 	bl	800b524 <HAL_PCD_DataOutStageCallback>
 8005668:	e046      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d124      	bne.n	80056bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	461a      	mov	r2, r3
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	6093      	str	r3, [r2, #8]
 8005690:	e032      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2320      	movs	r3, #32
 80056ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f005 ff35 	bl	800b524 <HAL_PCD_DataOutStageCallback>
 80056ba:	e01d      	b.n	80056f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d114      	bne.n	80056ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056e4:	461a      	mov	r2, r3
 80056e6:	2100      	movs	r1, #0
 80056e8:	f003 fb6c 	bl	8008dc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f005 ff16 	bl	800b524 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	4f54300a 	.word	0x4f54300a
 8005708:	4f54310a 	.word	0x4f54310a

0800570c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	333c      	adds	r3, #60	; 0x3c
 8005724:	3304      	adds	r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <PCD_EP_OutSetupPacket_int+0x88>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d90e      	bls.n	8005760 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005748:	2b00      	cmp	r3, #0
 800574a:	d009      	beq.n	8005760 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	461a      	mov	r2, r3
 800575a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f005 fecd 	bl	800b500 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <PCD_EP_OutSetupPacket_int+0x88>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d90c      	bls.n	8005788 <PCD_EP_OutSetupPacket_int+0x7c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d108      	bne.n	8005788 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005780:	461a      	mov	r2, r3
 8005782:	2101      	movs	r1, #1
 8005784:	f003 fb1e 	bl	8008dc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	4f54300a 	.word	0x4f54300a

08005798 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
 80057a4:	4613      	mov	r3, r2
 80057a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80057b6:	883b      	ldrh	r3, [r7, #0]
 80057b8:	0419      	lsls	r1, r3, #16
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
 80057c4:	e028      	b.n	8005818 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e00d      	b.n	80057f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	3340      	adds	r3, #64	; 0x40
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4413      	add	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	3301      	adds	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	7bfa      	ldrb	r2, [r7, #15]
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d3ec      	bcc.n	80057da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005800:	883b      	ldrh	r3, [r7, #0]
 8005802:	0418      	lsls	r0, r3, #16
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6819      	ldr	r1, [r3, #0]
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	3b01      	subs	r3, #1
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	4302      	orrs	r2, r0
 8005810:	3340      	adds	r3, #64	; 0x40
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e267      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d075      	beq.n	800596a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800587e:	4b88      	ldr	r3, [pc, #544]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	2b04      	cmp	r3, #4
 8005888:	d00c      	beq.n	80058a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800588a:	4b85      	ldr	r3, [pc, #532]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005892:	2b08      	cmp	r3, #8
 8005894:	d112      	bne.n	80058bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005896:	4b82      	ldr	r3, [pc, #520]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a2:	d10b      	bne.n	80058bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a4:	4b7e      	ldr	r3, [pc, #504]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d05b      	beq.n	8005968 <HAL_RCC_OscConfig+0x108>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d157      	bne.n	8005968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e242      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	d106      	bne.n	80058d4 <HAL_RCC_OscConfig+0x74>
 80058c6:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a75      	ldr	r2, [pc, #468]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e01d      	b.n	8005910 <HAL_RCC_OscConfig+0xb0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x98>
 80058de:	4b70      	ldr	r3, [pc, #448]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a6f      	ldr	r2, [pc, #444]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6c      	ldr	r2, [pc, #432]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0xb0>
 80058f8:	4b69      	ldr	r3, [pc, #420]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a68      	ldr	r2, [pc, #416]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	4b66      	ldr	r3, [pc, #408]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a65      	ldr	r2, [pc, #404]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 800590a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fd f8b2 	bl	8002a80 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005920:	f7fd f8ae 	bl	8002a80 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e207      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0xc0>
 800593e:	e014      	b.n	800596a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fd f89e 	bl	8002a80 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005948:	f7fd f89a 	bl	8002a80 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b64      	cmp	r3, #100	; 0x64
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e1f3      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595a:	4b51      	ldr	r3, [pc, #324]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0xe8>
 8005966:	e000      	b.n	800596a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d063      	beq.n	8005a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005982:	4b47      	ldr	r3, [pc, #284]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598e:	4b44      	ldr	r3, [pc, #272]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d116      	bne.n	80059c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599a:	4b41      	ldr	r3, [pc, #260]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_RCC_OscConfig+0x152>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d001      	beq.n	80059b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e1c7      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4937      	ldr	r1, [pc, #220]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c6:	e03a      	b.n	8005a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d020      	beq.n	8005a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d0:	4b34      	ldr	r3, [pc, #208]	; (8005aa4 <HAL_RCC_OscConfig+0x244>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d6:	f7fd f853 	bl	8002a80 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059de:	f7fd f84f 	bl	8002a80 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e1a8      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f0:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fc:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4925      	ldr	r1, [pc, #148]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
 8005a10:	e015      	b.n	8005a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <HAL_RCC_OscConfig+0x244>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fd f832 	bl	8002a80 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a20:	f7fd f82e 	bl	8002a80 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e187      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d036      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <HAL_RCC_OscConfig+0x248>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a58:	f7fd f812 	bl	8002a80 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fd f80e 	bl	8002a80 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e167      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_OscConfig+0x240>)
 8005a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x200>
 8005a7e:	e01b      	b.n	8005ab8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_OscConfig+0x248>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a86:	f7fc fffb 	bl	8002a80 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a8c:	e00e      	b.n	8005aac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a8e:	f7fc fff7 	bl	8002a80 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d907      	bls.n	8005aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e150      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	42470000 	.word	0x42470000
 8005aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aac:	4b88      	ldr	r3, [pc, #544]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ea      	bne.n	8005a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8097 	beq.w	8005bf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aca:	4b81      	ldr	r3, [pc, #516]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10f      	bne.n	8005af6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	4b7d      	ldr	r3, [pc, #500]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	4a7c      	ldr	r2, [pc, #496]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae6:	4b7a      	ldr	r3, [pc, #488]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aee:	60bb      	str	r3, [r7, #8]
 8005af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af2:	2301      	movs	r3, #1
 8005af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af6:	4b77      	ldr	r3, [pc, #476]	; (8005cd4 <HAL_RCC_OscConfig+0x474>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d118      	bne.n	8005b34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b02:	4b74      	ldr	r3, [pc, #464]	; (8005cd4 <HAL_RCC_OscConfig+0x474>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a73      	ldr	r2, [pc, #460]	; (8005cd4 <HAL_RCC_OscConfig+0x474>)
 8005b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0e:	f7fc ffb7 	bl	8002a80 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b16:	f7fc ffb3 	bl	8002a80 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e10c      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b28:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <HAL_RCC_OscConfig+0x474>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCC_OscConfig+0x2ea>
 8005b3c:	4b64      	ldr	r3, [pc, #400]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	4a63      	ldr	r2, [pc, #396]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	6713      	str	r3, [r2, #112]	; 0x70
 8005b48:	e01c      	b.n	8005b84 <HAL_RCC_OscConfig+0x324>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d10c      	bne.n	8005b6c <HAL_RCC_OscConfig+0x30c>
 8005b52:	4b5f      	ldr	r3, [pc, #380]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	4a5e      	ldr	r2, [pc, #376]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5e:	4b5c      	ldr	r3, [pc, #368]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	4a5b      	ldr	r2, [pc, #364]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6a:	e00b      	b.n	8005b84 <HAL_RCC_OscConfig+0x324>
 8005b6c:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	4a57      	ldr	r2, [pc, #348]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	6713      	str	r3, [r2, #112]	; 0x70
 8005b78:	4b55      	ldr	r3, [pc, #340]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7c:	4a54      	ldr	r2, [pc, #336]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f023 0304 	bic.w	r3, r3, #4
 8005b82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d015      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fc ff78 	bl	8002a80 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b94:	f7fc ff74 	bl	8002a80 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e0cb      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005baa:	4b49      	ldr	r3, [pc, #292]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0ee      	beq.n	8005b94 <HAL_RCC_OscConfig+0x334>
 8005bb6:	e014      	b.n	8005be2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb8:	f7fc ff62 	bl	8002a80 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bbe:	e00a      	b.n	8005bd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bc0:	f7fc ff5e 	bl	8002a80 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e0b5      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1ee      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be8:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	4a38      	ldr	r2, [pc, #224]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80a1 	beq.w	8005d40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bfe:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d05c      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d141      	bne.n	8005c96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <HAL_RCC_OscConfig+0x478>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c18:	f7fc ff32 	bl	8002a80 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c20:	f7fc ff2e 	bl	8002a80 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e087      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	3b01      	subs	r3, #1
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	061b      	lsls	r3, r3, #24
 8005c62:	491b      	ldr	r1, [pc, #108]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_OscConfig+0x478>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6e:	f7fc ff07 	bl	8002a80 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c76:	f7fc ff03 	bl	8002a80 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e05c      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x416>
 8005c94:	e054      	b.n	8005d40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_RCC_OscConfig+0x478>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fc fef0 	bl	8002a80 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fc feec 	bl	8002a80 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e045      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x444>
 8005cc2:	e03d      	b.n	8005d40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d107      	bne.n	8005cdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e038      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	40007000 	.word	0x40007000
 8005cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_RCC_OscConfig+0x4ec>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d028      	beq.n	8005d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d121      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d11a      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d111      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	3b01      	subs	r3, #1
 8005d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d107      	bne.n	8005d3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800

08005d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0cc      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d64:	4b68      	ldr	r3, [pc, #416]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d90c      	bls.n	8005d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b65      	ldr	r3, [pc, #404]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7a:	4b63      	ldr	r3, [pc, #396]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0b8      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d020      	beq.n	8005dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005da4:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a58      	ldr	r2, [pc, #352]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dbc:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4a52      	ldr	r2, [pc, #328]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc8:	4b50      	ldr	r3, [pc, #320]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	494d      	ldr	r1, [pc, #308]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d044      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	4b47      	ldr	r3, [pc, #284]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d119      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e07f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d003      	beq.n	8005e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d107      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0e:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e06f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1e:	4b3b      	ldr	r3, [pc, #236]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e067      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e2e:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f023 0203 	bic.w	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	4934      	ldr	r1, [pc, #208]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e40:	f7fc fe1e 	bl	8002a80 <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e48:	f7fc fe1a 	bl	8002a80 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e04f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 020c 	and.w	r2, r3, #12
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d1eb      	bne.n	8005e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e70:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d20c      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d001      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e032      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4916      	ldr	r1, [pc, #88]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ed6:	f000 f821 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	490a      	ldr	r1, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee8:	5ccb      	ldrb	r3, [r1, r3]
 8005eea:	fa22 f303 	lsr.w	r3, r2, r3
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ef2:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fc fd7e 	bl	80029f8 <HAL_InitTick>

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023c00 	.word	0x40023c00
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	0800e9d0 	.word	0x0800e9d0
 8005f14:	20000008 	.word	0x20000008
 8005f18:	2000000c 	.word	0x2000000c

08005f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f20:	b090      	sub	sp, #64	; 0x40
 8005f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
 8005f28:	2300      	movs	r3, #0
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f34:	4b59      	ldr	r3, [pc, #356]	; (800609c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 030c 	and.w	r3, r3, #12
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d00d      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x40>
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	f200 80a1 	bhi.w	8006088 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0x34>
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f4e:	e09b      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005f54:	e09b      	b.n	800608e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f56:	4b53      	ldr	r3, [pc, #332]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f5a:	e098      	b.n	800608e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f5c:	4b4f      	ldr	r3, [pc, #316]	; (800609c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f66:	4b4d      	ldr	r3, [pc, #308]	; (800609c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d028      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f72:	4b4a      	ldr	r3, [pc, #296]	; (800609c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	2200      	movs	r2, #0
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f84:	2100      	movs	r1, #0
 8005f86:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f88:	fb03 f201 	mul.w	r2, r3, r1
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	fb00 f303 	mul.w	r3, r0, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	4a43      	ldr	r2, [pc, #268]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f96:	fba0 1202 	umull	r1, r2, r0, r2
 8005f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa2:	4413      	add	r3, r2
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	2200      	movs	r2, #0
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	61fa      	str	r2, [r7, #28]
 8005fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005fb6:	f7fa fe6f 	bl	8000c98 <__aeabi_uldivmod>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc2:	e053      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <HAL_RCC_GetSysClockFreq+0x180>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	099b      	lsrs	r3, r3, #6
 8005fca:	2200      	movs	r2, #0
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	617a      	str	r2, [r7, #20]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fd6:	f04f 0b00 	mov.w	fp, #0
 8005fda:	4652      	mov	r2, sl
 8005fdc:	465b      	mov	r3, fp
 8005fde:	f04f 0000 	mov.w	r0, #0
 8005fe2:	f04f 0100 	mov.w	r1, #0
 8005fe6:	0159      	lsls	r1, r3, #5
 8005fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fec:	0150      	lsls	r0, r2, #5
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ff6:	eb63 090b 	sbc.w	r9, r3, fp
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006006:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800600a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800600e:	ebb2 0408 	subs.w	r4, r2, r8
 8006012:	eb63 0509 	sbc.w	r5, r3, r9
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	00eb      	lsls	r3, r5, #3
 8006020:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006024:	00e2      	lsls	r2, r4, #3
 8006026:	4614      	mov	r4, r2
 8006028:	461d      	mov	r5, r3
 800602a:	eb14 030a 	adds.w	r3, r4, sl
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	eb45 030b 	adc.w	r3, r5, fp
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006042:	4629      	mov	r1, r5
 8006044:	028b      	lsls	r3, r1, #10
 8006046:	4621      	mov	r1, r4
 8006048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800604c:	4621      	mov	r1, r4
 800604e:	028a      	lsls	r2, r1, #10
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	2200      	movs	r2, #0
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	60fa      	str	r2, [r7, #12]
 800605c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006060:	f7fa fe1a 	bl	8000c98 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCC_GetSysClockFreq+0x180>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	3301      	adds	r3, #1
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800607c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006086:	e002      	b.n	800608e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800608c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006090:	4618      	mov	r0, r3
 8006092:	3740      	adds	r7, #64	; 0x40
 8006094:	46bd      	mov	sp, r7
 8006096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	00f42400 	.word	0x00f42400
 80060a4:	017d7840 	.word	0x017d7840

080060a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ae:	681b      	ldr	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000008 	.word	0x20000008

080060c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e041      	b.n	8006156 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc f99a 	bl	8002420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 fed2 	bl	8006ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_TIM_PWM_Start+0x24>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e022      	b.n	80061ca <HAL_TIM_PWM_Start+0x6a>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b04      	cmp	r3, #4
 8006188:	d109      	bne.n	800619e <HAL_TIM_PWM_Start+0x3e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	bf14      	ite	ne
 8006196:	2301      	movne	r3, #1
 8006198:	2300      	moveq	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e015      	b.n	80061ca <HAL_TIM_PWM_Start+0x6a>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d109      	bne.n	80061b8 <HAL_TIM_PWM_Start+0x58>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e008      	b.n	80061ca <HAL_TIM_PWM_Start+0x6a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e068      	b.n	80062a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0x82>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e0:	e013      	b.n	800620a <HAL_TIM_PWM_Start+0xaa>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0x92>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f0:	e00b      	b.n	800620a <HAL_TIM_PWM_Start+0xaa>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xa2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006200:	e003      	b.n	800620a <HAL_TIM_PWM_Start+0xaa>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f001 f972 	bl	80074fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a23      	ldr	r2, [pc, #140]	; (80062ac <HAL_TIM_PWM_Start+0x14c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d107      	bne.n	8006232 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_TIM_PWM_Start+0x14c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_TIM_PWM_Start+0x10e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006244:	d013      	beq.n	800626e <HAL_TIM_PWM_Start+0x10e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_TIM_PWM_Start+0x150>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_TIM_PWM_Start+0x10e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <HAL_TIM_PWM_Start+0x154>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_TIM_PWM_Start+0x10e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_TIM_PWM_Start+0x158>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_TIM_PWM_Start+0x10e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a14      	ldr	r2, [pc, #80]	; (80062bc <HAL_TIM_PWM_Start+0x15c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d111      	bne.n	8006292 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b06      	cmp	r3, #6
 800627e:	d010      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006290:	e007      	b.n	80062a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0201 	orr.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40014000 	.word	0x40014000

080062c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f912 	bl	80074fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a29      	ldr	r2, [pc, #164]	; (8006384 <HAL_TIM_PWM_Stop+0xc4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d117      	bne.n	8006312 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10f      	bne.n	8006312 <HAL_TIM_PWM_Stop+0x52>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	f240 4344 	movw	r3, #1092	; 0x444
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <HAL_TIM_PWM_Stop+0x52>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	f241 1311 	movw	r3, #4369	; 0x1111
 800631c:	4013      	ands	r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <HAL_TIM_PWM_Stop+0x82>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	f240 4344 	movw	r3, #1092	; 0x444
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <HAL_TIM_PWM_Stop+0x82>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Stop+0x92>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006350:	e013      	b.n	800637a <HAL_TIM_PWM_Stop+0xba>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Stop+0xa2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	e00b      	b.n	800637a <HAL_TIM_PWM_Stop+0xba>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Stop+0xb2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	e003      	b.n	800637a <HAL_TIM_PWM_Stop+0xba>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40010000 	.word	0x40010000

08006388 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e041      	b.n	800641e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fc f892 	bl	80024d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f000 fd6e 	bl	8006ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_TIM_IC_Start_IT+0x1e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006442:	b2db      	uxtb	r3, r3
 8006444:	e013      	b.n	800646e <HAL_TIM_IC_Start_IT+0x46>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b04      	cmp	r3, #4
 800644a:	d104      	bne.n	8006456 <HAL_TIM_IC_Start_IT+0x2e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e00b      	b.n	800646e <HAL_TIM_IC_Start_IT+0x46>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d104      	bne.n	8006466 <HAL_TIM_IC_Start_IT+0x3e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e003      	b.n	800646e <HAL_TIM_IC_Start_IT+0x46>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_TIM_IC_Start_IT+0x58>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e013      	b.n	80064a8 <HAL_TIM_IC_Start_IT+0x80>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d104      	bne.n	8006490 <HAL_TIM_IC_Start_IT+0x68>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800648c:	b2db      	uxtb	r3, r3
 800648e:	e00b      	b.n	80064a8 <HAL_TIM_IC_Start_IT+0x80>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d104      	bne.n	80064a0 <HAL_TIM_IC_Start_IT+0x78>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e003      	b.n	80064a8 <HAL_TIM_IC_Start_IT+0x80>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d102      	bne.n	80064b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80064b0:	7b7b      	ldrb	r3, [r7, #13]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d001      	beq.n	80064ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e0c2      	b.n	8006640 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_TIM_IC_Start_IT+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c8:	e013      	b.n	80064f2 <HAL_TIM_IC_Start_IT+0xca>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d104      	bne.n	80064da <HAL_TIM_IC_Start_IT+0xb2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d8:	e00b      	b.n	80064f2 <HAL_TIM_IC_Start_IT+0xca>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d104      	bne.n	80064ea <HAL_TIM_IC_Start_IT+0xc2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e8:	e003      	b.n	80064f2 <HAL_TIM_IC_Start_IT+0xca>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d104      	bne.n	8006502 <HAL_TIM_IC_Start_IT+0xda>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	e013      	b.n	800652a <HAL_TIM_IC_Start_IT+0x102>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b04      	cmp	r3, #4
 8006506:	d104      	bne.n	8006512 <HAL_TIM_IC_Start_IT+0xea>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006510:	e00b      	b.n	800652a <HAL_TIM_IC_Start_IT+0x102>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d104      	bne.n	8006522 <HAL_TIM_IC_Start_IT+0xfa>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006520:	e003      	b.n	800652a <HAL_TIM_IC_Start_IT+0x102>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b0c      	cmp	r3, #12
 800652e:	d841      	bhi.n	80065b4 <HAL_TIM_IC_Start_IT+0x18c>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <HAL_TIM_IC_Start_IT+0x110>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	0800656d 	.word	0x0800656d
 800653c:	080065b5 	.word	0x080065b5
 8006540:	080065b5 	.word	0x080065b5
 8006544:	080065b5 	.word	0x080065b5
 8006548:	0800657f 	.word	0x0800657f
 800654c:	080065b5 	.word	0x080065b5
 8006550:	080065b5 	.word	0x080065b5
 8006554:	080065b5 	.word	0x080065b5
 8006558:	08006591 	.word	0x08006591
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065b5 	.word	0x080065b5
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065a3 	.word	0x080065a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0202 	orr.w	r2, r2, #2
 800657a:	60da      	str	r2, [r3, #12]
      break;
 800657c:	e01d      	b.n	80065ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0204 	orr.w	r2, r2, #4
 800658c:	60da      	str	r2, [r3, #12]
      break;
 800658e:	e014      	b.n	80065ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0208 	orr.w	r2, r2, #8
 800659e:	60da      	str	r2, [r3, #12]
      break;
 80065a0:	e00b      	b.n	80065ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0210 	orr.w	r2, r2, #16
 80065b0:	60da      	str	r2, [r3, #12]
      break;
 80065b2:	e002      	b.n	80065ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d13e      	bne.n	800663e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ff97 	bl	80074fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <HAL_TIM_IC_Start_IT+0x220>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_TIM_IC_Start_IT+0x1e2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e0:	d013      	beq.n	800660a <HAL_TIM_IC_Start_IT+0x1e2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a19      	ldr	r2, [pc, #100]	; (800664c <HAL_TIM_IC_Start_IT+0x224>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_TIM_IC_Start_IT+0x1e2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_TIM_IC_Start_IT+0x228>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_TIM_IC_Start_IT+0x1e2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_TIM_IC_Start_IT+0x22c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIM_IC_Start_IT+0x1e2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a14      	ldr	r2, [pc, #80]	; (8006658 <HAL_TIM_IC_Start_IT+0x230>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d111      	bne.n	800662e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b06      	cmp	r3, #6
 800661a:	d010      	beq.n	800663e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	e007      	b.n	800663e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40010000 	.word	0x40010000
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40014000 	.word	0x40014000

0800665c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e097      	b.n	80067a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fb fe7d 	bl	8002384 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 fbf9 	bl	8006ea8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	4313      	orrs	r3, r2
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066fc:	f023 030c 	bic.w	r3, r3, #12
 8006700:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	4313      	orrs	r3, r2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	011a      	lsls	r2, r3, #4
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	031b      	lsls	r3, r3, #12
 800672c:	4313      	orrs	r3, r2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	4313      	orrs	r3, r2
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d110      	bne.n	80067fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d102      	bne.n	80067e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067de:	7b7b      	ldrb	r3, [r7, #13]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d001      	beq.n	80067e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e089      	b.n	80068fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f8:	e031      	b.n	800685e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d110      	bne.n	8006822 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d102      	bne.n	800680c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006806:	7b3b      	ldrb	r3, [r7, #12]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d001      	beq.n	8006810 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e075      	b.n	80068fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006820:	e01d      	b.n	800685e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d108      	bne.n	800683a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d105      	bne.n	800683a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800682e:	7b7b      	ldrb	r3, [r7, #13]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d102      	bne.n	800683a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006834:	7b3b      	ldrb	r3, [r7, #12]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d001      	beq.n	800683e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e05e      	b.n	80068fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d010      	beq.n	800688c <HAL_TIM_Encoder_Start_IT+0xe4>
 800686a:	e01f      	b.n	80068ac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2201      	movs	r2, #1
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fe41 	bl	80074fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0202 	orr.w	r2, r2, #2
 8006888:	60da      	str	r2, [r3, #12]
      break;
 800688a:	e02e      	b.n	80068ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2201      	movs	r2, #1
 8006892:	2104      	movs	r1, #4
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fe31 	bl	80074fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0204 	orr.w	r2, r2, #4
 80068a8:	60da      	str	r2, [r3, #12]
      break;
 80068aa:	e01e      	b.n	80068ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fe21 	bl	80074fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2201      	movs	r2, #1
 80068c0:	2104      	movs	r1, #4
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fe1a 	bl	80074fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0202 	orr.w	r2, r2, #2
 80068d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0204 	orr.w	r2, r2, #4
 80068e6:	60da      	str	r2, [r3, #12]
      break;
 80068e8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0201 	orr.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d122      	bne.n	8006960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d11b      	bne.n	8006960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0202 	mvn.w	r2, #2
 8006930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fb f8e0 	bl	8001b0c <HAL_TIM_IC_CaptureCallback>
 800694c:	e005      	b.n	800695a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa8c 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa93 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d122      	bne.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0204 	mvn.w	r2, #4
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fb f8b6 	bl	8001b0c <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa62 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa69 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d122      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d11b      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0208 	mvn.w	r2, #8
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2204      	movs	r2, #4
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fb f88c 	bl	8001b0c <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa38 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa3f 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d122      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d11b      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0210 	mvn.w	r2, #16
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2208      	movs	r2, #8
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fb f862 	bl	8001b0c <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa0e 	bl	8006e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa15 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d107      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0201 	mvn.w	r2, #1
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9e8 	bl	8006e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d10e      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa0:	2b80      	cmp	r3, #128	; 0x80
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fdc2 	bl	8007638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9da 	bl	8006e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d10e      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d107      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0220 	mvn.w	r2, #32
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fd8c 	bl	8007624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e088      	b.n	8006c44 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f000 fbb6 	bl	80072c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 020c 	bic.w	r2, r2, #12
 8006b62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6999      	ldr	r1, [r3, #24]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	619a      	str	r2, [r3, #24]
 8006b76:	e060      	b.n	8006c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d11c      	bne.n	8006bb8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f000 fbff 	bl	8007390 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ba0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6999      	ldr	r1, [r3, #24]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	021a      	lsls	r2, r3, #8
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	619a      	str	r2, [r3, #24]
 8006bb6:	e040      	b.n	8006c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d11b      	bne.n	8006bf6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6819      	ldr	r1, [r3, #0]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f000 fc1c 	bl	800740a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 020c 	bic.w	r2, r2, #12
 8006be0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69d9      	ldr	r1, [r3, #28]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	61da      	str	r2, [r3, #28]
 8006bf4:	e021      	b.n	8006c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b0c      	cmp	r3, #12
 8006bfa:	d11c      	bne.n	8006c36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f000 fc39 	bl	8007482 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69d9      	ldr	r1, [r3, #28]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	021a      	lsls	r2, r3, #8
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	61da      	str	r2, [r3, #28]
 8006c34:	e001      	b.n	8006c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e0ae      	b.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	f200 809f 	bhi.w	8006db8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006db9 	.word	0x08006db9
 8006c88:	08006db9 	.word	0x08006db9
 8006c8c:	08006db9 	.word	0x08006db9
 8006c90:	08006cf5 	.word	0x08006cf5
 8006c94:	08006db9 	.word	0x08006db9
 8006c98:	08006db9 	.word	0x08006db9
 8006c9c:	08006db9 	.word	0x08006db9
 8006ca0:	08006d37 	.word	0x08006d37
 8006ca4:	08006db9 	.word	0x08006db9
 8006ca8:	08006db9 	.word	0x08006db9
 8006cac:	08006db9 	.word	0x08006db9
 8006cb0:	08006d77 	.word	0x08006d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f974 	bl	8006fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0204 	bic.w	r2, r2, #4
 8006cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6999      	ldr	r1, [r3, #24]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	619a      	str	r2, [r3, #24]
      break;
 8006cf2:	e064      	b.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f9ba 	bl	8007074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6999      	ldr	r1, [r3, #24]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	619a      	str	r2, [r3, #24]
      break;
 8006d34:	e043      	b.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fa05 	bl	800714c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0208 	orr.w	r2, r2, #8
 8006d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0204 	bic.w	r2, r2, #4
 8006d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69d9      	ldr	r1, [r3, #28]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	61da      	str	r2, [r3, #28]
      break;
 8006d74:	e023      	b.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fa4f 	bl	8007220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	021a      	lsls	r2, r3, #8
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	61da      	str	r2, [r3, #28]
      break;
 8006db6:	e002      	b.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	d831      	bhi.n	8006e48 <HAL_TIM_ReadCapturedValue+0x78>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <HAL_TIM_ReadCapturedValue+0x1c>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e49 	.word	0x08006e49
 8006df8:	08006e49 	.word	0x08006e49
 8006dfc:	08006e2b 	.word	0x08006e2b
 8006e00:	08006e49 	.word	0x08006e49
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e49 	.word	0x08006e49
 8006e0c:	08006e35 	.word	0x08006e35
 8006e10:	08006e49 	.word	0x08006e49
 8006e14:	08006e49 	.word	0x08006e49
 8006e18:	08006e49 	.word	0x08006e49
 8006e1c:	08006e3f 	.word	0x08006e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	60fb      	str	r3, [r7, #12]

      break;
 8006e28:	e00f      	b.n	8006e4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	60fb      	str	r3, [r7, #12]

      break;
 8006e32:	e00a      	b.n	8006e4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	60fb      	str	r3, [r7, #12]

      break;
 8006e3c:	e005      	b.n	8006e4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	60fb      	str	r3, [r7, #12]

      break;
 8006e46:	e000      	b.n	8006e4a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e48:	bf00      	nop
  }

  return tmpreg;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a34      	ldr	r2, [pc, #208]	; (8006f8c <TIM_Base_SetConfig+0xe4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a31      	ldr	r2, [pc, #196]	; (8006f90 <TIM_Base_SetConfig+0xe8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a30      	ldr	r2, [pc, #192]	; (8006f94 <TIM_Base_SetConfig+0xec>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a2f      	ldr	r2, [pc, #188]	; (8006f98 <TIM_Base_SetConfig+0xf0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d108      	bne.n	8006ef2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <TIM_Base_SetConfig+0xe4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01b      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d017      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a22      	ldr	r2, [pc, #136]	; (8006f90 <TIM_Base_SetConfig+0xe8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <TIM_Base_SetConfig+0xec>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00f      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <TIM_Base_SetConfig+0xf0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <TIM_Base_SetConfig+0xf4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <TIM_Base_SetConfig+0xf8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <TIM_Base_SetConfig+0xfc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <TIM_Base_SetConfig+0xe4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d103      	bne.n	8006f78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	615a      	str	r2, [r3, #20]
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 0302 	bic.w	r3, r3, #2
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <TIM_OC1_SetConfig+0xc8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d10c      	bne.n	800701e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0308 	bic.w	r3, r3, #8
 800700a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0304 	bic.w	r3, r3, #4
 800701c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <TIM_OC1_SetConfig+0xc8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d111      	bne.n	800704a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800702c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	621a      	str	r2, [r3, #32]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40010000 	.word	0x40010000

08007074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0210 	bic.w	r2, r3, #16
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0320 	bic.w	r3, r3, #32
 80070be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <TIM_OC2_SetConfig+0xd4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10d      	bne.n	80070f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a15      	ldr	r2, [pc, #84]	; (8007148 <TIM_OC2_SetConfig+0xd4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d113      	bne.n	8007120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000

0800714c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1d      	ldr	r2, [pc, #116]	; (800721c <TIM_OC3_SetConfig+0xd0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10d      	bne.n	80071c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a14      	ldr	r2, [pc, #80]	; (800721c <TIM_OC3_SetConfig+0xd0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d113      	bne.n	80071f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40010000 	.word	0x40010000

08007220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a10      	ldr	r2, [pc, #64]	; (80072bc <TIM_OC4_SetConfig+0x9c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d109      	bne.n	8007294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	019b      	lsls	r3, r3, #6
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000

080072c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0201 	bic.w	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4a24      	ldr	r2, [pc, #144]	; (800737c <TIM_TI1_SetConfig+0xbc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <TIM_TI1_SetConfig+0x56>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d00f      	beq.n	8007316 <TIM_TI1_SetConfig+0x56>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4a21      	ldr	r2, [pc, #132]	; (8007380 <TIM_TI1_SetConfig+0xc0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00b      	beq.n	8007316 <TIM_TI1_SetConfig+0x56>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a20      	ldr	r2, [pc, #128]	; (8007384 <TIM_TI1_SetConfig+0xc4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d007      	beq.n	8007316 <TIM_TI1_SetConfig+0x56>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <TIM_TI1_SetConfig+0xc8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_TI1_SetConfig+0x56>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a1e      	ldr	r2, [pc, #120]	; (800738c <TIM_TI1_SetConfig+0xcc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d101      	bne.n	800731a <TIM_TI1_SetConfig+0x5a>
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <TIM_TI1_SetConfig+0x5c>
 800731a:	2300      	movs	r3, #0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d008      	beq.n	8007332 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f023 0303 	bic.w	r3, r3, #3
 8007326:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	e003      	b.n	800733a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	b2db      	uxtb	r3, r3
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f023 030a 	bic.w	r3, r3, #10
 8007354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f003 030a 	and.w	r3, r3, #10
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40014000 	.word	0x40014000

08007390 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0210 	bic.w	r2, r3, #16
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	031b      	lsls	r3, r3, #12
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800740a:	b480      	push	{r7}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	b2db      	uxtb	r3, r3
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800745a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007482:	b480      	push	{r7}
 8007484:	b087      	sub	sp, #28
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	031b      	lsls	r3, r3, #12
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	031b      	lsls	r3, r3, #12
 80074da:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	621a      	str	r2, [r3, #32]
}
 80074f0:	bf00      	nop
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2201      	movs	r2, #1
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	43db      	mvns	r3, r3
 800751e:	401a      	ands	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1a      	ldr	r2, [r3, #32]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	fa01 f303 	lsl.w	r3, r1, r3
 8007534:	431a      	orrs	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800755c:	2302      	movs	r3, #2
 800755e:	e050      	b.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d018      	beq.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ac:	d013      	beq.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00e      	beq.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a16      	ldr	r2, [pc, #88]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a15      	ldr	r2, [pc, #84]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a13      	ldr	r2, [pc, #76]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d10c      	bne.n	80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40010000 	.word	0x40010000
 8007614:	40000400 	.word	0x40000400
 8007618:	40000800 	.word	0x40000800
 800761c:	40000c00 	.word	0x40000c00
 8007620:	40014000 	.word	0x40014000

08007624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800764c:	b084      	sub	sp, #16
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	f107 001c 	add.w	r0, r7, #28
 800765a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2b01      	cmp	r3, #1
 8007662:	d122      	bne.n	80076aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800768c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d105      	bne.n	800769e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fbee 	bl	8008e80 <USB_CoreReset>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	e01a      	b.n	80076e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fbe2 	bl	8008e80 <USB_CoreReset>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
 80076d2:	e005      	b.n	80076e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10b      	bne.n	80076fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f043 0206 	orr.w	r2, r3, #6
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f043 0220 	orr.w	r2, r3, #32
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800770a:	b004      	add	sp, #16
 800770c:	4770      	bx	lr
	...

08007710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d165      	bne.n	80077f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4a41      	ldr	r2, [pc, #260]	; (800782c <USB_SetTurnaroundTime+0x11c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d906      	bls.n	800773a <USB_SetTurnaroundTime+0x2a>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4a40      	ldr	r2, [pc, #256]	; (8007830 <USB_SetTurnaroundTime+0x120>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d202      	bcs.n	800773a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007734:	230f      	movs	r3, #15
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e062      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4a3c      	ldr	r2, [pc, #240]	; (8007830 <USB_SetTurnaroundTime+0x120>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d306      	bcc.n	8007750 <USB_SetTurnaroundTime+0x40>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4a3b      	ldr	r2, [pc, #236]	; (8007834 <USB_SetTurnaroundTime+0x124>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d202      	bcs.n	8007750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800774a:	230e      	movs	r3, #14
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e057      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4a38      	ldr	r2, [pc, #224]	; (8007834 <USB_SetTurnaroundTime+0x124>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d306      	bcc.n	8007766 <USB_SetTurnaroundTime+0x56>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4a37      	ldr	r2, [pc, #220]	; (8007838 <USB_SetTurnaroundTime+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d202      	bcs.n	8007766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007760:	230d      	movs	r3, #13
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	e04c      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4a33      	ldr	r2, [pc, #204]	; (8007838 <USB_SetTurnaroundTime+0x128>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d306      	bcc.n	800777c <USB_SetTurnaroundTime+0x6c>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4a32      	ldr	r2, [pc, #200]	; (800783c <USB_SetTurnaroundTime+0x12c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d802      	bhi.n	800777c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007776:	230c      	movs	r3, #12
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	e041      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4a2f      	ldr	r2, [pc, #188]	; (800783c <USB_SetTurnaroundTime+0x12c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d906      	bls.n	8007792 <USB_SetTurnaroundTime+0x82>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a2e      	ldr	r2, [pc, #184]	; (8007840 <USB_SetTurnaroundTime+0x130>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d802      	bhi.n	8007792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800778c:	230b      	movs	r3, #11
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e036      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4a2a      	ldr	r2, [pc, #168]	; (8007840 <USB_SetTurnaroundTime+0x130>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d906      	bls.n	80077a8 <USB_SetTurnaroundTime+0x98>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4a29      	ldr	r2, [pc, #164]	; (8007844 <USB_SetTurnaroundTime+0x134>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d802      	bhi.n	80077a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077a2:	230a      	movs	r3, #10
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	e02b      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4a26      	ldr	r2, [pc, #152]	; (8007844 <USB_SetTurnaroundTime+0x134>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d906      	bls.n	80077be <USB_SetTurnaroundTime+0xae>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4a25      	ldr	r2, [pc, #148]	; (8007848 <USB_SetTurnaroundTime+0x138>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d202      	bcs.n	80077be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077b8:	2309      	movs	r3, #9
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e020      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a21      	ldr	r2, [pc, #132]	; (8007848 <USB_SetTurnaroundTime+0x138>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d306      	bcc.n	80077d4 <USB_SetTurnaroundTime+0xc4>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4a20      	ldr	r2, [pc, #128]	; (800784c <USB_SetTurnaroundTime+0x13c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d802      	bhi.n	80077d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077ce:	2308      	movs	r3, #8
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e015      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a1d      	ldr	r2, [pc, #116]	; (800784c <USB_SetTurnaroundTime+0x13c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d906      	bls.n	80077ea <USB_SetTurnaroundTime+0xda>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <USB_SetTurnaroundTime+0x140>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d202      	bcs.n	80077ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077e4:	2307      	movs	r3, #7
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e00a      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077ea:	2306      	movs	r3, #6
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	e007      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077f6:	2309      	movs	r3, #9
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	e001      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077fc:	2309      	movs	r3, #9
 80077fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007818:	431a      	orrs	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	00d8acbf 	.word	0x00d8acbf
 8007830:	00e4e1c0 	.word	0x00e4e1c0
 8007834:	00f42400 	.word	0x00f42400
 8007838:	01067380 	.word	0x01067380
 800783c:	011a499f 	.word	0x011a499f
 8007840:	01312cff 	.word	0x01312cff
 8007844:	014ca43f 	.word	0x014ca43f
 8007848:	016e3600 	.word	0x016e3600
 800784c:	01a6ab1f 	.word	0x01a6ab1f
 8007850:	01e84800 	.word	0x01e84800

08007854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f043 0201 	orr.w	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f023 0201 	bic.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d115      	bne.n	80078e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078c6:	2001      	movs	r0, #1
 80078c8:	f7fb f8e6 	bl	8002a98 <HAL_Delay>
      ms++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fa45 	bl	8008d62 <USB_GetMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d01e      	beq.n	800791c <USB_SetCurrentMode+0x84>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b31      	cmp	r3, #49	; 0x31
 80078e2:	d9f0      	bls.n	80078c6 <USB_SetCurrentMode+0x2e>
 80078e4:	e01a      	b.n	800791c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d115      	bne.n	8007918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078f8:	2001      	movs	r0, #1
 80078fa:	f7fb f8cd 	bl	8002a98 <HAL_Delay>
      ms++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fa2c 	bl	8008d62 <USB_GetMode>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <USB_SetCurrentMode+0x84>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b31      	cmp	r3, #49	; 0x31
 8007914:	d9f0      	bls.n	80078f8 <USB_SetCurrentMode+0x60>
 8007916:	e001      	b.n	800791c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e005      	b.n	8007928 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b32      	cmp	r3, #50	; 0x32
 8007920:	d101      	bne.n	8007926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007930:	b084      	sub	sp, #16
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800793e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	e009      	b.n	8007964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3340      	adds	r3, #64	; 0x40
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	2200      	movs	r2, #0
 800795c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b0e      	cmp	r3, #14
 8007968:	d9f2      	bls.n	8007950 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800796a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d11c      	bne.n	80079aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797e:	f043 0302 	orr.w	r3, r3, #2
 8007982:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
 80079a8:	e00b      	b.n	80079c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079c8:	461a      	mov	r2, r3
 80079ca:	2300      	movs	r3, #0
 80079cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d4:	4619      	mov	r1, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079dc:	461a      	mov	r2, r3
 80079de:	680b      	ldr	r3, [r1, #0]
 80079e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10c      	bne.n	8007a02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079ee:	2100      	movs	r1, #0
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f965 	bl	8007cc0 <USB_SetDevSpeed>
 80079f6:	e008      	b.n	8007a0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079f8:	2101      	movs	r1, #1
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f960 	bl	8007cc0 <USB_SetDevSpeed>
 8007a00:	e003      	b.n	8007a0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a02:	2103      	movs	r1, #3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f95b 	bl	8007cc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a0a:	2110      	movs	r1, #16
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f8f3 	bl	8007bf8 <USB_FlushTxFifo>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f91f 	bl	8007c60 <USB_FlushRxFifo>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a32:	461a      	mov	r2, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3e:	461a      	mov	r2, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a50:	2300      	movs	r3, #0
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	e043      	b.n	8007ade <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a6c:	d118      	bne.n	8007aa0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	461a      	mov	r2, r3
 8007a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	e013      	b.n	8007ab2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a96:	461a      	mov	r2, r3
 8007a98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	e008      	b.n	8007ab2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aac:	461a      	mov	r2, r3
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	461a      	mov	r2, r3
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ad6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	3301      	adds	r3, #1
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d3b7      	bcc.n	8007a56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	e043      	b.n	8007b74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b02:	d118      	bne.n	8007b36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	461a      	mov	r2, r3
 8007b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	e013      	b.n	8007b48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	e008      	b.n	8007b48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	461a      	mov	r2, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b54:	461a      	mov	r2, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	461a      	mov	r2, r3
 8007b68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d3b7      	bcc.n	8007aec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d105      	bne.n	8007bb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	f043 0210 	orr.w	r2, r3, #16
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <USB_DevInit+0x2c4>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	f043 0208 	orr.w	r2, r3, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bdc:	f043 0304 	orr.w	r3, r3, #4
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bf0:	b004      	add	sp, #16
 8007bf2:	4770      	bx	lr
 8007bf4:	803c3800 	.word	0x803c3800

08007bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <USB_FlushTxFifo+0x64>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d901      	bls.n	8007c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e01b      	b.n	8007c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	daf2      	bge.n	8007c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	019b      	lsls	r3, r3, #6
 8007c28:	f043 0220 	orr.w	r2, r3, #32
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <USB_FlushTxFifo+0x64>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e006      	b.n	8007c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d0f0      	beq.n	8007c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	00030d40 	.word	0x00030d40

08007c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <USB_FlushRxFifo+0x5c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d901      	bls.n	8007c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e018      	b.n	8007cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	daf2      	bge.n	8007c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <USB_FlushRxFifo+0x5c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d901      	bls.n	8007ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e006      	b.n	8007cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0310 	and.w	r3, r3, #16
 8007caa:	2b10      	cmp	r3, #16
 8007cac:	d0f0      	beq.n	8007c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	00030d40 	.word	0x00030d40

08007cc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b087      	sub	sp, #28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0306 	and.w	r3, r3, #6
 8007d0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]
 8007d16:	e00a      	b.n	8007d2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d002      	beq.n	8007d24 <USB_GetDevSpeed+0x32>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b06      	cmp	r3, #6
 8007d22:	d102      	bne.n	8007d2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d24:	2302      	movs	r3, #2
 8007d26:	75fb      	strb	r3, [r7, #23]
 8007d28:	e001      	b.n	8007d2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d2a:	230f      	movs	r3, #15
 8007d2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d13a      	bne.n	8007dce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	69da      	ldr	r2, [r3, #28]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	2101      	movs	r1, #1
 8007d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	68f9      	ldr	r1, [r7, #12]
 8007d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d155      	bne.n	8007e3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	059b      	lsls	r3, r3, #22
 8007db2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007db4:	4313      	orrs	r3, r2
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e036      	b.n	8007e3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd4:	69da      	ldr	r2, [r3, #28]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	2101      	movs	r1, #1
 8007de0:	fa01 f303 	lsl.w	r3, r1, r3
 8007de4:	041b      	lsls	r3, r3, #16
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dec:	4313      	orrs	r3, r2
 8007dee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d11a      	bne.n	8007e3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	791b      	ldrb	r3, [r3, #4]
 8007e20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e22:	430b      	orrs	r3, r1
 8007e24:	4313      	orrs	r3, r2
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
	...

08007e4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d161      	bne.n	8007f2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e7e:	d11f      	bne.n	8007ec0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	43db      	mvns	r3, r3
 8007eda:	68f9      	ldr	r1, [r7, #12]
 8007edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	69da      	ldr	r2, [r3, #28]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	43db      	mvns	r3, r3
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f04:	4013      	ands	r3, r2
 8007f06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	0159      	lsls	r1, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f22:	4619      	mov	r1, r3
 8007f24:	4b35      	ldr	r3, [pc, #212]	; (8007ffc <USB_DeactivateEndpoint+0x1b0>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	600b      	str	r3, [r1, #0]
 8007f2a:	e060      	b.n	8007fee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f42:	d11f      	bne.n	8007f84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	0151      	lsls	r1, r2, #5
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	440a      	add	r2, r1
 8007f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	2101      	movs	r1, #1
 8007f96:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	43db      	mvns	r3, r3
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	69da      	ldr	r2, [r3, #28]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 030f 	and.w	r3, r3, #15
 8007fb8:	2101      	movs	r1, #1
 8007fba:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbe:	041b      	lsls	r3, r3, #16
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	68f9      	ldr	r1, [r7, #12]
 8007fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fc8:	4013      	ands	r3, r2
 8007fca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	0159      	lsls	r1, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	440b      	add	r3, r1
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <USB_DeactivateEndpoint+0x1b4>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	ec337800 	.word	0xec337800
 8008000:	eff37800 	.word	0xeff37800

08008004 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b01      	cmp	r3, #1
 8008022:	f040 815c 	bne.w	80082de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d132      	bne.n	8008094 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800804c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808c:	0cdb      	lsrs	r3, r3, #19
 800808e:	04db      	lsls	r3, r3, #19
 8008090:	6113      	str	r3, [r2, #16]
 8008092:	e074      	b.n	800817e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	0151      	lsls	r1, r2, #5
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	440a      	add	r2, r1
 80080aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ae:	0cdb      	lsrs	r3, r3, #19
 80080b0:	04db      	lsls	r3, r3, #19
 80080b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6999      	ldr	r1, [r3, #24]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	440b      	add	r3, r1
 80080f0:	1e59      	subs	r1, r3, #1
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80080fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080fc:	4b9d      	ldr	r3, [pc, #628]	; (8008374 <USB_EPStartXfer+0x370>)
 80080fe:	400b      	ands	r3, r1
 8008100:	69b9      	ldr	r1, [r7, #24]
 8008102:	0148      	lsls	r0, r1, #5
 8008104:	69f9      	ldr	r1, [r7, #28]
 8008106:	4401      	add	r1, r0
 8008108:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800810c:	4313      	orrs	r3, r2
 800810e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008126:	69b9      	ldr	r1, [r7, #24]
 8008128:	0148      	lsls	r0, r1, #5
 800812a:	69f9      	ldr	r1, [r7, #28]
 800812c:	4401      	add	r1, r0
 800812e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008132:	4313      	orrs	r3, r2
 8008134:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	791b      	ldrb	r3, [r3, #4]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d11f      	bne.n	800817e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008158:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800815c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800817c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d14b      	bne.n	800821c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008198:	461a      	mov	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	791b      	ldrb	r3, [r3, #4]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d128      	bne.n	80081fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d110      	bne.n	80081da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e00f      	b.n	80081fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	0151      	lsls	r1, r2, #5
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	440a      	add	r2, r1
 8008210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e133      	b.n	8008484 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008236:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800823a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	791b      	ldrb	r3, [r3, #4]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d015      	beq.n	8008270 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 811b 	beq.w	8008484 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	2101      	movs	r1, #1
 8008260:	fa01 f303 	lsl.w	r3, r1, r3
 8008264:	69f9      	ldr	r1, [r7, #28]
 8008266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800826a:	4313      	orrs	r3, r2
 800826c:	634b      	str	r3, [r1, #52]	; 0x34
 800826e:	e109      	b.n	8008484 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d110      	bne.n	80082a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	0151      	lsls	r1, r2, #5
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	440a      	add	r2, r1
 8008296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800829a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e00f      	b.n	80082c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6919      	ldr	r1, [r3, #16]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	781a      	ldrb	r2, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	b298      	uxth	r0, r3
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4603      	mov	r3, r0
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fade 	bl	8008898 <USB_WritePacket>
 80082dc:	e0d2      	b.n	8008484 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	0151      	lsls	r1, r2, #5
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	440a      	add	r2, r1
 80082f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f8:	0cdb      	lsrs	r3, r3, #19
 80082fa:	04db      	lsls	r3, r3, #19
 80082fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	69fa      	ldr	r2, [r7, #28]
 8008312:	440a      	add	r2, r1
 8008314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800831c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008320:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d126      	bne.n	8008378 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008340:	69b9      	ldr	r1, [r7, #24]
 8008342:	0148      	lsls	r0, r1, #5
 8008344:	69f9      	ldr	r1, [r7, #28]
 8008346:	4401      	add	r1, r0
 8008348:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800834c:	4313      	orrs	r3, r2
 800834e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	440a      	add	r2, r1
 8008366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800836e:	6113      	str	r3, [r2, #16]
 8008370:	e03a      	b.n	80083e8 <USB_EPStartXfer+0x3e4>
 8008372:	bf00      	nop
 8008374:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	699a      	ldr	r2, [r3, #24]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	4413      	add	r3, r2
 8008382:	1e5a      	subs	r2, r3, #1
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	fbb2 f3f3 	udiv	r3, r2, r3
 800838c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	8afa      	ldrh	r2, [r7, #22]
 8008394:	fb03 f202 	mul.w	r2, r3, r2
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	8afb      	ldrh	r3, [r7, #22]
 80083ac:	04d9      	lsls	r1, r3, #19
 80083ae:	4b38      	ldr	r3, [pc, #224]	; (8008490 <USB_EPStartXfer+0x48c>)
 80083b0:	400b      	ands	r3, r1
 80083b2:	69b9      	ldr	r1, [r7, #24]
 80083b4:	0148      	lsls	r0, r1, #5
 80083b6:	69f9      	ldr	r1, [r7, #28]
 80083b8:	4401      	add	r1, r0
 80083ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083be:	4313      	orrs	r3, r2
 80083c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	0148      	lsls	r0, r1, #5
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	4401      	add	r1, r0
 80083e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083e4:	4313      	orrs	r3, r2
 80083e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d10d      	bne.n	800840a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6919      	ldr	r1, [r3, #16]
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008406:	460a      	mov	r2, r1
 8008408:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d128      	bne.n	8008464 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841e:	2b00      	cmp	r3, #0
 8008420:	d110      	bne.n	8008444 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	440a      	add	r2, r1
 8008438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800843c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e00f      	b.n	8008464 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	0151      	lsls	r1, r2, #5
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	440a      	add	r2, r1
 800845a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800845e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008462:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800847e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3720      	adds	r7, #32
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	1ff80000 	.word	0x1ff80000

08008494 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	f040 80ce 	bne.w	8008652 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d132      	bne.n	8008524 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	0151      	lsls	r1, r2, #5
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	440a      	add	r2, r1
 80084d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	0151      	lsls	r1, r2, #5
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	440a      	add	r2, r1
 80084f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851c:	0cdb      	lsrs	r3, r3, #19
 800851e:	04db      	lsls	r3, r3, #19
 8008520:	6113      	str	r3, [r2, #16]
 8008522:	e04e      	b.n	80085c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853e:	0cdb      	lsrs	r3, r3, #19
 8008540:	04db      	lsls	r3, r3, #19
 8008542:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008562:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008566:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800859a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085b2:	6939      	ldr	r1, [r7, #16]
 80085b4:	0148      	lsls	r0, r1, #5
 80085b6:	6979      	ldr	r1, [r7, #20]
 80085b8:	4401      	add	r1, r0
 80085ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085be:	4313      	orrs	r3, r2
 80085c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d11e      	bne.n	8008606 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	0151      	lsls	r1, r2, #5
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	440a      	add	r2, r1
 80085fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	e097      	b.n	8008736 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008624:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8083 	beq.w	8008736 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	2101      	movs	r1, #1
 8008642:	fa01 f303 	lsl.w	r3, r1, r3
 8008646:	6979      	ldr	r1, [r7, #20]
 8008648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800864c:	4313      	orrs	r3, r2
 800864e:	634b      	str	r3, [r1, #52]	; 0x34
 8008650:	e071      	b.n	8008736 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866c:	0cdb      	lsrs	r3, r3, #19
 800866e:	04db      	lsls	r3, r3, #19
 8008670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008690:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008694:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086e4:	6939      	ldr	r1, [r7, #16]
 80086e6:	0148      	lsls	r0, r1, #5
 80086e8:	6979      	ldr	r1, [r7, #20]
 80086ea:	4401      	add	r1, r0
 80086ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086f0:	4313      	orrs	r3, r2
 80086f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10d      	bne.n	8008716 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6919      	ldr	r1, [r3, #16]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	460a      	mov	r2, r1
 8008714:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008734:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d14a      	bne.n	80087f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800877a:	f040 8086 	bne.w	800888a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	7812      	ldrb	r2, [r2, #0]
 80087b6:	0151      	lsls	r1, r2, #5
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	440a      	add	r2, r1
 80087bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d902      	bls.n	80087dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	75fb      	strb	r3, [r7, #23]
          break;
 80087da:	e056      	b.n	800888a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f4:	d0e7      	beq.n	80087c6 <USB_EPStopXfer+0x82>
 80087f6:	e048      	b.n	800888a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800880c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008810:	d13b      	bne.n	800888a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	7812      	ldrb	r2, [r2, #0]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008834:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	7812      	ldrb	r2, [r2, #0]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f242 7210 	movw	r2, #10000	; 0x2710
 8008866:	4293      	cmp	r3, r2
 8008868:	d902      	bls.n	8008870 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	75fb      	strb	r3, [r7, #23]
          break;
 800886e:	e00c      	b.n	800888a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008888:	d0e7      	beq.n	800885a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
}
 800888c:	4618      	mov	r0, r3
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008898:	b480      	push	{r7}
 800889a:	b089      	sub	sp, #36	; 0x24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	460b      	mov	r3, r1
 80088a8:	71fb      	strb	r3, [r7, #7]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d123      	bne.n	8008906 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088be:	88bb      	ldrh	r3, [r7, #4]
 80088c0:	3303      	adds	r3, #3
 80088c2:	089b      	lsrs	r3, r3, #2
 80088c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	e018      	b.n	80088fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	031a      	lsls	r2, r3, #12
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d8:	461a      	mov	r2, r3
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	3301      	adds	r3, #1
 80088e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	3301      	adds	r3, #1
 80088ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	3301      	adds	r3, #1
 80088f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	3301      	adds	r3, #1
 80088f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	3301      	adds	r3, #1
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	429a      	cmp	r2, r3
 8008904:	d3e2      	bcc.n	80088cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3724      	adds	r7, #36	; 0x24
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008914:	b480      	push	{r7}
 8008916:	b08b      	sub	sp, #44	; 0x2c
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	089b      	lsrs	r3, r3, #2
 800892e:	b29b      	uxth	r3, r3
 8008930:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	623b      	str	r3, [r7, #32]
 800893e:	e014      	b.n	800896a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	601a      	str	r2, [r3, #0]
    pDest++;
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	3301      	adds	r3, #1
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	3301      	adds	r3, #1
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	3301      	adds	r3, #1
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	3301      	adds	r3, #1
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	3301      	adds	r3, #1
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	6a3a      	ldr	r2, [r7, #32]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	429a      	cmp	r2, r3
 8008970:	d3e6      	bcc.n	8008940 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008972:	8bfb      	ldrh	r3, [r7, #30]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01e      	beq.n	80089b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008982:	461a      	mov	r2, r3
 8008984:	f107 0310 	add.w	r3, r7, #16
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	fa22 f303 	lsr.w	r3, r2, r3
 8008998:	b2da      	uxtb	r2, r3
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	701a      	strb	r2, [r3, #0]
      i++;
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	3301      	adds	r3, #1
 80089a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	3301      	adds	r3, #1
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80089aa:	8bfb      	ldrh	r3, [r7, #30]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089b0:	8bfb      	ldrh	r3, [r7, #30]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1ea      	bne.n	800898c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	372c      	adds	r7, #44	; 0x2c
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d12c      	bne.n	8008a3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	db12      	blt.n	8008a18 <USB_EPSetStall+0x54>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00f      	beq.n	8008a18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	e02b      	b.n	8008a92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	db12      	blt.n	8008a72 <USB_EPSetStall+0xae>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00f      	beq.n	8008a72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d128      	bne.n	8008b0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ada:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	791b      	ldrb	r3, [r3, #4]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d003      	beq.n	8008aec <USB_EPClearStall+0x4c>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	791b      	ldrb	r3, [r3, #4]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d138      	bne.n	8008b5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	e027      	b.n	8008b5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	791b      	ldrb	r3, [r3, #4]
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d003      	beq.n	8008b3e <USB_EPClearStall+0x9e>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	791b      	ldrb	r3, [r3, #4]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d10f      	bne.n	8008b5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ba0:	68f9      	ldr	r1, [r7, #12]
 8008ba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be6:	f023 0302 	bic.w	r3, r3, #2
 8008bea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c28:	f043 0302 	orr.w	r3, r3, #2
 8008c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	4013      	ands	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c54:	68fb      	ldr	r3, [r7, #12]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	4013      	ands	r3, r2
 8008c84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	0c1b      	lsrs	r3, r3, #16
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b085      	sub	sp, #20
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	b29b      	uxth	r3, r3
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cf8:	68bb      	ldr	r3, [r7, #8]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b087      	sub	sp, #28
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d2a:	78fb      	ldrb	r3, [r7, #3]
 8008d2c:	f003 030f 	and.w	r3, r3, #15
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	fa22 f303 	lsr.w	r3, r2, r3
 8008d36:	01db      	lsls	r3, r3, #7
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4013      	ands	r3, r2
 8008d52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d54:	68bb      	ldr	r3, [r7, #8]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d9c:	f023 0307 	bic.w	r3, r3, #7
 8008da0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008db4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	333c      	adds	r3, #60	; 0x3c
 8008dda:	3304      	adds	r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4a26      	ldr	r2, [pc, #152]	; (8008e7c <USB_EP0_OutStart+0xb8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d90a      	bls.n	8008dfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df8:	d101      	bne.n	8008dfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e037      	b.n	8008e6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	461a      	mov	r2, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e2c:	f043 0318 	orr.w	r3, r3, #24
 8008e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d10f      	bne.n	8008e6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e52:	461a      	mov	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	4f54300a 	.word	0x4f54300a

08008e80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <USB_CoreReset+0x64>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d901      	bls.n	8008e9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e01b      	b.n	8008ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	daf2      	bge.n	8008e8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f043 0201 	orr.w	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4a09      	ldr	r2, [pc, #36]	; (8008ee4 <USB_CoreReset+0x64>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d901      	bls.n	8008ec8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e006      	b.n	8008ed6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d0f0      	beq.n	8008eb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	00030d40 	.word	0x00030d40

08008ee8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ef4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ef8:	f002 fd74 	bl	800b9e4 <USBD_static_malloc>
 8008efc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	32b0      	adds	r2, #176	; 0xb0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f14:	2302      	movs	r3, #2
 8008f16:	e0d4      	b.n	80090c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f002 fdce 	bl	800bac0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32b0      	adds	r2, #176	; 0xb0
 8008f2e:	68f9      	ldr	r1, [r7, #12]
 8008f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32b0      	adds	r2, #176	; 0xb0
 8008f3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	7c1b      	ldrb	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d138      	bne.n	8008fc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f50:	4b5e      	ldr	r3, [pc, #376]	; (80090cc <USBD_CDC_Init+0x1e4>)
 8008f52:	7819      	ldrb	r1, [r3, #0]
 8008f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f58:	2202      	movs	r2, #2
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f002 fc1f 	bl	800b79e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f60:	4b5a      	ldr	r3, [pc, #360]	; (80090cc <USBD_CDC_Init+0x1e4>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	f003 020f 	and.w	r2, r3, #15
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	3324      	adds	r3, #36	; 0x24
 8008f76:	2201      	movs	r2, #1
 8008f78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f7a:	4b55      	ldr	r3, [pc, #340]	; (80090d0 <USBD_CDC_Init+0x1e8>)
 8008f7c:	7819      	ldrb	r1, [r3, #0]
 8008f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f82:	2202      	movs	r2, #2
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f002 fc0a 	bl	800b79e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f8a:	4b51      	ldr	r3, [pc, #324]	; (80090d0 <USBD_CDC_Init+0x1e8>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 020f 	and.w	r2, r3, #15
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008fa6:	4b4b      	ldr	r3, [pc, #300]	; (80090d4 <USBD_CDC_Init+0x1ec>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3326      	adds	r3, #38	; 0x26
 8008fbc:	2210      	movs	r2, #16
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	e035      	b.n	800902e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fc2:	4b42      	ldr	r3, [pc, #264]	; (80090cc <USBD_CDC_Init+0x1e4>)
 8008fc4:	7819      	ldrb	r1, [r3, #0]
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	2202      	movs	r2, #2
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f002 fbe7 	bl	800b79e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fd0:	4b3e      	ldr	r3, [pc, #248]	; (80090cc <USBD_CDC_Init+0x1e4>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 020f 	and.w	r2, r3, #15
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	3324      	adds	r3, #36	; 0x24
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fea:	4b39      	ldr	r3, [pc, #228]	; (80090d0 <USBD_CDC_Init+0x1e8>)
 8008fec:	7819      	ldrb	r1, [r3, #0]
 8008fee:	2340      	movs	r3, #64	; 0x40
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f002 fbd3 	bl	800b79e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ff8:	4b35      	ldr	r3, [pc, #212]	; (80090d0 <USBD_CDC_Init+0x1e8>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 020f 	and.w	r2, r3, #15
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009010:	2201      	movs	r2, #1
 8009012:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009014:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <USBD_CDC_Init+0x1ec>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	3326      	adds	r3, #38	; 0x26
 800902a:	2210      	movs	r2, #16
 800902c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800902e:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <USBD_CDC_Init+0x1ec>)
 8009030:	7819      	ldrb	r1, [r3, #0]
 8009032:	2308      	movs	r3, #8
 8009034:	2203      	movs	r2, #3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f002 fbb1 	bl	800b79e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <USBD_CDC_Init+0x1ec>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	2201      	movs	r2, #1
 8009054:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	33b0      	adds	r3, #176	; 0xb0
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800908c:	2302      	movs	r3, #2
 800908e:	e018      	b.n	80090c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	7c1b      	ldrb	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <USBD_CDC_Init+0x1e8>)
 800909a:	7819      	ldrb	r1, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f002 fc68 	bl	800b97c <USBD_LL_PrepareReceive>
 80090ac:	e008      	b.n	80090c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090ae:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <USBD_CDC_Init+0x1e8>)
 80090b0:	7819      	ldrb	r1, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f002 fc5e 	bl	800b97c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2000009b 	.word	0x2000009b
 80090d0:	2000009c 	.word	0x2000009c
 80090d4:	2000009d 	.word	0x2000009d

080090d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80090e4:	4b3a      	ldr	r3, [pc, #232]	; (80091d0 <USBD_CDC_DeInit+0xf8>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f002 fb7d 	bl	800b7ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80090f0:	4b37      	ldr	r3, [pc, #220]	; (80091d0 <USBD_CDC_DeInit+0xf8>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	f003 020f 	and.w	r2, r3, #15
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	3324      	adds	r3, #36	; 0x24
 8009106:	2200      	movs	r2, #0
 8009108:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800910a:	4b32      	ldr	r3, [pc, #200]	; (80091d4 <USBD_CDC_DeInit+0xfc>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f002 fb6a 	bl	800b7ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009116:	4b2f      	ldr	r3, [pc, #188]	; (80091d4 <USBD_CDC_DeInit+0xfc>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800912e:	2200      	movs	r2, #0
 8009130:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <USBD_CDC_DeInit+0x100>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f002 fb56 	bl	800b7ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800913e:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <USBD_CDC_DeInit+0x100>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f003 020f 	and.w	r2, r3, #15
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	2200      	movs	r2, #0
 8009156:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009158:	4b1f      	ldr	r3, [pc, #124]	; (80091d8 <USBD_CDC_DeInit+0x100>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	3326      	adds	r3, #38	; 0x26
 800916e:	2200      	movs	r2, #0
 8009170:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	32b0      	adds	r2, #176	; 0xb0
 800917c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01f      	beq.n	80091c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	33b0      	adds	r3, #176	; 0xb0
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	32b0      	adds	r2, #176	; 0xb0
 80091a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f002 fc2a 	bl	800ba00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32b0      	adds	r2, #176	; 0xb0
 80091b6:	2100      	movs	r1, #0
 80091b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	2000009b 	.word	0x2000009b
 80091d4:	2000009c 	.word	0x2000009c
 80091d8:	2000009d 	.word	0x2000009d

080091dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	32b0      	adds	r2, #176	; 0xb0
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	e0bf      	b.n	800938c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009214:	2b00      	cmp	r3, #0
 8009216:	d050      	beq.n	80092ba <USBD_CDC_Setup+0xde>
 8009218:	2b20      	cmp	r3, #32
 800921a:	f040 80af 	bne.w	800937c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	88db      	ldrh	r3, [r3, #6]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d03a      	beq.n	800929c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	b25b      	sxtb	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	da1b      	bge.n	8009268 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	33b0      	adds	r3, #176	; 0xb0
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009246:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	88d2      	ldrh	r2, [r2, #6]
 800924c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	88db      	ldrh	r3, [r3, #6]
 8009252:	2b07      	cmp	r3, #7
 8009254:	bf28      	it	cs
 8009256:	2307      	movcs	r3, #7
 8009258:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	89fa      	ldrh	r2, [r7, #14]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fd89 	bl	800ad78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009266:	e090      	b.n	800938a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	785a      	ldrb	r2, [r3, #1]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	88db      	ldrh	r3, [r3, #6]
 8009276:	2b3f      	cmp	r3, #63	; 0x3f
 8009278:	d803      	bhi.n	8009282 <USBD_CDC_Setup+0xa6>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	88db      	ldrh	r3, [r3, #6]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	e000      	b.n	8009284 <USBD_CDC_Setup+0xa8>
 8009282:	2240      	movs	r2, #64	; 0x40
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800928a:	6939      	ldr	r1, [r7, #16]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009292:	461a      	mov	r2, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 fd9b 	bl	800add0 <USBD_CtlPrepareRx>
      break;
 800929a:	e076      	b.n	800938a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	33b0      	adds	r3, #176	; 0xb0
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	7850      	ldrb	r0, [r2, #1]
 80092b2:	2200      	movs	r2, #0
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	4798      	blx	r3
      break;
 80092b8:	e067      	b.n	800938a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b0b      	cmp	r3, #11
 80092c0:	d851      	bhi.n	8009366 <USBD_CDC_Setup+0x18a>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <USBD_CDC_Setup+0xec>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092f9 	.word	0x080092f9
 80092cc:	08009375 	.word	0x08009375
 80092d0:	08009367 	.word	0x08009367
 80092d4:	08009367 	.word	0x08009367
 80092d8:	08009367 	.word	0x08009367
 80092dc:	08009367 	.word	0x08009367
 80092e0:	08009367 	.word	0x08009367
 80092e4:	08009367 	.word	0x08009367
 80092e8:	08009367 	.word	0x08009367
 80092ec:	08009367 	.word	0x08009367
 80092f0:	08009323 	.word	0x08009323
 80092f4:	0800934d 	.word	0x0800934d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b03      	cmp	r3, #3
 8009302:	d107      	bne.n	8009314 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009304:	f107 030a 	add.w	r3, r7, #10
 8009308:	2202      	movs	r2, #2
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fd33 	bl	800ad78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009312:	e032      	b.n	800937a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fcbd 	bl	800ac96 <USBD_CtlError>
            ret = USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	75fb      	strb	r3, [r7, #23]
          break;
 8009320:	e02b      	b.n	800937a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b03      	cmp	r3, #3
 800932c:	d107      	bne.n	800933e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800932e:	f107 030d 	add.w	r3, r7, #13
 8009332:	2201      	movs	r2, #1
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f001 fd1e 	bl	800ad78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800933c:	e01d      	b.n	800937a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 fca8 	bl	800ac96 <USBD_CtlError>
            ret = USBD_FAIL;
 8009346:	2303      	movs	r3, #3
 8009348:	75fb      	strb	r3, [r7, #23]
          break;
 800934a:	e016      	b.n	800937a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b03      	cmp	r3, #3
 8009356:	d00f      	beq.n	8009378 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f001 fc9b 	bl	800ac96 <USBD_CtlError>
            ret = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009364:	e008      	b.n	8009378 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 fc94 	bl	800ac96 <USBD_CtlError>
          ret = USBD_FAIL;
 800936e:	2303      	movs	r3, #3
 8009370:	75fb      	strb	r3, [r7, #23]
          break;
 8009372:	e002      	b.n	800937a <USBD_CDC_Setup+0x19e>
          break;
 8009374:	bf00      	nop
 8009376:	e008      	b.n	800938a <USBD_CDC_Setup+0x1ae>
          break;
 8009378:	bf00      	nop
      }
      break;
 800937a:	e006      	b.n	800938a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fc89 	bl	800ac96 <USBD_CtlError>
      ret = USBD_FAIL;
 8009384:	2303      	movs	r3, #3
 8009386:	75fb      	strb	r3, [r7, #23]
      break;
 8009388:	bf00      	nop
  }

  return (uint8_t)ret;
 800938a:	7dfb      	ldrb	r3, [r7, #23]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	32b0      	adds	r2, #176	; 0xb0
 80093b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e065      	b.n	800948a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	32b0      	adds	r2, #176	; 0xb0
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	f003 020f 	and.w	r2, r3, #15
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	3318      	adds	r3, #24
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d02f      	beq.n	8009448 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 020f 	and.w	r2, r3, #15
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	3318      	adds	r3, #24
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	78fb      	ldrb	r3, [r7, #3]
 8009400:	f003 010f 	and.w	r1, r3, #15
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	460b      	mov	r3, r1
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	440b      	add	r3, r1
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4403      	add	r3, r0
 8009410:	3348      	adds	r3, #72	; 0x48
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	fbb2 f1f3 	udiv	r1, r2, r3
 8009418:	fb01 f303 	mul.w	r3, r1, r3
 800941c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800941e:	2b00      	cmp	r3, #0
 8009420:	d112      	bne.n	8009448 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	f003 020f 	and.w	r2, r3, #15
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	3318      	adds	r3, #24
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800943a:	78f9      	ldrb	r1, [r7, #3]
 800943c:	2300      	movs	r3, #0
 800943e:	2200      	movs	r2, #0
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f002 fa7a 	bl	800b93a <USBD_LL_Transmit>
 8009446:	e01f      	b.n	8009488 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	33b0      	adds	r3, #176	; 0xb0
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d010      	beq.n	8009488 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	33b0      	adds	r3, #176	; 0xb0
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009484:	78fa      	ldrb	r2, [r7, #3]
 8009486:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	32b0      	adds	r2, #176	; 0xb0
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	32b0      	adds	r2, #176	; 0xb0
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e01a      	b.n	80094fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f002 fa78 	bl	800b9be <USBD_LL_GetRxDataSize>
 80094ce:	4602      	mov	r2, r0
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	33b0      	adds	r3, #176	; 0xb0
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094f4:	4611      	mov	r1, r2
 80094f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	32b0      	adds	r2, #176	; 0xb0
 8009514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009518:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009520:	2303      	movs	r3, #3
 8009522:	e025      	b.n	8009570 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	33b0      	adds	r3, #176	; 0xb0
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01a      	beq.n	800956e <USBD_CDC_EP0_RxReady+0x6c>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800953e:	2bff      	cmp	r3, #255	; 0xff
 8009540:	d015      	beq.n	800956e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	33b0      	adds	r3, #176	; 0xb0
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800955a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009562:	b292      	uxth	r2, r2
 8009564:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	22ff      	movs	r2, #255	; 0xff
 800956a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009580:	2182      	movs	r1, #130	; 0x82
 8009582:	4818      	ldr	r0, [pc, #96]	; (80095e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009584:	f000 fd4f 	bl	800a026 <USBD_GetEpDesc>
 8009588:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800958a:	2101      	movs	r1, #1
 800958c:	4815      	ldr	r0, [pc, #84]	; (80095e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800958e:	f000 fd4a 	bl	800a026 <USBD_GetEpDesc>
 8009592:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009594:	2181      	movs	r1, #129	; 0x81
 8009596:	4813      	ldr	r0, [pc, #76]	; (80095e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009598:	f000 fd45 	bl	800a026 <USBD_GetEpDesc>
 800959c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2210      	movs	r2, #16
 80095a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d006      	beq.n	80095be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b8:	711a      	strb	r2, [r3, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d006      	beq.n	80095d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095cc:	711a      	strb	r2, [r3, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2243      	movs	r2, #67	; 0x43
 80095d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000058 	.word	0x20000058

080095e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095f0:	2182      	movs	r1, #130	; 0x82
 80095f2:	4818      	ldr	r0, [pc, #96]	; (8009654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095f4:	f000 fd17 	bl	800a026 <USBD_GetEpDesc>
 80095f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095fa:	2101      	movs	r1, #1
 80095fc:	4815      	ldr	r0, [pc, #84]	; (8009654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80095fe:	f000 fd12 	bl	800a026 <USBD_GetEpDesc>
 8009602:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009604:	2181      	movs	r1, #129	; 0x81
 8009606:	4813      	ldr	r0, [pc, #76]	; (8009654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009608:	f000 fd0d 	bl	800a026 <USBD_GetEpDesc>
 800960c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2210      	movs	r2, #16
 8009618:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d006      	beq.n	800962e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2200      	movs	r2, #0
 8009624:	711a      	strb	r2, [r3, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f042 0202 	orr.w	r2, r2, #2
 800962c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	711a      	strb	r2, [r3, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f042 0202 	orr.w	r2, r2, #2
 8009640:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2243      	movs	r2, #67	; 0x43
 8009646:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009648:	4b02      	ldr	r3, [pc, #8]	; (8009654 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000058 	.word	0x20000058

08009658 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009660:	2182      	movs	r1, #130	; 0x82
 8009662:	4818      	ldr	r0, [pc, #96]	; (80096c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009664:	f000 fcdf 	bl	800a026 <USBD_GetEpDesc>
 8009668:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800966a:	2101      	movs	r1, #1
 800966c:	4815      	ldr	r0, [pc, #84]	; (80096c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800966e:	f000 fcda 	bl	800a026 <USBD_GetEpDesc>
 8009672:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009674:	2181      	movs	r1, #129	; 0x81
 8009676:	4813      	ldr	r0, [pc, #76]	; (80096c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009678:	f000 fcd5 	bl	800a026 <USBD_GetEpDesc>
 800967c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2210      	movs	r2, #16
 8009688:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2200      	movs	r2, #0
 8009694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009698:	711a      	strb	r2, [r3, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d006      	beq.n	80096b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096ac:	711a      	strb	r2, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2243      	movs	r2, #67	; 0x43
 80096b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096b8:	4b02      	ldr	r3, [pc, #8]	; (80096c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20000058 	.word	0x20000058

080096c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	220a      	movs	r2, #10
 80096d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096d6:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	20000014 	.word	0x20000014

080096e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e009      	b.n	8009710 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	33b0      	adds	r3, #176	; 0xb0
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	32b0      	adds	r2, #176	; 0xb0
 8009732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009736:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800973e:	2303      	movs	r3, #3
 8009740:	e008      	b.n	8009754 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	371c      	adds	r7, #28
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	32b0      	adds	r2, #176	; 0xb0
 8009774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009778:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	e004      	b.n	800978e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
	...

0800979c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	32b0      	adds	r2, #176	; 0xb0
 80097ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	32b0      	adds	r2, #176	; 0xb0
 80097c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e025      	b.n	800981a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11f      	bne.n	8009818 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2201      	movs	r2, #1
 80097dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80097e0:	4b10      	ldr	r3, [pc, #64]	; (8009824 <USBD_CDC_TransmitPacket+0x88>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	f003 020f 	and.w	r2, r3, #15
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4403      	add	r3, r0
 80097fa:	3318      	adds	r3, #24
 80097fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <USBD_CDC_TransmitPacket+0x88>)
 8009800:	7819      	ldrb	r1, [r3, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f002 f893 	bl	800b93a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000009b 	.word	0x2000009b

08009828 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32b0      	adds	r2, #176	; 0xb0
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	32b0      	adds	r2, #176	; 0xb0
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009852:	2303      	movs	r3, #3
 8009854:	e018      	b.n	8009888 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7c1b      	ldrb	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10a      	bne.n	8009874 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <USBD_CDC_ReceivePacket+0x68>)
 8009860:	7819      	ldrb	r1, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f002 f885 	bl	800b97c <USBD_LL_PrepareReceive>
 8009872:	e008      	b.n	8009886 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009874:	4b06      	ldr	r3, [pc, #24]	; (8009890 <USBD_CDC_ReceivePacket+0x68>)
 8009876:	7819      	ldrb	r1, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f002 f87b 	bl	800b97c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	2000009c 	.word	0x2000009c

08009894 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e01f      	b.n	80098ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	79fa      	ldrb	r2, [r7, #7]
 80098de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f001 fef5 	bl	800b6d0 <USBD_LL_Init>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	e025      	b.n	8009958 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	32ae      	adds	r2, #174	; 0xae
 800991e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00f      	beq.n	8009948 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	32ae      	adds	r2, #174	; 0xae
 8009932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	f107 020e 	add.w	r2, r7, #14
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
 8009940:	4602      	mov	r2, r0
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fefd 	bl	800b768 <USBD_LL_Start>
 800996e:	4603      	mov	r3, r0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	78fa      	ldrb	r2, [r7, #3]
 80099b2:	4611      	mov	r1, r2
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	4798      	blx	r3
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	78fa      	ldrb	r2, [r7, #3]
 80099e0:	4611      	mov	r1, r2
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80099ec:	2303      	movs	r3, #3
 80099ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 f908 	bl	800ac22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a20:	461a      	mov	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a2e:	f003 031f 	and.w	r3, r3, #31
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d01a      	beq.n	8009a6c <USBD_LL_SetupStage+0x72>
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d822      	bhi.n	8009a80 <USBD_LL_SetupStage+0x86>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <USBD_LL_SetupStage+0x4a>
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d00a      	beq.n	8009a58 <USBD_LL_SetupStage+0x5e>
 8009a42:	e01d      	b.n	8009a80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fb5f 	bl	800a110 <USBD_StdDevReq>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]
      break;
 8009a56:	e020      	b.n	8009a9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fbc7 	bl	800a1f4 <USBD_StdItfReq>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73fb      	strb	r3, [r7, #15]
      break;
 8009a6a:	e016      	b.n	8009a9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc29 	bl	800a2cc <USBD_StdEPReq>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a7e:	e00c      	b.n	8009a9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 feca 	bl	800b828 <USBD_LL_StallEP>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]
      break;
 8009a98:	bf00      	nop
  }

  return ret;
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	460b      	mov	r3, r1
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d16e      	bne.n	8009b9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ac2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	f040 8098 	bne.w	8009c00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d913      	bls.n	8009b04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	1ad2      	subs	r2, r2, r3
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	4293      	cmp	r3, r2
 8009af4:	bf28      	it	cs
 8009af6:	4613      	movcs	r3, r2
 8009af8:	461a      	mov	r2, r3
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f001 f984 	bl	800ae0a <USBD_CtlContinueRx>
 8009b02:	e07d      	b.n	8009c00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b0a:	f003 031f 	and.w	r3, r3, #31
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d014      	beq.n	8009b3c <USBD_LL_DataOutStage+0x98>
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d81d      	bhi.n	8009b52 <USBD_LL_DataOutStage+0xae>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <USBD_LL_DataOutStage+0x7c>
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d003      	beq.n	8009b26 <USBD_LL_DataOutStage+0x82>
 8009b1e:	e018      	b.n	8009b52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75bb      	strb	r3, [r7, #22]
            break;
 8009b24:	e018      	b.n	8009b58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fa5e 	bl	8009ff2 <USBD_CoreFindIF>
 8009b36:	4603      	mov	r3, r0
 8009b38:	75bb      	strb	r3, [r7, #22]
            break;
 8009b3a:	e00d      	b.n	8009b58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	4619      	mov	r1, r3
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 fa60 	bl	800a00c <USBD_CoreFindEP>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8009b50:	e002      	b.n	8009b58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75bb      	strb	r3, [r7, #22]
            break;
 8009b56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009b58:	7dbb      	ldrb	r3, [r7, #22]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d119      	bne.n	8009b92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d113      	bne.n	8009b92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009b6a:	7dba      	ldrb	r2, [r7, #22]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	32ae      	adds	r2, #174	; 0xae
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b7a:	7dba      	ldrb	r2, [r7, #22]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b82:	7dba      	ldrb	r2, [r7, #22]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	32ae      	adds	r2, #174	; 0xae
 8009b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f001 f94a 	bl	800ae2c <USBD_CtlSendStatus>
 8009b98:	e032      	b.n	8009c00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 fa31 	bl	800a00c <USBD_CoreFindEP>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bae:	7dbb      	ldrb	r3, [r7, #22]
 8009bb0:	2bff      	cmp	r3, #255	; 0xff
 8009bb2:	d025      	beq.n	8009c00 <USBD_LL_DataOutStage+0x15c>
 8009bb4:	7dbb      	ldrb	r3, [r7, #22]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d122      	bne.n	8009c00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d117      	bne.n	8009bf6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009bc6:	7dba      	ldrb	r2, [r7, #22]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	32ae      	adds	r2, #174	; 0xae
 8009bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009bd6:	7dba      	ldrb	r2, [r7, #22]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009bde:	7dba      	ldrb	r2, [r7, #22]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	32ae      	adds	r2, #174	; 0xae
 8009be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	7afa      	ldrb	r2, [r7, #11]
 8009bec:	4611      	mov	r1, r2
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	4798      	blx	r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	e000      	b.n	8009c02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b086      	sub	sp, #24
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	460b      	mov	r3, r1
 8009c14:	607a      	str	r2, [r7, #4]
 8009c16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c18:	7afb      	ldrb	r3, [r7, #11]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d16f      	bne.n	8009cfe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3314      	adds	r3, #20
 8009c22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d15a      	bne.n	8009ce4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d914      	bls.n	8009c64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	689a      	ldr	r2, [r3, #8]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	1ad2      	subs	r2, r2, r3
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f001 f8ac 	bl	800adae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c56:	2300      	movs	r3, #0
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f001 fe8d 	bl	800b97c <USBD_LL_PrepareReceive>
 8009c62:	e03f      	b.n	8009ce4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d11c      	bne.n	8009caa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d316      	bcc.n	8009caa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d20f      	bcs.n	8009caa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f001 f88d 	bl	800adae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f001 fe6a 	bl	800b97c <USBD_LL_PrepareReceive>
 8009ca8:	e01c      	b.n	8009ce4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d10f      	bne.n	8009cd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cd6:	2180      	movs	r1, #128	; 0x80
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f001 fda5 	bl	800b828 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f001 f8b7 	bl	800ae52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d03a      	beq.n	8009d64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7ff fe42 	bl	8009978 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009cfc:	e032      	b.n	8009d64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4619      	mov	r1, r3
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 f97f 	bl	800a00c <USBD_CoreFindEP>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	2bff      	cmp	r3, #255	; 0xff
 8009d16:	d025      	beq.n	8009d64 <USBD_LL_DataInStage+0x15a>
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d122      	bne.n	8009d64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d11c      	bne.n	8009d64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d2a:	7dfa      	ldrb	r2, [r7, #23]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	32ae      	adds	r2, #174	; 0xae
 8009d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d014      	beq.n	8009d64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009d3a:	7dfa      	ldrb	r2, [r7, #23]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009d42:	7dfa      	ldrb	r2, [r7, #23]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	32ae      	adds	r2, #174	; 0xae
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	7afa      	ldrb	r2, [r7, #11]
 8009d50:	4611      	mov	r1, r2
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	4798      	blx	r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009d5a:	7dbb      	ldrb	r3, [r7, #22]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009d60:	7dbb      	ldrb	r3, [r7, #22]
 8009d62:	e000      	b.n	8009d66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d014      	beq.n	8009dd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6852      	ldr	r2, [r2, #4]
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	4798      	blx	r3
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dd4:	2340      	movs	r3, #64	; 0x40
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fcdf 	bl	800b79e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2240      	movs	r2, #64	; 0x40
 8009dec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009df0:	2340      	movs	r3, #64	; 0x40
 8009df2:	2200      	movs	r2, #0
 8009df4:	2180      	movs	r1, #128	; 0x80
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fcd1 	bl	800b79e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2240      	movs	r2, #64	; 0x40
 8009e06:	621a      	str	r2, [r3, #32]

  return ret;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d106      	bne.n	8009e80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d110      	bne.n	8009ec4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d005      	beq.n	8009ec4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	32ae      	adds	r2, #174	; 0xae
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e01c      	b.n	8009f2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d115      	bne.n	8009f28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	32ae      	adds	r2, #174	; 0xae
 8009f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	32ae      	adds	r2, #174	; 0xae
 8009f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	4611      	mov	r1, r2
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	32ae      	adds	r2, #174	; 0xae
 8009f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e01c      	b.n	8009f8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d115      	bne.n	8009f8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	32ae      	adds	r2, #174	; 0xae
 8009f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32ae      	adds	r2, #174	; 0xae
 8009f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	4611      	mov	r1, r2
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00e      	beq.n	8009fe8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6852      	ldr	r2, [r2, #4]
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	4611      	mov	r1, r2
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ffe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a018:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	885b      	ldrh	r3, [r3, #2]
 800a042:	b29a      	uxth	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d920      	bls.n	800a090 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a056:	e013      	b.n	800a080 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a058:	f107 030a 	add.w	r3, r7, #10
 800a05c:	4619      	mov	r1, r3
 800a05e:	6978      	ldr	r0, [r7, #20]
 800a060:	f000 f81b 	bl	800a09a <USBD_GetNextDesc>
 800a064:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	785b      	ldrb	r3, [r3, #1]
 800a06a:	2b05      	cmp	r3, #5
 800a06c:	d108      	bne.n	800a080 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	789b      	ldrb	r3, [r3, #2]
 800a076:	78fa      	ldrb	r2, [r7, #3]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d008      	beq.n	800a08e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	b29a      	uxth	r2, r3
 800a086:	897b      	ldrh	r3, [r7, #10]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d8e5      	bhi.n	800a058 <USBD_GetEpDesc+0x32>
 800a08c:	e000      	b.n	800a090 <USBD_GetEpDesc+0x6a>
          break;
 800a08e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a090:	693b      	ldr	r3, [r7, #16]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b085      	sub	sp, #20
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	881a      	ldrh	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	4413      	add	r3, r2
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a0f2:	8a3b      	ldrh	r3, [r7, #16]
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	b21a      	sxth	r2, r3
 800a0f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b21b      	sxth	r3, r3
 800a100:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a102:	89fb      	ldrh	r3, [r7, #14]
}
 800a104:	4618      	mov	r0, r3
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a126:	2b40      	cmp	r3, #64	; 0x40
 800a128:	d005      	beq.n	800a136 <USBD_StdDevReq+0x26>
 800a12a:	2b40      	cmp	r3, #64	; 0x40
 800a12c:	d857      	bhi.n	800a1de <USBD_StdDevReq+0xce>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00f      	beq.n	800a152 <USBD_StdDevReq+0x42>
 800a132:	2b20      	cmp	r3, #32
 800a134:	d153      	bne.n	800a1de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	32ae      	adds	r2, #174	; 0xae
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
      break;
 800a150:	e04a      	b.n	800a1e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	2b09      	cmp	r3, #9
 800a158:	d83b      	bhi.n	800a1d2 <USBD_StdDevReq+0xc2>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <USBD_StdDevReq+0x50>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a1b5 	.word	0x0800a1b5
 800a164:	0800a1c9 	.word	0x0800a1c9
 800a168:	0800a1d3 	.word	0x0800a1d3
 800a16c:	0800a1bf 	.word	0x0800a1bf
 800a170:	0800a1d3 	.word	0x0800a1d3
 800a174:	0800a193 	.word	0x0800a193
 800a178:	0800a189 	.word	0x0800a189
 800a17c:	0800a1d3 	.word	0x0800a1d3
 800a180:	0800a1ab 	.word	0x0800a1ab
 800a184:	0800a19d 	.word	0x0800a19d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fa3c 	bl	800a608 <USBD_GetDescriptor>
          break;
 800a190:	e024      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fba1 	bl	800a8dc <USBD_SetAddress>
          break;
 800a19a:	e01f      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fbe0 	bl	800a964 <USBD_SetConfig>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73fb      	strb	r3, [r7, #15]
          break;
 800a1a8:	e018      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fc83 	bl	800aab8 <USBD_GetConfig>
          break;
 800a1b2:	e013      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fcb4 	bl	800ab24 <USBD_GetStatus>
          break;
 800a1bc:	e00e      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fce3 	bl	800ab8c <USBD_SetFeature>
          break;
 800a1c6:	e009      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fd07 	bl	800abde <USBD_ClrFeature>
          break;
 800a1d0:	e004      	b.n	800a1dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fd5e 	bl	800ac96 <USBD_CtlError>
          break;
 800a1da:	bf00      	nop
      }
      break;
 800a1dc:	e004      	b.n	800a1e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fd58 	bl	800ac96 <USBD_CtlError>
      break;
 800a1e6:	bf00      	nop
  }

  return ret;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop

0800a1f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a20a:	2b40      	cmp	r3, #64	; 0x40
 800a20c:	d005      	beq.n	800a21a <USBD_StdItfReq+0x26>
 800a20e:	2b40      	cmp	r3, #64	; 0x40
 800a210:	d852      	bhi.n	800a2b8 <USBD_StdItfReq+0xc4>
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <USBD_StdItfReq+0x26>
 800a216:	2b20      	cmp	r3, #32
 800a218:	d14e      	bne.n	800a2b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a220:	b2db      	uxtb	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	2b02      	cmp	r3, #2
 800a226:	d840      	bhi.n	800a2aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	889b      	ldrh	r3, [r3, #4]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d836      	bhi.n	800a2a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	889b      	ldrh	r3, [r3, #4]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	4619      	mov	r1, r3
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7ff fed9 	bl	8009ff2 <USBD_CoreFindIF>
 800a240:	4603      	mov	r3, r0
 800a242:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2bff      	cmp	r3, #255	; 0xff
 800a248:	d01d      	beq.n	800a286 <USBD_StdItfReq+0x92>
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d11a      	bne.n	800a286 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a250:	7bba      	ldrb	r2, [r7, #14]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	32ae      	adds	r2, #174	; 0xae
 800a256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00f      	beq.n	800a280 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a260:	7bba      	ldrb	r2, [r7, #14]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a268:	7bba      	ldrb	r2, [r7, #14]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	32ae      	adds	r2, #174	; 0xae
 800a26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	4798      	blx	r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a27e:	e004      	b.n	800a28a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a284:	e001      	b.n	800a28a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a286:	2303      	movs	r3, #3
 800a288:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	88db      	ldrh	r3, [r3, #6]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d110      	bne.n	800a2b4 <USBD_StdItfReq+0xc0>
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10d      	bne.n	800a2b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fdc7 	bl	800ae2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a29e:	e009      	b.n	800a2b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fcf7 	bl	800ac96 <USBD_CtlError>
          break;
 800a2a8:	e004      	b.n	800a2b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fcf2 	bl	800ac96 <USBD_CtlError>
          break;
 800a2b2:	e000      	b.n	800a2b6 <USBD_StdItfReq+0xc2>
          break;
 800a2b4:	bf00      	nop
      }
      break;
 800a2b6:	e004      	b.n	800a2c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fceb 	bl	800ac96 <USBD_CtlError>
      break;
 800a2c0:	bf00      	nop
  }

  return ret;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	889b      	ldrh	r3, [r3, #4]
 800a2de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2e8:	2b40      	cmp	r3, #64	; 0x40
 800a2ea:	d007      	beq.n	800a2fc <USBD_StdEPReq+0x30>
 800a2ec:	2b40      	cmp	r3, #64	; 0x40
 800a2ee:	f200 817f 	bhi.w	800a5f0 <USBD_StdEPReq+0x324>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d02a      	beq.n	800a34c <USBD_StdEPReq+0x80>
 800a2f6:	2b20      	cmp	r3, #32
 800a2f8:	f040 817a 	bne.w	800a5f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff fe83 	bl	800a00c <USBD_CoreFindEP>
 800a306:	4603      	mov	r3, r0
 800a308:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a30a:	7b7b      	ldrb	r3, [r7, #13]
 800a30c:	2bff      	cmp	r3, #255	; 0xff
 800a30e:	f000 8174 	beq.w	800a5fa <USBD_StdEPReq+0x32e>
 800a312:	7b7b      	ldrb	r3, [r7, #13]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f040 8170 	bne.w	800a5fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a31a:	7b7a      	ldrb	r2, [r7, #13]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a322:	7b7a      	ldrb	r2, [r7, #13]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	32ae      	adds	r2, #174	; 0xae
 800a328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 8163 	beq.w	800a5fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a334:	7b7a      	ldrb	r2, [r7, #13]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32ae      	adds	r2, #174	; 0xae
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a34a:	e156      	b.n	800a5fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	785b      	ldrb	r3, [r3, #1]
 800a350:	2b03      	cmp	r3, #3
 800a352:	d008      	beq.n	800a366 <USBD_StdEPReq+0x9a>
 800a354:	2b03      	cmp	r3, #3
 800a356:	f300 8145 	bgt.w	800a5e4 <USBD_StdEPReq+0x318>
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 809b 	beq.w	800a496 <USBD_StdEPReq+0x1ca>
 800a360:	2b01      	cmp	r3, #1
 800a362:	d03c      	beq.n	800a3de <USBD_StdEPReq+0x112>
 800a364:	e13e      	b.n	800a5e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d002      	beq.n	800a378 <USBD_StdEPReq+0xac>
 800a372:	2b03      	cmp	r3, #3
 800a374:	d016      	beq.n	800a3a4 <USBD_StdEPReq+0xd8>
 800a376:	e02c      	b.n	800a3d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <USBD_StdEPReq+0xce>
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	2b80      	cmp	r3, #128	; 0x80
 800a382:	d00a      	beq.n	800a39a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fa4d 	bl	800b828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a38e:	2180      	movs	r1, #128	; 0x80
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 fa49 	bl	800b828 <USBD_LL_StallEP>
 800a396:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a398:	e020      	b.n	800a3dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fc7a 	bl	800ac96 <USBD_CtlError>
              break;
 800a3a2:	e01b      	b.n	800a3dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	885b      	ldrh	r3, [r3, #2]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10e      	bne.n	800a3ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00b      	beq.n	800a3ca <USBD_StdEPReq+0xfe>
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b80      	cmp	r3, #128	; 0x80
 800a3b6:	d008      	beq.n	800a3ca <USBD_StdEPReq+0xfe>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	88db      	ldrh	r3, [r3, #6]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fa2f 	bl	800b828 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fd2e 	bl	800ae2c <USBD_CtlSendStatus>

              break;
 800a3d0:	e004      	b.n	800a3dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fc5e 	bl	800ac96 <USBD_CtlError>
              break;
 800a3da:	bf00      	nop
          }
          break;
 800a3dc:	e107      	b.n	800a5ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d002      	beq.n	800a3f0 <USBD_StdEPReq+0x124>
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d016      	beq.n	800a41c <USBD_StdEPReq+0x150>
 800a3ee:	e04b      	b.n	800a488 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00d      	beq.n	800a412 <USBD_StdEPReq+0x146>
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	2b80      	cmp	r3, #128	; 0x80
 800a3fa:	d00a      	beq.n	800a412 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 fa11 	bl	800b828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a406:	2180      	movs	r1, #128	; 0x80
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 fa0d 	bl	800b828 <USBD_LL_StallEP>
 800a40e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a410:	e040      	b.n	800a494 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fc3e 	bl	800ac96 <USBD_CtlError>
              break;
 800a41a:	e03b      	b.n	800a494 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	885b      	ldrh	r3, [r3, #2]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d136      	bne.n	800a492 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f001 fa17 	bl	800b866 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fcf7 	bl	800ae2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff fde2 	bl	800a00c <USBD_CoreFindEP>
 800a448:	4603      	mov	r3, r0
 800a44a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a44c:	7b7b      	ldrb	r3, [r7, #13]
 800a44e:	2bff      	cmp	r3, #255	; 0xff
 800a450:	d01f      	beq.n	800a492 <USBD_StdEPReq+0x1c6>
 800a452:	7b7b      	ldrb	r3, [r7, #13]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d11c      	bne.n	800a492 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a458:	7b7a      	ldrb	r2, [r7, #13]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a460:	7b7a      	ldrb	r2, [r7, #13]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	32ae      	adds	r2, #174	; 0xae
 800a466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d010      	beq.n	800a492 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a470:	7b7a      	ldrb	r2, [r7, #13]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	32ae      	adds	r2, #174	; 0xae
 800a476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	4798      	blx	r3
 800a482:	4603      	mov	r3, r0
 800a484:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a486:	e004      	b.n	800a492 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fc03 	bl	800ac96 <USBD_CtlError>
              break;
 800a490:	e000      	b.n	800a494 <USBD_StdEPReq+0x1c8>
              break;
 800a492:	bf00      	nop
          }
          break;
 800a494:	e0ab      	b.n	800a5ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d002      	beq.n	800a4a8 <USBD_StdEPReq+0x1dc>
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d032      	beq.n	800a50c <USBD_StdEPReq+0x240>
 800a4a6:	e097      	b.n	800a5d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d007      	beq.n	800a4be <USBD_StdEPReq+0x1f2>
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b80      	cmp	r3, #128	; 0x80
 800a4b2:	d004      	beq.n	800a4be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fbed 	bl	800ac96 <USBD_CtlError>
                break;
 800a4bc:	e091      	b.n	800a5e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	da0b      	bge.n	800a4de <USBD_StdEPReq+0x212>
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	4413      	add	r3, r2
 800a4da:	3304      	adds	r3, #4
 800a4dc:	e00b      	b.n	800a4f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2202      	movs	r2, #2
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fc37 	bl	800ad78 <USBD_CtlSendData>
              break;
 800a50a:	e06a      	b.n	800a5e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a50c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a510:	2b00      	cmp	r3, #0
 800a512:	da11      	bge.n	800a538 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	f003 020f 	and.w	r2, r3, #15
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	3324      	adds	r3, #36	; 0x24
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d117      	bne.n	800a55e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fbb0 	bl	800ac96 <USBD_CtlError>
                  break;
 800a536:	e054      	b.n	800a5e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	f003 020f 	and.w	r2, r3, #15
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d104      	bne.n	800a55e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fb9d 	bl	800ac96 <USBD_CtlError>
                  break;
 800a55c:	e041      	b.n	800a5e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a55e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a562:	2b00      	cmp	r3, #0
 800a564:	da0b      	bge.n	800a57e <USBD_StdEPReq+0x2b2>
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a56c:	4613      	mov	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	3310      	adds	r3, #16
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	4413      	add	r3, r2
 800a57a:	3304      	adds	r3, #4
 800a57c:	e00b      	b.n	800a596 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a57e:	7bbb      	ldrb	r3, [r7, #14]
 800a580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	4413      	add	r3, r2
 800a594:	3304      	adds	r3, #4
 800a596:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <USBD_StdEPReq+0x2d8>
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	2b80      	cmp	r3, #128	; 0x80
 800a5a2:	d103      	bne.n	800a5ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	e00e      	b.n	800a5ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 f977 	bl	800b8a4 <USBD_LL_IsStallEP>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	e002      	b.n	800a5ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fbd1 	bl	800ad78 <USBD_CtlSendData>
              break;
 800a5d6:	e004      	b.n	800a5e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fb5b 	bl	800ac96 <USBD_CtlError>
              break;
 800a5e0:	bf00      	nop
          }
          break;
 800a5e2:	e004      	b.n	800a5ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fb55 	bl	800ac96 <USBD_CtlError>
          break;
 800a5ec:	bf00      	nop
      }
      break;
 800a5ee:	e005      	b.n	800a5fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fb4f 	bl	800ac96 <USBD_CtlError>
      break;
 800a5f8:	e000      	b.n	800a5fc <USBD_StdEPReq+0x330>
      break;
 800a5fa:	bf00      	nop
  }

  return ret;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a612:	2300      	movs	r3, #0
 800a614:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a61a:	2300      	movs	r3, #0
 800a61c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	885b      	ldrh	r3, [r3, #2]
 800a622:	0a1b      	lsrs	r3, r3, #8
 800a624:	b29b      	uxth	r3, r3
 800a626:	3b01      	subs	r3, #1
 800a628:	2b06      	cmp	r3, #6
 800a62a:	f200 8128 	bhi.w	800a87e <USBD_GetDescriptor+0x276>
 800a62e:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <USBD_GetDescriptor+0x2c>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a651 	.word	0x0800a651
 800a638:	0800a669 	.word	0x0800a669
 800a63c:	0800a6a9 	.word	0x0800a6a9
 800a640:	0800a87f 	.word	0x0800a87f
 800a644:	0800a87f 	.word	0x0800a87f
 800a648:	0800a81f 	.word	0x0800a81f
 800a64c:	0800a84b 	.word	0x0800a84b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	7c12      	ldrb	r2, [r2, #16]
 800a65c:	f107 0108 	add.w	r1, r7, #8
 800a660:	4610      	mov	r0, r2
 800a662:	4798      	blx	r3
 800a664:	60f8      	str	r0, [r7, #12]
      break;
 800a666:	e112      	b.n	800a88e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7c1b      	ldrb	r3, [r3, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10d      	bne.n	800a68c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a678:	f107 0208 	add.w	r2, r7, #8
 800a67c:	4610      	mov	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	2202      	movs	r2, #2
 800a688:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a68a:	e100      	b.n	800a88e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	f107 0208 	add.w	r2, r7, #8
 800a698:	4610      	mov	r0, r2
 800a69a:	4798      	blx	r3
 800a69c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	701a      	strb	r2, [r3, #0]
      break;
 800a6a6:	e0f2      	b.n	800a88e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	885b      	ldrh	r3, [r3, #2]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	f200 80ac 	bhi.w	800a80c <USBD_GetDescriptor+0x204>
 800a6b4:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <USBD_GetDescriptor+0xb4>)
 800a6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ba:	bf00      	nop
 800a6bc:	0800a6d5 	.word	0x0800a6d5
 800a6c0:	0800a709 	.word	0x0800a709
 800a6c4:	0800a73d 	.word	0x0800a73d
 800a6c8:	0800a771 	.word	0x0800a771
 800a6cc:	0800a7a5 	.word	0x0800a7a5
 800a6d0:	0800a7d9 	.word	0x0800a7d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	7c12      	ldrb	r2, [r2, #16]
 800a6ec:	f107 0108 	add.w	r1, r7, #8
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4798      	blx	r3
 800a6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6f6:	e091      	b.n	800a81c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 facb 	bl	800ac96 <USBD_CtlError>
            err++;
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	3301      	adds	r3, #1
 800a704:	72fb      	strb	r3, [r7, #11]
          break;
 800a706:	e089      	b.n	800a81c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	7c12      	ldrb	r2, [r2, #16]
 800a720:	f107 0108 	add.w	r1, r7, #8
 800a724:	4610      	mov	r0, r2
 800a726:	4798      	blx	r3
 800a728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a72a:	e077      	b.n	800a81c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fab1 	bl	800ac96 <USBD_CtlError>
            err++;
 800a734:	7afb      	ldrb	r3, [r7, #11]
 800a736:	3301      	adds	r3, #1
 800a738:	72fb      	strb	r3, [r7, #11]
          break;
 800a73a:	e06f      	b.n	800a81c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00b      	beq.n	800a760 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	7c12      	ldrb	r2, [r2, #16]
 800a754:	f107 0108 	add.w	r1, r7, #8
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75e:	e05d      	b.n	800a81c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa97 	bl	800ac96 <USBD_CtlError>
            err++;
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	3301      	adds	r3, #1
 800a76c:	72fb      	strb	r3, [r7, #11]
          break;
 800a76e:	e055      	b.n	800a81c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	7c12      	ldrb	r2, [r2, #16]
 800a788:	f107 0108 	add.w	r1, r7, #8
 800a78c:	4610      	mov	r0, r2
 800a78e:	4798      	blx	r3
 800a790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a792:	e043      	b.n	800a81c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fa7d 	bl	800ac96 <USBD_CtlError>
            err++;
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7a2:	e03b      	b.n	800a81c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	7c12      	ldrb	r2, [r2, #16]
 800a7bc:	f107 0108 	add.w	r1, r7, #8
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
 800a7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c6:	e029      	b.n	800a81c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa63 	bl	800ac96 <USBD_CtlError>
            err++;
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d6:	e021      	b.n	800a81c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	7c12      	ldrb	r2, [r2, #16]
 800a7f0:	f107 0108 	add.w	r1, r7, #8
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7fa:	e00f      	b.n	800a81c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fa49 	bl	800ac96 <USBD_CtlError>
            err++;
 800a804:	7afb      	ldrb	r3, [r7, #11]
 800a806:	3301      	adds	r3, #1
 800a808:	72fb      	strb	r3, [r7, #11]
          break;
 800a80a:	e007      	b.n	800a81c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fa41 	bl	800ac96 <USBD_CtlError>
          err++;
 800a814:	7afb      	ldrb	r3, [r7, #11]
 800a816:	3301      	adds	r3, #1
 800a818:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a81a:	bf00      	nop
      }
      break;
 800a81c:	e037      	b.n	800a88e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	7c1b      	ldrb	r3, [r3, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d109      	bne.n	800a83a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82e:	f107 0208 	add.w	r2, r7, #8
 800a832:	4610      	mov	r0, r2
 800a834:	4798      	blx	r3
 800a836:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a838:	e029      	b.n	800a88e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fa2a 	bl	800ac96 <USBD_CtlError>
        err++;
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	3301      	adds	r3, #1
 800a846:	72fb      	strb	r3, [r7, #11]
      break;
 800a848:	e021      	b.n	800a88e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7c1b      	ldrb	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10d      	bne.n	800a86e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f107 0208 	add.w	r2, r7, #8
 800a85e:	4610      	mov	r0, r2
 800a860:	4798      	blx	r3
 800a862:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3301      	adds	r3, #1
 800a868:	2207      	movs	r2, #7
 800a86a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a86c:	e00f      	b.n	800a88e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fa10 	bl	800ac96 <USBD_CtlError>
        err++;
 800a876:	7afb      	ldrb	r3, [r7, #11]
 800a878:	3301      	adds	r3, #1
 800a87a:	72fb      	strb	r3, [r7, #11]
      break;
 800a87c:	e007      	b.n	800a88e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa08 	bl	800ac96 <USBD_CtlError>
      err++;
 800a886:	7afb      	ldrb	r3, [r7, #11]
 800a888:	3301      	adds	r3, #1
 800a88a:	72fb      	strb	r3, [r7, #11]
      break;
 800a88c:	bf00      	nop
  }

  if (err != 0U)
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d11e      	bne.n	800a8d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	88db      	ldrh	r3, [r3, #6]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d016      	beq.n	800a8ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a89c:	893b      	ldrh	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00e      	beq.n	800a8c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	88da      	ldrh	r2, [r3, #6]
 800a8a6:	893b      	ldrh	r3, [r7, #8]
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	bf28      	it	cs
 800a8ac:	4613      	movcs	r3, r2
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a8b2:	893b      	ldrh	r3, [r7, #8]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fa5d 	bl	800ad78 <USBD_CtlSendData>
 800a8be:	e009      	b.n	800a8d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9e7 	bl	800ac96 <USBD_CtlError>
 800a8c8:	e004      	b.n	800a8d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 faae 	bl	800ae2c <USBD_CtlSendStatus>
 800a8d0:	e000      	b.n	800a8d4 <USBD_GetDescriptor+0x2cc>
    return;
 800a8d2:	bf00      	nop
  }
}
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop

0800a8dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	889b      	ldrh	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d131      	bne.n	800a952 <USBD_SetAddress+0x76>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	88db      	ldrh	r3, [r3, #6]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d12d      	bne.n	800a952 <USBD_SetAddress+0x76>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	885b      	ldrh	r3, [r3, #2]
 800a8fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a8fc:	d829      	bhi.n	800a952 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	885b      	ldrh	r3, [r3, #2]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a908:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b03      	cmp	r3, #3
 800a914:	d104      	bne.n	800a920 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f9bc 	bl	800ac96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91e:	e01d      	b.n	800a95c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7bfa      	ldrb	r2, [r7, #15]
 800a924:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a928:	7bfb      	ldrb	r3, [r7, #15]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 ffe5 	bl	800b8fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa7a 	bl	800ae2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2202      	movs	r2, #2
 800a942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a946:	e009      	b.n	800a95c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a950:	e004      	b.n	800a95c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f99e 	bl	800ac96 <USBD_CtlError>
  }
}
 800a95a:	bf00      	nop
 800a95c:	bf00      	nop
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	885b      	ldrh	r3, [r3, #2]
 800a976:	b2da      	uxtb	r2, r3
 800a978:	4b4e      	ldr	r3, [pc, #312]	; (800aab4 <USBD_SetConfig+0x150>)
 800a97a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a97c:	4b4d      	ldr	r3, [pc, #308]	; (800aab4 <USBD_SetConfig+0x150>)
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d905      	bls.n	800a990 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f985 	bl	800ac96 <USBD_CtlError>
    return USBD_FAIL;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e08c      	b.n	800aaaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d002      	beq.n	800a9a2 <USBD_SetConfig+0x3e>
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d029      	beq.n	800a9f4 <USBD_SetConfig+0x90>
 800a9a0:	e075      	b.n	800aa8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a9a2:	4b44      	ldr	r3, [pc, #272]	; (800aab4 <USBD_SetConfig+0x150>)
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d020      	beq.n	800a9ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a9aa:	4b42      	ldr	r3, [pc, #264]	; (800aab4 <USBD_SetConfig+0x150>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9b4:	4b3f      	ldr	r3, [pc, #252]	; (800aab4 <USBD_SetConfig+0x150>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fe ffe7 	bl	800998e <USBD_SetClassConfig>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d008      	beq.n	800a9dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f962 	bl	800ac96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9da:	e065      	b.n	800aaa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fa25 	bl	800ae2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a9ea:	e05d      	b.n	800aaa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fa1d 	bl	800ae2c <USBD_CtlSendStatus>
      break;
 800a9f2:	e059      	b.n	800aaa8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9f4:	4b2f      	ldr	r3, [pc, #188]	; (800aab4 <USBD_SetConfig+0x150>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d112      	bne.n	800aa22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa04:	4b2b      	ldr	r3, [pc, #172]	; (800aab4 <USBD_SetConfig+0x150>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa0e:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <USBD_SetConfig+0x150>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fe ffd6 	bl	80099c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa06 	bl	800ae2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa20:	e042      	b.n	800aaa8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <USBD_SetConfig+0x150>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d02a      	beq.n	800aa86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7fe ffc4 	bl	80099c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa3e:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <USBD_SetConfig+0x150>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa48:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <USBD_SetConfig+0x150>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7fe ff9d 	bl	800998e <USBD_SetClassConfig>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00f      	beq.n	800aa7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f918 	bl	800ac96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7fe ffa9 	bl	80099c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa7c:	e014      	b.n	800aaa8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f9d4 	bl	800ae2c <USBD_CtlSendStatus>
      break;
 800aa84:	e010      	b.n	800aaa8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f9d0 	bl	800ae2c <USBD_CtlSendStatus>
      break;
 800aa8c:	e00c      	b.n	800aaa8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f900 	bl	800ac96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <USBD_SetConfig+0x150>)
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7fe ff92 	bl	80099c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa6:	bf00      	nop
  }

  return ret;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000540 	.word	0x20000540

0800aab8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	88db      	ldrh	r3, [r3, #6]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d004      	beq.n	800aad4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f8e2 	bl	800ac96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aad2:	e023      	b.n	800ab1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	dc02      	bgt.n	800aae6 <USBD_GetConfig+0x2e>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dc03      	bgt.n	800aaec <USBD_GetConfig+0x34>
 800aae4:	e015      	b.n	800ab12 <USBD_GetConfig+0x5a>
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d00b      	beq.n	800ab02 <USBD_GetConfig+0x4a>
 800aaea:	e012      	b.n	800ab12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f93c 	bl	800ad78 <USBD_CtlSendData>
        break;
 800ab00:	e00c      	b.n	800ab1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3304      	adds	r3, #4
 800ab06:	2201      	movs	r2, #1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f934 	bl	800ad78 <USBD_CtlSendData>
        break;
 800ab10:	e004      	b.n	800ab1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f8be 	bl	800ac96 <USBD_CtlError>
        break;
 800ab1a:	bf00      	nop
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d81e      	bhi.n	800ab7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	88db      	ldrh	r3, [r3, #6]
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d004      	beq.n	800ab4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f8a5 	bl	800ac96 <USBD_CtlError>
        break;
 800ab4c:	e01a      	b.n	800ab84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f043 0202 	orr.w	r2, r3, #2
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	2202      	movs	r2, #2
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f900 	bl	800ad78 <USBD_CtlSendData>
      break;
 800ab78:	e004      	b.n	800ab84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f88a 	bl	800ac96 <USBD_CtlError>
      break;
 800ab82:	bf00      	nop
  }
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	885b      	ldrh	r3, [r3, #2]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d107      	bne.n	800abae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f940 	bl	800ae2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800abac:	e013      	b.n	800abd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	885b      	ldrh	r3, [r3, #2]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d10b      	bne.n	800abce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	889b      	ldrh	r3, [r3, #4]
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f930 	bl	800ae2c <USBD_CtlSendStatus>
}
 800abcc:	e003      	b.n	800abd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f860 	bl	800ac96 <USBD_CtlError>
}
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	3b01      	subs	r3, #1
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d80b      	bhi.n	800ac0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d10c      	bne.n	800ac18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f910 	bl	800ae2c <USBD_CtlSendStatus>
      }
      break;
 800ac0c:	e004      	b.n	800ac18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f840 	bl	800ac96 <USBD_CtlError>
      break;
 800ac16:	e000      	b.n	800ac1a <USBD_ClrFeature+0x3c>
      break;
 800ac18:	bf00      	nop
  }
}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	781a      	ldrb	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	781a      	ldrb	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff fa41 	bl	800a0d4 <SWAPBYTE>
 800ac52:	4603      	mov	r3, r0
 800ac54:	461a      	mov	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3301      	adds	r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff fa34 	bl	800a0d4 <SWAPBYTE>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3301      	adds	r3, #1
 800ac78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7ff fa27 	bl	800a0d4 <SWAPBYTE>
 800ac86:	4603      	mov	r3, r0
 800ac88:	461a      	mov	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	80da      	strh	r2, [r3, #6]
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aca0:	2180      	movs	r1, #128	; 0x80
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fdc0 	bl	800b828 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aca8:	2100      	movs	r1, #0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fdbc 	bl	800b828 <USBD_LL_StallEP>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d036      	beq.n	800ad3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800acd2:	6938      	ldr	r0, [r7, #16]
 800acd4:	f000 f836 	bl	800ad44 <USBD_GetLen>
 800acd8:	4603      	mov	r3, r0
 800acda:	3301      	adds	r3, #1
 800acdc:	b29b      	uxth	r3, r3
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	4413      	add	r3, r2
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	7812      	ldrb	r2, [r2, #0]
 800acf0:	701a      	strb	r2, [r3, #0]
  idx++;
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	3301      	adds	r3, #1
 800acf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	4413      	add	r3, r2
 800acfe:	2203      	movs	r2, #3
 800ad00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
 800ad04:	3301      	adds	r3, #1
 800ad06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad08:	e013      	b.n	800ad32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	4413      	add	r3, r2
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	7812      	ldrb	r2, [r2, #0]
 800ad14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	613b      	str	r3, [r7, #16]
    idx++;
 800ad1c:	7dfb      	ldrb	r3, [r7, #23]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	4413      	add	r3, r2
 800ad28:	2200      	movs	r2, #0
 800ad2a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e7      	bne.n	800ad0a <USBD_GetString+0x52>
 800ad3a:	e000      	b.n	800ad3e <USBD_GetString+0x86>
    return;
 800ad3c:	bf00      	nop
  }
}
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad54:	e005      	b.n	800ad62 <USBD_GetLen+0x1e>
  {
    len++;
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f5      	bne.n	800ad56 <USBD_GetLen+0x12>
  }

  return len;
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3714      	adds	r7, #20
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 fdcb 	bl	800b93a <USBD_LL_Transmit>

  return USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	2100      	movs	r1, #0
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 fdba 	bl	800b93a <USBD_LL_Transmit>

  return USBD_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2203      	movs	r2, #3
 800ade0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	2100      	movs	r1, #0
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 fdbe 	bl	800b97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 fdad 	bl	800b97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2204      	movs	r2, #4
 800ae38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	2200      	movs	r2, #0
 800ae40:	2100      	movs	r1, #0
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fd79 	bl	800b93a <USBD_LL_Transmit>

  return USBD_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2205      	movs	r2, #5
 800ae5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae62:	2300      	movs	r3, #0
 800ae64:	2200      	movs	r2, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fd87 	bl	800b97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	4912      	ldr	r1, [pc, #72]	; (800aec8 <MX_USB_DEVICE_Init+0x50>)
 800ae80:	4812      	ldr	r0, [pc, #72]	; (800aecc <MX_USB_DEVICE_Init+0x54>)
 800ae82:	f7fe fd07 	bl	8009894 <USBD_Init>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae8c:	f7f7 f9cd 	bl	800222a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae90:	490f      	ldr	r1, [pc, #60]	; (800aed0 <MX_USB_DEVICE_Init+0x58>)
 800ae92:	480e      	ldr	r0, [pc, #56]	; (800aecc <MX_USB_DEVICE_Init+0x54>)
 800ae94:	f7fe fd2e 	bl	80098f4 <USBD_RegisterClass>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae9e:	f7f7 f9c4 	bl	800222a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aea2:	490c      	ldr	r1, [pc, #48]	; (800aed4 <MX_USB_DEVICE_Init+0x5c>)
 800aea4:	4809      	ldr	r0, [pc, #36]	; (800aecc <MX_USB_DEVICE_Init+0x54>)
 800aea6:	f7fe fc1f 	bl	80096e8 <USBD_CDC_RegisterInterface>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aeb0:	f7f7 f9bb 	bl	800222a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aeb4:	4805      	ldr	r0, [pc, #20]	; (800aecc <MX_USB_DEVICE_Init+0x54>)
 800aeb6:	f7fe fd53 	bl	8009960 <USBD_Start>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aec0:	f7f7 f9b3 	bl	800222a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aec4:	bf00      	nop
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	200000b8 	.word	0x200000b8
 800aecc:	20000544 	.word	0x20000544
 800aed0:	20000020 	.word	0x20000020
 800aed4:	200000a4 	.word	0x200000a4

0800aed8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aedc:	2200      	movs	r2, #0
 800aede:	4905      	ldr	r1, [pc, #20]	; (800aef4 <CDC_Init_FS+0x1c>)
 800aee0:	4805      	ldr	r0, [pc, #20]	; (800aef8 <CDC_Init_FS+0x20>)
 800aee2:	f7fe fc1b 	bl	800971c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aee6:	4905      	ldr	r1, [pc, #20]	; (800aefc <CDC_Init_FS+0x24>)
 800aee8:	4803      	ldr	r0, [pc, #12]	; (800aef8 <CDC_Init_FS+0x20>)
 800aeea:	f7fe fc39 	bl	8009760 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aeee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20000c0c 	.word	0x20000c0c
 800aef8:	20000544 	.word	0x20000544
 800aefc:	20000824 	.word	0x20000824

0800af00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af06:	4618      	mov	r0, r3
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
 800af1c:	4613      	mov	r3, r2
 800af1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b23      	cmp	r3, #35	; 0x23
 800af24:	d84a      	bhi.n	800afbc <CDC_Control_FS+0xac>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <CDC_Control_FS+0x1c>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800afbd 	.word	0x0800afbd
 800af30:	0800afbd 	.word	0x0800afbd
 800af34:	0800afbd 	.word	0x0800afbd
 800af38:	0800afbd 	.word	0x0800afbd
 800af3c:	0800afbd 	.word	0x0800afbd
 800af40:	0800afbd 	.word	0x0800afbd
 800af44:	0800afbd 	.word	0x0800afbd
 800af48:	0800afbd 	.word	0x0800afbd
 800af4c:	0800afbd 	.word	0x0800afbd
 800af50:	0800afbd 	.word	0x0800afbd
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800afbd 	.word	0x0800afbd
 800af5c:	0800afbd 	.word	0x0800afbd
 800af60:	0800afbd 	.word	0x0800afbd
 800af64:	0800afbd 	.word	0x0800afbd
 800af68:	0800afbd 	.word	0x0800afbd
 800af6c:	0800afbd 	.word	0x0800afbd
 800af70:	0800afbd 	.word	0x0800afbd
 800af74:	0800afbd 	.word	0x0800afbd
 800af78:	0800afbd 	.word	0x0800afbd
 800af7c:	0800afbd 	.word	0x0800afbd
 800af80:	0800afbd 	.word	0x0800afbd
 800af84:	0800afbd 	.word	0x0800afbd
 800af88:	0800afbd 	.word	0x0800afbd
 800af8c:	0800afbd 	.word	0x0800afbd
 800af90:	0800afbd 	.word	0x0800afbd
 800af94:	0800afbd 	.word	0x0800afbd
 800af98:	0800afbd 	.word	0x0800afbd
 800af9c:	0800afbd 	.word	0x0800afbd
 800afa0:	0800afbd 	.word	0x0800afbd
 800afa4:	0800afbd 	.word	0x0800afbd
 800afa8:	0800afbd 	.word	0x0800afbd
 800afac:	0800afbd 	.word	0x0800afbd
 800afb0:	0800afbd 	.word	0x0800afbd
 800afb4:	0800afbd 	.word	0x0800afbd
 800afb8:	0800afbd 	.word	0x0800afbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800afbc:	bf00      	nop
  }

  return (USBD_OK);
 800afbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	0000      	movs	r0, r0
	...

0800afd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afd0:	b5b0      	push	{r4, r5, r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	4870      	ldr	r0, [pc, #448]	; (800b1a0 <CDC_Receive_FS+0x1d0>)
 800afde:	f7fe fbbf 	bl	8009760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800afe2:	486f      	ldr	r0, [pc, #444]	; (800b1a0 <CDC_Receive_FS+0x1d0>)
 800afe4:	f7fe fc20 	bl	8009828 <USBD_CDC_ReceivePacket>

  if(*Buf == '\r')
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	2b0d      	cmp	r3, #13
 800afee:	f040 808f 	bne.w	800b110 <CDC_Receive_FS+0x140>
   {
 	  buffer[count++] = '\r';
 800aff2:	4b6c      	ldr	r3, [pc, #432]	; (800b1a4 <CDC_Receive_FS+0x1d4>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	b2d1      	uxtb	r1, r2
 800affa:	4a6a      	ldr	r2, [pc, #424]	; (800b1a4 <CDC_Receive_FS+0x1d4>)
 800affc:	7011      	strb	r1, [r2, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	4b69      	ldr	r3, [pc, #420]	; (800b1a8 <CDC_Receive_FS+0x1d8>)
 800b002:	210d      	movs	r1, #13
 800b004:	5499      	strb	r1, [r3, r2]

 	  /*
 	   * Write your logic here.
 	   */
 	  Data1 = -Data;
 800b006:	4b69      	ldr	r3, [pc, #420]	; (800b1ac <CDC_Receive_FS+0x1dc>)
 800b008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b00c:	425b      	negs	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	4b67      	ldr	r3, [pc, #412]	; (800b1b0 <CDC_Receive_FS+0x1e0>)
 800b012:	601a      	str	r2, [r3, #0]

	if(Data >= 0)
 800b014:	4b65      	ldr	r3, [pc, #404]	; (800b1ac <CDC_Receive_FS+0x1dc>)
 800b016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	db36      	blt.n	800b08c <CDC_Receive_FS+0xbc>
	{
		HAL_GPIO_WritePin(GPIOA, bay_dir_Pin, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 800b01e:	2200      	movs	r2, #0
 800b020:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b024:	4863      	ldr	r0, [pc, #396]	; (800b1b4 <CDC_Receive_FS+0x1e4>)
 800b026:	f7f9 f961 	bl	80042ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, winch_dir_Pin, GPIO_PIN_RESET);
 800b02a:	2200      	movs	r2, #0
 800b02c:	2120      	movs	r1, #32
 800b02e:	4862      	ldr	r0, [pc, #392]	; (800b1b8 <CDC_Receive_FS+0x1e8>)
 800b030:	f7f9 f95c 	bl	80042ec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(Data)/100);
 800b034:	4b61      	ldr	r3, [pc, #388]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f5 fa6b 	bl	8000514 <__aeabi_ui2d>
 800b03e:	4604      	mov	r4, r0
 800b040:	460d      	mov	r5, r1
 800b042:	4b5a      	ldr	r3, [pc, #360]	; (800b1ac <CDC_Receive_FS+0x1dc>)
 800b044:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f5 fa73 	bl	8000534 <__aeabi_i2d>
 800b04e:	a352      	add	r3, pc, #328	; (adr r3, 800b198 <CDC_Receive_FS+0x1c8>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	f7f5 fad8 	bl	8000608 <__aeabi_dmul>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 fad2 	bl	8000608 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4610      	mov	r0, r2
 800b06a:	4619      	mov	r1, r3
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	4b53      	ldr	r3, [pc, #332]	; (800b1c0 <CDC_Receive_FS+0x1f0>)
 800b072:	f7f5 fbf3 	bl	800085c <__aeabi_ddiv>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4950      	ldr	r1, [pc, #320]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b07c:	680c      	ldr	r4, [r1, #0]
 800b07e:	4610      	mov	r0, r2
 800b080:	4619      	mov	r1, r3
 800b082:	f7f5 fd99 	bl	8000bb8 <__aeabi_d2uiz>
 800b086:	4603      	mov	r3, r0
 800b088:	6363      	str	r3, [r4, #52]	; 0x34
 800b08a:	e036      	b.n	800b0fa <CDC_Receive_FS+0x12a>

	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 800b08c:	2201      	movs	r2, #1
 800b08e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b092:	4848      	ldr	r0, [pc, #288]	; (800b1b4 <CDC_Receive_FS+0x1e4>)
 800b094:	f7f9 f92a 	bl	80042ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800b098:	2201      	movs	r2, #1
 800b09a:	2101      	movs	r1, #1
 800b09c:	4846      	ldr	r0, [pc, #280]	; (800b1b8 <CDC_Receive_FS+0x1e8>)
 800b09e:	f7f9 f925 	bl	80042ec <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(-Data)/100);
 800b0a2:	4b46      	ldr	r3, [pc, #280]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f5 fa34 	bl	8000514 <__aeabi_ui2d>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	460d      	mov	r5, r1
 800b0b0:	4b3e      	ldr	r3, [pc, #248]	; (800b1ac <CDC_Receive_FS+0x1dc>)
 800b0b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0b6:	425b      	negs	r3, r3
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7f5 fa3b 	bl	8000534 <__aeabi_i2d>
 800b0be:	a336      	add	r3, pc, #216	; (adr r3, 800b198 <CDC_Receive_FS+0x1c8>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 faa0 	bl	8000608 <__aeabi_dmul>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 fa9a 	bl	8000608 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4619      	mov	r1, r3
 800b0dc:	f04f 0200 	mov.w	r2, #0
 800b0e0:	4b37      	ldr	r3, [pc, #220]	; (800b1c0 <CDC_Receive_FS+0x1f0>)
 800b0e2:	f7f5 fbbb 	bl	800085c <__aeabi_ddiv>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4934      	ldr	r1, [pc, #208]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b0ec:	680c      	ldr	r4, [r1, #0]
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	f7f5 fd61 	bl	8000bb8 <__aeabi_d2uiz>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6363      	str	r3, [r4, #52]	; 0x34

	}

 	  CDC_Transmit_FS(buffer, count);
 800b0fa:	4b2a      	ldr	r3, [pc, #168]	; (800b1a4 <CDC_Receive_FS+0x1d4>)
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	4619      	mov	r1, r3
 800b102:	4829      	ldr	r0, [pc, #164]	; (800b1a8 <CDC_Receive_FS+0x1d8>)
 800b104:	f000 f860 	bl	800b1c8 <CDC_Transmit_FS>
 	  count = 0;
 800b108:	4b26      	ldr	r3, [pc, #152]	; (800b1a4 <CDC_Receive_FS+0x1d4>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	e03e      	b.n	800b18e <CDC_Receive_FS+0x1be>

   }

  else if(*Buf == ' ')
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b20      	cmp	r3, #32
 800b116:	d12f      	bne.n	800b178 <CDC_Receive_FS+0x1a8>
	{

		//HAL_UART_Transmit(&huart2, (uint8_t *)E_Stop, strlen(E_Stop), HAL_MAX_DELAY);  //send to terminal
		CDC_Transmit_FS((uint8_t *)E_Stop, strlen(E_Stop));
 800b118:	4b2a      	ldr	r3, [pc, #168]	; (800b1c4 <CDC_Receive_FS+0x1f4>)
 800b11a:	681c      	ldr	r4, [r3, #0]
 800b11c:	4b29      	ldr	r3, [pc, #164]	; (800b1c4 <CDC_Receive_FS+0x1f4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f7f5 f85d 	bl	80001e0 <strlen>
 800b126:	4603      	mov	r3, r0
 800b128:	b29b      	uxth	r3, r3
 800b12a:	4619      	mov	r1, r3
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f84b 	bl	800b1c8 <CDC_Transmit_FS>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 800b132:	4b22      	ldr	r3, [pc, #136]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4618      	mov	r0, r3
 800b138:	f7f5 f9ec 	bl	8000514 <__aeabi_ui2d>
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	f04f 0300 	mov.w	r3, #0
 800b144:	f7f5 fa60 	bl	8000608 <__aeabi_dmul>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4610      	mov	r0, r2
 800b14e:	4619      	mov	r1, r3
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <CDC_Receive_FS+0x1f0>)
 800b156:	f7f5 fb81 	bl	800085c <__aeabi_ddiv>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4917      	ldr	r1, [pc, #92]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b160:	680c      	ldr	r4, [r1, #0]
 800b162:	4610      	mov	r0, r2
 800b164:	4619      	mov	r1, r3
 800b166:	f7f5 fd27 	bl	8000bb8 <__aeabi_d2uiz>
 800b16a:	4603      	mov	r3, r0
 800b16c:	6363      	str	r3, [r4, #52]	; 0x34
		//HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800b16e:	2100      	movs	r1, #0
 800b170:	4812      	ldr	r0, [pc, #72]	; (800b1bc <CDC_Receive_FS+0x1ec>)
 800b172:	f7fb f8a5 	bl	80062c0 <HAL_TIM_PWM_Stop>
 800b176:	e00a      	b.n	800b18e <CDC_Receive_FS+0x1be>
	}

   else
   {
 	  buffer[count++] = *Buf;
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <CDC_Receive_FS+0x1d4>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	b2d1      	uxtb	r1, r2
 800b180:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <CDC_Receive_FS+0x1d4>)
 800b182:	7011      	strb	r1, [r2, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7819      	ldrb	r1, [r3, #0]
 800b18a:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <CDC_Receive_FS+0x1d8>)
 800b18c:	5499      	strb	r1, [r3, r2]
   }

  return (USBD_OK);
 800b18e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bdb0      	pop	{r4, r5, r7, pc}
 800b198:	190cb39b 	.word	0x190cb39b
 800b19c:	3fd91919 	.word	0x3fd91919
 800b1a0:	20000544 	.word	0x20000544
 800b1a4:	20000820 	.word	0x20000820
 800b1a8:	200004e8 	.word	0x200004e8
 800b1ac:	200004ee 	.word	0x200004ee
 800b1b0:	200004f0 	.word	0x200004f0
 800b1b4:	40020000 	.word	0x40020000
 800b1b8:	40020800 	.word	0x40020800
 800b1bc:	200003e4 	.word	0x200003e4
 800b1c0:	40590000 	.word	0x40590000
 800b1c4:	200000a0 	.word	0x200000a0

0800b1c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1d8:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <CDC_Transmit_FS+0x48>)
 800b1da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e00b      	b.n	800b206 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1ee:	887b      	ldrh	r3, [r7, #2]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	4806      	ldr	r0, [pc, #24]	; (800b210 <CDC_Transmit_FS+0x48>)
 800b1f6:	f7fe fa91 	bl	800971c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b1fa:	4805      	ldr	r0, [pc, #20]	; (800b210 <CDC_Transmit_FS+0x48>)
 800b1fc:	f7fe face 	bl	800979c <USBD_CDC_TransmitPacket>
 800b200:	4603      	mov	r3, r0
 800b202:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b204:	7bfb      	ldrb	r3, [r7, #15]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	20000544 	.word	0x20000544

0800b214 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b214:	b480      	push	{r7}
 800b216:	b087      	sub	sp, #28
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	371c      	adds	r7, #28
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
	...

0800b238 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4603      	mov	r3, r0
 800b240:	6039      	str	r1, [r7, #0]
 800b242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2212      	movs	r2, #18
 800b248:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b24a:	4b03      	ldr	r3, [pc, #12]	; (800b258 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	200000d4 	.word	0x200000d4

0800b25c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	6039      	str	r1, [r7, #0]
 800b266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	2204      	movs	r2, #4
 800b26c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b26e:	4b03      	ldr	r3, [pc, #12]	; (800b27c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b270:	4618      	mov	r0, r3
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	200000e8 	.word	0x200000e8

0800b280 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	6039      	str	r1, [r7, #0]
 800b28a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d105      	bne.n	800b29e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	4907      	ldr	r1, [pc, #28]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b296:	4808      	ldr	r0, [pc, #32]	; (800b2b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b298:	f7ff fd0e 	bl	800acb8 <USBD_GetString>
 800b29c:	e004      	b.n	800b2a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	4904      	ldr	r1, [pc, #16]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2a2:	4805      	ldr	r0, [pc, #20]	; (800b2b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2a4:	f7ff fd08 	bl	800acb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2a8:	4b02      	ldr	r3, [pc, #8]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000ff4 	.word	0x20000ff4
 800b2b8:	0800e984 	.word	0x0800e984

0800b2bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6039      	str	r1, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	4904      	ldr	r1, [pc, #16]	; (800b2dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2cc:	4804      	ldr	r0, [pc, #16]	; (800b2e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2ce:	f7ff fcf3 	bl	800acb8 <USBD_GetString>
  return USBD_StrDesc;
 800b2d2:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	20000ff4 	.word	0x20000ff4
 800b2e0:	0800e9a0 	.word	0x0800e9a0

0800b2e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	221a      	movs	r2, #26
 800b2f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2f6:	f000 f843 	bl	800b380 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2fa:	4b02      	ldr	r3, [pc, #8]	; (800b304 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	200000ec 	.word	0x200000ec

0800b308 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b314:	79fb      	ldrb	r3, [r7, #7]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	4907      	ldr	r1, [pc, #28]	; (800b33c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b31e:	4808      	ldr	r0, [pc, #32]	; (800b340 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b320:	f7ff fcca 	bl	800acb8 <USBD_GetString>
 800b324:	e004      	b.n	800b330 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	4904      	ldr	r1, [pc, #16]	; (800b33c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b32a:	4805      	ldr	r0, [pc, #20]	; (800b340 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b32c:	f7ff fcc4 	bl	800acb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b330:	4b02      	ldr	r3, [pc, #8]	; (800b33c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	20000ff4 	.word	0x20000ff4
 800b340:	0800e9b4 	.word	0x0800e9b4

0800b344 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	6039      	str	r1, [r7, #0]
 800b34e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d105      	bne.n	800b362 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	4907      	ldr	r1, [pc, #28]	; (800b378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b35a:	4808      	ldr	r0, [pc, #32]	; (800b37c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b35c:	f7ff fcac 	bl	800acb8 <USBD_GetString>
 800b360:	e004      	b.n	800b36c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	4904      	ldr	r1, [pc, #16]	; (800b378 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b366:	4805      	ldr	r0, [pc, #20]	; (800b37c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b368:	f7ff fca6 	bl	800acb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	20000ff4 	.word	0x20000ff4
 800b37c:	0800e9c0 	.word	0x0800e9c0

0800b380 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <Get_SerialNum+0x44>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b38c:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <Get_SerialNum+0x48>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b392:	4b0e      	ldr	r3, [pc, #56]	; (800b3cc <Get_SerialNum+0x4c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4413      	add	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d009      	beq.n	800b3ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3a6:	2208      	movs	r2, #8
 800b3a8:	4909      	ldr	r1, [pc, #36]	; (800b3d0 <Get_SerialNum+0x50>)
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 f814 	bl	800b3d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	4908      	ldr	r1, [pc, #32]	; (800b3d4 <Get_SerialNum+0x54>)
 800b3b4:	68b8      	ldr	r0, [r7, #8]
 800b3b6:	f000 f80f 	bl	800b3d8 <IntToUnicode>
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	1fff7a10 	.word	0x1fff7a10
 800b3c8:	1fff7a14 	.word	0x1fff7a14
 800b3cc:	1fff7a18 	.word	0x1fff7a18
 800b3d0:	200000ee 	.word	0x200000ee
 800b3d4:	200000fe 	.word	0x200000fe

0800b3d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	75fb      	strb	r3, [r7, #23]
 800b3ee:	e027      	b.n	800b440 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	0f1b      	lsrs	r3, r3, #28
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	d80b      	bhi.n	800b410 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	0f1b      	lsrs	r3, r3, #28
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	4619      	mov	r1, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	440b      	add	r3, r1
 800b408:	3230      	adds	r2, #48	; 0x30
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	e00a      	b.n	800b426 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	0f1b      	lsrs	r3, r3, #28
 800b414:	b2da      	uxtb	r2, r3
 800b416:	7dfb      	ldrb	r3, [r7, #23]
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	4619      	mov	r1, r3
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	440b      	add	r3, r1
 800b420:	3237      	adds	r2, #55	; 0x37
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	011b      	lsls	r3, r3, #4
 800b42a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	3301      	adds	r3, #1
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	3301      	adds	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]
 800b440:	7dfa      	ldrb	r2, [r7, #23]
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	429a      	cmp	r2, r3
 800b446:	d3d3      	bcc.n	800b3f0 <IntToUnicode+0x18>
  }
}
 800b448:	bf00      	nop
 800b44a:	bf00      	nop
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	; 0x28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b460:	f107 0314 	add.w	r3, r7, #20
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	605a      	str	r2, [r3, #4]
 800b46a:	609a      	str	r2, [r3, #8]
 800b46c:	60da      	str	r2, [r3, #12]
 800b46e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b478:	d13a      	bne.n	800b4f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b47a:	2300      	movs	r3, #0
 800b47c:	613b      	str	r3, [r7, #16]
 800b47e:	4b1e      	ldr	r3, [pc, #120]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b482:	4a1d      	ldr	r2, [pc, #116]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b484:	f043 0301 	orr.w	r3, r3, #1
 800b488:	6313      	str	r3, [r2, #48]	; 0x30
 800b48a:	4b1b      	ldr	r3, [pc, #108]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	613b      	str	r3, [r7, #16]
 800b494:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b496:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b49a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b49c:	2302      	movs	r3, #2
 800b49e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4a8:	230a      	movs	r3, #10
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4ac:	f107 0314 	add.w	r3, r7, #20
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4812      	ldr	r0, [pc, #72]	; (800b4fc <HAL_PCD_MspInit+0xa4>)
 800b4b4:	f7f8 fcb2 	bl	8003e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b4b8:	4b0f      	ldr	r3, [pc, #60]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4bc:	4a0e      	ldr	r2, [pc, #56]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c2:	6353      	str	r3, [r2, #52]	; 0x34
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60fb      	str	r3, [r7, #12]
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4cc:	4a0a      	ldr	r2, [pc, #40]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b4ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b4d2:	6453      	str	r3, [r2, #68]	; 0x44
 800b4d4:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <HAL_PCD_MspInit+0xa0>)
 800b4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	2043      	movs	r0, #67	; 0x43
 800b4e6:	f7f8 f8ec 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4ea:	2043      	movs	r0, #67	; 0x43
 800b4ec:	f7f8 f905 	bl	80036fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b4f0:	bf00      	nop
 800b4f2:	3728      	adds	r7, #40	; 0x28
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	40023800 	.word	0x40023800
 800b4fc:	40020000 	.word	0x40020000

0800b500 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7fe fa6f 	bl	80099fa <USBD_LL_SetupStage>
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b536:	78fa      	ldrb	r2, [r7, #3]
 800b538:	6879      	ldr	r1, [r7, #4]
 800b53a:	4613      	mov	r3, r2
 800b53c:	00db      	lsls	r3, r3, #3
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	440b      	add	r3, r1
 800b544:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	4619      	mov	r1, r3
 800b54e:	f7fe faa9 	bl	8009aa4 <USBD_LL_DataOutStage>
}
 800b552:	bf00      	nop
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b082      	sub	sp, #8
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	460b      	mov	r3, r1
 800b564:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	4613      	mov	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	334c      	adds	r3, #76	; 0x4c
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	4619      	mov	r1, r3
 800b582:	f7fe fb42 	bl	8009c0a <USBD_LL_DataInStage>
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe fc76 	bl	8009e8e <USBD_LL_SOF>
}
 800b5a2:	bf00      	nop
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d001      	beq.n	800b5c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5be:	f7f6 fe34 	bl	800222a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5c8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fe fc20 	bl	8009e12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe fbc8 	bl	8009d6e <USBD_LL_Reset>
}
 800b5de:	bf00      	nop
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe fc1b 	bl	8009e32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d005      	beq.n	800b628 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b61c:	4b04      	ldr	r3, [pc, #16]	; (800b630 <HAL_PCD_SuspendCallback+0x48>)
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	4a03      	ldr	r2, [pc, #12]	; (800b630 <HAL_PCD_SuspendCallback+0x48>)
 800b622:	f043 0306 	orr.w	r3, r3, #6
 800b626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	e000ed00 	.word	0xe000ed00

0800b634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe fc0b 	bl	8009e5e <USBD_LL_Resume>
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe fc63 	bl	8009f32 <USBD_LL_IsoOUTIncomplete>
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fc1f 	bl	8009ece <USBD_LL_IsoINIncomplete>
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fc75 	bl	8009f96 <USBD_LL_DevConnected>
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fc72 	bl	8009fac <USBD_LL_DevDisconnected>
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d13c      	bne.n	800b75a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b6e0:	4a20      	ldr	r2, [pc, #128]	; (800b764 <USBD_LL_Init+0x94>)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a1e      	ldr	r2, [pc, #120]	; (800b764 <USBD_LL_Init+0x94>)
 800b6ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b6f0:	4b1c      	ldr	r3, [pc, #112]	; (800b764 <USBD_LL_Init+0x94>)
 800b6f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b6f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b6f8:	4b1a      	ldr	r3, [pc, #104]	; (800b764 <USBD_LL_Init+0x94>)
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b6fe:	4b19      	ldr	r3, [pc, #100]	; (800b764 <USBD_LL_Init+0x94>)
 800b700:	2202      	movs	r2, #2
 800b702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b704:	4b17      	ldr	r3, [pc, #92]	; (800b764 <USBD_LL_Init+0x94>)
 800b706:	2200      	movs	r2, #0
 800b708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b70a:	4b16      	ldr	r3, [pc, #88]	; (800b764 <USBD_LL_Init+0x94>)
 800b70c:	2202      	movs	r2, #2
 800b70e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b710:	4b14      	ldr	r3, [pc, #80]	; (800b764 <USBD_LL_Init+0x94>)
 800b712:	2200      	movs	r2, #0
 800b714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b716:	4b13      	ldr	r3, [pc, #76]	; (800b764 <USBD_LL_Init+0x94>)
 800b718:	2200      	movs	r2, #0
 800b71a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b71c:	4b11      	ldr	r3, [pc, #68]	; (800b764 <USBD_LL_Init+0x94>)
 800b71e:	2200      	movs	r2, #0
 800b720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b722:	4b10      	ldr	r3, [pc, #64]	; (800b764 <USBD_LL_Init+0x94>)
 800b724:	2200      	movs	r2, #0
 800b726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b728:	4b0e      	ldr	r3, [pc, #56]	; (800b764 <USBD_LL_Init+0x94>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b72e:	480d      	ldr	r0, [pc, #52]	; (800b764 <USBD_LL_Init+0x94>)
 800b730:	f7f8 fe19 	bl	8004366 <HAL_PCD_Init>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b73a:	f7f6 fd76 	bl	800222a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b73e:	2180      	movs	r1, #128	; 0x80
 800b740:	4808      	ldr	r0, [pc, #32]	; (800b764 <USBD_LL_Init+0x94>)
 800b742:	f7fa f870 	bl	8005826 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b746:	2240      	movs	r2, #64	; 0x40
 800b748:	2100      	movs	r1, #0
 800b74a:	4806      	ldr	r0, [pc, #24]	; (800b764 <USBD_LL_Init+0x94>)
 800b74c:	f7fa f824 	bl	8005798 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b750:	2280      	movs	r2, #128	; 0x80
 800b752:	2101      	movs	r1, #1
 800b754:	4803      	ldr	r0, [pc, #12]	; (800b764 <USBD_LL_Init+0x94>)
 800b756:	f7fa f81f 	bl	8005798 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	200011f4 	.word	0x200011f4

0800b768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b77e:	4618      	mov	r0, r3
 800b780:	f7f8 ff0e 	bl	80045a0 <HAL_PCD_Start>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 f942 	bl	800ba14 <USBD_Get_USB_Status>
 800b790:	4603      	mov	r3, r0
 800b792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b794:	7bbb      	ldrb	r3, [r7, #14]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	70fb      	strb	r3, [r7, #3]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70bb      	strb	r3, [r7, #2]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7c6:	78bb      	ldrb	r3, [r7, #2]
 800b7c8:	883a      	ldrh	r2, [r7, #0]
 800b7ca:	78f9      	ldrb	r1, [r7, #3]
 800b7cc:	f7f9 fbdf 	bl	8004f8e <HAL_PCD_EP_Open>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f91c 	bl	800ba14 <USBD_Get_USB_Status>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b804:	78fa      	ldrb	r2, [r7, #3]
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f7f9 fc28 	bl	800505e <HAL_PCD_EP_Close>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	4618      	mov	r0, r3
 800b816:	f000 f8fd 	bl	800ba14 <USBD_Get_USB_Status>
 800b81a:	4603      	mov	r3, r0
 800b81c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b842:	78fa      	ldrb	r2, [r7, #3]
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7f9 fd00 	bl	800524c <HAL_PCD_EP_SetStall>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	4618      	mov	r0, r3
 800b854:	f000 f8de 	bl	800ba14 <USBD_Get_USB_Status>
 800b858:	4603      	mov	r3, r0
 800b85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b880:	78fa      	ldrb	r2, [r7, #3]
 800b882:	4611      	mov	r1, r2
 800b884:	4618      	mov	r0, r3
 800b886:	f7f9 fd45 	bl	8005314 <HAL_PCD_EP_ClrStall>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	4618      	mov	r0, r3
 800b892:	f000 f8bf 	bl	800ba14 <USBD_Get_USB_Status>
 800b896:	4603      	mov	r3, r0
 800b898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	da0b      	bge.n	800b8d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8c6:	68f9      	ldr	r1, [r7, #12]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	00db      	lsls	r3, r3, #3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	440b      	add	r3, r1
 800b8d2:	333e      	adds	r3, #62	; 0x3e
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	e00b      	b.n	800b8f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	00db      	lsls	r3, r3, #3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b8ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b916:	78fa      	ldrb	r2, [r7, #3]
 800b918:	4611      	mov	r1, r2
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7f9 fb12 	bl	8004f44 <HAL_PCD_SetAddress>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b924:	7bfb      	ldrb	r3, [r7, #15]
 800b926:	4618      	mov	r0, r3
 800b928:	f000 f874 	bl	800ba14 <USBD_Get_USB_Status>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b930:	7bbb      	ldrb	r3, [r7, #14]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b086      	sub	sp, #24
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
 800b946:	460b      	mov	r3, r1
 800b948:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b958:	7af9      	ldrb	r1, [r7, #11]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	f7f9 fc2b 	bl	80051b8 <HAL_PCD_EP_Transmit>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	4618      	mov	r0, r3
 800b96a:	f000 f853 	bl	800ba14 <USBD_Get_USB_Status>
 800b96e:	4603      	mov	r3, r0
 800b970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b972:	7dbb      	ldrb	r3, [r7, #22]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	607a      	str	r2, [r7, #4]
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	460b      	mov	r3, r1
 800b98a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b99a:	7af9      	ldrb	r1, [r7, #11]
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	f7f9 fba7 	bl	80050f2 <HAL_PCD_EP_Receive>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 f832 	bl	800ba14 <USBD_Get_USB_Status>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9d0:	78fa      	ldrb	r2, [r7, #3]
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f9 fbd7 	bl	8005188 <HAL_PCD_EP_GetRxCount>
 800b9da:	4603      	mov	r3, r0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9ec:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <USBD_static_malloc+0x18>)
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	20001700 	.word	0x20001700

0800ba00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]

}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	2b03      	cmp	r3, #3
 800ba26:	d817      	bhi.n	800ba58 <USBD_Get_USB_Status+0x44>
 800ba28:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <USBD_Get_USB_Status+0x1c>)
 800ba2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2e:	bf00      	nop
 800ba30:	0800ba41 	.word	0x0800ba41
 800ba34:	0800ba47 	.word	0x0800ba47
 800ba38:	0800ba4d 	.word	0x0800ba4d
 800ba3c:	0800ba53 	.word	0x0800ba53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	e00b      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba46:	2303      	movs	r3, #3
 800ba48:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4a:	e008      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba50:	e005      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba52:	2303      	movs	r3, #3
 800ba54:	73fb      	strb	r3, [r7, #15]
    break;
 800ba56:	e002      	b.n	800ba5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba5c:	bf00      	nop
  }
  return usb_status;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <__errno>:
 800ba6c:	4b01      	ldr	r3, [pc, #4]	; (800ba74 <__errno+0x8>)
 800ba6e:	6818      	ldr	r0, [r3, #0]
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000108 	.word	0x20000108

0800ba78 <__libc_init_array>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	4d0d      	ldr	r5, [pc, #52]	; (800bab0 <__libc_init_array+0x38>)
 800ba7c:	4c0d      	ldr	r4, [pc, #52]	; (800bab4 <__libc_init_array+0x3c>)
 800ba7e:	1b64      	subs	r4, r4, r5
 800ba80:	10a4      	asrs	r4, r4, #2
 800ba82:	2600      	movs	r6, #0
 800ba84:	42a6      	cmp	r6, r4
 800ba86:	d109      	bne.n	800ba9c <__libc_init_array+0x24>
 800ba88:	4d0b      	ldr	r5, [pc, #44]	; (800bab8 <__libc_init_array+0x40>)
 800ba8a:	4c0c      	ldr	r4, [pc, #48]	; (800babc <__libc_init_array+0x44>)
 800ba8c:	f002 ff04 	bl	800e898 <_init>
 800ba90:	1b64      	subs	r4, r4, r5
 800ba92:	10a4      	asrs	r4, r4, #2
 800ba94:	2600      	movs	r6, #0
 800ba96:	42a6      	cmp	r6, r4
 800ba98:	d105      	bne.n	800baa6 <__libc_init_array+0x2e>
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa0:	4798      	blx	r3
 800baa2:	3601      	adds	r6, #1
 800baa4:	e7ee      	b.n	800ba84 <__libc_init_array+0xc>
 800baa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baaa:	4798      	blx	r3
 800baac:	3601      	adds	r6, #1
 800baae:	e7f2      	b.n	800ba96 <__libc_init_array+0x1e>
 800bab0:	0800edcc 	.word	0x0800edcc
 800bab4:	0800edcc 	.word	0x0800edcc
 800bab8:	0800edcc 	.word	0x0800edcc
 800babc:	0800edd0 	.word	0x0800edd0

0800bac0 <memset>:
 800bac0:	4402      	add	r2, r0
 800bac2:	4603      	mov	r3, r0
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d100      	bne.n	800baca <memset+0xa>
 800bac8:	4770      	bx	lr
 800baca:	f803 1b01 	strb.w	r1, [r3], #1
 800bace:	e7f9      	b.n	800bac4 <memset+0x4>

0800bad0 <__cvt>:
 800bad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	ec55 4b10 	vmov	r4, r5, d0
 800bad8:	2d00      	cmp	r5, #0
 800bada:	460e      	mov	r6, r1
 800badc:	4619      	mov	r1, r3
 800bade:	462b      	mov	r3, r5
 800bae0:	bfbb      	ittet	lt
 800bae2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bae6:	461d      	movlt	r5, r3
 800bae8:	2300      	movge	r3, #0
 800baea:	232d      	movlt	r3, #45	; 0x2d
 800baec:	700b      	strb	r3, [r1, #0]
 800baee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800baf4:	4691      	mov	r9, r2
 800baf6:	f023 0820 	bic.w	r8, r3, #32
 800bafa:	bfbc      	itt	lt
 800bafc:	4622      	movlt	r2, r4
 800bafe:	4614      	movlt	r4, r2
 800bb00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb04:	d005      	beq.n	800bb12 <__cvt+0x42>
 800bb06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb0a:	d100      	bne.n	800bb0e <__cvt+0x3e>
 800bb0c:	3601      	adds	r6, #1
 800bb0e:	2102      	movs	r1, #2
 800bb10:	e000      	b.n	800bb14 <__cvt+0x44>
 800bb12:	2103      	movs	r1, #3
 800bb14:	ab03      	add	r3, sp, #12
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	ab02      	add	r3, sp, #8
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	ec45 4b10 	vmov	d0, r4, r5
 800bb20:	4653      	mov	r3, sl
 800bb22:	4632      	mov	r2, r6
 800bb24:	f000 fcec 	bl	800c500 <_dtoa_r>
 800bb28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	d102      	bne.n	800bb36 <__cvt+0x66>
 800bb30:	f019 0f01 	tst.w	r9, #1
 800bb34:	d022      	beq.n	800bb7c <__cvt+0xac>
 800bb36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb3a:	eb07 0906 	add.w	r9, r7, r6
 800bb3e:	d110      	bne.n	800bb62 <__cvt+0x92>
 800bb40:	783b      	ldrb	r3, [r7, #0]
 800bb42:	2b30      	cmp	r3, #48	; 0x30
 800bb44:	d10a      	bne.n	800bb5c <__cvt+0x8c>
 800bb46:	2200      	movs	r2, #0
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f7f4 ffc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb52:	b918      	cbnz	r0, 800bb5c <__cvt+0x8c>
 800bb54:	f1c6 0601 	rsb	r6, r6, #1
 800bb58:	f8ca 6000 	str.w	r6, [sl]
 800bb5c:	f8da 3000 	ldr.w	r3, [sl]
 800bb60:	4499      	add	r9, r3
 800bb62:	2200      	movs	r2, #0
 800bb64:	2300      	movs	r3, #0
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 ffb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb6e:	b108      	cbz	r0, 800bb74 <__cvt+0xa4>
 800bb70:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb74:	2230      	movs	r2, #48	; 0x30
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	454b      	cmp	r3, r9
 800bb7a:	d307      	bcc.n	800bb8c <__cvt+0xbc>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb80:	1bdb      	subs	r3, r3, r7
 800bb82:	4638      	mov	r0, r7
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	b004      	add	sp, #16
 800bb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8c:	1c59      	adds	r1, r3, #1
 800bb8e:	9103      	str	r1, [sp, #12]
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	e7f0      	b.n	800bb76 <__cvt+0xa6>

0800bb94 <__exponent>:
 800bb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb96:	4603      	mov	r3, r0
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	bfb8      	it	lt
 800bb9c:	4249      	neglt	r1, r1
 800bb9e:	f803 2b02 	strb.w	r2, [r3], #2
 800bba2:	bfb4      	ite	lt
 800bba4:	222d      	movlt	r2, #45	; 0x2d
 800bba6:	222b      	movge	r2, #43	; 0x2b
 800bba8:	2909      	cmp	r1, #9
 800bbaa:	7042      	strb	r2, [r0, #1]
 800bbac:	dd2a      	ble.n	800bc04 <__exponent+0x70>
 800bbae:	f10d 0407 	add.w	r4, sp, #7
 800bbb2:	46a4      	mov	ip, r4
 800bbb4:	270a      	movs	r7, #10
 800bbb6:	46a6      	mov	lr, r4
 800bbb8:	460a      	mov	r2, r1
 800bbba:	fb91 f6f7 	sdiv	r6, r1, r7
 800bbbe:	fb07 1516 	mls	r5, r7, r6, r1
 800bbc2:	3530      	adds	r5, #48	; 0x30
 800bbc4:	2a63      	cmp	r2, #99	; 0x63
 800bbc6:	f104 34ff 	add.w	r4, r4, #4294967295
 800bbca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bbce:	4631      	mov	r1, r6
 800bbd0:	dcf1      	bgt.n	800bbb6 <__exponent+0x22>
 800bbd2:	3130      	adds	r1, #48	; 0x30
 800bbd4:	f1ae 0502 	sub.w	r5, lr, #2
 800bbd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bbdc:	1c44      	adds	r4, r0, #1
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4561      	cmp	r1, ip
 800bbe2:	d30a      	bcc.n	800bbfa <__exponent+0x66>
 800bbe4:	f10d 0209 	add.w	r2, sp, #9
 800bbe8:	eba2 020e 	sub.w	r2, r2, lr
 800bbec:	4565      	cmp	r5, ip
 800bbee:	bf88      	it	hi
 800bbf0:	2200      	movhi	r2, #0
 800bbf2:	4413      	add	r3, r2
 800bbf4:	1a18      	subs	r0, r3, r0
 800bbf6:	b003      	add	sp, #12
 800bbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc02:	e7ed      	b.n	800bbe0 <__exponent+0x4c>
 800bc04:	2330      	movs	r3, #48	; 0x30
 800bc06:	3130      	adds	r1, #48	; 0x30
 800bc08:	7083      	strb	r3, [r0, #2]
 800bc0a:	70c1      	strb	r1, [r0, #3]
 800bc0c:	1d03      	adds	r3, r0, #4
 800bc0e:	e7f1      	b.n	800bbf4 <__exponent+0x60>

0800bc10 <_printf_float>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	ed2d 8b02 	vpush	{d8}
 800bc18:	b08d      	sub	sp, #52	; 0x34
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc20:	4616      	mov	r6, r2
 800bc22:	461f      	mov	r7, r3
 800bc24:	4605      	mov	r5, r0
 800bc26:	f001 fa59 	bl	800d0dc <_localeconv_r>
 800bc2a:	f8d0 a000 	ldr.w	sl, [r0]
 800bc2e:	4650      	mov	r0, sl
 800bc30:	f7f4 fad6 	bl	80001e0 <strlen>
 800bc34:	2300      	movs	r3, #0
 800bc36:	930a      	str	r3, [sp, #40]	; 0x28
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc44:	3307      	adds	r3, #7
 800bc46:	f023 0307 	bic.w	r3, r3, #7
 800bc4a:	f103 0208 	add.w	r2, r3, #8
 800bc4e:	f8c8 2000 	str.w	r2, [r8]
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bc5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bc5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc62:	9307      	str	r3, [sp, #28]
 800bc64:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc68:	ee08 0a10 	vmov	s16, r0
 800bc6c:	4b9f      	ldr	r3, [pc, #636]	; (800beec <_printf_float+0x2dc>)
 800bc6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc72:	f04f 32ff 	mov.w	r2, #4294967295
 800bc76:	f7f4 ff61 	bl	8000b3c <__aeabi_dcmpun>
 800bc7a:	bb88      	cbnz	r0, 800bce0 <_printf_float+0xd0>
 800bc7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc80:	4b9a      	ldr	r3, [pc, #616]	; (800beec <_printf_float+0x2dc>)
 800bc82:	f04f 32ff 	mov.w	r2, #4294967295
 800bc86:	f7f4 ff3b 	bl	8000b00 <__aeabi_dcmple>
 800bc8a:	bb48      	cbnz	r0, 800bce0 <_printf_float+0xd0>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 ff2a 	bl	8000aec <__aeabi_dcmplt>
 800bc98:	b110      	cbz	r0, 800bca0 <_printf_float+0x90>
 800bc9a:	232d      	movs	r3, #45	; 0x2d
 800bc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca0:	4b93      	ldr	r3, [pc, #588]	; (800bef0 <_printf_float+0x2e0>)
 800bca2:	4894      	ldr	r0, [pc, #592]	; (800bef4 <_printf_float+0x2e4>)
 800bca4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bca8:	bf94      	ite	ls
 800bcaa:	4698      	movls	r8, r3
 800bcac:	4680      	movhi	r8, r0
 800bcae:	2303      	movs	r3, #3
 800bcb0:	6123      	str	r3, [r4, #16]
 800bcb2:	9b05      	ldr	r3, [sp, #20]
 800bcb4:	f023 0204 	bic.w	r2, r3, #4
 800bcb8:	6022      	str	r2, [r4, #0]
 800bcba:	f04f 0900 	mov.w	r9, #0
 800bcbe:	9700      	str	r7, [sp, #0]
 800bcc0:	4633      	mov	r3, r6
 800bcc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f000 f9d8 	bl	800c07c <_printf_common>
 800bccc:	3001      	adds	r0, #1
 800bcce:	f040 8090 	bne.w	800bdf2 <_printf_float+0x1e2>
 800bcd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd6:	b00d      	add	sp, #52	; 0x34
 800bcd8:	ecbd 8b02 	vpop	{d8}
 800bcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce0:	4642      	mov	r2, r8
 800bce2:	464b      	mov	r3, r9
 800bce4:	4640      	mov	r0, r8
 800bce6:	4649      	mov	r1, r9
 800bce8:	f7f4 ff28 	bl	8000b3c <__aeabi_dcmpun>
 800bcec:	b140      	cbz	r0, 800bd00 <_printf_float+0xf0>
 800bcee:	464b      	mov	r3, r9
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	bfbc      	itt	lt
 800bcf4:	232d      	movlt	r3, #45	; 0x2d
 800bcf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bcfa:	487f      	ldr	r0, [pc, #508]	; (800bef8 <_printf_float+0x2e8>)
 800bcfc:	4b7f      	ldr	r3, [pc, #508]	; (800befc <_printf_float+0x2ec>)
 800bcfe:	e7d1      	b.n	800bca4 <_printf_float+0x94>
 800bd00:	6863      	ldr	r3, [r4, #4]
 800bd02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd06:	9206      	str	r2, [sp, #24]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	d13f      	bne.n	800bd8c <_printf_float+0x17c>
 800bd0c:	2306      	movs	r3, #6
 800bd0e:	6063      	str	r3, [r4, #4]
 800bd10:	9b05      	ldr	r3, [sp, #20]
 800bd12:	6861      	ldr	r1, [r4, #4]
 800bd14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd18:	2300      	movs	r3, #0
 800bd1a:	9303      	str	r3, [sp, #12]
 800bd1c:	ab0a      	add	r3, sp, #40	; 0x28
 800bd1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd22:	ab09      	add	r3, sp, #36	; 0x24
 800bd24:	ec49 8b10 	vmov	d0, r8, r9
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	6022      	str	r2, [r4, #0]
 800bd2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd30:	4628      	mov	r0, r5
 800bd32:	f7ff fecd 	bl	800bad0 <__cvt>
 800bd36:	9b06      	ldr	r3, [sp, #24]
 800bd38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd3a:	2b47      	cmp	r3, #71	; 0x47
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	d108      	bne.n	800bd52 <_printf_float+0x142>
 800bd40:	1cc8      	adds	r0, r1, #3
 800bd42:	db02      	blt.n	800bd4a <_printf_float+0x13a>
 800bd44:	6863      	ldr	r3, [r4, #4]
 800bd46:	4299      	cmp	r1, r3
 800bd48:	dd41      	ble.n	800bdce <_printf_float+0x1be>
 800bd4a:	f1ab 0b02 	sub.w	fp, fp, #2
 800bd4e:	fa5f fb8b 	uxtb.w	fp, fp
 800bd52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd56:	d820      	bhi.n	800bd9a <_printf_float+0x18a>
 800bd58:	3901      	subs	r1, #1
 800bd5a:	465a      	mov	r2, fp
 800bd5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd60:	9109      	str	r1, [sp, #36]	; 0x24
 800bd62:	f7ff ff17 	bl	800bb94 <__exponent>
 800bd66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd68:	1813      	adds	r3, r2, r0
 800bd6a:	2a01      	cmp	r2, #1
 800bd6c:	4681      	mov	r9, r0
 800bd6e:	6123      	str	r3, [r4, #16]
 800bd70:	dc02      	bgt.n	800bd78 <_printf_float+0x168>
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	07d2      	lsls	r2, r2, #31
 800bd76:	d501      	bpl.n	800bd7c <_printf_float+0x16c>
 800bd78:	3301      	adds	r3, #1
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d09c      	beq.n	800bcbe <_printf_float+0xae>
 800bd84:	232d      	movs	r3, #45	; 0x2d
 800bd86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd8a:	e798      	b.n	800bcbe <_printf_float+0xae>
 800bd8c:	9a06      	ldr	r2, [sp, #24]
 800bd8e:	2a47      	cmp	r2, #71	; 0x47
 800bd90:	d1be      	bne.n	800bd10 <_printf_float+0x100>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1bc      	bne.n	800bd10 <_printf_float+0x100>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e7b9      	b.n	800bd0e <_printf_float+0xfe>
 800bd9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bd9e:	d118      	bne.n	800bdd2 <_printf_float+0x1c2>
 800bda0:	2900      	cmp	r1, #0
 800bda2:	6863      	ldr	r3, [r4, #4]
 800bda4:	dd0b      	ble.n	800bdbe <_printf_float+0x1ae>
 800bda6:	6121      	str	r1, [r4, #16]
 800bda8:	b913      	cbnz	r3, 800bdb0 <_printf_float+0x1a0>
 800bdaa:	6822      	ldr	r2, [r4, #0]
 800bdac:	07d0      	lsls	r0, r2, #31
 800bdae:	d502      	bpl.n	800bdb6 <_printf_float+0x1a6>
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	440b      	add	r3, r1
 800bdb4:	6123      	str	r3, [r4, #16]
 800bdb6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bdb8:	f04f 0900 	mov.w	r9, #0
 800bdbc:	e7de      	b.n	800bd7c <_printf_float+0x16c>
 800bdbe:	b913      	cbnz	r3, 800bdc6 <_printf_float+0x1b6>
 800bdc0:	6822      	ldr	r2, [r4, #0]
 800bdc2:	07d2      	lsls	r2, r2, #31
 800bdc4:	d501      	bpl.n	800bdca <_printf_float+0x1ba>
 800bdc6:	3302      	adds	r3, #2
 800bdc8:	e7f4      	b.n	800bdb4 <_printf_float+0x1a4>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e7f2      	b.n	800bdb4 <_printf_float+0x1a4>
 800bdce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	db05      	blt.n	800bde4 <_printf_float+0x1d4>
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	6121      	str	r1, [r4, #16]
 800bddc:	07d8      	lsls	r0, r3, #31
 800bdde:	d5ea      	bpl.n	800bdb6 <_printf_float+0x1a6>
 800bde0:	1c4b      	adds	r3, r1, #1
 800bde2:	e7e7      	b.n	800bdb4 <_printf_float+0x1a4>
 800bde4:	2900      	cmp	r1, #0
 800bde6:	bfd4      	ite	le
 800bde8:	f1c1 0202 	rsble	r2, r1, #2
 800bdec:	2201      	movgt	r2, #1
 800bdee:	4413      	add	r3, r2
 800bdf0:	e7e0      	b.n	800bdb4 <_printf_float+0x1a4>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	055a      	lsls	r2, r3, #21
 800bdf6:	d407      	bmi.n	800be08 <_printf_float+0x1f8>
 800bdf8:	6923      	ldr	r3, [r4, #16]
 800bdfa:	4642      	mov	r2, r8
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4628      	mov	r0, r5
 800be00:	47b8      	blx	r7
 800be02:	3001      	adds	r0, #1
 800be04:	d12c      	bne.n	800be60 <_printf_float+0x250>
 800be06:	e764      	b.n	800bcd2 <_printf_float+0xc2>
 800be08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be0c:	f240 80e0 	bls.w	800bfd0 <_printf_float+0x3c0>
 800be10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be14:	2200      	movs	r2, #0
 800be16:	2300      	movs	r3, #0
 800be18:	f7f4 fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d034      	beq.n	800be8a <_printf_float+0x27a>
 800be20:	4a37      	ldr	r2, [pc, #220]	; (800bf00 <_printf_float+0x2f0>)
 800be22:	2301      	movs	r3, #1
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	47b8      	blx	r7
 800be2a:	3001      	adds	r0, #1
 800be2c:	f43f af51 	beq.w	800bcd2 <_printf_float+0xc2>
 800be30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be34:	429a      	cmp	r2, r3
 800be36:	db02      	blt.n	800be3e <_printf_float+0x22e>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	07d8      	lsls	r0, r3, #31
 800be3c:	d510      	bpl.n	800be60 <_printf_float+0x250>
 800be3e:	ee18 3a10 	vmov	r3, s16
 800be42:	4652      	mov	r2, sl
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	f43f af41 	beq.w	800bcd2 <_printf_float+0xc2>
 800be50:	f04f 0800 	mov.w	r8, #0
 800be54:	f104 091a 	add.w	r9, r4, #26
 800be58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be5a:	3b01      	subs	r3, #1
 800be5c:	4543      	cmp	r3, r8
 800be5e:	dc09      	bgt.n	800be74 <_printf_float+0x264>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	079b      	lsls	r3, r3, #30
 800be64:	f100 8105 	bmi.w	800c072 <_printf_float+0x462>
 800be68:	68e0      	ldr	r0, [r4, #12]
 800be6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be6c:	4298      	cmp	r0, r3
 800be6e:	bfb8      	it	lt
 800be70:	4618      	movlt	r0, r3
 800be72:	e730      	b.n	800bcd6 <_printf_float+0xc6>
 800be74:	2301      	movs	r3, #1
 800be76:	464a      	mov	r2, r9
 800be78:	4631      	mov	r1, r6
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b8      	blx	r7
 800be7e:	3001      	adds	r0, #1
 800be80:	f43f af27 	beq.w	800bcd2 <_printf_float+0xc2>
 800be84:	f108 0801 	add.w	r8, r8, #1
 800be88:	e7e6      	b.n	800be58 <_printf_float+0x248>
 800be8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dc39      	bgt.n	800bf04 <_printf_float+0x2f4>
 800be90:	4a1b      	ldr	r2, [pc, #108]	; (800bf00 <_printf_float+0x2f0>)
 800be92:	2301      	movs	r3, #1
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	f43f af19 	beq.w	800bcd2 <_printf_float+0xc2>
 800bea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bea4:	4313      	orrs	r3, r2
 800bea6:	d102      	bne.n	800beae <_printf_float+0x29e>
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	07d9      	lsls	r1, r3, #31
 800beac:	d5d8      	bpl.n	800be60 <_printf_float+0x250>
 800beae:	ee18 3a10 	vmov	r3, s16
 800beb2:	4652      	mov	r2, sl
 800beb4:	4631      	mov	r1, r6
 800beb6:	4628      	mov	r0, r5
 800beb8:	47b8      	blx	r7
 800beba:	3001      	adds	r0, #1
 800bebc:	f43f af09 	beq.w	800bcd2 <_printf_float+0xc2>
 800bec0:	f04f 0900 	mov.w	r9, #0
 800bec4:	f104 0a1a 	add.w	sl, r4, #26
 800bec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beca:	425b      	negs	r3, r3
 800becc:	454b      	cmp	r3, r9
 800bece:	dc01      	bgt.n	800bed4 <_printf_float+0x2c4>
 800bed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed2:	e792      	b.n	800bdfa <_printf_float+0x1ea>
 800bed4:	2301      	movs	r3, #1
 800bed6:	4652      	mov	r2, sl
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f aef7 	beq.w	800bcd2 <_printf_float+0xc2>
 800bee4:	f109 0901 	add.w	r9, r9, #1
 800bee8:	e7ee      	b.n	800bec8 <_printf_float+0x2b8>
 800beea:	bf00      	nop
 800beec:	7fefffff 	.word	0x7fefffff
 800bef0:	0800e9ec 	.word	0x0800e9ec
 800bef4:	0800e9f0 	.word	0x0800e9f0
 800bef8:	0800e9f8 	.word	0x0800e9f8
 800befc:	0800e9f4 	.word	0x0800e9f4
 800bf00:	0800e9fc 	.word	0x0800e9fc
 800bf04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	bfa8      	it	ge
 800bf0c:	461a      	movge	r2, r3
 800bf0e:	2a00      	cmp	r2, #0
 800bf10:	4691      	mov	r9, r2
 800bf12:	dc37      	bgt.n	800bf84 <_printf_float+0x374>
 800bf14:	f04f 0b00 	mov.w	fp, #0
 800bf18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf1c:	f104 021a 	add.w	r2, r4, #26
 800bf20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf22:	9305      	str	r3, [sp, #20]
 800bf24:	eba3 0309 	sub.w	r3, r3, r9
 800bf28:	455b      	cmp	r3, fp
 800bf2a:	dc33      	bgt.n	800bf94 <_printf_float+0x384>
 800bf2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf30:	429a      	cmp	r2, r3
 800bf32:	db3b      	blt.n	800bfac <_printf_float+0x39c>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	07da      	lsls	r2, r3, #31
 800bf38:	d438      	bmi.n	800bfac <_printf_float+0x39c>
 800bf3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf3c:	9a05      	ldr	r2, [sp, #20]
 800bf3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf40:	1a9a      	subs	r2, r3, r2
 800bf42:	eba3 0901 	sub.w	r9, r3, r1
 800bf46:	4591      	cmp	r9, r2
 800bf48:	bfa8      	it	ge
 800bf4a:	4691      	movge	r9, r2
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	dc35      	bgt.n	800bfbe <_printf_float+0x3ae>
 800bf52:	f04f 0800 	mov.w	r8, #0
 800bf56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf5a:	f104 0a1a 	add.w	sl, r4, #26
 800bf5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	eba3 0309 	sub.w	r3, r3, r9
 800bf68:	4543      	cmp	r3, r8
 800bf6a:	f77f af79 	ble.w	800be60 <_printf_float+0x250>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	4652      	mov	r2, sl
 800bf72:	4631      	mov	r1, r6
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b8      	blx	r7
 800bf78:	3001      	adds	r0, #1
 800bf7a:	f43f aeaa 	beq.w	800bcd2 <_printf_float+0xc2>
 800bf7e:	f108 0801 	add.w	r8, r8, #1
 800bf82:	e7ec      	b.n	800bf5e <_printf_float+0x34e>
 800bf84:	4613      	mov	r3, r2
 800bf86:	4631      	mov	r1, r6
 800bf88:	4642      	mov	r2, r8
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	47b8      	blx	r7
 800bf8e:	3001      	adds	r0, #1
 800bf90:	d1c0      	bne.n	800bf14 <_printf_float+0x304>
 800bf92:	e69e      	b.n	800bcd2 <_printf_float+0xc2>
 800bf94:	2301      	movs	r3, #1
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	9205      	str	r2, [sp, #20]
 800bf9c:	47b8      	blx	r7
 800bf9e:	3001      	adds	r0, #1
 800bfa0:	f43f ae97 	beq.w	800bcd2 <_printf_float+0xc2>
 800bfa4:	9a05      	ldr	r2, [sp, #20]
 800bfa6:	f10b 0b01 	add.w	fp, fp, #1
 800bfaa:	e7b9      	b.n	800bf20 <_printf_float+0x310>
 800bfac:	ee18 3a10 	vmov	r3, s16
 800bfb0:	4652      	mov	r2, sl
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d1be      	bne.n	800bf3a <_printf_float+0x32a>
 800bfbc:	e689      	b.n	800bcd2 <_printf_float+0xc2>
 800bfbe:	9a05      	ldr	r2, [sp, #20]
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	4442      	add	r2, r8
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	47b8      	blx	r7
 800bfca:	3001      	adds	r0, #1
 800bfcc:	d1c1      	bne.n	800bf52 <_printf_float+0x342>
 800bfce:	e680      	b.n	800bcd2 <_printf_float+0xc2>
 800bfd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfd2:	2a01      	cmp	r2, #1
 800bfd4:	dc01      	bgt.n	800bfda <_printf_float+0x3ca>
 800bfd6:	07db      	lsls	r3, r3, #31
 800bfd8:	d538      	bpl.n	800c04c <_printf_float+0x43c>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	4642      	mov	r2, r8
 800bfde:	4631      	mov	r1, r6
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	47b8      	blx	r7
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f43f ae74 	beq.w	800bcd2 <_printf_float+0xc2>
 800bfea:	ee18 3a10 	vmov	r3, s16
 800bfee:	4652      	mov	r2, sl
 800bff0:	4631      	mov	r1, r6
 800bff2:	4628      	mov	r0, r5
 800bff4:	47b8      	blx	r7
 800bff6:	3001      	adds	r0, #1
 800bff8:	f43f ae6b 	beq.w	800bcd2 <_printf_float+0xc2>
 800bffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c000:	2200      	movs	r2, #0
 800c002:	2300      	movs	r3, #0
 800c004:	f7f4 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 800c008:	b9d8      	cbnz	r0, 800c042 <_printf_float+0x432>
 800c00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00c:	f108 0201 	add.w	r2, r8, #1
 800c010:	3b01      	subs	r3, #1
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	d10e      	bne.n	800c03a <_printf_float+0x42a>
 800c01c:	e659      	b.n	800bcd2 <_printf_float+0xc2>
 800c01e:	2301      	movs	r3, #1
 800c020:	4652      	mov	r2, sl
 800c022:	4631      	mov	r1, r6
 800c024:	4628      	mov	r0, r5
 800c026:	47b8      	blx	r7
 800c028:	3001      	adds	r0, #1
 800c02a:	f43f ae52 	beq.w	800bcd2 <_printf_float+0xc2>
 800c02e:	f108 0801 	add.w	r8, r8, #1
 800c032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c034:	3b01      	subs	r3, #1
 800c036:	4543      	cmp	r3, r8
 800c038:	dcf1      	bgt.n	800c01e <_printf_float+0x40e>
 800c03a:	464b      	mov	r3, r9
 800c03c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c040:	e6dc      	b.n	800bdfc <_printf_float+0x1ec>
 800c042:	f04f 0800 	mov.w	r8, #0
 800c046:	f104 0a1a 	add.w	sl, r4, #26
 800c04a:	e7f2      	b.n	800c032 <_printf_float+0x422>
 800c04c:	2301      	movs	r3, #1
 800c04e:	4642      	mov	r2, r8
 800c050:	e7df      	b.n	800c012 <_printf_float+0x402>
 800c052:	2301      	movs	r3, #1
 800c054:	464a      	mov	r2, r9
 800c056:	4631      	mov	r1, r6
 800c058:	4628      	mov	r0, r5
 800c05a:	47b8      	blx	r7
 800c05c:	3001      	adds	r0, #1
 800c05e:	f43f ae38 	beq.w	800bcd2 <_printf_float+0xc2>
 800c062:	f108 0801 	add.w	r8, r8, #1
 800c066:	68e3      	ldr	r3, [r4, #12]
 800c068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c06a:	1a5b      	subs	r3, r3, r1
 800c06c:	4543      	cmp	r3, r8
 800c06e:	dcf0      	bgt.n	800c052 <_printf_float+0x442>
 800c070:	e6fa      	b.n	800be68 <_printf_float+0x258>
 800c072:	f04f 0800 	mov.w	r8, #0
 800c076:	f104 0919 	add.w	r9, r4, #25
 800c07a:	e7f4      	b.n	800c066 <_printf_float+0x456>

0800c07c <_printf_common>:
 800c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c080:	4616      	mov	r6, r2
 800c082:	4699      	mov	r9, r3
 800c084:	688a      	ldr	r2, [r1, #8]
 800c086:	690b      	ldr	r3, [r1, #16]
 800c088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c08c:	4293      	cmp	r3, r2
 800c08e:	bfb8      	it	lt
 800c090:	4613      	movlt	r3, r2
 800c092:	6033      	str	r3, [r6, #0]
 800c094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c098:	4607      	mov	r7, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b10a      	cbz	r2, 800c0a2 <_printf_common+0x26>
 800c09e:	3301      	adds	r3, #1
 800c0a0:	6033      	str	r3, [r6, #0]
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	0699      	lsls	r1, r3, #26
 800c0a6:	bf42      	ittt	mi
 800c0a8:	6833      	ldrmi	r3, [r6, #0]
 800c0aa:	3302      	addmi	r3, #2
 800c0ac:	6033      	strmi	r3, [r6, #0]
 800c0ae:	6825      	ldr	r5, [r4, #0]
 800c0b0:	f015 0506 	ands.w	r5, r5, #6
 800c0b4:	d106      	bne.n	800c0c4 <_printf_common+0x48>
 800c0b6:	f104 0a19 	add.w	sl, r4, #25
 800c0ba:	68e3      	ldr	r3, [r4, #12]
 800c0bc:	6832      	ldr	r2, [r6, #0]
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	42ab      	cmp	r3, r5
 800c0c2:	dc26      	bgt.n	800c112 <_printf_common+0x96>
 800c0c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0c8:	1e13      	subs	r3, r2, #0
 800c0ca:	6822      	ldr	r2, [r4, #0]
 800c0cc:	bf18      	it	ne
 800c0ce:	2301      	movne	r3, #1
 800c0d0:	0692      	lsls	r2, r2, #26
 800c0d2:	d42b      	bmi.n	800c12c <_printf_common+0xb0>
 800c0d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0d8:	4649      	mov	r1, r9
 800c0da:	4638      	mov	r0, r7
 800c0dc:	47c0      	blx	r8
 800c0de:	3001      	adds	r0, #1
 800c0e0:	d01e      	beq.n	800c120 <_printf_common+0xa4>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	68e5      	ldr	r5, [r4, #12]
 800c0e6:	6832      	ldr	r2, [r6, #0]
 800c0e8:	f003 0306 	and.w	r3, r3, #6
 800c0ec:	2b04      	cmp	r3, #4
 800c0ee:	bf08      	it	eq
 800c0f0:	1aad      	subeq	r5, r5, r2
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	6922      	ldr	r2, [r4, #16]
 800c0f6:	bf0c      	ite	eq
 800c0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0fc:	2500      	movne	r5, #0
 800c0fe:	4293      	cmp	r3, r2
 800c100:	bfc4      	itt	gt
 800c102:	1a9b      	subgt	r3, r3, r2
 800c104:	18ed      	addgt	r5, r5, r3
 800c106:	2600      	movs	r6, #0
 800c108:	341a      	adds	r4, #26
 800c10a:	42b5      	cmp	r5, r6
 800c10c:	d11a      	bne.n	800c144 <_printf_common+0xc8>
 800c10e:	2000      	movs	r0, #0
 800c110:	e008      	b.n	800c124 <_printf_common+0xa8>
 800c112:	2301      	movs	r3, #1
 800c114:	4652      	mov	r2, sl
 800c116:	4649      	mov	r1, r9
 800c118:	4638      	mov	r0, r7
 800c11a:	47c0      	blx	r8
 800c11c:	3001      	adds	r0, #1
 800c11e:	d103      	bne.n	800c128 <_printf_common+0xac>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c128:	3501      	adds	r5, #1
 800c12a:	e7c6      	b.n	800c0ba <_printf_common+0x3e>
 800c12c:	18e1      	adds	r1, r4, r3
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	2030      	movs	r0, #48	; 0x30
 800c132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c136:	4422      	add	r2, r4
 800c138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c13c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c140:	3302      	adds	r3, #2
 800c142:	e7c7      	b.n	800c0d4 <_printf_common+0x58>
 800c144:	2301      	movs	r3, #1
 800c146:	4622      	mov	r2, r4
 800c148:	4649      	mov	r1, r9
 800c14a:	4638      	mov	r0, r7
 800c14c:	47c0      	blx	r8
 800c14e:	3001      	adds	r0, #1
 800c150:	d0e6      	beq.n	800c120 <_printf_common+0xa4>
 800c152:	3601      	adds	r6, #1
 800c154:	e7d9      	b.n	800c10a <_printf_common+0x8e>
	...

0800c158 <_printf_i>:
 800c158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	7e0f      	ldrb	r7, [r1, #24]
 800c15e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c160:	2f78      	cmp	r7, #120	; 0x78
 800c162:	4691      	mov	r9, r2
 800c164:	4680      	mov	r8, r0
 800c166:	460c      	mov	r4, r1
 800c168:	469a      	mov	sl, r3
 800c16a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c16e:	d807      	bhi.n	800c180 <_printf_i+0x28>
 800c170:	2f62      	cmp	r7, #98	; 0x62
 800c172:	d80a      	bhi.n	800c18a <_printf_i+0x32>
 800c174:	2f00      	cmp	r7, #0
 800c176:	f000 80d8 	beq.w	800c32a <_printf_i+0x1d2>
 800c17a:	2f58      	cmp	r7, #88	; 0x58
 800c17c:	f000 80a3 	beq.w	800c2c6 <_printf_i+0x16e>
 800c180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c188:	e03a      	b.n	800c200 <_printf_i+0xa8>
 800c18a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c18e:	2b15      	cmp	r3, #21
 800c190:	d8f6      	bhi.n	800c180 <_printf_i+0x28>
 800c192:	a101      	add	r1, pc, #4	; (adr r1, 800c198 <_printf_i+0x40>)
 800c194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c198:	0800c1f1 	.word	0x0800c1f1
 800c19c:	0800c205 	.word	0x0800c205
 800c1a0:	0800c181 	.word	0x0800c181
 800c1a4:	0800c181 	.word	0x0800c181
 800c1a8:	0800c181 	.word	0x0800c181
 800c1ac:	0800c181 	.word	0x0800c181
 800c1b0:	0800c205 	.word	0x0800c205
 800c1b4:	0800c181 	.word	0x0800c181
 800c1b8:	0800c181 	.word	0x0800c181
 800c1bc:	0800c181 	.word	0x0800c181
 800c1c0:	0800c181 	.word	0x0800c181
 800c1c4:	0800c311 	.word	0x0800c311
 800c1c8:	0800c235 	.word	0x0800c235
 800c1cc:	0800c2f3 	.word	0x0800c2f3
 800c1d0:	0800c181 	.word	0x0800c181
 800c1d4:	0800c181 	.word	0x0800c181
 800c1d8:	0800c333 	.word	0x0800c333
 800c1dc:	0800c181 	.word	0x0800c181
 800c1e0:	0800c235 	.word	0x0800c235
 800c1e4:	0800c181 	.word	0x0800c181
 800c1e8:	0800c181 	.word	0x0800c181
 800c1ec:	0800c2fb 	.word	0x0800c2fb
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	1d1a      	adds	r2, r3, #4
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	602a      	str	r2, [r5, #0]
 800c1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c200:	2301      	movs	r3, #1
 800c202:	e0a3      	b.n	800c34c <_printf_i+0x1f4>
 800c204:	6820      	ldr	r0, [r4, #0]
 800c206:	6829      	ldr	r1, [r5, #0]
 800c208:	0606      	lsls	r6, r0, #24
 800c20a:	f101 0304 	add.w	r3, r1, #4
 800c20e:	d50a      	bpl.n	800c226 <_printf_i+0xce>
 800c210:	680e      	ldr	r6, [r1, #0]
 800c212:	602b      	str	r3, [r5, #0]
 800c214:	2e00      	cmp	r6, #0
 800c216:	da03      	bge.n	800c220 <_printf_i+0xc8>
 800c218:	232d      	movs	r3, #45	; 0x2d
 800c21a:	4276      	negs	r6, r6
 800c21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c220:	485e      	ldr	r0, [pc, #376]	; (800c39c <_printf_i+0x244>)
 800c222:	230a      	movs	r3, #10
 800c224:	e019      	b.n	800c25a <_printf_i+0x102>
 800c226:	680e      	ldr	r6, [r1, #0]
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c22e:	bf18      	it	ne
 800c230:	b236      	sxthne	r6, r6
 800c232:	e7ef      	b.n	800c214 <_printf_i+0xbc>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	6820      	ldr	r0, [r4, #0]
 800c238:	1d19      	adds	r1, r3, #4
 800c23a:	6029      	str	r1, [r5, #0]
 800c23c:	0601      	lsls	r1, r0, #24
 800c23e:	d501      	bpl.n	800c244 <_printf_i+0xec>
 800c240:	681e      	ldr	r6, [r3, #0]
 800c242:	e002      	b.n	800c24a <_printf_i+0xf2>
 800c244:	0646      	lsls	r6, r0, #25
 800c246:	d5fb      	bpl.n	800c240 <_printf_i+0xe8>
 800c248:	881e      	ldrh	r6, [r3, #0]
 800c24a:	4854      	ldr	r0, [pc, #336]	; (800c39c <_printf_i+0x244>)
 800c24c:	2f6f      	cmp	r7, #111	; 0x6f
 800c24e:	bf0c      	ite	eq
 800c250:	2308      	moveq	r3, #8
 800c252:	230a      	movne	r3, #10
 800c254:	2100      	movs	r1, #0
 800c256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c25a:	6865      	ldr	r5, [r4, #4]
 800c25c:	60a5      	str	r5, [r4, #8]
 800c25e:	2d00      	cmp	r5, #0
 800c260:	bfa2      	ittt	ge
 800c262:	6821      	ldrge	r1, [r4, #0]
 800c264:	f021 0104 	bicge.w	r1, r1, #4
 800c268:	6021      	strge	r1, [r4, #0]
 800c26a:	b90e      	cbnz	r6, 800c270 <_printf_i+0x118>
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	d04d      	beq.n	800c30c <_printf_i+0x1b4>
 800c270:	4615      	mov	r5, r2
 800c272:	fbb6 f1f3 	udiv	r1, r6, r3
 800c276:	fb03 6711 	mls	r7, r3, r1, r6
 800c27a:	5dc7      	ldrb	r7, [r0, r7]
 800c27c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c280:	4637      	mov	r7, r6
 800c282:	42bb      	cmp	r3, r7
 800c284:	460e      	mov	r6, r1
 800c286:	d9f4      	bls.n	800c272 <_printf_i+0x11a>
 800c288:	2b08      	cmp	r3, #8
 800c28a:	d10b      	bne.n	800c2a4 <_printf_i+0x14c>
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	07de      	lsls	r6, r3, #31
 800c290:	d508      	bpl.n	800c2a4 <_printf_i+0x14c>
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	6861      	ldr	r1, [r4, #4]
 800c296:	4299      	cmp	r1, r3
 800c298:	bfde      	ittt	le
 800c29a:	2330      	movle	r3, #48	; 0x30
 800c29c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2a4:	1b52      	subs	r2, r2, r5
 800c2a6:	6122      	str	r2, [r4, #16]
 800c2a8:	f8cd a000 	str.w	sl, [sp]
 800c2ac:	464b      	mov	r3, r9
 800c2ae:	aa03      	add	r2, sp, #12
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	f7ff fee2 	bl	800c07c <_printf_common>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	d14c      	bne.n	800c356 <_printf_i+0x1fe>
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	b004      	add	sp, #16
 800c2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c6:	4835      	ldr	r0, [pc, #212]	; (800c39c <_printf_i+0x244>)
 800c2c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2cc:	6829      	ldr	r1, [r5, #0]
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2d4:	6029      	str	r1, [r5, #0]
 800c2d6:	061d      	lsls	r5, r3, #24
 800c2d8:	d514      	bpl.n	800c304 <_printf_i+0x1ac>
 800c2da:	07df      	lsls	r7, r3, #31
 800c2dc:	bf44      	itt	mi
 800c2de:	f043 0320 	orrmi.w	r3, r3, #32
 800c2e2:	6023      	strmi	r3, [r4, #0]
 800c2e4:	b91e      	cbnz	r6, 800c2ee <_printf_i+0x196>
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	f023 0320 	bic.w	r3, r3, #32
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	2310      	movs	r3, #16
 800c2f0:	e7b0      	b.n	800c254 <_printf_i+0xfc>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	f043 0320 	orr.w	r3, r3, #32
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	2378      	movs	r3, #120	; 0x78
 800c2fc:	4828      	ldr	r0, [pc, #160]	; (800c3a0 <_printf_i+0x248>)
 800c2fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c302:	e7e3      	b.n	800c2cc <_printf_i+0x174>
 800c304:	0659      	lsls	r1, r3, #25
 800c306:	bf48      	it	mi
 800c308:	b2b6      	uxthmi	r6, r6
 800c30a:	e7e6      	b.n	800c2da <_printf_i+0x182>
 800c30c:	4615      	mov	r5, r2
 800c30e:	e7bb      	b.n	800c288 <_printf_i+0x130>
 800c310:	682b      	ldr	r3, [r5, #0]
 800c312:	6826      	ldr	r6, [r4, #0]
 800c314:	6961      	ldr	r1, [r4, #20]
 800c316:	1d18      	adds	r0, r3, #4
 800c318:	6028      	str	r0, [r5, #0]
 800c31a:	0635      	lsls	r5, r6, #24
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	d501      	bpl.n	800c324 <_printf_i+0x1cc>
 800c320:	6019      	str	r1, [r3, #0]
 800c322:	e002      	b.n	800c32a <_printf_i+0x1d2>
 800c324:	0670      	lsls	r0, r6, #25
 800c326:	d5fb      	bpl.n	800c320 <_printf_i+0x1c8>
 800c328:	8019      	strh	r1, [r3, #0]
 800c32a:	2300      	movs	r3, #0
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	4615      	mov	r5, r2
 800c330:	e7ba      	b.n	800c2a8 <_printf_i+0x150>
 800c332:	682b      	ldr	r3, [r5, #0]
 800c334:	1d1a      	adds	r2, r3, #4
 800c336:	602a      	str	r2, [r5, #0]
 800c338:	681d      	ldr	r5, [r3, #0]
 800c33a:	6862      	ldr	r2, [r4, #4]
 800c33c:	2100      	movs	r1, #0
 800c33e:	4628      	mov	r0, r5
 800c340:	f7f3 ff56 	bl	80001f0 <memchr>
 800c344:	b108      	cbz	r0, 800c34a <_printf_i+0x1f2>
 800c346:	1b40      	subs	r0, r0, r5
 800c348:	6060      	str	r0, [r4, #4]
 800c34a:	6863      	ldr	r3, [r4, #4]
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	2300      	movs	r3, #0
 800c350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c354:	e7a8      	b.n	800c2a8 <_printf_i+0x150>
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	462a      	mov	r2, r5
 800c35a:	4649      	mov	r1, r9
 800c35c:	4640      	mov	r0, r8
 800c35e:	47d0      	blx	sl
 800c360:	3001      	adds	r0, #1
 800c362:	d0ab      	beq.n	800c2bc <_printf_i+0x164>
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	079b      	lsls	r3, r3, #30
 800c368:	d413      	bmi.n	800c392 <_printf_i+0x23a>
 800c36a:	68e0      	ldr	r0, [r4, #12]
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	4298      	cmp	r0, r3
 800c370:	bfb8      	it	lt
 800c372:	4618      	movlt	r0, r3
 800c374:	e7a4      	b.n	800c2c0 <_printf_i+0x168>
 800c376:	2301      	movs	r3, #1
 800c378:	4632      	mov	r2, r6
 800c37a:	4649      	mov	r1, r9
 800c37c:	4640      	mov	r0, r8
 800c37e:	47d0      	blx	sl
 800c380:	3001      	adds	r0, #1
 800c382:	d09b      	beq.n	800c2bc <_printf_i+0x164>
 800c384:	3501      	adds	r5, #1
 800c386:	68e3      	ldr	r3, [r4, #12]
 800c388:	9903      	ldr	r1, [sp, #12]
 800c38a:	1a5b      	subs	r3, r3, r1
 800c38c:	42ab      	cmp	r3, r5
 800c38e:	dcf2      	bgt.n	800c376 <_printf_i+0x21e>
 800c390:	e7eb      	b.n	800c36a <_printf_i+0x212>
 800c392:	2500      	movs	r5, #0
 800c394:	f104 0619 	add.w	r6, r4, #25
 800c398:	e7f5      	b.n	800c386 <_printf_i+0x22e>
 800c39a:	bf00      	nop
 800c39c:	0800e9fe 	.word	0x0800e9fe
 800c3a0:	0800ea0f 	.word	0x0800ea0f

0800c3a4 <siprintf>:
 800c3a4:	b40e      	push	{r1, r2, r3}
 800c3a6:	b500      	push	{lr}
 800c3a8:	b09c      	sub	sp, #112	; 0x70
 800c3aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c3ac:	9002      	str	r0, [sp, #8]
 800c3ae:	9006      	str	r0, [sp, #24]
 800c3b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3b4:	4809      	ldr	r0, [pc, #36]	; (800c3dc <siprintf+0x38>)
 800c3b6:	9107      	str	r1, [sp, #28]
 800c3b8:	9104      	str	r1, [sp, #16]
 800c3ba:	4909      	ldr	r1, [pc, #36]	; (800c3e0 <siprintf+0x3c>)
 800c3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c0:	9105      	str	r1, [sp, #20]
 800c3c2:	6800      	ldr	r0, [r0, #0]
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	a902      	add	r1, sp, #8
 800c3c8:	f001 fb78 	bl	800dabc <_svfiprintf_r>
 800c3cc:	9b02      	ldr	r3, [sp, #8]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	701a      	strb	r2, [r3, #0]
 800c3d2:	b01c      	add	sp, #112	; 0x70
 800c3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3d8:	b003      	add	sp, #12
 800c3da:	4770      	bx	lr
 800c3dc:	20000108 	.word	0x20000108
 800c3e0:	ffff0208 	.word	0xffff0208

0800c3e4 <quorem>:
 800c3e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	6903      	ldr	r3, [r0, #16]
 800c3ea:	690c      	ldr	r4, [r1, #16]
 800c3ec:	42a3      	cmp	r3, r4
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	f2c0 8081 	blt.w	800c4f6 <quorem+0x112>
 800c3f4:	3c01      	subs	r4, #1
 800c3f6:	f101 0814 	add.w	r8, r1, #20
 800c3fa:	f100 0514 	add.w	r5, r0, #20
 800c3fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c40c:	3301      	adds	r3, #1
 800c40e:	429a      	cmp	r2, r3
 800c410:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c418:	fbb2 f6f3 	udiv	r6, r2, r3
 800c41c:	d331      	bcc.n	800c482 <quorem+0x9e>
 800c41e:	f04f 0e00 	mov.w	lr, #0
 800c422:	4640      	mov	r0, r8
 800c424:	46ac      	mov	ip, r5
 800c426:	46f2      	mov	sl, lr
 800c428:	f850 2b04 	ldr.w	r2, [r0], #4
 800c42c:	b293      	uxth	r3, r2
 800c42e:	fb06 e303 	mla	r3, r6, r3, lr
 800c432:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c436:	b29b      	uxth	r3, r3
 800c438:	ebaa 0303 	sub.w	r3, sl, r3
 800c43c:	f8dc a000 	ldr.w	sl, [ip]
 800c440:	0c12      	lsrs	r2, r2, #16
 800c442:	fa13 f38a 	uxtah	r3, r3, sl
 800c446:	fb06 e202 	mla	r2, r6, r2, lr
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c452:	b292      	uxth	r2, r2
 800c454:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c45c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c460:	4581      	cmp	r9, r0
 800c462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c466:	f84c 3b04 	str.w	r3, [ip], #4
 800c46a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c46e:	d2db      	bcs.n	800c428 <quorem+0x44>
 800c470:	f855 300b 	ldr.w	r3, [r5, fp]
 800c474:	b92b      	cbnz	r3, 800c482 <quorem+0x9e>
 800c476:	9b01      	ldr	r3, [sp, #4]
 800c478:	3b04      	subs	r3, #4
 800c47a:	429d      	cmp	r5, r3
 800c47c:	461a      	mov	r2, r3
 800c47e:	d32e      	bcc.n	800c4de <quorem+0xfa>
 800c480:	613c      	str	r4, [r7, #16]
 800c482:	4638      	mov	r0, r7
 800c484:	f001 f8c6 	bl	800d614 <__mcmp>
 800c488:	2800      	cmp	r0, #0
 800c48a:	db24      	blt.n	800c4d6 <quorem+0xf2>
 800c48c:	3601      	adds	r6, #1
 800c48e:	4628      	mov	r0, r5
 800c490:	f04f 0c00 	mov.w	ip, #0
 800c494:	f858 2b04 	ldr.w	r2, [r8], #4
 800c498:	f8d0 e000 	ldr.w	lr, [r0]
 800c49c:	b293      	uxth	r3, r2
 800c49e:	ebac 0303 	sub.w	r3, ip, r3
 800c4a2:	0c12      	lsrs	r2, r2, #16
 800c4a4:	fa13 f38e 	uxtah	r3, r3, lr
 800c4a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4b6:	45c1      	cmp	r9, r8
 800c4b8:	f840 3b04 	str.w	r3, [r0], #4
 800c4bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4c0:	d2e8      	bcs.n	800c494 <quorem+0xb0>
 800c4c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4ca:	b922      	cbnz	r2, 800c4d6 <quorem+0xf2>
 800c4cc:	3b04      	subs	r3, #4
 800c4ce:	429d      	cmp	r5, r3
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	d30a      	bcc.n	800c4ea <quorem+0x106>
 800c4d4:	613c      	str	r4, [r7, #16]
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	b003      	add	sp, #12
 800c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4de:	6812      	ldr	r2, [r2, #0]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	d1cc      	bne.n	800c480 <quorem+0x9c>
 800c4e6:	3c01      	subs	r4, #1
 800c4e8:	e7c7      	b.n	800c47a <quorem+0x96>
 800c4ea:	6812      	ldr	r2, [r2, #0]
 800c4ec:	3b04      	subs	r3, #4
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	d1f0      	bne.n	800c4d4 <quorem+0xf0>
 800c4f2:	3c01      	subs	r4, #1
 800c4f4:	e7eb      	b.n	800c4ce <quorem+0xea>
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	e7ee      	b.n	800c4d8 <quorem+0xf4>
 800c4fa:	0000      	movs	r0, r0
 800c4fc:	0000      	movs	r0, r0
	...

0800c500 <_dtoa_r>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	ed2d 8b04 	vpush	{d8-d9}
 800c508:	ec57 6b10 	vmov	r6, r7, d0
 800c50c:	b093      	sub	sp, #76	; 0x4c
 800c50e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c514:	9106      	str	r1, [sp, #24]
 800c516:	ee10 aa10 	vmov	sl, s0
 800c51a:	4604      	mov	r4, r0
 800c51c:	9209      	str	r2, [sp, #36]	; 0x24
 800c51e:	930c      	str	r3, [sp, #48]	; 0x30
 800c520:	46bb      	mov	fp, r7
 800c522:	b975      	cbnz	r5, 800c542 <_dtoa_r+0x42>
 800c524:	2010      	movs	r0, #16
 800c526:	f000 fddd 	bl	800d0e4 <malloc>
 800c52a:	4602      	mov	r2, r0
 800c52c:	6260      	str	r0, [r4, #36]	; 0x24
 800c52e:	b920      	cbnz	r0, 800c53a <_dtoa_r+0x3a>
 800c530:	4ba7      	ldr	r3, [pc, #668]	; (800c7d0 <_dtoa_r+0x2d0>)
 800c532:	21ea      	movs	r1, #234	; 0xea
 800c534:	48a7      	ldr	r0, [pc, #668]	; (800c7d4 <_dtoa_r+0x2d4>)
 800c536:	f001 fbd1 	bl	800dcdc <__assert_func>
 800c53a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c53e:	6005      	str	r5, [r0, #0]
 800c540:	60c5      	str	r5, [r0, #12]
 800c542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c544:	6819      	ldr	r1, [r3, #0]
 800c546:	b151      	cbz	r1, 800c55e <_dtoa_r+0x5e>
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	604a      	str	r2, [r1, #4]
 800c54c:	2301      	movs	r3, #1
 800c54e:	4093      	lsls	r3, r2
 800c550:	608b      	str	r3, [r1, #8]
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fe1c 	bl	800d190 <_Bfree>
 800c558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	1e3b      	subs	r3, r7, #0
 800c560:	bfaa      	itet	ge
 800c562:	2300      	movge	r3, #0
 800c564:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c568:	f8c8 3000 	strge.w	r3, [r8]
 800c56c:	4b9a      	ldr	r3, [pc, #616]	; (800c7d8 <_dtoa_r+0x2d8>)
 800c56e:	bfbc      	itt	lt
 800c570:	2201      	movlt	r2, #1
 800c572:	f8c8 2000 	strlt.w	r2, [r8]
 800c576:	ea33 030b 	bics.w	r3, r3, fp
 800c57a:	d11b      	bne.n	800c5b4 <_dtoa_r+0xb4>
 800c57c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c57e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c588:	4333      	orrs	r3, r6
 800c58a:	f000 8592 	beq.w	800d0b2 <_dtoa_r+0xbb2>
 800c58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c590:	b963      	cbnz	r3, 800c5ac <_dtoa_r+0xac>
 800c592:	4b92      	ldr	r3, [pc, #584]	; (800c7dc <_dtoa_r+0x2dc>)
 800c594:	e022      	b.n	800c5dc <_dtoa_r+0xdc>
 800c596:	4b92      	ldr	r3, [pc, #584]	; (800c7e0 <_dtoa_r+0x2e0>)
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	3308      	adds	r3, #8
 800c59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	9801      	ldr	r0, [sp, #4]
 800c5a2:	b013      	add	sp, #76	; 0x4c
 800c5a4:	ecbd 8b04 	vpop	{d8-d9}
 800c5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ac:	4b8b      	ldr	r3, [pc, #556]	; (800c7dc <_dtoa_r+0x2dc>)
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	3303      	adds	r3, #3
 800c5b2:	e7f3      	b.n	800c59c <_dtoa_r+0x9c>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	4659      	mov	r1, fp
 800c5bc:	f7f4 fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5c0:	ec4b ab19 	vmov	d9, sl, fp
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	b158      	cbz	r0, 800c5e0 <_dtoa_r+0xe0>
 800c5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 856b 	beq.w	800d0ac <_dtoa_r+0xbac>
 800c5d6:	4883      	ldr	r0, [pc, #524]	; (800c7e4 <_dtoa_r+0x2e4>)
 800c5d8:	6018      	str	r0, [r3, #0]
 800c5da:	1e43      	subs	r3, r0, #1
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	e7df      	b.n	800c5a0 <_dtoa_r+0xa0>
 800c5e0:	ec4b ab10 	vmov	d0, sl, fp
 800c5e4:	aa10      	add	r2, sp, #64	; 0x40
 800c5e6:	a911      	add	r1, sp, #68	; 0x44
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f001 f8b9 	bl	800d760 <__d2b>
 800c5ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c5f2:	ee08 0a10 	vmov	s16, r0
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	f000 8084 	beq.w	800c704 <_dtoa_r+0x204>
 800c5fc:	ee19 3a90 	vmov	r3, s19
 800c600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c604:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c608:	4656      	mov	r6, sl
 800c60a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c60e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c612:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c616:	4b74      	ldr	r3, [pc, #464]	; (800c7e8 <_dtoa_r+0x2e8>)
 800c618:	2200      	movs	r2, #0
 800c61a:	4630      	mov	r0, r6
 800c61c:	4639      	mov	r1, r7
 800c61e:	f7f3 fe3b 	bl	8000298 <__aeabi_dsub>
 800c622:	a365      	add	r3, pc, #404	; (adr r3, 800c7b8 <_dtoa_r+0x2b8>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f3 ffee 	bl	8000608 <__aeabi_dmul>
 800c62c:	a364      	add	r3, pc, #400	; (adr r3, 800c7c0 <_dtoa_r+0x2c0>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f3 fe33 	bl	800029c <__adddf3>
 800c636:	4606      	mov	r6, r0
 800c638:	4628      	mov	r0, r5
 800c63a:	460f      	mov	r7, r1
 800c63c:	f7f3 ff7a 	bl	8000534 <__aeabi_i2d>
 800c640:	a361      	add	r3, pc, #388	; (adr r3, 800c7c8 <_dtoa_r+0x2c8>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	f7f3 ffdf 	bl	8000608 <__aeabi_dmul>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4630      	mov	r0, r6
 800c650:	4639      	mov	r1, r7
 800c652:	f7f3 fe23 	bl	800029c <__adddf3>
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	f7f4 fa85 	bl	8000b68 <__aeabi_d2iz>
 800c65e:	2200      	movs	r2, #0
 800c660:	9000      	str	r0, [sp, #0]
 800c662:	2300      	movs	r3, #0
 800c664:	4630      	mov	r0, r6
 800c666:	4639      	mov	r1, r7
 800c668:	f7f4 fa40 	bl	8000aec <__aeabi_dcmplt>
 800c66c:	b150      	cbz	r0, 800c684 <_dtoa_r+0x184>
 800c66e:	9800      	ldr	r0, [sp, #0]
 800c670:	f7f3 ff60 	bl	8000534 <__aeabi_i2d>
 800c674:	4632      	mov	r2, r6
 800c676:	463b      	mov	r3, r7
 800c678:	f7f4 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c67c:	b910      	cbnz	r0, 800c684 <_dtoa_r+0x184>
 800c67e:	9b00      	ldr	r3, [sp, #0]
 800c680:	3b01      	subs	r3, #1
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b16      	cmp	r3, #22
 800c688:	d85a      	bhi.n	800c740 <_dtoa_r+0x240>
 800c68a:	9a00      	ldr	r2, [sp, #0]
 800c68c:	4b57      	ldr	r3, [pc, #348]	; (800c7ec <_dtoa_r+0x2ec>)
 800c68e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	ec51 0b19 	vmov	r0, r1, d9
 800c69a:	f7f4 fa27 	bl	8000aec <__aeabi_dcmplt>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d050      	beq.n	800c744 <_dtoa_r+0x244>
 800c6a2:	9b00      	ldr	r3, [sp, #0]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6ae:	1b5d      	subs	r5, r3, r5
 800c6b0:	1e6b      	subs	r3, r5, #1
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	bf45      	ittet	mi
 800c6b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c6ba:	9304      	strmi	r3, [sp, #16]
 800c6bc:	2300      	movpl	r3, #0
 800c6be:	2300      	movmi	r3, #0
 800c6c0:	bf4c      	ite	mi
 800c6c2:	9305      	strmi	r3, [sp, #20]
 800c6c4:	9304      	strpl	r3, [sp, #16]
 800c6c6:	9b00      	ldr	r3, [sp, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db3d      	blt.n	800c748 <_dtoa_r+0x248>
 800c6cc:	9b05      	ldr	r3, [sp, #20]
 800c6ce:	9a00      	ldr	r2, [sp, #0]
 800c6d0:	920a      	str	r2, [sp, #40]	; 0x28
 800c6d2:	4413      	add	r3, r2
 800c6d4:	9305      	str	r3, [sp, #20]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9307      	str	r3, [sp, #28]
 800c6da:	9b06      	ldr	r3, [sp, #24]
 800c6dc:	2b09      	cmp	r3, #9
 800c6de:	f200 8089 	bhi.w	800c7f4 <_dtoa_r+0x2f4>
 800c6e2:	2b05      	cmp	r3, #5
 800c6e4:	bfc4      	itt	gt
 800c6e6:	3b04      	subgt	r3, #4
 800c6e8:	9306      	strgt	r3, [sp, #24]
 800c6ea:	9b06      	ldr	r3, [sp, #24]
 800c6ec:	f1a3 0302 	sub.w	r3, r3, #2
 800c6f0:	bfcc      	ite	gt
 800c6f2:	2500      	movgt	r5, #0
 800c6f4:	2501      	movle	r5, #1
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	f200 8087 	bhi.w	800c80a <_dtoa_r+0x30a>
 800c6fc:	e8df f003 	tbb	[pc, r3]
 800c700:	59383a2d 	.word	0x59383a2d
 800c704:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c708:	441d      	add	r5, r3
 800c70a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c70e:	2b20      	cmp	r3, #32
 800c710:	bfc1      	itttt	gt
 800c712:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c716:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c71a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c71e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c722:	bfda      	itte	le
 800c724:	f1c3 0320 	rsble	r3, r3, #32
 800c728:	fa06 f003 	lslle.w	r0, r6, r3
 800c72c:	4318      	orrgt	r0, r3
 800c72e:	f7f3 fef1 	bl	8000514 <__aeabi_ui2d>
 800c732:	2301      	movs	r3, #1
 800c734:	4606      	mov	r6, r0
 800c736:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c73a:	3d01      	subs	r5, #1
 800c73c:	930e      	str	r3, [sp, #56]	; 0x38
 800c73e:	e76a      	b.n	800c616 <_dtoa_r+0x116>
 800c740:	2301      	movs	r3, #1
 800c742:	e7b2      	b.n	800c6aa <_dtoa_r+0x1aa>
 800c744:	900b      	str	r0, [sp, #44]	; 0x2c
 800c746:	e7b1      	b.n	800c6ac <_dtoa_r+0x1ac>
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	9a00      	ldr	r2, [sp, #0]
 800c74c:	1a9b      	subs	r3, r3, r2
 800c74e:	9304      	str	r3, [sp, #16]
 800c750:	4253      	negs	r3, r2
 800c752:	9307      	str	r3, [sp, #28]
 800c754:	2300      	movs	r3, #0
 800c756:	930a      	str	r3, [sp, #40]	; 0x28
 800c758:	e7bf      	b.n	800c6da <_dtoa_r+0x1da>
 800c75a:	2300      	movs	r3, #0
 800c75c:	9308      	str	r3, [sp, #32]
 800c75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	dc55      	bgt.n	800c810 <_dtoa_r+0x310>
 800c764:	2301      	movs	r3, #1
 800c766:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c76a:	461a      	mov	r2, r3
 800c76c:	9209      	str	r2, [sp, #36]	; 0x24
 800c76e:	e00c      	b.n	800c78a <_dtoa_r+0x28a>
 800c770:	2301      	movs	r3, #1
 800c772:	e7f3      	b.n	800c75c <_dtoa_r+0x25c>
 800c774:	2300      	movs	r3, #0
 800c776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c778:	9308      	str	r3, [sp, #32]
 800c77a:	9b00      	ldr	r3, [sp, #0]
 800c77c:	4413      	add	r3, r2
 800c77e:	9302      	str	r3, [sp, #8]
 800c780:	3301      	adds	r3, #1
 800c782:	2b01      	cmp	r3, #1
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	bfb8      	it	lt
 800c788:	2301      	movlt	r3, #1
 800c78a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c78c:	2200      	movs	r2, #0
 800c78e:	6042      	str	r2, [r0, #4]
 800c790:	2204      	movs	r2, #4
 800c792:	f102 0614 	add.w	r6, r2, #20
 800c796:	429e      	cmp	r6, r3
 800c798:	6841      	ldr	r1, [r0, #4]
 800c79a:	d93d      	bls.n	800c818 <_dtoa_r+0x318>
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fcb7 	bl	800d110 <_Balloc>
 800c7a2:	9001      	str	r0, [sp, #4]
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d13b      	bne.n	800c820 <_dtoa_r+0x320>
 800c7a8:	4b11      	ldr	r3, [pc, #68]	; (800c7f0 <_dtoa_r+0x2f0>)
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c7b0:	e6c0      	b.n	800c534 <_dtoa_r+0x34>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e7df      	b.n	800c776 <_dtoa_r+0x276>
 800c7b6:	bf00      	nop
 800c7b8:	636f4361 	.word	0x636f4361
 800c7bc:	3fd287a7 	.word	0x3fd287a7
 800c7c0:	8b60c8b3 	.word	0x8b60c8b3
 800c7c4:	3fc68a28 	.word	0x3fc68a28
 800c7c8:	509f79fb 	.word	0x509f79fb
 800c7cc:	3fd34413 	.word	0x3fd34413
 800c7d0:	0800ea2d 	.word	0x0800ea2d
 800c7d4:	0800ea44 	.word	0x0800ea44
 800c7d8:	7ff00000 	.word	0x7ff00000
 800c7dc:	0800ea29 	.word	0x0800ea29
 800c7e0:	0800ea20 	.word	0x0800ea20
 800c7e4:	0800e9fd 	.word	0x0800e9fd
 800c7e8:	3ff80000 	.word	0x3ff80000
 800c7ec:	0800eb38 	.word	0x0800eb38
 800c7f0:	0800ea9f 	.word	0x0800ea9f
 800c7f4:	2501      	movs	r5, #1
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9306      	str	r3, [sp, #24]
 800c7fa:	9508      	str	r5, [sp, #32]
 800c7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c800:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c804:	2200      	movs	r2, #0
 800c806:	2312      	movs	r3, #18
 800c808:	e7b0      	b.n	800c76c <_dtoa_r+0x26c>
 800c80a:	2301      	movs	r3, #1
 800c80c:	9308      	str	r3, [sp, #32]
 800c80e:	e7f5      	b.n	800c7fc <_dtoa_r+0x2fc>
 800c810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c812:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c816:	e7b8      	b.n	800c78a <_dtoa_r+0x28a>
 800c818:	3101      	adds	r1, #1
 800c81a:	6041      	str	r1, [r0, #4]
 800c81c:	0052      	lsls	r2, r2, #1
 800c81e:	e7b8      	b.n	800c792 <_dtoa_r+0x292>
 800c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c822:	9a01      	ldr	r2, [sp, #4]
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	2b0e      	cmp	r3, #14
 800c82a:	f200 809d 	bhi.w	800c968 <_dtoa_r+0x468>
 800c82e:	2d00      	cmp	r5, #0
 800c830:	f000 809a 	beq.w	800c968 <_dtoa_r+0x468>
 800c834:	9b00      	ldr	r3, [sp, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd32      	ble.n	800c8a0 <_dtoa_r+0x3a0>
 800c83a:	4ab7      	ldr	r2, [pc, #732]	; (800cb18 <_dtoa_r+0x618>)
 800c83c:	f003 030f 	and.w	r3, r3, #15
 800c840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c844:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c848:	9b00      	ldr	r3, [sp, #0]
 800c84a:	05d8      	lsls	r0, r3, #23
 800c84c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c850:	d516      	bpl.n	800c880 <_dtoa_r+0x380>
 800c852:	4bb2      	ldr	r3, [pc, #712]	; (800cb1c <_dtoa_r+0x61c>)
 800c854:	ec51 0b19 	vmov	r0, r1, d9
 800c858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c85c:	f7f3 fffe 	bl	800085c <__aeabi_ddiv>
 800c860:	f007 070f 	and.w	r7, r7, #15
 800c864:	4682      	mov	sl, r0
 800c866:	468b      	mov	fp, r1
 800c868:	2503      	movs	r5, #3
 800c86a:	4eac      	ldr	r6, [pc, #688]	; (800cb1c <_dtoa_r+0x61c>)
 800c86c:	b957      	cbnz	r7, 800c884 <_dtoa_r+0x384>
 800c86e:	4642      	mov	r2, r8
 800c870:	464b      	mov	r3, r9
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 fff1 	bl	800085c <__aeabi_ddiv>
 800c87a:	4682      	mov	sl, r0
 800c87c:	468b      	mov	fp, r1
 800c87e:	e028      	b.n	800c8d2 <_dtoa_r+0x3d2>
 800c880:	2502      	movs	r5, #2
 800c882:	e7f2      	b.n	800c86a <_dtoa_r+0x36a>
 800c884:	07f9      	lsls	r1, r7, #31
 800c886:	d508      	bpl.n	800c89a <_dtoa_r+0x39a>
 800c888:	4640      	mov	r0, r8
 800c88a:	4649      	mov	r1, r9
 800c88c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c890:	f7f3 feba 	bl	8000608 <__aeabi_dmul>
 800c894:	3501      	adds	r5, #1
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	107f      	asrs	r7, r7, #1
 800c89c:	3608      	adds	r6, #8
 800c89e:	e7e5      	b.n	800c86c <_dtoa_r+0x36c>
 800c8a0:	f000 809b 	beq.w	800c9da <_dtoa_r+0x4da>
 800c8a4:	9b00      	ldr	r3, [sp, #0]
 800c8a6:	4f9d      	ldr	r7, [pc, #628]	; (800cb1c <_dtoa_r+0x61c>)
 800c8a8:	425e      	negs	r6, r3
 800c8aa:	4b9b      	ldr	r3, [pc, #620]	; (800cb18 <_dtoa_r+0x618>)
 800c8ac:	f006 020f 	and.w	r2, r6, #15
 800c8b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	ec51 0b19 	vmov	r0, r1, d9
 800c8bc:	f7f3 fea4 	bl	8000608 <__aeabi_dmul>
 800c8c0:	1136      	asrs	r6, r6, #4
 800c8c2:	4682      	mov	sl, r0
 800c8c4:	468b      	mov	fp, r1
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	2502      	movs	r5, #2
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	d17a      	bne.n	800c9c4 <_dtoa_r+0x4c4>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1d3      	bne.n	800c87a <_dtoa_r+0x37a>
 800c8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 8082 	beq.w	800c9de <_dtoa_r+0x4de>
 800c8da:	4b91      	ldr	r3, [pc, #580]	; (800cb20 <_dtoa_r+0x620>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	4650      	mov	r0, sl
 800c8e0:	4659      	mov	r1, fp
 800c8e2:	f7f4 f903 	bl	8000aec <__aeabi_dcmplt>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d079      	beq.n	800c9de <_dtoa_r+0x4de>
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d076      	beq.n	800c9de <_dtoa_r+0x4de>
 800c8f0:	9b02      	ldr	r3, [sp, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	dd36      	ble.n	800c964 <_dtoa_r+0x464>
 800c8f6:	9b00      	ldr	r3, [sp, #0]
 800c8f8:	4650      	mov	r0, sl
 800c8fa:	4659      	mov	r1, fp
 800c8fc:	1e5f      	subs	r7, r3, #1
 800c8fe:	2200      	movs	r2, #0
 800c900:	4b88      	ldr	r3, [pc, #544]	; (800cb24 <_dtoa_r+0x624>)
 800c902:	f7f3 fe81 	bl	8000608 <__aeabi_dmul>
 800c906:	9e02      	ldr	r6, [sp, #8]
 800c908:	4682      	mov	sl, r0
 800c90a:	468b      	mov	fp, r1
 800c90c:	3501      	adds	r5, #1
 800c90e:	4628      	mov	r0, r5
 800c910:	f7f3 fe10 	bl	8000534 <__aeabi_i2d>
 800c914:	4652      	mov	r2, sl
 800c916:	465b      	mov	r3, fp
 800c918:	f7f3 fe76 	bl	8000608 <__aeabi_dmul>
 800c91c:	4b82      	ldr	r3, [pc, #520]	; (800cb28 <_dtoa_r+0x628>)
 800c91e:	2200      	movs	r2, #0
 800c920:	f7f3 fcbc 	bl	800029c <__adddf3>
 800c924:	46d0      	mov	r8, sl
 800c926:	46d9      	mov	r9, fp
 800c928:	4682      	mov	sl, r0
 800c92a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c92e:	2e00      	cmp	r6, #0
 800c930:	d158      	bne.n	800c9e4 <_dtoa_r+0x4e4>
 800c932:	4b7e      	ldr	r3, [pc, #504]	; (800cb2c <_dtoa_r+0x62c>)
 800c934:	2200      	movs	r2, #0
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f3 fcad 	bl	8000298 <__aeabi_dsub>
 800c93e:	4652      	mov	r2, sl
 800c940:	465b      	mov	r3, fp
 800c942:	4680      	mov	r8, r0
 800c944:	4689      	mov	r9, r1
 800c946:	f7f4 f8ef 	bl	8000b28 <__aeabi_dcmpgt>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f040 8295 	bne.w	800ce7a <_dtoa_r+0x97a>
 800c950:	4652      	mov	r2, sl
 800c952:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c956:	4640      	mov	r0, r8
 800c958:	4649      	mov	r1, r9
 800c95a:	f7f4 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800c95e:	2800      	cmp	r0, #0
 800c960:	f040 8289 	bne.w	800ce76 <_dtoa_r+0x976>
 800c964:	ec5b ab19 	vmov	sl, fp, d9
 800c968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f2c0 8148 	blt.w	800cc00 <_dtoa_r+0x700>
 800c970:	9a00      	ldr	r2, [sp, #0]
 800c972:	2a0e      	cmp	r2, #14
 800c974:	f300 8144 	bgt.w	800cc00 <_dtoa_r+0x700>
 800c978:	4b67      	ldr	r3, [pc, #412]	; (800cb18 <_dtoa_r+0x618>)
 800c97a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c97e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c984:	2b00      	cmp	r3, #0
 800c986:	f280 80d5 	bge.w	800cb34 <_dtoa_r+0x634>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f300 80d1 	bgt.w	800cb34 <_dtoa_r+0x634>
 800c992:	f040 826f 	bne.w	800ce74 <_dtoa_r+0x974>
 800c996:	4b65      	ldr	r3, [pc, #404]	; (800cb2c <_dtoa_r+0x62c>)
 800c998:	2200      	movs	r2, #0
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f3 fe33 	bl	8000608 <__aeabi_dmul>
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	465b      	mov	r3, fp
 800c9a6:	f7f4 f8b5 	bl	8000b14 <__aeabi_dcmpge>
 800c9aa:	9e03      	ldr	r6, [sp, #12]
 800c9ac:	4637      	mov	r7, r6
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f040 8245 	bne.w	800ce3e <_dtoa_r+0x93e>
 800c9b4:	9d01      	ldr	r5, [sp, #4]
 800c9b6:	2331      	movs	r3, #49	; 0x31
 800c9b8:	f805 3b01 	strb.w	r3, [r5], #1
 800c9bc:	9b00      	ldr	r3, [sp, #0]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	e240      	b.n	800ce46 <_dtoa_r+0x946>
 800c9c4:	07f2      	lsls	r2, r6, #31
 800c9c6:	d505      	bpl.n	800c9d4 <_dtoa_r+0x4d4>
 800c9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9cc:	f7f3 fe1c 	bl	8000608 <__aeabi_dmul>
 800c9d0:	3501      	adds	r5, #1
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	1076      	asrs	r6, r6, #1
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	e777      	b.n	800c8ca <_dtoa_r+0x3ca>
 800c9da:	2502      	movs	r5, #2
 800c9dc:	e779      	b.n	800c8d2 <_dtoa_r+0x3d2>
 800c9de:	9f00      	ldr	r7, [sp, #0]
 800c9e0:	9e03      	ldr	r6, [sp, #12]
 800c9e2:	e794      	b.n	800c90e <_dtoa_r+0x40e>
 800c9e4:	9901      	ldr	r1, [sp, #4]
 800c9e6:	4b4c      	ldr	r3, [pc, #304]	; (800cb18 <_dtoa_r+0x618>)
 800c9e8:	4431      	add	r1, r6
 800c9ea:	910d      	str	r1, [sp, #52]	; 0x34
 800c9ec:	9908      	ldr	r1, [sp, #32]
 800c9ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c9f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d043      	beq.n	800ca82 <_dtoa_r+0x582>
 800c9fa:	494d      	ldr	r1, [pc, #308]	; (800cb30 <_dtoa_r+0x630>)
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f7f3 ff2d 	bl	800085c <__aeabi_ddiv>
 800ca02:	4652      	mov	r2, sl
 800ca04:	465b      	mov	r3, fp
 800ca06:	f7f3 fc47 	bl	8000298 <__aeabi_dsub>
 800ca0a:	9d01      	ldr	r5, [sp, #4]
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	468b      	mov	fp, r1
 800ca10:	4649      	mov	r1, r9
 800ca12:	4640      	mov	r0, r8
 800ca14:	f7f4 f8a8 	bl	8000b68 <__aeabi_d2iz>
 800ca18:	4606      	mov	r6, r0
 800ca1a:	f7f3 fd8b 	bl	8000534 <__aeabi_i2d>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4640      	mov	r0, r8
 800ca24:	4649      	mov	r1, r9
 800ca26:	f7f3 fc37 	bl	8000298 <__aeabi_dsub>
 800ca2a:	3630      	adds	r6, #48	; 0x30
 800ca2c:	f805 6b01 	strb.w	r6, [r5], #1
 800ca30:	4652      	mov	r2, sl
 800ca32:	465b      	mov	r3, fp
 800ca34:	4680      	mov	r8, r0
 800ca36:	4689      	mov	r9, r1
 800ca38:	f7f4 f858 	bl	8000aec <__aeabi_dcmplt>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d163      	bne.n	800cb08 <_dtoa_r+0x608>
 800ca40:	4642      	mov	r2, r8
 800ca42:	464b      	mov	r3, r9
 800ca44:	4936      	ldr	r1, [pc, #216]	; (800cb20 <_dtoa_r+0x620>)
 800ca46:	2000      	movs	r0, #0
 800ca48:	f7f3 fc26 	bl	8000298 <__aeabi_dsub>
 800ca4c:	4652      	mov	r2, sl
 800ca4e:	465b      	mov	r3, fp
 800ca50:	f7f4 f84c 	bl	8000aec <__aeabi_dcmplt>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	f040 80b5 	bne.w	800cbc4 <_dtoa_r+0x6c4>
 800ca5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca5c:	429d      	cmp	r5, r3
 800ca5e:	d081      	beq.n	800c964 <_dtoa_r+0x464>
 800ca60:	4b30      	ldr	r3, [pc, #192]	; (800cb24 <_dtoa_r+0x624>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	4650      	mov	r0, sl
 800ca66:	4659      	mov	r1, fp
 800ca68:	f7f3 fdce 	bl	8000608 <__aeabi_dmul>
 800ca6c:	4b2d      	ldr	r3, [pc, #180]	; (800cb24 <_dtoa_r+0x624>)
 800ca6e:	4682      	mov	sl, r0
 800ca70:	468b      	mov	fp, r1
 800ca72:	4640      	mov	r0, r8
 800ca74:	4649      	mov	r1, r9
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f3 fdc6 	bl	8000608 <__aeabi_dmul>
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	4689      	mov	r9, r1
 800ca80:	e7c6      	b.n	800ca10 <_dtoa_r+0x510>
 800ca82:	4650      	mov	r0, sl
 800ca84:	4659      	mov	r1, fp
 800ca86:	f7f3 fdbf 	bl	8000608 <__aeabi_dmul>
 800ca8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca8c:	9d01      	ldr	r5, [sp, #4]
 800ca8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca90:	4682      	mov	sl, r0
 800ca92:	468b      	mov	fp, r1
 800ca94:	4649      	mov	r1, r9
 800ca96:	4640      	mov	r0, r8
 800ca98:	f7f4 f866 	bl	8000b68 <__aeabi_d2iz>
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	f7f3 fd49 	bl	8000534 <__aeabi_i2d>
 800caa2:	3630      	adds	r6, #48	; 0x30
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4640      	mov	r0, r8
 800caaa:	4649      	mov	r1, r9
 800caac:	f7f3 fbf4 	bl	8000298 <__aeabi_dsub>
 800cab0:	f805 6b01 	strb.w	r6, [r5], #1
 800cab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab6:	429d      	cmp	r5, r3
 800cab8:	4680      	mov	r8, r0
 800caba:	4689      	mov	r9, r1
 800cabc:	f04f 0200 	mov.w	r2, #0
 800cac0:	d124      	bne.n	800cb0c <_dtoa_r+0x60c>
 800cac2:	4b1b      	ldr	r3, [pc, #108]	; (800cb30 <_dtoa_r+0x630>)
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	f7f3 fbe8 	bl	800029c <__adddf3>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4640      	mov	r0, r8
 800cad2:	4649      	mov	r1, r9
 800cad4:	f7f4 f828 	bl	8000b28 <__aeabi_dcmpgt>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d173      	bne.n	800cbc4 <_dtoa_r+0x6c4>
 800cadc:	4652      	mov	r2, sl
 800cade:	465b      	mov	r3, fp
 800cae0:	4913      	ldr	r1, [pc, #76]	; (800cb30 <_dtoa_r+0x630>)
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7f3 fbd8 	bl	8000298 <__aeabi_dsub>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4640      	mov	r0, r8
 800caee:	4649      	mov	r1, r9
 800caf0:	f7f3 fffc 	bl	8000aec <__aeabi_dcmplt>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f43f af35 	beq.w	800c964 <_dtoa_r+0x464>
 800cafa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cafc:	1e6b      	subs	r3, r5, #1
 800cafe:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb04:	2b30      	cmp	r3, #48	; 0x30
 800cb06:	d0f8      	beq.n	800cafa <_dtoa_r+0x5fa>
 800cb08:	9700      	str	r7, [sp, #0]
 800cb0a:	e049      	b.n	800cba0 <_dtoa_r+0x6a0>
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <_dtoa_r+0x624>)
 800cb0e:	f7f3 fd7b 	bl	8000608 <__aeabi_dmul>
 800cb12:	4680      	mov	r8, r0
 800cb14:	4689      	mov	r9, r1
 800cb16:	e7bd      	b.n	800ca94 <_dtoa_r+0x594>
 800cb18:	0800eb38 	.word	0x0800eb38
 800cb1c:	0800eb10 	.word	0x0800eb10
 800cb20:	3ff00000 	.word	0x3ff00000
 800cb24:	40240000 	.word	0x40240000
 800cb28:	401c0000 	.word	0x401c0000
 800cb2c:	40140000 	.word	0x40140000
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	9d01      	ldr	r5, [sp, #4]
 800cb36:	4656      	mov	r6, sl
 800cb38:	465f      	mov	r7, fp
 800cb3a:	4642      	mov	r2, r8
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4639      	mov	r1, r7
 800cb42:	f7f3 fe8b 	bl	800085c <__aeabi_ddiv>
 800cb46:	f7f4 f80f 	bl	8000b68 <__aeabi_d2iz>
 800cb4a:	4682      	mov	sl, r0
 800cb4c:	f7f3 fcf2 	bl	8000534 <__aeabi_i2d>
 800cb50:	4642      	mov	r2, r8
 800cb52:	464b      	mov	r3, r9
 800cb54:	f7f3 fd58 	bl	8000608 <__aeabi_dmul>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cb64:	f7f3 fb98 	bl	8000298 <__aeabi_dsub>
 800cb68:	f805 6b01 	strb.w	r6, [r5], #1
 800cb6c:	9e01      	ldr	r6, [sp, #4]
 800cb6e:	9f03      	ldr	r7, [sp, #12]
 800cb70:	1bae      	subs	r6, r5, r6
 800cb72:	42b7      	cmp	r7, r6
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	d135      	bne.n	800cbe6 <_dtoa_r+0x6e6>
 800cb7a:	f7f3 fb8f 	bl	800029c <__adddf3>
 800cb7e:	4642      	mov	r2, r8
 800cb80:	464b      	mov	r3, r9
 800cb82:	4606      	mov	r6, r0
 800cb84:	460f      	mov	r7, r1
 800cb86:	f7f3 ffcf 	bl	8000b28 <__aeabi_dcmpgt>
 800cb8a:	b9d0      	cbnz	r0, 800cbc2 <_dtoa_r+0x6c2>
 800cb8c:	4642      	mov	r2, r8
 800cb8e:	464b      	mov	r3, r9
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	f7f3 ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb98:	b110      	cbz	r0, 800cba0 <_dtoa_r+0x6a0>
 800cb9a:	f01a 0f01 	tst.w	sl, #1
 800cb9e:	d110      	bne.n	800cbc2 <_dtoa_r+0x6c2>
 800cba0:	4620      	mov	r0, r4
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	f000 faf3 	bl	800d190 <_Bfree>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	9800      	ldr	r0, [sp, #0]
 800cbae:	702b      	strb	r3, [r5, #0]
 800cbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	6018      	str	r0, [r3, #0]
 800cbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f43f acf1 	beq.w	800c5a0 <_dtoa_r+0xa0>
 800cbbe:	601d      	str	r5, [r3, #0]
 800cbc0:	e4ee      	b.n	800c5a0 <_dtoa_r+0xa0>
 800cbc2:	9f00      	ldr	r7, [sp, #0]
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	461d      	mov	r5, r3
 800cbc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbcc:	2a39      	cmp	r2, #57	; 0x39
 800cbce:	d106      	bne.n	800cbde <_dtoa_r+0x6de>
 800cbd0:	9a01      	ldr	r2, [sp, #4]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d1f7      	bne.n	800cbc6 <_dtoa_r+0x6c6>
 800cbd6:	9901      	ldr	r1, [sp, #4]
 800cbd8:	2230      	movs	r2, #48	; 0x30
 800cbda:	3701      	adds	r7, #1
 800cbdc:	700a      	strb	r2, [r1, #0]
 800cbde:	781a      	ldrb	r2, [r3, #0]
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e790      	b.n	800cb08 <_dtoa_r+0x608>
 800cbe6:	4ba6      	ldr	r3, [pc, #664]	; (800ce80 <_dtoa_r+0x980>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f7f3 fd0d 	bl	8000608 <__aeabi_dmul>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460f      	mov	r7, r1
 800cbf6:	f7f3 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d09d      	beq.n	800cb3a <_dtoa_r+0x63a>
 800cbfe:	e7cf      	b.n	800cba0 <_dtoa_r+0x6a0>
 800cc00:	9a08      	ldr	r2, [sp, #32]
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	f000 80d7 	beq.w	800cdb6 <_dtoa_r+0x8b6>
 800cc08:	9a06      	ldr	r2, [sp, #24]
 800cc0a:	2a01      	cmp	r2, #1
 800cc0c:	f300 80ba 	bgt.w	800cd84 <_dtoa_r+0x884>
 800cc10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc12:	2a00      	cmp	r2, #0
 800cc14:	f000 80b2 	beq.w	800cd7c <_dtoa_r+0x87c>
 800cc18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc1c:	9e07      	ldr	r6, [sp, #28]
 800cc1e:	9d04      	ldr	r5, [sp, #16]
 800cc20:	9a04      	ldr	r2, [sp, #16]
 800cc22:	441a      	add	r2, r3
 800cc24:	9204      	str	r2, [sp, #16]
 800cc26:	9a05      	ldr	r2, [sp, #20]
 800cc28:	2101      	movs	r1, #1
 800cc2a:	441a      	add	r2, r3
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	9205      	str	r2, [sp, #20]
 800cc30:	f000 fb66 	bl	800d300 <__i2b>
 800cc34:	4607      	mov	r7, r0
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	dd0c      	ble.n	800cc54 <_dtoa_r+0x754>
 800cc3a:	9b05      	ldr	r3, [sp, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dd09      	ble.n	800cc54 <_dtoa_r+0x754>
 800cc40:	42ab      	cmp	r3, r5
 800cc42:	9a04      	ldr	r2, [sp, #16]
 800cc44:	bfa8      	it	ge
 800cc46:	462b      	movge	r3, r5
 800cc48:	1ad2      	subs	r2, r2, r3
 800cc4a:	9204      	str	r2, [sp, #16]
 800cc4c:	9a05      	ldr	r2, [sp, #20]
 800cc4e:	1aed      	subs	r5, r5, r3
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	9305      	str	r3, [sp, #20]
 800cc54:	9b07      	ldr	r3, [sp, #28]
 800cc56:	b31b      	cbz	r3, 800cca0 <_dtoa_r+0x7a0>
 800cc58:	9b08      	ldr	r3, [sp, #32]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80af 	beq.w	800cdbe <_dtoa_r+0x8be>
 800cc60:	2e00      	cmp	r6, #0
 800cc62:	dd13      	ble.n	800cc8c <_dtoa_r+0x78c>
 800cc64:	4639      	mov	r1, r7
 800cc66:	4632      	mov	r2, r6
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 fc09 	bl	800d480 <__pow5mult>
 800cc6e:	ee18 2a10 	vmov	r2, s16
 800cc72:	4601      	mov	r1, r0
 800cc74:	4607      	mov	r7, r0
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fb58 	bl	800d32c <__multiply>
 800cc7c:	ee18 1a10 	vmov	r1, s16
 800cc80:	4680      	mov	r8, r0
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fa84 	bl	800d190 <_Bfree>
 800cc88:	ee08 8a10 	vmov	s16, r8
 800cc8c:	9b07      	ldr	r3, [sp, #28]
 800cc8e:	1b9a      	subs	r2, r3, r6
 800cc90:	d006      	beq.n	800cca0 <_dtoa_r+0x7a0>
 800cc92:	ee18 1a10 	vmov	r1, s16
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 fbf2 	bl	800d480 <__pow5mult>
 800cc9c:	ee08 0a10 	vmov	s16, r0
 800cca0:	2101      	movs	r1, #1
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fb2c 	bl	800d300 <__i2b>
 800cca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	4606      	mov	r6, r0
 800ccae:	f340 8088 	ble.w	800cdc2 <_dtoa_r+0x8c2>
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 fbe2 	bl	800d480 <__pow5mult>
 800ccbc:	9b06      	ldr	r3, [sp, #24]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	f340 8081 	ble.w	800cdc8 <_dtoa_r+0x8c8>
 800ccc6:	f04f 0800 	mov.w	r8, #0
 800ccca:	6933      	ldr	r3, [r6, #16]
 800cccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ccd0:	6918      	ldr	r0, [r3, #16]
 800ccd2:	f000 fac5 	bl	800d260 <__hi0bits>
 800ccd6:	f1c0 0020 	rsb	r0, r0, #32
 800ccda:	9b05      	ldr	r3, [sp, #20]
 800ccdc:	4418      	add	r0, r3
 800ccde:	f010 001f 	ands.w	r0, r0, #31
 800cce2:	f000 8092 	beq.w	800ce0a <_dtoa_r+0x90a>
 800cce6:	f1c0 0320 	rsb	r3, r0, #32
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	f340 808a 	ble.w	800ce04 <_dtoa_r+0x904>
 800ccf0:	f1c0 001c 	rsb	r0, r0, #28
 800ccf4:	9b04      	ldr	r3, [sp, #16]
 800ccf6:	4403      	add	r3, r0
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	4403      	add	r3, r0
 800ccfe:	4405      	add	r5, r0
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	9b04      	ldr	r3, [sp, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd07      	ble.n	800cd18 <_dtoa_r+0x818>
 800cd08:	ee18 1a10 	vmov	r1, s16
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f000 fc10 	bl	800d534 <__lshift>
 800cd14:	ee08 0a10 	vmov	s16, r0
 800cd18:	9b05      	ldr	r3, [sp, #20]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dd05      	ble.n	800cd2a <_dtoa_r+0x82a>
 800cd1e:	4631      	mov	r1, r6
 800cd20:	461a      	mov	r2, r3
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 fc06 	bl	800d534 <__lshift>
 800cd28:	4606      	mov	r6, r0
 800cd2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d06e      	beq.n	800ce0e <_dtoa_r+0x90e>
 800cd30:	ee18 0a10 	vmov	r0, s16
 800cd34:	4631      	mov	r1, r6
 800cd36:	f000 fc6d 	bl	800d614 <__mcmp>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	da67      	bge.n	800ce0e <_dtoa_r+0x90e>
 800cd3e:	9b00      	ldr	r3, [sp, #0]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	ee18 1a10 	vmov	r1, s16
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	220a      	movs	r2, #10
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fa41 	bl	800d1d4 <__multadd>
 800cd52:	9b08      	ldr	r3, [sp, #32]
 800cd54:	ee08 0a10 	vmov	s16, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 81b1 	beq.w	800d0c0 <_dtoa_r+0xbc0>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	4639      	mov	r1, r7
 800cd62:	220a      	movs	r2, #10
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fa35 	bl	800d1d4 <__multadd>
 800cd6a:	9b02      	ldr	r3, [sp, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	4607      	mov	r7, r0
 800cd70:	f300 808e 	bgt.w	800ce90 <_dtoa_r+0x990>
 800cd74:	9b06      	ldr	r3, [sp, #24]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	dc51      	bgt.n	800ce1e <_dtoa_r+0x91e>
 800cd7a:	e089      	b.n	800ce90 <_dtoa_r+0x990>
 800cd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cd82:	e74b      	b.n	800cc1c <_dtoa_r+0x71c>
 800cd84:	9b03      	ldr	r3, [sp, #12]
 800cd86:	1e5e      	subs	r6, r3, #1
 800cd88:	9b07      	ldr	r3, [sp, #28]
 800cd8a:	42b3      	cmp	r3, r6
 800cd8c:	bfbf      	itttt	lt
 800cd8e:	9b07      	ldrlt	r3, [sp, #28]
 800cd90:	9607      	strlt	r6, [sp, #28]
 800cd92:	1af2      	sublt	r2, r6, r3
 800cd94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cd96:	bfb6      	itet	lt
 800cd98:	189b      	addlt	r3, r3, r2
 800cd9a:	1b9e      	subge	r6, r3, r6
 800cd9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cd9e:	9b03      	ldr	r3, [sp, #12]
 800cda0:	bfb8      	it	lt
 800cda2:	2600      	movlt	r6, #0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	bfb7      	itett	lt
 800cda8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cdac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cdb0:	1a9d      	sublt	r5, r3, r2
 800cdb2:	2300      	movlt	r3, #0
 800cdb4:	e734      	b.n	800cc20 <_dtoa_r+0x720>
 800cdb6:	9e07      	ldr	r6, [sp, #28]
 800cdb8:	9d04      	ldr	r5, [sp, #16]
 800cdba:	9f08      	ldr	r7, [sp, #32]
 800cdbc:	e73b      	b.n	800cc36 <_dtoa_r+0x736>
 800cdbe:	9a07      	ldr	r2, [sp, #28]
 800cdc0:	e767      	b.n	800cc92 <_dtoa_r+0x792>
 800cdc2:	9b06      	ldr	r3, [sp, #24]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	dc18      	bgt.n	800cdfa <_dtoa_r+0x8fa>
 800cdc8:	f1ba 0f00 	cmp.w	sl, #0
 800cdcc:	d115      	bne.n	800cdfa <_dtoa_r+0x8fa>
 800cdce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdd2:	b993      	cbnz	r3, 800cdfa <_dtoa_r+0x8fa>
 800cdd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cdd8:	0d1b      	lsrs	r3, r3, #20
 800cdda:	051b      	lsls	r3, r3, #20
 800cddc:	b183      	cbz	r3, 800ce00 <_dtoa_r+0x900>
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	3301      	adds	r3, #1
 800cde2:	9304      	str	r3, [sp, #16]
 800cde4:	9b05      	ldr	r3, [sp, #20]
 800cde6:	3301      	adds	r3, #1
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	f04f 0801 	mov.w	r8, #1
 800cdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f af6a 	bne.w	800ccca <_dtoa_r+0x7ca>
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	e76f      	b.n	800ccda <_dtoa_r+0x7da>
 800cdfa:	f04f 0800 	mov.w	r8, #0
 800cdfe:	e7f6      	b.n	800cdee <_dtoa_r+0x8ee>
 800ce00:	4698      	mov	r8, r3
 800ce02:	e7f4      	b.n	800cdee <_dtoa_r+0x8ee>
 800ce04:	f43f af7d 	beq.w	800cd02 <_dtoa_r+0x802>
 800ce08:	4618      	mov	r0, r3
 800ce0a:	301c      	adds	r0, #28
 800ce0c:	e772      	b.n	800ccf4 <_dtoa_r+0x7f4>
 800ce0e:	9b03      	ldr	r3, [sp, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc37      	bgt.n	800ce84 <_dtoa_r+0x984>
 800ce14:	9b06      	ldr	r3, [sp, #24]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	dd34      	ble.n	800ce84 <_dtoa_r+0x984>
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	9302      	str	r3, [sp, #8]
 800ce1e:	9b02      	ldr	r3, [sp, #8]
 800ce20:	b96b      	cbnz	r3, 800ce3e <_dtoa_r+0x93e>
 800ce22:	4631      	mov	r1, r6
 800ce24:	2205      	movs	r2, #5
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f9d4 	bl	800d1d4 <__multadd>
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	4606      	mov	r6, r0
 800ce30:	ee18 0a10 	vmov	r0, s16
 800ce34:	f000 fbee 	bl	800d614 <__mcmp>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	f73f adbb 	bgt.w	800c9b4 <_dtoa_r+0x4b4>
 800ce3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce40:	9d01      	ldr	r5, [sp, #4]
 800ce42:	43db      	mvns	r3, r3
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	f04f 0800 	mov.w	r8, #0
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 f99f 	bl	800d190 <_Bfree>
 800ce52:	2f00      	cmp	r7, #0
 800ce54:	f43f aea4 	beq.w	800cba0 <_dtoa_r+0x6a0>
 800ce58:	f1b8 0f00 	cmp.w	r8, #0
 800ce5c:	d005      	beq.n	800ce6a <_dtoa_r+0x96a>
 800ce5e:	45b8      	cmp	r8, r7
 800ce60:	d003      	beq.n	800ce6a <_dtoa_r+0x96a>
 800ce62:	4641      	mov	r1, r8
 800ce64:	4620      	mov	r0, r4
 800ce66:	f000 f993 	bl	800d190 <_Bfree>
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 f98f 	bl	800d190 <_Bfree>
 800ce72:	e695      	b.n	800cba0 <_dtoa_r+0x6a0>
 800ce74:	2600      	movs	r6, #0
 800ce76:	4637      	mov	r7, r6
 800ce78:	e7e1      	b.n	800ce3e <_dtoa_r+0x93e>
 800ce7a:	9700      	str	r7, [sp, #0]
 800ce7c:	4637      	mov	r7, r6
 800ce7e:	e599      	b.n	800c9b4 <_dtoa_r+0x4b4>
 800ce80:	40240000 	.word	0x40240000
 800ce84:	9b08      	ldr	r3, [sp, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f000 80ca 	beq.w	800d020 <_dtoa_r+0xb20>
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	9302      	str	r3, [sp, #8]
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	dd05      	ble.n	800cea0 <_dtoa_r+0x9a0>
 800ce94:	4639      	mov	r1, r7
 800ce96:	462a      	mov	r2, r5
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f000 fb4b 	bl	800d534 <__lshift>
 800ce9e:	4607      	mov	r7, r0
 800cea0:	f1b8 0f00 	cmp.w	r8, #0
 800cea4:	d05b      	beq.n	800cf5e <_dtoa_r+0xa5e>
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f000 f931 	bl	800d110 <_Balloc>
 800ceae:	4605      	mov	r5, r0
 800ceb0:	b928      	cbnz	r0, 800cebe <_dtoa_r+0x9be>
 800ceb2:	4b87      	ldr	r3, [pc, #540]	; (800d0d0 <_dtoa_r+0xbd0>)
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ceba:	f7ff bb3b 	b.w	800c534 <_dtoa_r+0x34>
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	3202      	adds	r2, #2
 800cec2:	0092      	lsls	r2, r2, #2
 800cec4:	f107 010c 	add.w	r1, r7, #12
 800cec8:	300c      	adds	r0, #12
 800ceca:	f000 f913 	bl	800d0f4 <memcpy>
 800cece:	2201      	movs	r2, #1
 800ced0:	4629      	mov	r1, r5
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 fb2e 	bl	800d534 <__lshift>
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	f103 0901 	add.w	r9, r3, #1
 800cede:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cee2:	4413      	add	r3, r2
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	f00a 0301 	and.w	r3, sl, #1
 800ceea:	46b8      	mov	r8, r7
 800ceec:	9304      	str	r3, [sp, #16]
 800ceee:	4607      	mov	r7, r0
 800cef0:	4631      	mov	r1, r6
 800cef2:	ee18 0a10 	vmov	r0, s16
 800cef6:	f7ff fa75 	bl	800c3e4 <quorem>
 800cefa:	4641      	mov	r1, r8
 800cefc:	9002      	str	r0, [sp, #8]
 800cefe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf02:	ee18 0a10 	vmov	r0, s16
 800cf06:	f000 fb85 	bl	800d614 <__mcmp>
 800cf0a:	463a      	mov	r2, r7
 800cf0c:	9003      	str	r0, [sp, #12]
 800cf0e:	4631      	mov	r1, r6
 800cf10:	4620      	mov	r0, r4
 800cf12:	f000 fb9b 	bl	800d64c <__mdiff>
 800cf16:	68c2      	ldr	r2, [r0, #12]
 800cf18:	f109 3bff 	add.w	fp, r9, #4294967295
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	bb02      	cbnz	r2, 800cf62 <_dtoa_r+0xa62>
 800cf20:	4601      	mov	r1, r0
 800cf22:	ee18 0a10 	vmov	r0, s16
 800cf26:	f000 fb75 	bl	800d614 <__mcmp>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4620      	mov	r0, r4
 800cf30:	9207      	str	r2, [sp, #28]
 800cf32:	f000 f92d 	bl	800d190 <_Bfree>
 800cf36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cf3a:	ea43 0102 	orr.w	r1, r3, r2
 800cf3e:	9b04      	ldr	r3, [sp, #16]
 800cf40:	430b      	orrs	r3, r1
 800cf42:	464d      	mov	r5, r9
 800cf44:	d10f      	bne.n	800cf66 <_dtoa_r+0xa66>
 800cf46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf4a:	d02a      	beq.n	800cfa2 <_dtoa_r+0xaa2>
 800cf4c:	9b03      	ldr	r3, [sp, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd02      	ble.n	800cf58 <_dtoa_r+0xa58>
 800cf52:	9b02      	ldr	r3, [sp, #8]
 800cf54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cf58:	f88b a000 	strb.w	sl, [fp]
 800cf5c:	e775      	b.n	800ce4a <_dtoa_r+0x94a>
 800cf5e:	4638      	mov	r0, r7
 800cf60:	e7ba      	b.n	800ced8 <_dtoa_r+0x9d8>
 800cf62:	2201      	movs	r2, #1
 800cf64:	e7e2      	b.n	800cf2c <_dtoa_r+0xa2c>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	db04      	blt.n	800cf76 <_dtoa_r+0xa76>
 800cf6c:	9906      	ldr	r1, [sp, #24]
 800cf6e:	430b      	orrs	r3, r1
 800cf70:	9904      	ldr	r1, [sp, #16]
 800cf72:	430b      	orrs	r3, r1
 800cf74:	d122      	bne.n	800cfbc <_dtoa_r+0xabc>
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	ddee      	ble.n	800cf58 <_dtoa_r+0xa58>
 800cf7a:	ee18 1a10 	vmov	r1, s16
 800cf7e:	2201      	movs	r2, #1
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 fad7 	bl	800d534 <__lshift>
 800cf86:	4631      	mov	r1, r6
 800cf88:	ee08 0a10 	vmov	s16, r0
 800cf8c:	f000 fb42 	bl	800d614 <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	dc03      	bgt.n	800cf9c <_dtoa_r+0xa9c>
 800cf94:	d1e0      	bne.n	800cf58 <_dtoa_r+0xa58>
 800cf96:	f01a 0f01 	tst.w	sl, #1
 800cf9a:	d0dd      	beq.n	800cf58 <_dtoa_r+0xa58>
 800cf9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfa0:	d1d7      	bne.n	800cf52 <_dtoa_r+0xa52>
 800cfa2:	2339      	movs	r3, #57	; 0x39
 800cfa4:	f88b 3000 	strb.w	r3, [fp]
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	461d      	mov	r5, r3
 800cfac:	3b01      	subs	r3, #1
 800cfae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cfb2:	2a39      	cmp	r2, #57	; 0x39
 800cfb4:	d071      	beq.n	800d09a <_dtoa_r+0xb9a>
 800cfb6:	3201      	adds	r2, #1
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	e746      	b.n	800ce4a <_dtoa_r+0x94a>
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	dd07      	ble.n	800cfd0 <_dtoa_r+0xad0>
 800cfc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfc4:	d0ed      	beq.n	800cfa2 <_dtoa_r+0xaa2>
 800cfc6:	f10a 0301 	add.w	r3, sl, #1
 800cfca:	f88b 3000 	strb.w	r3, [fp]
 800cfce:	e73c      	b.n	800ce4a <_dtoa_r+0x94a>
 800cfd0:	9b05      	ldr	r3, [sp, #20]
 800cfd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cfd6:	4599      	cmp	r9, r3
 800cfd8:	d047      	beq.n	800d06a <_dtoa_r+0xb6a>
 800cfda:	ee18 1a10 	vmov	r1, s16
 800cfde:	2300      	movs	r3, #0
 800cfe0:	220a      	movs	r2, #10
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 f8f6 	bl	800d1d4 <__multadd>
 800cfe8:	45b8      	cmp	r8, r7
 800cfea:	ee08 0a10 	vmov	s16, r0
 800cfee:	f04f 0300 	mov.w	r3, #0
 800cff2:	f04f 020a 	mov.w	r2, #10
 800cff6:	4641      	mov	r1, r8
 800cff8:	4620      	mov	r0, r4
 800cffa:	d106      	bne.n	800d00a <_dtoa_r+0xb0a>
 800cffc:	f000 f8ea 	bl	800d1d4 <__multadd>
 800d000:	4680      	mov	r8, r0
 800d002:	4607      	mov	r7, r0
 800d004:	f109 0901 	add.w	r9, r9, #1
 800d008:	e772      	b.n	800cef0 <_dtoa_r+0x9f0>
 800d00a:	f000 f8e3 	bl	800d1d4 <__multadd>
 800d00e:	4639      	mov	r1, r7
 800d010:	4680      	mov	r8, r0
 800d012:	2300      	movs	r3, #0
 800d014:	220a      	movs	r2, #10
 800d016:	4620      	mov	r0, r4
 800d018:	f000 f8dc 	bl	800d1d4 <__multadd>
 800d01c:	4607      	mov	r7, r0
 800d01e:	e7f1      	b.n	800d004 <_dtoa_r+0xb04>
 800d020:	9b03      	ldr	r3, [sp, #12]
 800d022:	9302      	str	r3, [sp, #8]
 800d024:	9d01      	ldr	r5, [sp, #4]
 800d026:	ee18 0a10 	vmov	r0, s16
 800d02a:	4631      	mov	r1, r6
 800d02c:	f7ff f9da 	bl	800c3e4 <quorem>
 800d030:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	f805 ab01 	strb.w	sl, [r5], #1
 800d03a:	1aea      	subs	r2, r5, r3
 800d03c:	9b02      	ldr	r3, [sp, #8]
 800d03e:	4293      	cmp	r3, r2
 800d040:	dd09      	ble.n	800d056 <_dtoa_r+0xb56>
 800d042:	ee18 1a10 	vmov	r1, s16
 800d046:	2300      	movs	r3, #0
 800d048:	220a      	movs	r2, #10
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 f8c2 	bl	800d1d4 <__multadd>
 800d050:	ee08 0a10 	vmov	s16, r0
 800d054:	e7e7      	b.n	800d026 <_dtoa_r+0xb26>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bfc8      	it	gt
 800d05c:	461d      	movgt	r5, r3
 800d05e:	9b01      	ldr	r3, [sp, #4]
 800d060:	bfd8      	it	le
 800d062:	2501      	movle	r5, #1
 800d064:	441d      	add	r5, r3
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	ee18 1a10 	vmov	r1, s16
 800d06e:	2201      	movs	r2, #1
 800d070:	4620      	mov	r0, r4
 800d072:	f000 fa5f 	bl	800d534 <__lshift>
 800d076:	4631      	mov	r1, r6
 800d078:	ee08 0a10 	vmov	s16, r0
 800d07c:	f000 faca 	bl	800d614 <__mcmp>
 800d080:	2800      	cmp	r0, #0
 800d082:	dc91      	bgt.n	800cfa8 <_dtoa_r+0xaa8>
 800d084:	d102      	bne.n	800d08c <_dtoa_r+0xb8c>
 800d086:	f01a 0f01 	tst.w	sl, #1
 800d08a:	d18d      	bne.n	800cfa8 <_dtoa_r+0xaa8>
 800d08c:	462b      	mov	r3, r5
 800d08e:	461d      	mov	r5, r3
 800d090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d094:	2a30      	cmp	r2, #48	; 0x30
 800d096:	d0fa      	beq.n	800d08e <_dtoa_r+0xb8e>
 800d098:	e6d7      	b.n	800ce4a <_dtoa_r+0x94a>
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d184      	bne.n	800cfaa <_dtoa_r+0xaaa>
 800d0a0:	9b00      	ldr	r3, [sp, #0]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	2331      	movs	r3, #49	; 0x31
 800d0a8:	7013      	strb	r3, [r2, #0]
 800d0aa:	e6ce      	b.n	800ce4a <_dtoa_r+0x94a>
 800d0ac:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <_dtoa_r+0xbd4>)
 800d0ae:	f7ff ba95 	b.w	800c5dc <_dtoa_r+0xdc>
 800d0b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f47f aa6e 	bne.w	800c596 <_dtoa_r+0x96>
 800d0ba:	4b07      	ldr	r3, [pc, #28]	; (800d0d8 <_dtoa_r+0xbd8>)
 800d0bc:	f7ff ba8e 	b.w	800c5dc <_dtoa_r+0xdc>
 800d0c0:	9b02      	ldr	r3, [sp, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dcae      	bgt.n	800d024 <_dtoa_r+0xb24>
 800d0c6:	9b06      	ldr	r3, [sp, #24]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	f73f aea8 	bgt.w	800ce1e <_dtoa_r+0x91e>
 800d0ce:	e7a9      	b.n	800d024 <_dtoa_r+0xb24>
 800d0d0:	0800ea9f 	.word	0x0800ea9f
 800d0d4:	0800e9fc 	.word	0x0800e9fc
 800d0d8:	0800ea20 	.word	0x0800ea20

0800d0dc <_localeconv_r>:
 800d0dc:	4800      	ldr	r0, [pc, #0]	; (800d0e0 <_localeconv_r+0x4>)
 800d0de:	4770      	bx	lr
 800d0e0:	2000025c 	.word	0x2000025c

0800d0e4 <malloc>:
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <malloc+0xc>)
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f000 bc17 	b.w	800d91c <_malloc_r>
 800d0ee:	bf00      	nop
 800d0f0:	20000108 	.word	0x20000108

0800d0f4 <memcpy>:
 800d0f4:	440a      	add	r2, r1
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0fc:	d100      	bne.n	800d100 <memcpy+0xc>
 800d0fe:	4770      	bx	lr
 800d100:	b510      	push	{r4, lr}
 800d102:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d10a:	4291      	cmp	r1, r2
 800d10c:	d1f9      	bne.n	800d102 <memcpy+0xe>
 800d10e:	bd10      	pop	{r4, pc}

0800d110 <_Balloc>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	b976      	cbnz	r6, 800d138 <_Balloc+0x28>
 800d11a:	2010      	movs	r0, #16
 800d11c:	f7ff ffe2 	bl	800d0e4 <malloc>
 800d120:	4602      	mov	r2, r0
 800d122:	6260      	str	r0, [r4, #36]	; 0x24
 800d124:	b920      	cbnz	r0, 800d130 <_Balloc+0x20>
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <_Balloc+0x78>)
 800d128:	4818      	ldr	r0, [pc, #96]	; (800d18c <_Balloc+0x7c>)
 800d12a:	2166      	movs	r1, #102	; 0x66
 800d12c:	f000 fdd6 	bl	800dcdc <__assert_func>
 800d130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d134:	6006      	str	r6, [r0, #0]
 800d136:	60c6      	str	r6, [r0, #12]
 800d138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d13a:	68f3      	ldr	r3, [r6, #12]
 800d13c:	b183      	cbz	r3, 800d160 <_Balloc+0x50>
 800d13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d146:	b9b8      	cbnz	r0, 800d178 <_Balloc+0x68>
 800d148:	2101      	movs	r1, #1
 800d14a:	fa01 f605 	lsl.w	r6, r1, r5
 800d14e:	1d72      	adds	r2, r6, #5
 800d150:	0092      	lsls	r2, r2, #2
 800d152:	4620      	mov	r0, r4
 800d154:	f000 fb60 	bl	800d818 <_calloc_r>
 800d158:	b160      	cbz	r0, 800d174 <_Balloc+0x64>
 800d15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d15e:	e00e      	b.n	800d17e <_Balloc+0x6e>
 800d160:	2221      	movs	r2, #33	; 0x21
 800d162:	2104      	movs	r1, #4
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fb57 	bl	800d818 <_calloc_r>
 800d16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d16c:	60f0      	str	r0, [r6, #12]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1e4      	bne.n	800d13e <_Balloc+0x2e>
 800d174:	2000      	movs	r0, #0
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	6802      	ldr	r2, [r0, #0]
 800d17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d17e:	2300      	movs	r3, #0
 800d180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d184:	e7f7      	b.n	800d176 <_Balloc+0x66>
 800d186:	bf00      	nop
 800d188:	0800ea2d 	.word	0x0800ea2d
 800d18c:	0800eab0 	.word	0x0800eab0

0800d190 <_Bfree>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	b976      	cbnz	r6, 800d1b8 <_Bfree+0x28>
 800d19a:	2010      	movs	r0, #16
 800d19c:	f7ff ffa2 	bl	800d0e4 <malloc>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1a4:	b920      	cbnz	r0, 800d1b0 <_Bfree+0x20>
 800d1a6:	4b09      	ldr	r3, [pc, #36]	; (800d1cc <_Bfree+0x3c>)
 800d1a8:	4809      	ldr	r0, [pc, #36]	; (800d1d0 <_Bfree+0x40>)
 800d1aa:	218a      	movs	r1, #138	; 0x8a
 800d1ac:	f000 fd96 	bl	800dcdc <__assert_func>
 800d1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1b4:	6006      	str	r6, [r0, #0]
 800d1b6:	60c6      	str	r6, [r0, #12]
 800d1b8:	b13c      	cbz	r4, 800d1ca <_Bfree+0x3a>
 800d1ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1bc:	6862      	ldr	r2, [r4, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1c4:	6021      	str	r1, [r4, #0]
 800d1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	0800ea2d 	.word	0x0800ea2d
 800d1d0:	0800eab0 	.word	0x0800eab0

0800d1d4 <__multadd>:
 800d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d8:	690d      	ldr	r5, [r1, #16]
 800d1da:	4607      	mov	r7, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	461e      	mov	r6, r3
 800d1e0:	f101 0c14 	add.w	ip, r1, #20
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800d1ea:	b299      	uxth	r1, r3
 800d1ec:	fb02 6101 	mla	r1, r2, r1, r6
 800d1f0:	0c1e      	lsrs	r6, r3, #16
 800d1f2:	0c0b      	lsrs	r3, r1, #16
 800d1f4:	fb02 3306 	mla	r3, r2, r6, r3
 800d1f8:	b289      	uxth	r1, r1
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d200:	4285      	cmp	r5, r0
 800d202:	f84c 1b04 	str.w	r1, [ip], #4
 800d206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d20a:	dcec      	bgt.n	800d1e6 <__multadd+0x12>
 800d20c:	b30e      	cbz	r6, 800d252 <__multadd+0x7e>
 800d20e:	68a3      	ldr	r3, [r4, #8]
 800d210:	42ab      	cmp	r3, r5
 800d212:	dc19      	bgt.n	800d248 <__multadd+0x74>
 800d214:	6861      	ldr	r1, [r4, #4]
 800d216:	4638      	mov	r0, r7
 800d218:	3101      	adds	r1, #1
 800d21a:	f7ff ff79 	bl	800d110 <_Balloc>
 800d21e:	4680      	mov	r8, r0
 800d220:	b928      	cbnz	r0, 800d22e <__multadd+0x5a>
 800d222:	4602      	mov	r2, r0
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <__multadd+0x84>)
 800d226:	480d      	ldr	r0, [pc, #52]	; (800d25c <__multadd+0x88>)
 800d228:	21b5      	movs	r1, #181	; 0xb5
 800d22a:	f000 fd57 	bl	800dcdc <__assert_func>
 800d22e:	6922      	ldr	r2, [r4, #16]
 800d230:	3202      	adds	r2, #2
 800d232:	f104 010c 	add.w	r1, r4, #12
 800d236:	0092      	lsls	r2, r2, #2
 800d238:	300c      	adds	r0, #12
 800d23a:	f7ff ff5b 	bl	800d0f4 <memcpy>
 800d23e:	4621      	mov	r1, r4
 800d240:	4638      	mov	r0, r7
 800d242:	f7ff ffa5 	bl	800d190 <_Bfree>
 800d246:	4644      	mov	r4, r8
 800d248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d24c:	3501      	adds	r5, #1
 800d24e:	615e      	str	r6, [r3, #20]
 800d250:	6125      	str	r5, [r4, #16]
 800d252:	4620      	mov	r0, r4
 800d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d258:	0800ea9f 	.word	0x0800ea9f
 800d25c:	0800eab0 	.word	0x0800eab0

0800d260 <__hi0bits>:
 800d260:	0c03      	lsrs	r3, r0, #16
 800d262:	041b      	lsls	r3, r3, #16
 800d264:	b9d3      	cbnz	r3, 800d29c <__hi0bits+0x3c>
 800d266:	0400      	lsls	r0, r0, #16
 800d268:	2310      	movs	r3, #16
 800d26a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d26e:	bf04      	itt	eq
 800d270:	0200      	lsleq	r0, r0, #8
 800d272:	3308      	addeq	r3, #8
 800d274:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d278:	bf04      	itt	eq
 800d27a:	0100      	lsleq	r0, r0, #4
 800d27c:	3304      	addeq	r3, #4
 800d27e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d282:	bf04      	itt	eq
 800d284:	0080      	lsleq	r0, r0, #2
 800d286:	3302      	addeq	r3, #2
 800d288:	2800      	cmp	r0, #0
 800d28a:	db05      	blt.n	800d298 <__hi0bits+0x38>
 800d28c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d290:	f103 0301 	add.w	r3, r3, #1
 800d294:	bf08      	it	eq
 800d296:	2320      	moveq	r3, #32
 800d298:	4618      	mov	r0, r3
 800d29a:	4770      	bx	lr
 800d29c:	2300      	movs	r3, #0
 800d29e:	e7e4      	b.n	800d26a <__hi0bits+0xa>

0800d2a0 <__lo0bits>:
 800d2a0:	6803      	ldr	r3, [r0, #0]
 800d2a2:	f013 0207 	ands.w	r2, r3, #7
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	d00b      	beq.n	800d2c2 <__lo0bits+0x22>
 800d2aa:	07da      	lsls	r2, r3, #31
 800d2ac:	d423      	bmi.n	800d2f6 <__lo0bits+0x56>
 800d2ae:	0798      	lsls	r0, r3, #30
 800d2b0:	bf49      	itett	mi
 800d2b2:	085b      	lsrmi	r3, r3, #1
 800d2b4:	089b      	lsrpl	r3, r3, #2
 800d2b6:	2001      	movmi	r0, #1
 800d2b8:	600b      	strmi	r3, [r1, #0]
 800d2ba:	bf5c      	itt	pl
 800d2bc:	600b      	strpl	r3, [r1, #0]
 800d2be:	2002      	movpl	r0, #2
 800d2c0:	4770      	bx	lr
 800d2c2:	b298      	uxth	r0, r3
 800d2c4:	b9a8      	cbnz	r0, 800d2f2 <__lo0bits+0x52>
 800d2c6:	0c1b      	lsrs	r3, r3, #16
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	b90a      	cbnz	r2, 800d2d2 <__lo0bits+0x32>
 800d2ce:	3008      	adds	r0, #8
 800d2d0:	0a1b      	lsrs	r3, r3, #8
 800d2d2:	071a      	lsls	r2, r3, #28
 800d2d4:	bf04      	itt	eq
 800d2d6:	091b      	lsreq	r3, r3, #4
 800d2d8:	3004      	addeq	r0, #4
 800d2da:	079a      	lsls	r2, r3, #30
 800d2dc:	bf04      	itt	eq
 800d2de:	089b      	lsreq	r3, r3, #2
 800d2e0:	3002      	addeq	r0, #2
 800d2e2:	07da      	lsls	r2, r3, #31
 800d2e4:	d403      	bmi.n	800d2ee <__lo0bits+0x4e>
 800d2e6:	085b      	lsrs	r3, r3, #1
 800d2e8:	f100 0001 	add.w	r0, r0, #1
 800d2ec:	d005      	beq.n	800d2fa <__lo0bits+0x5a>
 800d2ee:	600b      	str	r3, [r1, #0]
 800d2f0:	4770      	bx	lr
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	e7e9      	b.n	800d2ca <__lo0bits+0x2a>
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	4770      	bx	lr
 800d2fa:	2020      	movs	r0, #32
 800d2fc:	4770      	bx	lr
	...

0800d300 <__i2b>:
 800d300:	b510      	push	{r4, lr}
 800d302:	460c      	mov	r4, r1
 800d304:	2101      	movs	r1, #1
 800d306:	f7ff ff03 	bl	800d110 <_Balloc>
 800d30a:	4602      	mov	r2, r0
 800d30c:	b928      	cbnz	r0, 800d31a <__i2b+0x1a>
 800d30e:	4b05      	ldr	r3, [pc, #20]	; (800d324 <__i2b+0x24>)
 800d310:	4805      	ldr	r0, [pc, #20]	; (800d328 <__i2b+0x28>)
 800d312:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d316:	f000 fce1 	bl	800dcdc <__assert_func>
 800d31a:	2301      	movs	r3, #1
 800d31c:	6144      	str	r4, [r0, #20]
 800d31e:	6103      	str	r3, [r0, #16]
 800d320:	bd10      	pop	{r4, pc}
 800d322:	bf00      	nop
 800d324:	0800ea9f 	.word	0x0800ea9f
 800d328:	0800eab0 	.word	0x0800eab0

0800d32c <__multiply>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	4691      	mov	r9, r2
 800d332:	690a      	ldr	r2, [r1, #16]
 800d334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	bfb8      	it	lt
 800d33c:	460b      	movlt	r3, r1
 800d33e:	460c      	mov	r4, r1
 800d340:	bfbc      	itt	lt
 800d342:	464c      	movlt	r4, r9
 800d344:	4699      	movlt	r9, r3
 800d346:	6927      	ldr	r7, [r4, #16]
 800d348:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d34c:	68a3      	ldr	r3, [r4, #8]
 800d34e:	6861      	ldr	r1, [r4, #4]
 800d350:	eb07 060a 	add.w	r6, r7, sl
 800d354:	42b3      	cmp	r3, r6
 800d356:	b085      	sub	sp, #20
 800d358:	bfb8      	it	lt
 800d35a:	3101      	addlt	r1, #1
 800d35c:	f7ff fed8 	bl	800d110 <_Balloc>
 800d360:	b930      	cbnz	r0, 800d370 <__multiply+0x44>
 800d362:	4602      	mov	r2, r0
 800d364:	4b44      	ldr	r3, [pc, #272]	; (800d478 <__multiply+0x14c>)
 800d366:	4845      	ldr	r0, [pc, #276]	; (800d47c <__multiply+0x150>)
 800d368:	f240 115d 	movw	r1, #349	; 0x15d
 800d36c:	f000 fcb6 	bl	800dcdc <__assert_func>
 800d370:	f100 0514 	add.w	r5, r0, #20
 800d374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d378:	462b      	mov	r3, r5
 800d37a:	2200      	movs	r2, #0
 800d37c:	4543      	cmp	r3, r8
 800d37e:	d321      	bcc.n	800d3c4 <__multiply+0x98>
 800d380:	f104 0314 	add.w	r3, r4, #20
 800d384:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d388:	f109 0314 	add.w	r3, r9, #20
 800d38c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d390:	9202      	str	r2, [sp, #8]
 800d392:	1b3a      	subs	r2, r7, r4
 800d394:	3a15      	subs	r2, #21
 800d396:	f022 0203 	bic.w	r2, r2, #3
 800d39a:	3204      	adds	r2, #4
 800d39c:	f104 0115 	add.w	r1, r4, #21
 800d3a0:	428f      	cmp	r7, r1
 800d3a2:	bf38      	it	cc
 800d3a4:	2204      	movcc	r2, #4
 800d3a6:	9201      	str	r2, [sp, #4]
 800d3a8:	9a02      	ldr	r2, [sp, #8]
 800d3aa:	9303      	str	r3, [sp, #12]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d80c      	bhi.n	800d3ca <__multiply+0x9e>
 800d3b0:	2e00      	cmp	r6, #0
 800d3b2:	dd03      	ble.n	800d3bc <__multiply+0x90>
 800d3b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d05a      	beq.n	800d472 <__multiply+0x146>
 800d3bc:	6106      	str	r6, [r0, #16]
 800d3be:	b005      	add	sp, #20
 800d3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c4:	f843 2b04 	str.w	r2, [r3], #4
 800d3c8:	e7d8      	b.n	800d37c <__multiply+0x50>
 800d3ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3ce:	f1ba 0f00 	cmp.w	sl, #0
 800d3d2:	d024      	beq.n	800d41e <__multiply+0xf2>
 800d3d4:	f104 0e14 	add.w	lr, r4, #20
 800d3d8:	46a9      	mov	r9, r5
 800d3da:	f04f 0c00 	mov.w	ip, #0
 800d3de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d3e2:	f8d9 1000 	ldr.w	r1, [r9]
 800d3e6:	fa1f fb82 	uxth.w	fp, r2
 800d3ea:	b289      	uxth	r1, r1
 800d3ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800d3f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d3f4:	f8d9 2000 	ldr.w	r2, [r9]
 800d3f8:	4461      	add	r1, ip
 800d3fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800d402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d406:	b289      	uxth	r1, r1
 800d408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d40c:	4577      	cmp	r7, lr
 800d40e:	f849 1b04 	str.w	r1, [r9], #4
 800d412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d416:	d8e2      	bhi.n	800d3de <__multiply+0xb2>
 800d418:	9a01      	ldr	r2, [sp, #4]
 800d41a:	f845 c002 	str.w	ip, [r5, r2]
 800d41e:	9a03      	ldr	r2, [sp, #12]
 800d420:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d424:	3304      	adds	r3, #4
 800d426:	f1b9 0f00 	cmp.w	r9, #0
 800d42a:	d020      	beq.n	800d46e <__multiply+0x142>
 800d42c:	6829      	ldr	r1, [r5, #0]
 800d42e:	f104 0c14 	add.w	ip, r4, #20
 800d432:	46ae      	mov	lr, r5
 800d434:	f04f 0a00 	mov.w	sl, #0
 800d438:	f8bc b000 	ldrh.w	fp, [ip]
 800d43c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d440:	fb09 220b 	mla	r2, r9, fp, r2
 800d444:	4492      	add	sl, r2
 800d446:	b289      	uxth	r1, r1
 800d448:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d44c:	f84e 1b04 	str.w	r1, [lr], #4
 800d450:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d454:	f8be 1000 	ldrh.w	r1, [lr]
 800d458:	0c12      	lsrs	r2, r2, #16
 800d45a:	fb09 1102 	mla	r1, r9, r2, r1
 800d45e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d462:	4567      	cmp	r7, ip
 800d464:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d468:	d8e6      	bhi.n	800d438 <__multiply+0x10c>
 800d46a:	9a01      	ldr	r2, [sp, #4]
 800d46c:	50a9      	str	r1, [r5, r2]
 800d46e:	3504      	adds	r5, #4
 800d470:	e79a      	b.n	800d3a8 <__multiply+0x7c>
 800d472:	3e01      	subs	r6, #1
 800d474:	e79c      	b.n	800d3b0 <__multiply+0x84>
 800d476:	bf00      	nop
 800d478:	0800ea9f 	.word	0x0800ea9f
 800d47c:	0800eab0 	.word	0x0800eab0

0800d480 <__pow5mult>:
 800d480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d484:	4615      	mov	r5, r2
 800d486:	f012 0203 	ands.w	r2, r2, #3
 800d48a:	4606      	mov	r6, r0
 800d48c:	460f      	mov	r7, r1
 800d48e:	d007      	beq.n	800d4a0 <__pow5mult+0x20>
 800d490:	4c25      	ldr	r4, [pc, #148]	; (800d528 <__pow5mult+0xa8>)
 800d492:	3a01      	subs	r2, #1
 800d494:	2300      	movs	r3, #0
 800d496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d49a:	f7ff fe9b 	bl	800d1d4 <__multadd>
 800d49e:	4607      	mov	r7, r0
 800d4a0:	10ad      	asrs	r5, r5, #2
 800d4a2:	d03d      	beq.n	800d520 <__pow5mult+0xa0>
 800d4a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4a6:	b97c      	cbnz	r4, 800d4c8 <__pow5mult+0x48>
 800d4a8:	2010      	movs	r0, #16
 800d4aa:	f7ff fe1b 	bl	800d0e4 <malloc>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d4b2:	b928      	cbnz	r0, 800d4c0 <__pow5mult+0x40>
 800d4b4:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <__pow5mult+0xac>)
 800d4b6:	481e      	ldr	r0, [pc, #120]	; (800d530 <__pow5mult+0xb0>)
 800d4b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4bc:	f000 fc0e 	bl	800dcdc <__assert_func>
 800d4c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4c4:	6004      	str	r4, [r0, #0]
 800d4c6:	60c4      	str	r4, [r0, #12]
 800d4c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4d0:	b94c      	cbnz	r4, 800d4e6 <__pow5mult+0x66>
 800d4d2:	f240 2171 	movw	r1, #625	; 0x271
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f7ff ff12 	bl	800d300 <__i2b>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	f04f 0900 	mov.w	r9, #0
 800d4ea:	07eb      	lsls	r3, r5, #31
 800d4ec:	d50a      	bpl.n	800d504 <__pow5mult+0x84>
 800d4ee:	4639      	mov	r1, r7
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7ff ff1a 	bl	800d32c <__multiply>
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	4680      	mov	r8, r0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f7ff fe47 	bl	800d190 <_Bfree>
 800d502:	4647      	mov	r7, r8
 800d504:	106d      	asrs	r5, r5, #1
 800d506:	d00b      	beq.n	800d520 <__pow5mult+0xa0>
 800d508:	6820      	ldr	r0, [r4, #0]
 800d50a:	b938      	cbnz	r0, 800d51c <__pow5mult+0x9c>
 800d50c:	4622      	mov	r2, r4
 800d50e:	4621      	mov	r1, r4
 800d510:	4630      	mov	r0, r6
 800d512:	f7ff ff0b 	bl	800d32c <__multiply>
 800d516:	6020      	str	r0, [r4, #0]
 800d518:	f8c0 9000 	str.w	r9, [r0]
 800d51c:	4604      	mov	r4, r0
 800d51e:	e7e4      	b.n	800d4ea <__pow5mult+0x6a>
 800d520:	4638      	mov	r0, r7
 800d522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d526:	bf00      	nop
 800d528:	0800ec00 	.word	0x0800ec00
 800d52c:	0800ea2d 	.word	0x0800ea2d
 800d530:	0800eab0 	.word	0x0800eab0

0800d534 <__lshift>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	460c      	mov	r4, r1
 800d53a:	6849      	ldr	r1, [r1, #4]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	4607      	mov	r7, r0
 800d546:	4691      	mov	r9, r2
 800d548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d54c:	f108 0601 	add.w	r6, r8, #1
 800d550:	42b3      	cmp	r3, r6
 800d552:	db0b      	blt.n	800d56c <__lshift+0x38>
 800d554:	4638      	mov	r0, r7
 800d556:	f7ff fddb 	bl	800d110 <_Balloc>
 800d55a:	4605      	mov	r5, r0
 800d55c:	b948      	cbnz	r0, 800d572 <__lshift+0x3e>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b2a      	ldr	r3, [pc, #168]	; (800d60c <__lshift+0xd8>)
 800d562:	482b      	ldr	r0, [pc, #172]	; (800d610 <__lshift+0xdc>)
 800d564:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d568:	f000 fbb8 	bl	800dcdc <__assert_func>
 800d56c:	3101      	adds	r1, #1
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	e7ee      	b.n	800d550 <__lshift+0x1c>
 800d572:	2300      	movs	r3, #0
 800d574:	f100 0114 	add.w	r1, r0, #20
 800d578:	f100 0210 	add.w	r2, r0, #16
 800d57c:	4618      	mov	r0, r3
 800d57e:	4553      	cmp	r3, sl
 800d580:	db37      	blt.n	800d5f2 <__lshift+0xbe>
 800d582:	6920      	ldr	r0, [r4, #16]
 800d584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d588:	f104 0314 	add.w	r3, r4, #20
 800d58c:	f019 091f 	ands.w	r9, r9, #31
 800d590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d598:	d02f      	beq.n	800d5fa <__lshift+0xc6>
 800d59a:	f1c9 0e20 	rsb	lr, r9, #32
 800d59e:	468a      	mov	sl, r1
 800d5a0:	f04f 0c00 	mov.w	ip, #0
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	fa02 f209 	lsl.w	r2, r2, r9
 800d5aa:	ea42 020c 	orr.w	r2, r2, ip
 800d5ae:	f84a 2b04 	str.w	r2, [sl], #4
 800d5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b6:	4298      	cmp	r0, r3
 800d5b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d5bc:	d8f2      	bhi.n	800d5a4 <__lshift+0x70>
 800d5be:	1b03      	subs	r3, r0, r4
 800d5c0:	3b15      	subs	r3, #21
 800d5c2:	f023 0303 	bic.w	r3, r3, #3
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	f104 0215 	add.w	r2, r4, #21
 800d5cc:	4290      	cmp	r0, r2
 800d5ce:	bf38      	it	cc
 800d5d0:	2304      	movcc	r3, #4
 800d5d2:	f841 c003 	str.w	ip, [r1, r3]
 800d5d6:	f1bc 0f00 	cmp.w	ip, #0
 800d5da:	d001      	beq.n	800d5e0 <__lshift+0xac>
 800d5dc:	f108 0602 	add.w	r6, r8, #2
 800d5e0:	3e01      	subs	r6, #1
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	612e      	str	r6, [r5, #16]
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	f7ff fdd2 	bl	800d190 <_Bfree>
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	e7c1      	b.n	800d57e <__lshift+0x4a>
 800d5fa:	3904      	subs	r1, #4
 800d5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d600:	f841 2f04 	str.w	r2, [r1, #4]!
 800d604:	4298      	cmp	r0, r3
 800d606:	d8f9      	bhi.n	800d5fc <__lshift+0xc8>
 800d608:	e7ea      	b.n	800d5e0 <__lshift+0xac>
 800d60a:	bf00      	nop
 800d60c:	0800ea9f 	.word	0x0800ea9f
 800d610:	0800eab0 	.word	0x0800eab0

0800d614 <__mcmp>:
 800d614:	b530      	push	{r4, r5, lr}
 800d616:	6902      	ldr	r2, [r0, #16]
 800d618:	690c      	ldr	r4, [r1, #16]
 800d61a:	1b12      	subs	r2, r2, r4
 800d61c:	d10e      	bne.n	800d63c <__mcmp+0x28>
 800d61e:	f100 0314 	add.w	r3, r0, #20
 800d622:	3114      	adds	r1, #20
 800d624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d62c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d634:	42a5      	cmp	r5, r4
 800d636:	d003      	beq.n	800d640 <__mcmp+0x2c>
 800d638:	d305      	bcc.n	800d646 <__mcmp+0x32>
 800d63a:	2201      	movs	r2, #1
 800d63c:	4610      	mov	r0, r2
 800d63e:	bd30      	pop	{r4, r5, pc}
 800d640:	4283      	cmp	r3, r0
 800d642:	d3f3      	bcc.n	800d62c <__mcmp+0x18>
 800d644:	e7fa      	b.n	800d63c <__mcmp+0x28>
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	e7f7      	b.n	800d63c <__mcmp+0x28>

0800d64c <__mdiff>:
 800d64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	460c      	mov	r4, r1
 800d652:	4606      	mov	r6, r0
 800d654:	4611      	mov	r1, r2
 800d656:	4620      	mov	r0, r4
 800d658:	4690      	mov	r8, r2
 800d65a:	f7ff ffdb 	bl	800d614 <__mcmp>
 800d65e:	1e05      	subs	r5, r0, #0
 800d660:	d110      	bne.n	800d684 <__mdiff+0x38>
 800d662:	4629      	mov	r1, r5
 800d664:	4630      	mov	r0, r6
 800d666:	f7ff fd53 	bl	800d110 <_Balloc>
 800d66a:	b930      	cbnz	r0, 800d67a <__mdiff+0x2e>
 800d66c:	4b3a      	ldr	r3, [pc, #232]	; (800d758 <__mdiff+0x10c>)
 800d66e:	4602      	mov	r2, r0
 800d670:	f240 2132 	movw	r1, #562	; 0x232
 800d674:	4839      	ldr	r0, [pc, #228]	; (800d75c <__mdiff+0x110>)
 800d676:	f000 fb31 	bl	800dcdc <__assert_func>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d684:	bfa4      	itt	ge
 800d686:	4643      	movge	r3, r8
 800d688:	46a0      	movge	r8, r4
 800d68a:	4630      	mov	r0, r6
 800d68c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d690:	bfa6      	itte	ge
 800d692:	461c      	movge	r4, r3
 800d694:	2500      	movge	r5, #0
 800d696:	2501      	movlt	r5, #1
 800d698:	f7ff fd3a 	bl	800d110 <_Balloc>
 800d69c:	b920      	cbnz	r0, 800d6a8 <__mdiff+0x5c>
 800d69e:	4b2e      	ldr	r3, [pc, #184]	; (800d758 <__mdiff+0x10c>)
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6a6:	e7e5      	b.n	800d674 <__mdiff+0x28>
 800d6a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d6ac:	6926      	ldr	r6, [r4, #16]
 800d6ae:	60c5      	str	r5, [r0, #12]
 800d6b0:	f104 0914 	add.w	r9, r4, #20
 800d6b4:	f108 0514 	add.w	r5, r8, #20
 800d6b8:	f100 0e14 	add.w	lr, r0, #20
 800d6bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d6c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6c4:	f108 0210 	add.w	r2, r8, #16
 800d6c8:	46f2      	mov	sl, lr
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d6d4:	fa1f f883 	uxth.w	r8, r3
 800d6d8:	fa11 f18b 	uxtah	r1, r1, fp
 800d6dc:	0c1b      	lsrs	r3, r3, #16
 800d6de:	eba1 0808 	sub.w	r8, r1, r8
 800d6e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d6ea:	fa1f f888 	uxth.w	r8, r8
 800d6ee:	1419      	asrs	r1, r3, #16
 800d6f0:	454e      	cmp	r6, r9
 800d6f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6f6:	f84a 3b04 	str.w	r3, [sl], #4
 800d6fa:	d8e7      	bhi.n	800d6cc <__mdiff+0x80>
 800d6fc:	1b33      	subs	r3, r6, r4
 800d6fe:	3b15      	subs	r3, #21
 800d700:	f023 0303 	bic.w	r3, r3, #3
 800d704:	3304      	adds	r3, #4
 800d706:	3415      	adds	r4, #21
 800d708:	42a6      	cmp	r6, r4
 800d70a:	bf38      	it	cc
 800d70c:	2304      	movcc	r3, #4
 800d70e:	441d      	add	r5, r3
 800d710:	4473      	add	r3, lr
 800d712:	469e      	mov	lr, r3
 800d714:	462e      	mov	r6, r5
 800d716:	4566      	cmp	r6, ip
 800d718:	d30e      	bcc.n	800d738 <__mdiff+0xec>
 800d71a:	f10c 0203 	add.w	r2, ip, #3
 800d71e:	1b52      	subs	r2, r2, r5
 800d720:	f022 0203 	bic.w	r2, r2, #3
 800d724:	3d03      	subs	r5, #3
 800d726:	45ac      	cmp	ip, r5
 800d728:	bf38      	it	cc
 800d72a:	2200      	movcc	r2, #0
 800d72c:	441a      	add	r2, r3
 800d72e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d732:	b17b      	cbz	r3, 800d754 <__mdiff+0x108>
 800d734:	6107      	str	r7, [r0, #16]
 800d736:	e7a3      	b.n	800d680 <__mdiff+0x34>
 800d738:	f856 8b04 	ldr.w	r8, [r6], #4
 800d73c:	fa11 f288 	uxtah	r2, r1, r8
 800d740:	1414      	asrs	r4, r2, #16
 800d742:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d746:	b292      	uxth	r2, r2
 800d748:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d74c:	f84e 2b04 	str.w	r2, [lr], #4
 800d750:	1421      	asrs	r1, r4, #16
 800d752:	e7e0      	b.n	800d716 <__mdiff+0xca>
 800d754:	3f01      	subs	r7, #1
 800d756:	e7ea      	b.n	800d72e <__mdiff+0xe2>
 800d758:	0800ea9f 	.word	0x0800ea9f
 800d75c:	0800eab0 	.word	0x0800eab0

0800d760 <__d2b>:
 800d760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d764:	4689      	mov	r9, r1
 800d766:	2101      	movs	r1, #1
 800d768:	ec57 6b10 	vmov	r6, r7, d0
 800d76c:	4690      	mov	r8, r2
 800d76e:	f7ff fccf 	bl	800d110 <_Balloc>
 800d772:	4604      	mov	r4, r0
 800d774:	b930      	cbnz	r0, 800d784 <__d2b+0x24>
 800d776:	4602      	mov	r2, r0
 800d778:	4b25      	ldr	r3, [pc, #148]	; (800d810 <__d2b+0xb0>)
 800d77a:	4826      	ldr	r0, [pc, #152]	; (800d814 <__d2b+0xb4>)
 800d77c:	f240 310a 	movw	r1, #778	; 0x30a
 800d780:	f000 faac 	bl	800dcdc <__assert_func>
 800d784:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d788:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d78c:	bb35      	cbnz	r5, 800d7dc <__d2b+0x7c>
 800d78e:	2e00      	cmp	r6, #0
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	d028      	beq.n	800d7e6 <__d2b+0x86>
 800d794:	4668      	mov	r0, sp
 800d796:	9600      	str	r6, [sp, #0]
 800d798:	f7ff fd82 	bl	800d2a0 <__lo0bits>
 800d79c:	9900      	ldr	r1, [sp, #0]
 800d79e:	b300      	cbz	r0, 800d7e2 <__d2b+0x82>
 800d7a0:	9a01      	ldr	r2, [sp, #4]
 800d7a2:	f1c0 0320 	rsb	r3, r0, #32
 800d7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7aa:	430b      	orrs	r3, r1
 800d7ac:	40c2      	lsrs	r2, r0
 800d7ae:	6163      	str	r3, [r4, #20]
 800d7b0:	9201      	str	r2, [sp, #4]
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	61a3      	str	r3, [r4, #24]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	bf14      	ite	ne
 800d7ba:	2202      	movne	r2, #2
 800d7bc:	2201      	moveq	r2, #1
 800d7be:	6122      	str	r2, [r4, #16]
 800d7c0:	b1d5      	cbz	r5, 800d7f8 <__d2b+0x98>
 800d7c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7c6:	4405      	add	r5, r0
 800d7c8:	f8c9 5000 	str.w	r5, [r9]
 800d7cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7d0:	f8c8 0000 	str.w	r0, [r8]
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	b003      	add	sp, #12
 800d7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7e0:	e7d5      	b.n	800d78e <__d2b+0x2e>
 800d7e2:	6161      	str	r1, [r4, #20]
 800d7e4:	e7e5      	b.n	800d7b2 <__d2b+0x52>
 800d7e6:	a801      	add	r0, sp, #4
 800d7e8:	f7ff fd5a 	bl	800d2a0 <__lo0bits>
 800d7ec:	9b01      	ldr	r3, [sp, #4]
 800d7ee:	6163      	str	r3, [r4, #20]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	6122      	str	r2, [r4, #16]
 800d7f4:	3020      	adds	r0, #32
 800d7f6:	e7e3      	b.n	800d7c0 <__d2b+0x60>
 800d7f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d800:	f8c9 0000 	str.w	r0, [r9]
 800d804:	6918      	ldr	r0, [r3, #16]
 800d806:	f7ff fd2b 	bl	800d260 <__hi0bits>
 800d80a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d80e:	e7df      	b.n	800d7d0 <__d2b+0x70>
 800d810:	0800ea9f 	.word	0x0800ea9f
 800d814:	0800eab0 	.word	0x0800eab0

0800d818 <_calloc_r>:
 800d818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d81a:	fba1 2402 	umull	r2, r4, r1, r2
 800d81e:	b94c      	cbnz	r4, 800d834 <_calloc_r+0x1c>
 800d820:	4611      	mov	r1, r2
 800d822:	9201      	str	r2, [sp, #4]
 800d824:	f000 f87a 	bl	800d91c <_malloc_r>
 800d828:	9a01      	ldr	r2, [sp, #4]
 800d82a:	4605      	mov	r5, r0
 800d82c:	b930      	cbnz	r0, 800d83c <_calloc_r+0x24>
 800d82e:	4628      	mov	r0, r5
 800d830:	b003      	add	sp, #12
 800d832:	bd30      	pop	{r4, r5, pc}
 800d834:	220c      	movs	r2, #12
 800d836:	6002      	str	r2, [r0, #0]
 800d838:	2500      	movs	r5, #0
 800d83a:	e7f8      	b.n	800d82e <_calloc_r+0x16>
 800d83c:	4621      	mov	r1, r4
 800d83e:	f7fe f93f 	bl	800bac0 <memset>
 800d842:	e7f4      	b.n	800d82e <_calloc_r+0x16>

0800d844 <_free_r>:
 800d844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d846:	2900      	cmp	r1, #0
 800d848:	d044      	beq.n	800d8d4 <_free_r+0x90>
 800d84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d84e:	9001      	str	r0, [sp, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	f1a1 0404 	sub.w	r4, r1, #4
 800d856:	bfb8      	it	lt
 800d858:	18e4      	addlt	r4, r4, r3
 800d85a:	f000 fa9b 	bl	800dd94 <__malloc_lock>
 800d85e:	4a1e      	ldr	r2, [pc, #120]	; (800d8d8 <_free_r+0x94>)
 800d860:	9801      	ldr	r0, [sp, #4]
 800d862:	6813      	ldr	r3, [r2, #0]
 800d864:	b933      	cbnz	r3, 800d874 <_free_r+0x30>
 800d866:	6063      	str	r3, [r4, #4]
 800d868:	6014      	str	r4, [r2, #0]
 800d86a:	b003      	add	sp, #12
 800d86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d870:	f000 ba96 	b.w	800dda0 <__malloc_unlock>
 800d874:	42a3      	cmp	r3, r4
 800d876:	d908      	bls.n	800d88a <_free_r+0x46>
 800d878:	6825      	ldr	r5, [r4, #0]
 800d87a:	1961      	adds	r1, r4, r5
 800d87c:	428b      	cmp	r3, r1
 800d87e:	bf01      	itttt	eq
 800d880:	6819      	ldreq	r1, [r3, #0]
 800d882:	685b      	ldreq	r3, [r3, #4]
 800d884:	1949      	addeq	r1, r1, r5
 800d886:	6021      	streq	r1, [r4, #0]
 800d888:	e7ed      	b.n	800d866 <_free_r+0x22>
 800d88a:	461a      	mov	r2, r3
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	b10b      	cbz	r3, 800d894 <_free_r+0x50>
 800d890:	42a3      	cmp	r3, r4
 800d892:	d9fa      	bls.n	800d88a <_free_r+0x46>
 800d894:	6811      	ldr	r1, [r2, #0]
 800d896:	1855      	adds	r5, r2, r1
 800d898:	42a5      	cmp	r5, r4
 800d89a:	d10b      	bne.n	800d8b4 <_free_r+0x70>
 800d89c:	6824      	ldr	r4, [r4, #0]
 800d89e:	4421      	add	r1, r4
 800d8a0:	1854      	adds	r4, r2, r1
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	6011      	str	r1, [r2, #0]
 800d8a6:	d1e0      	bne.n	800d86a <_free_r+0x26>
 800d8a8:	681c      	ldr	r4, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	6053      	str	r3, [r2, #4]
 800d8ae:	4421      	add	r1, r4
 800d8b0:	6011      	str	r1, [r2, #0]
 800d8b2:	e7da      	b.n	800d86a <_free_r+0x26>
 800d8b4:	d902      	bls.n	800d8bc <_free_r+0x78>
 800d8b6:	230c      	movs	r3, #12
 800d8b8:	6003      	str	r3, [r0, #0]
 800d8ba:	e7d6      	b.n	800d86a <_free_r+0x26>
 800d8bc:	6825      	ldr	r5, [r4, #0]
 800d8be:	1961      	adds	r1, r4, r5
 800d8c0:	428b      	cmp	r3, r1
 800d8c2:	bf04      	itt	eq
 800d8c4:	6819      	ldreq	r1, [r3, #0]
 800d8c6:	685b      	ldreq	r3, [r3, #4]
 800d8c8:	6063      	str	r3, [r4, #4]
 800d8ca:	bf04      	itt	eq
 800d8cc:	1949      	addeq	r1, r1, r5
 800d8ce:	6021      	streq	r1, [r4, #0]
 800d8d0:	6054      	str	r4, [r2, #4]
 800d8d2:	e7ca      	b.n	800d86a <_free_r+0x26>
 800d8d4:	b003      	add	sp, #12
 800d8d6:	bd30      	pop	{r4, r5, pc}
 800d8d8:	20001920 	.word	0x20001920

0800d8dc <sbrk_aligned>:
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	4e0e      	ldr	r6, [pc, #56]	; (800d918 <sbrk_aligned+0x3c>)
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	6831      	ldr	r1, [r6, #0]
 800d8e4:	4605      	mov	r5, r0
 800d8e6:	b911      	cbnz	r1, 800d8ee <sbrk_aligned+0x12>
 800d8e8:	f000 f9e8 	bl	800dcbc <_sbrk_r>
 800d8ec:	6030      	str	r0, [r6, #0]
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f000 f9e3 	bl	800dcbc <_sbrk_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d00a      	beq.n	800d910 <sbrk_aligned+0x34>
 800d8fa:	1cc4      	adds	r4, r0, #3
 800d8fc:	f024 0403 	bic.w	r4, r4, #3
 800d900:	42a0      	cmp	r0, r4
 800d902:	d007      	beq.n	800d914 <sbrk_aligned+0x38>
 800d904:	1a21      	subs	r1, r4, r0
 800d906:	4628      	mov	r0, r5
 800d908:	f000 f9d8 	bl	800dcbc <_sbrk_r>
 800d90c:	3001      	adds	r0, #1
 800d90e:	d101      	bne.n	800d914 <sbrk_aligned+0x38>
 800d910:	f04f 34ff 	mov.w	r4, #4294967295
 800d914:	4620      	mov	r0, r4
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	20001924 	.word	0x20001924

0800d91c <_malloc_r>:
 800d91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d920:	1ccd      	adds	r5, r1, #3
 800d922:	f025 0503 	bic.w	r5, r5, #3
 800d926:	3508      	adds	r5, #8
 800d928:	2d0c      	cmp	r5, #12
 800d92a:	bf38      	it	cc
 800d92c:	250c      	movcc	r5, #12
 800d92e:	2d00      	cmp	r5, #0
 800d930:	4607      	mov	r7, r0
 800d932:	db01      	blt.n	800d938 <_malloc_r+0x1c>
 800d934:	42a9      	cmp	r1, r5
 800d936:	d905      	bls.n	800d944 <_malloc_r+0x28>
 800d938:	230c      	movs	r3, #12
 800d93a:	603b      	str	r3, [r7, #0]
 800d93c:	2600      	movs	r6, #0
 800d93e:	4630      	mov	r0, r6
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d944:	4e2e      	ldr	r6, [pc, #184]	; (800da00 <_malloc_r+0xe4>)
 800d946:	f000 fa25 	bl	800dd94 <__malloc_lock>
 800d94a:	6833      	ldr	r3, [r6, #0]
 800d94c:	461c      	mov	r4, r3
 800d94e:	bb34      	cbnz	r4, 800d99e <_malloc_r+0x82>
 800d950:	4629      	mov	r1, r5
 800d952:	4638      	mov	r0, r7
 800d954:	f7ff ffc2 	bl	800d8dc <sbrk_aligned>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	4604      	mov	r4, r0
 800d95c:	d14d      	bne.n	800d9fa <_malloc_r+0xde>
 800d95e:	6834      	ldr	r4, [r6, #0]
 800d960:	4626      	mov	r6, r4
 800d962:	2e00      	cmp	r6, #0
 800d964:	d140      	bne.n	800d9e8 <_malloc_r+0xcc>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	4631      	mov	r1, r6
 800d96a:	4638      	mov	r0, r7
 800d96c:	eb04 0803 	add.w	r8, r4, r3
 800d970:	f000 f9a4 	bl	800dcbc <_sbrk_r>
 800d974:	4580      	cmp	r8, r0
 800d976:	d13a      	bne.n	800d9ee <_malloc_r+0xd2>
 800d978:	6821      	ldr	r1, [r4, #0]
 800d97a:	3503      	adds	r5, #3
 800d97c:	1a6d      	subs	r5, r5, r1
 800d97e:	f025 0503 	bic.w	r5, r5, #3
 800d982:	3508      	adds	r5, #8
 800d984:	2d0c      	cmp	r5, #12
 800d986:	bf38      	it	cc
 800d988:	250c      	movcc	r5, #12
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ffa5 	bl	800d8dc <sbrk_aligned>
 800d992:	3001      	adds	r0, #1
 800d994:	d02b      	beq.n	800d9ee <_malloc_r+0xd2>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	442b      	add	r3, r5
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	e00e      	b.n	800d9bc <_malloc_r+0xa0>
 800d99e:	6822      	ldr	r2, [r4, #0]
 800d9a0:	1b52      	subs	r2, r2, r5
 800d9a2:	d41e      	bmi.n	800d9e2 <_malloc_r+0xc6>
 800d9a4:	2a0b      	cmp	r2, #11
 800d9a6:	d916      	bls.n	800d9d6 <_malloc_r+0xba>
 800d9a8:	1961      	adds	r1, r4, r5
 800d9aa:	42a3      	cmp	r3, r4
 800d9ac:	6025      	str	r5, [r4, #0]
 800d9ae:	bf18      	it	ne
 800d9b0:	6059      	strne	r1, [r3, #4]
 800d9b2:	6863      	ldr	r3, [r4, #4]
 800d9b4:	bf08      	it	eq
 800d9b6:	6031      	streq	r1, [r6, #0]
 800d9b8:	5162      	str	r2, [r4, r5]
 800d9ba:	604b      	str	r3, [r1, #4]
 800d9bc:	4638      	mov	r0, r7
 800d9be:	f104 060b 	add.w	r6, r4, #11
 800d9c2:	f000 f9ed 	bl	800dda0 <__malloc_unlock>
 800d9c6:	f026 0607 	bic.w	r6, r6, #7
 800d9ca:	1d23      	adds	r3, r4, #4
 800d9cc:	1af2      	subs	r2, r6, r3
 800d9ce:	d0b6      	beq.n	800d93e <_malloc_r+0x22>
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	50a3      	str	r3, [r4, r2]
 800d9d4:	e7b3      	b.n	800d93e <_malloc_r+0x22>
 800d9d6:	6862      	ldr	r2, [r4, #4]
 800d9d8:	42a3      	cmp	r3, r4
 800d9da:	bf0c      	ite	eq
 800d9dc:	6032      	streq	r2, [r6, #0]
 800d9de:	605a      	strne	r2, [r3, #4]
 800d9e0:	e7ec      	b.n	800d9bc <_malloc_r+0xa0>
 800d9e2:	4623      	mov	r3, r4
 800d9e4:	6864      	ldr	r4, [r4, #4]
 800d9e6:	e7b2      	b.n	800d94e <_malloc_r+0x32>
 800d9e8:	4634      	mov	r4, r6
 800d9ea:	6876      	ldr	r6, [r6, #4]
 800d9ec:	e7b9      	b.n	800d962 <_malloc_r+0x46>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	603b      	str	r3, [r7, #0]
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	f000 f9d4 	bl	800dda0 <__malloc_unlock>
 800d9f8:	e7a1      	b.n	800d93e <_malloc_r+0x22>
 800d9fa:	6025      	str	r5, [r4, #0]
 800d9fc:	e7de      	b.n	800d9bc <_malloc_r+0xa0>
 800d9fe:	bf00      	nop
 800da00:	20001920 	.word	0x20001920

0800da04 <__ssputs_r>:
 800da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da08:	688e      	ldr	r6, [r1, #8]
 800da0a:	429e      	cmp	r6, r3
 800da0c:	4682      	mov	sl, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	4690      	mov	r8, r2
 800da12:	461f      	mov	r7, r3
 800da14:	d838      	bhi.n	800da88 <__ssputs_r+0x84>
 800da16:	898a      	ldrh	r2, [r1, #12]
 800da18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da1c:	d032      	beq.n	800da84 <__ssputs_r+0x80>
 800da1e:	6825      	ldr	r5, [r4, #0]
 800da20:	6909      	ldr	r1, [r1, #16]
 800da22:	eba5 0901 	sub.w	r9, r5, r1
 800da26:	6965      	ldr	r5, [r4, #20]
 800da28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da30:	3301      	adds	r3, #1
 800da32:	444b      	add	r3, r9
 800da34:	106d      	asrs	r5, r5, #1
 800da36:	429d      	cmp	r5, r3
 800da38:	bf38      	it	cc
 800da3a:	461d      	movcc	r5, r3
 800da3c:	0553      	lsls	r3, r2, #21
 800da3e:	d531      	bpl.n	800daa4 <__ssputs_r+0xa0>
 800da40:	4629      	mov	r1, r5
 800da42:	f7ff ff6b 	bl	800d91c <_malloc_r>
 800da46:	4606      	mov	r6, r0
 800da48:	b950      	cbnz	r0, 800da60 <__ssputs_r+0x5c>
 800da4a:	230c      	movs	r3, #12
 800da4c:	f8ca 3000 	str.w	r3, [sl]
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	f04f 30ff 	mov.w	r0, #4294967295
 800da5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da60:	6921      	ldr	r1, [r4, #16]
 800da62:	464a      	mov	r2, r9
 800da64:	f7ff fb46 	bl	800d0f4 <memcpy>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	6126      	str	r6, [r4, #16]
 800da76:	6165      	str	r5, [r4, #20]
 800da78:	444e      	add	r6, r9
 800da7a:	eba5 0509 	sub.w	r5, r5, r9
 800da7e:	6026      	str	r6, [r4, #0]
 800da80:	60a5      	str	r5, [r4, #8]
 800da82:	463e      	mov	r6, r7
 800da84:	42be      	cmp	r6, r7
 800da86:	d900      	bls.n	800da8a <__ssputs_r+0x86>
 800da88:	463e      	mov	r6, r7
 800da8a:	6820      	ldr	r0, [r4, #0]
 800da8c:	4632      	mov	r2, r6
 800da8e:	4641      	mov	r1, r8
 800da90:	f000 f966 	bl	800dd60 <memmove>
 800da94:	68a3      	ldr	r3, [r4, #8]
 800da96:	1b9b      	subs	r3, r3, r6
 800da98:	60a3      	str	r3, [r4, #8]
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	4433      	add	r3, r6
 800da9e:	6023      	str	r3, [r4, #0]
 800daa0:	2000      	movs	r0, #0
 800daa2:	e7db      	b.n	800da5c <__ssputs_r+0x58>
 800daa4:	462a      	mov	r2, r5
 800daa6:	f000 f981 	bl	800ddac <_realloc_r>
 800daaa:	4606      	mov	r6, r0
 800daac:	2800      	cmp	r0, #0
 800daae:	d1e1      	bne.n	800da74 <__ssputs_r+0x70>
 800dab0:	6921      	ldr	r1, [r4, #16]
 800dab2:	4650      	mov	r0, sl
 800dab4:	f7ff fec6 	bl	800d844 <_free_r>
 800dab8:	e7c7      	b.n	800da4a <__ssputs_r+0x46>
	...

0800dabc <_svfiprintf_r>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	4698      	mov	r8, r3
 800dac2:	898b      	ldrh	r3, [r1, #12]
 800dac4:	061b      	lsls	r3, r3, #24
 800dac6:	b09d      	sub	sp, #116	; 0x74
 800dac8:	4607      	mov	r7, r0
 800daca:	460d      	mov	r5, r1
 800dacc:	4614      	mov	r4, r2
 800dace:	d50e      	bpl.n	800daee <_svfiprintf_r+0x32>
 800dad0:	690b      	ldr	r3, [r1, #16]
 800dad2:	b963      	cbnz	r3, 800daee <_svfiprintf_r+0x32>
 800dad4:	2140      	movs	r1, #64	; 0x40
 800dad6:	f7ff ff21 	bl	800d91c <_malloc_r>
 800dada:	6028      	str	r0, [r5, #0]
 800dadc:	6128      	str	r0, [r5, #16]
 800dade:	b920      	cbnz	r0, 800daea <_svfiprintf_r+0x2e>
 800dae0:	230c      	movs	r3, #12
 800dae2:	603b      	str	r3, [r7, #0]
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	e0d1      	b.n	800dc8e <_svfiprintf_r+0x1d2>
 800daea:	2340      	movs	r3, #64	; 0x40
 800daec:	616b      	str	r3, [r5, #20]
 800daee:	2300      	movs	r3, #0
 800daf0:	9309      	str	r3, [sp, #36]	; 0x24
 800daf2:	2320      	movs	r3, #32
 800daf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dafc:	2330      	movs	r3, #48	; 0x30
 800dafe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dca8 <_svfiprintf_r+0x1ec>
 800db02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db06:	f04f 0901 	mov.w	r9, #1
 800db0a:	4623      	mov	r3, r4
 800db0c:	469a      	mov	sl, r3
 800db0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db12:	b10a      	cbz	r2, 800db18 <_svfiprintf_r+0x5c>
 800db14:	2a25      	cmp	r2, #37	; 0x25
 800db16:	d1f9      	bne.n	800db0c <_svfiprintf_r+0x50>
 800db18:	ebba 0b04 	subs.w	fp, sl, r4
 800db1c:	d00b      	beq.n	800db36 <_svfiprintf_r+0x7a>
 800db1e:	465b      	mov	r3, fp
 800db20:	4622      	mov	r2, r4
 800db22:	4629      	mov	r1, r5
 800db24:	4638      	mov	r0, r7
 800db26:	f7ff ff6d 	bl	800da04 <__ssputs_r>
 800db2a:	3001      	adds	r0, #1
 800db2c:	f000 80aa 	beq.w	800dc84 <_svfiprintf_r+0x1c8>
 800db30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db32:	445a      	add	r2, fp
 800db34:	9209      	str	r2, [sp, #36]	; 0x24
 800db36:	f89a 3000 	ldrb.w	r3, [sl]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 80a2 	beq.w	800dc84 <_svfiprintf_r+0x1c8>
 800db40:	2300      	movs	r3, #0
 800db42:	f04f 32ff 	mov.w	r2, #4294967295
 800db46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db4a:	f10a 0a01 	add.w	sl, sl, #1
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	9307      	str	r3, [sp, #28]
 800db52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db56:	931a      	str	r3, [sp, #104]	; 0x68
 800db58:	4654      	mov	r4, sl
 800db5a:	2205      	movs	r2, #5
 800db5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db60:	4851      	ldr	r0, [pc, #324]	; (800dca8 <_svfiprintf_r+0x1ec>)
 800db62:	f7f2 fb45 	bl	80001f0 <memchr>
 800db66:	9a04      	ldr	r2, [sp, #16]
 800db68:	b9d8      	cbnz	r0, 800dba2 <_svfiprintf_r+0xe6>
 800db6a:	06d0      	lsls	r0, r2, #27
 800db6c:	bf44      	itt	mi
 800db6e:	2320      	movmi	r3, #32
 800db70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db74:	0711      	lsls	r1, r2, #28
 800db76:	bf44      	itt	mi
 800db78:	232b      	movmi	r3, #43	; 0x2b
 800db7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db7e:	f89a 3000 	ldrb.w	r3, [sl]
 800db82:	2b2a      	cmp	r3, #42	; 0x2a
 800db84:	d015      	beq.n	800dbb2 <_svfiprintf_r+0xf6>
 800db86:	9a07      	ldr	r2, [sp, #28]
 800db88:	4654      	mov	r4, sl
 800db8a:	2000      	movs	r0, #0
 800db8c:	f04f 0c0a 	mov.w	ip, #10
 800db90:	4621      	mov	r1, r4
 800db92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db96:	3b30      	subs	r3, #48	; 0x30
 800db98:	2b09      	cmp	r3, #9
 800db9a:	d94e      	bls.n	800dc3a <_svfiprintf_r+0x17e>
 800db9c:	b1b0      	cbz	r0, 800dbcc <_svfiprintf_r+0x110>
 800db9e:	9207      	str	r2, [sp, #28]
 800dba0:	e014      	b.n	800dbcc <_svfiprintf_r+0x110>
 800dba2:	eba0 0308 	sub.w	r3, r0, r8
 800dba6:	fa09 f303 	lsl.w	r3, r9, r3
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	46a2      	mov	sl, r4
 800dbb0:	e7d2      	b.n	800db58 <_svfiprintf_r+0x9c>
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	1d19      	adds	r1, r3, #4
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	9103      	str	r1, [sp, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfbb      	ittet	lt
 800dbbe:	425b      	neglt	r3, r3
 800dbc0:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc4:	9307      	strge	r3, [sp, #28]
 800dbc6:	9307      	strlt	r3, [sp, #28]
 800dbc8:	bfb8      	it	lt
 800dbca:	9204      	strlt	r2, [sp, #16]
 800dbcc:	7823      	ldrb	r3, [r4, #0]
 800dbce:	2b2e      	cmp	r3, #46	; 0x2e
 800dbd0:	d10c      	bne.n	800dbec <_svfiprintf_r+0x130>
 800dbd2:	7863      	ldrb	r3, [r4, #1]
 800dbd4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd6:	d135      	bne.n	800dc44 <_svfiprintf_r+0x188>
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	1d1a      	adds	r2, r3, #4
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	9203      	str	r2, [sp, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	bfb8      	it	lt
 800dbe4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbe8:	3402      	adds	r4, #2
 800dbea:	9305      	str	r3, [sp, #20]
 800dbec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dcb8 <_svfiprintf_r+0x1fc>
 800dbf0:	7821      	ldrb	r1, [r4, #0]
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	f7f2 fafb 	bl	80001f0 <memchr>
 800dbfa:	b140      	cbz	r0, 800dc0e <_svfiprintf_r+0x152>
 800dbfc:	2340      	movs	r3, #64	; 0x40
 800dbfe:	eba0 000a 	sub.w	r0, r0, sl
 800dc02:	fa03 f000 	lsl.w	r0, r3, r0
 800dc06:	9b04      	ldr	r3, [sp, #16]
 800dc08:	4303      	orrs	r3, r0
 800dc0a:	3401      	adds	r4, #1
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc12:	4826      	ldr	r0, [pc, #152]	; (800dcac <_svfiprintf_r+0x1f0>)
 800dc14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc18:	2206      	movs	r2, #6
 800dc1a:	f7f2 fae9 	bl	80001f0 <memchr>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d038      	beq.n	800dc94 <_svfiprintf_r+0x1d8>
 800dc22:	4b23      	ldr	r3, [pc, #140]	; (800dcb0 <_svfiprintf_r+0x1f4>)
 800dc24:	bb1b      	cbnz	r3, 800dc6e <_svfiprintf_r+0x1b2>
 800dc26:	9b03      	ldr	r3, [sp, #12]
 800dc28:	3307      	adds	r3, #7
 800dc2a:	f023 0307 	bic.w	r3, r3, #7
 800dc2e:	3308      	adds	r3, #8
 800dc30:	9303      	str	r3, [sp, #12]
 800dc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc34:	4433      	add	r3, r6
 800dc36:	9309      	str	r3, [sp, #36]	; 0x24
 800dc38:	e767      	b.n	800db0a <_svfiprintf_r+0x4e>
 800dc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc3e:	460c      	mov	r4, r1
 800dc40:	2001      	movs	r0, #1
 800dc42:	e7a5      	b.n	800db90 <_svfiprintf_r+0xd4>
 800dc44:	2300      	movs	r3, #0
 800dc46:	3401      	adds	r4, #1
 800dc48:	9305      	str	r3, [sp, #20]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	f04f 0c0a 	mov.w	ip, #10
 800dc50:	4620      	mov	r0, r4
 800dc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc56:	3a30      	subs	r2, #48	; 0x30
 800dc58:	2a09      	cmp	r2, #9
 800dc5a:	d903      	bls.n	800dc64 <_svfiprintf_r+0x1a8>
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d0c5      	beq.n	800dbec <_svfiprintf_r+0x130>
 800dc60:	9105      	str	r1, [sp, #20]
 800dc62:	e7c3      	b.n	800dbec <_svfiprintf_r+0x130>
 800dc64:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc68:	4604      	mov	r4, r0
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e7f0      	b.n	800dc50 <_svfiprintf_r+0x194>
 800dc6e:	ab03      	add	r3, sp, #12
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	462a      	mov	r2, r5
 800dc74:	4b0f      	ldr	r3, [pc, #60]	; (800dcb4 <_svfiprintf_r+0x1f8>)
 800dc76:	a904      	add	r1, sp, #16
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f7fd ffc9 	bl	800bc10 <_printf_float>
 800dc7e:	1c42      	adds	r2, r0, #1
 800dc80:	4606      	mov	r6, r0
 800dc82:	d1d6      	bne.n	800dc32 <_svfiprintf_r+0x176>
 800dc84:	89ab      	ldrh	r3, [r5, #12]
 800dc86:	065b      	lsls	r3, r3, #25
 800dc88:	f53f af2c 	bmi.w	800dae4 <_svfiprintf_r+0x28>
 800dc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8e:	b01d      	add	sp, #116	; 0x74
 800dc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc94:	ab03      	add	r3, sp, #12
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	462a      	mov	r2, r5
 800dc9a:	4b06      	ldr	r3, [pc, #24]	; (800dcb4 <_svfiprintf_r+0x1f8>)
 800dc9c:	a904      	add	r1, sp, #16
 800dc9e:	4638      	mov	r0, r7
 800dca0:	f7fe fa5a 	bl	800c158 <_printf_i>
 800dca4:	e7eb      	b.n	800dc7e <_svfiprintf_r+0x1c2>
 800dca6:	bf00      	nop
 800dca8:	0800ec0c 	.word	0x0800ec0c
 800dcac:	0800ec16 	.word	0x0800ec16
 800dcb0:	0800bc11 	.word	0x0800bc11
 800dcb4:	0800da05 	.word	0x0800da05
 800dcb8:	0800ec12 	.word	0x0800ec12

0800dcbc <_sbrk_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d06      	ldr	r5, [pc, #24]	; (800dcd8 <_sbrk_r+0x1c>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f4 fe02 	bl	80028d0 <_sbrk>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_sbrk_r+0x1a>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_sbrk_r+0x1a>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	20001928 	.word	0x20001928

0800dcdc <__assert_func>:
 800dcdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcde:	4614      	mov	r4, r2
 800dce0:	461a      	mov	r2, r3
 800dce2:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <__assert_func+0x2c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4605      	mov	r5, r0
 800dce8:	68d8      	ldr	r0, [r3, #12]
 800dcea:	b14c      	cbz	r4, 800dd00 <__assert_func+0x24>
 800dcec:	4b07      	ldr	r3, [pc, #28]	; (800dd0c <__assert_func+0x30>)
 800dcee:	9100      	str	r1, [sp, #0]
 800dcf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcf4:	4906      	ldr	r1, [pc, #24]	; (800dd10 <__assert_func+0x34>)
 800dcf6:	462b      	mov	r3, r5
 800dcf8:	f000 f80e 	bl	800dd18 <fiprintf>
 800dcfc:	f000 faac 	bl	800e258 <abort>
 800dd00:	4b04      	ldr	r3, [pc, #16]	; (800dd14 <__assert_func+0x38>)
 800dd02:	461c      	mov	r4, r3
 800dd04:	e7f3      	b.n	800dcee <__assert_func+0x12>
 800dd06:	bf00      	nop
 800dd08:	20000108 	.word	0x20000108
 800dd0c:	0800ec1d 	.word	0x0800ec1d
 800dd10:	0800ec2a 	.word	0x0800ec2a
 800dd14:	0800ec58 	.word	0x0800ec58

0800dd18 <fiprintf>:
 800dd18:	b40e      	push	{r1, r2, r3}
 800dd1a:	b503      	push	{r0, r1, lr}
 800dd1c:	4601      	mov	r1, r0
 800dd1e:	ab03      	add	r3, sp, #12
 800dd20:	4805      	ldr	r0, [pc, #20]	; (800dd38 <fiprintf+0x20>)
 800dd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd26:	6800      	ldr	r0, [r0, #0]
 800dd28:	9301      	str	r3, [sp, #4]
 800dd2a:	f000 f897 	bl	800de5c <_vfiprintf_r>
 800dd2e:	b002      	add	sp, #8
 800dd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd34:	b003      	add	sp, #12
 800dd36:	4770      	bx	lr
 800dd38:	20000108 	.word	0x20000108

0800dd3c <__ascii_mbtowc>:
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	b901      	cbnz	r1, 800dd42 <__ascii_mbtowc+0x6>
 800dd40:	a901      	add	r1, sp, #4
 800dd42:	b142      	cbz	r2, 800dd56 <__ascii_mbtowc+0x1a>
 800dd44:	b14b      	cbz	r3, 800dd5a <__ascii_mbtowc+0x1e>
 800dd46:	7813      	ldrb	r3, [r2, #0]
 800dd48:	600b      	str	r3, [r1, #0]
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	1e10      	subs	r0, r2, #0
 800dd4e:	bf18      	it	ne
 800dd50:	2001      	movne	r0, #1
 800dd52:	b002      	add	sp, #8
 800dd54:	4770      	bx	lr
 800dd56:	4610      	mov	r0, r2
 800dd58:	e7fb      	b.n	800dd52 <__ascii_mbtowc+0x16>
 800dd5a:	f06f 0001 	mvn.w	r0, #1
 800dd5e:	e7f8      	b.n	800dd52 <__ascii_mbtowc+0x16>

0800dd60 <memmove>:
 800dd60:	4288      	cmp	r0, r1
 800dd62:	b510      	push	{r4, lr}
 800dd64:	eb01 0402 	add.w	r4, r1, r2
 800dd68:	d902      	bls.n	800dd70 <memmove+0x10>
 800dd6a:	4284      	cmp	r4, r0
 800dd6c:	4623      	mov	r3, r4
 800dd6e:	d807      	bhi.n	800dd80 <memmove+0x20>
 800dd70:	1e43      	subs	r3, r0, #1
 800dd72:	42a1      	cmp	r1, r4
 800dd74:	d008      	beq.n	800dd88 <memmove+0x28>
 800dd76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd7e:	e7f8      	b.n	800dd72 <memmove+0x12>
 800dd80:	4402      	add	r2, r0
 800dd82:	4601      	mov	r1, r0
 800dd84:	428a      	cmp	r2, r1
 800dd86:	d100      	bne.n	800dd8a <memmove+0x2a>
 800dd88:	bd10      	pop	{r4, pc}
 800dd8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd92:	e7f7      	b.n	800dd84 <memmove+0x24>

0800dd94 <__malloc_lock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	; (800dd9c <__malloc_lock+0x8>)
 800dd96:	f000 bc1f 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	2000192c 	.word	0x2000192c

0800dda0 <__malloc_unlock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	; (800dda8 <__malloc_unlock+0x8>)
 800dda2:	f000 bc1a 	b.w	800e5da <__retarget_lock_release_recursive>
 800dda6:	bf00      	nop
 800dda8:	2000192c 	.word	0x2000192c

0800ddac <_realloc_r>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	4614      	mov	r4, r2
 800ddb4:	460e      	mov	r6, r1
 800ddb6:	b921      	cbnz	r1, 800ddc2 <_realloc_r+0x16>
 800ddb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	f7ff bdad 	b.w	800d91c <_malloc_r>
 800ddc2:	b92a      	cbnz	r2, 800ddd0 <_realloc_r+0x24>
 800ddc4:	f7ff fd3e 	bl	800d844 <_free_r>
 800ddc8:	4625      	mov	r5, r4
 800ddca:	4628      	mov	r0, r5
 800ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd0:	f000 fc6a 	bl	800e6a8 <_malloc_usable_size_r>
 800ddd4:	4284      	cmp	r4, r0
 800ddd6:	4607      	mov	r7, r0
 800ddd8:	d802      	bhi.n	800dde0 <_realloc_r+0x34>
 800ddda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddde:	d812      	bhi.n	800de06 <_realloc_r+0x5a>
 800dde0:	4621      	mov	r1, r4
 800dde2:	4640      	mov	r0, r8
 800dde4:	f7ff fd9a 	bl	800d91c <_malloc_r>
 800dde8:	4605      	mov	r5, r0
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d0ed      	beq.n	800ddca <_realloc_r+0x1e>
 800ddee:	42bc      	cmp	r4, r7
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	bf28      	it	cs
 800ddf6:	463a      	movcs	r2, r7
 800ddf8:	f7ff f97c 	bl	800d0f4 <memcpy>
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4640      	mov	r0, r8
 800de00:	f7ff fd20 	bl	800d844 <_free_r>
 800de04:	e7e1      	b.n	800ddca <_realloc_r+0x1e>
 800de06:	4635      	mov	r5, r6
 800de08:	e7df      	b.n	800ddca <_realloc_r+0x1e>

0800de0a <__sfputc_r>:
 800de0a:	6893      	ldr	r3, [r2, #8]
 800de0c:	3b01      	subs	r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	b410      	push	{r4}
 800de12:	6093      	str	r3, [r2, #8]
 800de14:	da08      	bge.n	800de28 <__sfputc_r+0x1e>
 800de16:	6994      	ldr	r4, [r2, #24]
 800de18:	42a3      	cmp	r3, r4
 800de1a:	db01      	blt.n	800de20 <__sfputc_r+0x16>
 800de1c:	290a      	cmp	r1, #10
 800de1e:	d103      	bne.n	800de28 <__sfputc_r+0x1e>
 800de20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de24:	f000 b94a 	b.w	800e0bc <__swbuf_r>
 800de28:	6813      	ldr	r3, [r2, #0]
 800de2a:	1c58      	adds	r0, r3, #1
 800de2c:	6010      	str	r0, [r2, #0]
 800de2e:	7019      	strb	r1, [r3, #0]
 800de30:	4608      	mov	r0, r1
 800de32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <__sfputs_r>:
 800de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3a:	4606      	mov	r6, r0
 800de3c:	460f      	mov	r7, r1
 800de3e:	4614      	mov	r4, r2
 800de40:	18d5      	adds	r5, r2, r3
 800de42:	42ac      	cmp	r4, r5
 800de44:	d101      	bne.n	800de4a <__sfputs_r+0x12>
 800de46:	2000      	movs	r0, #0
 800de48:	e007      	b.n	800de5a <__sfputs_r+0x22>
 800de4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4e:	463a      	mov	r2, r7
 800de50:	4630      	mov	r0, r6
 800de52:	f7ff ffda 	bl	800de0a <__sfputc_r>
 800de56:	1c43      	adds	r3, r0, #1
 800de58:	d1f3      	bne.n	800de42 <__sfputs_r+0xa>
 800de5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de5c <_vfiprintf_r>:
 800de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de60:	460d      	mov	r5, r1
 800de62:	b09d      	sub	sp, #116	; 0x74
 800de64:	4614      	mov	r4, r2
 800de66:	4698      	mov	r8, r3
 800de68:	4606      	mov	r6, r0
 800de6a:	b118      	cbz	r0, 800de74 <_vfiprintf_r+0x18>
 800de6c:	6983      	ldr	r3, [r0, #24]
 800de6e:	b90b      	cbnz	r3, 800de74 <_vfiprintf_r+0x18>
 800de70:	f000 fb14 	bl	800e49c <__sinit>
 800de74:	4b89      	ldr	r3, [pc, #548]	; (800e09c <_vfiprintf_r+0x240>)
 800de76:	429d      	cmp	r5, r3
 800de78:	d11b      	bne.n	800deb2 <_vfiprintf_r+0x56>
 800de7a:	6875      	ldr	r5, [r6, #4]
 800de7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de7e:	07d9      	lsls	r1, r3, #31
 800de80:	d405      	bmi.n	800de8e <_vfiprintf_r+0x32>
 800de82:	89ab      	ldrh	r3, [r5, #12]
 800de84:	059a      	lsls	r2, r3, #22
 800de86:	d402      	bmi.n	800de8e <_vfiprintf_r+0x32>
 800de88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de8a:	f000 fba5 	bl	800e5d8 <__retarget_lock_acquire_recursive>
 800de8e:	89ab      	ldrh	r3, [r5, #12]
 800de90:	071b      	lsls	r3, r3, #28
 800de92:	d501      	bpl.n	800de98 <_vfiprintf_r+0x3c>
 800de94:	692b      	ldr	r3, [r5, #16]
 800de96:	b9eb      	cbnz	r3, 800ded4 <_vfiprintf_r+0x78>
 800de98:	4629      	mov	r1, r5
 800de9a:	4630      	mov	r0, r6
 800de9c:	f000 f96e 	bl	800e17c <__swsetup_r>
 800dea0:	b1c0      	cbz	r0, 800ded4 <_vfiprintf_r+0x78>
 800dea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea4:	07dc      	lsls	r4, r3, #31
 800dea6:	d50e      	bpl.n	800dec6 <_vfiprintf_r+0x6a>
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	b01d      	add	sp, #116	; 0x74
 800deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb2:	4b7b      	ldr	r3, [pc, #492]	; (800e0a0 <_vfiprintf_r+0x244>)
 800deb4:	429d      	cmp	r5, r3
 800deb6:	d101      	bne.n	800debc <_vfiprintf_r+0x60>
 800deb8:	68b5      	ldr	r5, [r6, #8]
 800deba:	e7df      	b.n	800de7c <_vfiprintf_r+0x20>
 800debc:	4b79      	ldr	r3, [pc, #484]	; (800e0a4 <_vfiprintf_r+0x248>)
 800debe:	429d      	cmp	r5, r3
 800dec0:	bf08      	it	eq
 800dec2:	68f5      	ldreq	r5, [r6, #12]
 800dec4:	e7da      	b.n	800de7c <_vfiprintf_r+0x20>
 800dec6:	89ab      	ldrh	r3, [r5, #12]
 800dec8:	0598      	lsls	r0, r3, #22
 800deca:	d4ed      	bmi.n	800dea8 <_vfiprintf_r+0x4c>
 800decc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dece:	f000 fb84 	bl	800e5da <__retarget_lock_release_recursive>
 800ded2:	e7e9      	b.n	800dea8 <_vfiprintf_r+0x4c>
 800ded4:	2300      	movs	r3, #0
 800ded6:	9309      	str	r3, [sp, #36]	; 0x24
 800ded8:	2320      	movs	r3, #32
 800deda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dede:	f8cd 800c 	str.w	r8, [sp, #12]
 800dee2:	2330      	movs	r3, #48	; 0x30
 800dee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0a8 <_vfiprintf_r+0x24c>
 800dee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800deec:	f04f 0901 	mov.w	r9, #1
 800def0:	4623      	mov	r3, r4
 800def2:	469a      	mov	sl, r3
 800def4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def8:	b10a      	cbz	r2, 800defe <_vfiprintf_r+0xa2>
 800defa:	2a25      	cmp	r2, #37	; 0x25
 800defc:	d1f9      	bne.n	800def2 <_vfiprintf_r+0x96>
 800defe:	ebba 0b04 	subs.w	fp, sl, r4
 800df02:	d00b      	beq.n	800df1c <_vfiprintf_r+0xc0>
 800df04:	465b      	mov	r3, fp
 800df06:	4622      	mov	r2, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	4630      	mov	r0, r6
 800df0c:	f7ff ff94 	bl	800de38 <__sfputs_r>
 800df10:	3001      	adds	r0, #1
 800df12:	f000 80aa 	beq.w	800e06a <_vfiprintf_r+0x20e>
 800df16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df18:	445a      	add	r2, fp
 800df1a:	9209      	str	r2, [sp, #36]	; 0x24
 800df1c:	f89a 3000 	ldrb.w	r3, [sl]
 800df20:	2b00      	cmp	r3, #0
 800df22:	f000 80a2 	beq.w	800e06a <_vfiprintf_r+0x20e>
 800df26:	2300      	movs	r3, #0
 800df28:	f04f 32ff 	mov.w	r2, #4294967295
 800df2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df30:	f10a 0a01 	add.w	sl, sl, #1
 800df34:	9304      	str	r3, [sp, #16]
 800df36:	9307      	str	r3, [sp, #28]
 800df38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df3c:	931a      	str	r3, [sp, #104]	; 0x68
 800df3e:	4654      	mov	r4, sl
 800df40:	2205      	movs	r2, #5
 800df42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df46:	4858      	ldr	r0, [pc, #352]	; (800e0a8 <_vfiprintf_r+0x24c>)
 800df48:	f7f2 f952 	bl	80001f0 <memchr>
 800df4c:	9a04      	ldr	r2, [sp, #16]
 800df4e:	b9d8      	cbnz	r0, 800df88 <_vfiprintf_r+0x12c>
 800df50:	06d1      	lsls	r1, r2, #27
 800df52:	bf44      	itt	mi
 800df54:	2320      	movmi	r3, #32
 800df56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df5a:	0713      	lsls	r3, r2, #28
 800df5c:	bf44      	itt	mi
 800df5e:	232b      	movmi	r3, #43	; 0x2b
 800df60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df64:	f89a 3000 	ldrb.w	r3, [sl]
 800df68:	2b2a      	cmp	r3, #42	; 0x2a
 800df6a:	d015      	beq.n	800df98 <_vfiprintf_r+0x13c>
 800df6c:	9a07      	ldr	r2, [sp, #28]
 800df6e:	4654      	mov	r4, sl
 800df70:	2000      	movs	r0, #0
 800df72:	f04f 0c0a 	mov.w	ip, #10
 800df76:	4621      	mov	r1, r4
 800df78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df7c:	3b30      	subs	r3, #48	; 0x30
 800df7e:	2b09      	cmp	r3, #9
 800df80:	d94e      	bls.n	800e020 <_vfiprintf_r+0x1c4>
 800df82:	b1b0      	cbz	r0, 800dfb2 <_vfiprintf_r+0x156>
 800df84:	9207      	str	r2, [sp, #28]
 800df86:	e014      	b.n	800dfb2 <_vfiprintf_r+0x156>
 800df88:	eba0 0308 	sub.w	r3, r0, r8
 800df8c:	fa09 f303 	lsl.w	r3, r9, r3
 800df90:	4313      	orrs	r3, r2
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	46a2      	mov	sl, r4
 800df96:	e7d2      	b.n	800df3e <_vfiprintf_r+0xe2>
 800df98:	9b03      	ldr	r3, [sp, #12]
 800df9a:	1d19      	adds	r1, r3, #4
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	9103      	str	r1, [sp, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	bfbb      	ittet	lt
 800dfa4:	425b      	neglt	r3, r3
 800dfa6:	f042 0202 	orrlt.w	r2, r2, #2
 800dfaa:	9307      	strge	r3, [sp, #28]
 800dfac:	9307      	strlt	r3, [sp, #28]
 800dfae:	bfb8      	it	lt
 800dfb0:	9204      	strlt	r2, [sp, #16]
 800dfb2:	7823      	ldrb	r3, [r4, #0]
 800dfb4:	2b2e      	cmp	r3, #46	; 0x2e
 800dfb6:	d10c      	bne.n	800dfd2 <_vfiprintf_r+0x176>
 800dfb8:	7863      	ldrb	r3, [r4, #1]
 800dfba:	2b2a      	cmp	r3, #42	; 0x2a
 800dfbc:	d135      	bne.n	800e02a <_vfiprintf_r+0x1ce>
 800dfbe:	9b03      	ldr	r3, [sp, #12]
 800dfc0:	1d1a      	adds	r2, r3, #4
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	9203      	str	r2, [sp, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bfb8      	it	lt
 800dfca:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfce:	3402      	adds	r4, #2
 800dfd0:	9305      	str	r3, [sp, #20]
 800dfd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0b8 <_vfiprintf_r+0x25c>
 800dfd6:	7821      	ldrb	r1, [r4, #0]
 800dfd8:	2203      	movs	r2, #3
 800dfda:	4650      	mov	r0, sl
 800dfdc:	f7f2 f908 	bl	80001f0 <memchr>
 800dfe0:	b140      	cbz	r0, 800dff4 <_vfiprintf_r+0x198>
 800dfe2:	2340      	movs	r3, #64	; 0x40
 800dfe4:	eba0 000a 	sub.w	r0, r0, sl
 800dfe8:	fa03 f000 	lsl.w	r0, r3, r0
 800dfec:	9b04      	ldr	r3, [sp, #16]
 800dfee:	4303      	orrs	r3, r0
 800dff0:	3401      	adds	r4, #1
 800dff2:	9304      	str	r3, [sp, #16]
 800dff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff8:	482c      	ldr	r0, [pc, #176]	; (800e0ac <_vfiprintf_r+0x250>)
 800dffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dffe:	2206      	movs	r2, #6
 800e000:	f7f2 f8f6 	bl	80001f0 <memchr>
 800e004:	2800      	cmp	r0, #0
 800e006:	d03f      	beq.n	800e088 <_vfiprintf_r+0x22c>
 800e008:	4b29      	ldr	r3, [pc, #164]	; (800e0b0 <_vfiprintf_r+0x254>)
 800e00a:	bb1b      	cbnz	r3, 800e054 <_vfiprintf_r+0x1f8>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	3307      	adds	r3, #7
 800e010:	f023 0307 	bic.w	r3, r3, #7
 800e014:	3308      	adds	r3, #8
 800e016:	9303      	str	r3, [sp, #12]
 800e018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e01a:	443b      	add	r3, r7
 800e01c:	9309      	str	r3, [sp, #36]	; 0x24
 800e01e:	e767      	b.n	800def0 <_vfiprintf_r+0x94>
 800e020:	fb0c 3202 	mla	r2, ip, r2, r3
 800e024:	460c      	mov	r4, r1
 800e026:	2001      	movs	r0, #1
 800e028:	e7a5      	b.n	800df76 <_vfiprintf_r+0x11a>
 800e02a:	2300      	movs	r3, #0
 800e02c:	3401      	adds	r4, #1
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	4619      	mov	r1, r3
 800e032:	f04f 0c0a 	mov.w	ip, #10
 800e036:	4620      	mov	r0, r4
 800e038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e03c:	3a30      	subs	r2, #48	; 0x30
 800e03e:	2a09      	cmp	r2, #9
 800e040:	d903      	bls.n	800e04a <_vfiprintf_r+0x1ee>
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0c5      	beq.n	800dfd2 <_vfiprintf_r+0x176>
 800e046:	9105      	str	r1, [sp, #20]
 800e048:	e7c3      	b.n	800dfd2 <_vfiprintf_r+0x176>
 800e04a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e04e:	4604      	mov	r4, r0
 800e050:	2301      	movs	r3, #1
 800e052:	e7f0      	b.n	800e036 <_vfiprintf_r+0x1da>
 800e054:	ab03      	add	r3, sp, #12
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	462a      	mov	r2, r5
 800e05a:	4b16      	ldr	r3, [pc, #88]	; (800e0b4 <_vfiprintf_r+0x258>)
 800e05c:	a904      	add	r1, sp, #16
 800e05e:	4630      	mov	r0, r6
 800e060:	f7fd fdd6 	bl	800bc10 <_printf_float>
 800e064:	4607      	mov	r7, r0
 800e066:	1c78      	adds	r0, r7, #1
 800e068:	d1d6      	bne.n	800e018 <_vfiprintf_r+0x1bc>
 800e06a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06c:	07d9      	lsls	r1, r3, #31
 800e06e:	d405      	bmi.n	800e07c <_vfiprintf_r+0x220>
 800e070:	89ab      	ldrh	r3, [r5, #12]
 800e072:	059a      	lsls	r2, r3, #22
 800e074:	d402      	bmi.n	800e07c <_vfiprintf_r+0x220>
 800e076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e078:	f000 faaf 	bl	800e5da <__retarget_lock_release_recursive>
 800e07c:	89ab      	ldrh	r3, [r5, #12]
 800e07e:	065b      	lsls	r3, r3, #25
 800e080:	f53f af12 	bmi.w	800dea8 <_vfiprintf_r+0x4c>
 800e084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e086:	e711      	b.n	800deac <_vfiprintf_r+0x50>
 800e088:	ab03      	add	r3, sp, #12
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	462a      	mov	r2, r5
 800e08e:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <_vfiprintf_r+0x258>)
 800e090:	a904      	add	r1, sp, #16
 800e092:	4630      	mov	r0, r6
 800e094:	f7fe f860 	bl	800c158 <_printf_i>
 800e098:	e7e4      	b.n	800e064 <_vfiprintf_r+0x208>
 800e09a:	bf00      	nop
 800e09c:	0800ed84 	.word	0x0800ed84
 800e0a0:	0800eda4 	.word	0x0800eda4
 800e0a4:	0800ed64 	.word	0x0800ed64
 800e0a8:	0800ec0c 	.word	0x0800ec0c
 800e0ac:	0800ec16 	.word	0x0800ec16
 800e0b0:	0800bc11 	.word	0x0800bc11
 800e0b4:	0800de39 	.word	0x0800de39
 800e0b8:	0800ec12 	.word	0x0800ec12

0800e0bc <__swbuf_r>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	460e      	mov	r6, r1
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	b118      	cbz	r0, 800e0ce <__swbuf_r+0x12>
 800e0c6:	6983      	ldr	r3, [r0, #24]
 800e0c8:	b90b      	cbnz	r3, 800e0ce <__swbuf_r+0x12>
 800e0ca:	f000 f9e7 	bl	800e49c <__sinit>
 800e0ce:	4b21      	ldr	r3, [pc, #132]	; (800e154 <__swbuf_r+0x98>)
 800e0d0:	429c      	cmp	r4, r3
 800e0d2:	d12b      	bne.n	800e12c <__swbuf_r+0x70>
 800e0d4:	686c      	ldr	r4, [r5, #4]
 800e0d6:	69a3      	ldr	r3, [r4, #24]
 800e0d8:	60a3      	str	r3, [r4, #8]
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	071a      	lsls	r2, r3, #28
 800e0de:	d52f      	bpl.n	800e140 <__swbuf_r+0x84>
 800e0e0:	6923      	ldr	r3, [r4, #16]
 800e0e2:	b36b      	cbz	r3, 800e140 <__swbuf_r+0x84>
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	6820      	ldr	r0, [r4, #0]
 800e0e8:	1ac0      	subs	r0, r0, r3
 800e0ea:	6963      	ldr	r3, [r4, #20]
 800e0ec:	b2f6      	uxtb	r6, r6
 800e0ee:	4283      	cmp	r3, r0
 800e0f0:	4637      	mov	r7, r6
 800e0f2:	dc04      	bgt.n	800e0fe <__swbuf_r+0x42>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f000 f93c 	bl	800e374 <_fflush_r>
 800e0fc:	bb30      	cbnz	r0, 800e14c <__swbuf_r+0x90>
 800e0fe:	68a3      	ldr	r3, [r4, #8]
 800e100:	3b01      	subs	r3, #1
 800e102:	60a3      	str	r3, [r4, #8]
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	6022      	str	r2, [r4, #0]
 800e10a:	701e      	strb	r6, [r3, #0]
 800e10c:	6963      	ldr	r3, [r4, #20]
 800e10e:	3001      	adds	r0, #1
 800e110:	4283      	cmp	r3, r0
 800e112:	d004      	beq.n	800e11e <__swbuf_r+0x62>
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	07db      	lsls	r3, r3, #31
 800e118:	d506      	bpl.n	800e128 <__swbuf_r+0x6c>
 800e11a:	2e0a      	cmp	r6, #10
 800e11c:	d104      	bne.n	800e128 <__swbuf_r+0x6c>
 800e11e:	4621      	mov	r1, r4
 800e120:	4628      	mov	r0, r5
 800e122:	f000 f927 	bl	800e374 <_fflush_r>
 800e126:	b988      	cbnz	r0, 800e14c <__swbuf_r+0x90>
 800e128:	4638      	mov	r0, r7
 800e12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <__swbuf_r+0x9c>)
 800e12e:	429c      	cmp	r4, r3
 800e130:	d101      	bne.n	800e136 <__swbuf_r+0x7a>
 800e132:	68ac      	ldr	r4, [r5, #8]
 800e134:	e7cf      	b.n	800e0d6 <__swbuf_r+0x1a>
 800e136:	4b09      	ldr	r3, [pc, #36]	; (800e15c <__swbuf_r+0xa0>)
 800e138:	429c      	cmp	r4, r3
 800e13a:	bf08      	it	eq
 800e13c:	68ec      	ldreq	r4, [r5, #12]
 800e13e:	e7ca      	b.n	800e0d6 <__swbuf_r+0x1a>
 800e140:	4621      	mov	r1, r4
 800e142:	4628      	mov	r0, r5
 800e144:	f000 f81a 	bl	800e17c <__swsetup_r>
 800e148:	2800      	cmp	r0, #0
 800e14a:	d0cb      	beq.n	800e0e4 <__swbuf_r+0x28>
 800e14c:	f04f 37ff 	mov.w	r7, #4294967295
 800e150:	e7ea      	b.n	800e128 <__swbuf_r+0x6c>
 800e152:	bf00      	nop
 800e154:	0800ed84 	.word	0x0800ed84
 800e158:	0800eda4 	.word	0x0800eda4
 800e15c:	0800ed64 	.word	0x0800ed64

0800e160 <__ascii_wctomb>:
 800e160:	b149      	cbz	r1, 800e176 <__ascii_wctomb+0x16>
 800e162:	2aff      	cmp	r2, #255	; 0xff
 800e164:	bf85      	ittet	hi
 800e166:	238a      	movhi	r3, #138	; 0x8a
 800e168:	6003      	strhi	r3, [r0, #0]
 800e16a:	700a      	strbls	r2, [r1, #0]
 800e16c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e170:	bf98      	it	ls
 800e172:	2001      	movls	r0, #1
 800e174:	4770      	bx	lr
 800e176:	4608      	mov	r0, r1
 800e178:	4770      	bx	lr
	...

0800e17c <__swsetup_r>:
 800e17c:	4b32      	ldr	r3, [pc, #200]	; (800e248 <__swsetup_r+0xcc>)
 800e17e:	b570      	push	{r4, r5, r6, lr}
 800e180:	681d      	ldr	r5, [r3, #0]
 800e182:	4606      	mov	r6, r0
 800e184:	460c      	mov	r4, r1
 800e186:	b125      	cbz	r5, 800e192 <__swsetup_r+0x16>
 800e188:	69ab      	ldr	r3, [r5, #24]
 800e18a:	b913      	cbnz	r3, 800e192 <__swsetup_r+0x16>
 800e18c:	4628      	mov	r0, r5
 800e18e:	f000 f985 	bl	800e49c <__sinit>
 800e192:	4b2e      	ldr	r3, [pc, #184]	; (800e24c <__swsetup_r+0xd0>)
 800e194:	429c      	cmp	r4, r3
 800e196:	d10f      	bne.n	800e1b8 <__swsetup_r+0x3c>
 800e198:	686c      	ldr	r4, [r5, #4]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1a0:	0719      	lsls	r1, r3, #28
 800e1a2:	d42c      	bmi.n	800e1fe <__swsetup_r+0x82>
 800e1a4:	06dd      	lsls	r5, r3, #27
 800e1a6:	d411      	bmi.n	800e1cc <__swsetup_r+0x50>
 800e1a8:	2309      	movs	r3, #9
 800e1aa:	6033      	str	r3, [r6, #0]
 800e1ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b6:	e03e      	b.n	800e236 <__swsetup_r+0xba>
 800e1b8:	4b25      	ldr	r3, [pc, #148]	; (800e250 <__swsetup_r+0xd4>)
 800e1ba:	429c      	cmp	r4, r3
 800e1bc:	d101      	bne.n	800e1c2 <__swsetup_r+0x46>
 800e1be:	68ac      	ldr	r4, [r5, #8]
 800e1c0:	e7eb      	b.n	800e19a <__swsetup_r+0x1e>
 800e1c2:	4b24      	ldr	r3, [pc, #144]	; (800e254 <__swsetup_r+0xd8>)
 800e1c4:	429c      	cmp	r4, r3
 800e1c6:	bf08      	it	eq
 800e1c8:	68ec      	ldreq	r4, [r5, #12]
 800e1ca:	e7e6      	b.n	800e19a <__swsetup_r+0x1e>
 800e1cc:	0758      	lsls	r0, r3, #29
 800e1ce:	d512      	bpl.n	800e1f6 <__swsetup_r+0x7a>
 800e1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1d2:	b141      	cbz	r1, 800e1e6 <__swsetup_r+0x6a>
 800e1d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1d8:	4299      	cmp	r1, r3
 800e1da:	d002      	beq.n	800e1e2 <__swsetup_r+0x66>
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7ff fb31 	bl	800d844 <_free_r>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	6363      	str	r3, [r4, #52]	; 0x34
 800e1e6:	89a3      	ldrh	r3, [r4, #12]
 800e1e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1ec:	81a3      	strh	r3, [r4, #12]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	6063      	str	r3, [r4, #4]
 800e1f2:	6923      	ldr	r3, [r4, #16]
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	f043 0308 	orr.w	r3, r3, #8
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	b94b      	cbnz	r3, 800e216 <__swsetup_r+0x9a>
 800e202:	89a3      	ldrh	r3, [r4, #12]
 800e204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e20c:	d003      	beq.n	800e216 <__swsetup_r+0x9a>
 800e20e:	4621      	mov	r1, r4
 800e210:	4630      	mov	r0, r6
 800e212:	f000 fa09 	bl	800e628 <__smakebuf_r>
 800e216:	89a0      	ldrh	r0, [r4, #12]
 800e218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e21c:	f010 0301 	ands.w	r3, r0, #1
 800e220:	d00a      	beq.n	800e238 <__swsetup_r+0xbc>
 800e222:	2300      	movs	r3, #0
 800e224:	60a3      	str	r3, [r4, #8]
 800e226:	6963      	ldr	r3, [r4, #20]
 800e228:	425b      	negs	r3, r3
 800e22a:	61a3      	str	r3, [r4, #24]
 800e22c:	6923      	ldr	r3, [r4, #16]
 800e22e:	b943      	cbnz	r3, 800e242 <__swsetup_r+0xc6>
 800e230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e234:	d1ba      	bne.n	800e1ac <__swsetup_r+0x30>
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	0781      	lsls	r1, r0, #30
 800e23a:	bf58      	it	pl
 800e23c:	6963      	ldrpl	r3, [r4, #20]
 800e23e:	60a3      	str	r3, [r4, #8]
 800e240:	e7f4      	b.n	800e22c <__swsetup_r+0xb0>
 800e242:	2000      	movs	r0, #0
 800e244:	e7f7      	b.n	800e236 <__swsetup_r+0xba>
 800e246:	bf00      	nop
 800e248:	20000108 	.word	0x20000108
 800e24c:	0800ed84 	.word	0x0800ed84
 800e250:	0800eda4 	.word	0x0800eda4
 800e254:	0800ed64 	.word	0x0800ed64

0800e258 <abort>:
 800e258:	b508      	push	{r3, lr}
 800e25a:	2006      	movs	r0, #6
 800e25c:	f000 fa54 	bl	800e708 <raise>
 800e260:	2001      	movs	r0, #1
 800e262:	f7f4 fabd 	bl	80027e0 <_exit>
	...

0800e268 <__sflush_r>:
 800e268:	898a      	ldrh	r2, [r1, #12]
 800e26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26e:	4605      	mov	r5, r0
 800e270:	0710      	lsls	r0, r2, #28
 800e272:	460c      	mov	r4, r1
 800e274:	d458      	bmi.n	800e328 <__sflush_r+0xc0>
 800e276:	684b      	ldr	r3, [r1, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	dc05      	bgt.n	800e288 <__sflush_r+0x20>
 800e27c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e27e:	2b00      	cmp	r3, #0
 800e280:	dc02      	bgt.n	800e288 <__sflush_r+0x20>
 800e282:	2000      	movs	r0, #0
 800e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	d0f9      	beq.n	800e282 <__sflush_r+0x1a>
 800e28e:	2300      	movs	r3, #0
 800e290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e294:	682f      	ldr	r7, [r5, #0]
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	d032      	beq.n	800e300 <__sflush_r+0x98>
 800e29a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	075a      	lsls	r2, r3, #29
 800e2a0:	d505      	bpl.n	800e2ae <__sflush_r+0x46>
 800e2a2:	6863      	ldr	r3, [r4, #4]
 800e2a4:	1ac0      	subs	r0, r0, r3
 800e2a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2a8:	b10b      	cbz	r3, 800e2ae <__sflush_r+0x46>
 800e2aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e2ac:	1ac0      	subs	r0, r0, r3
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2b4:	6a21      	ldr	r1, [r4, #32]
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	47b0      	blx	r6
 800e2ba:	1c43      	adds	r3, r0, #1
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	d106      	bne.n	800e2ce <__sflush_r+0x66>
 800e2c0:	6829      	ldr	r1, [r5, #0]
 800e2c2:	291d      	cmp	r1, #29
 800e2c4:	d82c      	bhi.n	800e320 <__sflush_r+0xb8>
 800e2c6:	4a2a      	ldr	r2, [pc, #168]	; (800e370 <__sflush_r+0x108>)
 800e2c8:	40ca      	lsrs	r2, r1
 800e2ca:	07d6      	lsls	r6, r2, #31
 800e2cc:	d528      	bpl.n	800e320 <__sflush_r+0xb8>
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	6062      	str	r2, [r4, #4]
 800e2d2:	04d9      	lsls	r1, r3, #19
 800e2d4:	6922      	ldr	r2, [r4, #16]
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	d504      	bpl.n	800e2e4 <__sflush_r+0x7c>
 800e2da:	1c42      	adds	r2, r0, #1
 800e2dc:	d101      	bne.n	800e2e2 <__sflush_r+0x7a>
 800e2de:	682b      	ldr	r3, [r5, #0]
 800e2e0:	b903      	cbnz	r3, 800e2e4 <__sflush_r+0x7c>
 800e2e2:	6560      	str	r0, [r4, #84]	; 0x54
 800e2e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2e6:	602f      	str	r7, [r5, #0]
 800e2e8:	2900      	cmp	r1, #0
 800e2ea:	d0ca      	beq.n	800e282 <__sflush_r+0x1a>
 800e2ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2f0:	4299      	cmp	r1, r3
 800e2f2:	d002      	beq.n	800e2fa <__sflush_r+0x92>
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	f7ff faa5 	bl	800d844 <_free_r>
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e2fe:	e7c1      	b.n	800e284 <__sflush_r+0x1c>
 800e300:	6a21      	ldr	r1, [r4, #32]
 800e302:	2301      	movs	r3, #1
 800e304:	4628      	mov	r0, r5
 800e306:	47b0      	blx	r6
 800e308:	1c41      	adds	r1, r0, #1
 800e30a:	d1c7      	bne.n	800e29c <__sflush_r+0x34>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0c4      	beq.n	800e29c <__sflush_r+0x34>
 800e312:	2b1d      	cmp	r3, #29
 800e314:	d001      	beq.n	800e31a <__sflush_r+0xb2>
 800e316:	2b16      	cmp	r3, #22
 800e318:	d101      	bne.n	800e31e <__sflush_r+0xb6>
 800e31a:	602f      	str	r7, [r5, #0]
 800e31c:	e7b1      	b.n	800e282 <__sflush_r+0x1a>
 800e31e:	89a3      	ldrh	r3, [r4, #12]
 800e320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e324:	81a3      	strh	r3, [r4, #12]
 800e326:	e7ad      	b.n	800e284 <__sflush_r+0x1c>
 800e328:	690f      	ldr	r7, [r1, #16]
 800e32a:	2f00      	cmp	r7, #0
 800e32c:	d0a9      	beq.n	800e282 <__sflush_r+0x1a>
 800e32e:	0793      	lsls	r3, r2, #30
 800e330:	680e      	ldr	r6, [r1, #0]
 800e332:	bf08      	it	eq
 800e334:	694b      	ldreq	r3, [r1, #20]
 800e336:	600f      	str	r7, [r1, #0]
 800e338:	bf18      	it	ne
 800e33a:	2300      	movne	r3, #0
 800e33c:	eba6 0807 	sub.w	r8, r6, r7
 800e340:	608b      	str	r3, [r1, #8]
 800e342:	f1b8 0f00 	cmp.w	r8, #0
 800e346:	dd9c      	ble.n	800e282 <__sflush_r+0x1a>
 800e348:	6a21      	ldr	r1, [r4, #32]
 800e34a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e34c:	4643      	mov	r3, r8
 800e34e:	463a      	mov	r2, r7
 800e350:	4628      	mov	r0, r5
 800e352:	47b0      	blx	r6
 800e354:	2800      	cmp	r0, #0
 800e356:	dc06      	bgt.n	800e366 <__sflush_r+0xfe>
 800e358:	89a3      	ldrh	r3, [r4, #12]
 800e35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e35e:	81a3      	strh	r3, [r4, #12]
 800e360:	f04f 30ff 	mov.w	r0, #4294967295
 800e364:	e78e      	b.n	800e284 <__sflush_r+0x1c>
 800e366:	4407      	add	r7, r0
 800e368:	eba8 0800 	sub.w	r8, r8, r0
 800e36c:	e7e9      	b.n	800e342 <__sflush_r+0xda>
 800e36e:	bf00      	nop
 800e370:	20400001 	.word	0x20400001

0800e374 <_fflush_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	690b      	ldr	r3, [r1, #16]
 800e378:	4605      	mov	r5, r0
 800e37a:	460c      	mov	r4, r1
 800e37c:	b913      	cbnz	r3, 800e384 <_fflush_r+0x10>
 800e37e:	2500      	movs	r5, #0
 800e380:	4628      	mov	r0, r5
 800e382:	bd38      	pop	{r3, r4, r5, pc}
 800e384:	b118      	cbz	r0, 800e38e <_fflush_r+0x1a>
 800e386:	6983      	ldr	r3, [r0, #24]
 800e388:	b90b      	cbnz	r3, 800e38e <_fflush_r+0x1a>
 800e38a:	f000 f887 	bl	800e49c <__sinit>
 800e38e:	4b14      	ldr	r3, [pc, #80]	; (800e3e0 <_fflush_r+0x6c>)
 800e390:	429c      	cmp	r4, r3
 800e392:	d11b      	bne.n	800e3cc <_fflush_r+0x58>
 800e394:	686c      	ldr	r4, [r5, #4]
 800e396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d0ef      	beq.n	800e37e <_fflush_r+0xa>
 800e39e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e3a0:	07d0      	lsls	r0, r2, #31
 800e3a2:	d404      	bmi.n	800e3ae <_fflush_r+0x3a>
 800e3a4:	0599      	lsls	r1, r3, #22
 800e3a6:	d402      	bmi.n	800e3ae <_fflush_r+0x3a>
 800e3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3aa:	f000 f915 	bl	800e5d8 <__retarget_lock_acquire_recursive>
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	f7ff ff59 	bl	800e268 <__sflush_r>
 800e3b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3b8:	07da      	lsls	r2, r3, #31
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	d4e0      	bmi.n	800e380 <_fflush_r+0xc>
 800e3be:	89a3      	ldrh	r3, [r4, #12]
 800e3c0:	059b      	lsls	r3, r3, #22
 800e3c2:	d4dd      	bmi.n	800e380 <_fflush_r+0xc>
 800e3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3c6:	f000 f908 	bl	800e5da <__retarget_lock_release_recursive>
 800e3ca:	e7d9      	b.n	800e380 <_fflush_r+0xc>
 800e3cc:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <_fflush_r+0x70>)
 800e3ce:	429c      	cmp	r4, r3
 800e3d0:	d101      	bne.n	800e3d6 <_fflush_r+0x62>
 800e3d2:	68ac      	ldr	r4, [r5, #8]
 800e3d4:	e7df      	b.n	800e396 <_fflush_r+0x22>
 800e3d6:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <_fflush_r+0x74>)
 800e3d8:	429c      	cmp	r4, r3
 800e3da:	bf08      	it	eq
 800e3dc:	68ec      	ldreq	r4, [r5, #12]
 800e3de:	e7da      	b.n	800e396 <_fflush_r+0x22>
 800e3e0:	0800ed84 	.word	0x0800ed84
 800e3e4:	0800eda4 	.word	0x0800eda4
 800e3e8:	0800ed64 	.word	0x0800ed64

0800e3ec <std>:
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	b510      	push	{r4, lr}
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e3f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3fa:	6083      	str	r3, [r0, #8]
 800e3fc:	8181      	strh	r1, [r0, #12]
 800e3fe:	6643      	str	r3, [r0, #100]	; 0x64
 800e400:	81c2      	strh	r2, [r0, #14]
 800e402:	6183      	str	r3, [r0, #24]
 800e404:	4619      	mov	r1, r3
 800e406:	2208      	movs	r2, #8
 800e408:	305c      	adds	r0, #92	; 0x5c
 800e40a:	f7fd fb59 	bl	800bac0 <memset>
 800e40e:	4b05      	ldr	r3, [pc, #20]	; (800e424 <std+0x38>)
 800e410:	6263      	str	r3, [r4, #36]	; 0x24
 800e412:	4b05      	ldr	r3, [pc, #20]	; (800e428 <std+0x3c>)
 800e414:	62a3      	str	r3, [r4, #40]	; 0x28
 800e416:	4b05      	ldr	r3, [pc, #20]	; (800e42c <std+0x40>)
 800e418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e41a:	4b05      	ldr	r3, [pc, #20]	; (800e430 <std+0x44>)
 800e41c:	6224      	str	r4, [r4, #32]
 800e41e:	6323      	str	r3, [r4, #48]	; 0x30
 800e420:	bd10      	pop	{r4, pc}
 800e422:	bf00      	nop
 800e424:	0800e741 	.word	0x0800e741
 800e428:	0800e763 	.word	0x0800e763
 800e42c:	0800e79b 	.word	0x0800e79b
 800e430:	0800e7bf 	.word	0x0800e7bf

0800e434 <_cleanup_r>:
 800e434:	4901      	ldr	r1, [pc, #4]	; (800e43c <_cleanup_r+0x8>)
 800e436:	f000 b8af 	b.w	800e598 <_fwalk_reent>
 800e43a:	bf00      	nop
 800e43c:	0800e375 	.word	0x0800e375

0800e440 <__sfmoreglue>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	2268      	movs	r2, #104	; 0x68
 800e444:	1e4d      	subs	r5, r1, #1
 800e446:	4355      	muls	r5, r2
 800e448:	460e      	mov	r6, r1
 800e44a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e44e:	f7ff fa65 	bl	800d91c <_malloc_r>
 800e452:	4604      	mov	r4, r0
 800e454:	b140      	cbz	r0, 800e468 <__sfmoreglue+0x28>
 800e456:	2100      	movs	r1, #0
 800e458:	e9c0 1600 	strd	r1, r6, [r0]
 800e45c:	300c      	adds	r0, #12
 800e45e:	60a0      	str	r0, [r4, #8]
 800e460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e464:	f7fd fb2c 	bl	800bac0 <memset>
 800e468:	4620      	mov	r0, r4
 800e46a:	bd70      	pop	{r4, r5, r6, pc}

0800e46c <__sfp_lock_acquire>:
 800e46c:	4801      	ldr	r0, [pc, #4]	; (800e474 <__sfp_lock_acquire+0x8>)
 800e46e:	f000 b8b3 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800e472:	bf00      	nop
 800e474:	2000192d 	.word	0x2000192d

0800e478 <__sfp_lock_release>:
 800e478:	4801      	ldr	r0, [pc, #4]	; (800e480 <__sfp_lock_release+0x8>)
 800e47a:	f000 b8ae 	b.w	800e5da <__retarget_lock_release_recursive>
 800e47e:	bf00      	nop
 800e480:	2000192d 	.word	0x2000192d

0800e484 <__sinit_lock_acquire>:
 800e484:	4801      	ldr	r0, [pc, #4]	; (800e48c <__sinit_lock_acquire+0x8>)
 800e486:	f000 b8a7 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800e48a:	bf00      	nop
 800e48c:	2000192e 	.word	0x2000192e

0800e490 <__sinit_lock_release>:
 800e490:	4801      	ldr	r0, [pc, #4]	; (800e498 <__sinit_lock_release+0x8>)
 800e492:	f000 b8a2 	b.w	800e5da <__retarget_lock_release_recursive>
 800e496:	bf00      	nop
 800e498:	2000192e 	.word	0x2000192e

0800e49c <__sinit>:
 800e49c:	b510      	push	{r4, lr}
 800e49e:	4604      	mov	r4, r0
 800e4a0:	f7ff fff0 	bl	800e484 <__sinit_lock_acquire>
 800e4a4:	69a3      	ldr	r3, [r4, #24]
 800e4a6:	b11b      	cbz	r3, 800e4b0 <__sinit+0x14>
 800e4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ac:	f7ff bff0 	b.w	800e490 <__sinit_lock_release>
 800e4b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4b4:	6523      	str	r3, [r4, #80]	; 0x50
 800e4b6:	4b13      	ldr	r3, [pc, #76]	; (800e504 <__sinit+0x68>)
 800e4b8:	4a13      	ldr	r2, [pc, #76]	; (800e508 <__sinit+0x6c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e4be:	42a3      	cmp	r3, r4
 800e4c0:	bf04      	itt	eq
 800e4c2:	2301      	moveq	r3, #1
 800e4c4:	61a3      	streq	r3, [r4, #24]
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f000 f820 	bl	800e50c <__sfp>
 800e4cc:	6060      	str	r0, [r4, #4]
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f000 f81c 	bl	800e50c <__sfp>
 800e4d4:	60a0      	str	r0, [r4, #8]
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f000 f818 	bl	800e50c <__sfp>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	60e0      	str	r0, [r4, #12]
 800e4e0:	2104      	movs	r1, #4
 800e4e2:	6860      	ldr	r0, [r4, #4]
 800e4e4:	f7ff ff82 	bl	800e3ec <std>
 800e4e8:	68a0      	ldr	r0, [r4, #8]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	2109      	movs	r1, #9
 800e4ee:	f7ff ff7d 	bl	800e3ec <std>
 800e4f2:	68e0      	ldr	r0, [r4, #12]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	2112      	movs	r1, #18
 800e4f8:	f7ff ff78 	bl	800e3ec <std>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	61a3      	str	r3, [r4, #24]
 800e500:	e7d2      	b.n	800e4a8 <__sinit+0xc>
 800e502:	bf00      	nop
 800e504:	0800e9e8 	.word	0x0800e9e8
 800e508:	0800e435 	.word	0x0800e435

0800e50c <__sfp>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	4607      	mov	r7, r0
 800e510:	f7ff ffac 	bl	800e46c <__sfp_lock_acquire>
 800e514:	4b1e      	ldr	r3, [pc, #120]	; (800e590 <__sfp+0x84>)
 800e516:	681e      	ldr	r6, [r3, #0]
 800e518:	69b3      	ldr	r3, [r6, #24]
 800e51a:	b913      	cbnz	r3, 800e522 <__sfp+0x16>
 800e51c:	4630      	mov	r0, r6
 800e51e:	f7ff ffbd 	bl	800e49c <__sinit>
 800e522:	3648      	adds	r6, #72	; 0x48
 800e524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e528:	3b01      	subs	r3, #1
 800e52a:	d503      	bpl.n	800e534 <__sfp+0x28>
 800e52c:	6833      	ldr	r3, [r6, #0]
 800e52e:	b30b      	cbz	r3, 800e574 <__sfp+0x68>
 800e530:	6836      	ldr	r6, [r6, #0]
 800e532:	e7f7      	b.n	800e524 <__sfp+0x18>
 800e534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e538:	b9d5      	cbnz	r5, 800e570 <__sfp+0x64>
 800e53a:	4b16      	ldr	r3, [pc, #88]	; (800e594 <__sfp+0x88>)
 800e53c:	60e3      	str	r3, [r4, #12]
 800e53e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e542:	6665      	str	r5, [r4, #100]	; 0x64
 800e544:	f000 f847 	bl	800e5d6 <__retarget_lock_init_recursive>
 800e548:	f7ff ff96 	bl	800e478 <__sfp_lock_release>
 800e54c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e554:	6025      	str	r5, [r4, #0]
 800e556:	61a5      	str	r5, [r4, #24]
 800e558:	2208      	movs	r2, #8
 800e55a:	4629      	mov	r1, r5
 800e55c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e560:	f7fd faae 	bl	800bac0 <memset>
 800e564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e56c:	4620      	mov	r0, r4
 800e56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e570:	3468      	adds	r4, #104	; 0x68
 800e572:	e7d9      	b.n	800e528 <__sfp+0x1c>
 800e574:	2104      	movs	r1, #4
 800e576:	4638      	mov	r0, r7
 800e578:	f7ff ff62 	bl	800e440 <__sfmoreglue>
 800e57c:	4604      	mov	r4, r0
 800e57e:	6030      	str	r0, [r6, #0]
 800e580:	2800      	cmp	r0, #0
 800e582:	d1d5      	bne.n	800e530 <__sfp+0x24>
 800e584:	f7ff ff78 	bl	800e478 <__sfp_lock_release>
 800e588:	230c      	movs	r3, #12
 800e58a:	603b      	str	r3, [r7, #0]
 800e58c:	e7ee      	b.n	800e56c <__sfp+0x60>
 800e58e:	bf00      	nop
 800e590:	0800e9e8 	.word	0x0800e9e8
 800e594:	ffff0001 	.word	0xffff0001

0800e598 <_fwalk_reent>:
 800e598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e59c:	4606      	mov	r6, r0
 800e59e:	4688      	mov	r8, r1
 800e5a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5a4:	2700      	movs	r7, #0
 800e5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5aa:	f1b9 0901 	subs.w	r9, r9, #1
 800e5ae:	d505      	bpl.n	800e5bc <_fwalk_reent+0x24>
 800e5b0:	6824      	ldr	r4, [r4, #0]
 800e5b2:	2c00      	cmp	r4, #0
 800e5b4:	d1f7      	bne.n	800e5a6 <_fwalk_reent+0xe>
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5bc:	89ab      	ldrh	r3, [r5, #12]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d907      	bls.n	800e5d2 <_fwalk_reent+0x3a>
 800e5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	d003      	beq.n	800e5d2 <_fwalk_reent+0x3a>
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	47c0      	blx	r8
 800e5d0:	4307      	orrs	r7, r0
 800e5d2:	3568      	adds	r5, #104	; 0x68
 800e5d4:	e7e9      	b.n	800e5aa <_fwalk_reent+0x12>

0800e5d6 <__retarget_lock_init_recursive>:
 800e5d6:	4770      	bx	lr

0800e5d8 <__retarget_lock_acquire_recursive>:
 800e5d8:	4770      	bx	lr

0800e5da <__retarget_lock_release_recursive>:
 800e5da:	4770      	bx	lr

0800e5dc <__swhatbuf_r>:
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	460e      	mov	r6, r1
 800e5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e4:	2900      	cmp	r1, #0
 800e5e6:	b096      	sub	sp, #88	; 0x58
 800e5e8:	4614      	mov	r4, r2
 800e5ea:	461d      	mov	r5, r3
 800e5ec:	da08      	bge.n	800e600 <__swhatbuf_r+0x24>
 800e5ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	602a      	str	r2, [r5, #0]
 800e5f6:	061a      	lsls	r2, r3, #24
 800e5f8:	d410      	bmi.n	800e61c <__swhatbuf_r+0x40>
 800e5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5fe:	e00e      	b.n	800e61e <__swhatbuf_r+0x42>
 800e600:	466a      	mov	r2, sp
 800e602:	f000 f903 	bl	800e80c <_fstat_r>
 800e606:	2800      	cmp	r0, #0
 800e608:	dbf1      	blt.n	800e5ee <__swhatbuf_r+0x12>
 800e60a:	9a01      	ldr	r2, [sp, #4]
 800e60c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e614:	425a      	negs	r2, r3
 800e616:	415a      	adcs	r2, r3
 800e618:	602a      	str	r2, [r5, #0]
 800e61a:	e7ee      	b.n	800e5fa <__swhatbuf_r+0x1e>
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	2000      	movs	r0, #0
 800e620:	6023      	str	r3, [r4, #0]
 800e622:	b016      	add	sp, #88	; 0x58
 800e624:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e628 <__smakebuf_r>:
 800e628:	898b      	ldrh	r3, [r1, #12]
 800e62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e62c:	079d      	lsls	r5, r3, #30
 800e62e:	4606      	mov	r6, r0
 800e630:	460c      	mov	r4, r1
 800e632:	d507      	bpl.n	800e644 <__smakebuf_r+0x1c>
 800e634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	6123      	str	r3, [r4, #16]
 800e63c:	2301      	movs	r3, #1
 800e63e:	6163      	str	r3, [r4, #20]
 800e640:	b002      	add	sp, #8
 800e642:	bd70      	pop	{r4, r5, r6, pc}
 800e644:	ab01      	add	r3, sp, #4
 800e646:	466a      	mov	r2, sp
 800e648:	f7ff ffc8 	bl	800e5dc <__swhatbuf_r>
 800e64c:	9900      	ldr	r1, [sp, #0]
 800e64e:	4605      	mov	r5, r0
 800e650:	4630      	mov	r0, r6
 800e652:	f7ff f963 	bl	800d91c <_malloc_r>
 800e656:	b948      	cbnz	r0, 800e66c <__smakebuf_r+0x44>
 800e658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e65c:	059a      	lsls	r2, r3, #22
 800e65e:	d4ef      	bmi.n	800e640 <__smakebuf_r+0x18>
 800e660:	f023 0303 	bic.w	r3, r3, #3
 800e664:	f043 0302 	orr.w	r3, r3, #2
 800e668:	81a3      	strh	r3, [r4, #12]
 800e66a:	e7e3      	b.n	800e634 <__smakebuf_r+0xc>
 800e66c:	4b0d      	ldr	r3, [pc, #52]	; (800e6a4 <__smakebuf_r+0x7c>)
 800e66e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	6020      	str	r0, [r4, #0]
 800e674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	9b00      	ldr	r3, [sp, #0]
 800e67c:	6163      	str	r3, [r4, #20]
 800e67e:	9b01      	ldr	r3, [sp, #4]
 800e680:	6120      	str	r0, [r4, #16]
 800e682:	b15b      	cbz	r3, 800e69c <__smakebuf_r+0x74>
 800e684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e688:	4630      	mov	r0, r6
 800e68a:	f000 f8d1 	bl	800e830 <_isatty_r>
 800e68e:	b128      	cbz	r0, 800e69c <__smakebuf_r+0x74>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	f023 0303 	bic.w	r3, r3, #3
 800e696:	f043 0301 	orr.w	r3, r3, #1
 800e69a:	81a3      	strh	r3, [r4, #12]
 800e69c:	89a0      	ldrh	r0, [r4, #12]
 800e69e:	4305      	orrs	r5, r0
 800e6a0:	81a5      	strh	r5, [r4, #12]
 800e6a2:	e7cd      	b.n	800e640 <__smakebuf_r+0x18>
 800e6a4:	0800e435 	.word	0x0800e435

0800e6a8 <_malloc_usable_size_r>:
 800e6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ac:	1f18      	subs	r0, r3, #4
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfbc      	itt	lt
 800e6b2:	580b      	ldrlt	r3, [r1, r0]
 800e6b4:	18c0      	addlt	r0, r0, r3
 800e6b6:	4770      	bx	lr

0800e6b8 <_raise_r>:
 800e6b8:	291f      	cmp	r1, #31
 800e6ba:	b538      	push	{r3, r4, r5, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	d904      	bls.n	800e6cc <_raise_r+0x14>
 800e6c2:	2316      	movs	r3, #22
 800e6c4:	6003      	str	r3, [r0, #0]
 800e6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6ce:	b112      	cbz	r2, 800e6d6 <_raise_r+0x1e>
 800e6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d4:	b94b      	cbnz	r3, 800e6ea <_raise_r+0x32>
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 f830 	bl	800e73c <_getpid_r>
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4601      	mov	r1, r0
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e6:	f000 b817 	b.w	800e718 <_kill_r>
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d00a      	beq.n	800e704 <_raise_r+0x4c>
 800e6ee:	1c59      	adds	r1, r3, #1
 800e6f0:	d103      	bne.n	800e6fa <_raise_r+0x42>
 800e6f2:	2316      	movs	r3, #22
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	2001      	movs	r0, #1
 800e6f8:	e7e7      	b.n	800e6ca <_raise_r+0x12>
 800e6fa:	2400      	movs	r4, #0
 800e6fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e700:	4628      	mov	r0, r5
 800e702:	4798      	blx	r3
 800e704:	2000      	movs	r0, #0
 800e706:	e7e0      	b.n	800e6ca <_raise_r+0x12>

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd3 	b.w	800e6b8 <_raise_r>
 800e712:	bf00      	nop
 800e714:	20000108 	.word	0x20000108

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f7f4 f84b 	bl	80027c0 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	20001928 	.word	0x20001928

0800e73c <_getpid_r>:
 800e73c:	f7f4 b838 	b.w	80027b0 <_getpid>

0800e740 <__sread>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	f000 f894 	bl	800e874 <_read_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	bfab      	itete	ge
 800e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e752:	89a3      	ldrhlt	r3, [r4, #12]
 800e754:	181b      	addge	r3, r3, r0
 800e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e75a:	bfac      	ite	ge
 800e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e75e:	81a3      	strhlt	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__swrite>:
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	461f      	mov	r7, r3
 800e768:	898b      	ldrh	r3, [r1, #12]
 800e76a:	05db      	lsls	r3, r3, #23
 800e76c:	4605      	mov	r5, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4616      	mov	r6, r2
 800e772:	d505      	bpl.n	800e780 <__swrite+0x1e>
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	2302      	movs	r3, #2
 800e77a:	2200      	movs	r2, #0
 800e77c:	f000 f868 	bl	800e850 <_lseek_r>
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	f000 b817 	b.w	800e7c8 <_write_r>

0800e79a <__sseek>:
 800e79a:	b510      	push	{r4, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a2:	f000 f855 	bl	800e850 <_lseek_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	bf15      	itete	ne
 800e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strheq	r3, [r4, #12]
 800e7b8:	bf18      	it	ne
 800e7ba:	81a3      	strhne	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__sclose>:
 800e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c2:	f000 b813 	b.w	800e7ec <_close_r>
	...

0800e7c8 <_write_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_write_r+0x20>)
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	602a      	str	r2, [r5, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7f4 f829 	bl	800282e <_write>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_write_r+0x1e>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_write_r+0x1e>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20001928 	.word	0x20001928

0800e7ec <_close_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_close_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f4 f835 	bl	8002866 <_close>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_close_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_close_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	20001928 	.word	0x20001928

0800e80c <_fstat_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_fstat_r+0x20>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	4611      	mov	r1, r2
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	f7f4 f830 	bl	800287e <_fstat>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d102      	bne.n	800e828 <_fstat_r+0x1c>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	b103      	cbz	r3, 800e828 <_fstat_r+0x1c>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	20001928 	.word	0x20001928

0800e830 <_isatty_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_isatty_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f4 f82f 	bl	800289e <_isatty>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_isatty_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_isatty_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	20001928 	.word	0x20001928

0800e850 <_lseek_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d07      	ldr	r5, [pc, #28]	; (800e870 <_lseek_r+0x20>)
 800e854:	4604      	mov	r4, r0
 800e856:	4608      	mov	r0, r1
 800e858:	4611      	mov	r1, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	602a      	str	r2, [r5, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	f7f4 f828 	bl	80028b4 <_lseek>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_lseek_r+0x1e>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_lseek_r+0x1e>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	20001928 	.word	0x20001928

0800e874 <_read_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4d07      	ldr	r5, [pc, #28]	; (800e894 <_read_r+0x20>)
 800e878:	4604      	mov	r4, r0
 800e87a:	4608      	mov	r0, r1
 800e87c:	4611      	mov	r1, r2
 800e87e:	2200      	movs	r2, #0
 800e880:	602a      	str	r2, [r5, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	f7f3 ffb6 	bl	80027f4 <_read>
 800e888:	1c43      	adds	r3, r0, #1
 800e88a:	d102      	bne.n	800e892 <_read_r+0x1e>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	b103      	cbz	r3, 800e892 <_read_r+0x1e>
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	20001928 	.word	0x20001928

0800e898 <_init>:
 800e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e89a:	bf00      	nop
 800e89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e89e:	bc08      	pop	{r3}
 800e8a0:	469e      	mov	lr, r3
 800e8a2:	4770      	bx	lr

0800e8a4 <_fini>:
 800e8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a6:	bf00      	nop
 800e8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8aa:	bc08      	pop	{r3}
 800e8ac:	469e      	mov	lr, r3
 800e8ae:	4770      	bx	lr
