
WinchFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800b170  0800b170  0001b170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b664  0800b664  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b66c  0800b66c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001ec  0800b860  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800b860  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cda  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002619  00000000  00000000  00033ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000376b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019add  00000000  00000000  00038790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015124  00000000  00000000  0005226d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3db  00000000  00000000  00067391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010676c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e3c  00000000  00000000  001067bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b158 	.word	0x0800b158

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800b158 	.word	0x0800b158

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <AS5600_Init>:

#include "AS5600.h"


uint8_t AS5600_Init(AS5600_Handle_t *hAS56)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/*Initialize with the necessary mode*/
	uint8_t temp = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
	 */

	/*
	 * Get the status of the Magnetic sensor by touching the mag register sensor
	 */
	const AS5600_StatusRegister_t agcReg = AS5600_REGISTER_AGC_H;
 8000fac:	231a      	movs	r3, #26
 8000fae:	737b      	strb	r3, [r7, #13]
	if(readByte(hAS56->I2Chandle, WHOAMI, agcReg) >= AS55600_SUCCESS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	7b7a      	ldrb	r2, [r7, #13]
 8000fb6:	216c      	movs	r1, #108	; 0x6c
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f85d 	bl	8001078 <readByte>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00d      	beq.n	8000fe0 <AS5600_Init+0x44>
	{
		ret = AS55600_SUCCESS;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
		hAS56->agcCount = readByte(hAS56->I2Chandle, WHOAMI, agcReg); /* useful while debugging */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	7b7a      	ldrb	r2, [r7, #13]
 8000fce:	216c      	movs	r1, #108	; 0x6c
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f851 	bl	8001078 <readByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	735a      	strb	r2, [r3, #13]
 8000fde:	e001      	b.n	8000fe4 <AS5600_Init+0x48>
	}

	else ret = AS5600_ERROR;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

	const AS5600_StatusRegister_t statusReg = AS5600_REGISTER_STATUS;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	733b      	strb	r3, [r7, #12]

	if((temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg)) >= AS55600_SUCCESS)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	216c      	movs	r1, #108	; 0x6c
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f841 	bl	8001078 <readByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AS5600_Init+0x72>
	{
		//temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg);

		ret = (temp & AS5600_MD) ? AS55600_SUCCESS : AS5600_ERROR;
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	115b      	asrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <AS5600_Init+0x76>
	}

	else ret = AS5600_ERROR;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <AS5600_GetRawAngle>:

uint8_t AS5600_GetRawAngle(AS5600_Handle_t* hAS56)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	const AS5600_OpRegister_t angleReg = AS5600_REGISTER_RAWANGLE_H;
 8001024:	230c      	movs	r3, #12
 8001026:	73fb      	strb	r3, [r7, #15]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]

	uint8_t raw[2] = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	81bb      	strh	r3, [r7, #12]

	if((hAS56->I2Chandle == NULL)) return ret;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <AS5600_GetRawAngle+0x20>
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	e019      	b.n	8001070 <AS5600_GetRawAngle+0x54>

		//readByte(hAS56->I2Chandle, Address, subAddress);
	if(readMem(hAS56->I2Chandle, WHOAMI, angleReg, raw) != AS55600_SUCCESS) return ret;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	216c      	movs	r1, #108	; 0x6c
 8001048:	f000 f840 	bl	80010cc <readMem>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d001      	beq.n	8001056 <AS5600_GetRawAngle+0x3a>
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	e00c      	b.n	8001070 <AS5600_GetRawAngle+0x54>

	else ret = AS55600_SUCCESS;
 8001056:	2301      	movs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]

	hAS56->rawAngle = ((uint16_t)((uint16_t)raw[0] << 8 | raw[1]));
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	80da      	strh	r2, [r3, #6]

	return ret;
 800106e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <readByte>:
		 return 0;

}

uint8_t readByte(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	4613      	mov	r3, r2
 8001086:	70bb      	strb	r3, [r7, #2]
	uint8_t rxData[1] = {0};
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
	uint8_t txData[] = {subAddress};
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(I2Chandle, Address, txData, 1, AS5600_I2C_TIMEOUT);
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	b299      	uxth	r1, r3
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f002 ff80 	bl	8003fa4 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(I2Chandle, Address, rxData, 1, AS5600_I2C_TIMEOUT) != HAL_ERROR) return rxData[0];
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f003 f874 	bl	80041a0 <HAL_I2C_Master_Receive>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <readByte+0x4a>
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	e000      	b.n	80010c4 <readByte+0x4c>

	else return 0;
 80010c2:	2300      	movs	r3, #0

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <readMem>:
/*
 * Reads bytes of data
 */

uint8_t readMem(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress, uint8_t* raw)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]

	uint8_t rawData[2];

	if(HAL_I2C_Mem_Read(I2Chandle, Address, subAddress, I2C_MEMADD_SIZE_8BIT, rawData, 2, AS5600_I2C_TIMEOUT) != HAL_ERROR)
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b299      	uxth	r1, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2302      	movs	r3, #2
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f003 fa78 	bl	80045ec <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d008      	beq.n	8001114 <readMem+0x48>
	{
		raw[0] = rawData[0];
 8001102:	7d3a      	ldrb	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]
		raw[1] = rawData[1];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	7d7a      	ldrb	r2, [r7, #21]
 800110e:	701a      	strb	r2, [r3, #0]

		return 1;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <readMem+0x4a>
	}

	else return 0;
 8001114:	2300      	movs	r3, #0

}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <MX_Universal_Init>:
static void MX_BomBay_Door_Close(void);
static void MX_Jump(void);

/* Private user code ---------------------------------------------------------*/
void MX_Universal_Init()
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 fe37 	bl	8002d94 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 fd73 	bl	8001c10 <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_USB_DEVICE_Init();
  MX_DMA_Init();
 800112a:	f000 ffb3 	bl	8002094 <MX_DMA_Init>
  MX_ADC1_Init();
 800112e:	f000 fdd9 	bl	8001ce4 <MX_ADC1_Init>
  MX_GPIO_Init();
 8001132:	f000 ffcf 	bl	80020d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001136:	f000 fea1 	bl	8001e7c <MX_TIM2_Init>
  MX_TIM3_Init();
 800113a:	f000 fef3 	bl	8001f24 <MX_TIM3_Init>
  MX_TIM4_Init();
 800113e:	f000 ff55 	bl	8001fec <MX_TIM4_Init>
  MX_UART1_Init();
 8001142:	f000 fe4f 	bl	8001de4 <MX_UART1_Init>
  MX_UART2_Init();
 8001146:	f000 fe73 	bl	8001e30 <MX_UART2_Init>
  MX_I2C1_Init();
 800114a:	f000 fe1d 	bl	8001d88 <MX_I2C1_Init>


}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <MX_Peripheral_Start_Init>:

void MX_Peripheral_Start_Init()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	 *  1. Encoder IT Start
	 *  2. PWM CH1, CH2 Start
	 *  3. TIM Input Cpature Mode Start
	 *  4. ADC DMA Start
	 */
	if(HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_Handler();
 800115a:	213c      	movs	r1, #60	; 0x3c
 800115c:	4846      	ldr	r0, [pc, #280]	; (8001278 <MX_Peripheral_Start_Init+0x124>)
 800115e:	f005 f84d 	bl	80061fc <HAL_TIM_Encoder_Start_IT>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_Peripheral_Start_Init+0x18>
 8001168:	f001 f845 	bl	80021f6 <Error_Handler>

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800116c:	2100      	movs	r1, #0
 800116e:	4843      	ldr	r0, [pc, #268]	; (800127c <MX_Peripheral_Start_Init+0x128>)
 8001170:	f004 fd20 	bl	8005bb4 <HAL_TIM_PWM_Start>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_Peripheral_Start_Init+0x2a>
 800117a:	f001 f83c 	bl	80021f6 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800117e:	2104      	movs	r1, #4
 8001180:	483e      	ldr	r0, [pc, #248]	; (800127c <MX_Peripheral_Start_Init+0x128>)
 8001182:	f004 fd17 	bl	8005bb4 <HAL_TIM_PWM_Start>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_Peripheral_Start_Init+0x3c>
 800118c:	f001 f833 	bl	80021f6 <Error_Handler>

	if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK) Error_Handler();
 8001190:	2100      	movs	r1, #0
 8001192:	483b      	ldr	r0, [pc, #236]	; (8001280 <MX_Peripheral_Start_Init+0x12c>)
 8001194:	f004 fe72 	bl	8005e7c <HAL_TIM_IC_Start_IT>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_Peripheral_Start_Init+0x4e>
 800119e:	f001 f82a 	bl	80021f6 <Error_Handler>

	//if(HAL_ADC_Start_DMA(&hadc1, &Buf, 1) != HAL_OK) Error_Handler();

	memset(buf, 0, sizeof(buf));
 80011a2:	2240      	movs	r2, #64	; 0x40
 80011a4:	2100      	movs	r1, #0
 80011a6:	4837      	ldr	r0, [pc, #220]	; (8001284 <MX_Peripheral_Start_Init+0x130>)
 80011a8:	f007 f85e 	bl	8008268 <memset>

	//Transmit to the terminal at start to confirm the initiation.
	char* user_data = "REDWING LABS\r\n";
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <MX_Peripheral_Start_Init+0x134>)
 80011ae:	607b      	str	r3, [r7, #4]
	uint16_t data_len = strlen(user_data);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f815 	bl	80001e0 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4832      	ldr	r0, [pc, #200]	; (800128c <MX_Peripheral_Start_Init+0x138>)
 80011c4:	f005 ffb9 	bl	800713a <HAL_UART_Transmit>

	/*
	 * 1.GPIO PIN Inits
	 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	4830      	ldr	r0, [pc, #192]	; (8001290 <MX_Peripheral_Start_Init+0x13c>)
 80011ce:	f002 fd67 	bl	8003ca0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	482e      	ldr	r0, [pc, #184]	; (8001294 <MX_Peripheral_Start_Init+0x140>)
 80011da:	f002 fd61 	bl	8003ca0 <HAL_GPIO_WritePin>
	 * Get the raw angle.
	 * Store the Init raw angle to a global var.
	 * Then count the revolutions on the basis of that raw angle.
	 * i.e. if the raw angle is 20 deg, then every time the angle goes above 20 is one revolution.
	 */
	as5600.I2Chandle = &hi2c1;
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <MX_Peripheral_Start_Init+0x144>)
 80011e0:	4a2e      	ldr	r2, [pc, #184]	; (800129c <MX_Peripheral_Start_Init+0x148>)
 80011e2:	601a      	str	r2, [r3, #0]
	while(!AS5600_Init(&as5600))
 80011e4:	e00e      	b.n	8001204 <MX_Peripheral_Start_Init+0xb0>
	{
		sprintf((char*)buf, "Can't detect the Magnet\r\n");
 80011e6:	492e      	ldr	r1, [pc, #184]	; (80012a0 <MX_Peripheral_Start_Init+0x14c>)
 80011e8:	4826      	ldr	r0, [pc, #152]	; (8001284 <MX_Peripheral_Start_Init+0x130>)
 80011ea:	f007 fcaf 	bl	8008b4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	4923      	ldr	r1, [pc, #140]	; (8001284 <MX_Peripheral_Start_Init+0x130>)
 80011f6:	4825      	ldr	r0, [pc, #148]	; (800128c <MX_Peripheral_Start_Init+0x138>)
 80011f8:	f005 ff9f 	bl	800713a <HAL_UART_Transmit>
		HAL_Delay(500);
 80011fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001200:	f001 fe3a 	bl	8002e78 <HAL_Delay>
	while(!AS5600_Init(&as5600))
 8001204:	4824      	ldr	r0, [pc, #144]	; (8001298 <MX_Peripheral_Start_Init+0x144>)
 8001206:	f7ff fec9 	bl	8000f9c <AS5600_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ea      	beq.n	80011e6 <MX_Peripheral_Start_Init+0x92>
	}

	HAL_Delay(500); /*Time to set*/
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f001 fe30 	bl	8002e78 <HAL_Delay>

	AS5600_GetRawAngle(&as5600);
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <MX_Peripheral_Start_Init+0x144>)
 800121a:	f7ff feff 	bl	800101c <AS5600_GetRawAngle>
	CurrRead = as5600.rawAngle;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_Peripheral_Start_Init+0x144>)
 8001220:	88da      	ldrh	r2, [r3, #6]
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_Peripheral_Start_Init+0x150>)
 8001224:	801a      	strh	r2, [r3, #0]

	LastRead = CurrRead;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_Peripheral_Start_Init+0x150>)
 8001228:	881a      	ldrh	r2, [r3, #0]
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_Peripheral_Start_Init+0x154>)
 800122c:	801a      	strh	r2, [r3, #0]

	sprintf((char*)buf, "Initial Angle : %d\r\n", rawAngle);
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_Peripheral_Start_Init+0x158>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	491e      	ldr	r1, [pc, #120]	; (80012b0 <MX_Peripheral_Start_Init+0x15c>)
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <MX_Peripheral_Start_Init+0x130>)
 8001238:	f007 fc88 	bl	8008b4c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 800123c:	f04f 33ff 	mov.w	r3, #4294967295
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	4910      	ldr	r1, [pc, #64]	; (8001284 <MX_Peripheral_Start_Init+0x130>)
 8001244:	4811      	ldr	r0, [pc, #68]	; (800128c <MX_Peripheral_Start_Init+0x138>)
 8001246:	f005 ff78 	bl	800713a <HAL_UART_Transmit>

	memset(buf, 0, sizeof(buf));
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	2100      	movs	r1, #0
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_Peripheral_Start_Init+0x130>)
 8001250:	f007 f80a 	bl	8008268 <memset>

	/*Transmit to the terminal at start to confirm the initiation.*/
	user_data = "Initialization successful\r\n";
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_Peripheral_Start_Init+0x160>)
 8001256:	607b      	str	r3, [r7, #4]
	data_len = strlen(user_data);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7fe ffc1 	bl	80001e0 <strlen>
 800125e:	4603      	mov	r3, r0
 8001260:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <MX_Peripheral_Start_Init+0x138>)
 800126c:	f005 ff65 	bl	800713a <HAL_UART_Transmit>


}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200002b0 	.word	0x200002b0
 800127c:	200002f8 	.word	0x200002f8
 8001280:	20000340 	.word	0x20000340
 8001284:	2000048c 	.word	0x2000048c
 8001288:	0800b170 	.word	0x0800b170
 800128c:	20000388 	.word	0x20000388
 8001290:	40020800 	.word	0x40020800
 8001294:	40020000 	.word	0x40020000
 8001298:	20000464 	.word	0x20000464
 800129c:	20000410 	.word	0x20000410
 80012a0:	0800b180 	.word	0x0800b180
 80012a4:	200004e6 	.word	0x200004e6
 80012a8:	200004e4 	.word	0x200004e4
 80012ac:	200004e8 	.word	0x200004e8
 80012b0:	0800b19c 	.word	0x0800b19c
 80012b4:	0800b1b4 	.word	0x0800b1b4

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
	MX_Universal_Init();
 80012bc:	f7ff ff2f 	bl	800111e <MX_Universal_Init>

  /* MCU Peripherals Start Commands-------------------------------------------*/
	MX_Peripheral_Start_Init();
 80012c0:	f7ff ff48 	bl	8001154 <MX_Peripheral_Start_Init>
	/*
	 * Winch Start Sequence
	 * 1. One reception of a signal of particular width start the winch sequence
	 * or else keep looping until forever.
	 */
	MX_WINCH_START_SEQ();
 80012c4:	f000 f80c 	bl	80012e0 <MX_WINCH_START_SEQ>

	//MX_BomBay_Door_Open();

	//HAL_Delay(1000); //Delay for the door to settle and prep for winch down.

	MX_WINCH_DOWN_GP_RAMP_UP();
 80012c8:	f000 f822 	bl	8001310 <MX_WINCH_DOWN_GP_RAMP_UP>
	MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN();
 80012cc:	f000 f8a4 	bl	8001418 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN>
	 *
	 * note TODO: current sensor for detecting if payload is landed.
	 *
	 */
	//This is the wait period for the winch up sequence.
	HAL_Delay(5000);
 80012d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80012d4:	f001 fdd0 	bl	8002e78 <HAL_Delay>

	MX_WINCH_UP_MOTO_RAMP_UP_DOWN();
 80012d8:	f000 f9aa 	bl	8001630 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>
	//Until the flag for door open is not set do nothing
	//If it breaks the loop, it means hook has reached the bay roof
	//Start the Door Close sequence
	//MX_BomBay_Door_Close();

	while(1);
 80012dc:	e7fe      	b.n	80012dc <main+0x24>
	...

080012e0 <MX_WINCH_START_SEQ>:

///////////////////////////////////////////////////////////////////////////////////////////APPLICATION_LEVEL_ROUTINES//////////////////////////////////////////////////////////////


static void MX_WINCH_START_SEQ()
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	/*
	 * This part loops until a signal of particular pulse width is captured.
	 */
	//UNUSED();
	while(!(START_THE_SEQUENCE)){};
 80012e4:	bf00      	nop
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_WINCH_START_SEQ+0x24>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f8      	bne.n	80012e6 <MX_WINCH_START_SEQ+0x6>

	Start_Flag = false;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <MX_WINCH_START_SEQ+0x28>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]

}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	200004fd 	.word	0x200004fd
 8001308:	200004f4 	.word	0x200004f4
 800130c:	00000000 	.word	0x00000000

08001310 <MX_WINCH_DOWN_GP_RAMP_UP>:
	}
}


void MX_WINCH_DOWN_GP_RAMP_UP(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af02      	add	r7, sp, #8


	while(gp_i >= 16)
 8001316:	e060      	b.n	80013da <MX_WINCH_DOWN_GP_RAMP_UP+0xca>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(PWM_FIXED)/100);
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <MX_WINCH_DOWN_GP_RAMP_UP+0xe8>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f8f9 	bl	8000514 <__aeabi_ui2d>
 8001322:	a333      	add	r3, pc, #204	; (adr r3, 80013f0 <MX_WINCH_DOWN_GP_RAMP_UP+0xe0>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_WINCH_DOWN_GP_RAMP_UP+0xec>)
 800133a:	f7ff fa8f 	bl	800085c <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	492d      	ldr	r1, [pc, #180]	; (80013f8 <MX_WINCH_DOWN_GP_RAMP_UP+0xe8>)
 8001344:	680c      	ldr	r4, [r1, #0]
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fc35 	bl	8000bb8 <__aeabi_d2uiz>
 800134e:	4603      	mov	r3, r0
 8001350:	6363      	str	r3, [r4, #52]	; 0x34

		HAL_Delay(PWM_ON_DELAY(PWM_FIXED));
 8001352:	2001      	movs	r0, #1
 8001354:	f001 fd90 	bl	8002e78 <HAL_Delay>

		sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_WINCH_DOWN_GP_RAMP_UP+0xf0>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	461c      	mov	r4, r3
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_WINCH_DOWN_GP_RAMP_UP+0xf4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8f8 	bl	8000558 <__aeabi_f2d>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
 8001370:	4622      	mov	r2, r4
 8001372:	4925      	ldr	r1, [pc, #148]	; (8001408 <MX_WINCH_DOWN_GP_RAMP_UP+0xf8>)
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_WINCH_DOWN_GP_RAMP_UP+0xfc>)
 8001376:	f007 fbe9 	bl	8008b4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	4922      	ldr	r1, [pc, #136]	; (800140c <MX_WINCH_DOWN_GP_RAMP_UP+0xfc>)
 8001382:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_WINCH_DOWN_GP_RAMP_UP+0x100>)
 8001384:	f005 fed9 	bl	800713a <HAL_UART_Transmit>
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_WINCH_DOWN_GP_RAMP_UP+0xe8>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8c1 	bl	8000514 <__aeabi_ui2d>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	f7ff f935 	bl	8000608 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_WINCH_DOWN_GP_RAMP_UP+0xec>)
 80013ac:	f7ff fa56 	bl	800085c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4910      	ldr	r1, [pc, #64]	; (80013f8 <MX_WINCH_DOWN_GP_RAMP_UP+0xe8>)
 80013b6:	680c      	ldr	r4, [r1, #0]
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fbfc 	bl	8000bb8 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	6363      	str	r3, [r4, #52]	; 0x34

		gp_i /= GP_DIV;
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_WINCH_DOWN_GP_RAMP_UP+0x104>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	085b      	lsrs	r3, r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_WINCH_DOWN_GP_RAMP_UP+0x104>)
 80013ce:	801a      	strh	r2, [r3, #0]
		HAL_Delay(gp_i);
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_WINCH_DOWN_GP_RAMP_UP+0x104>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 fd4f 	bl	8002e78 <HAL_Delay>
	while(gp_i >= 16)
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_WINCH_DOWN_GP_RAMP_UP+0x104>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	d89a      	bhi.n	8001318 <MX_WINCH_DOWN_GP_RAMP_UP+0x8>

	}

}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3704      	adds	r7, #4
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	f3af 8000 	nop.w
 80013f0:	877be861 	.word	0x877be861
 80013f4:	40478787 	.word	0x40478787
 80013f8:	200002f8 	.word	0x200002f8
 80013fc:	40590000 	.word	0x40590000
 8001400:	20000502 	.word	0x20000502
 8001404:	200004f0 	.word	0x200004f0
 8001408:	0800b1d0 	.word	0x0800b1d0
 800140c:	2000048c 	.word	0x2000048c
 8001410:	20000388 	.word	0x20000388
 8001414:	20000000 	.word	0x20000000

08001418 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN>:

void MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN(void)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af02      	add	r7, sp, #8
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 800141e:	4b78      	ldr	r3, [pc, #480]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 8001420:	2279      	movs	r2, #121	; 0x79
 8001422:	801a      	strh	r2, [r3, #0]
 8001424:	e04a      	b.n	80014bc <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xa4>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1ec>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f872 	bl	8000514 <__aeabi_ui2d>
 8001430:	4604      	mov	r4, r0
 8001432:	460d      	mov	r5, r1
 8001434:	4b72      	ldr	r3, [pc, #456]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f87b 	bl	8000534 <__aeabi_i2d>
 800143e:	a36a      	add	r3, pc, #424	; (adr r3, 80015e8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1d0>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff f8e0 	bl	8000608 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b69      	ldr	r3, [pc, #420]	; (8001608 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f0>)
 8001462:	f7ff f9fb 	bl	800085c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4966      	ldr	r1, [pc, #408]	; (8001604 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1ec>)
 800146c:	680c      	ldr	r4, [r1, #0]
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fba1 	bl	8000bb8 <__aeabi_d2uiz>
 8001476:	4603      	mov	r3, r0
 8001478:	6363      	str	r3, [r4, #52]	; 0x34
		sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
 800147a:	4b61      	ldr	r3, [pc, #388]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	461c      	mov	r4, r3
 8001480:	4b62      	ldr	r3, [pc, #392]	; (800160c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f867 	bl	8000558 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9cd 2300 	strd	r2, r3, [sp]
 8001492:	4622      	mov	r2, r4
 8001494:	495e      	ldr	r1, [pc, #376]	; (8001610 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f8>)
 8001496:	485f      	ldr	r0, [pc, #380]	; (8001614 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1fc>)
 8001498:	f007 fb58 	bl	8008b4c <siprintf>

		HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	2240      	movs	r2, #64	; 0x40
 80014a2:	495c      	ldr	r1, [pc, #368]	; (8001614 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1fc>)
 80014a4:	485c      	ldr	r0, [pc, #368]	; (8001618 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x200>)
 80014a6:	f005 fe48 	bl	800713a <HAL_UART_Transmit>
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 80014aa:	2014      	movs	r0, #20
 80014ac:	f001 fce4 	bl	8002e78 <HAL_Delay>
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 80014b0:	4b53      	ldr	r3, [pc, #332]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	4b50      	ldr	r3, [pc, #320]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2bb3      	cmp	r3, #179	; 0xb3
 80014c2:	d9b0      	bls.n	8001426 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xe>
	}



	for(i = INTERMITENT_DC; i> 0; i -- )
 80014c4:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 80014c6:	22b4      	movs	r2, #180	; 0xb4
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	e05e      	b.n	800158a <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x172>
		{

			if(!spring_trig)
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x204>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d05c      	beq.n	8001594 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x17c>
			{

				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1ec>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f818 	bl	8000514 <__aeabi_ui2d>
 80014e4:	4604      	mov	r4, r0
 80014e6:	460d      	mov	r5, r1
 80014e8:	4b45      	ldr	r3, [pc, #276]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f821 	bl	8000534 <__aeabi_i2d>
 80014f2:	a33d      	add	r3, pc, #244	; (adr r3, 80015e8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1d0>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f886 	bl	8000608 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7ff f880 	bl	8000608 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f0>)
 8001516:	f7ff f9a1 	bl	800085c <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4939      	ldr	r1, [pc, #228]	; (8001604 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1ec>)
 8001520:	680c      	ldr	r4, [r1, #0]
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb47 	bl	8000bb8 <__aeabi_d2uiz>
 800152a:	4603      	mov	r3, r0
 800152c:	6363      	str	r3, [r4, #52]	; 0x34
				//current = ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10;

				//sprintf((char*)buf, "PWM: %d, %d, %f\r\n", i, rev, current);
				//sprintf((char*)buf, "PWM: %f, RPM: %f\r\n", i*0.019605, rev);
				sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	461c      	mov	r4, r3
 8001534:	4b35      	ldr	r3, [pc, #212]	; (800160c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9cd 2300 	strd	r2, r3, [sp]
 8001546:	4622      	mov	r2, r4
 8001548:	4931      	ldr	r1, [pc, #196]	; (8001610 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f8>)
 800154a:	4832      	ldr	r0, [pc, #200]	; (8001614 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1fc>)
 800154c:	f007 fafe 	bl	8008b4c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2240      	movs	r2, #64	; 0x40
 8001556:	492f      	ldr	r1, [pc, #188]	; (8001614 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1fc>)
 8001558:	482f      	ldr	r0, [pc, #188]	; (8001618 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x200>)
 800155a:	f005 fdee 	bl	800713a <HAL_UART_Transmit>

				HAL_Delay(PWM_RAMP_DOWN_DURATION);    //This finishes the ramp up in
 800155e:	2055      	movs	r0, #85	; 0x55
 8001560:	f001 fc8a 	bl	8002e78 <HAL_Delay>

				//Spring Thing
				//poop_back = true;

				//Its only after this point the Spring thing and the Current thing needs to be activated
					if( Length > POOP_BACK_AT_H )
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f4>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800156e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	dd02      	ble.n	800157e <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x166>
					{
						//Spring Thing
						poop_back = true;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x208>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
	for(i = INTERMITENT_DC; i> 0; i -- )
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e8>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d19c      	bne.n	80014cc <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0xb4>
 8001592:	e000      	b.n	8001596 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x17e>

			}

			else
			{
				break;
 8001594:	bf00      	nop

		}



 	Counts = rev;
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x20c>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x210>)
 800159e:	601a      	str	r2, [r3, #0]

 	Length = (2 * __PI * 3.14 * Counts) * 0.1428;
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x210>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffb5 	bl	8000514 <__aeabi_ui2d>
 80015aa:	a311      	add	r3, pc, #68	; (adr r3, 80015f0 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1d8>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f82a 	bl	8000608 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a30e      	add	r3, pc, #56	; (adr r3, 80015f8 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1e0>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f821 	bl	8000608 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fb13 	bl	8000bf8 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1f4>)
 80015d6:	6013      	str	r3, [r2, #0]

 	//sprintf((char*)buf, "PWM | Current | Length: %d, %d, %f, %f\r\n", i, rev, ((float) Buf * (VREF_3v3 / ADC_SCALE_12) - 2.5) * 10, Length);
 	//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 	//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

 	memset(buf, 0, sizeof(buf));
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	2100      	movs	r1, #0
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_WINCH_DOWN_MOTO_RAMP_UP_DOWN+0x1fc>)
 80015de:	f006 fe43 	bl	8008268 <memset>

}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bdb0      	pop	{r4, r5, r7, pc}
 80015e8:	190cb39b 	.word	0x190cb39b
 80015ec:	3fd91919 	.word	0x3fd91919
 80015f0:	f8cf92ae 	.word	0xf8cf92ae
 80015f4:	4033baac 	.word	0x4033baac
 80015f8:	38ef34d7 	.word	0x38ef34d7
 80015fc:	3fc24745 	.word	0x3fc24745
 8001600:	20000502 	.word	0x20000502
 8001604:	200002f8 	.word	0x200002f8
 8001608:	40590000 	.word	0x40590000
 800160c:	200004f0 	.word	0x200004f0
 8001610:	0800b1d0 	.word	0x0800b1d0
 8001614:	2000048c 	.word	0x2000048c
 8001618:	20000388 	.word	0x20000388
 800161c:	200004ff 	.word	0x200004ff
 8001620:	200004fe 	.word	0x200004fe
 8001624:	200004ea 	.word	0x200004ea
 8001628:	200004ec 	.word	0x200004ec
 800162c:	00000000 	.word	0x00000000

08001630 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>:

void MX_WINCH_UP_MOTO_RAMP_UP_DOWN(void)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af02      	add	r7, sp, #8

	//First things first change the direction
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2120      	movs	r1, #32
 800163a:	48b7      	ldr	r0, [pc, #732]	; (8001918 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2e8>)
 800163c:	f002 fb30 	bl	8003ca0 <HAL_GPIO_WritePin>


	uint32_t loop_5 = Counts * 0.1;  //Set the threshold
 8001640:	4bb6      	ldr	r3, [pc, #728]	; (800191c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2ec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff65 	bl	8000514 <__aeabi_ui2d>
 800164a:	a3a9      	add	r3, pc, #676	; (adr r3, 80018f0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2c0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ffda 	bl	8000608 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff faac 	bl	8000bb8 <__aeabi_d2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	607b      	str	r3, [r7, #4]

	//Ramp Up Sequence

	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 8001664:	4bae      	ldr	r3, [pc, #696]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001666:	221e      	movs	r2, #30
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	e0b1      	b.n	80017d0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1a0>
	{
		if(rev > loop_5)
 800166c:	4bad      	ldr	r3, [pc, #692]	; (8001924 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f4>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4293      	cmp	r3, r2
 8001676:	d245      	bcs.n	8001704 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0xd4>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 8001678:	4bab      	ldr	r3, [pc, #684]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff49 	bl	8000514 <__aeabi_ui2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff52 	bl	8000534 <__aeabi_i2d>
 8001690:	a399      	add	r3, pc, #612	; (adr r3, 80018f8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2c8>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ffb7 	bl	8000608 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7fe ffb1 	bl	8000608 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b9e      	ldr	r3, [pc, #632]	; (800192c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80016b4:	f7ff f8d2 	bl	800085c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	499a      	ldr	r1, [pc, #616]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80016be:	680c      	ldr	r4, [r1, #0]
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa78 	bl	8000bb8 <__aeabi_d2uiz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	6363      	str	r3, [r4, #52]	; 0x34
			sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	461c      	mov	r4, r3
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x300>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff3e 	bl	8000558 <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	e9cd 2300 	strd	r2, r3, [sp]
 80016e4:	4622      	mov	r2, r4
 80016e6:	4993      	ldr	r1, [pc, #588]	; (8001934 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x304>)
 80016e8:	4893      	ldr	r0, [pc, #588]	; (8001938 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 80016ea:	f007 fa2f 	bl	8008b4c <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	2240      	movs	r2, #64	; 0x40
 80016f4:	4990      	ldr	r1, [pc, #576]	; (8001938 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 80016f6:	4891      	ldr	r0, [pc, #580]	; (800193c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x30c>)
 80016f8:	f005 fd1f 	bl	800713a <HAL_UART_Transmit>
			//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

			HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 80016fc:	2014      	movs	r0, #20
 80016fe:	f001 fbbb 	bl	8002e78 <HAL_Delay>
 8001702:	e05f      	b.n	80017c4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x194>

		//This is unlikely to ever happen but for safety.
		else
		{
			//Write a very short but effective ramp_down so that there is not jerk at zero.
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(40)/100);
 8001704:	4b88      	ldr	r3, [pc, #544]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff03 	bl	8000514 <__aeabi_ui2d>
 800170e:	a37c      	add	r3, pc, #496	; (adr r3, 8001900 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2d0>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff78 	bl	8000608 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 8001726:	f7ff f899 	bl	800085c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	497e      	ldr	r1, [pc, #504]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001730:	680c      	ldr	r4, [r1, #0]
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa3f 	bl	8000bb8 <__aeabi_d2uiz>
 800173a:	4603      	mov	r3, r0
 800173c:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 800173e:	2014      	movs	r0, #20
 8001740:	f001 fb9a 	bl	8002e78 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(20)/100);
 8001744:	4b78      	ldr	r3, [pc, #480]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fee3 	bl	8000514 <__aeabi_ui2d>
 800174e:	a36e      	add	r3, pc, #440	; (adr r3, 8001908 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2d8>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff58 	bl	8000608 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b71      	ldr	r3, [pc, #452]	; (800192c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 8001766:	f7ff f879 	bl	800085c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	496e      	ldr	r1, [pc, #440]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001770:	680c      	ldr	r4, [r1, #0]
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa1f 	bl	8000bb8 <__aeabi_d2uiz>
 800177a:	4603      	mov	r3, r0
 800177c:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 800177e:	2014      	movs	r0, #20
 8001780:	f001 fb7a 	bl	8002e78 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001784:	4b68      	ldr	r3, [pc, #416]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fec3 	bl	8000514 <__aeabi_ui2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	f7fe ff37 	bl	8000608 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b61      	ldr	r3, [pc, #388]	; (800192c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80017a8:	f7ff f858 	bl	800085c <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	495d      	ldr	r1, [pc, #372]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80017b2:	680c      	ldr	r4, [r1, #0]
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f9fe 	bl	8000bb8 <__aeabi_d2uiz>
 80017bc:	4603      	mov	r3, r0
 80017be:	6363      	str	r3, [r4, #52]	; 0x34

			//And just stop, something's fishy!
			MX_Jump();
 80017c0:	f000 fd14 	bl	80021ec <MX_Jump>
	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b54      	ldr	r3, [pc, #336]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017ce:	801a      	strh	r2, [r3, #0]
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	2bb3      	cmp	r3, #179	; 0xb3
 80017d6:	f67f af49 	bls.w	800166c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x3c>
	}


	//Ramp Down Sequence

	for(i = INTERMITENT_DC; i> 0; i -- )
 80017da:	4b51      	ldr	r3, [pc, #324]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017dc:	22b4      	movs	r2, #180	; 0xb4
 80017de:	801a      	strh	r2, [r3, #0]
 80017e0:	e050      	b.n	8001884 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x254>
		{
			if(rev > loop_5)
 80017e2:	4b50      	ldr	r3, [pc, #320]	; (8001924 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f4>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d24f      	bcs.n	800188e <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x25e>
			{
				//There is enough room to spool at the current rate do nothing different.
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe8e 	bl	8000514 <__aeabi_ui2d>
 80017f8:	4604      	mov	r4, r0
 80017fa:	460d      	mov	r5, r1
 80017fc:	4b48      	ldr	r3, [pc, #288]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe97 	bl	8000534 <__aeabi_i2d>
 8001806:	a33c      	add	r3, pc, #240	; (adr r3, 80018f8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2c8>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fefc 	bl	8000608 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe fef6 	bl	8000608 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 800182a:	f7ff f817 	bl	800085c <__aeabi_ddiv>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	493d      	ldr	r1, [pc, #244]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001834:	680c      	ldr	r4, [r1, #0]
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9bd 	bl	8000bb8 <__aeabi_d2uiz>
 800183e:	4603      	mov	r3, r0
 8001840:	6363      	str	r3, [r4, #52]	; 0x34
				sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length); //i*0.019605
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	461c      	mov	r4, r3
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x300>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe83 	bl	8000558 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	e9cd 2300 	strd	r2, r3, [sp]
 800185a:	4622      	mov	r2, r4
 800185c:	4935      	ldr	r1, [pc, #212]	; (8001934 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x304>)
 800185e:	4836      	ldr	r0, [pc, #216]	; (8001938 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 8001860:	f007 f974 	bl	8008b4c <siprintf>

				HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	2240      	movs	r2, #64	; 0x40
 800186a:	4933      	ldr	r1, [pc, #204]	; (8001938 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 800186c:	4833      	ldr	r0, [pc, #204]	; (800193c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x30c>)
 800186e:	f005 fc64 	bl	800713a <HAL_UART_Transmit>
				//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

				HAL_Delay(PWM_RAMP_DOWN_DURATION);    //This finishes the ramp up in
 8001872:	2055      	movs	r0, #85	; 0x55
 8001874:	f001 fb00 	bl	8002e78 <HAL_Delay>
	for(i = INTERMITENT_DC; i> 0; i -- )
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f0>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1aa      	bne.n	80017e2 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1b2>
 800188c:	e000      	b.n	8001890 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x260>
			}

			else break;
 800188e:	bf00      	nop
		}


	//Its only after this point we need to activate the door close interrupt flag
	close_door = true;
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x310>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]


	//After breaking
	//There is room to spool but not so much. Run at constant speed untill button gets triggered
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(PWM_CONSTANT)/100);
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe3a 	bl	8000514 <__aeabi_ui2d>
 80018a0:	a31b      	add	r3, pc, #108	; (adr r3, 8001910 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2e0>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe feaf 	bl	8000608 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2fc>)
 80018b8:	f7fe ffd0 	bl	800085c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4919      	ldr	r1, [pc, #100]	; (8001928 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2f8>)
 80018c2:	680c      	ldr	r4, [r1, #0]
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f976 	bl	8000bb8 <__aeabi_d2uiz>
 80018cc:	4603      	mov	r3, r0
 80018ce:	6363      	str	r3, [r4, #52]	; 0x34
	sprintf((char*)buf, "About to reach the payload bay @ PWM: %d\r\n", PWM_CONSTANT);
 80018d0:	223c      	movs	r2, #60	; 0x3c
 80018d2:	491c      	ldr	r1, [pc, #112]	; (8001944 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x314>)
 80018d4:	4818      	ldr	r0, [pc, #96]	; (8001938 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 80018d6:	f007 f939 	bl	8008b4c <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	4915      	ldr	r1, [pc, #84]	; (8001938 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x308>)
 80018e2:	4816      	ldr	r0, [pc, #88]	; (800193c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x30c>)
 80018e4:	f005 fc29 	bl	800713a <HAL_UART_Transmit>
	//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdb0      	pop	{r4, r5, r7, pc}
 80018f0:	9999999a 	.word	0x9999999a
 80018f4:	3fb99999 	.word	0x3fb99999
 80018f8:	190cb39b 	.word	0x190cb39b
 80018fc:	3fd91919 	.word	0x3fd91919
 8001900:	5f4fe082 	.word	0x5f4fe082
 8001904:	402f5f5f 	.word	0x402f5f5f
 8001908:	5f4fe082 	.word	0x5f4fe082
 800190c:	401f5f5f 	.word	0x401f5f5f
 8001910:	877be861 	.word	0x877be861
 8001914:	40378787 	.word	0x40378787
 8001918:	40020000 	.word	0x40020000
 800191c:	200004ec 	.word	0x200004ec
 8001920:	20000502 	.word	0x20000502
 8001924:	200004ea 	.word	0x200004ea
 8001928:	200002f8 	.word	0x200002f8
 800192c:	40590000 	.word	0x40590000
 8001930:	200004f0 	.word	0x200004f0
 8001934:	0800b1d0 	.word	0x0800b1d0
 8001938:	2000048c 	.word	0x2000048c
 800193c:	20000388 	.word	0x20000388
 8001940:	20000500 	.word	0x20000500
 8001944:	0800b1e8 	.word	0x0800b1e8

08001948 <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	f040 80a8 	bne.w	8001aac <HAL_TIM_IC_CaptureCallback+0x164>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x170>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <HAL_TIM_IC_CaptureCallback+0x32>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f004 ff5c 	bl	8006824 <HAL_TIM_ReadCapturedValue>
 800196c:	4603      	mov	r3, r0
 800196e:	4a53      	ldr	r2, [pc, #332]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x174>)
 8001970:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001978:	e098      	b.n	8001aac <HAL_TIM_IC_CaptureCallback+0x164>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f004 ff51 	bl	8006824 <HAL_TIM_ReadCapturedValue>
 8001982:	4603      	mov	r3, r0
 8001984:	4a4e      	ldr	r2, [pc, #312]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001986:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x178>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x174>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d907      	bls.n	80019a4 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x174>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e00f      	b.n	80019c4 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x174>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d909      	bls.n	80019c4 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x174>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80019be:	33ff      	adds	r3, #255	; 0xff
 80019c0:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019c2:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80019c6:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80019c8:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80019d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_TIM_IC_CaptureCallback+0x184>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 80019e2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001ad0 <HAL_TIM_IC_CaptureCallback+0x188>
 80019e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ee:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 2a90 	vmov	r2, s15
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a10:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a1a:	d303      	bcc.n	8001a24 <HAL_TIM_IC_CaptureCallback+0xdc>
				Start_Flag = true;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e03c      	b.n	8001a9e <HAL_TIM_IC_CaptureCallback+0x156>
			else if(usWidth >= THROTTLE_HALF && usWidth < THROTTLE_FULL)
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f240 52db 	movw	r2, #1499	; 0x5db
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d90b      	bls.n	8001a48 <HAL_TIM_IC_CaptureCallback+0x100>
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a38:	d206      	bcs.n	8001a48 <HAL_TIM_IC_CaptureCallback+0x100>
				Start_Flag = false;
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
				trig = 0;
 8001a40:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e02a      	b.n	8001a9e <HAL_TIM_IC_CaptureCallback+0x156>
			else if(usWidth < THROTTLE_HALF)
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f240 52db 	movw	r2, #1499	; 0x5db
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d824      	bhi.n	8001a9e <HAL_TIM_IC_CaptureCallback+0x156>
				e_stop = true;
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd58 	bl	8000514 <__aeabi_ui2d>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f7fe fdcc 	bl	8000608 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001a7e:	f7fe feed 	bl	800085c <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4917      	ldr	r1, [pc, #92]	; (8001ae4 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a88:	680c      	ldr	r4, [r1, #0]
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f893 	bl	8000bb8 <__aeabi_d2uiz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	6363      	str	r3, [r4, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001a96:	2100      	movs	r1, #0
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a9a:	f004 f93b 	bl	8005d14 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	200004d8 	.word	0x200004d8
 8001abc:	200004cc 	.word	0x200004cc
 8001ac0:	200004d0 	.word	0x200004d0
 8001ac4:	200004d4 	.word	0x200004d4
 8001ac8:	49742400 	.word	0x49742400
 8001acc:	200004e0 	.word	0x200004e0
 8001ad0:	49742400 	.word	0x49742400
 8001ad4:	200004dc 	.word	0x200004dc
 8001ad8:	200004f4 	.word	0x200004f4
 8001adc:	200004f8 	.word	0x200004f8
 8001ae0:	200004fc 	.word	0x200004fc
 8001ae4:	200002f8 	.word	0x200002f8
 8001ae8:	40590000 	.word	0x40590000
 8001aec:	00000000 	.word	0x00000000

08001af0 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

	indx++;  //Monitors the time
 8001af4:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <HAL_SYSTICK_Callback+0xf8>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_SYSTICK_Callback+0xf8>)
 8001afe:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_SYSTICK_Callback+0xfc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a39      	ldr	r2, [pc, #228]	; (8001bec <HAL_SYSTICK_Callback+0xfc>)
 8001b08:	6013      	str	r3, [r2, #0]

	if(Start_Flag)
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_SYSTICK_Callback+0x100>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d014      	beq.n	8001b3c <HAL_SYSTICK_Callback+0x4c>
	{
		++trig;
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_SYSTICK_Callback+0x104>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <HAL_SYSTICK_Callback+0x104>)
 8001b1a:	6013      	str	r3, [r2, #0]
		if(trig >= 5000)
 8001b1c:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_SYSTICK_Callback+0x104>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d906      	bls.n	8001b36 <HAL_SYSTICK_Callback+0x46>
		{
			START_THE_SEQUENCE = true;
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <HAL_SYSTICK_Callback+0x108>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
			Start_Flag = false;
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_SYSTICK_Callback+0x100>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e002      	b.n	8001b3c <HAL_SYSTICK_Callback+0x4c>
		}


		else {
			START_THE_SEQUENCE = false;
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_SYSTICK_Callback+0x108>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(indx == 30)  // every 10 millisecond
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_SYSTICK_Callback+0xf8>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	2b1e      	cmp	r3, #30
 8001b42:	d147      	bne.n	8001bd4 <HAL_SYSTICK_Callback+0xe4>
	{
		//Calculate the rpm
		indx = 0;
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_SYSTICK_Callback+0xf8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	801a      	strh	r2, [r3, #0]

		AS5600_GetRawAngle(&as5600);
 8001b4a:	482c      	ldr	r0, [pc, #176]	; (8001bfc <HAL_SYSTICK_Callback+0x10c>)
 8001b4c:	f7ff fa66 	bl	800101c <AS5600_GetRawAngle>

		CurrRead = as5600.rawAngle;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_SYSTICK_Callback+0x10c>)
 8001b52:	88da      	ldrh	r2, [r3, #6]
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_SYSTICK_Callback+0x110>)
 8001b56:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  > 2047) rev ++;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_SYSTICK_Callback+0x114>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_SYSTICK_Callback+0x110>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b68:	db05      	blt.n	8001b76 <HAL_SYSTICK_Callback+0x86>
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_SYSTICK_Callback+0x118>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_SYSTICK_Callback+0x118>)
 8001b74:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  < -2047) rev --;
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_SYSTICK_Callback+0x114>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_SYSTICK_Callback+0x110>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8001b86:	dc05      	bgt.n	8001b94 <HAL_SYSTICK_Callback+0xa4>
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_SYSTICK_Callback+0x118>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_SYSTICK_Callback+0x118>)
 8001b92:	801a      	strh	r2, [r3, #0]

		//sprintf((char*)buf, "Rev : %d\r\n", rev);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);

		LastRead = CurrRead;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_SYSTICK_Callback+0x110>)
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_SYSTICK_Callback+0x114>)
 8001b9a:	801a      	strh	r2, [r3, #0]

		Length = (2 * __PI * __RADIUS * rev) * 0.01;   //Converting centi to meters
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_SYSTICK_Callback+0x118>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcc7 	bl	8000534 <__aeabi_i2d>
 8001ba6:	a30c      	add	r3, pc, #48	; (adr r3, 8001bd8 <HAL_SYSTICK_Callback+0xe8>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fd2c 	bl	8000608 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	a309      	add	r3, pc, #36	; (adr r3, 8001be0 <HAL_SYSTICK_Callback+0xf0>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fd23 	bl	8000608 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7ff f815 	bl	8000bf8 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_SYSTICK_Callback+0x11c>)
 8001bd2:	6013      	str	r3, [r2, #0]
	}


	else{}

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	900f5736 	.word	0x900f5736
 8001bdc:	40305616 	.word	0x40305616
 8001be0:	47ae147b 	.word	0x47ae147b
 8001be4:	3f847ae1 	.word	0x3f847ae1
 8001be8:	20000504 	.word	0x20000504
 8001bec:	20000508 	.word	0x20000508
 8001bf0:	200004f4 	.word	0x200004f4
 8001bf4:	200004f8 	.word	0x200004f8
 8001bf8:	200004fd 	.word	0x200004fd
 8001bfc:	20000464 	.word	0x20000464
 8001c00:	200004e6 	.word	0x200004e6
 8001c04:	200004e4 	.word	0x200004e4
 8001c08:	200004ea 	.word	0x200004ea
 8001c0c:	200004f0 	.word	0x200004f0

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b094      	sub	sp, #80	; 0x50
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0320 	add.w	r3, r7, #32
 8001c1a:	2230      	movs	r2, #48	; 0x30
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 fb22 	bl	8008268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <SystemClock_Config+0xcc>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <SystemClock_Config+0xcc>)
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6413      	str	r3, [r2, #64]	; 0x40
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <SystemClock_Config+0xcc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c5c:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001c84:	230f      	movs	r3, #15
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001c88:	2390      	movs	r3, #144	; 0x90
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001c90:	2305      	movs	r3, #5
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c94:	f107 0320 	add.w	r3, r7, #32
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fae3 	bl	8005264 <HAL_RCC_OscConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ca4:	f000 faa7 	bl	80021f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
 8001caa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cac:	2302      	movs	r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fd45 	bl	8005754 <HAL_RCC_ClockConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cd0:	f000 fa91 	bl	80021f6 <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3750      	adds	r7, #80	; 0x50
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000

08001ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <MX_ADC1_Init+0x9c>)
 8001cfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d24:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <MX_ADC1_Init+0xa0>)
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d42:	480e      	ldr	r0, [pc, #56]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d44:	f001 f8bc 	bl	8002ec0 <HAL_ADC_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d4e:	f000 fa52 	bl	80021f6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d52:	2304      	movs	r3, #4
 8001d54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_ADC1_Init+0x98>)
 8001d64:	f001 f8f0 	bl	8002f48 <HAL_ADC_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d6e:	f000 fa42 	bl	80021f6 <Error_Handler>
  }

}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000208 	.word	0x20000208
 8001d80:	40012000 	.word	0x40012000
 8001d84:	0f000001 	.word	0x0f000001

08001d88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <MX_I2C1_Init+0x54>)
 8001d90:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_I2C1_Init+0x58>)
 8001d96:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001daa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc6:	f001 ffa9 	bl	8003d1c <HAL_I2C_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001dd0:	f000 fa11 	bl	80021f6 <Error_Handler>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000410 	.word	0x20000410
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	000186a0 	.word	0x000186a0

08001de4 <MX_UART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart1.Instance = USART1;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_UART1_Init+0x44>)
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <MX_UART1_Init+0x48>)
 8001dec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_UART1_Init+0x44>)
 8001df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_UART1_Init+0x44>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_UART1_Init+0x44>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_UART1_Init+0x44>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <MX_UART1_Init+0x44>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_UART1_Init+0x44>)
 8001e10:	220c      	movs	r2, #12
 8001e12:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK) Error_Handler();  // If there is a problem
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <MX_UART1_Init+0x44>)
 8001e16:	f005 f943 	bl	80070a0 <HAL_UART_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_UART1_Init+0x40>
 8001e20:	f000 f9e9 	bl	80021f6 <Error_Handler>

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000388 	.word	0x20000388
 8001e2c:	40011000 	.word	0x40011000

08001e30 <MX_UART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <MX_UART2_Init+0x48>)
 8001e38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e5c:	220c      	movs	r2, #12
 8001e5e:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();  // If there is a problem
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <MX_UART2_Init+0x44>)
 8001e62:	f005 f91d 	bl	80070a0 <HAL_UART_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_UART2_Init+0x40>
 8001e6c:	f000 f9c3 	bl	80021f6 <Error_Handler>

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200003cc 	.word	0x200003cc
 8001e78:	40004400 	.word	0x40004400

08001e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2224      	movs	r2, #36	; 0x24
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f006 f9ec 	bl	8008268 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
  	 * Load the number to the ARR register.(Only 16 bit wide)
  	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
  	 *
  	 */

  htim2.Instance = TIM2;
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001eec:	f004 f8e0 	bl	80060b0 <HAL_TIM_Encoder_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ef6:	f000 f97e 	bl	80021f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_TIM2_Init+0xa4>)
 8001f08:	f005 f848 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f12:	f000 f970 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200002b0 	.word	0x200002b0

08001f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	615a      	str	r2, [r3, #20]
 8001f44:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <MX_TIM3_Init+0xc4>)
 8001f4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1; //60MHz
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f4e:	223b      	movs	r2, #59	; 0x3b
 8001f50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64 - 1;  //Generates 15KHz frequency signal.
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f6a:	481e      	ldr	r0, [pc, #120]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f6c:	f003 fdd2 	bl	8005b14 <HAL_TIM_PWM_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001f76:	f000 f93e 	bl	80021f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f82:	f107 0320 	add.w	r3, r7, #32
 8001f86:	4619      	mov	r1, r3
 8001f88:	4816      	ldr	r0, [pc, #88]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001f8a:	f005 f807 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001f94:	f000 f92f 	bl	80021f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f98:	2360      	movs	r3, #96	; 0x60
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001fb0:	f004 fb76 	bl	80066a0 <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001fba:	f000 f91c 	bl	80021f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001fc6:	f004 fb6b 	bl	80066a0 <HAL_TIM_PWM_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fd0:	f000 f911 	bl	80021f6 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <MX_TIM3_Init+0xc0>)
 8001fd6:	f000 fabb 	bl	8002550 <HAL_TIM_MspPostInit>

}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200002f8 	.word	0x200002f8
 8001fe8:	40000400 	.word	0x40000400

08001fec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <MX_TIM4_Init+0xa0>)
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <MX_TIM4_Init+0xa4>)
 800200c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MX_TIM4_Init+0xa0>)
 8002010:	223b      	movs	r2, #59	; 0x3b
 8002012:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <MX_TIM4_Init+0xa0>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800201a:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MX_TIM4_Init+0xa0>)
 800201c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002020:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <MX_TIM4_Init+0xa0>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <MX_TIM4_Init+0xa0>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800202e:	4817      	ldr	r0, [pc, #92]	; (800208c <MX_TIM4_Init+0xa0>)
 8002030:	f003 fed4 	bl	8005ddc <HAL_TIM_IC_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800203a:	f000 f8dc 	bl	80021f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	480f      	ldr	r0, [pc, #60]	; (800208c <MX_TIM4_Init+0xa0>)
 800204e:	f004 ffa5 	bl	8006f9c <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002058:	f000 f8cd 	bl	80021f6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800205c:	230a      	movs	r3, #10
 800205e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002060:	2301      	movs	r3, #1
 8002062:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_TIM4_Init+0xa0>)
 8002074:	f004 fa78 	bl	8006568 <HAL_TIM_IC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800207e:	f000 f8ba 	bl	80021f6 <Error_Handler>
  }

}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000340 	.word	0x20000340
 8002090:	40000800 	.word	0x40000800

08002094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_DMA_Init+0x3c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <MX_DMA_Init+0x3c>)
 80020a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_DMA_Init+0x3c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2038      	movs	r0, #56	; 0x38
 80020bc:	f001 fa3d 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020c0:	2038      	movs	r0, #56	; 0x38
 80020c2:	f001 fa56 	bl	8003572 <HAL_NVIC_EnableIRQ>

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <MX_GPIO_Init+0x10c>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <MX_GPIO_Init+0x10c>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <MX_GPIO_Init+0x10c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <MX_GPIO_Init+0x10c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <MX_GPIO_Init+0x10c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_GPIO_Init+0x10c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, winch_dir_Pin|bay_dir_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002160:	4820      	ldr	r0, [pc, #128]	; (80021e4 <MX_GPIO_Init+0x110>)
 8002162:	f001 fd9d 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : spring_thing_ext_Pin */
  GPIO_InitStruct.Pin = spring_thing_ext_Pin_Pin;
 8002166:	2308      	movs	r3, #8
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800216a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800216e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(spring_thing_ext_Pin_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	481b      	ldr	r0, [pc, #108]	; (80021e8 <MX_GPIO_Init+0x114>)
 800217c:	f001 fc0c 	bl	8003998 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002180:	2009      	movs	r0, #9
 8002182:	f001 f9f6 	bl	8003572 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn,15,0);
 8002186:	2200      	movs	r2, #0
 8002188:	210f      	movs	r1, #15
 800218a:	2009      	movs	r0, #9
 800218c:	f001 f9d5 	bl	800353a <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : winch_dir_Pin bay_dir_Pin */
  GPIO_InitStruct.Pin = winch_dir_Pin|bay_dir_Pin;
 8002190:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <MX_GPIO_Init+0x110>)
 80021aa:	f001 fbf5 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : roof_top_ext_Pin */
  GPIO_InitStruct.Pin = roof_top_ext_Pin;
 80021ae:	2301      	movs	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(roof_top_ext_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4809      	ldr	r0, [pc, #36]	; (80021e8 <MX_GPIO_Init+0x114>)
 80021c4:	f001 fbe8 	bl	8003998 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021c8:	2006      	movs	r0, #6
 80021ca:	f001 f9d2 	bl	8003572 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn,15,0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210f      	movs	r1, #15
 80021d2:	2006      	movs	r0, #6
 80021d4:	f001 f9b1 	bl	800353a <HAL_NVIC_SetPriority>

}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	; 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020400 	.word	0x40020400

080021ec <MX_Jump>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void MX_Jump()
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f0:	b672      	cpsid	i
}
 80021f2:	bf00      	nop
	__disable_irq();
	while(1);
 80021f4:	e7fe      	b.n	80021f4 <MX_Jump+0x8>

080021f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop

	/*
	 * Can Add ASSERT Statements here, for debugging purpose only.
	 */
  __disable_irq();
  while (1)
 80021fe:	e7fe      	b.n	80021fe <Error_Handler+0x8>

08002200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_MspInit+0x4c>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_MspInit+0x4c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a33      	ldr	r2, [pc, #204]	; (800233c <HAL_ADC_MspInit+0xec>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d15f      	bne.n	8002332 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_ADC_MspInit+0xf0>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_ADC_MspInit+0xf0>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_ADC_MspInit+0xf0>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_ADC_MspInit+0xf0>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a2a      	ldr	r2, [pc, #168]	; (8002340 <HAL_ADC_MspInit+0xf0>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_ADC_MspInit+0xf0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = curr_sensor_Pin;
 80022aa:	2310      	movs	r3, #16
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ae:	2303      	movs	r3, #3
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(curr_sensor_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4821      	ldr	r0, [pc, #132]	; (8002344 <HAL_ADC_MspInit+0xf4>)
 80022be:	f001 fb6b 	bl	8003998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022c4:	4a21      	ldr	r2, [pc, #132]	; (800234c <HAL_ADC_MspInit+0xfc>)
 80022c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002306:	4810      	ldr	r0, [pc, #64]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 8002308:	f001 f954 	bl	80035b4 <HAL_DMA_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002312:	f7ff ff70 	bl	80021f6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_ADC_MspInit+0xf8>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2012      	movs	r0, #18
 8002328:	f001 f907 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800232c:	2012      	movs	r0, #18
 800232e:	f001 f920 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40012000 	.word	0x40012000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	20000250 	.word	0x20000250
 800234c:	40026410 	.word	0x40026410

08002350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_I2C_MspInit+0x94>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d134      	bne.n	80023dc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800238e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002394:	2312      	movs	r3, #18
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a0:	2304      	movs	r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4810      	ldr	r0, [pc, #64]	; (80023ec <HAL_I2C_MspInit+0x9c>)
 80023ac:	f001 faf4 	bl	8003998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 80023ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023be:	6413      	str	r3, [r2, #64]	; 0x40
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_I2C_MspInit+0x98>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2101      	movs	r1, #1
 80023d0:	201f      	movs	r0, #31
 80023d2:	f001 f8b2 	bl	800353a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023d6:	201f      	movs	r0, #31
 80023d8:	f001 f8cb 	bl	8003572 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40005400 	.word	0x40005400
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020400 	.word	0x40020400

080023f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d12b      	bne.n	800246a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_TIM_Encoder_MspInit+0x84>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_TIM_Encoder_MspInit+0x84>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <HAL_TIM_Encoder_MspInit+0x84>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_TIM_Encoder_MspInit+0x84>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <HAL_TIM_Encoder_MspInit+0x84>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_TIM_Encoder_MspInit+0x84>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder_a_Pin|encoder_b_Pin;
 800244a:	2303      	movs	r3, #3
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800245a:	2301      	movs	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <HAL_TIM_Encoder_MspInit+0x88>)
 8002466:	f001 fa97 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	40020000 	.word	0x40020000

0800247c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10d      	bne.n	80024aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_TIM_PWM_MspInit+0x40>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_TIM_PWM_MspInit+0x40>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_TIM_PWM_MspInit+0x40>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_TIM_IC_MspInit+0x84>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12b      	bne.n	800253a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_TIM_IC_MspInit+0x88>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_TIM_IC_MspInit+0x88>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_TIM_IC_MspInit+0x88>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_TIM_IC_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_TIM_IC_MspInit+0x88>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_TIM_IC_MspInit+0x88>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = pixhawk_signal_Pin;
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800252a:	2302      	movs	r3, #2
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pixhawk_signal_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <HAL_TIM_IC_MspInit+0x8c>)
 8002536:	f001 fa2f 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40000800 	.word	0x40000800
 8002548:	40023800 	.word	0x40023800
 800254c:	40020400 	.word	0x40020400

08002550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <HAL_TIM_MspPostInit+0x68>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11d      	bne.n	80025ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_TIM_MspPostInit+0x6c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_TIM_MspPostInit+0x6c>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_TIM_MspPostInit+0x6c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = winch_pwm_Pin|bay_door_pwm_Pin;
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259e:	2302      	movs	r3, #2
 80025a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	; (80025c0 <HAL_TIM_MspPostInit+0x70>)
 80025aa:	f001 f9f5 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <HAL_UART_MspInit+0x108>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d13d      	bne.n	8002662 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a38      	ldr	r2, [pc, #224]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 80025f0:	f043 0310 	orr.w	r3, r3, #16
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800261e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002630:	2307      	movs	r3, #7
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	4619      	mov	r1, r3
 800263a:	4826      	ldr	r0, [pc, #152]	; (80026d4 <HAL_UART_MspInit+0x110>)
 800263c:	f001 f9ac 	bl	8003998 <HAL_GPIO_Init>


    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002640:	2025      	movs	r0, #37	; 0x25
 8002642:	f000 ff96 	bl	8003572 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 8002646:	2200      	movs	r2, #0
 8002648:	2106      	movs	r1, #6
 800264a:	2025      	movs	r0, #37	; 0x25
 800264c:	f000 ff75 	bl	800353a <HAL_NVIC_SetPriority>

	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_UART_MspInit+0x114>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_UART_MspInit+0x114>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	60da      	str	r2, [r3, #12]

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  }

}
 8002660:	e030      	b.n	80026c4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_UART_MspInit+0x118>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d12b      	bne.n	80026c4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	6413      	str	r3, [r2, #64]	; 0x40
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6313      	str	r3, [r2, #48]	; 0x30
 8002698:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_UART_MspInit+0x10c>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a4:	230c      	movs	r3, #12
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b4:	2307      	movs	r3, #7
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <HAL_UART_MspInit+0x110>)
 80026c0:	f001 f96a 	bl	8003998 <HAL_GPIO_Init>
}
 80026c4:	bf00      	nop
 80026c6:	3730      	adds	r7, #48	; 0x30
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40011000 	.word	0x40011000
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	20000388 	.word	0x20000388
 80026dc:	40004400 	.word	0x40004400

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <NMI_Handler+0x4>

080026e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <HardFault_Handler+0x4>

080026ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <MemManage_Handler+0x4>

080026f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <UsageFault_Handler+0x4>

080026fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800272c:	f000 fb84 	bl	8002e38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002730:	f000 ff39 	bl	80035a6 <HAL_SYSTICK_IRQHandler>
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM4_IRQHandler+0x10>)
 800273e:	f003 fe0b 	bl	8006358 <HAL_TIM_IRQHandler>
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000340 	.word	0x20000340
 800274c:	00000000 	.word	0x00000000

08002750 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	2201      	movs	r2, #1
 800275a:	4985      	ldr	r1, [pc, #532]	; (8002970 <USART1_IRQHandler+0x220>)
 800275c:	4885      	ldr	r0, [pc, #532]	; (8002974 <USART1_IRQHandler+0x224>)
 800275e:	f004 fd7e 	bl	800725e <HAL_UART_Receive>
		if (receivedData == '\r')
 8002762:	4b83      	ldr	r3, [pc, #524]	; (8002970 <USART1_IRQHandler+0x220>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b0d      	cmp	r3, #13
 8002768:	f040 809e 	bne.w	80028a8 <USART1_IRQHandler+0x158>
			{
				recepCmplt = true;
 800276c:	4b82      	ldr	r3, [pc, #520]	; (8002978 <USART1_IRQHandler+0x228>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
				Data = atoi((char*)data_buffer);
 8002772:	4882      	ldr	r0, [pc, #520]	; (800297c <USART1_IRQHandler+0x22c>)
 8002774:	f005 fd4a 	bl	800820c <atoi>
 8002778:	4603      	mov	r3, r0
 800277a:	b21a      	sxth	r2, r3
 800277c:	4b80      	ldr	r3, [pc, #512]	; (8002980 <USART1_IRQHandler+0x230>)
 800277e:	801a      	strh	r2, [r3, #0]

				data_buffer[count++] = '\r';
 8002780:	4b80      	ldr	r3, [pc, #512]	; (8002984 <USART1_IRQHandler+0x234>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	497f      	ldr	r1, [pc, #508]	; (8002984 <USART1_IRQHandler+0x234>)
 8002788:	600a      	str	r2, [r1, #0]
 800278a:	4a7c      	ldr	r2, [pc, #496]	; (800297c <USART1_IRQHandler+0x22c>)
 800278c:	210d      	movs	r1, #13
 800278e:	54d1      	strb	r1, [r2, r3]

				Data1 = -Data;
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <USART1_IRQHandler+0x230>)
 8002792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002796:	425b      	negs	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <USART1_IRQHandler+0x238>)
 800279c:	601a      	str	r2, [r3, #0]

				if(Data >= 0)
 800279e:	4b78      	ldr	r3, [pc, #480]	; (8002980 <USART1_IRQHandler+0x230>)
 80027a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db36      	blt.n	8002816 <USART1_IRQHandler+0xc6>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027ae:	4877      	ldr	r0, [pc, #476]	; (800298c <USART1_IRQHandler+0x23c>)
 80027b0:	f001 fa76 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2120      	movs	r1, #32
 80027b8:	4874      	ldr	r0, [pc, #464]	; (800298c <USART1_IRQHandler+0x23c>)
 80027ba:	f001 fa71 	bl	8003ca0 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(Data)/100);
 80027be:	4b74      	ldr	r3, [pc, #464]	; (8002990 <USART1_IRQHandler+0x240>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fea6 	bl	8000514 <__aeabi_ui2d>
 80027c8:	4604      	mov	r4, r0
 80027ca:	460d      	mov	r5, r1
 80027cc:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <USART1_IRQHandler+0x230>)
 80027ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd feae 	bl	8000534 <__aeabi_i2d>
 80027d8:	a363      	add	r3, pc, #396	; (adr r3, 8002968 <USART1_IRQHandler+0x218>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd ff13 	bl	8000608 <__aeabi_dmul>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4620      	mov	r0, r4
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7fd ff0d 	bl	8000608 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	4b66      	ldr	r3, [pc, #408]	; (8002994 <USART1_IRQHandler+0x244>)
 80027fc:	f7fe f82e 	bl	800085c <__aeabi_ddiv>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4962      	ldr	r1, [pc, #392]	; (8002990 <USART1_IRQHandler+0x240>)
 8002806:	680c      	ldr	r4, [r1, #0]
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe f9d4 	bl	8000bb8 <__aeabi_d2uiz>
 8002810:	4603      	mov	r3, r0
 8002812:	6363      	str	r3, [r4, #52]	; 0x34
 8002814:	e036      	b.n	8002884 <USART1_IRQHandler+0x134>

				}

				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8002816:	2201      	movs	r2, #1
 8002818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800281c:	485b      	ldr	r0, [pc, #364]	; (800298c <USART1_IRQHandler+0x23c>)
 800281e:	f001 fa3f 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002822:	2201      	movs	r2, #1
 8002824:	2120      	movs	r1, #32
 8002826:	4859      	ldr	r0, [pc, #356]	; (800298c <USART1_IRQHandler+0x23c>)
 8002828:	f001 fa3a 	bl	8003ca0 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(-Data)/100);
 800282c:	4b58      	ldr	r3, [pc, #352]	; (8002990 <USART1_IRQHandler+0x240>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe6f 	bl	8000514 <__aeabi_ui2d>
 8002836:	4604      	mov	r4, r0
 8002838:	460d      	mov	r5, r1
 800283a:	4b51      	ldr	r3, [pc, #324]	; (8002980 <USART1_IRQHandler+0x230>)
 800283c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002840:	425b      	negs	r3, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe76 	bl	8000534 <__aeabi_i2d>
 8002848:	a347      	add	r3, pc, #284	; (adr r3, 8002968 <USART1_IRQHandler+0x218>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fedb 	bl	8000608 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fed5 	bl	8000608 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <USART1_IRQHandler+0x244>)
 800286c:	f7fd fff6 	bl	800085c <__aeabi_ddiv>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4946      	ldr	r1, [pc, #280]	; (8002990 <USART1_IRQHandler+0x240>)
 8002876:	680c      	ldr	r4, [r1, #0]
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f99c 	bl	8000bb8 <__aeabi_d2uiz>
 8002880:	4603      	mov	r3, r0
 8002882:	6363      	str	r3, [r4, #52]	; 0x34

				}


				HAL_UART_Transmit(&huart1, data_buffer, count, HAL_MAX_DELAY);  //send to terminal
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <USART1_IRQHandler+0x234>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29a      	uxth	r2, r3
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	493b      	ldr	r1, [pc, #236]	; (800297c <USART1_IRQHandler+0x22c>)
 8002890:	4838      	ldr	r0, [pc, #224]	; (8002974 <USART1_IRQHandler+0x224>)
 8002892:	f004 fc52 	bl	800713a <HAL_UART_Transmit>
				memset(data_buffer, 0, sizeof(data_buffer));
 8002896:	2205      	movs	r2, #5
 8002898:	2100      	movs	r1, #0
 800289a:	4838      	ldr	r0, [pc, #224]	; (800297c <USART1_IRQHandler+0x22c>)
 800289c:	f005 fce4 	bl	8008268 <memset>
				count = 0;
 80028a0:	4b38      	ldr	r3, [pc, #224]	; (8002984 <USART1_IRQHandler+0x234>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
		else
		{
			data_buffer[count++] = receivedData;
		}

	return;
 80028a6:	e05c      	b.n	8002962 <USART1_IRQHandler+0x212>
		else if(receivedData == ' ')
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <USART1_IRQHandler+0x220>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d136      	bne.n	800291e <USART1_IRQHandler+0x1ce>
			HAL_UART_Transmit(&huart1, (uint8_t *)E_Stop, strlen(E_Stop), HAL_MAX_DELAY);  //send to terminal
 80028b0:	4b39      	ldr	r3, [pc, #228]	; (8002998 <USART1_IRQHandler+0x248>)
 80028b2:	681c      	ldr	r4, [r3, #0]
 80028b4:	4b38      	ldr	r3, [pc, #224]	; (8002998 <USART1_IRQHandler+0x248>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fc91 	bl	80001e0 <strlen>
 80028be:	4603      	mov	r3, r0
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	4621      	mov	r1, r4
 80028c8:	482a      	ldr	r0, [pc, #168]	; (8002974 <USART1_IRQHandler+0x224>)
 80028ca:	f004 fc36 	bl	800713a <HAL_UART_Transmit>
			memset(data_buffer, 0, sizeof(data_buffer));
 80028ce:	2205      	movs	r2, #5
 80028d0:	2100      	movs	r1, #0
 80028d2:	482a      	ldr	r0, [pc, #168]	; (800297c <USART1_IRQHandler+0x22c>)
 80028d4:	f005 fcc8 	bl	8008268 <memset>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <USART1_IRQHandler+0x240>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fe19 	bl	8000514 <__aeabi_ui2d>
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	f7fd fe8d 	bl	8000608 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <USART1_IRQHandler+0x244>)
 80028fc:	f7fd ffae 	bl	800085c <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <USART1_IRQHandler+0x240>)
 8002906:	680c      	ldr	r4, [r1, #0]
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f7fe f954 	bl	8000bb8 <__aeabi_d2uiz>
 8002910:	4603      	mov	r3, r0
 8002912:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002914:	2100      	movs	r1, #0
 8002916:	481e      	ldr	r0, [pc, #120]	; (8002990 <USART1_IRQHandler+0x240>)
 8002918:	f003 f9fc 	bl	8005d14 <HAL_TIM_PWM_Stop>
	return;
 800291c:	e021      	b.n	8002962 <USART1_IRQHandler+0x212>
		else if(receivedData == 'r')
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <USART1_IRQHandler+0x220>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b72      	cmp	r3, #114	; 0x72
 8002924:	d108      	bne.n	8002938 <USART1_IRQHandler+0x1e8>
			HAL_GPIO_Init(GPIOA, &tim3ch1gpio);
 8002926:	491d      	ldr	r1, [pc, #116]	; (800299c <USART1_IRQHandler+0x24c>)
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <USART1_IRQHandler+0x23c>)
 800292a:	f001 f835 	bl	8003998 <HAL_GPIO_Init>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800292e:	2100      	movs	r1, #0
 8002930:	4817      	ldr	r0, [pc, #92]	; (8002990 <USART1_IRQHandler+0x240>)
 8002932:	f003 f93f 	bl	8005bb4 <HAL_TIM_PWM_Start>
	return;
 8002936:	e014      	b.n	8002962 <USART1_IRQHandler+0x212>
		else if(receivedData == 'v')
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <USART1_IRQHandler+0x220>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b76      	cmp	r3, #118	; 0x76
 800293e:	d010      	beq.n	8002962 <USART1_IRQHandler+0x212>
		else if(receivedData == 's')
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <USART1_IRQHandler+0x220>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b73      	cmp	r3, #115	; 0x73
 8002946:	d103      	bne.n	8002950 <USART1_IRQHandler+0x200>
			Start_Flag = true;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <USART1_IRQHandler+0x250>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
	return;
 800294e:	e008      	b.n	8002962 <USART1_IRQHandler+0x212>
			data_buffer[count++] = receivedData;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <USART1_IRQHandler+0x234>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	490b      	ldr	r1, [pc, #44]	; (8002984 <USART1_IRQHandler+0x234>)
 8002958:	600a      	str	r2, [r1, #0]
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <USART1_IRQHandler+0x220>)
 800295c:	7811      	ldrb	r1, [r2, #0]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <USART1_IRQHandler+0x22c>)
 8002960:	54d1      	strb	r1, [r2, r3]
	return;
 8002962:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);

}
 8002964:	bdb0      	pop	{r4, r5, r7, pc}
 8002966:	bf00      	nop
 8002968:	190cb39b 	.word	0x190cb39b
 800296c:	3fd91919 	.word	0x3fd91919
 8002970:	20000474 	.word	0x20000474
 8002974:	20000388 	.word	0x20000388
 8002978:	20000484 	.word	0x20000484
 800297c:	20000478 	.word	0x20000478
 8002980:	20000486 	.word	0x20000486
 8002984:	20000480 	.word	0x20000480
 8002988:	20000488 	.word	0x20000488
 800298c:	40020000 	.word	0x40020000
 8002990:	200002f8 	.word	0x200002f8
 8002994:	40590000 	.word	0x40590000
 8002998:	20000008 	.word	0x20000008
 800299c:	2000050c 	.word	0x2000050c
 80029a0:	200004f4 	.word	0x200004f4

080029a4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	/*
	 * This handler is reserved for the Mavlink interface. Future Implementation.
	 */
	HAL_UART_IRQHandler(&huart2);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <USART2_IRQHandler+0x10>)
 80029aa:	f004 fcfb 	bl	80073a4 <HAL_UART_IRQHandler>
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200003cc 	.word	0x200003cc

080029b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029b8:	b598      	push	{r3, r4, r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PB0
	 */

	if(close_door)
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <EXTI0_IRQHandler+0xcc>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d059      	beq.n	8002a78 <EXTI0_IRQHandler+0xc0>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <EXTI0_IRQHandler+0xd0>)
 80029c6:	681c      	ldr	r4, [r3, #0]
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <EXTI0_IRQHandler+0xd0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fc07 	bl	80001e0 <strlen>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	4621      	mov	r1, r4
 80029dc:	482b      	ldr	r0, [pc, #172]	; (8002a8c <EXTI0_IRQHandler+0xd4>)
 80029de:	f004 fbac 	bl	800713a <HAL_UART_Transmit>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <EXTI0_IRQHandler+0xd8>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fd94 	bl	8000514 <__aeabi_ui2d>
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f7fd fe08 	bl	8000608 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <EXTI0_IRQHandler+0xdc>)
 8002a06:	f7fd ff29 	bl	800085c <__aeabi_ddiv>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4920      	ldr	r1, [pc, #128]	; (8002a90 <EXTI0_IRQHandler+0xd8>)
 8002a10:	680c      	ldr	r4, [r1, #0]
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f8cf 	bl	8000bb8 <__aeabi_d2uiz>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6363      	str	r3, [r4, #52]	; 0x34


		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <EXTI0_IRQHandler+0xe0>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_WritePin(winch_dir_GPIO_Port, winch_dir_Pin, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2120      	movs	r1, #32
 8002a28:	481c      	ldr	r0, [pc, #112]	; (8002a9c <EXTI0_IRQHandler+0xe4>)
 8002a2a:	f001 f939 	bl	8003ca0 <HAL_GPIO_WritePin>
			for(int i =0; i<6000; i++){

				__HAL_TIM_SET_COMPARE(&hhtim3, TIM_CHANNEL_1, hhtim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <EXTI0_IRQHandler+0xd8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd6e 	bl	8000514 <__aeabi_ui2d>
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	f7fd fde2 	bl	8000608 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <EXTI0_IRQHandler+0xdc>)
 8002a52:	f7fd ff03 	bl	800085c <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	490d      	ldr	r1, [pc, #52]	; (8002a90 <EXTI0_IRQHandler+0xd8>)
 8002a5c:	680c      	ldr	r4, [r1, #0]
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fe f8a9 	bl	8000bb8 <__aeabi_d2uiz>
 8002a66:	4603      	mov	r3, r0
 8002a68:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <EXTI0_IRQHandler+0xd8>)
 8002a6e:	f003 f951 	bl	8005d14 <HAL_TIM_PWM_Stop>
			spring_trig = false;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <EXTI0_IRQHandler+0xe8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
	}


  HAL_GPIO_EXTI_IRQHandler(roof_top_ext_Pin);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f001 f92b 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>

}
 8002a7e:	bf00      	nop
 8002a80:	bd98      	pop	{r3, r4, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000500 	.word	0x20000500
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000388 	.word	0x20000388
 8002a90:	200002f8 	.word	0x200002f8
 8002a94:	40590000 	.word	0x40590000
 8002a98:	20000501 	.word	0x20000501
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	200004ff 	.word	0x200004ff
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
	 *  This subroutine handles the Spring thing interrupt
	 *
	 *  PB3
	 */

	if(poop_back)
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <EXTI3_IRQHandler+0xb0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d044      	beq.n	8002b40 <EXTI3_IRQHandler+0x98>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <EXTI3_IRQHandler+0xb4>)
 8002ab8:	681c      	ldr	r4, [r3, #0]
 8002aba:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <EXTI3_IRQHandler+0xb4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fb8e 	bl	80001e0 <strlen>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	4621      	mov	r1, r4
 8002ace:	4824      	ldr	r0, [pc, #144]	; (8002b60 <EXTI3_IRQHandler+0xb8>)
 8002ad0:	f004 fb33 	bl	800713a <HAL_UART_Transmit>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * 0/100);
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <EXTI3_IRQHandler+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34

		for(int i =0; i<12000; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	e01f      	b.n	8002b22 <EXTI3_IRQHandler+0x7a>
		{

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <EXTI3_IRQHandler+0xbc>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd14 	bl	8000514 <__aeabi_ui2d>
 8002aec:	a318      	add	r3, pc, #96	; (adr r3, 8002b50 <EXTI3_IRQHandler+0xa8>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fd89 	bl	8000608 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <EXTI3_IRQHandler+0xc0>)
 8002b04:	f7fd feaa 	bl	800085c <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4915      	ldr	r1, [pc, #84]	; (8002b64 <EXTI3_IRQHandler+0xbc>)
 8002b0e:	680c      	ldr	r4, [r1, #0]
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fe f850 	bl	8000bb8 <__aeabi_d2uiz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	6363      	str	r3, [r4, #52]	; 0x34
		for(int i =0; i<12000; i++)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	ddda      	ble.n	8002ae2 <EXTI3_IRQHandler+0x3a>

		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * 0/100);
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <EXTI3_IRQHandler+0xbc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);


		poop_back = false;
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <EXTI3_IRQHandler+0xb0>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
		spring_trig = true;
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <EXTI3_IRQHandler+0xc4>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]

	}

  HAL_GPIO_EXTI_IRQHandler(spring_thing_ext_Pin_Pin);
 8002b40:	2008      	movs	r0, #8
 8002b42:	f001 f8c7 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>

}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	877be861 	.word	0x877be861
 8002b54:	40278787 	.word	0x40278787
 8002b58:	200004fe 	.word	0x200004fe
 8002b5c:	20000004 	.word	0x20000004
 8002b60:	20000388 	.word	0x20000388
 8002b64:	200002f8 	.word	0x200002f8
 8002b68:	40590000 	.word	0x40590000
 8002b6c:	200004ff 	.word	0x200004ff

08002b70 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	rawAngle = as5600.rawAngle;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <I2C1_EV_IRQHandler+0x18>)
 8002b76:	88da      	ldrh	r2, [r3, #6]
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <I2C1_EV_IRQHandler+0x1c>)
 8002b7a:	801a      	strh	r2, [r3, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000464 	.word	0x20000464
 8002b8c:	200004e8 	.word	0x200004e8

08002b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	return 1;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_kill>:

int _kill(int pid, int sig)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002baa:	f005 fb33 	bl	8008214 <__errno>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2216      	movs	r2, #22
 8002bb2:	601a      	str	r2, [r3, #0]
	return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_exit>:

void _exit (int status)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ffe7 	bl	8002ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bd2:	e7fe      	b.n	8002bd2 <_exit+0x12>

08002bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e00a      	b.n	8002bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002be6:	f3af 8000 	nop.w
 8002bea:	4601      	mov	r1, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	b2ca      	uxtb	r2, r1
 8002bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf0      	blt.n	8002be6 <_read+0x12>
	}

return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e009      	b.n	8002c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3301      	adds	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dbf1      	blt.n	8002c20 <_write+0x12>
	}
	return len;
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_close>:

int _close(int file)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_isatty>:

int _isatty(int file)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
	return 1;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <_sbrk+0x5c>)
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <_sbrk+0x60>)
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <_sbrk+0x64>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <_sbrk+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce0:	f005 fa98 	bl	8008214 <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e009      	b.n	8002d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <_sbrk+0x64>)
 8002d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20010000 	.word	0x20010000
 8002d10:	00000400 	.word	0x00000400
 8002d14:	20000520 	.word	0x20000520
 8002d18:	20000538 	.word	0x20000538

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d44:	480d      	ldr	r0, [pc, #52]	; (8002d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d46:	490e      	ldr	r1, [pc, #56]	; (8002d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d5c:	4c0b      	ldr	r4, [pc, #44]	; (8002d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d6a:	f7ff ffd7 	bl	8002d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f005 fa57 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d72:	f7fe faa1 	bl	80012b8 <main>
  bx  lr    
 8002d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d80:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002d84:	0800b674 	.word	0x0800b674
  ldr r2, =_sbss
 8002d88:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002d8c:	20000538 	.word	0x20000538

08002d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC_IRQHandler>
	...

08002d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <HAL_Init+0x40>)
 8002d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_Init+0x40>)
 8002daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <HAL_Init+0x40>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 fbb1 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	200f      	movs	r0, #15
 8002dc4:	f000 f808 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff fa1a 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fbc9 	bl	800358e <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 fb91 	bl	800353a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000010 	.word	0x20000010
 8002e30:	20000018 	.word	0x20000018
 8002e34:	20000014 	.word	0x20000014

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000018 	.word	0x20000018
 8002e5c:	20000524 	.word	0x20000524

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000524 	.word	0x20000524

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e033      	b.n	8002f3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff f9b6 	bl	8002250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f06:	f023 0302 	bic.w	r3, r3, #2
 8002f0a:	f043 0202 	orr.w	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f93a 	bl	800318c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f2e:	e001      	b.n	8002f34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e105      	b.n	8003170 <HAL_ADC_ConfigChannel+0x228>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d925      	bls.n	8002fc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	3b1e      	subs	r3, #30
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43da      	mvns	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	400a      	ands	r2, r1
 8002f98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68d9      	ldr	r1, [r3, #12]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4403      	add	r3, r0
 8002fb2:	3b1e      	subs	r3, #30
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	e022      	b.n	8003006 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6919      	ldr	r1, [r3, #16]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6919      	ldr	r1, [r3, #16]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4403      	add	r3, r0
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b06      	cmp	r3, #6
 800300c:	d824      	bhi.n	8003058 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b05      	subs	r3, #5
 8003020:	221f      	movs	r2, #31
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	400a      	ands	r2, r1
 800302e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b05      	subs	r3, #5
 800304a:	fa00 f203 	lsl.w	r2, r0, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	635a      	str	r2, [r3, #52]	; 0x34
 8003056:	e04c      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d824      	bhi.n	80030aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	3b23      	subs	r3, #35	; 0x23
 8003072:	221f      	movs	r2, #31
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43da      	mvns	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	400a      	ands	r2, r1
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	4618      	mov	r0, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b23      	subs	r3, #35	; 0x23
 800309c:	fa00 f203 	lsl.w	r2, r0, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
 80030a8:	e023      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b41      	subs	r3, #65	; 0x41
 80030bc:	221f      	movs	r2, #31
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b41      	subs	r3, #65	; 0x41
 80030e6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_ADC_ConfigChannel+0x234>)
 80030f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_ADC_ConfigChannel+0x238>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d109      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x1cc>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b12      	cmp	r3, #18
 8003106:	d105      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_ADC_ConfigChannel+0x238>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d123      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x21e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b10      	cmp	r3, #16
 8003124:	d003      	beq.n	800312e <HAL_ADC_ConfigChannel+0x1e6>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b11      	cmp	r3, #17
 800312c:	d11b      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b10      	cmp	r3, #16
 8003140:	d111      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_ADC_ConfigChannel+0x23c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a10      	ldr	r2, [pc, #64]	; (8003188 <HAL_ADC_ConfigChannel+0x240>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	0c9a      	lsrs	r2, r3, #18
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003158:	e002      	b.n	8003160 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3b01      	subs	r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f9      	bne.n	800315a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40012300 	.word	0x40012300
 8003180:	40012000 	.word	0x40012000
 8003184:	20000010 	.word	0x20000010
 8003188:	431bde83 	.word	0x431bde83

0800318c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <ADC_Init+0x1f0>)
 8003196:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	4a58      	ldr	r2, [pc, #352]	; (8003380 <ADC_Init+0x1f4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e00f      	b.n	800328a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003288:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0202 	bic.w	r2, r2, #2
 8003298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e1b      	ldrb	r3, [r3, #24]
 80032a4:	005a      	lsls	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	3b01      	subs	r3, #1
 80032e4:	035a      	lsls	r2, r3, #13
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e007      	b.n	8003300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	3b01      	subs	r3, #1
 800331c:	051a      	lsls	r2, r3, #20
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003342:	025a      	lsls	r2, r3, #9
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	029a      	lsls	r2, r3, #10
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40012300 	.word	0x40012300
 8003380:	0f000001 	.word	0x0f000001

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff29 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff3e 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff8e 	bl	8003478 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff31 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ffa2 	bl	80034e0 <SysTick_Config>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80035aa:	f7fe faa1 	bl	8001af0 <HAL_SYSTICK_Callback>
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff fc4e 	bl	8002e60 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e099      	b.n	8003704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f0:	e00f      	b.n	8003612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035f2:	f7ff fc35 	bl	8002e60 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d908      	bls.n	8003612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2203      	movs	r2, #3
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e078      	b.n	8003704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e8      	bne.n	80035f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_DMA_Init+0x158>)
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	2b04      	cmp	r3, #4
 800366a:	d107      	bne.n	800367c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4313      	orrs	r3, r2
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0307 	bic.w	r3, r3, #7
 8003692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d117      	bne.n	80036d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f8f1 	bl	80038a0 <DMA_CheckFifoParam>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036d2:	2301      	movs	r3, #1
 80036d4:	e016      	b.n	8003704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8a8 	bl	8003834 <DMA_CalcBaseAndBitshift>
 80036e4:	4603      	mov	r3, r0
 80036e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	223f      	movs	r2, #63	; 0x3f
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	f010803f 	.word	0xf010803f

08003710 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800371e:	f7ff fb9f 	bl	8002e60 <HAL_GetTick>
 8003722:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d008      	beq.n	8003742 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e052      	b.n	80037e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0216 	bic.w	r2, r2, #22
 8003750:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_DMA_Abort+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0208 	bic.w	r2, r2, #8
 8003780:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003792:	e013      	b.n	80037bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003794:	f7ff fb64 	bl	8002e60 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d90c      	bls.n	80037bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2203      	movs	r2, #3
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e015      	b.n	80037e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e4      	bne.n	8003794 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	223f      	movs	r2, #63	; 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d004      	beq.n	800380e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e00c      	b.n	8003828 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2205      	movs	r2, #5
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3b10      	subs	r3, #16
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <DMA_CalcBaseAndBitshift+0x64>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <DMA_CalcBaseAndBitshift+0x68>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d909      	bls.n	8003876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	659a      	str	r2, [r3, #88]	; 0x58
 8003874:	e007      	b.n	8003886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	0800b27c 	.word	0x0800b27c

080038a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11f      	bne.n	80038fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d856      	bhi.n	800396e <DMA_CheckFifoParam+0xce>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x28>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038eb 	.word	0x080038eb
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	0800396f 	.word	0x0800396f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d046      	beq.n	8003972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e8:	e043      	b.n	8003972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f2:	d140      	bne.n	8003976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e03d      	b.n	8003976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d121      	bne.n	8003948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d837      	bhi.n	800397a <DMA_CheckFifoParam+0xda>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <DMA_CheckFifoParam+0x70>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003921 	.word	0x08003921
 8003914:	08003927 	.word	0x08003927
 8003918:	08003921 	.word	0x08003921
 800391c:	08003939 	.word	0x08003939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e030      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d025      	beq.n	800397e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e022      	b.n	800397e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003940:	d11f      	bne.n	8003982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003946:	e01c      	b.n	8003982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d903      	bls.n	8003956 <DMA_CheckFifoParam+0xb6>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d003      	beq.n	800395c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003954:	e018      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
      break;
 800395a:	e015      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e00b      	b.n	8003986 <DMA_CheckFifoParam+0xe6>
      break;
 800396e:	bf00      	nop
 8003970:	e00a      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
 8003974:	e008      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 8003976:	bf00      	nop
 8003978:	e006      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 800397a:	bf00      	nop
 800397c:	e004      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;   
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <DMA_CheckFifoParam+0xe8>
      break;
 8003986:	bf00      	nop
    }
  } 
  
  return status; 
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e159      	b.n	8003c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	f040 8148 	bne.w	8003c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d005      	beq.n	80039ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d130      	bne.n	8003a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 0201 	and.w	r2, r3, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d017      	beq.n	8003a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d123      	bne.n	8003adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	08da      	lsrs	r2, r3, #3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3208      	adds	r2, #8
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	220f      	movs	r2, #15
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	08da      	lsrs	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3208      	adds	r2, #8
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a2 	beq.w	8003c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a56      	ldr	r2, [pc, #344]	; (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_GPIO_Init+0x2e8>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b3a:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_GPIO_Init+0x2ec>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a49      	ldr	r2, [pc, #292]	; (8003c88 <HAL_GPIO_Init+0x2f0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x202>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a48      	ldr	r2, [pc, #288]	; (8003c8c <HAL_GPIO_Init+0x2f4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x1fe>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a47      	ldr	r2, [pc, #284]	; (8003c90 <HAL_GPIO_Init+0x2f8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x1fa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a46      	ldr	r2, [pc, #280]	; (8003c94 <HAL_GPIO_Init+0x2fc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x1f6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_GPIO_Init+0x300>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x1f2>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e008      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x204>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f002 0203 	and.w	r2, r2, #3
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bac:	4935      	ldr	r1, [pc, #212]	; (8003c84 <HAL_GPIO_Init+0x2ec>)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bba:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bde:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c08:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <HAL_GPIO_Init+0x304>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	f67f aea2 	bls.w	80039b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	40020400 	.word	0x40020400
 8003c90:	40020800 	.word	0x40020800
 8003c94:	40020c00 	.word	0x40020c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cbc:	e003      	b.n	8003cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cea:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f806 	bl	8003d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40013c00 	.word	0x40013c00

08003d04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e12b      	b.n	8003f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe fb04 	bl	8002350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d80:	f001 fea0 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8003d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4a81      	ldr	r2, [pc, #516]	; (8003f90 <HAL_I2C_Init+0x274>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d807      	bhi.n	8003da0 <HAL_I2C_Init+0x84>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a80      	ldr	r2, [pc, #512]	; (8003f94 <HAL_I2C_Init+0x278>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	bf94      	ite	ls
 8003d98:	2301      	movls	r3, #1
 8003d9a:	2300      	movhi	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e006      	b.n	8003dae <HAL_I2C_Init+0x92>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a7d      	ldr	r2, [pc, #500]	; (8003f98 <HAL_I2C_Init+0x27c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bf94      	ite	ls
 8003da8:	2301      	movls	r3, #1
 8003daa:	2300      	movhi	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0e7      	b.n	8003f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a78      	ldr	r2, [pc, #480]	; (8003f9c <HAL_I2C_Init+0x280>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0c9b      	lsrs	r3, r3, #18
 8003dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a6a      	ldr	r2, [pc, #424]	; (8003f90 <HAL_I2C_Init+0x274>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d802      	bhi.n	8003df0 <HAL_I2C_Init+0xd4>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3301      	adds	r3, #1
 8003dee:	e009      	b.n	8003e04 <HAL_I2C_Init+0xe8>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	4a69      	ldr	r2, [pc, #420]	; (8003fa0 <HAL_I2C_Init+0x284>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	3301      	adds	r3, #1
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	495c      	ldr	r1, [pc, #368]	; (8003f90 <HAL_I2C_Init+0x274>)
 8003e20:	428b      	cmp	r3, r1
 8003e22:	d819      	bhi.n	8003e58 <HAL_I2C_Init+0x13c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e59      	subs	r1, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e38:	400b      	ands	r3, r1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_I2C_Init+0x138>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1e59      	subs	r1, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e52:	e051      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003e54:	2304      	movs	r3, #4
 8003e56:	e04f      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d111      	bne.n	8003e84 <HAL_I2C_Init+0x168>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	440b      	add	r3, r1
 8003e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e012      	b.n	8003eaa <HAL_I2C_Init+0x18e>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	0099      	lsls	r1, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Init+0x196>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e022      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_I2C_Init+0x1bc>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e58      	subs	r0, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	440b      	add	r3, r1
 8003ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed6:	e00f      	b.n	8003ef8 <HAL_I2C_Init+0x1dc>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e58      	subs	r0, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	0099      	lsls	r1, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	6809      	ldr	r1, [r1, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6911      	ldr	r1, [r2, #16]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	4311      	orrs	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	000186a0 	.word	0x000186a0
 8003f94:	001e847f 	.word	0x001e847f
 8003f98:	003d08ff 	.word	0x003d08ff
 8003f9c:	431bde83 	.word	0x431bde83
 8003fa0:	10624dd3 	.word	0x10624dd3

08003fa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb8:	f7fe ff52 	bl	8002e60 <HAL_GetTick>
 8003fbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	f040 80e0 	bne.w	800418c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2319      	movs	r3, #25
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4970      	ldr	r1, [pc, #448]	; (8004198 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 ff66 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0d3      	b.n	800418e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2C_Master_Transmit+0x50>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e0cc      	b.n	800418e <HAL_I2C_Master_Transmit+0x1ea>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d007      	beq.n	800401a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	; 0x21
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2210      	movs	r2, #16
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	893a      	ldrh	r2, [r7, #8]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a50      	ldr	r2, [pc, #320]	; (800419c <HAL_I2C_Master_Transmit+0x1f8>)
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800405c:	8979      	ldrh	r1, [r7, #10]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fce8 	bl	8004a38 <I2C_MasterRequestWrite>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e08d      	b.n	800418e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004088:	e066      	b.n	8004158 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	6a39      	ldr	r1, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 ffe0 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d107      	bne.n	80040b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06b      	b.n	800418e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d11b      	bne.n	800412c <HAL_I2C_Master_Transmit+0x188>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	6a39      	ldr	r1, [r7, #32]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 ffd0 	bl	80050d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	2b04      	cmp	r3, #4
 8004142:	d107      	bne.n	8004154 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e01a      	b.n	800418e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d194      	bne.n	800408a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	00100002 	.word	0x00100002
 800419c:	ffff0000 	.word	0xffff0000

080041a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	; 0x30
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	460b      	mov	r3, r1
 80041ae:	817b      	strh	r3, [r7, #10]
 80041b0:	4613      	mov	r3, r2
 80041b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b4:	f7fe fe54 	bl	8002e60 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	f040 820b 	bne.w	80045de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2319      	movs	r3, #25
 80041ce:	2201      	movs	r2, #1
 80041d0:	497c      	ldr	r1, [pc, #496]	; (80043c4 <HAL_I2C_Master_Receive+0x224>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fe68 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	e1fe      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_I2C_Master_Receive+0x50>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e1f7      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d007      	beq.n	8004216 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2222      	movs	r2, #34	; 0x22
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2210      	movs	r2, #16
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	893a      	ldrh	r2, [r7, #8]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_I2C_Master_Receive+0x228>)
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004258:	8979      	ldrh	r1, [r7, #10]
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fc6c 	bl	8004b3c <I2C_MasterRequestRead>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1b8      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d113      	bne.n	800429e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e18c      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d11b      	bne.n	80042de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e16c      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d11b      	bne.n	800431e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	e14c      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800432c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004344:	e138      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	2b03      	cmp	r3, #3
 800434c:	f200 80f1 	bhi.w	8004532 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b01      	cmp	r3, #1
 8004356:	d123      	bne.n	80043a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fefb 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e139      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800439e:	e10b      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d14e      	bne.n	8004446 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	2200      	movs	r2, #0
 80043b0:	4906      	ldr	r1, [pc, #24]	; (80043cc <HAL_I2C_Master_Receive+0x22c>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fd78 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e10e      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
 80043c2:	bf00      	nop
 80043c4:	00100002 	.word	0x00100002
 80043c8:	ffff0000 	.word	0xffff0000
 80043cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004444:	e0b8      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	2200      	movs	r2, #0
 800444e:	4966      	ldr	r1, [pc, #408]	; (80045e8 <HAL_I2C_Master_Receive+0x448>)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fd29 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0bf      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	2200      	movs	r2, #0
 80044aa:	494f      	ldr	r1, [pc, #316]	; (80045e8 <HAL_I2C_Master_Receive+0x448>)
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fcfb 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e091      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004530:	e042      	b.n	80045b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fe0e 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e04c      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b04      	cmp	r3, #4
 8004584:	d118      	bne.n	80045b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f aec2 	bne.w	8004346 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	00010004 	.word	0x00010004

080045ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08c      	sub	sp, #48	; 0x30
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004606:	f7fe fc2b 	bl	8002e60 <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b20      	cmp	r3, #32
 8004616:	f040 8208 	bne.w	8004a2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2319      	movs	r3, #25
 8004620:	2201      	movs	r2, #1
 8004622:	497b      	ldr	r1, [pc, #492]	; (8004810 <HAL_I2C_Mem_Read+0x224>)
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fc3f 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
 8004632:	e1fb      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_I2C_Mem_Read+0x56>
 800463e:	2302      	movs	r3, #2
 8004640:	e1f4      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d007      	beq.n	8004668 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2222      	movs	r2, #34	; 0x22
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2240      	movs	r2, #64	; 0x40
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a5b      	ldr	r2, [pc, #364]	; (8004814 <HAL_I2C_Mem_Read+0x228>)
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046aa:	88f8      	ldrh	r0, [r7, #6]
 80046ac:	893a      	ldrh	r2, [r7, #8]
 80046ae:	8979      	ldrh	r1, [r7, #10]
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	4603      	mov	r3, r0
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fb0c 	bl	8004cd8 <I2C_RequestMemoryRead>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e1b0      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d113      	bne.n	80046fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d2:	2300      	movs	r3, #0
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e184      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d11b      	bne.n	800473a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e164      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	2b02      	cmp	r3, #2
 8004740:	d11b      	bne.n	800477a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004750:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004760:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	e144      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004790:	e138      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004796:	2b03      	cmp	r3, #3
 8004798:	f200 80f1 	bhi.w	800497e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d123      	bne.n	80047ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fcd5 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e139      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ea:	e10b      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d14e      	bne.n	8004892 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	2200      	movs	r2, #0
 80047fc:	4906      	ldr	r1, [pc, #24]	; (8004818 <HAL_I2C_Mem_Read+0x22c>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fb52 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e10e      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
 800480e:	bf00      	nop
 8004810:	00100002 	.word	0x00100002
 8004814:	ffff0000 	.word	0xffff0000
 8004818:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004890:	e0b8      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	2200      	movs	r2, #0
 800489a:	4966      	ldr	r1, [pc, #408]	; (8004a34 <HAL_I2C_Mem_Read+0x448>)
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fb03 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0bf      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2200      	movs	r2, #0
 80048f6:	494f      	ldr	r1, [pc, #316]	; (8004a34 <HAL_I2C_Mem_Read+0x448>)
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fad5 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e091      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800497c:	e042      	b.n	8004a04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fbe8 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e04c      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d118      	bne.n	8004a04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f47f aec2 	bne.w	8004792 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	00010004 	.word	0x00010004

08004a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	460b      	mov	r3, r1
 8004a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d006      	beq.n	8004a62 <I2C_MasterRequestWrite+0x2a>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d003      	beq.n	8004a62 <I2C_MasterRequestWrite+0x2a>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a60:	d108      	bne.n	8004a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e00b      	b.n	8004a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	2b12      	cmp	r3, #18
 8004a7a:	d107      	bne.n	8004a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fa05 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab2:	d103      	bne.n	8004abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e035      	b.n	8004b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac8:	d108      	bne.n	8004adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ad8:	611a      	str	r2, [r3, #16]
 8004ada:	e01b      	b.n	8004b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004adc:	897b      	ldrh	r3, [r7, #10]
 8004ade:	11db      	asrs	r3, r3, #7
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 0306 	and.w	r3, r3, #6
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f063 030f 	orn	r3, r3, #15
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	490e      	ldr	r1, [pc, #56]	; (8004b34 <I2C_MasterRequestWrite+0xfc>)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fa2b 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e010      	b.n	8004b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b0a:	897b      	ldrh	r3, [r7, #10]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4907      	ldr	r1, [pc, #28]	; (8004b38 <I2C_MasterRequestWrite+0x100>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa1b 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	00010008 	.word	0x00010008
 8004b38:	00010002 	.word	0x00010002

08004b3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d006      	beq.n	8004b76 <I2C_MasterRequestRead+0x3a>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d003      	beq.n	8004b76 <I2C_MasterRequestRead+0x3a>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b74:	d108      	bne.n	8004b88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e00b      	b.n	8004ba0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	2b11      	cmp	r3, #17
 8004b8e:	d107      	bne.n	8004ba0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f97b 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d103      	bne.n	8004bd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e079      	b.n	8004cc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bdc:	d108      	bne.n	8004bf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bde:	897b      	ldrh	r3, [r7, #10]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]
 8004bee:	e05f      	b.n	8004cb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bf0:	897b      	ldrh	r3, [r7, #10]
 8004bf2:	11db      	asrs	r3, r3, #7
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f003 0306 	and.w	r3, r3, #6
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f063 030f 	orn	r3, r3, #15
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	4930      	ldr	r1, [pc, #192]	; (8004cd0 <I2C_MasterRequestRead+0x194>)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f9a1 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e054      	b.n	8004cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4929      	ldr	r1, [pc, #164]	; (8004cd4 <I2C_MasterRequestRead+0x198>)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f991 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e044      	b.n	8004cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f919 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8a:	d103      	bne.n	8004c94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e017      	b.n	8004cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c98:	897b      	ldrh	r3, [r7, #10]
 8004c9a:	11db      	asrs	r3, r3, #7
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 0306 	and.w	r3, r3, #6
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f063 030e 	orn	r3, r3, #14
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4907      	ldr	r1, [pc, #28]	; (8004cd4 <I2C_MasterRequestRead+0x198>)
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f94d 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	00010008 	.word	0x00010008
 8004cd4:	00010002 	.word	0x00010002

08004cd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	817b      	strh	r3, [r7, #10]
 8004cea:	460b      	mov	r3, r1
 8004cec:	813b      	strh	r3, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f8c2 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d103      	bne.n	8004d42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0aa      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	4952      	ldr	r1, [pc, #328]	; (8004ea4 <I2C_RequestMemoryRead+0x1cc>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f8fa 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e097      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f964 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e076      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e021      	b.n	8004e04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc0:	893b      	ldrh	r3, [r7, #8]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f93e 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d107      	bne.n	8004df6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e050      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfa:	893b      	ldrh	r3, [r7, #8]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	6a39      	ldr	r1, [r7, #32]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f923 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d107      	bne.n	8004e2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e035      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f82b 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d103      	bne.n	8004e70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e013      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	4906      	ldr	r1, [pc, #24]	; (8004ea4 <I2C_RequestMemoryRead+0x1cc>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f863 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00010002 	.word	0x00010002

08004ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb8:	e025      	b.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d021      	beq.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fd ffcd 	bl	8002e60 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d116      	bne.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e023      	b.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10d      	bne.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	43da      	mvns	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	e00c      	b.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0b6      	beq.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f64:	e051      	b.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	d123      	bne.n	8004fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0204 	orr.w	r2, r3, #4
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e046      	b.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d021      	beq.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fd ff4b 	bl	8002e60 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e020      	b.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10c      	bne.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e00b      	b.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	43da      	mvns	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d18d      	bne.n	8004f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005060:	e02d      	b.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8ce 	bl	8005204 <I2C_IsAcknowledgeFailed>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e02d      	b.n	80050ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d021      	beq.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fd fef1 	bl	8002e60 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e007      	b.n	80050ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d1ca      	bne.n	8005062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e2:	e02d      	b.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f88d 	bl	8005204 <I2C_IsAcknowledgeFailed>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e02d      	b.n	8005150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fa:	d021      	beq.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fd feb0 	bl	8002e60 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f043 0220 	orr.w	r2, r3, #32
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e007      	b.n	8005150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d1ca      	bne.n	80050e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005164:	e042      	b.n	80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b10      	cmp	r3, #16
 8005172:	d119      	bne.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0210 	mvn.w	r2, #16
 800517c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e029      	b.n	80051fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a8:	f7fd fe5a 	bl	8002e60 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d302      	bcc.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e007      	b.n	80051fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d1b5      	bne.n	8005166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d11b      	bne.n	8005254 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005224:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f043 0204 	orr.w	r2, r3, #4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e267      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d075      	beq.n	800536e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005282:	4b88      	ldr	r3, [pc, #544]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b04      	cmp	r3, #4
 800528c:	d00c      	beq.n	80052a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800528e:	4b85      	ldr	r3, [pc, #532]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005296:	2b08      	cmp	r3, #8
 8005298:	d112      	bne.n	80052c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b82      	ldr	r3, [pc, #520]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a6:	d10b      	bne.n	80052c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a8:	4b7e      	ldr	r3, [pc, #504]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d05b      	beq.n	800536c <HAL_RCC_OscConfig+0x108>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d157      	bne.n	800536c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e242      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c8:	d106      	bne.n	80052d8 <HAL_RCC_OscConfig+0x74>
 80052ca:	4b76      	ldr	r3, [pc, #472]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a75      	ldr	r2, [pc, #468]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e01d      	b.n	8005314 <HAL_RCC_OscConfig+0xb0>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e0:	d10c      	bne.n	80052fc <HAL_RCC_OscConfig+0x98>
 80052e2:	4b70      	ldr	r3, [pc, #448]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a6f      	ldr	r2, [pc, #444]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b6d      	ldr	r3, [pc, #436]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6c      	ldr	r2, [pc, #432]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0xb0>
 80052fc:	4b69      	ldr	r3, [pc, #420]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a68      	ldr	r2, [pc, #416]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b66      	ldr	r3, [pc, #408]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a65      	ldr	r2, [pc, #404]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fd fda0 	bl	8002e60 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005324:	f7fd fd9c 	bl	8002e60 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e207      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	4b5b      	ldr	r3, [pc, #364]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0xc0>
 8005342:	e014      	b.n	800536e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fd fd8c 	bl	8002e60 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fd fd88 	bl	8002e60 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1f3      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	4b51      	ldr	r3, [pc, #324]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0xe8>
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d063      	beq.n	8005442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800537a:	4b4a      	ldr	r3, [pc, #296]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005386:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800538e:	2b08      	cmp	r3, #8
 8005390:	d11c      	bne.n	80053cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b44      	ldr	r3, [pc, #272]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d116      	bne.n	80053cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539e:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_RCC_OscConfig+0x152>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d001      	beq.n	80053b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e1c7      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4937      	ldr	r1, [pc, #220]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ca:	e03a      	b.n	8005442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d020      	beq.n	8005416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x244>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fd fd41 	bl	8002e60 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fd fd3d 	bl	8002e60 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e1a8      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005400:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4925      	ldr	r1, [pc, #148]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
 8005414:	e015      	b.n	8005442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <HAL_RCC_OscConfig+0x244>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fd fd20 	bl	8002e60 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005424:	f7fd fd1c 	bl	8002e60 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e187      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d036      	beq.n	80054bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <HAL_RCC_OscConfig+0x248>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fd fd00 	bl	8002e60 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005464:	f7fd fcfc 	bl	8002e60 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e167      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x200>
 8005482:	e01b      	b.n	80054bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_OscConfig+0x248>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548a:	f7fd fce9 	bl	8002e60 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005490:	e00e      	b.n	80054b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005492:	f7fd fce5 	bl	8002e60 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d907      	bls.n	80054b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e150      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
 80054a4:	40023800 	.word	0x40023800
 80054a8:	42470000 	.word	0x42470000
 80054ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b0:	4b88      	ldr	r3, [pc, #544]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ea      	bne.n	8005492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8097 	beq.w	80055f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ce:	4b81      	ldr	r3, [pc, #516]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	4b7d      	ldr	r3, [pc, #500]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	4a7c      	ldr	r2, [pc, #496]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ea:	4b7a      	ldr	r3, [pc, #488]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f6:	2301      	movs	r3, #1
 80054f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fa:	4b77      	ldr	r3, [pc, #476]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d118      	bne.n	8005538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005506:	4b74      	ldr	r3, [pc, #464]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a73      	ldr	r2, [pc, #460]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 800550c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005512:	f7fd fca5 	bl	8002e60 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551a:	f7fd fca1 	bl	8002e60 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e10c      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552c:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f0      	beq.n	800551a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x2ea>
 8005540:	4b64      	ldr	r3, [pc, #400]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	4a63      	ldr	r2, [pc, #396]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6713      	str	r3, [r2, #112]	; 0x70
 800554c:	e01c      	b.n	8005588 <HAL_RCC_OscConfig+0x324>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b05      	cmp	r3, #5
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x30c>
 8005556:	4b5f      	ldr	r3, [pc, #380]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	4a5e      	ldr	r2, [pc, #376]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 800555c:	f043 0304 	orr.w	r3, r3, #4
 8005560:	6713      	str	r3, [r2, #112]	; 0x70
 8005562:	4b5c      	ldr	r3, [pc, #368]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a5b      	ldr	r2, [pc, #364]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0x324>
 8005570:	4b58      	ldr	r3, [pc, #352]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	4a57      	ldr	r2, [pc, #348]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6713      	str	r3, [r2, #112]	; 0x70
 800557c:	4b55      	ldr	r3, [pc, #340]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a54      	ldr	r2, [pc, #336]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0304 	bic.w	r3, r3, #4
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fd fc66 	bl	8002e60 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005596:	e00a      	b.n	80055ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fd fc62 	bl	8002e60 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0cb      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ae:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0ee      	beq.n	8005598 <HAL_RCC_OscConfig+0x334>
 80055ba:	e014      	b.n	80055e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055bc:	f7fd fc50 	bl	8002e60 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c2:	e00a      	b.n	80055da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7fd fc4c 	bl	8002e60 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0b5      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055da:	4b3e      	ldr	r3, [pc, #248]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ee      	bne.n	80055c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ec:	4b39      	ldr	r3, [pc, #228]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a1 	beq.w	8005744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005602:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b08      	cmp	r3, #8
 800560c:	d05c      	beq.n	80056c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d141      	bne.n	800569a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCC_OscConfig+0x478>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fd fc20 	bl	8002e60 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005624:	f7fd fc1c 	bl	8002e60 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e087      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	3b01      	subs	r3, #1
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	491b      	ldr	r1, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x478>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005672:	f7fd fbf5 	bl	8002e60 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567a:	f7fd fbf1 	bl	8002e60 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e05c      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x416>
 8005698:	e054      	b.n	8005744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_RCC_OscConfig+0x478>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fd fbde 	bl	8002e60 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fd fbda 	bl	8002e60 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e045      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x444>
 80056c6:	e03d      	b.n	8005744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e038      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
 80056d4:	40023800 	.word	0x40023800
 80056d8:	40007000 	.word	0x40007000
 80056dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e0:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <HAL_RCC_OscConfig+0x4ec>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d028      	beq.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d121      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d11a      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005710:	4013      	ands	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005718:	4293      	cmp	r3, r2
 800571a:	d111      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	3b01      	subs	r3, #1
 800572a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d107      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40023800 	.word	0x40023800

08005754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0cc      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b68      	ldr	r3, [pc, #416]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d90c      	bls.n	8005790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b65      	ldr	r3, [pc, #404]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b63      	ldr	r3, [pc, #396]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0b8      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b59      	ldr	r3, [pc, #356]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a58      	ldr	r2, [pc, #352]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c0:	4b53      	ldr	r3, [pc, #332]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	4a52      	ldr	r2, [pc, #328]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057cc:	4b50      	ldr	r3, [pc, #320]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	494d      	ldr	r1, [pc, #308]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d044      	beq.n	8005874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d119      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d003      	beq.n	8005812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	2b03      	cmp	r3, #3
 8005810:	d107      	bne.n	8005822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005812:	4b3f      	ldr	r3, [pc, #252]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005822:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e067      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005832:	4b37      	ldr	r3, [pc, #220]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 0203 	bic.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4934      	ldr	r1, [pc, #208]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005844:	f7fd fb0c 	bl	8002e60 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584a:	e00a      	b.n	8005862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fd fb08 	bl	8002e60 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e04f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 020c 	and.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	429a      	cmp	r2, r3
 8005872:	d1eb      	bne.n	800584c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d20c      	bcs.n	800589c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e032      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4916      	ldr	r1, [pc, #88]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	490e      	ldr	r1, [pc, #56]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058da:	f000 f821 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	490a      	ldr	r1, [pc, #40]	; (8005914 <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	5ccb      	ldrb	r3, [r1, r3]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <HAL_RCC_ClockConfig+0x1c4>)
 80058f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fa6c 	bl	8002dd8 <HAL_InitTick>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40023c00 	.word	0x40023c00
 8005910:	40023800 	.word	0x40023800
 8005914:	0800b264 	.word	0x0800b264
 8005918:	20000010 	.word	0x20000010
 800591c:	20000014 	.word	0x20000014

08005920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005924:	b090      	sub	sp, #64	; 0x40
 8005926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	2300      	movs	r3, #0
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005930:	2300      	movs	r3, #0
 8005932:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005938:	4b59      	ldr	r3, [pc, #356]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b08      	cmp	r3, #8
 8005942:	d00d      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x40>
 8005944:	2b08      	cmp	r3, #8
 8005946:	f200 80a1 	bhi.w	8005a8c <HAL_RCC_GetSysClockFreq+0x16c>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x34>
 800594e:	2b04      	cmp	r3, #4
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x3a>
 8005952:	e09b      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005954:	4b53      	ldr	r3, [pc, #332]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005956:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005958:	e09b      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800595a:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800595c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800595e:	e098      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005960:	4b4f      	ldr	r3, [pc, #316]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596a:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d028      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	2200      	movs	r2, #0
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	627a      	str	r2, [r7, #36]	; 0x24
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005988:	2100      	movs	r1, #0
 800598a:	4b47      	ldr	r3, [pc, #284]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800598c:	fb03 f201 	mul.w	r2, r3, r1
 8005990:	2300      	movs	r3, #0
 8005992:	fb00 f303 	mul.w	r3, r0, r3
 8005996:	4413      	add	r3, r2
 8005998:	4a43      	ldr	r2, [pc, #268]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800599a:	fba0 1202 	umull	r1, r2, r0, r2
 800599e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a0:	460a      	mov	r2, r1
 80059a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80059a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a6:	4413      	add	r3, r2
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	2200      	movs	r2, #0
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	61fa      	str	r2, [r7, #28]
 80059b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059ba:	f7fb f96d 	bl	8000c98 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4613      	mov	r3, r2
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c6:	e053      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c8:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	099b      	lsrs	r3, r3, #6
 80059ce:	2200      	movs	r2, #0
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	617a      	str	r2, [r7, #20]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80059da:	f04f 0b00 	mov.w	fp, #0
 80059de:	4652      	mov	r2, sl
 80059e0:	465b      	mov	r3, fp
 80059e2:	f04f 0000 	mov.w	r0, #0
 80059e6:	f04f 0100 	mov.w	r1, #0
 80059ea:	0159      	lsls	r1, r3, #5
 80059ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f0:	0150      	lsls	r0, r2, #5
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	ebb2 080a 	subs.w	r8, r2, sl
 80059fa:	eb63 090b 	sbc.w	r9, r3, fp
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005a0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005a0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005a12:	ebb2 0408 	subs.w	r4, r2, r8
 8005a16:	eb63 0509 	sbc.w	r5, r3, r9
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	00eb      	lsls	r3, r5, #3
 8005a24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a28:	00e2      	lsls	r2, r4, #3
 8005a2a:	4614      	mov	r4, r2
 8005a2c:	461d      	mov	r5, r3
 8005a2e:	eb14 030a 	adds.w	r3, r4, sl
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	eb45 030b 	adc.w	r3, r5, fp
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a46:	4629      	mov	r1, r5
 8005a48:	028b      	lsls	r3, r1, #10
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a50:	4621      	mov	r1, r4
 8005a52:	028a      	lsls	r2, r1, #10
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	60fa      	str	r2, [r7, #12]
 8005a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a64:	f7fb f918 	bl	8000c98 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a8a:	e002      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3740      	adds	r7, #64	; 0x40
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	017d7840 	.word	0x017d7840

08005aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ac8:	f7ff fff0 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0a9b      	lsrs	r3, r3, #10
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	0800b274 	.word	0x0800b274

08005aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005af0:	f7ff ffdc 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0b5b      	lsrs	r3, r3, #13
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	0800b274 	.word	0x0800b274

08005b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e041      	b.n	8005baa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc fc9e 	bl	800247c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4619      	mov	r1, r3
 8005b52:	4610      	mov	r0, r2
 8005b54:	f000 fed2 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_TIM_PWM_Start+0x24>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	e022      	b.n	8005c1e <HAL_TIM_PWM_Start+0x6a>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d109      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x3e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	bf14      	ite	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	2300      	moveq	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e015      	b.n	8005c1e <HAL_TIM_PWM_Start+0x6a>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d109      	bne.n	8005c0c <HAL_TIM_PWM_Start+0x58>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	e008      	b.n	8005c1e <HAL_TIM_PWM_Start+0x6a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e068      	b.n	8005cf8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0x82>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c34:	e013      	b.n	8005c5e <HAL_TIM_PWM_Start+0xaa>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x92>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c44:	e00b      	b.n	8005c5e <HAL_TIM_PWM_Start+0xaa>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xa2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c54:	e003      	b.n	8005c5e <HAL_TIM_PWM_Start+0xaa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2201      	movs	r2, #1
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 f972 	bl	8006f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <HAL_TIM_PWM_Start+0x14c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <HAL_TIM_PWM_Start+0x14c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x10e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x10e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_TIM_PWM_Start+0x150>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x10e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_TIM_PWM_Start+0x154>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x10e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <HAL_TIM_PWM_Start+0x158>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIM_PWM_Start+0x10e>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <HAL_TIM_PWM_Start+0x15c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d111      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b06      	cmp	r3, #6
 8005cd2:	d010      	beq.n	8005cf6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	e007      	b.n	8005cf6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0201 	orr.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40014000 	.word	0x40014000

08005d14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f912 	bl	8006f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <HAL_TIM_PWM_Stop+0xc4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d117      	bne.n	8005d66 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <HAL_TIM_PWM_Stop+0x52>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	f240 4344 	movw	r3, #1092	; 0x444
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_PWM_Stop+0x52>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a1a      	ldr	r2, [r3, #32]
 8005d6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <HAL_TIM_PWM_Stop+0x82>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a1a      	ldr	r2, [r3, #32]
 8005d7c:	f240 4344 	movw	r3, #1092	; 0x444
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d107      	bne.n	8005d96 <HAL_TIM_PWM_Stop+0x82>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Stop+0x92>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	e013      	b.n	8005dce <HAL_TIM_PWM_Stop+0xba>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Stop+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db4:	e00b      	b.n	8005dce <HAL_TIM_PWM_Stop+0xba>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_PWM_Stop+0xb2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc4:	e003      	b.n	8005dce <HAL_TIM_PWM_Stop+0xba>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40010000 	.word	0x40010000

08005ddc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e041      	b.n	8005e72 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc fb5c 	bl	80024c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f000 fd6e 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_IC_Start_IT+0x1e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	e013      	b.n	8005ec2 <HAL_TIM_IC_Start_IT+0x46>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_IC_Start_IT+0x2e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	e00b      	b.n	8005ec2 <HAL_TIM_IC_Start_IT+0x46>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_IC_Start_IT+0x3e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e003      	b.n	8005ec2 <HAL_TIM_IC_Start_IT+0x46>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <HAL_TIM_IC_Start_IT+0x58>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e013      	b.n	8005efc <HAL_TIM_IC_Start_IT+0x80>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d104      	bne.n	8005ee4 <HAL_TIM_IC_Start_IT+0x68>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e00b      	b.n	8005efc <HAL_TIM_IC_Start_IT+0x80>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d104      	bne.n	8005ef4 <HAL_TIM_IC_Start_IT+0x78>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	e003      	b.n	8005efc <HAL_TIM_IC_Start_IT+0x80>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d102      	bne.n	8005f0a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f04:	7b7b      	ldrb	r3, [r7, #13]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d001      	beq.n	8005f0e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e0c2      	b.n	8006094 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_IC_Start_IT+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1c:	e013      	b.n	8005f46 <HAL_TIM_IC_Start_IT+0xca>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_IC_Start_IT+0xb2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2c:	e00b      	b.n	8005f46 <HAL_TIM_IC_Start_IT+0xca>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_IC_Start_IT+0xc2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f3c:	e003      	b.n	8005f46 <HAL_TIM_IC_Start_IT+0xca>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <HAL_TIM_IC_Start_IT+0xda>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f54:	e013      	b.n	8005f7e <HAL_TIM_IC_Start_IT+0x102>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d104      	bne.n	8005f66 <HAL_TIM_IC_Start_IT+0xea>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f64:	e00b      	b.n	8005f7e <HAL_TIM_IC_Start_IT+0x102>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_IC_Start_IT+0xfa>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f74:	e003      	b.n	8005f7e <HAL_TIM_IC_Start_IT+0x102>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d841      	bhi.n	8006008 <HAL_TIM_IC_Start_IT+0x18c>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <HAL_TIM_IC_Start_IT+0x110>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08006009 	.word	0x08006009
 8005f94:	08006009 	.word	0x08006009
 8005f98:	08006009 	.word	0x08006009
 8005f9c:	08005fd3 	.word	0x08005fd3
 8005fa0:	08006009 	.word	0x08006009
 8005fa4:	08006009 	.word	0x08006009
 8005fa8:	08006009 	.word	0x08006009
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08006009 	.word	0x08006009
 8005fb4:	08006009 	.word	0x08006009
 8005fb8:	08006009 	.word	0x08006009
 8005fbc:	08005ff7 	.word	0x08005ff7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0202 	orr.w	r2, r2, #2
 8005fce:	60da      	str	r2, [r3, #12]
      break;
 8005fd0:	e01d      	b.n	800600e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0204 	orr.w	r2, r2, #4
 8005fe0:	60da      	str	r2, [r3, #12]
      break;
 8005fe2:	e014      	b.n	800600e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0208 	orr.w	r2, r2, #8
 8005ff2:	60da      	str	r2, [r3, #12]
      break;
 8005ff4:	e00b      	b.n	800600e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0210 	orr.w	r2, r2, #16
 8006004:	60da      	str	r2, [r3, #12]
      break;
 8006006:	e002      	b.n	800600e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
      break;
 800600c:	bf00      	nop
  }

  if (status == HAL_OK)
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d13e      	bne.n	8006092 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2201      	movs	r2, #1
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 ff97 	bl	8006f50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1d      	ldr	r2, [pc, #116]	; (800609c <HAL_TIM_IC_Start_IT+0x220>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d018      	beq.n	800605e <HAL_TIM_IC_Start_IT+0x1e2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d013      	beq.n	800605e <HAL_TIM_IC_Start_IT+0x1e2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a19      	ldr	r2, [pc, #100]	; (80060a0 <HAL_TIM_IC_Start_IT+0x224>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00e      	beq.n	800605e <HAL_TIM_IC_Start_IT+0x1e2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <HAL_TIM_IC_Start_IT+0x228>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_TIM_IC_Start_IT+0x1e2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <HAL_TIM_IC_Start_IT+0x22c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_TIM_IC_Start_IT+0x1e2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a14      	ldr	r2, [pc, #80]	; (80060ac <HAL_TIM_IC_Start_IT+0x230>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d111      	bne.n	8006082 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b06      	cmp	r3, #6
 800606e:	d010      	beq.n	8006092 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006080:	e007      	b.n	8006092 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40014000 	.word	0x40014000

080060b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e097      	b.n	80061f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fc f989 	bl	80023f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f4:	f023 0307 	bic.w	r3, r3, #7
 80060f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 fbf9 	bl	80068fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4313      	orrs	r3, r2
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006150:	f023 030c 	bic.w	r3, r3, #12
 8006154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	4313      	orrs	r3, r2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	031b      	lsls	r3, r3, #12
 8006180:	4313      	orrs	r3, r2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	4313      	orrs	r3, r2
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006214:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006224:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d110      	bne.n	800624e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006232:	7b7b      	ldrb	r3, [r7, #13]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d001      	beq.n	800623c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e089      	b.n	8006350 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624c:	e031      	b.n	80062b2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d110      	bne.n	8006276 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d102      	bne.n	8006260 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800625a:	7b3b      	ldrb	r3, [r7, #12]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d001      	beq.n	8006264 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e075      	b.n	8006350 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006274:	e01d      	b.n	80062b2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d108      	bne.n	800628e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006282:	7b7b      	ldrb	r3, [r7, #13]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d102      	bne.n	800628e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006288:	7b3b      	ldrb	r3, [r7, #12]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d001      	beq.n	8006292 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e05e      	b.n	8006350 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d010      	beq.n	80062e0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80062be:	e01f      	b.n	8006300 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fe41 	bl	8006f50 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0202 	orr.w	r2, r2, #2
 80062dc:	60da      	str	r2, [r3, #12]
      break;
 80062de:	e02e      	b.n	800633e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2201      	movs	r2, #1
 80062e6:	2104      	movs	r1, #4
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fe31 	bl	8006f50 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0204 	orr.w	r2, r2, #4
 80062fc:	60da      	str	r2, [r3, #12]
      break;
 80062fe:	e01e      	b.n	800633e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fe21 	bl	8006f50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2201      	movs	r2, #1
 8006314:	2104      	movs	r1, #4
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fe1a 	bl	8006f50 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0202 	orr.w	r2, r2, #2
 800632a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0204 	orr.w	r2, r2, #4
 800633a:	60da      	str	r2, [r3, #12]
      break;
 800633c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b02      	cmp	r3, #2
 800636c:	d122      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b02      	cmp	r3, #2
 800637a:	d11b      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0202 	mvn.w	r2, #2
 8006384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fb fad4 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa8c 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fa93 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d122      	bne.n	8006408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0204 	mvn.w	r2, #4
 80063d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb faaa 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa62 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fa69 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b08      	cmp	r3, #8
 8006414:	d122      	bne.n	800645c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b08      	cmp	r3, #8
 8006422:	d11b      	bne.n	800645c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0208 	mvn.w	r2, #8
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2204      	movs	r2, #4
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fa80 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa38 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa3f 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b10      	cmp	r3, #16
 8006468:	d122      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b10      	cmp	r3, #16
 8006476:	d11b      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0210 	mvn.w	r2, #16
 8006480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2208      	movs	r2, #8
 8006486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fb fa56 	bl	8001948 <HAL_TIM_IC_CaptureCallback>
 800649c:	e005      	b.n	80064aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa0e 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa15 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0201 	mvn.w	r2, #1
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9e8 	bl	80068ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d10e      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d107      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fdc2 	bl	800708c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b40      	cmp	r3, #64	; 0x40
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f9da 	bl	80068e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0220 	mvn.w	r2, #32
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fd8c 	bl	8007078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006582:	2302      	movs	r3, #2
 8006584:	e088      	b.n	8006698 <HAL_TIM_IC_ConfigChannel+0x130>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11b      	bne.n	80065cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6819      	ldr	r1, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f000 fbb6 	bl	8006d14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699a      	ldr	r2, [r3, #24]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 020c 	bic.w	r2, r2, #12
 80065b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6999      	ldr	r1, [r3, #24]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	619a      	str	r2, [r3, #24]
 80065ca:	e060      	b.n	800668e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d11c      	bne.n	800660c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f000 fbff 	bl	8006de4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6999      	ldr	r1, [r3, #24]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	021a      	lsls	r2, r3, #8
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	619a      	str	r2, [r3, #24]
 800660a:	e040      	b.n	800668e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b08      	cmp	r3, #8
 8006610:	d11b      	bne.n	800664a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6819      	ldr	r1, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f000 fc1c 	bl	8006e5e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 020c 	bic.w	r2, r2, #12
 8006634:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69d9      	ldr	r1, [r3, #28]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	61da      	str	r2, [r3, #28]
 8006648:	e021      	b.n	800668e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d11c      	bne.n	800668a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6819      	ldr	r1, [r3, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f000 fc39 	bl	8006ed6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69da      	ldr	r2, [r3, #28]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006672:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69d9      	ldr	r1, [r3, #28]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	021a      	lsls	r2, r3, #8
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	61da      	str	r2, [r3, #28]
 8006688:	e001      	b.n	800668e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e0ae      	b.n	800681c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b0c      	cmp	r3, #12
 80066ca:	f200 809f 	bhi.w	800680c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006709 	.word	0x08006709
 80066d8:	0800680d 	.word	0x0800680d
 80066dc:	0800680d 	.word	0x0800680d
 80066e0:	0800680d 	.word	0x0800680d
 80066e4:	08006749 	.word	0x08006749
 80066e8:	0800680d 	.word	0x0800680d
 80066ec:	0800680d 	.word	0x0800680d
 80066f0:	0800680d 	.word	0x0800680d
 80066f4:	0800678b 	.word	0x0800678b
 80066f8:	0800680d 	.word	0x0800680d
 80066fc:	0800680d 	.word	0x0800680d
 8006700:	0800680d 	.word	0x0800680d
 8006704:	080067cb 	.word	0x080067cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f974 	bl	80069fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0208 	orr.w	r2, r2, #8
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0204 	bic.w	r2, r2, #4
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	619a      	str	r2, [r3, #24]
      break;
 8006746:	e064      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f9ba 	bl	8006ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6999      	ldr	r1, [r3, #24]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	619a      	str	r2, [r3, #24]
      break;
 8006788:	e043      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fa05 	bl	8006ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0208 	orr.w	r2, r2, #8
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0204 	bic.w	r2, r2, #4
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	61da      	str	r2, [r3, #28]
      break;
 80067c8:	e023      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fa4f 	bl	8006c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69d9      	ldr	r1, [r3, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	021a      	lsls	r2, r3, #8
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	61da      	str	r2, [r3, #28]
      break;
 800680a:	e002      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
      break;
 8006810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b0c      	cmp	r3, #12
 8006836:	d831      	bhi.n	800689c <HAL_TIM_ReadCapturedValue+0x78>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <HAL_TIM_ReadCapturedValue+0x1c>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006875 	.word	0x08006875
 8006844:	0800689d 	.word	0x0800689d
 8006848:	0800689d 	.word	0x0800689d
 800684c:	0800689d 	.word	0x0800689d
 8006850:	0800687f 	.word	0x0800687f
 8006854:	0800689d 	.word	0x0800689d
 8006858:	0800689d 	.word	0x0800689d
 800685c:	0800689d 	.word	0x0800689d
 8006860:	08006889 	.word	0x08006889
 8006864:	0800689d 	.word	0x0800689d
 8006868:	0800689d 	.word	0x0800689d
 800686c:	0800689d 	.word	0x0800689d
 8006870:	08006893 	.word	0x08006893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	60fb      	str	r3, [r7, #12]

      break;
 800687c:	e00f      	b.n	800689e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	60fb      	str	r3, [r7, #12]

      break;
 8006886:	e00a      	b.n	800689e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688e:	60fb      	str	r3, [r7, #12]

      break;
 8006890:	e005      	b.n	800689e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	60fb      	str	r3, [r7, #12]

      break;
 800689a:	e000      	b.n	800689e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800689c:	bf00      	nop
  }

  return tmpreg;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a34      	ldr	r2, [pc, #208]	; (80069e0 <TIM_Base_SetConfig+0xe4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00f      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d00b      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a31      	ldr	r2, [pc, #196]	; (80069e4 <TIM_Base_SetConfig+0xe8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a30      	ldr	r2, [pc, #192]	; (80069e8 <TIM_Base_SetConfig+0xec>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <TIM_Base_SetConfig+0xf0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d108      	bne.n	8006946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <TIM_Base_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <TIM_Base_SetConfig+0xe8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <TIM_Base_SetConfig+0xec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a20      	ldr	r2, [pc, #128]	; (80069ec <TIM_Base_SetConfig+0xf0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <TIM_Base_SetConfig+0xf4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <TIM_Base_SetConfig+0xf8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <TIM_Base_SetConfig+0xfc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <TIM_Base_SetConfig+0xe4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 0302 	bic.w	r3, r3, #2
 8006a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <TIM_OC1_SetConfig+0xc8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d10c      	bne.n	8006a72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0308 	bic.w	r3, r3, #8
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <TIM_OC1_SetConfig+0xc8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d111      	bne.n	8006a9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40010000 	.word	0x40010000

08006ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0210 	bic.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0320 	bic.w	r3, r3, #32
 8006b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <TIM_OC2_SetConfig+0xd4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10d      	bne.n	8006b44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <TIM_OC2_SetConfig+0xd4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40010000 	.word	0x40010000

08006ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <TIM_OC3_SetConfig+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d10d      	bne.n	8006c1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <TIM_OC3_SetConfig+0xd0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d113      	bne.n	8006c4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40010000 	.word	0x40010000

08006c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	031b      	lsls	r3, r3, #12
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <TIM_OC4_SetConfig+0x9c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d109      	bne.n	8006ce8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	019b      	lsls	r3, r3, #6
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40010000 	.word	0x40010000

08006d14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0201 	bic.w	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <TIM_TI1_SetConfig+0xbc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <TIM_TI1_SetConfig+0x56>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d00f      	beq.n	8006d6a <TIM_TI1_SetConfig+0x56>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <TIM_TI1_SetConfig+0xc0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_TI1_SetConfig+0x56>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a20      	ldr	r2, [pc, #128]	; (8006dd8 <TIM_TI1_SetConfig+0xc4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_TI1_SetConfig+0x56>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <TIM_TI1_SetConfig+0xc8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_TI1_SetConfig+0x56>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <TIM_TI1_SetConfig+0xcc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d101      	bne.n	8006d6e <TIM_TI1_SetConfig+0x5a>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <TIM_TI1_SetConfig+0x5c>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e003      	b.n	8006d8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f023 030a 	bic.w	r3, r3, #10
 8006da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 030a 	and.w	r3, r3, #10
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40010000 	.word	0x40010000
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	40014000 	.word	0x40014000

08006de4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 0210 	bic.w	r2, r3, #16
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	031b      	lsls	r3, r3, #12
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b087      	sub	sp, #28
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	031b      	lsls	r3, r3, #12
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	031b      	lsls	r3, r3, #12
 8006f2e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2201      	movs	r2, #1
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1a      	ldr	r2, [r3, #32]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1a      	ldr	r2, [r3, #32]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e050      	b.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1c      	ldr	r2, [pc, #112]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d013      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a15      	ldr	r2, [pc, #84]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a13      	ldr	r2, [pc, #76]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d10c      	bne.n	8007044 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4313      	orrs	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40014000 	.word	0x40014000

08007078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e03f      	b.n	8007132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb fa7c 	bl	80025c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2224      	movs	r2, #36	; 0x24
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fe1d 	bl	8007d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691a      	ldr	r2, [r3, #16]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695a      	ldr	r2, [r3, #20]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b08a      	sub	sp, #40	; 0x28
 800713e:	af02      	add	r7, sp, #8
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b20      	cmp	r3, #32
 8007158:	d17c      	bne.n	8007254 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_UART_Transmit+0x2c>
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e075      	b.n	8007256 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_UART_Transmit+0x3e>
 8007174:	2302      	movs	r3, #2
 8007176:	e06e      	b.n	8007256 <HAL_UART_Transmit+0x11c>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2221      	movs	r2, #33	; 0x21
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800718e:	f7fb fe67 	bl	8002e60 <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	88fa      	ldrh	r2, [r7, #6]
 800719e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a8:	d108      	bne.n	80071bc <HAL_UART_Transmit+0x82>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e003      	b.n	80071c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071cc:	e02a      	b.n	8007224 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 fb9b 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e036      	b.n	8007256 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	3302      	adds	r3, #2
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e007      	b.n	8007216 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1cf      	bne.n	80071ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2200      	movs	r2, #0
 8007236:	2140      	movs	r1, #64	; 0x40
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fb6b 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	e000      	b.n	8007256 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007254:	2302      	movs	r3, #2
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b08a      	sub	sp, #40	; 0x28
 8007262:	af02      	add	r7, sp, #8
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b20      	cmp	r3, #32
 800727c:	f040 808c 	bne.w	8007398 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_UART_Receive+0x2e>
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e084      	b.n	800739a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_UART_Receive+0x40>
 800729a:	2302      	movs	r3, #2
 800729c:	e07d      	b.n	800739a <HAL_UART_Receive+0x13c>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2222      	movs	r2, #34	; 0x22
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ba:	f7fb fdd1 	bl	8002e60 <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	88fa      	ldrh	r2, [r7, #6]
 80072ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d4:	d108      	bne.n	80072e8 <HAL_UART_Receive+0x8a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e003      	b.n	80072f0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80072f8:	e043      	b.n	8007382 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2200      	movs	r2, #0
 8007302:	2120      	movs	r1, #32
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fb05 	bl	8007914 <UART_WaitOnFlagUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e042      	b.n	800739a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10c      	bne.n	8007334 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	b29a      	uxth	r2, r3
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	3302      	adds	r3, #2
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	e01f      	b.n	8007374 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d007      	beq.n	800734e <HAL_UART_Receive+0xf0>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_UART_Receive+0xfe>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	b2da      	uxtb	r2, r3
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e008      	b.n	800736e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007368:	b2da      	uxtb	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1b6      	bne.n	80072fa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b0ba      	sub	sp, #232	; 0xe8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10f      	bne.n	800740a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <HAL_UART_IRQHandler+0x66>
 80073f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fbd3 	bl	8007bae <UART_Receive_IT>
      return;
 8007408:	e256      	b.n	80078b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800740a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 80de 	beq.w	80075d0 <HAL_UART_IRQHandler+0x22c>
 8007414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80d1 	beq.w	80075d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800742e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <HAL_UART_IRQHandler+0xae>
 800743a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <HAL_UART_IRQHandler+0xd2>
 800745e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f043 0202 	orr.w	r2, r3, #2
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <HAL_UART_IRQHandler+0xf6>
 8007482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f043 0204 	orr.w	r2, r3, #4
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d011      	beq.n	80074ca <HAL_UART_IRQHandler+0x126>
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	f043 0208 	orr.w	r2, r3, #8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 81ed 	beq.w	80078ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <HAL_UART_IRQHandler+0x14e>
 80074e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fb5e 	bl	8007bae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <HAL_UART_IRQHandler+0x17a>
 8007516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d04f      	beq.n	80075be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa66 	bl	80079f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d141      	bne.n	80075b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3314      	adds	r3, #20
 8007538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800754c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3314      	adds	r3, #20
 800755a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800755e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800756a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1d9      	bne.n	8007532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	d013      	beq.n	80075ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	4a7d      	ldr	r2, [pc, #500]	; (8007780 <HAL_UART_IRQHandler+0x3dc>)
 800758c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	4618      	mov	r0, r3
 8007594:	f7fc f92c 	bl	80037f0 <HAL_DMA_Abort_IT>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d016      	beq.n	80075cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ac:	e00e      	b.n	80075cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f99a 	bl	80078e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	e00a      	b.n	80075cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f996 	bl	80078e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	e006      	b.n	80075cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f992 	bl	80078e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075ca:	e170      	b.n	80078ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075cc:	bf00      	nop
    return;
 80075ce:	e16e      	b.n	80078ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	f040 814a 	bne.w	800786e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 8143 	beq.w	800786e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 813c 	beq.w	800786e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60bb      	str	r3, [r7, #8]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	f040 80b4 	bne.w	8007784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8140 	beq.w	80078b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800763a:	429a      	cmp	r2, r3
 800763c:	f080 8139 	bcs.w	80078b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007652:	f000 8088 	beq.w	8007766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800766c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800768e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800769a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1d9      	bne.n	8007656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3314      	adds	r3, #20
 80076a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e1      	bne.n	80076a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3314      	adds	r3, #20
 80076e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3314      	adds	r3, #20
 80076fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e3      	bne.n	80076de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007736:	f023 0310 	bic.w	r3, r3, #16
 800773a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007748:	65ba      	str	r2, [r7, #88]	; 0x58
 800774a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800774e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e3      	bne.n	8007724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	4618      	mov	r0, r3
 8007762:	f7fb ffd5 	bl	8003710 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800776e:	b29b      	uxth	r3, r3
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	b29b      	uxth	r3, r3
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f8c0 	bl	80078fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800777c:	e099      	b.n	80078b2 <HAL_UART_IRQHandler+0x50e>
 800777e:	bf00      	nop
 8007780:	08007ab7 	.word	0x08007ab7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800778c:	b29b      	uxth	r3, r3
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 808b 	beq.w	80078b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8086 	beq.w	80078b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077ce:	647a      	str	r2, [r7, #68]	; 0x44
 80077d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e3      	bne.n	80077aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3314      	adds	r3, #20
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	623b      	str	r3, [r7, #32]
   return(result);
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007806:	633a      	str	r2, [r7, #48]	; 0x30
 8007808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800780c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e3      	bne.n	80077e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	330c      	adds	r3, #12
 800782e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60fb      	str	r3, [r7, #12]
   return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800784c:	61fa      	str	r2, [r7, #28]
 800784e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	69b9      	ldr	r1, [r7, #24]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	617b      	str	r3, [r7, #20]
   return(result);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e3      	bne.n	8007828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f848 	bl	80078fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800786c:	e023      	b.n	80078b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_UART_IRQHandler+0x4ea>
 800787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f929 	bl	8007ade <UART_Transmit_IT>
    return;
 800788c:	e014      	b.n	80078b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00e      	beq.n	80078b8 <HAL_UART_IRQHandler+0x514>
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f969 	bl	8007b7e <UART_EndTransmit_IT>
    return;
 80078ac:	e004      	b.n	80078b8 <HAL_UART_IRQHandler+0x514>
    return;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <HAL_UART_IRQHandler+0x514>
      return;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <HAL_UART_IRQHandler+0x514>
      return;
 80078b6:	bf00      	nop
  }
}
 80078b8:	37e8      	adds	r7, #232	; 0xe8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop

080078c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b090      	sub	sp, #64	; 0x40
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007924:	e050      	b.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d04c      	beq.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800792e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <UART_WaitOnFlagUntilTimeout+0x30>
 8007934:	f7fb fa94 	bl	8002e60 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007940:	429a      	cmp	r2, r3
 8007942:	d241      	bcs.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	330c      	adds	r3, #12
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007964:	637a      	str	r2, [r7, #52]	; 0x34
 8007966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800796a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3314      	adds	r3, #20
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3314      	adds	r3, #20
 8007996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007998:	623a      	str	r2, [r7, #32]
 800799a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e00f      	b.n	80079e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4013      	ands	r3, r2
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d09f      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3740      	adds	r7, #64	; 0x40
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b095      	sub	sp, #84	; 0x54
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a18:	643a      	str	r2, [r7, #64]	; 0x40
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e5      	bne.n	80079f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3314      	adds	r3, #20
 8007a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d119      	bne.n	8007a9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 0310 	bic.w	r3, r3, #16
 8007a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a88:	61ba      	str	r2, [r7, #24]
 8007a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	613b      	str	r3, [r7, #16]
   return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e5      	bne.n	8007a68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007aaa:	bf00      	nop
 8007aac:	3754      	adds	r7, #84	; 0x54
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7ff ff09 	bl	80078e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b21      	cmp	r3, #33	; 0x21
 8007af0:	d13e      	bne.n	8007b70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	d114      	bne.n	8007b26 <UART_Transmit_IT+0x48>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d110      	bne.n	8007b26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	1c9a      	adds	r2, r3, #2
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	621a      	str	r2, [r3, #32]
 8007b24:	e008      	b.n	8007b38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	1c59      	adds	r1, r3, #1
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6211      	str	r1, [r2, #32]
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	4619      	mov	r1, r3
 8007b46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10f      	bne.n	8007b6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	e000      	b.n	8007b72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
  }
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fe8e 	bl	80078c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b08c      	sub	sp, #48	; 0x30
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b22      	cmp	r3, #34	; 0x22
 8007bc0:	f040 80ab 	bne.w	8007d1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bcc:	d117      	bne.n	8007bfe <UART_Receive_IT+0x50>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d113      	bne.n	8007bfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8007bfc:	e026      	b.n	8007c4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c10:	d007      	beq.n	8007c22 <UART_Receive_IT+0x74>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <UART_Receive_IT+0x82>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	e008      	b.n	8007c42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d15a      	bne.n	8007d16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0220 	bic.w	r2, r2, #32
 8007c6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0201 	bic.w	r2, r2, #1
 8007c8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d135      	bne.n	8007d0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	330c      	adds	r3, #12
 8007cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f023 0310 	bic.w	r3, r3, #16
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	330c      	adds	r3, #12
 8007cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc6:	623a      	str	r2, [r7, #32]
 8007cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	69f9      	ldr	r1, [r7, #28]
 8007ccc:	6a3a      	ldr	r2, [r7, #32]
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e5      	bne.n	8007ca6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d10a      	bne.n	8007cfe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ce8:	2300      	movs	r3, #0
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff fdf9 	bl	80078fc <HAL_UARTEx_RxEventCallback>
 8007d0a:	e002      	b.n	8007d12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fde1 	bl	80078d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e002      	b.n	8007d1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e000      	b.n	8007d1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
  }
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3730      	adds	r7, #48	; 0x30
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d28:	b0c0      	sub	sp, #256	; 0x100
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	68d9      	ldr	r1, [r3, #12]
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	ea40 0301 	orr.w	r3, r0, r1
 8007d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d7c:	f021 010c 	bic.w	r1, r1, #12
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9e:	6999      	ldr	r1, [r3, #24]
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	ea40 0301 	orr.w	r3, r0, r1
 8007daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b8f      	ldr	r3, [pc, #572]	; (8007ff0 <UART_SetConfig+0x2cc>)
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d005      	beq.n	8007dc4 <UART_SetConfig+0xa0>
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b8d      	ldr	r3, [pc, #564]	; (8007ff4 <UART_SetConfig+0x2d0>)
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d104      	bne.n	8007dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dc4:	f7fd fe92 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 8007dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007dcc:	e003      	b.n	8007dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fd fe79 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de0:	f040 810c 	bne.w	8007ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007df6:	4622      	mov	r2, r4
 8007df8:	462b      	mov	r3, r5
 8007dfa:	1891      	adds	r1, r2, r2
 8007dfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dfe:	415b      	adcs	r3, r3
 8007e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e06:	4621      	mov	r1, r4
 8007e08:	eb12 0801 	adds.w	r8, r2, r1
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	eb43 0901 	adc.w	r9, r3, r1
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e26:	4690      	mov	r8, r2
 8007e28:	4699      	mov	r9, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	eb18 0303 	adds.w	r3, r8, r3
 8007e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e34:	462b      	mov	r3, r5
 8007e36:	eb49 0303 	adc.w	r3, r9, r3
 8007e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e52:	460b      	mov	r3, r1
 8007e54:	18db      	adds	r3, r3, r3
 8007e56:	653b      	str	r3, [r7, #80]	; 0x50
 8007e58:	4613      	mov	r3, r2
 8007e5a:	eb42 0303 	adc.w	r3, r2, r3
 8007e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e68:	f7f8 ff16 	bl	8000c98 <__aeabi_uldivmod>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4b61      	ldr	r3, [pc, #388]	; (8007ff8 <UART_SetConfig+0x2d4>)
 8007e72:	fba3 2302 	umull	r2, r3, r3, r2
 8007e76:	095b      	lsrs	r3, r3, #5
 8007e78:	011c      	lsls	r4, r3, #4
 8007e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	1891      	adds	r1, r2, r2
 8007e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e94:	415b      	adcs	r3, r3
 8007e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ebc:	4692      	mov	sl, r2
 8007ebe:	469b      	mov	fp, r3
 8007ec0:	4643      	mov	r3, r8
 8007ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	18db      	adds	r3, r3, r3
 8007eec:	643b      	str	r3, [r7, #64]	; 0x40
 8007eee:	4613      	mov	r3, r2
 8007ef0:	eb42 0303 	adc.w	r3, r2, r3
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007efe:	f7f8 fecb 	bl	8000c98 <__aeabi_uldivmod>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4611      	mov	r1, r2
 8007f08:	4b3b      	ldr	r3, [pc, #236]	; (8007ff8 <UART_SetConfig+0x2d4>)
 8007f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	2264      	movs	r2, #100	; 0x64
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	1acb      	subs	r3, r1, r3
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f1e:	4b36      	ldr	r3, [pc, #216]	; (8007ff8 <UART_SetConfig+0x2d4>)
 8007f20:	fba3 2302 	umull	r2, r3, r3, r2
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f2c:	441c      	add	r4, r3
 8007f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	1891      	adds	r1, r2, r2
 8007f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f48:	415b      	adcs	r3, r3
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f50:	4641      	mov	r1, r8
 8007f52:	1851      	adds	r1, r2, r1
 8007f54:	6339      	str	r1, [r7, #48]	; 0x30
 8007f56:	4649      	mov	r1, r9
 8007f58:	414b      	adcs	r3, r1
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f68:	4659      	mov	r1, fp
 8007f6a:	00cb      	lsls	r3, r1, #3
 8007f6c:	4651      	mov	r1, sl
 8007f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f72:	4651      	mov	r1, sl
 8007f74:	00ca      	lsls	r2, r1, #3
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	4642      	mov	r2, r8
 8007f7e:	189b      	adds	r3, r3, r2
 8007f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f84:	464b      	mov	r3, r9
 8007f86:	460a      	mov	r2, r1
 8007f88:	eb42 0303 	adc.w	r3, r2, r3
 8007f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	18db      	adds	r3, r3, r3
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007faa:	4613      	mov	r3, r2
 8007fac:	eb42 0303 	adc.w	r3, r2, r3
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fba:	f7f8 fe6d 	bl	8000c98 <__aeabi_uldivmod>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <UART_SetConfig+0x2d4>)
 8007fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	2164      	movs	r1, #100	; 0x64
 8007fcc:	fb01 f303 	mul.w	r3, r1, r3
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	3332      	adds	r3, #50	; 0x32
 8007fd6:	4a08      	ldr	r2, [pc, #32]	; (8007ff8 <UART_SetConfig+0x2d4>)
 8007fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	f003 0207 	and.w	r2, r3, #7
 8007fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4422      	add	r2, r4
 8007fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fec:	e105      	b.n	80081fa <UART_SetConfig+0x4d6>
 8007fee:	bf00      	nop
 8007ff0:	40011000 	.word	0x40011000
 8007ff4:	40011400 	.word	0x40011400
 8007ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008000:	2200      	movs	r2, #0
 8008002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800800a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	1891      	adds	r1, r2, r2
 8008014:	6239      	str	r1, [r7, #32]
 8008016:	415b      	adcs	r3, r3
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
 800801a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800801e:	4641      	mov	r1, r8
 8008020:	1854      	adds	r4, r2, r1
 8008022:	4649      	mov	r1, r9
 8008024:	eb43 0501 	adc.w	r5, r3, r1
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	00eb      	lsls	r3, r5, #3
 8008032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008036:	00e2      	lsls	r2, r4, #3
 8008038:	4614      	mov	r4, r2
 800803a:	461d      	mov	r5, r3
 800803c:	4643      	mov	r3, r8
 800803e:	18e3      	adds	r3, r4, r3
 8008040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008044:	464b      	mov	r3, r9
 8008046:	eb45 0303 	adc.w	r3, r5, r3
 800804a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800805a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800806a:	4629      	mov	r1, r5
 800806c:	008b      	lsls	r3, r1, #2
 800806e:	4621      	mov	r1, r4
 8008070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008074:	4621      	mov	r1, r4
 8008076:	008a      	lsls	r2, r1, #2
 8008078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800807c:	f7f8 fe0c 	bl	8000c98 <__aeabi_uldivmod>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4b60      	ldr	r3, [pc, #384]	; (8008208 <UART_SetConfig+0x4e4>)
 8008086:	fba3 2302 	umull	r2, r3, r3, r2
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	011c      	lsls	r4, r3, #4
 800808e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008092:	2200      	movs	r2, #0
 8008094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800809c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080a0:	4642      	mov	r2, r8
 80080a2:	464b      	mov	r3, r9
 80080a4:	1891      	adds	r1, r2, r2
 80080a6:	61b9      	str	r1, [r7, #24]
 80080a8:	415b      	adcs	r3, r3
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080b0:	4641      	mov	r1, r8
 80080b2:	1851      	adds	r1, r2, r1
 80080b4:	6139      	str	r1, [r7, #16]
 80080b6:	4649      	mov	r1, r9
 80080b8:	414b      	adcs	r3, r1
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080c8:	4659      	mov	r1, fp
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	4651      	mov	r1, sl
 80080ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d2:	4651      	mov	r1, sl
 80080d4:	00ca      	lsls	r2, r1, #3
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	4603      	mov	r3, r0
 80080dc:	4642      	mov	r2, r8
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080e4:	464b      	mov	r3, r9
 80080e6:	460a      	mov	r2, r1
 80080e8:	eb42 0303 	adc.w	r3, r2, r3
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80080fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008108:	4649      	mov	r1, r9
 800810a:	008b      	lsls	r3, r1, #2
 800810c:	4641      	mov	r1, r8
 800810e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008112:	4641      	mov	r1, r8
 8008114:	008a      	lsls	r2, r1, #2
 8008116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800811a:	f7f8 fdbd 	bl	8000c98 <__aeabi_uldivmod>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4b39      	ldr	r3, [pc, #228]	; (8008208 <UART_SetConfig+0x4e4>)
 8008124:	fba3 1302 	umull	r1, r3, r3, r2
 8008128:	095b      	lsrs	r3, r3, #5
 800812a:	2164      	movs	r1, #100	; 0x64
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	3332      	adds	r3, #50	; 0x32
 8008136:	4a34      	ldr	r2, [pc, #208]	; (8008208 <UART_SetConfig+0x4e4>)
 8008138:	fba2 2303 	umull	r2, r3, r2, r3
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008142:	441c      	add	r4, r3
 8008144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008148:	2200      	movs	r2, #0
 800814a:	673b      	str	r3, [r7, #112]	; 0x70
 800814c:	677a      	str	r2, [r7, #116]	; 0x74
 800814e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008152:	4642      	mov	r2, r8
 8008154:	464b      	mov	r3, r9
 8008156:	1891      	adds	r1, r2, r2
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	415b      	adcs	r3, r3
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008162:	4641      	mov	r1, r8
 8008164:	1851      	adds	r1, r2, r1
 8008166:	6039      	str	r1, [r7, #0]
 8008168:	4649      	mov	r1, r9
 800816a:	414b      	adcs	r3, r1
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800817a:	4659      	mov	r1, fp
 800817c:	00cb      	lsls	r3, r1, #3
 800817e:	4651      	mov	r1, sl
 8008180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008184:	4651      	mov	r1, sl
 8008186:	00ca      	lsls	r2, r1, #3
 8008188:	4610      	mov	r0, r2
 800818a:	4619      	mov	r1, r3
 800818c:	4603      	mov	r3, r0
 800818e:	4642      	mov	r2, r8
 8008190:	189b      	adds	r3, r3, r2
 8008192:	66bb      	str	r3, [r7, #104]	; 0x68
 8008194:	464b      	mov	r3, r9
 8008196:	460a      	mov	r2, r1
 8008198:	eb42 0303 	adc.w	r3, r2, r3
 800819c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800819e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	663b      	str	r3, [r7, #96]	; 0x60
 80081a8:	667a      	str	r2, [r7, #100]	; 0x64
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	f04f 0300 	mov.w	r3, #0
 80081b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081b6:	4649      	mov	r1, r9
 80081b8:	008b      	lsls	r3, r1, #2
 80081ba:	4641      	mov	r1, r8
 80081bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081c0:	4641      	mov	r1, r8
 80081c2:	008a      	lsls	r2, r1, #2
 80081c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081c8:	f7f8 fd66 	bl	8000c98 <__aeabi_uldivmod>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <UART_SetConfig+0x4e4>)
 80081d2:	fba3 1302 	umull	r1, r3, r3, r2
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	2164      	movs	r1, #100	; 0x64
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	3332      	adds	r3, #50	; 0x32
 80081e4:	4a08      	ldr	r2, [pc, #32]	; (8008208 <UART_SetConfig+0x4e4>)
 80081e6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ea:	095b      	lsrs	r3, r3, #5
 80081ec:	f003 020f 	and.w	r2, r3, #15
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4422      	add	r2, r4
 80081f8:	609a      	str	r2, [r3, #8]
}
 80081fa:	bf00      	nop
 80081fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008200:	46bd      	mov	sp, r7
 8008202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008206:	bf00      	nop
 8008208:	51eb851f 	.word	0x51eb851f

0800820c <atoi>:
 800820c:	220a      	movs	r2, #10
 800820e:	2100      	movs	r1, #0
 8008210:	f000 bd3e 	b.w	8008c90 <strtol>

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	; (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	2000001c 	.word	0x2000001c

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4d0d      	ldr	r5, [pc, #52]	; (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	; (800825c <__libc_init_array+0x3c>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2600      	movs	r6, #0
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4d0b      	ldr	r5, [pc, #44]	; (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	; (8008264 <__libc_init_array+0x44>)
 8008234:	f002 ff90 	bl	800b158 <_init>
 8008238:	1b64      	subs	r4, r4, r5
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2600      	movs	r6, #0
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f855 3b04 	ldr.w	r3, [r5], #4
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	0800b66c 	.word	0x0800b66c
 800825c:	0800b66c 	.word	0x0800b66c
 8008260:	0800b66c 	.word	0x0800b66c
 8008264:	0800b670 	.word	0x0800b670

08008268 <memset>:
 8008268:	4402      	add	r2, r0
 800826a:	4603      	mov	r3, r0
 800826c:	4293      	cmp	r3, r2
 800826e:	d100      	bne.n	8008272 <memset+0xa>
 8008270:	4770      	bx	lr
 8008272:	f803 1b01 	strb.w	r1, [r3], #1
 8008276:	e7f9      	b.n	800826c <memset+0x4>

08008278 <__cvt>:
 8008278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	ec55 4b10 	vmov	r4, r5, d0
 8008280:	2d00      	cmp	r5, #0
 8008282:	460e      	mov	r6, r1
 8008284:	4619      	mov	r1, r3
 8008286:	462b      	mov	r3, r5
 8008288:	bfbb      	ittet	lt
 800828a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800828e:	461d      	movlt	r5, r3
 8008290:	2300      	movge	r3, #0
 8008292:	232d      	movlt	r3, #45	; 0x2d
 8008294:	700b      	strb	r3, [r1, #0]
 8008296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800829c:	4691      	mov	r9, r2
 800829e:	f023 0820 	bic.w	r8, r3, #32
 80082a2:	bfbc      	itt	lt
 80082a4:	4622      	movlt	r2, r4
 80082a6:	4614      	movlt	r4, r2
 80082a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082ac:	d005      	beq.n	80082ba <__cvt+0x42>
 80082ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082b2:	d100      	bne.n	80082b6 <__cvt+0x3e>
 80082b4:	3601      	adds	r6, #1
 80082b6:	2102      	movs	r1, #2
 80082b8:	e000      	b.n	80082bc <__cvt+0x44>
 80082ba:	2103      	movs	r1, #3
 80082bc:	ab03      	add	r3, sp, #12
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	ab02      	add	r3, sp, #8
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	ec45 4b10 	vmov	d0, r4, r5
 80082c8:	4653      	mov	r3, sl
 80082ca:	4632      	mov	r2, r6
 80082cc:	f000 fd78 	bl	8008dc0 <_dtoa_r>
 80082d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082d4:	4607      	mov	r7, r0
 80082d6:	d102      	bne.n	80082de <__cvt+0x66>
 80082d8:	f019 0f01 	tst.w	r9, #1
 80082dc:	d022      	beq.n	8008324 <__cvt+0xac>
 80082de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082e2:	eb07 0906 	add.w	r9, r7, r6
 80082e6:	d110      	bne.n	800830a <__cvt+0x92>
 80082e8:	783b      	ldrb	r3, [r7, #0]
 80082ea:	2b30      	cmp	r3, #48	; 0x30
 80082ec:	d10a      	bne.n	8008304 <__cvt+0x8c>
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80082fa:	b918      	cbnz	r0, 8008304 <__cvt+0x8c>
 80082fc:	f1c6 0601 	rsb	r6, r6, #1
 8008300:	f8ca 6000 	str.w	r6, [sl]
 8008304:	f8da 3000 	ldr.w	r3, [sl]
 8008308:	4499      	add	r9, r3
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008316:	b108      	cbz	r0, 800831c <__cvt+0xa4>
 8008318:	f8cd 900c 	str.w	r9, [sp, #12]
 800831c:	2230      	movs	r2, #48	; 0x30
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	454b      	cmp	r3, r9
 8008322:	d307      	bcc.n	8008334 <__cvt+0xbc>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008328:	1bdb      	subs	r3, r3, r7
 800832a:	4638      	mov	r0, r7
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	b004      	add	sp, #16
 8008330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008334:	1c59      	adds	r1, r3, #1
 8008336:	9103      	str	r1, [sp, #12]
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	e7f0      	b.n	800831e <__cvt+0xa6>

0800833c <__exponent>:
 800833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800833e:	4603      	mov	r3, r0
 8008340:	2900      	cmp	r1, #0
 8008342:	bfb8      	it	lt
 8008344:	4249      	neglt	r1, r1
 8008346:	f803 2b02 	strb.w	r2, [r3], #2
 800834a:	bfb4      	ite	lt
 800834c:	222d      	movlt	r2, #45	; 0x2d
 800834e:	222b      	movge	r2, #43	; 0x2b
 8008350:	2909      	cmp	r1, #9
 8008352:	7042      	strb	r2, [r0, #1]
 8008354:	dd2a      	ble.n	80083ac <__exponent+0x70>
 8008356:	f10d 0407 	add.w	r4, sp, #7
 800835a:	46a4      	mov	ip, r4
 800835c:	270a      	movs	r7, #10
 800835e:	46a6      	mov	lr, r4
 8008360:	460a      	mov	r2, r1
 8008362:	fb91 f6f7 	sdiv	r6, r1, r7
 8008366:	fb07 1516 	mls	r5, r7, r6, r1
 800836a:	3530      	adds	r5, #48	; 0x30
 800836c:	2a63      	cmp	r2, #99	; 0x63
 800836e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008376:	4631      	mov	r1, r6
 8008378:	dcf1      	bgt.n	800835e <__exponent+0x22>
 800837a:	3130      	adds	r1, #48	; 0x30
 800837c:	f1ae 0502 	sub.w	r5, lr, #2
 8008380:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008384:	1c44      	adds	r4, r0, #1
 8008386:	4629      	mov	r1, r5
 8008388:	4561      	cmp	r1, ip
 800838a:	d30a      	bcc.n	80083a2 <__exponent+0x66>
 800838c:	f10d 0209 	add.w	r2, sp, #9
 8008390:	eba2 020e 	sub.w	r2, r2, lr
 8008394:	4565      	cmp	r5, ip
 8008396:	bf88      	it	hi
 8008398:	2200      	movhi	r2, #0
 800839a:	4413      	add	r3, r2
 800839c:	1a18      	subs	r0, r3, r0
 800839e:	b003      	add	sp, #12
 80083a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083aa:	e7ed      	b.n	8008388 <__exponent+0x4c>
 80083ac:	2330      	movs	r3, #48	; 0x30
 80083ae:	3130      	adds	r1, #48	; 0x30
 80083b0:	7083      	strb	r3, [r0, #2]
 80083b2:	70c1      	strb	r1, [r0, #3]
 80083b4:	1d03      	adds	r3, r0, #4
 80083b6:	e7f1      	b.n	800839c <__exponent+0x60>

080083b8 <_printf_float>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	ed2d 8b02 	vpush	{d8}
 80083c0:	b08d      	sub	sp, #52	; 0x34
 80083c2:	460c      	mov	r4, r1
 80083c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083c8:	4616      	mov	r6, r2
 80083ca:	461f      	mov	r7, r3
 80083cc:	4605      	mov	r5, r0
 80083ce:	f001 fae5 	bl	800999c <_localeconv_r>
 80083d2:	f8d0 a000 	ldr.w	sl, [r0]
 80083d6:	4650      	mov	r0, sl
 80083d8:	f7f7 ff02 	bl	80001e0 <strlen>
 80083dc:	2300      	movs	r3, #0
 80083de:	930a      	str	r3, [sp, #40]	; 0x28
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	f8d8 3000 	ldr.w	r3, [r8]
 80083e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083ec:	3307      	adds	r3, #7
 80083ee:	f023 0307 	bic.w	r3, r3, #7
 80083f2:	f103 0208 	add.w	r2, r3, #8
 80083f6:	f8c8 2000 	str.w	r2, [r8]
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008410:	ee08 0a10 	vmov	s16, r0
 8008414:	4b9f      	ldr	r3, [pc, #636]	; (8008694 <_printf_float+0x2dc>)
 8008416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841a:	f04f 32ff 	mov.w	r2, #4294967295
 800841e:	f7f8 fb8d 	bl	8000b3c <__aeabi_dcmpun>
 8008422:	bb88      	cbnz	r0, 8008488 <_printf_float+0xd0>
 8008424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008428:	4b9a      	ldr	r3, [pc, #616]	; (8008694 <_printf_float+0x2dc>)
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	f7f8 fb67 	bl	8000b00 <__aeabi_dcmple>
 8008432:	bb48      	cbnz	r0, 8008488 <_printf_float+0xd0>
 8008434:	2200      	movs	r2, #0
 8008436:	2300      	movs	r3, #0
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f8 fb56 	bl	8000aec <__aeabi_dcmplt>
 8008440:	b110      	cbz	r0, 8008448 <_printf_float+0x90>
 8008442:	232d      	movs	r3, #45	; 0x2d
 8008444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008448:	4b93      	ldr	r3, [pc, #588]	; (8008698 <_printf_float+0x2e0>)
 800844a:	4894      	ldr	r0, [pc, #592]	; (800869c <_printf_float+0x2e4>)
 800844c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008450:	bf94      	ite	ls
 8008452:	4698      	movls	r8, r3
 8008454:	4680      	movhi	r8, r0
 8008456:	2303      	movs	r3, #3
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	9b05      	ldr	r3, [sp, #20]
 800845c:	f023 0204 	bic.w	r2, r3, #4
 8008460:	6022      	str	r2, [r4, #0]
 8008462:	f04f 0900 	mov.w	r9, #0
 8008466:	9700      	str	r7, [sp, #0]
 8008468:	4633      	mov	r3, r6
 800846a:	aa0b      	add	r2, sp, #44	; 0x2c
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f9d8 	bl	8008824 <_printf_common>
 8008474:	3001      	adds	r0, #1
 8008476:	f040 8090 	bne.w	800859a <_printf_float+0x1e2>
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	b00d      	add	sp, #52	; 0x34
 8008480:	ecbd 8b02 	vpop	{d8}
 8008484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	4640      	mov	r0, r8
 800848e:	4649      	mov	r1, r9
 8008490:	f7f8 fb54 	bl	8000b3c <__aeabi_dcmpun>
 8008494:	b140      	cbz	r0, 80084a8 <_printf_float+0xf0>
 8008496:	464b      	mov	r3, r9
 8008498:	2b00      	cmp	r3, #0
 800849a:	bfbc      	itt	lt
 800849c:	232d      	movlt	r3, #45	; 0x2d
 800849e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084a2:	487f      	ldr	r0, [pc, #508]	; (80086a0 <_printf_float+0x2e8>)
 80084a4:	4b7f      	ldr	r3, [pc, #508]	; (80086a4 <_printf_float+0x2ec>)
 80084a6:	e7d1      	b.n	800844c <_printf_float+0x94>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084ae:	9206      	str	r2, [sp, #24]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	d13f      	bne.n	8008534 <_printf_float+0x17c>
 80084b4:	2306      	movs	r3, #6
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	6861      	ldr	r1, [r4, #4]
 80084bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084c0:	2300      	movs	r3, #0
 80084c2:	9303      	str	r3, [sp, #12]
 80084c4:	ab0a      	add	r3, sp, #40	; 0x28
 80084c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084ca:	ab09      	add	r3, sp, #36	; 0x24
 80084cc:	ec49 8b10 	vmov	d0, r8, r9
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	6022      	str	r2, [r4, #0]
 80084d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084d8:	4628      	mov	r0, r5
 80084da:	f7ff fecd 	bl	8008278 <__cvt>
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e2:	2b47      	cmp	r3, #71	; 0x47
 80084e4:	4680      	mov	r8, r0
 80084e6:	d108      	bne.n	80084fa <_printf_float+0x142>
 80084e8:	1cc8      	adds	r0, r1, #3
 80084ea:	db02      	blt.n	80084f2 <_printf_float+0x13a>
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	4299      	cmp	r1, r3
 80084f0:	dd41      	ble.n	8008576 <_printf_float+0x1be>
 80084f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80084f6:	fa5f fb8b 	uxtb.w	fp, fp
 80084fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084fe:	d820      	bhi.n	8008542 <_printf_float+0x18a>
 8008500:	3901      	subs	r1, #1
 8008502:	465a      	mov	r2, fp
 8008504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008508:	9109      	str	r1, [sp, #36]	; 0x24
 800850a:	f7ff ff17 	bl	800833c <__exponent>
 800850e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008510:	1813      	adds	r3, r2, r0
 8008512:	2a01      	cmp	r2, #1
 8008514:	4681      	mov	r9, r0
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	dc02      	bgt.n	8008520 <_printf_float+0x168>
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	07d2      	lsls	r2, r2, #31
 800851e:	d501      	bpl.n	8008524 <_printf_float+0x16c>
 8008520:	3301      	adds	r3, #1
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008528:	2b00      	cmp	r3, #0
 800852a:	d09c      	beq.n	8008466 <_printf_float+0xae>
 800852c:	232d      	movs	r3, #45	; 0x2d
 800852e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008532:	e798      	b.n	8008466 <_printf_float+0xae>
 8008534:	9a06      	ldr	r2, [sp, #24]
 8008536:	2a47      	cmp	r2, #71	; 0x47
 8008538:	d1be      	bne.n	80084b8 <_printf_float+0x100>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1bc      	bne.n	80084b8 <_printf_float+0x100>
 800853e:	2301      	movs	r3, #1
 8008540:	e7b9      	b.n	80084b6 <_printf_float+0xfe>
 8008542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008546:	d118      	bne.n	800857a <_printf_float+0x1c2>
 8008548:	2900      	cmp	r1, #0
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	dd0b      	ble.n	8008566 <_printf_float+0x1ae>
 800854e:	6121      	str	r1, [r4, #16]
 8008550:	b913      	cbnz	r3, 8008558 <_printf_float+0x1a0>
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	07d0      	lsls	r0, r2, #31
 8008556:	d502      	bpl.n	800855e <_printf_float+0x1a6>
 8008558:	3301      	adds	r3, #1
 800855a:	440b      	add	r3, r1
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008560:	f04f 0900 	mov.w	r9, #0
 8008564:	e7de      	b.n	8008524 <_printf_float+0x16c>
 8008566:	b913      	cbnz	r3, 800856e <_printf_float+0x1b6>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	07d2      	lsls	r2, r2, #31
 800856c:	d501      	bpl.n	8008572 <_printf_float+0x1ba>
 800856e:	3302      	adds	r3, #2
 8008570:	e7f4      	b.n	800855c <_printf_float+0x1a4>
 8008572:	2301      	movs	r3, #1
 8008574:	e7f2      	b.n	800855c <_printf_float+0x1a4>
 8008576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857c:	4299      	cmp	r1, r3
 800857e:	db05      	blt.n	800858c <_printf_float+0x1d4>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	6121      	str	r1, [r4, #16]
 8008584:	07d8      	lsls	r0, r3, #31
 8008586:	d5ea      	bpl.n	800855e <_printf_float+0x1a6>
 8008588:	1c4b      	adds	r3, r1, #1
 800858a:	e7e7      	b.n	800855c <_printf_float+0x1a4>
 800858c:	2900      	cmp	r1, #0
 800858e:	bfd4      	ite	le
 8008590:	f1c1 0202 	rsble	r2, r1, #2
 8008594:	2201      	movgt	r2, #1
 8008596:	4413      	add	r3, r2
 8008598:	e7e0      	b.n	800855c <_printf_float+0x1a4>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	055a      	lsls	r2, r3, #21
 800859e:	d407      	bmi.n	80085b0 <_printf_float+0x1f8>
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	4642      	mov	r2, r8
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	d12c      	bne.n	8008608 <_printf_float+0x250>
 80085ae:	e764      	b.n	800847a <_printf_float+0xc2>
 80085b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085b4:	f240 80e0 	bls.w	8008778 <_printf_float+0x3c0>
 80085b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085bc:	2200      	movs	r2, #0
 80085be:	2300      	movs	r3, #0
 80085c0:	f7f8 fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d034      	beq.n	8008632 <_printf_float+0x27a>
 80085c8:	4a37      	ldr	r2, [pc, #220]	; (80086a8 <_printf_float+0x2f0>)
 80085ca:	2301      	movs	r3, #1
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f af51 	beq.w	800847a <_printf_float+0xc2>
 80085d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085dc:	429a      	cmp	r2, r3
 80085de:	db02      	blt.n	80085e6 <_printf_float+0x22e>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	07d8      	lsls	r0, r3, #31
 80085e4:	d510      	bpl.n	8008608 <_printf_float+0x250>
 80085e6:	ee18 3a10 	vmov	r3, s16
 80085ea:	4652      	mov	r2, sl
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f af41 	beq.w	800847a <_printf_float+0xc2>
 80085f8:	f04f 0800 	mov.w	r8, #0
 80085fc:	f104 091a 	add.w	r9, r4, #26
 8008600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	4543      	cmp	r3, r8
 8008606:	dc09      	bgt.n	800861c <_printf_float+0x264>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	079b      	lsls	r3, r3, #30
 800860c:	f100 8105 	bmi.w	800881a <_printf_float+0x462>
 8008610:	68e0      	ldr	r0, [r4, #12]
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	4298      	cmp	r0, r3
 8008616:	bfb8      	it	lt
 8008618:	4618      	movlt	r0, r3
 800861a:	e730      	b.n	800847e <_printf_float+0xc6>
 800861c:	2301      	movs	r3, #1
 800861e:	464a      	mov	r2, r9
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f af27 	beq.w	800847a <_printf_float+0xc2>
 800862c:	f108 0801 	add.w	r8, r8, #1
 8008630:	e7e6      	b.n	8008600 <_printf_float+0x248>
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	dc39      	bgt.n	80086ac <_printf_float+0x2f4>
 8008638:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <_printf_float+0x2f0>)
 800863a:	2301      	movs	r3, #1
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f af19 	beq.w	800847a <_printf_float+0xc2>
 8008648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800864c:	4313      	orrs	r3, r2
 800864e:	d102      	bne.n	8008656 <_printf_float+0x29e>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d5d8      	bpl.n	8008608 <_printf_float+0x250>
 8008656:	ee18 3a10 	vmov	r3, s16
 800865a:	4652      	mov	r2, sl
 800865c:	4631      	mov	r1, r6
 800865e:	4628      	mov	r0, r5
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	f43f af09 	beq.w	800847a <_printf_float+0xc2>
 8008668:	f04f 0900 	mov.w	r9, #0
 800866c:	f104 0a1a 	add.w	sl, r4, #26
 8008670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008672:	425b      	negs	r3, r3
 8008674:	454b      	cmp	r3, r9
 8008676:	dc01      	bgt.n	800867c <_printf_float+0x2c4>
 8008678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867a:	e792      	b.n	80085a2 <_printf_float+0x1ea>
 800867c:	2301      	movs	r3, #1
 800867e:	4652      	mov	r2, sl
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f aef7 	beq.w	800847a <_printf_float+0xc2>
 800868c:	f109 0901 	add.w	r9, r9, #1
 8008690:	e7ee      	b.n	8008670 <_printf_float+0x2b8>
 8008692:	bf00      	nop
 8008694:	7fefffff 	.word	0x7fefffff
 8008698:	0800b288 	.word	0x0800b288
 800869c:	0800b28c 	.word	0x0800b28c
 80086a0:	0800b294 	.word	0x0800b294
 80086a4:	0800b290 	.word	0x0800b290
 80086a8:	0800b298 	.word	0x0800b298
 80086ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086b0:	429a      	cmp	r2, r3
 80086b2:	bfa8      	it	ge
 80086b4:	461a      	movge	r2, r3
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	4691      	mov	r9, r2
 80086ba:	dc37      	bgt.n	800872c <_printf_float+0x374>
 80086bc:	f04f 0b00 	mov.w	fp, #0
 80086c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086c4:	f104 021a 	add.w	r2, r4, #26
 80086c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	eba3 0309 	sub.w	r3, r3, r9
 80086d0:	455b      	cmp	r3, fp
 80086d2:	dc33      	bgt.n	800873c <_printf_float+0x384>
 80086d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d8:	429a      	cmp	r2, r3
 80086da:	db3b      	blt.n	8008754 <_printf_float+0x39c>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	07da      	lsls	r2, r3, #31
 80086e0:	d438      	bmi.n	8008754 <_printf_float+0x39c>
 80086e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e4:	9a05      	ldr	r2, [sp, #20]
 80086e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086e8:	1a9a      	subs	r2, r3, r2
 80086ea:	eba3 0901 	sub.w	r9, r3, r1
 80086ee:	4591      	cmp	r9, r2
 80086f0:	bfa8      	it	ge
 80086f2:	4691      	movge	r9, r2
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	dc35      	bgt.n	8008766 <_printf_float+0x3ae>
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008702:	f104 0a1a 	add.w	sl, r4, #26
 8008706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	eba3 0309 	sub.w	r3, r3, r9
 8008710:	4543      	cmp	r3, r8
 8008712:	f77f af79 	ble.w	8008608 <_printf_float+0x250>
 8008716:	2301      	movs	r3, #1
 8008718:	4652      	mov	r2, sl
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	f43f aeaa 	beq.w	800847a <_printf_float+0xc2>
 8008726:	f108 0801 	add.w	r8, r8, #1
 800872a:	e7ec      	b.n	8008706 <_printf_float+0x34e>
 800872c:	4613      	mov	r3, r2
 800872e:	4631      	mov	r1, r6
 8008730:	4642      	mov	r2, r8
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	d1c0      	bne.n	80086bc <_printf_float+0x304>
 800873a:	e69e      	b.n	800847a <_printf_float+0xc2>
 800873c:	2301      	movs	r3, #1
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	9205      	str	r2, [sp, #20]
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f ae97 	beq.w	800847a <_printf_float+0xc2>
 800874c:	9a05      	ldr	r2, [sp, #20]
 800874e:	f10b 0b01 	add.w	fp, fp, #1
 8008752:	e7b9      	b.n	80086c8 <_printf_float+0x310>
 8008754:	ee18 3a10 	vmov	r3, s16
 8008758:	4652      	mov	r2, sl
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d1be      	bne.n	80086e2 <_printf_float+0x32a>
 8008764:	e689      	b.n	800847a <_printf_float+0xc2>
 8008766:	9a05      	ldr	r2, [sp, #20]
 8008768:	464b      	mov	r3, r9
 800876a:	4442      	add	r2, r8
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	d1c1      	bne.n	80086fa <_printf_float+0x342>
 8008776:	e680      	b.n	800847a <_printf_float+0xc2>
 8008778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800877a:	2a01      	cmp	r2, #1
 800877c:	dc01      	bgt.n	8008782 <_printf_float+0x3ca>
 800877e:	07db      	lsls	r3, r3, #31
 8008780:	d538      	bpl.n	80087f4 <_printf_float+0x43c>
 8008782:	2301      	movs	r3, #1
 8008784:	4642      	mov	r2, r8
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	f43f ae74 	beq.w	800847a <_printf_float+0xc2>
 8008792:	ee18 3a10 	vmov	r3, s16
 8008796:	4652      	mov	r2, sl
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f ae6b 	beq.w	800847a <_printf_float+0xc2>
 80087a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	f7f8 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80087b0:	b9d8      	cbnz	r0, 80087ea <_printf_float+0x432>
 80087b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b4:	f108 0201 	add.w	r2, r8, #1
 80087b8:	3b01      	subs	r3, #1
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	d10e      	bne.n	80087e2 <_printf_float+0x42a>
 80087c4:	e659      	b.n	800847a <_printf_float+0xc2>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4652      	mov	r2, sl
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae52 	beq.w	800847a <_printf_float+0xc2>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087dc:	3b01      	subs	r3, #1
 80087de:	4543      	cmp	r3, r8
 80087e0:	dcf1      	bgt.n	80087c6 <_printf_float+0x40e>
 80087e2:	464b      	mov	r3, r9
 80087e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087e8:	e6dc      	b.n	80085a4 <_printf_float+0x1ec>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 0a1a 	add.w	sl, r4, #26
 80087f2:	e7f2      	b.n	80087da <_printf_float+0x422>
 80087f4:	2301      	movs	r3, #1
 80087f6:	4642      	mov	r2, r8
 80087f8:	e7df      	b.n	80087ba <_printf_float+0x402>
 80087fa:	2301      	movs	r3, #1
 80087fc:	464a      	mov	r2, r9
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f ae38 	beq.w	800847a <_printf_float+0xc2>
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008812:	1a5b      	subs	r3, r3, r1
 8008814:	4543      	cmp	r3, r8
 8008816:	dcf0      	bgt.n	80087fa <_printf_float+0x442>
 8008818:	e6fa      	b.n	8008610 <_printf_float+0x258>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	f104 0919 	add.w	r9, r4, #25
 8008822:	e7f4      	b.n	800880e <_printf_float+0x456>

08008824 <_printf_common>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	4616      	mov	r6, r2
 800882a:	4699      	mov	r9, r3
 800882c:	688a      	ldr	r2, [r1, #8]
 800882e:	690b      	ldr	r3, [r1, #16]
 8008830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008834:	4293      	cmp	r3, r2
 8008836:	bfb8      	it	lt
 8008838:	4613      	movlt	r3, r2
 800883a:	6033      	str	r3, [r6, #0]
 800883c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008840:	4607      	mov	r7, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b10a      	cbz	r2, 800884a <_printf_common+0x26>
 8008846:	3301      	adds	r3, #1
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	0699      	lsls	r1, r3, #26
 800884e:	bf42      	ittt	mi
 8008850:	6833      	ldrmi	r3, [r6, #0]
 8008852:	3302      	addmi	r3, #2
 8008854:	6033      	strmi	r3, [r6, #0]
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	f015 0506 	ands.w	r5, r5, #6
 800885c:	d106      	bne.n	800886c <_printf_common+0x48>
 800885e:	f104 0a19 	add.w	sl, r4, #25
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	6832      	ldr	r2, [r6, #0]
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	42ab      	cmp	r3, r5
 800886a:	dc26      	bgt.n	80088ba <_printf_common+0x96>
 800886c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008870:	1e13      	subs	r3, r2, #0
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	bf18      	it	ne
 8008876:	2301      	movne	r3, #1
 8008878:	0692      	lsls	r2, r2, #26
 800887a:	d42b      	bmi.n	80088d4 <_printf_common+0xb0>
 800887c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008880:	4649      	mov	r1, r9
 8008882:	4638      	mov	r0, r7
 8008884:	47c0      	blx	r8
 8008886:	3001      	adds	r0, #1
 8008888:	d01e      	beq.n	80088c8 <_printf_common+0xa4>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	68e5      	ldr	r5, [r4, #12]
 800888e:	6832      	ldr	r2, [r6, #0]
 8008890:	f003 0306 	and.w	r3, r3, #6
 8008894:	2b04      	cmp	r3, #4
 8008896:	bf08      	it	eq
 8008898:	1aad      	subeq	r5, r5, r2
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	6922      	ldr	r2, [r4, #16]
 800889e:	bf0c      	ite	eq
 80088a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a4:	2500      	movne	r5, #0
 80088a6:	4293      	cmp	r3, r2
 80088a8:	bfc4      	itt	gt
 80088aa:	1a9b      	subgt	r3, r3, r2
 80088ac:	18ed      	addgt	r5, r5, r3
 80088ae:	2600      	movs	r6, #0
 80088b0:	341a      	adds	r4, #26
 80088b2:	42b5      	cmp	r5, r6
 80088b4:	d11a      	bne.n	80088ec <_printf_common+0xc8>
 80088b6:	2000      	movs	r0, #0
 80088b8:	e008      	b.n	80088cc <_printf_common+0xa8>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4649      	mov	r1, r9
 80088c0:	4638      	mov	r0, r7
 80088c2:	47c0      	blx	r8
 80088c4:	3001      	adds	r0, #1
 80088c6:	d103      	bne.n	80088d0 <_printf_common+0xac>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	3501      	adds	r5, #1
 80088d2:	e7c6      	b.n	8008862 <_printf_common+0x3e>
 80088d4:	18e1      	adds	r1, r4, r3
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	2030      	movs	r0, #48	; 0x30
 80088da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088de:	4422      	add	r2, r4
 80088e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e8:	3302      	adds	r3, #2
 80088ea:	e7c7      	b.n	800887c <_printf_common+0x58>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4622      	mov	r2, r4
 80088f0:	4649      	mov	r1, r9
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	3001      	adds	r0, #1
 80088f8:	d0e6      	beq.n	80088c8 <_printf_common+0xa4>
 80088fa:	3601      	adds	r6, #1
 80088fc:	e7d9      	b.n	80088b2 <_printf_common+0x8e>
	...

08008900 <_printf_i>:
 8008900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	7e0f      	ldrb	r7, [r1, #24]
 8008906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008908:	2f78      	cmp	r7, #120	; 0x78
 800890a:	4691      	mov	r9, r2
 800890c:	4680      	mov	r8, r0
 800890e:	460c      	mov	r4, r1
 8008910:	469a      	mov	sl, r3
 8008912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008916:	d807      	bhi.n	8008928 <_printf_i+0x28>
 8008918:	2f62      	cmp	r7, #98	; 0x62
 800891a:	d80a      	bhi.n	8008932 <_printf_i+0x32>
 800891c:	2f00      	cmp	r7, #0
 800891e:	f000 80d8 	beq.w	8008ad2 <_printf_i+0x1d2>
 8008922:	2f58      	cmp	r7, #88	; 0x58
 8008924:	f000 80a3 	beq.w	8008a6e <_printf_i+0x16e>
 8008928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800892c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008930:	e03a      	b.n	80089a8 <_printf_i+0xa8>
 8008932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008936:	2b15      	cmp	r3, #21
 8008938:	d8f6      	bhi.n	8008928 <_printf_i+0x28>
 800893a:	a101      	add	r1, pc, #4	; (adr r1, 8008940 <_printf_i+0x40>)
 800893c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008940:	08008999 	.word	0x08008999
 8008944:	080089ad 	.word	0x080089ad
 8008948:	08008929 	.word	0x08008929
 800894c:	08008929 	.word	0x08008929
 8008950:	08008929 	.word	0x08008929
 8008954:	08008929 	.word	0x08008929
 8008958:	080089ad 	.word	0x080089ad
 800895c:	08008929 	.word	0x08008929
 8008960:	08008929 	.word	0x08008929
 8008964:	08008929 	.word	0x08008929
 8008968:	08008929 	.word	0x08008929
 800896c:	08008ab9 	.word	0x08008ab9
 8008970:	080089dd 	.word	0x080089dd
 8008974:	08008a9b 	.word	0x08008a9b
 8008978:	08008929 	.word	0x08008929
 800897c:	08008929 	.word	0x08008929
 8008980:	08008adb 	.word	0x08008adb
 8008984:	08008929 	.word	0x08008929
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008929 	.word	0x08008929
 8008990:	08008929 	.word	0x08008929
 8008994:	08008aa3 	.word	0x08008aa3
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	602a      	str	r2, [r5, #0]
 80089a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0a3      	b.n	8008af4 <_printf_i+0x1f4>
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	6829      	ldr	r1, [r5, #0]
 80089b0:	0606      	lsls	r6, r0, #24
 80089b2:	f101 0304 	add.w	r3, r1, #4
 80089b6:	d50a      	bpl.n	80089ce <_printf_i+0xce>
 80089b8:	680e      	ldr	r6, [r1, #0]
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	2e00      	cmp	r6, #0
 80089be:	da03      	bge.n	80089c8 <_printf_i+0xc8>
 80089c0:	232d      	movs	r3, #45	; 0x2d
 80089c2:	4276      	negs	r6, r6
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	485e      	ldr	r0, [pc, #376]	; (8008b44 <_printf_i+0x244>)
 80089ca:	230a      	movs	r3, #10
 80089cc:	e019      	b.n	8008a02 <_printf_i+0x102>
 80089ce:	680e      	ldr	r6, [r1, #0]
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089d6:	bf18      	it	ne
 80089d8:	b236      	sxthne	r6, r6
 80089da:	e7ef      	b.n	80089bc <_printf_i+0xbc>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	1d19      	adds	r1, r3, #4
 80089e2:	6029      	str	r1, [r5, #0]
 80089e4:	0601      	lsls	r1, r0, #24
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0xec>
 80089e8:	681e      	ldr	r6, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0xf2>
 80089ec:	0646      	lsls	r6, r0, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0xe8>
 80089f0:	881e      	ldrh	r6, [r3, #0]
 80089f2:	4854      	ldr	r0, [pc, #336]	; (8008b44 <_printf_i+0x244>)
 80089f4:	2f6f      	cmp	r7, #111	; 0x6f
 80089f6:	bf0c      	ite	eq
 80089f8:	2308      	moveq	r3, #8
 80089fa:	230a      	movne	r3, #10
 80089fc:	2100      	movs	r1, #0
 80089fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a02:	6865      	ldr	r5, [r4, #4]
 8008a04:	60a5      	str	r5, [r4, #8]
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	bfa2      	ittt	ge
 8008a0a:	6821      	ldrge	r1, [r4, #0]
 8008a0c:	f021 0104 	bicge.w	r1, r1, #4
 8008a10:	6021      	strge	r1, [r4, #0]
 8008a12:	b90e      	cbnz	r6, 8008a18 <_printf_i+0x118>
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	d04d      	beq.n	8008ab4 <_printf_i+0x1b4>
 8008a18:	4615      	mov	r5, r2
 8008a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a22:	5dc7      	ldrb	r7, [r0, r7]
 8008a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a28:	4637      	mov	r7, r6
 8008a2a:	42bb      	cmp	r3, r7
 8008a2c:	460e      	mov	r6, r1
 8008a2e:	d9f4      	bls.n	8008a1a <_printf_i+0x11a>
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d10b      	bne.n	8008a4c <_printf_i+0x14c>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	07de      	lsls	r6, r3, #31
 8008a38:	d508      	bpl.n	8008a4c <_printf_i+0x14c>
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	bfde      	ittt	le
 8008a42:	2330      	movle	r3, #48	; 0x30
 8008a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a4c:	1b52      	subs	r2, r2, r5
 8008a4e:	6122      	str	r2, [r4, #16]
 8008a50:	f8cd a000 	str.w	sl, [sp]
 8008a54:	464b      	mov	r3, r9
 8008a56:	aa03      	add	r2, sp, #12
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7ff fee2 	bl	8008824 <_printf_common>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d14c      	bne.n	8008afe <_printf_i+0x1fe>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	b004      	add	sp, #16
 8008a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6e:	4835      	ldr	r0, [pc, #212]	; (8008b44 <_printf_i+0x244>)
 8008a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a74:	6829      	ldr	r1, [r5, #0]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a7c:	6029      	str	r1, [r5, #0]
 8008a7e:	061d      	lsls	r5, r3, #24
 8008a80:	d514      	bpl.n	8008aac <_printf_i+0x1ac>
 8008a82:	07df      	lsls	r7, r3, #31
 8008a84:	bf44      	itt	mi
 8008a86:	f043 0320 	orrmi.w	r3, r3, #32
 8008a8a:	6023      	strmi	r3, [r4, #0]
 8008a8c:	b91e      	cbnz	r6, 8008a96 <_printf_i+0x196>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f023 0320 	bic.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	2310      	movs	r3, #16
 8008a98:	e7b0      	b.n	80089fc <_printf_i+0xfc>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	2378      	movs	r3, #120	; 0x78
 8008aa4:	4828      	ldr	r0, [pc, #160]	; (8008b48 <_printf_i+0x248>)
 8008aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aaa:	e7e3      	b.n	8008a74 <_printf_i+0x174>
 8008aac:	0659      	lsls	r1, r3, #25
 8008aae:	bf48      	it	mi
 8008ab0:	b2b6      	uxthmi	r6, r6
 8008ab2:	e7e6      	b.n	8008a82 <_printf_i+0x182>
 8008ab4:	4615      	mov	r5, r2
 8008ab6:	e7bb      	b.n	8008a30 <_printf_i+0x130>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	6826      	ldr	r6, [r4, #0]
 8008abc:	6961      	ldr	r1, [r4, #20]
 8008abe:	1d18      	adds	r0, r3, #4
 8008ac0:	6028      	str	r0, [r5, #0]
 8008ac2:	0635      	lsls	r5, r6, #24
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	d501      	bpl.n	8008acc <_printf_i+0x1cc>
 8008ac8:	6019      	str	r1, [r3, #0]
 8008aca:	e002      	b.n	8008ad2 <_printf_i+0x1d2>
 8008acc:	0670      	lsls	r0, r6, #25
 8008ace:	d5fb      	bpl.n	8008ac8 <_printf_i+0x1c8>
 8008ad0:	8019      	strh	r1, [r3, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	4615      	mov	r5, r2
 8008ad8:	e7ba      	b.n	8008a50 <_printf_i+0x150>
 8008ada:	682b      	ldr	r3, [r5, #0]
 8008adc:	1d1a      	adds	r2, r3, #4
 8008ade:	602a      	str	r2, [r5, #0]
 8008ae0:	681d      	ldr	r5, [r3, #0]
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f7f7 fb82 	bl	80001f0 <memchr>
 8008aec:	b108      	cbz	r0, 8008af2 <_printf_i+0x1f2>
 8008aee:	1b40      	subs	r0, r0, r5
 8008af0:	6060      	str	r0, [r4, #4]
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	6123      	str	r3, [r4, #16]
 8008af6:	2300      	movs	r3, #0
 8008af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afc:	e7a8      	b.n	8008a50 <_printf_i+0x150>
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	462a      	mov	r2, r5
 8008b02:	4649      	mov	r1, r9
 8008b04:	4640      	mov	r0, r8
 8008b06:	47d0      	blx	sl
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d0ab      	beq.n	8008a64 <_printf_i+0x164>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	079b      	lsls	r3, r3, #30
 8008b10:	d413      	bmi.n	8008b3a <_printf_i+0x23a>
 8008b12:	68e0      	ldr	r0, [r4, #12]
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	4298      	cmp	r0, r3
 8008b18:	bfb8      	it	lt
 8008b1a:	4618      	movlt	r0, r3
 8008b1c:	e7a4      	b.n	8008a68 <_printf_i+0x168>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4632      	mov	r2, r6
 8008b22:	4649      	mov	r1, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	47d0      	blx	sl
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d09b      	beq.n	8008a64 <_printf_i+0x164>
 8008b2c:	3501      	adds	r5, #1
 8008b2e:	68e3      	ldr	r3, [r4, #12]
 8008b30:	9903      	ldr	r1, [sp, #12]
 8008b32:	1a5b      	subs	r3, r3, r1
 8008b34:	42ab      	cmp	r3, r5
 8008b36:	dcf2      	bgt.n	8008b1e <_printf_i+0x21e>
 8008b38:	e7eb      	b.n	8008b12 <_printf_i+0x212>
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	f104 0619 	add.w	r6, r4, #25
 8008b40:	e7f5      	b.n	8008b2e <_printf_i+0x22e>
 8008b42:	bf00      	nop
 8008b44:	0800b29a 	.word	0x0800b29a
 8008b48:	0800b2ab 	.word	0x0800b2ab

08008b4c <siprintf>:
 8008b4c:	b40e      	push	{r1, r2, r3}
 8008b4e:	b500      	push	{lr}
 8008b50:	b09c      	sub	sp, #112	; 0x70
 8008b52:	ab1d      	add	r3, sp, #116	; 0x74
 8008b54:	9002      	str	r0, [sp, #8]
 8008b56:	9006      	str	r0, [sp, #24]
 8008b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b5c:	4809      	ldr	r0, [pc, #36]	; (8008b84 <siprintf+0x38>)
 8008b5e:	9107      	str	r1, [sp, #28]
 8008b60:	9104      	str	r1, [sp, #16]
 8008b62:	4909      	ldr	r1, [pc, #36]	; (8008b88 <siprintf+0x3c>)
 8008b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b68:	9105      	str	r1, [sp, #20]
 8008b6a:	6800      	ldr	r0, [r0, #0]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	a902      	add	r1, sp, #8
 8008b70:	f001 fc04 	bl	800a37c <_svfiprintf_r>
 8008b74:	9b02      	ldr	r3, [sp, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	b01c      	add	sp, #112	; 0x70
 8008b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b80:	b003      	add	sp, #12
 8008b82:	4770      	bx	lr
 8008b84:	2000001c 	.word	0x2000001c
 8008b88:	ffff0208 	.word	0xffff0208

08008b8c <_strtol_l.constprop.0>:
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b92:	d001      	beq.n	8008b98 <_strtol_l.constprop.0+0xc>
 8008b94:	2b24      	cmp	r3, #36	; 0x24
 8008b96:	d906      	bls.n	8008ba6 <_strtol_l.constprop.0+0x1a>
 8008b98:	f7ff fb3c 	bl	8008214 <__errno>
 8008b9c:	2316      	movs	r3, #22
 8008b9e:	6003      	str	r3, [r0, #0]
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c8c <_strtol_l.constprop.0+0x100>
 8008baa:	460d      	mov	r5, r1
 8008bac:	462e      	mov	r6, r5
 8008bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bb6:	f017 0708 	ands.w	r7, r7, #8
 8008bba:	d1f7      	bne.n	8008bac <_strtol_l.constprop.0+0x20>
 8008bbc:	2c2d      	cmp	r4, #45	; 0x2d
 8008bbe:	d132      	bne.n	8008c26 <_strtol_l.constprop.0+0x9a>
 8008bc0:	782c      	ldrb	r4, [r5, #0]
 8008bc2:	2701      	movs	r7, #1
 8008bc4:	1cb5      	adds	r5, r6, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d05b      	beq.n	8008c82 <_strtol_l.constprop.0+0xf6>
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d109      	bne.n	8008be2 <_strtol_l.constprop.0+0x56>
 8008bce:	2c30      	cmp	r4, #48	; 0x30
 8008bd0:	d107      	bne.n	8008be2 <_strtol_l.constprop.0+0x56>
 8008bd2:	782c      	ldrb	r4, [r5, #0]
 8008bd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bd8:	2c58      	cmp	r4, #88	; 0x58
 8008bda:	d14d      	bne.n	8008c78 <_strtol_l.constprop.0+0xec>
 8008bdc:	786c      	ldrb	r4, [r5, #1]
 8008bde:	2310      	movs	r3, #16
 8008be0:	3502      	adds	r5, #2
 8008be2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bea:	f04f 0c00 	mov.w	ip, #0
 8008bee:	fbb8 f9f3 	udiv	r9, r8, r3
 8008bf2:	4666      	mov	r6, ip
 8008bf4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008bf8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008bfc:	f1be 0f09 	cmp.w	lr, #9
 8008c00:	d816      	bhi.n	8008c30 <_strtol_l.constprop.0+0xa4>
 8008c02:	4674      	mov	r4, lr
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	dd24      	ble.n	8008c52 <_strtol_l.constprop.0+0xc6>
 8008c08:	f1bc 0f00 	cmp.w	ip, #0
 8008c0c:	db1e      	blt.n	8008c4c <_strtol_l.constprop.0+0xc0>
 8008c0e:	45b1      	cmp	r9, r6
 8008c10:	d31c      	bcc.n	8008c4c <_strtol_l.constprop.0+0xc0>
 8008c12:	d101      	bne.n	8008c18 <_strtol_l.constprop.0+0x8c>
 8008c14:	45a2      	cmp	sl, r4
 8008c16:	db19      	blt.n	8008c4c <_strtol_l.constprop.0+0xc0>
 8008c18:	fb06 4603 	mla	r6, r6, r3, r4
 8008c1c:	f04f 0c01 	mov.w	ip, #1
 8008c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c24:	e7e8      	b.n	8008bf8 <_strtol_l.constprop.0+0x6c>
 8008c26:	2c2b      	cmp	r4, #43	; 0x2b
 8008c28:	bf04      	itt	eq
 8008c2a:	782c      	ldrbeq	r4, [r5, #0]
 8008c2c:	1cb5      	addeq	r5, r6, #2
 8008c2e:	e7ca      	b.n	8008bc6 <_strtol_l.constprop.0+0x3a>
 8008c30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c34:	f1be 0f19 	cmp.w	lr, #25
 8008c38:	d801      	bhi.n	8008c3e <_strtol_l.constprop.0+0xb2>
 8008c3a:	3c37      	subs	r4, #55	; 0x37
 8008c3c:	e7e2      	b.n	8008c04 <_strtol_l.constprop.0+0x78>
 8008c3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c42:	f1be 0f19 	cmp.w	lr, #25
 8008c46:	d804      	bhi.n	8008c52 <_strtol_l.constprop.0+0xc6>
 8008c48:	3c57      	subs	r4, #87	; 0x57
 8008c4a:	e7db      	b.n	8008c04 <_strtol_l.constprop.0+0x78>
 8008c4c:	f04f 3cff 	mov.w	ip, #4294967295
 8008c50:	e7e6      	b.n	8008c20 <_strtol_l.constprop.0+0x94>
 8008c52:	f1bc 0f00 	cmp.w	ip, #0
 8008c56:	da05      	bge.n	8008c64 <_strtol_l.constprop.0+0xd8>
 8008c58:	2322      	movs	r3, #34	; 0x22
 8008c5a:	6003      	str	r3, [r0, #0]
 8008c5c:	4646      	mov	r6, r8
 8008c5e:	b942      	cbnz	r2, 8008c72 <_strtol_l.constprop.0+0xe6>
 8008c60:	4630      	mov	r0, r6
 8008c62:	e79e      	b.n	8008ba2 <_strtol_l.constprop.0+0x16>
 8008c64:	b107      	cbz	r7, 8008c68 <_strtol_l.constprop.0+0xdc>
 8008c66:	4276      	negs	r6, r6
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d0f9      	beq.n	8008c60 <_strtol_l.constprop.0+0xd4>
 8008c6c:	f1bc 0f00 	cmp.w	ip, #0
 8008c70:	d000      	beq.n	8008c74 <_strtol_l.constprop.0+0xe8>
 8008c72:	1e69      	subs	r1, r5, #1
 8008c74:	6011      	str	r1, [r2, #0]
 8008c76:	e7f3      	b.n	8008c60 <_strtol_l.constprop.0+0xd4>
 8008c78:	2430      	movs	r4, #48	; 0x30
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1b1      	bne.n	8008be2 <_strtol_l.constprop.0+0x56>
 8008c7e:	2308      	movs	r3, #8
 8008c80:	e7af      	b.n	8008be2 <_strtol_l.constprop.0+0x56>
 8008c82:	2c30      	cmp	r4, #48	; 0x30
 8008c84:	d0a5      	beq.n	8008bd2 <_strtol_l.constprop.0+0x46>
 8008c86:	230a      	movs	r3, #10
 8008c88:	e7ab      	b.n	8008be2 <_strtol_l.constprop.0+0x56>
 8008c8a:	bf00      	nop
 8008c8c:	0800b2bd 	.word	0x0800b2bd

08008c90 <strtol>:
 8008c90:	4613      	mov	r3, r2
 8008c92:	460a      	mov	r2, r1
 8008c94:	4601      	mov	r1, r0
 8008c96:	4802      	ldr	r0, [pc, #8]	; (8008ca0 <strtol+0x10>)
 8008c98:	6800      	ldr	r0, [r0, #0]
 8008c9a:	f7ff bf77 	b.w	8008b8c <_strtol_l.constprop.0>
 8008c9e:	bf00      	nop
 8008ca0:	2000001c 	.word	0x2000001c

08008ca4 <quorem>:
 8008ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	6903      	ldr	r3, [r0, #16]
 8008caa:	690c      	ldr	r4, [r1, #16]
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	4607      	mov	r7, r0
 8008cb0:	f2c0 8081 	blt.w	8008db6 <quorem+0x112>
 8008cb4:	3c01      	subs	r4, #1
 8008cb6:	f101 0814 	add.w	r8, r1, #20
 8008cba:	f100 0514 	add.w	r5, r0, #20
 8008cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cdc:	d331      	bcc.n	8008d42 <quorem+0x9e>
 8008cde:	f04f 0e00 	mov.w	lr, #0
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	46ac      	mov	ip, r5
 8008ce6:	46f2      	mov	sl, lr
 8008ce8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cec:	b293      	uxth	r3, r2
 8008cee:	fb06 e303 	mla	r3, r6, r3, lr
 8008cf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ebaa 0303 	sub.w	r3, sl, r3
 8008cfc:	f8dc a000 	ldr.w	sl, [ip]
 8008d00:	0c12      	lsrs	r2, r2, #16
 8008d02:	fa13 f38a 	uxtah	r3, r3, sl
 8008d06:	fb06 e202 	mla	r2, r6, r2, lr
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	9b00      	ldr	r3, [sp, #0]
 8008d0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d12:	b292      	uxth	r2, r2
 8008d14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d20:	4581      	cmp	r9, r0
 8008d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d26:	f84c 3b04 	str.w	r3, [ip], #4
 8008d2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d2e:	d2db      	bcs.n	8008ce8 <quorem+0x44>
 8008d30:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d34:	b92b      	cbnz	r3, 8008d42 <quorem+0x9e>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	429d      	cmp	r5, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	d32e      	bcc.n	8008d9e <quorem+0xfa>
 8008d40:	613c      	str	r4, [r7, #16]
 8008d42:	4638      	mov	r0, r7
 8008d44:	f001 f8c6 	bl	8009ed4 <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	db24      	blt.n	8008d96 <quorem+0xf2>
 8008d4c:	3601      	adds	r6, #1
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f04f 0c00 	mov.w	ip, #0
 8008d54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d58:	f8d0 e000 	ldr.w	lr, [r0]
 8008d5c:	b293      	uxth	r3, r2
 8008d5e:	ebac 0303 	sub.w	r3, ip, r3
 8008d62:	0c12      	lsrs	r2, r2, #16
 8008d64:	fa13 f38e 	uxtah	r3, r3, lr
 8008d68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d76:	45c1      	cmp	r9, r8
 8008d78:	f840 3b04 	str.w	r3, [r0], #4
 8008d7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d80:	d2e8      	bcs.n	8008d54 <quorem+0xb0>
 8008d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d8a:	b922      	cbnz	r2, 8008d96 <quorem+0xf2>
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	429d      	cmp	r5, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	d30a      	bcc.n	8008daa <quorem+0x106>
 8008d94:	613c      	str	r4, [r7, #16]
 8008d96:	4630      	mov	r0, r6
 8008d98:	b003      	add	sp, #12
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	3b04      	subs	r3, #4
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	d1cc      	bne.n	8008d40 <quorem+0x9c>
 8008da6:	3c01      	subs	r4, #1
 8008da8:	e7c7      	b.n	8008d3a <quorem+0x96>
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	3b04      	subs	r3, #4
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	d1f0      	bne.n	8008d94 <quorem+0xf0>
 8008db2:	3c01      	subs	r4, #1
 8008db4:	e7eb      	b.n	8008d8e <quorem+0xea>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e7ee      	b.n	8008d98 <quorem+0xf4>
 8008dba:	0000      	movs	r0, r0
 8008dbc:	0000      	movs	r0, r0
	...

08008dc0 <_dtoa_r>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	ed2d 8b04 	vpush	{d8-d9}
 8008dc8:	ec57 6b10 	vmov	r6, r7, d0
 8008dcc:	b093      	sub	sp, #76	; 0x4c
 8008dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dd4:	9106      	str	r1, [sp, #24]
 8008dd6:	ee10 aa10 	vmov	sl, s0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dde:	930c      	str	r3, [sp, #48]	; 0x30
 8008de0:	46bb      	mov	fp, r7
 8008de2:	b975      	cbnz	r5, 8008e02 <_dtoa_r+0x42>
 8008de4:	2010      	movs	r0, #16
 8008de6:	f000 fddd 	bl	80099a4 <malloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	6260      	str	r0, [r4, #36]	; 0x24
 8008dee:	b920      	cbnz	r0, 8008dfa <_dtoa_r+0x3a>
 8008df0:	4ba7      	ldr	r3, [pc, #668]	; (8009090 <_dtoa_r+0x2d0>)
 8008df2:	21ea      	movs	r1, #234	; 0xea
 8008df4:	48a7      	ldr	r0, [pc, #668]	; (8009094 <_dtoa_r+0x2d4>)
 8008df6:	f001 fbd1 	bl	800a59c <__assert_func>
 8008dfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dfe:	6005      	str	r5, [r0, #0]
 8008e00:	60c5      	str	r5, [r0, #12]
 8008e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e04:	6819      	ldr	r1, [r3, #0]
 8008e06:	b151      	cbz	r1, 8008e1e <_dtoa_r+0x5e>
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	604a      	str	r2, [r1, #4]
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4093      	lsls	r3, r2
 8008e10:	608b      	str	r3, [r1, #8]
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fe1c 	bl	8009a50 <_Bfree>
 8008e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	1e3b      	subs	r3, r7, #0
 8008e20:	bfaa      	itet	ge
 8008e22:	2300      	movge	r3, #0
 8008e24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e28:	f8c8 3000 	strge.w	r3, [r8]
 8008e2c:	4b9a      	ldr	r3, [pc, #616]	; (8009098 <_dtoa_r+0x2d8>)
 8008e2e:	bfbc      	itt	lt
 8008e30:	2201      	movlt	r2, #1
 8008e32:	f8c8 2000 	strlt.w	r2, [r8]
 8008e36:	ea33 030b 	bics.w	r3, r3, fp
 8008e3a:	d11b      	bne.n	8008e74 <_dtoa_r+0xb4>
 8008e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e48:	4333      	orrs	r3, r6
 8008e4a:	f000 8592 	beq.w	8009972 <_dtoa_r+0xbb2>
 8008e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e50:	b963      	cbnz	r3, 8008e6c <_dtoa_r+0xac>
 8008e52:	4b92      	ldr	r3, [pc, #584]	; (800909c <_dtoa_r+0x2dc>)
 8008e54:	e022      	b.n	8008e9c <_dtoa_r+0xdc>
 8008e56:	4b92      	ldr	r3, [pc, #584]	; (80090a0 <_dtoa_r+0x2e0>)
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	9801      	ldr	r0, [sp, #4]
 8008e62:	b013      	add	sp, #76	; 0x4c
 8008e64:	ecbd 8b04 	vpop	{d8-d9}
 8008e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6c:	4b8b      	ldr	r3, [pc, #556]	; (800909c <_dtoa_r+0x2dc>)
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	3303      	adds	r3, #3
 8008e72:	e7f3      	b.n	8008e5c <_dtoa_r+0x9c>
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4650      	mov	r0, sl
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	f7f7 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e80:	ec4b ab19 	vmov	d9, sl, fp
 8008e84:	4680      	mov	r8, r0
 8008e86:	b158      	cbz	r0, 8008ea0 <_dtoa_r+0xe0>
 8008e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 856b 	beq.w	800996c <_dtoa_r+0xbac>
 8008e96:	4883      	ldr	r0, [pc, #524]	; (80090a4 <_dtoa_r+0x2e4>)
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	1e43      	subs	r3, r0, #1
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	e7df      	b.n	8008e60 <_dtoa_r+0xa0>
 8008ea0:	ec4b ab10 	vmov	d0, sl, fp
 8008ea4:	aa10      	add	r2, sp, #64	; 0x40
 8008ea6:	a911      	add	r1, sp, #68	; 0x44
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 f8b9 	bl	800a020 <__d2b>
 8008eae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008eb2:	ee08 0a10 	vmov	s16, r0
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	f000 8084 	beq.w	8008fc4 <_dtoa_r+0x204>
 8008ebc:	ee19 3a90 	vmov	r3, s19
 8008ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ec4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ec8:	4656      	mov	r6, sl
 8008eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ed2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ed6:	4b74      	ldr	r3, [pc, #464]	; (80090a8 <_dtoa_r+0x2e8>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	4639      	mov	r1, r7
 8008ede:	f7f7 f9db 	bl	8000298 <__aeabi_dsub>
 8008ee2:	a365      	add	r3, pc, #404	; (adr r3, 8009078 <_dtoa_r+0x2b8>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 fb8e 	bl	8000608 <__aeabi_dmul>
 8008eec:	a364      	add	r3, pc, #400	; (adr r3, 8009080 <_dtoa_r+0x2c0>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 f9d3 	bl	800029c <__adddf3>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	4628      	mov	r0, r5
 8008efa:	460f      	mov	r7, r1
 8008efc:	f7f7 fb1a 	bl	8000534 <__aeabi_i2d>
 8008f00:	a361      	add	r3, pc, #388	; (adr r3, 8009088 <_dtoa_r+0x2c8>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 fb7f 	bl	8000608 <__aeabi_dmul>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 f9c3 	bl	800029c <__adddf3>
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	f7f7 fe25 	bl	8000b68 <__aeabi_d2iz>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	9000      	str	r0, [sp, #0]
 8008f22:	2300      	movs	r3, #0
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fde0 	bl	8000aec <__aeabi_dcmplt>
 8008f2c:	b150      	cbz	r0, 8008f44 <_dtoa_r+0x184>
 8008f2e:	9800      	ldr	r0, [sp, #0]
 8008f30:	f7f7 fb00 	bl	8000534 <__aeabi_i2d>
 8008f34:	4632      	mov	r2, r6
 8008f36:	463b      	mov	r3, r7
 8008f38:	f7f7 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f3c:	b910      	cbnz	r0, 8008f44 <_dtoa_r+0x184>
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	9b00      	ldr	r3, [sp, #0]
 8008f46:	2b16      	cmp	r3, #22
 8008f48:	d85a      	bhi.n	8009000 <_dtoa_r+0x240>
 8008f4a:	9a00      	ldr	r2, [sp, #0]
 8008f4c:	4b57      	ldr	r3, [pc, #348]	; (80090ac <_dtoa_r+0x2ec>)
 8008f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	ec51 0b19 	vmov	r0, r1, d9
 8008f5a:	f7f7 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d050      	beq.n	8009004 <_dtoa_r+0x244>
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f6e:	1b5d      	subs	r5, r3, r5
 8008f70:	1e6b      	subs	r3, r5, #1
 8008f72:	9305      	str	r3, [sp, #20]
 8008f74:	bf45      	ittet	mi
 8008f76:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f7a:	9304      	strmi	r3, [sp, #16]
 8008f7c:	2300      	movpl	r3, #0
 8008f7e:	2300      	movmi	r3, #0
 8008f80:	bf4c      	ite	mi
 8008f82:	9305      	strmi	r3, [sp, #20]
 8008f84:	9304      	strpl	r3, [sp, #16]
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	db3d      	blt.n	8009008 <_dtoa_r+0x248>
 8008f8c:	9b05      	ldr	r3, [sp, #20]
 8008f8e:	9a00      	ldr	r2, [sp, #0]
 8008f90:	920a      	str	r2, [sp, #40]	; 0x28
 8008f92:	4413      	add	r3, r2
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	2300      	movs	r3, #0
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	2b09      	cmp	r3, #9
 8008f9e:	f200 8089 	bhi.w	80090b4 <_dtoa_r+0x2f4>
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	bfc4      	itt	gt
 8008fa6:	3b04      	subgt	r3, #4
 8008fa8:	9306      	strgt	r3, [sp, #24]
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	f1a3 0302 	sub.w	r3, r3, #2
 8008fb0:	bfcc      	ite	gt
 8008fb2:	2500      	movgt	r5, #0
 8008fb4:	2501      	movle	r5, #1
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	f200 8087 	bhi.w	80090ca <_dtoa_r+0x30a>
 8008fbc:	e8df f003 	tbb	[pc, r3]
 8008fc0:	59383a2d 	.word	0x59383a2d
 8008fc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fc8:	441d      	add	r5, r3
 8008fca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	bfc1      	itttt	gt
 8008fd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fda:	fa0b f303 	lslgt.w	r3, fp, r3
 8008fde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fe2:	bfda      	itte	le
 8008fe4:	f1c3 0320 	rsble	r3, r3, #32
 8008fe8:	fa06 f003 	lslle.w	r0, r6, r3
 8008fec:	4318      	orrgt	r0, r3
 8008fee:	f7f7 fa91 	bl	8000514 <__aeabi_ui2d>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ffa:	3d01      	subs	r5, #1
 8008ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ffe:	e76a      	b.n	8008ed6 <_dtoa_r+0x116>
 8009000:	2301      	movs	r3, #1
 8009002:	e7b2      	b.n	8008f6a <_dtoa_r+0x1aa>
 8009004:	900b      	str	r0, [sp, #44]	; 0x2c
 8009006:	e7b1      	b.n	8008f6c <_dtoa_r+0x1ac>
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	9a00      	ldr	r2, [sp, #0]
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	4253      	negs	r3, r2
 8009012:	9307      	str	r3, [sp, #28]
 8009014:	2300      	movs	r3, #0
 8009016:	930a      	str	r3, [sp, #40]	; 0x28
 8009018:	e7bf      	b.n	8008f9a <_dtoa_r+0x1da>
 800901a:	2300      	movs	r3, #0
 800901c:	9308      	str	r3, [sp, #32]
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc55      	bgt.n	80090d0 <_dtoa_r+0x310>
 8009024:	2301      	movs	r3, #1
 8009026:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800902a:	461a      	mov	r2, r3
 800902c:	9209      	str	r2, [sp, #36]	; 0x24
 800902e:	e00c      	b.n	800904a <_dtoa_r+0x28a>
 8009030:	2301      	movs	r3, #1
 8009032:	e7f3      	b.n	800901c <_dtoa_r+0x25c>
 8009034:	2300      	movs	r3, #0
 8009036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009038:	9308      	str	r3, [sp, #32]
 800903a:	9b00      	ldr	r3, [sp, #0]
 800903c:	4413      	add	r3, r2
 800903e:	9302      	str	r3, [sp, #8]
 8009040:	3301      	adds	r3, #1
 8009042:	2b01      	cmp	r3, #1
 8009044:	9303      	str	r3, [sp, #12]
 8009046:	bfb8      	it	lt
 8009048:	2301      	movlt	r3, #1
 800904a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800904c:	2200      	movs	r2, #0
 800904e:	6042      	str	r2, [r0, #4]
 8009050:	2204      	movs	r2, #4
 8009052:	f102 0614 	add.w	r6, r2, #20
 8009056:	429e      	cmp	r6, r3
 8009058:	6841      	ldr	r1, [r0, #4]
 800905a:	d93d      	bls.n	80090d8 <_dtoa_r+0x318>
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fcb7 	bl	80099d0 <_Balloc>
 8009062:	9001      	str	r0, [sp, #4]
 8009064:	2800      	cmp	r0, #0
 8009066:	d13b      	bne.n	80090e0 <_dtoa_r+0x320>
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <_dtoa_r+0x2f0>)
 800906a:	4602      	mov	r2, r0
 800906c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009070:	e6c0      	b.n	8008df4 <_dtoa_r+0x34>
 8009072:	2301      	movs	r3, #1
 8009074:	e7df      	b.n	8009036 <_dtoa_r+0x276>
 8009076:	bf00      	nop
 8009078:	636f4361 	.word	0x636f4361
 800907c:	3fd287a7 	.word	0x3fd287a7
 8009080:	8b60c8b3 	.word	0x8b60c8b3
 8009084:	3fc68a28 	.word	0x3fc68a28
 8009088:	509f79fb 	.word	0x509f79fb
 800908c:	3fd34413 	.word	0x3fd34413
 8009090:	0800b3ca 	.word	0x0800b3ca
 8009094:	0800b3e1 	.word	0x0800b3e1
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	0800b3c6 	.word	0x0800b3c6
 80090a0:	0800b3bd 	.word	0x0800b3bd
 80090a4:	0800b299 	.word	0x0800b299
 80090a8:	3ff80000 	.word	0x3ff80000
 80090ac:	0800b4d8 	.word	0x0800b4d8
 80090b0:	0800b43c 	.word	0x0800b43c
 80090b4:	2501      	movs	r5, #1
 80090b6:	2300      	movs	r3, #0
 80090b8:	9306      	str	r3, [sp, #24]
 80090ba:	9508      	str	r5, [sp, #32]
 80090bc:	f04f 33ff 	mov.w	r3, #4294967295
 80090c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	2312      	movs	r3, #18
 80090c8:	e7b0      	b.n	800902c <_dtoa_r+0x26c>
 80090ca:	2301      	movs	r3, #1
 80090cc:	9308      	str	r3, [sp, #32]
 80090ce:	e7f5      	b.n	80090bc <_dtoa_r+0x2fc>
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090d6:	e7b8      	b.n	800904a <_dtoa_r+0x28a>
 80090d8:	3101      	adds	r1, #1
 80090da:	6041      	str	r1, [r0, #4]
 80090dc:	0052      	lsls	r2, r2, #1
 80090de:	e7b8      	b.n	8009052 <_dtoa_r+0x292>
 80090e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e2:	9a01      	ldr	r2, [sp, #4]
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	2b0e      	cmp	r3, #14
 80090ea:	f200 809d 	bhi.w	8009228 <_dtoa_r+0x468>
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	f000 809a 	beq.w	8009228 <_dtoa_r+0x468>
 80090f4:	9b00      	ldr	r3, [sp, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd32      	ble.n	8009160 <_dtoa_r+0x3a0>
 80090fa:	4ab7      	ldr	r2, [pc, #732]	; (80093d8 <_dtoa_r+0x618>)
 80090fc:	f003 030f 	and.w	r3, r3, #15
 8009100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009104:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009108:	9b00      	ldr	r3, [sp, #0]
 800910a:	05d8      	lsls	r0, r3, #23
 800910c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009110:	d516      	bpl.n	8009140 <_dtoa_r+0x380>
 8009112:	4bb2      	ldr	r3, [pc, #712]	; (80093dc <_dtoa_r+0x61c>)
 8009114:	ec51 0b19 	vmov	r0, r1, d9
 8009118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800911c:	f7f7 fb9e 	bl	800085c <__aeabi_ddiv>
 8009120:	f007 070f 	and.w	r7, r7, #15
 8009124:	4682      	mov	sl, r0
 8009126:	468b      	mov	fp, r1
 8009128:	2503      	movs	r5, #3
 800912a:	4eac      	ldr	r6, [pc, #688]	; (80093dc <_dtoa_r+0x61c>)
 800912c:	b957      	cbnz	r7, 8009144 <_dtoa_r+0x384>
 800912e:	4642      	mov	r2, r8
 8009130:	464b      	mov	r3, r9
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 fb91 	bl	800085c <__aeabi_ddiv>
 800913a:	4682      	mov	sl, r0
 800913c:	468b      	mov	fp, r1
 800913e:	e028      	b.n	8009192 <_dtoa_r+0x3d2>
 8009140:	2502      	movs	r5, #2
 8009142:	e7f2      	b.n	800912a <_dtoa_r+0x36a>
 8009144:	07f9      	lsls	r1, r7, #31
 8009146:	d508      	bpl.n	800915a <_dtoa_r+0x39a>
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	3501      	adds	r5, #1
 8009156:	4680      	mov	r8, r0
 8009158:	4689      	mov	r9, r1
 800915a:	107f      	asrs	r7, r7, #1
 800915c:	3608      	adds	r6, #8
 800915e:	e7e5      	b.n	800912c <_dtoa_r+0x36c>
 8009160:	f000 809b 	beq.w	800929a <_dtoa_r+0x4da>
 8009164:	9b00      	ldr	r3, [sp, #0]
 8009166:	4f9d      	ldr	r7, [pc, #628]	; (80093dc <_dtoa_r+0x61c>)
 8009168:	425e      	negs	r6, r3
 800916a:	4b9b      	ldr	r3, [pc, #620]	; (80093d8 <_dtoa_r+0x618>)
 800916c:	f006 020f 	and.w	r2, r6, #15
 8009170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	ec51 0b19 	vmov	r0, r1, d9
 800917c:	f7f7 fa44 	bl	8000608 <__aeabi_dmul>
 8009180:	1136      	asrs	r6, r6, #4
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	2300      	movs	r3, #0
 8009188:	2502      	movs	r5, #2
 800918a:	2e00      	cmp	r6, #0
 800918c:	d17a      	bne.n	8009284 <_dtoa_r+0x4c4>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1d3      	bne.n	800913a <_dtoa_r+0x37a>
 8009192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8082 	beq.w	800929e <_dtoa_r+0x4de>
 800919a:	4b91      	ldr	r3, [pc, #580]	; (80093e0 <_dtoa_r+0x620>)
 800919c:	2200      	movs	r2, #0
 800919e:	4650      	mov	r0, sl
 80091a0:	4659      	mov	r1, fp
 80091a2:	f7f7 fca3 	bl	8000aec <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d079      	beq.n	800929e <_dtoa_r+0x4de>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d076      	beq.n	800929e <_dtoa_r+0x4de>
 80091b0:	9b02      	ldr	r3, [sp, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dd36      	ble.n	8009224 <_dtoa_r+0x464>
 80091b6:	9b00      	ldr	r3, [sp, #0]
 80091b8:	4650      	mov	r0, sl
 80091ba:	4659      	mov	r1, fp
 80091bc:	1e5f      	subs	r7, r3, #1
 80091be:	2200      	movs	r2, #0
 80091c0:	4b88      	ldr	r3, [pc, #544]	; (80093e4 <_dtoa_r+0x624>)
 80091c2:	f7f7 fa21 	bl	8000608 <__aeabi_dmul>
 80091c6:	9e02      	ldr	r6, [sp, #8]
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	3501      	adds	r5, #1
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7f7 f9b0 	bl	8000534 <__aeabi_i2d>
 80091d4:	4652      	mov	r2, sl
 80091d6:	465b      	mov	r3, fp
 80091d8:	f7f7 fa16 	bl	8000608 <__aeabi_dmul>
 80091dc:	4b82      	ldr	r3, [pc, #520]	; (80093e8 <_dtoa_r+0x628>)
 80091de:	2200      	movs	r2, #0
 80091e0:	f7f7 f85c 	bl	800029c <__adddf3>
 80091e4:	46d0      	mov	r8, sl
 80091e6:	46d9      	mov	r9, fp
 80091e8:	4682      	mov	sl, r0
 80091ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80091ee:	2e00      	cmp	r6, #0
 80091f0:	d158      	bne.n	80092a4 <_dtoa_r+0x4e4>
 80091f2:	4b7e      	ldr	r3, [pc, #504]	; (80093ec <_dtoa_r+0x62c>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 f84d 	bl	8000298 <__aeabi_dsub>
 80091fe:	4652      	mov	r2, sl
 8009200:	465b      	mov	r3, fp
 8009202:	4680      	mov	r8, r0
 8009204:	4689      	mov	r9, r1
 8009206:	f7f7 fc8f 	bl	8000b28 <__aeabi_dcmpgt>
 800920a:	2800      	cmp	r0, #0
 800920c:	f040 8295 	bne.w	800973a <_dtoa_r+0x97a>
 8009210:	4652      	mov	r2, sl
 8009212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009216:	4640      	mov	r0, r8
 8009218:	4649      	mov	r1, r9
 800921a:	f7f7 fc67 	bl	8000aec <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	f040 8289 	bne.w	8009736 <_dtoa_r+0x976>
 8009224:	ec5b ab19 	vmov	sl, fp, d9
 8009228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800922a:	2b00      	cmp	r3, #0
 800922c:	f2c0 8148 	blt.w	80094c0 <_dtoa_r+0x700>
 8009230:	9a00      	ldr	r2, [sp, #0]
 8009232:	2a0e      	cmp	r2, #14
 8009234:	f300 8144 	bgt.w	80094c0 <_dtoa_r+0x700>
 8009238:	4b67      	ldr	r3, [pc, #412]	; (80093d8 <_dtoa_r+0x618>)
 800923a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	f280 80d5 	bge.w	80093f4 <_dtoa_r+0x634>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f300 80d1 	bgt.w	80093f4 <_dtoa_r+0x634>
 8009252:	f040 826f 	bne.w	8009734 <_dtoa_r+0x974>
 8009256:	4b65      	ldr	r3, [pc, #404]	; (80093ec <_dtoa_r+0x62c>)
 8009258:	2200      	movs	r2, #0
 800925a:	4640      	mov	r0, r8
 800925c:	4649      	mov	r1, r9
 800925e:	f7f7 f9d3 	bl	8000608 <__aeabi_dmul>
 8009262:	4652      	mov	r2, sl
 8009264:	465b      	mov	r3, fp
 8009266:	f7f7 fc55 	bl	8000b14 <__aeabi_dcmpge>
 800926a:	9e03      	ldr	r6, [sp, #12]
 800926c:	4637      	mov	r7, r6
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 8245 	bne.w	80096fe <_dtoa_r+0x93e>
 8009274:	9d01      	ldr	r5, [sp, #4]
 8009276:	2331      	movs	r3, #49	; 0x31
 8009278:	f805 3b01 	strb.w	r3, [r5], #1
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	3301      	adds	r3, #1
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	e240      	b.n	8009706 <_dtoa_r+0x946>
 8009284:	07f2      	lsls	r2, r6, #31
 8009286:	d505      	bpl.n	8009294 <_dtoa_r+0x4d4>
 8009288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928c:	f7f7 f9bc 	bl	8000608 <__aeabi_dmul>
 8009290:	3501      	adds	r5, #1
 8009292:	2301      	movs	r3, #1
 8009294:	1076      	asrs	r6, r6, #1
 8009296:	3708      	adds	r7, #8
 8009298:	e777      	b.n	800918a <_dtoa_r+0x3ca>
 800929a:	2502      	movs	r5, #2
 800929c:	e779      	b.n	8009192 <_dtoa_r+0x3d2>
 800929e:	9f00      	ldr	r7, [sp, #0]
 80092a0:	9e03      	ldr	r6, [sp, #12]
 80092a2:	e794      	b.n	80091ce <_dtoa_r+0x40e>
 80092a4:	9901      	ldr	r1, [sp, #4]
 80092a6:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <_dtoa_r+0x618>)
 80092a8:	4431      	add	r1, r6
 80092aa:	910d      	str	r1, [sp, #52]	; 0x34
 80092ac:	9908      	ldr	r1, [sp, #32]
 80092ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092b6:	2900      	cmp	r1, #0
 80092b8:	d043      	beq.n	8009342 <_dtoa_r+0x582>
 80092ba:	494d      	ldr	r1, [pc, #308]	; (80093f0 <_dtoa_r+0x630>)
 80092bc:	2000      	movs	r0, #0
 80092be:	f7f7 facd 	bl	800085c <__aeabi_ddiv>
 80092c2:	4652      	mov	r2, sl
 80092c4:	465b      	mov	r3, fp
 80092c6:	f7f6 ffe7 	bl	8000298 <__aeabi_dsub>
 80092ca:	9d01      	ldr	r5, [sp, #4]
 80092cc:	4682      	mov	sl, r0
 80092ce:	468b      	mov	fp, r1
 80092d0:	4649      	mov	r1, r9
 80092d2:	4640      	mov	r0, r8
 80092d4:	f7f7 fc48 	bl	8000b68 <__aeabi_d2iz>
 80092d8:	4606      	mov	r6, r0
 80092da:	f7f7 f92b 	bl	8000534 <__aeabi_i2d>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f6 ffd7 	bl	8000298 <__aeabi_dsub>
 80092ea:	3630      	adds	r6, #48	; 0x30
 80092ec:	f805 6b01 	strb.w	r6, [r5], #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	465b      	mov	r3, fp
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	f7f7 fbf8 	bl	8000aec <__aeabi_dcmplt>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d163      	bne.n	80093c8 <_dtoa_r+0x608>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	4936      	ldr	r1, [pc, #216]	; (80093e0 <_dtoa_r+0x620>)
 8009306:	2000      	movs	r0, #0
 8009308:	f7f6 ffc6 	bl	8000298 <__aeabi_dsub>
 800930c:	4652      	mov	r2, sl
 800930e:	465b      	mov	r3, fp
 8009310:	f7f7 fbec 	bl	8000aec <__aeabi_dcmplt>
 8009314:	2800      	cmp	r0, #0
 8009316:	f040 80b5 	bne.w	8009484 <_dtoa_r+0x6c4>
 800931a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931c:	429d      	cmp	r5, r3
 800931e:	d081      	beq.n	8009224 <_dtoa_r+0x464>
 8009320:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <_dtoa_r+0x624>)
 8009322:	2200      	movs	r2, #0
 8009324:	4650      	mov	r0, sl
 8009326:	4659      	mov	r1, fp
 8009328:	f7f7 f96e 	bl	8000608 <__aeabi_dmul>
 800932c:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <_dtoa_r+0x624>)
 800932e:	4682      	mov	sl, r0
 8009330:	468b      	mov	fp, r1
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	2200      	movs	r2, #0
 8009338:	f7f7 f966 	bl	8000608 <__aeabi_dmul>
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	e7c6      	b.n	80092d0 <_dtoa_r+0x510>
 8009342:	4650      	mov	r0, sl
 8009344:	4659      	mov	r1, fp
 8009346:	f7f7 f95f 	bl	8000608 <__aeabi_dmul>
 800934a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800934c:	9d01      	ldr	r5, [sp, #4]
 800934e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009350:	4682      	mov	sl, r0
 8009352:	468b      	mov	fp, r1
 8009354:	4649      	mov	r1, r9
 8009356:	4640      	mov	r0, r8
 8009358:	f7f7 fc06 	bl	8000b68 <__aeabi_d2iz>
 800935c:	4606      	mov	r6, r0
 800935e:	f7f7 f8e9 	bl	8000534 <__aeabi_i2d>
 8009362:	3630      	adds	r6, #48	; 0x30
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f6 ff94 	bl	8000298 <__aeabi_dsub>
 8009370:	f805 6b01 	strb.w	r6, [r5], #1
 8009374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009376:	429d      	cmp	r5, r3
 8009378:	4680      	mov	r8, r0
 800937a:	4689      	mov	r9, r1
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	d124      	bne.n	80093cc <_dtoa_r+0x60c>
 8009382:	4b1b      	ldr	r3, [pc, #108]	; (80093f0 <_dtoa_r+0x630>)
 8009384:	4650      	mov	r0, sl
 8009386:	4659      	mov	r1, fp
 8009388:	f7f6 ff88 	bl	800029c <__adddf3>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 fbc8 	bl	8000b28 <__aeabi_dcmpgt>
 8009398:	2800      	cmp	r0, #0
 800939a:	d173      	bne.n	8009484 <_dtoa_r+0x6c4>
 800939c:	4652      	mov	r2, sl
 800939e:	465b      	mov	r3, fp
 80093a0:	4913      	ldr	r1, [pc, #76]	; (80093f0 <_dtoa_r+0x630>)
 80093a2:	2000      	movs	r0, #0
 80093a4:	f7f6 ff78 	bl	8000298 <__aeabi_dsub>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f7 fb9c 	bl	8000aec <__aeabi_dcmplt>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f43f af35 	beq.w	8009224 <_dtoa_r+0x464>
 80093ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093bc:	1e6b      	subs	r3, r5, #1
 80093be:	930f      	str	r3, [sp, #60]	; 0x3c
 80093c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093c4:	2b30      	cmp	r3, #48	; 0x30
 80093c6:	d0f8      	beq.n	80093ba <_dtoa_r+0x5fa>
 80093c8:	9700      	str	r7, [sp, #0]
 80093ca:	e049      	b.n	8009460 <_dtoa_r+0x6a0>
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_dtoa_r+0x624>)
 80093ce:	f7f7 f91b 	bl	8000608 <__aeabi_dmul>
 80093d2:	4680      	mov	r8, r0
 80093d4:	4689      	mov	r9, r1
 80093d6:	e7bd      	b.n	8009354 <_dtoa_r+0x594>
 80093d8:	0800b4d8 	.word	0x0800b4d8
 80093dc:	0800b4b0 	.word	0x0800b4b0
 80093e0:	3ff00000 	.word	0x3ff00000
 80093e4:	40240000 	.word	0x40240000
 80093e8:	401c0000 	.word	0x401c0000
 80093ec:	40140000 	.word	0x40140000
 80093f0:	3fe00000 	.word	0x3fe00000
 80093f4:	9d01      	ldr	r5, [sp, #4]
 80093f6:	4656      	mov	r6, sl
 80093f8:	465f      	mov	r7, fp
 80093fa:	4642      	mov	r2, r8
 80093fc:	464b      	mov	r3, r9
 80093fe:	4630      	mov	r0, r6
 8009400:	4639      	mov	r1, r7
 8009402:	f7f7 fa2b 	bl	800085c <__aeabi_ddiv>
 8009406:	f7f7 fbaf 	bl	8000b68 <__aeabi_d2iz>
 800940a:	4682      	mov	sl, r0
 800940c:	f7f7 f892 	bl	8000534 <__aeabi_i2d>
 8009410:	4642      	mov	r2, r8
 8009412:	464b      	mov	r3, r9
 8009414:	f7f7 f8f8 	bl	8000608 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4630      	mov	r0, r6
 800941e:	4639      	mov	r1, r7
 8009420:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009424:	f7f6 ff38 	bl	8000298 <__aeabi_dsub>
 8009428:	f805 6b01 	strb.w	r6, [r5], #1
 800942c:	9e01      	ldr	r6, [sp, #4]
 800942e:	9f03      	ldr	r7, [sp, #12]
 8009430:	1bae      	subs	r6, r5, r6
 8009432:	42b7      	cmp	r7, r6
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	d135      	bne.n	80094a6 <_dtoa_r+0x6e6>
 800943a:	f7f6 ff2f 	bl	800029c <__adddf3>
 800943e:	4642      	mov	r2, r8
 8009440:	464b      	mov	r3, r9
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	f7f7 fb6f 	bl	8000b28 <__aeabi_dcmpgt>
 800944a:	b9d0      	cbnz	r0, 8009482 <_dtoa_r+0x6c2>
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009458:	b110      	cbz	r0, 8009460 <_dtoa_r+0x6a0>
 800945a:	f01a 0f01 	tst.w	sl, #1
 800945e:	d110      	bne.n	8009482 <_dtoa_r+0x6c2>
 8009460:	4620      	mov	r0, r4
 8009462:	ee18 1a10 	vmov	r1, s16
 8009466:	f000 faf3 	bl	8009a50 <_Bfree>
 800946a:	2300      	movs	r3, #0
 800946c:	9800      	ldr	r0, [sp, #0]
 800946e:	702b      	strb	r3, [r5, #0]
 8009470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009472:	3001      	adds	r0, #1
 8009474:	6018      	str	r0, [r3, #0]
 8009476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009478:	2b00      	cmp	r3, #0
 800947a:	f43f acf1 	beq.w	8008e60 <_dtoa_r+0xa0>
 800947e:	601d      	str	r5, [r3, #0]
 8009480:	e4ee      	b.n	8008e60 <_dtoa_r+0xa0>
 8009482:	9f00      	ldr	r7, [sp, #0]
 8009484:	462b      	mov	r3, r5
 8009486:	461d      	mov	r5, r3
 8009488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800948c:	2a39      	cmp	r2, #57	; 0x39
 800948e:	d106      	bne.n	800949e <_dtoa_r+0x6de>
 8009490:	9a01      	ldr	r2, [sp, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d1f7      	bne.n	8009486 <_dtoa_r+0x6c6>
 8009496:	9901      	ldr	r1, [sp, #4]
 8009498:	2230      	movs	r2, #48	; 0x30
 800949a:	3701      	adds	r7, #1
 800949c:	700a      	strb	r2, [r1, #0]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	3201      	adds	r2, #1
 80094a2:	701a      	strb	r2, [r3, #0]
 80094a4:	e790      	b.n	80093c8 <_dtoa_r+0x608>
 80094a6:	4ba6      	ldr	r3, [pc, #664]	; (8009740 <_dtoa_r+0x980>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	2200      	movs	r2, #0
 80094b0:	2300      	movs	r3, #0
 80094b2:	4606      	mov	r6, r0
 80094b4:	460f      	mov	r7, r1
 80094b6:	f7f7 fb0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d09d      	beq.n	80093fa <_dtoa_r+0x63a>
 80094be:	e7cf      	b.n	8009460 <_dtoa_r+0x6a0>
 80094c0:	9a08      	ldr	r2, [sp, #32]
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	f000 80d7 	beq.w	8009676 <_dtoa_r+0x8b6>
 80094c8:	9a06      	ldr	r2, [sp, #24]
 80094ca:	2a01      	cmp	r2, #1
 80094cc:	f300 80ba 	bgt.w	8009644 <_dtoa_r+0x884>
 80094d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	f000 80b2 	beq.w	800963c <_dtoa_r+0x87c>
 80094d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094dc:	9e07      	ldr	r6, [sp, #28]
 80094de:	9d04      	ldr	r5, [sp, #16]
 80094e0:	9a04      	ldr	r2, [sp, #16]
 80094e2:	441a      	add	r2, r3
 80094e4:	9204      	str	r2, [sp, #16]
 80094e6:	9a05      	ldr	r2, [sp, #20]
 80094e8:	2101      	movs	r1, #1
 80094ea:	441a      	add	r2, r3
 80094ec:	4620      	mov	r0, r4
 80094ee:	9205      	str	r2, [sp, #20]
 80094f0:	f000 fb66 	bl	8009bc0 <__i2b>
 80094f4:	4607      	mov	r7, r0
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	dd0c      	ble.n	8009514 <_dtoa_r+0x754>
 80094fa:	9b05      	ldr	r3, [sp, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dd09      	ble.n	8009514 <_dtoa_r+0x754>
 8009500:	42ab      	cmp	r3, r5
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	bfa8      	it	ge
 8009506:	462b      	movge	r3, r5
 8009508:	1ad2      	subs	r2, r2, r3
 800950a:	9204      	str	r2, [sp, #16]
 800950c:	9a05      	ldr	r2, [sp, #20]
 800950e:	1aed      	subs	r5, r5, r3
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	b31b      	cbz	r3, 8009560 <_dtoa_r+0x7a0>
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 80af 	beq.w	800967e <_dtoa_r+0x8be>
 8009520:	2e00      	cmp	r6, #0
 8009522:	dd13      	ble.n	800954c <_dtoa_r+0x78c>
 8009524:	4639      	mov	r1, r7
 8009526:	4632      	mov	r2, r6
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fc09 	bl	8009d40 <__pow5mult>
 800952e:	ee18 2a10 	vmov	r2, s16
 8009532:	4601      	mov	r1, r0
 8009534:	4607      	mov	r7, r0
 8009536:	4620      	mov	r0, r4
 8009538:	f000 fb58 	bl	8009bec <__multiply>
 800953c:	ee18 1a10 	vmov	r1, s16
 8009540:	4680      	mov	r8, r0
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fa84 	bl	8009a50 <_Bfree>
 8009548:	ee08 8a10 	vmov	s16, r8
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	1b9a      	subs	r2, r3, r6
 8009550:	d006      	beq.n	8009560 <_dtoa_r+0x7a0>
 8009552:	ee18 1a10 	vmov	r1, s16
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fbf2 	bl	8009d40 <__pow5mult>
 800955c:	ee08 0a10 	vmov	s16, r0
 8009560:	2101      	movs	r1, #1
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fb2c 	bl	8009bc0 <__i2b>
 8009568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	4606      	mov	r6, r0
 800956e:	f340 8088 	ble.w	8009682 <_dtoa_r+0x8c2>
 8009572:	461a      	mov	r2, r3
 8009574:	4601      	mov	r1, r0
 8009576:	4620      	mov	r0, r4
 8009578:	f000 fbe2 	bl	8009d40 <__pow5mult>
 800957c:	9b06      	ldr	r3, [sp, #24]
 800957e:	2b01      	cmp	r3, #1
 8009580:	4606      	mov	r6, r0
 8009582:	f340 8081 	ble.w	8009688 <_dtoa_r+0x8c8>
 8009586:	f04f 0800 	mov.w	r8, #0
 800958a:	6933      	ldr	r3, [r6, #16]
 800958c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009590:	6918      	ldr	r0, [r3, #16]
 8009592:	f000 fac5 	bl	8009b20 <__hi0bits>
 8009596:	f1c0 0020 	rsb	r0, r0, #32
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	4418      	add	r0, r3
 800959e:	f010 001f 	ands.w	r0, r0, #31
 80095a2:	f000 8092 	beq.w	80096ca <_dtoa_r+0x90a>
 80095a6:	f1c0 0320 	rsb	r3, r0, #32
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	f340 808a 	ble.w	80096c4 <_dtoa_r+0x904>
 80095b0:	f1c0 001c 	rsb	r0, r0, #28
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	4403      	add	r3, r0
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	4403      	add	r3, r0
 80095be:	4405      	add	r5, r0
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd07      	ble.n	80095d8 <_dtoa_r+0x818>
 80095c8:	ee18 1a10 	vmov	r1, s16
 80095cc:	461a      	mov	r2, r3
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fc10 	bl	8009df4 <__lshift>
 80095d4:	ee08 0a10 	vmov	s16, r0
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dd05      	ble.n	80095ea <_dtoa_r+0x82a>
 80095de:	4631      	mov	r1, r6
 80095e0:	461a      	mov	r2, r3
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fc06 	bl	8009df4 <__lshift>
 80095e8:	4606      	mov	r6, r0
 80095ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d06e      	beq.n	80096ce <_dtoa_r+0x90e>
 80095f0:	ee18 0a10 	vmov	r0, s16
 80095f4:	4631      	mov	r1, r6
 80095f6:	f000 fc6d 	bl	8009ed4 <__mcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	da67      	bge.n	80096ce <_dtoa_r+0x90e>
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	ee18 1a10 	vmov	r1, s16
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	220a      	movs	r2, #10
 800960a:	2300      	movs	r3, #0
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fa41 	bl	8009a94 <__multadd>
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	ee08 0a10 	vmov	s16, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 81b1 	beq.w	8009980 <_dtoa_r+0xbc0>
 800961e:	2300      	movs	r3, #0
 8009620:	4639      	mov	r1, r7
 8009622:	220a      	movs	r2, #10
 8009624:	4620      	mov	r0, r4
 8009626:	f000 fa35 	bl	8009a94 <__multadd>
 800962a:	9b02      	ldr	r3, [sp, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	4607      	mov	r7, r0
 8009630:	f300 808e 	bgt.w	8009750 <_dtoa_r+0x990>
 8009634:	9b06      	ldr	r3, [sp, #24]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc51      	bgt.n	80096de <_dtoa_r+0x91e>
 800963a:	e089      	b.n	8009750 <_dtoa_r+0x990>
 800963c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800963e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009642:	e74b      	b.n	80094dc <_dtoa_r+0x71c>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1e5e      	subs	r6, r3, #1
 8009648:	9b07      	ldr	r3, [sp, #28]
 800964a:	42b3      	cmp	r3, r6
 800964c:	bfbf      	itttt	lt
 800964e:	9b07      	ldrlt	r3, [sp, #28]
 8009650:	9607      	strlt	r6, [sp, #28]
 8009652:	1af2      	sublt	r2, r6, r3
 8009654:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009656:	bfb6      	itet	lt
 8009658:	189b      	addlt	r3, r3, r2
 800965a:	1b9e      	subge	r6, r3, r6
 800965c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	bfb8      	it	lt
 8009662:	2600      	movlt	r6, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb7      	itett	lt
 8009668:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800966c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009670:	1a9d      	sublt	r5, r3, r2
 8009672:	2300      	movlt	r3, #0
 8009674:	e734      	b.n	80094e0 <_dtoa_r+0x720>
 8009676:	9e07      	ldr	r6, [sp, #28]
 8009678:	9d04      	ldr	r5, [sp, #16]
 800967a:	9f08      	ldr	r7, [sp, #32]
 800967c:	e73b      	b.n	80094f6 <_dtoa_r+0x736>
 800967e:	9a07      	ldr	r2, [sp, #28]
 8009680:	e767      	b.n	8009552 <_dtoa_r+0x792>
 8009682:	9b06      	ldr	r3, [sp, #24]
 8009684:	2b01      	cmp	r3, #1
 8009686:	dc18      	bgt.n	80096ba <_dtoa_r+0x8fa>
 8009688:	f1ba 0f00 	cmp.w	sl, #0
 800968c:	d115      	bne.n	80096ba <_dtoa_r+0x8fa>
 800968e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009692:	b993      	cbnz	r3, 80096ba <_dtoa_r+0x8fa>
 8009694:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009698:	0d1b      	lsrs	r3, r3, #20
 800969a:	051b      	lsls	r3, r3, #20
 800969c:	b183      	cbz	r3, 80096c0 <_dtoa_r+0x900>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	3301      	adds	r3, #1
 80096a2:	9304      	str	r3, [sp, #16]
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	3301      	adds	r3, #1
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	f04f 0801 	mov.w	r8, #1
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f47f af6a 	bne.w	800958a <_dtoa_r+0x7ca>
 80096b6:	2001      	movs	r0, #1
 80096b8:	e76f      	b.n	800959a <_dtoa_r+0x7da>
 80096ba:	f04f 0800 	mov.w	r8, #0
 80096be:	e7f6      	b.n	80096ae <_dtoa_r+0x8ee>
 80096c0:	4698      	mov	r8, r3
 80096c2:	e7f4      	b.n	80096ae <_dtoa_r+0x8ee>
 80096c4:	f43f af7d 	beq.w	80095c2 <_dtoa_r+0x802>
 80096c8:	4618      	mov	r0, r3
 80096ca:	301c      	adds	r0, #28
 80096cc:	e772      	b.n	80095b4 <_dtoa_r+0x7f4>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc37      	bgt.n	8009744 <_dtoa_r+0x984>
 80096d4:	9b06      	ldr	r3, [sp, #24]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	dd34      	ble.n	8009744 <_dtoa_r+0x984>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	9302      	str	r3, [sp, #8]
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	b96b      	cbnz	r3, 80096fe <_dtoa_r+0x93e>
 80096e2:	4631      	mov	r1, r6
 80096e4:	2205      	movs	r2, #5
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f9d4 	bl	8009a94 <__multadd>
 80096ec:	4601      	mov	r1, r0
 80096ee:	4606      	mov	r6, r0
 80096f0:	ee18 0a10 	vmov	r0, s16
 80096f4:	f000 fbee 	bl	8009ed4 <__mcmp>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f73f adbb 	bgt.w	8009274 <_dtoa_r+0x4b4>
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	9d01      	ldr	r5, [sp, #4]
 8009702:	43db      	mvns	r3, r3
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	f04f 0800 	mov.w	r8, #0
 800970a:	4631      	mov	r1, r6
 800970c:	4620      	mov	r0, r4
 800970e:	f000 f99f 	bl	8009a50 <_Bfree>
 8009712:	2f00      	cmp	r7, #0
 8009714:	f43f aea4 	beq.w	8009460 <_dtoa_r+0x6a0>
 8009718:	f1b8 0f00 	cmp.w	r8, #0
 800971c:	d005      	beq.n	800972a <_dtoa_r+0x96a>
 800971e:	45b8      	cmp	r8, r7
 8009720:	d003      	beq.n	800972a <_dtoa_r+0x96a>
 8009722:	4641      	mov	r1, r8
 8009724:	4620      	mov	r0, r4
 8009726:	f000 f993 	bl	8009a50 <_Bfree>
 800972a:	4639      	mov	r1, r7
 800972c:	4620      	mov	r0, r4
 800972e:	f000 f98f 	bl	8009a50 <_Bfree>
 8009732:	e695      	b.n	8009460 <_dtoa_r+0x6a0>
 8009734:	2600      	movs	r6, #0
 8009736:	4637      	mov	r7, r6
 8009738:	e7e1      	b.n	80096fe <_dtoa_r+0x93e>
 800973a:	9700      	str	r7, [sp, #0]
 800973c:	4637      	mov	r7, r6
 800973e:	e599      	b.n	8009274 <_dtoa_r+0x4b4>
 8009740:	40240000 	.word	0x40240000
 8009744:	9b08      	ldr	r3, [sp, #32]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80ca 	beq.w	80098e0 <_dtoa_r+0xb20>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	2d00      	cmp	r5, #0
 8009752:	dd05      	ble.n	8009760 <_dtoa_r+0x9a0>
 8009754:	4639      	mov	r1, r7
 8009756:	462a      	mov	r2, r5
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fb4b 	bl	8009df4 <__lshift>
 800975e:	4607      	mov	r7, r0
 8009760:	f1b8 0f00 	cmp.w	r8, #0
 8009764:	d05b      	beq.n	800981e <_dtoa_r+0xa5e>
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	4620      	mov	r0, r4
 800976a:	f000 f931 	bl	80099d0 <_Balloc>
 800976e:	4605      	mov	r5, r0
 8009770:	b928      	cbnz	r0, 800977e <_dtoa_r+0x9be>
 8009772:	4b87      	ldr	r3, [pc, #540]	; (8009990 <_dtoa_r+0xbd0>)
 8009774:	4602      	mov	r2, r0
 8009776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800977a:	f7ff bb3b 	b.w	8008df4 <_dtoa_r+0x34>
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	3202      	adds	r2, #2
 8009782:	0092      	lsls	r2, r2, #2
 8009784:	f107 010c 	add.w	r1, r7, #12
 8009788:	300c      	adds	r0, #12
 800978a:	f000 f913 	bl	80099b4 <memcpy>
 800978e:	2201      	movs	r2, #1
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fb2e 	bl	8009df4 <__lshift>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	f103 0901 	add.w	r9, r3, #1
 800979e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097a2:	4413      	add	r3, r2
 80097a4:	9305      	str	r3, [sp, #20]
 80097a6:	f00a 0301 	and.w	r3, sl, #1
 80097aa:	46b8      	mov	r8, r7
 80097ac:	9304      	str	r3, [sp, #16]
 80097ae:	4607      	mov	r7, r0
 80097b0:	4631      	mov	r1, r6
 80097b2:	ee18 0a10 	vmov	r0, s16
 80097b6:	f7ff fa75 	bl	8008ca4 <quorem>
 80097ba:	4641      	mov	r1, r8
 80097bc:	9002      	str	r0, [sp, #8]
 80097be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097c2:	ee18 0a10 	vmov	r0, s16
 80097c6:	f000 fb85 	bl	8009ed4 <__mcmp>
 80097ca:	463a      	mov	r2, r7
 80097cc:	9003      	str	r0, [sp, #12]
 80097ce:	4631      	mov	r1, r6
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 fb9b 	bl	8009f0c <__mdiff>
 80097d6:	68c2      	ldr	r2, [r0, #12]
 80097d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80097dc:	4605      	mov	r5, r0
 80097de:	bb02      	cbnz	r2, 8009822 <_dtoa_r+0xa62>
 80097e0:	4601      	mov	r1, r0
 80097e2:	ee18 0a10 	vmov	r0, s16
 80097e6:	f000 fb75 	bl	8009ed4 <__mcmp>
 80097ea:	4602      	mov	r2, r0
 80097ec:	4629      	mov	r1, r5
 80097ee:	4620      	mov	r0, r4
 80097f0:	9207      	str	r2, [sp, #28]
 80097f2:	f000 f92d 	bl	8009a50 <_Bfree>
 80097f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80097fa:	ea43 0102 	orr.w	r1, r3, r2
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	430b      	orrs	r3, r1
 8009802:	464d      	mov	r5, r9
 8009804:	d10f      	bne.n	8009826 <_dtoa_r+0xa66>
 8009806:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800980a:	d02a      	beq.n	8009862 <_dtoa_r+0xaa2>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd02      	ble.n	8009818 <_dtoa_r+0xa58>
 8009812:	9b02      	ldr	r3, [sp, #8]
 8009814:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009818:	f88b a000 	strb.w	sl, [fp]
 800981c:	e775      	b.n	800970a <_dtoa_r+0x94a>
 800981e:	4638      	mov	r0, r7
 8009820:	e7ba      	b.n	8009798 <_dtoa_r+0x9d8>
 8009822:	2201      	movs	r2, #1
 8009824:	e7e2      	b.n	80097ec <_dtoa_r+0xa2c>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	db04      	blt.n	8009836 <_dtoa_r+0xa76>
 800982c:	9906      	ldr	r1, [sp, #24]
 800982e:	430b      	orrs	r3, r1
 8009830:	9904      	ldr	r1, [sp, #16]
 8009832:	430b      	orrs	r3, r1
 8009834:	d122      	bne.n	800987c <_dtoa_r+0xabc>
 8009836:	2a00      	cmp	r2, #0
 8009838:	ddee      	ble.n	8009818 <_dtoa_r+0xa58>
 800983a:	ee18 1a10 	vmov	r1, s16
 800983e:	2201      	movs	r2, #1
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fad7 	bl	8009df4 <__lshift>
 8009846:	4631      	mov	r1, r6
 8009848:	ee08 0a10 	vmov	s16, r0
 800984c:	f000 fb42 	bl	8009ed4 <__mcmp>
 8009850:	2800      	cmp	r0, #0
 8009852:	dc03      	bgt.n	800985c <_dtoa_r+0xa9c>
 8009854:	d1e0      	bne.n	8009818 <_dtoa_r+0xa58>
 8009856:	f01a 0f01 	tst.w	sl, #1
 800985a:	d0dd      	beq.n	8009818 <_dtoa_r+0xa58>
 800985c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009860:	d1d7      	bne.n	8009812 <_dtoa_r+0xa52>
 8009862:	2339      	movs	r3, #57	; 0x39
 8009864:	f88b 3000 	strb.w	r3, [fp]
 8009868:	462b      	mov	r3, r5
 800986a:	461d      	mov	r5, r3
 800986c:	3b01      	subs	r3, #1
 800986e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009872:	2a39      	cmp	r2, #57	; 0x39
 8009874:	d071      	beq.n	800995a <_dtoa_r+0xb9a>
 8009876:	3201      	adds	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	e746      	b.n	800970a <_dtoa_r+0x94a>
 800987c:	2a00      	cmp	r2, #0
 800987e:	dd07      	ble.n	8009890 <_dtoa_r+0xad0>
 8009880:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009884:	d0ed      	beq.n	8009862 <_dtoa_r+0xaa2>
 8009886:	f10a 0301 	add.w	r3, sl, #1
 800988a:	f88b 3000 	strb.w	r3, [fp]
 800988e:	e73c      	b.n	800970a <_dtoa_r+0x94a>
 8009890:	9b05      	ldr	r3, [sp, #20]
 8009892:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009896:	4599      	cmp	r9, r3
 8009898:	d047      	beq.n	800992a <_dtoa_r+0xb6a>
 800989a:	ee18 1a10 	vmov	r1, s16
 800989e:	2300      	movs	r3, #0
 80098a0:	220a      	movs	r2, #10
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 f8f6 	bl	8009a94 <__multadd>
 80098a8:	45b8      	cmp	r8, r7
 80098aa:	ee08 0a10 	vmov	s16, r0
 80098ae:	f04f 0300 	mov.w	r3, #0
 80098b2:	f04f 020a 	mov.w	r2, #10
 80098b6:	4641      	mov	r1, r8
 80098b8:	4620      	mov	r0, r4
 80098ba:	d106      	bne.n	80098ca <_dtoa_r+0xb0a>
 80098bc:	f000 f8ea 	bl	8009a94 <__multadd>
 80098c0:	4680      	mov	r8, r0
 80098c2:	4607      	mov	r7, r0
 80098c4:	f109 0901 	add.w	r9, r9, #1
 80098c8:	e772      	b.n	80097b0 <_dtoa_r+0x9f0>
 80098ca:	f000 f8e3 	bl	8009a94 <__multadd>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4680      	mov	r8, r0
 80098d2:	2300      	movs	r3, #0
 80098d4:	220a      	movs	r2, #10
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 f8dc 	bl	8009a94 <__multadd>
 80098dc:	4607      	mov	r7, r0
 80098de:	e7f1      	b.n	80098c4 <_dtoa_r+0xb04>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	9302      	str	r3, [sp, #8]
 80098e4:	9d01      	ldr	r5, [sp, #4]
 80098e6:	ee18 0a10 	vmov	r0, s16
 80098ea:	4631      	mov	r1, r6
 80098ec:	f7ff f9da 	bl	8008ca4 <quorem>
 80098f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	f805 ab01 	strb.w	sl, [r5], #1
 80098fa:	1aea      	subs	r2, r5, r3
 80098fc:	9b02      	ldr	r3, [sp, #8]
 80098fe:	4293      	cmp	r3, r2
 8009900:	dd09      	ble.n	8009916 <_dtoa_r+0xb56>
 8009902:	ee18 1a10 	vmov	r1, s16
 8009906:	2300      	movs	r3, #0
 8009908:	220a      	movs	r2, #10
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f8c2 	bl	8009a94 <__multadd>
 8009910:	ee08 0a10 	vmov	s16, r0
 8009914:	e7e7      	b.n	80098e6 <_dtoa_r+0xb26>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfc8      	it	gt
 800991c:	461d      	movgt	r5, r3
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	bfd8      	it	le
 8009922:	2501      	movle	r5, #1
 8009924:	441d      	add	r5, r3
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	ee18 1a10 	vmov	r1, s16
 800992e:	2201      	movs	r2, #1
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fa5f 	bl	8009df4 <__lshift>
 8009936:	4631      	mov	r1, r6
 8009938:	ee08 0a10 	vmov	s16, r0
 800993c:	f000 faca 	bl	8009ed4 <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	dc91      	bgt.n	8009868 <_dtoa_r+0xaa8>
 8009944:	d102      	bne.n	800994c <_dtoa_r+0xb8c>
 8009946:	f01a 0f01 	tst.w	sl, #1
 800994a:	d18d      	bne.n	8009868 <_dtoa_r+0xaa8>
 800994c:	462b      	mov	r3, r5
 800994e:	461d      	mov	r5, r3
 8009950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009954:	2a30      	cmp	r2, #48	; 0x30
 8009956:	d0fa      	beq.n	800994e <_dtoa_r+0xb8e>
 8009958:	e6d7      	b.n	800970a <_dtoa_r+0x94a>
 800995a:	9a01      	ldr	r2, [sp, #4]
 800995c:	429a      	cmp	r2, r3
 800995e:	d184      	bne.n	800986a <_dtoa_r+0xaaa>
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2331      	movs	r3, #49	; 0x31
 8009968:	7013      	strb	r3, [r2, #0]
 800996a:	e6ce      	b.n	800970a <_dtoa_r+0x94a>
 800996c:	4b09      	ldr	r3, [pc, #36]	; (8009994 <_dtoa_r+0xbd4>)
 800996e:	f7ff ba95 	b.w	8008e9c <_dtoa_r+0xdc>
 8009972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009974:	2b00      	cmp	r3, #0
 8009976:	f47f aa6e 	bne.w	8008e56 <_dtoa_r+0x96>
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <_dtoa_r+0xbd8>)
 800997c:	f7ff ba8e 	b.w	8008e9c <_dtoa_r+0xdc>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	dcae      	bgt.n	80098e4 <_dtoa_r+0xb24>
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	2b02      	cmp	r3, #2
 800998a:	f73f aea8 	bgt.w	80096de <_dtoa_r+0x91e>
 800998e:	e7a9      	b.n	80098e4 <_dtoa_r+0xb24>
 8009990:	0800b43c 	.word	0x0800b43c
 8009994:	0800b298 	.word	0x0800b298
 8009998:	0800b3bd 	.word	0x0800b3bd

0800999c <_localeconv_r>:
 800999c:	4800      	ldr	r0, [pc, #0]	; (80099a0 <_localeconv_r+0x4>)
 800999e:	4770      	bx	lr
 80099a0:	20000170 	.word	0x20000170

080099a4 <malloc>:
 80099a4:	4b02      	ldr	r3, [pc, #8]	; (80099b0 <malloc+0xc>)
 80099a6:	4601      	mov	r1, r0
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	f000 bc17 	b.w	800a1dc <_malloc_r>
 80099ae:	bf00      	nop
 80099b0:	2000001c 	.word	0x2000001c

080099b4 <memcpy>:
 80099b4:	440a      	add	r2, r1
 80099b6:	4291      	cmp	r1, r2
 80099b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099bc:	d100      	bne.n	80099c0 <memcpy+0xc>
 80099be:	4770      	bx	lr
 80099c0:	b510      	push	{r4, lr}
 80099c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ca:	4291      	cmp	r1, r2
 80099cc:	d1f9      	bne.n	80099c2 <memcpy+0xe>
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <_Balloc>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099d4:	4604      	mov	r4, r0
 80099d6:	460d      	mov	r5, r1
 80099d8:	b976      	cbnz	r6, 80099f8 <_Balloc+0x28>
 80099da:	2010      	movs	r0, #16
 80099dc:	f7ff ffe2 	bl	80099a4 <malloc>
 80099e0:	4602      	mov	r2, r0
 80099e2:	6260      	str	r0, [r4, #36]	; 0x24
 80099e4:	b920      	cbnz	r0, 80099f0 <_Balloc+0x20>
 80099e6:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <_Balloc+0x78>)
 80099e8:	4818      	ldr	r0, [pc, #96]	; (8009a4c <_Balloc+0x7c>)
 80099ea:	2166      	movs	r1, #102	; 0x66
 80099ec:	f000 fdd6 	bl	800a59c <__assert_func>
 80099f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f4:	6006      	str	r6, [r0, #0]
 80099f6:	60c6      	str	r6, [r0, #12]
 80099f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099fa:	68f3      	ldr	r3, [r6, #12]
 80099fc:	b183      	cbz	r3, 8009a20 <_Balloc+0x50>
 80099fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a06:	b9b8      	cbnz	r0, 8009a38 <_Balloc+0x68>
 8009a08:	2101      	movs	r1, #1
 8009a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a0e:	1d72      	adds	r2, r6, #5
 8009a10:	0092      	lsls	r2, r2, #2
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fb60 	bl	800a0d8 <_calloc_r>
 8009a18:	b160      	cbz	r0, 8009a34 <_Balloc+0x64>
 8009a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a1e:	e00e      	b.n	8009a3e <_Balloc+0x6e>
 8009a20:	2221      	movs	r2, #33	; 0x21
 8009a22:	2104      	movs	r1, #4
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 fb57 	bl	800a0d8 <_calloc_r>
 8009a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a2c:	60f0      	str	r0, [r6, #12]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e4      	bne.n	80099fe <_Balloc+0x2e>
 8009a34:	2000      	movs	r0, #0
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	6802      	ldr	r2, [r0, #0]
 8009a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a44:	e7f7      	b.n	8009a36 <_Balloc+0x66>
 8009a46:	bf00      	nop
 8009a48:	0800b3ca 	.word	0x0800b3ca
 8009a4c:	0800b44d 	.word	0x0800b44d

08009a50 <_Bfree>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a54:	4605      	mov	r5, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b976      	cbnz	r6, 8009a78 <_Bfree+0x28>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ffa2 	bl	80099a4 <malloc>
 8009a60:	4602      	mov	r2, r0
 8009a62:	6268      	str	r0, [r5, #36]	; 0x24
 8009a64:	b920      	cbnz	r0, 8009a70 <_Bfree+0x20>
 8009a66:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <_Bfree+0x3c>)
 8009a68:	4809      	ldr	r0, [pc, #36]	; (8009a90 <_Bfree+0x40>)
 8009a6a:	218a      	movs	r1, #138	; 0x8a
 8009a6c:	f000 fd96 	bl	800a59c <__assert_func>
 8009a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a74:	6006      	str	r6, [r0, #0]
 8009a76:	60c6      	str	r6, [r0, #12]
 8009a78:	b13c      	cbz	r4, 8009a8a <_Bfree+0x3a>
 8009a7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a7c:	6862      	ldr	r2, [r4, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a84:	6021      	str	r1, [r4, #0]
 8009a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	0800b3ca 	.word	0x0800b3ca
 8009a90:	0800b44d 	.word	0x0800b44d

08009a94 <__multadd>:
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	690d      	ldr	r5, [r1, #16]
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	461e      	mov	r6, r3
 8009aa0:	f101 0c14 	add.w	ip, r1, #20
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aaa:	b299      	uxth	r1, r3
 8009aac:	fb02 6101 	mla	r1, r2, r1, r6
 8009ab0:	0c1e      	lsrs	r6, r3, #16
 8009ab2:	0c0b      	lsrs	r3, r1, #16
 8009ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ab8:	b289      	uxth	r1, r1
 8009aba:	3001      	adds	r0, #1
 8009abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ac0:	4285      	cmp	r5, r0
 8009ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aca:	dcec      	bgt.n	8009aa6 <__multadd+0x12>
 8009acc:	b30e      	cbz	r6, 8009b12 <__multadd+0x7e>
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	42ab      	cmp	r3, r5
 8009ad2:	dc19      	bgt.n	8009b08 <__multadd+0x74>
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	3101      	adds	r1, #1
 8009ada:	f7ff ff79 	bl	80099d0 <_Balloc>
 8009ade:	4680      	mov	r8, r0
 8009ae0:	b928      	cbnz	r0, 8009aee <__multadd+0x5a>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <__multadd+0x84>)
 8009ae6:	480d      	ldr	r0, [pc, #52]	; (8009b1c <__multadd+0x88>)
 8009ae8:	21b5      	movs	r1, #181	; 0xb5
 8009aea:	f000 fd57 	bl	800a59c <__assert_func>
 8009aee:	6922      	ldr	r2, [r4, #16]
 8009af0:	3202      	adds	r2, #2
 8009af2:	f104 010c 	add.w	r1, r4, #12
 8009af6:	0092      	lsls	r2, r2, #2
 8009af8:	300c      	adds	r0, #12
 8009afa:	f7ff ff5b 	bl	80099b4 <memcpy>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7ff ffa5 	bl	8009a50 <_Bfree>
 8009b06:	4644      	mov	r4, r8
 8009b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	615e      	str	r6, [r3, #20]
 8009b10:	6125      	str	r5, [r4, #16]
 8009b12:	4620      	mov	r0, r4
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b18:	0800b43c 	.word	0x0800b43c
 8009b1c:	0800b44d 	.word	0x0800b44d

08009b20 <__hi0bits>:
 8009b20:	0c03      	lsrs	r3, r0, #16
 8009b22:	041b      	lsls	r3, r3, #16
 8009b24:	b9d3      	cbnz	r3, 8009b5c <__hi0bits+0x3c>
 8009b26:	0400      	lsls	r0, r0, #16
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b2e:	bf04      	itt	eq
 8009b30:	0200      	lsleq	r0, r0, #8
 8009b32:	3308      	addeq	r3, #8
 8009b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b38:	bf04      	itt	eq
 8009b3a:	0100      	lsleq	r0, r0, #4
 8009b3c:	3304      	addeq	r3, #4
 8009b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b42:	bf04      	itt	eq
 8009b44:	0080      	lsleq	r0, r0, #2
 8009b46:	3302      	addeq	r3, #2
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	db05      	blt.n	8009b58 <__hi0bits+0x38>
 8009b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b50:	f103 0301 	add.w	r3, r3, #1
 8009b54:	bf08      	it	eq
 8009b56:	2320      	moveq	r3, #32
 8009b58:	4618      	mov	r0, r3
 8009b5a:	4770      	bx	lr
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e7e4      	b.n	8009b2a <__hi0bits+0xa>

08009b60 <__lo0bits>:
 8009b60:	6803      	ldr	r3, [r0, #0]
 8009b62:	f013 0207 	ands.w	r2, r3, #7
 8009b66:	4601      	mov	r1, r0
 8009b68:	d00b      	beq.n	8009b82 <__lo0bits+0x22>
 8009b6a:	07da      	lsls	r2, r3, #31
 8009b6c:	d423      	bmi.n	8009bb6 <__lo0bits+0x56>
 8009b6e:	0798      	lsls	r0, r3, #30
 8009b70:	bf49      	itett	mi
 8009b72:	085b      	lsrmi	r3, r3, #1
 8009b74:	089b      	lsrpl	r3, r3, #2
 8009b76:	2001      	movmi	r0, #1
 8009b78:	600b      	strmi	r3, [r1, #0]
 8009b7a:	bf5c      	itt	pl
 8009b7c:	600b      	strpl	r3, [r1, #0]
 8009b7e:	2002      	movpl	r0, #2
 8009b80:	4770      	bx	lr
 8009b82:	b298      	uxth	r0, r3
 8009b84:	b9a8      	cbnz	r0, 8009bb2 <__lo0bits+0x52>
 8009b86:	0c1b      	lsrs	r3, r3, #16
 8009b88:	2010      	movs	r0, #16
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	b90a      	cbnz	r2, 8009b92 <__lo0bits+0x32>
 8009b8e:	3008      	adds	r0, #8
 8009b90:	0a1b      	lsrs	r3, r3, #8
 8009b92:	071a      	lsls	r2, r3, #28
 8009b94:	bf04      	itt	eq
 8009b96:	091b      	lsreq	r3, r3, #4
 8009b98:	3004      	addeq	r0, #4
 8009b9a:	079a      	lsls	r2, r3, #30
 8009b9c:	bf04      	itt	eq
 8009b9e:	089b      	lsreq	r3, r3, #2
 8009ba0:	3002      	addeq	r0, #2
 8009ba2:	07da      	lsls	r2, r3, #31
 8009ba4:	d403      	bmi.n	8009bae <__lo0bits+0x4e>
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	f100 0001 	add.w	r0, r0, #1
 8009bac:	d005      	beq.n	8009bba <__lo0bits+0x5a>
 8009bae:	600b      	str	r3, [r1, #0]
 8009bb0:	4770      	bx	lr
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	e7e9      	b.n	8009b8a <__lo0bits+0x2a>
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	4770      	bx	lr
 8009bba:	2020      	movs	r0, #32
 8009bbc:	4770      	bx	lr
	...

08009bc0 <__i2b>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	f7ff ff03 	bl	80099d0 <_Balloc>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	b928      	cbnz	r0, 8009bda <__i2b+0x1a>
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <__i2b+0x24>)
 8009bd0:	4805      	ldr	r0, [pc, #20]	; (8009be8 <__i2b+0x28>)
 8009bd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bd6:	f000 fce1 	bl	800a59c <__assert_func>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	6144      	str	r4, [r0, #20]
 8009bde:	6103      	str	r3, [r0, #16]
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	bf00      	nop
 8009be4:	0800b43c 	.word	0x0800b43c
 8009be8:	0800b44d 	.word	0x0800b44d

08009bec <__multiply>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	690a      	ldr	r2, [r1, #16]
 8009bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	bfb8      	it	lt
 8009bfc:	460b      	movlt	r3, r1
 8009bfe:	460c      	mov	r4, r1
 8009c00:	bfbc      	itt	lt
 8009c02:	464c      	movlt	r4, r9
 8009c04:	4699      	movlt	r9, r3
 8009c06:	6927      	ldr	r7, [r4, #16]
 8009c08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c0c:	68a3      	ldr	r3, [r4, #8]
 8009c0e:	6861      	ldr	r1, [r4, #4]
 8009c10:	eb07 060a 	add.w	r6, r7, sl
 8009c14:	42b3      	cmp	r3, r6
 8009c16:	b085      	sub	sp, #20
 8009c18:	bfb8      	it	lt
 8009c1a:	3101      	addlt	r1, #1
 8009c1c:	f7ff fed8 	bl	80099d0 <_Balloc>
 8009c20:	b930      	cbnz	r0, 8009c30 <__multiply+0x44>
 8009c22:	4602      	mov	r2, r0
 8009c24:	4b44      	ldr	r3, [pc, #272]	; (8009d38 <__multiply+0x14c>)
 8009c26:	4845      	ldr	r0, [pc, #276]	; (8009d3c <__multiply+0x150>)
 8009c28:	f240 115d 	movw	r1, #349	; 0x15d
 8009c2c:	f000 fcb6 	bl	800a59c <__assert_func>
 8009c30:	f100 0514 	add.w	r5, r0, #20
 8009c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c38:	462b      	mov	r3, r5
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	4543      	cmp	r3, r8
 8009c3e:	d321      	bcc.n	8009c84 <__multiply+0x98>
 8009c40:	f104 0314 	add.w	r3, r4, #20
 8009c44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c48:	f109 0314 	add.w	r3, r9, #20
 8009c4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c50:	9202      	str	r2, [sp, #8]
 8009c52:	1b3a      	subs	r2, r7, r4
 8009c54:	3a15      	subs	r2, #21
 8009c56:	f022 0203 	bic.w	r2, r2, #3
 8009c5a:	3204      	adds	r2, #4
 8009c5c:	f104 0115 	add.w	r1, r4, #21
 8009c60:	428f      	cmp	r7, r1
 8009c62:	bf38      	it	cc
 8009c64:	2204      	movcc	r2, #4
 8009c66:	9201      	str	r2, [sp, #4]
 8009c68:	9a02      	ldr	r2, [sp, #8]
 8009c6a:	9303      	str	r3, [sp, #12]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d80c      	bhi.n	8009c8a <__multiply+0x9e>
 8009c70:	2e00      	cmp	r6, #0
 8009c72:	dd03      	ble.n	8009c7c <__multiply+0x90>
 8009c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d05a      	beq.n	8009d32 <__multiply+0x146>
 8009c7c:	6106      	str	r6, [r0, #16]
 8009c7e:	b005      	add	sp, #20
 8009c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c84:	f843 2b04 	str.w	r2, [r3], #4
 8009c88:	e7d8      	b.n	8009c3c <__multiply+0x50>
 8009c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c8e:	f1ba 0f00 	cmp.w	sl, #0
 8009c92:	d024      	beq.n	8009cde <__multiply+0xf2>
 8009c94:	f104 0e14 	add.w	lr, r4, #20
 8009c98:	46a9      	mov	r9, r5
 8009c9a:	f04f 0c00 	mov.w	ip, #0
 8009c9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ca2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ca6:	fa1f fb82 	uxth.w	fp, r2
 8009caa:	b289      	uxth	r1, r1
 8009cac:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8009cb8:	4461      	add	r1, ip
 8009cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cc6:	b289      	uxth	r1, r1
 8009cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ccc:	4577      	cmp	r7, lr
 8009cce:	f849 1b04 	str.w	r1, [r9], #4
 8009cd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cd6:	d8e2      	bhi.n	8009c9e <__multiply+0xb2>
 8009cd8:	9a01      	ldr	r2, [sp, #4]
 8009cda:	f845 c002 	str.w	ip, [r5, r2]
 8009cde:	9a03      	ldr	r2, [sp, #12]
 8009ce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	f1b9 0f00 	cmp.w	r9, #0
 8009cea:	d020      	beq.n	8009d2e <__multiply+0x142>
 8009cec:	6829      	ldr	r1, [r5, #0]
 8009cee:	f104 0c14 	add.w	ip, r4, #20
 8009cf2:	46ae      	mov	lr, r5
 8009cf4:	f04f 0a00 	mov.w	sl, #0
 8009cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8009cfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d00:	fb09 220b 	mla	r2, r9, fp, r2
 8009d04:	4492      	add	sl, r2
 8009d06:	b289      	uxth	r1, r1
 8009d08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d0c:	f84e 1b04 	str.w	r1, [lr], #4
 8009d10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d14:	f8be 1000 	ldrh.w	r1, [lr]
 8009d18:	0c12      	lsrs	r2, r2, #16
 8009d1a:	fb09 1102 	mla	r1, r9, r2, r1
 8009d1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d22:	4567      	cmp	r7, ip
 8009d24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d28:	d8e6      	bhi.n	8009cf8 <__multiply+0x10c>
 8009d2a:	9a01      	ldr	r2, [sp, #4]
 8009d2c:	50a9      	str	r1, [r5, r2]
 8009d2e:	3504      	adds	r5, #4
 8009d30:	e79a      	b.n	8009c68 <__multiply+0x7c>
 8009d32:	3e01      	subs	r6, #1
 8009d34:	e79c      	b.n	8009c70 <__multiply+0x84>
 8009d36:	bf00      	nop
 8009d38:	0800b43c 	.word	0x0800b43c
 8009d3c:	0800b44d 	.word	0x0800b44d

08009d40 <__pow5mult>:
 8009d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d44:	4615      	mov	r5, r2
 8009d46:	f012 0203 	ands.w	r2, r2, #3
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	d007      	beq.n	8009d60 <__pow5mult+0x20>
 8009d50:	4c25      	ldr	r4, [pc, #148]	; (8009de8 <__pow5mult+0xa8>)
 8009d52:	3a01      	subs	r2, #1
 8009d54:	2300      	movs	r3, #0
 8009d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d5a:	f7ff fe9b 	bl	8009a94 <__multadd>
 8009d5e:	4607      	mov	r7, r0
 8009d60:	10ad      	asrs	r5, r5, #2
 8009d62:	d03d      	beq.n	8009de0 <__pow5mult+0xa0>
 8009d64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d66:	b97c      	cbnz	r4, 8009d88 <__pow5mult+0x48>
 8009d68:	2010      	movs	r0, #16
 8009d6a:	f7ff fe1b 	bl	80099a4 <malloc>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	6270      	str	r0, [r6, #36]	; 0x24
 8009d72:	b928      	cbnz	r0, 8009d80 <__pow5mult+0x40>
 8009d74:	4b1d      	ldr	r3, [pc, #116]	; (8009dec <__pow5mult+0xac>)
 8009d76:	481e      	ldr	r0, [pc, #120]	; (8009df0 <__pow5mult+0xb0>)
 8009d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d7c:	f000 fc0e 	bl	800a59c <__assert_func>
 8009d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d84:	6004      	str	r4, [r0, #0]
 8009d86:	60c4      	str	r4, [r0, #12]
 8009d88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d90:	b94c      	cbnz	r4, 8009da6 <__pow5mult+0x66>
 8009d92:	f240 2171 	movw	r1, #625	; 0x271
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff12 	bl	8009bc0 <__i2b>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009da2:	4604      	mov	r4, r0
 8009da4:	6003      	str	r3, [r0, #0]
 8009da6:	f04f 0900 	mov.w	r9, #0
 8009daa:	07eb      	lsls	r3, r5, #31
 8009dac:	d50a      	bpl.n	8009dc4 <__pow5mult+0x84>
 8009dae:	4639      	mov	r1, r7
 8009db0:	4622      	mov	r2, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ff1a 	bl	8009bec <__multiply>
 8009db8:	4639      	mov	r1, r7
 8009dba:	4680      	mov	r8, r0
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff fe47 	bl	8009a50 <_Bfree>
 8009dc2:	4647      	mov	r7, r8
 8009dc4:	106d      	asrs	r5, r5, #1
 8009dc6:	d00b      	beq.n	8009de0 <__pow5mult+0xa0>
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	b938      	cbnz	r0, 8009ddc <__pow5mult+0x9c>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff ff0b 	bl	8009bec <__multiply>
 8009dd6:	6020      	str	r0, [r4, #0]
 8009dd8:	f8c0 9000 	str.w	r9, [r0]
 8009ddc:	4604      	mov	r4, r0
 8009dde:	e7e4      	b.n	8009daa <__pow5mult+0x6a>
 8009de0:	4638      	mov	r0, r7
 8009de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de6:	bf00      	nop
 8009de8:	0800b5a0 	.word	0x0800b5a0
 8009dec:	0800b3ca 	.word	0x0800b3ca
 8009df0:	0800b44d 	.word	0x0800b44d

08009df4 <__lshift>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6849      	ldr	r1, [r1, #4]
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	4607      	mov	r7, r0
 8009e06:	4691      	mov	r9, r2
 8009e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e0c:	f108 0601 	add.w	r6, r8, #1
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	db0b      	blt.n	8009e2c <__lshift+0x38>
 8009e14:	4638      	mov	r0, r7
 8009e16:	f7ff fddb 	bl	80099d0 <_Balloc>
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	b948      	cbnz	r0, 8009e32 <__lshift+0x3e>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b2a      	ldr	r3, [pc, #168]	; (8009ecc <__lshift+0xd8>)
 8009e22:	482b      	ldr	r0, [pc, #172]	; (8009ed0 <__lshift+0xdc>)
 8009e24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e28:	f000 fbb8 	bl	800a59c <__assert_func>
 8009e2c:	3101      	adds	r1, #1
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	e7ee      	b.n	8009e10 <__lshift+0x1c>
 8009e32:	2300      	movs	r3, #0
 8009e34:	f100 0114 	add.w	r1, r0, #20
 8009e38:	f100 0210 	add.w	r2, r0, #16
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	4553      	cmp	r3, sl
 8009e40:	db37      	blt.n	8009eb2 <__lshift+0xbe>
 8009e42:	6920      	ldr	r0, [r4, #16]
 8009e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e48:	f104 0314 	add.w	r3, r4, #20
 8009e4c:	f019 091f 	ands.w	r9, r9, #31
 8009e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e58:	d02f      	beq.n	8009eba <__lshift+0xc6>
 8009e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e5e:	468a      	mov	sl, r1
 8009e60:	f04f 0c00 	mov.w	ip, #0
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	fa02 f209 	lsl.w	r2, r2, r9
 8009e6a:	ea42 020c 	orr.w	r2, r2, ip
 8009e6e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e76:	4298      	cmp	r0, r3
 8009e78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e7c:	d8f2      	bhi.n	8009e64 <__lshift+0x70>
 8009e7e:	1b03      	subs	r3, r0, r4
 8009e80:	3b15      	subs	r3, #21
 8009e82:	f023 0303 	bic.w	r3, r3, #3
 8009e86:	3304      	adds	r3, #4
 8009e88:	f104 0215 	add.w	r2, r4, #21
 8009e8c:	4290      	cmp	r0, r2
 8009e8e:	bf38      	it	cc
 8009e90:	2304      	movcc	r3, #4
 8009e92:	f841 c003 	str.w	ip, [r1, r3]
 8009e96:	f1bc 0f00 	cmp.w	ip, #0
 8009e9a:	d001      	beq.n	8009ea0 <__lshift+0xac>
 8009e9c:	f108 0602 	add.w	r6, r8, #2
 8009ea0:	3e01      	subs	r6, #1
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	612e      	str	r6, [r5, #16]
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	f7ff fdd2 	bl	8009a50 <_Bfree>
 8009eac:	4628      	mov	r0, r5
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	e7c1      	b.n	8009e3e <__lshift+0x4a>
 8009eba:	3904      	subs	r1, #4
 8009ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ec4:	4298      	cmp	r0, r3
 8009ec6:	d8f9      	bhi.n	8009ebc <__lshift+0xc8>
 8009ec8:	e7ea      	b.n	8009ea0 <__lshift+0xac>
 8009eca:	bf00      	nop
 8009ecc:	0800b43c 	.word	0x0800b43c
 8009ed0:	0800b44d 	.word	0x0800b44d

08009ed4 <__mcmp>:
 8009ed4:	b530      	push	{r4, r5, lr}
 8009ed6:	6902      	ldr	r2, [r0, #16]
 8009ed8:	690c      	ldr	r4, [r1, #16]
 8009eda:	1b12      	subs	r2, r2, r4
 8009edc:	d10e      	bne.n	8009efc <__mcmp+0x28>
 8009ede:	f100 0314 	add.w	r3, r0, #20
 8009ee2:	3114      	adds	r1, #20
 8009ee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009eec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ef4:	42a5      	cmp	r5, r4
 8009ef6:	d003      	beq.n	8009f00 <__mcmp+0x2c>
 8009ef8:	d305      	bcc.n	8009f06 <__mcmp+0x32>
 8009efa:	2201      	movs	r2, #1
 8009efc:	4610      	mov	r0, r2
 8009efe:	bd30      	pop	{r4, r5, pc}
 8009f00:	4283      	cmp	r3, r0
 8009f02:	d3f3      	bcc.n	8009eec <__mcmp+0x18>
 8009f04:	e7fa      	b.n	8009efc <__mcmp+0x28>
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0a:	e7f7      	b.n	8009efc <__mcmp+0x28>

08009f0c <__mdiff>:
 8009f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	460c      	mov	r4, r1
 8009f12:	4606      	mov	r6, r0
 8009f14:	4611      	mov	r1, r2
 8009f16:	4620      	mov	r0, r4
 8009f18:	4690      	mov	r8, r2
 8009f1a:	f7ff ffdb 	bl	8009ed4 <__mcmp>
 8009f1e:	1e05      	subs	r5, r0, #0
 8009f20:	d110      	bne.n	8009f44 <__mdiff+0x38>
 8009f22:	4629      	mov	r1, r5
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7ff fd53 	bl	80099d0 <_Balloc>
 8009f2a:	b930      	cbnz	r0, 8009f3a <__mdiff+0x2e>
 8009f2c:	4b3a      	ldr	r3, [pc, #232]	; (800a018 <__mdiff+0x10c>)
 8009f2e:	4602      	mov	r2, r0
 8009f30:	f240 2132 	movw	r1, #562	; 0x232
 8009f34:	4839      	ldr	r0, [pc, #228]	; (800a01c <__mdiff+0x110>)
 8009f36:	f000 fb31 	bl	800a59c <__assert_func>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	bfa4      	itt	ge
 8009f46:	4643      	movge	r3, r8
 8009f48:	46a0      	movge	r8, r4
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f50:	bfa6      	itte	ge
 8009f52:	461c      	movge	r4, r3
 8009f54:	2500      	movge	r5, #0
 8009f56:	2501      	movlt	r5, #1
 8009f58:	f7ff fd3a 	bl	80099d0 <_Balloc>
 8009f5c:	b920      	cbnz	r0, 8009f68 <__mdiff+0x5c>
 8009f5e:	4b2e      	ldr	r3, [pc, #184]	; (800a018 <__mdiff+0x10c>)
 8009f60:	4602      	mov	r2, r0
 8009f62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f66:	e7e5      	b.n	8009f34 <__mdiff+0x28>
 8009f68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f6c:	6926      	ldr	r6, [r4, #16]
 8009f6e:	60c5      	str	r5, [r0, #12]
 8009f70:	f104 0914 	add.w	r9, r4, #20
 8009f74:	f108 0514 	add.w	r5, r8, #20
 8009f78:	f100 0e14 	add.w	lr, r0, #20
 8009f7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f84:	f108 0210 	add.w	r2, r8, #16
 8009f88:	46f2      	mov	sl, lr
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f94:	fa1f f883 	uxth.w	r8, r3
 8009f98:	fa11 f18b 	uxtah	r1, r1, fp
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	eba1 0808 	sub.w	r8, r1, r8
 8009fa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009faa:	fa1f f888 	uxth.w	r8, r8
 8009fae:	1419      	asrs	r1, r3, #16
 8009fb0:	454e      	cmp	r6, r9
 8009fb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fb6:	f84a 3b04 	str.w	r3, [sl], #4
 8009fba:	d8e7      	bhi.n	8009f8c <__mdiff+0x80>
 8009fbc:	1b33      	subs	r3, r6, r4
 8009fbe:	3b15      	subs	r3, #21
 8009fc0:	f023 0303 	bic.w	r3, r3, #3
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	3415      	adds	r4, #21
 8009fc8:	42a6      	cmp	r6, r4
 8009fca:	bf38      	it	cc
 8009fcc:	2304      	movcc	r3, #4
 8009fce:	441d      	add	r5, r3
 8009fd0:	4473      	add	r3, lr
 8009fd2:	469e      	mov	lr, r3
 8009fd4:	462e      	mov	r6, r5
 8009fd6:	4566      	cmp	r6, ip
 8009fd8:	d30e      	bcc.n	8009ff8 <__mdiff+0xec>
 8009fda:	f10c 0203 	add.w	r2, ip, #3
 8009fde:	1b52      	subs	r2, r2, r5
 8009fe0:	f022 0203 	bic.w	r2, r2, #3
 8009fe4:	3d03      	subs	r5, #3
 8009fe6:	45ac      	cmp	ip, r5
 8009fe8:	bf38      	it	cc
 8009fea:	2200      	movcc	r2, #0
 8009fec:	441a      	add	r2, r3
 8009fee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ff2:	b17b      	cbz	r3, 800a014 <__mdiff+0x108>
 8009ff4:	6107      	str	r7, [r0, #16]
 8009ff6:	e7a3      	b.n	8009f40 <__mdiff+0x34>
 8009ff8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ffc:	fa11 f288 	uxtah	r2, r1, r8
 800a000:	1414      	asrs	r4, r2, #16
 800a002:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a006:	b292      	uxth	r2, r2
 800a008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a00c:	f84e 2b04 	str.w	r2, [lr], #4
 800a010:	1421      	asrs	r1, r4, #16
 800a012:	e7e0      	b.n	8009fd6 <__mdiff+0xca>
 800a014:	3f01      	subs	r7, #1
 800a016:	e7ea      	b.n	8009fee <__mdiff+0xe2>
 800a018:	0800b43c 	.word	0x0800b43c
 800a01c:	0800b44d 	.word	0x0800b44d

0800a020 <__d2b>:
 800a020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a024:	4689      	mov	r9, r1
 800a026:	2101      	movs	r1, #1
 800a028:	ec57 6b10 	vmov	r6, r7, d0
 800a02c:	4690      	mov	r8, r2
 800a02e:	f7ff fccf 	bl	80099d0 <_Balloc>
 800a032:	4604      	mov	r4, r0
 800a034:	b930      	cbnz	r0, 800a044 <__d2b+0x24>
 800a036:	4602      	mov	r2, r0
 800a038:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <__d2b+0xb0>)
 800a03a:	4826      	ldr	r0, [pc, #152]	; (800a0d4 <__d2b+0xb4>)
 800a03c:	f240 310a 	movw	r1, #778	; 0x30a
 800a040:	f000 faac 	bl	800a59c <__assert_func>
 800a044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a04c:	bb35      	cbnz	r5, 800a09c <__d2b+0x7c>
 800a04e:	2e00      	cmp	r6, #0
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	d028      	beq.n	800a0a6 <__d2b+0x86>
 800a054:	4668      	mov	r0, sp
 800a056:	9600      	str	r6, [sp, #0]
 800a058:	f7ff fd82 	bl	8009b60 <__lo0bits>
 800a05c:	9900      	ldr	r1, [sp, #0]
 800a05e:	b300      	cbz	r0, 800a0a2 <__d2b+0x82>
 800a060:	9a01      	ldr	r2, [sp, #4]
 800a062:	f1c0 0320 	rsb	r3, r0, #32
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	430b      	orrs	r3, r1
 800a06c:	40c2      	lsrs	r2, r0
 800a06e:	6163      	str	r3, [r4, #20]
 800a070:	9201      	str	r2, [sp, #4]
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	61a3      	str	r3, [r4, #24]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bf14      	ite	ne
 800a07a:	2202      	movne	r2, #2
 800a07c:	2201      	moveq	r2, #1
 800a07e:	6122      	str	r2, [r4, #16]
 800a080:	b1d5      	cbz	r5, 800a0b8 <__d2b+0x98>
 800a082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a086:	4405      	add	r5, r0
 800a088:	f8c9 5000 	str.w	r5, [r9]
 800a08c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a090:	f8c8 0000 	str.w	r0, [r8]
 800a094:	4620      	mov	r0, r4
 800a096:	b003      	add	sp, #12
 800a098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a0:	e7d5      	b.n	800a04e <__d2b+0x2e>
 800a0a2:	6161      	str	r1, [r4, #20]
 800a0a4:	e7e5      	b.n	800a072 <__d2b+0x52>
 800a0a6:	a801      	add	r0, sp, #4
 800a0a8:	f7ff fd5a 	bl	8009b60 <__lo0bits>
 800a0ac:	9b01      	ldr	r3, [sp, #4]
 800a0ae:	6163      	str	r3, [r4, #20]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	6122      	str	r2, [r4, #16]
 800a0b4:	3020      	adds	r0, #32
 800a0b6:	e7e3      	b.n	800a080 <__d2b+0x60>
 800a0b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0c0:	f8c9 0000 	str.w	r0, [r9]
 800a0c4:	6918      	ldr	r0, [r3, #16]
 800a0c6:	f7ff fd2b 	bl	8009b20 <__hi0bits>
 800a0ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ce:	e7df      	b.n	800a090 <__d2b+0x70>
 800a0d0:	0800b43c 	.word	0x0800b43c
 800a0d4:	0800b44d 	.word	0x0800b44d

0800a0d8 <_calloc_r>:
 800a0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0da:	fba1 2402 	umull	r2, r4, r1, r2
 800a0de:	b94c      	cbnz	r4, 800a0f4 <_calloc_r+0x1c>
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	9201      	str	r2, [sp, #4]
 800a0e4:	f000 f87a 	bl	800a1dc <_malloc_r>
 800a0e8:	9a01      	ldr	r2, [sp, #4]
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	b930      	cbnz	r0, 800a0fc <_calloc_r+0x24>
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	b003      	add	sp, #12
 800a0f2:	bd30      	pop	{r4, r5, pc}
 800a0f4:	220c      	movs	r2, #12
 800a0f6:	6002      	str	r2, [r0, #0]
 800a0f8:	2500      	movs	r5, #0
 800a0fa:	e7f8      	b.n	800a0ee <_calloc_r+0x16>
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f7fe f8b3 	bl	8008268 <memset>
 800a102:	e7f4      	b.n	800a0ee <_calloc_r+0x16>

0800a104 <_free_r>:
 800a104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a106:	2900      	cmp	r1, #0
 800a108:	d044      	beq.n	800a194 <_free_r+0x90>
 800a10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a10e:	9001      	str	r0, [sp, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f1a1 0404 	sub.w	r4, r1, #4
 800a116:	bfb8      	it	lt
 800a118:	18e4      	addlt	r4, r4, r3
 800a11a:	f000 fa9b 	bl	800a654 <__malloc_lock>
 800a11e:	4a1e      	ldr	r2, [pc, #120]	; (800a198 <_free_r+0x94>)
 800a120:	9801      	ldr	r0, [sp, #4]
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	b933      	cbnz	r3, 800a134 <_free_r+0x30>
 800a126:	6063      	str	r3, [r4, #4]
 800a128:	6014      	str	r4, [r2, #0]
 800a12a:	b003      	add	sp, #12
 800a12c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a130:	f000 ba96 	b.w	800a660 <__malloc_unlock>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d908      	bls.n	800a14a <_free_r+0x46>
 800a138:	6825      	ldr	r5, [r4, #0]
 800a13a:	1961      	adds	r1, r4, r5
 800a13c:	428b      	cmp	r3, r1
 800a13e:	bf01      	itttt	eq
 800a140:	6819      	ldreq	r1, [r3, #0]
 800a142:	685b      	ldreq	r3, [r3, #4]
 800a144:	1949      	addeq	r1, r1, r5
 800a146:	6021      	streq	r1, [r4, #0]
 800a148:	e7ed      	b.n	800a126 <_free_r+0x22>
 800a14a:	461a      	mov	r2, r3
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b10b      	cbz	r3, 800a154 <_free_r+0x50>
 800a150:	42a3      	cmp	r3, r4
 800a152:	d9fa      	bls.n	800a14a <_free_r+0x46>
 800a154:	6811      	ldr	r1, [r2, #0]
 800a156:	1855      	adds	r5, r2, r1
 800a158:	42a5      	cmp	r5, r4
 800a15a:	d10b      	bne.n	800a174 <_free_r+0x70>
 800a15c:	6824      	ldr	r4, [r4, #0]
 800a15e:	4421      	add	r1, r4
 800a160:	1854      	adds	r4, r2, r1
 800a162:	42a3      	cmp	r3, r4
 800a164:	6011      	str	r1, [r2, #0]
 800a166:	d1e0      	bne.n	800a12a <_free_r+0x26>
 800a168:	681c      	ldr	r4, [r3, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	6053      	str	r3, [r2, #4]
 800a16e:	4421      	add	r1, r4
 800a170:	6011      	str	r1, [r2, #0]
 800a172:	e7da      	b.n	800a12a <_free_r+0x26>
 800a174:	d902      	bls.n	800a17c <_free_r+0x78>
 800a176:	230c      	movs	r3, #12
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	e7d6      	b.n	800a12a <_free_r+0x26>
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	1961      	adds	r1, r4, r5
 800a180:	428b      	cmp	r3, r1
 800a182:	bf04      	itt	eq
 800a184:	6819      	ldreq	r1, [r3, #0]
 800a186:	685b      	ldreq	r3, [r3, #4]
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	bf04      	itt	eq
 800a18c:	1949      	addeq	r1, r1, r5
 800a18e:	6021      	streq	r1, [r4, #0]
 800a190:	6054      	str	r4, [r2, #4]
 800a192:	e7ca      	b.n	800a12a <_free_r+0x26>
 800a194:	b003      	add	sp, #12
 800a196:	bd30      	pop	{r4, r5, pc}
 800a198:	20000528 	.word	0x20000528

0800a19c <sbrk_aligned>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	4e0e      	ldr	r6, [pc, #56]	; (800a1d8 <sbrk_aligned+0x3c>)
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	6831      	ldr	r1, [r6, #0]
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	b911      	cbnz	r1, 800a1ae <sbrk_aligned+0x12>
 800a1a8:	f000 f9e8 	bl	800a57c <_sbrk_r>
 800a1ac:	6030      	str	r0, [r6, #0]
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 f9e3 	bl	800a57c <_sbrk_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d00a      	beq.n	800a1d0 <sbrk_aligned+0x34>
 800a1ba:	1cc4      	adds	r4, r0, #3
 800a1bc:	f024 0403 	bic.w	r4, r4, #3
 800a1c0:	42a0      	cmp	r0, r4
 800a1c2:	d007      	beq.n	800a1d4 <sbrk_aligned+0x38>
 800a1c4:	1a21      	subs	r1, r4, r0
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 f9d8 	bl	800a57c <_sbrk_r>
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d101      	bne.n	800a1d4 <sbrk_aligned+0x38>
 800a1d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	2000052c 	.word	0x2000052c

0800a1dc <_malloc_r>:
 800a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e0:	1ccd      	adds	r5, r1, #3
 800a1e2:	f025 0503 	bic.w	r5, r5, #3
 800a1e6:	3508      	adds	r5, #8
 800a1e8:	2d0c      	cmp	r5, #12
 800a1ea:	bf38      	it	cc
 800a1ec:	250c      	movcc	r5, #12
 800a1ee:	2d00      	cmp	r5, #0
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	db01      	blt.n	800a1f8 <_malloc_r+0x1c>
 800a1f4:	42a9      	cmp	r1, r5
 800a1f6:	d905      	bls.n	800a204 <_malloc_r+0x28>
 800a1f8:	230c      	movs	r3, #12
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	4630      	mov	r0, r6
 800a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a204:	4e2e      	ldr	r6, [pc, #184]	; (800a2c0 <_malloc_r+0xe4>)
 800a206:	f000 fa25 	bl	800a654 <__malloc_lock>
 800a20a:	6833      	ldr	r3, [r6, #0]
 800a20c:	461c      	mov	r4, r3
 800a20e:	bb34      	cbnz	r4, 800a25e <_malloc_r+0x82>
 800a210:	4629      	mov	r1, r5
 800a212:	4638      	mov	r0, r7
 800a214:	f7ff ffc2 	bl	800a19c <sbrk_aligned>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	4604      	mov	r4, r0
 800a21c:	d14d      	bne.n	800a2ba <_malloc_r+0xde>
 800a21e:	6834      	ldr	r4, [r6, #0]
 800a220:	4626      	mov	r6, r4
 800a222:	2e00      	cmp	r6, #0
 800a224:	d140      	bne.n	800a2a8 <_malloc_r+0xcc>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	4631      	mov	r1, r6
 800a22a:	4638      	mov	r0, r7
 800a22c:	eb04 0803 	add.w	r8, r4, r3
 800a230:	f000 f9a4 	bl	800a57c <_sbrk_r>
 800a234:	4580      	cmp	r8, r0
 800a236:	d13a      	bne.n	800a2ae <_malloc_r+0xd2>
 800a238:	6821      	ldr	r1, [r4, #0]
 800a23a:	3503      	adds	r5, #3
 800a23c:	1a6d      	subs	r5, r5, r1
 800a23e:	f025 0503 	bic.w	r5, r5, #3
 800a242:	3508      	adds	r5, #8
 800a244:	2d0c      	cmp	r5, #12
 800a246:	bf38      	it	cc
 800a248:	250c      	movcc	r5, #12
 800a24a:	4629      	mov	r1, r5
 800a24c:	4638      	mov	r0, r7
 800a24e:	f7ff ffa5 	bl	800a19c <sbrk_aligned>
 800a252:	3001      	adds	r0, #1
 800a254:	d02b      	beq.n	800a2ae <_malloc_r+0xd2>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	442b      	add	r3, r5
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	e00e      	b.n	800a27c <_malloc_r+0xa0>
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	1b52      	subs	r2, r2, r5
 800a262:	d41e      	bmi.n	800a2a2 <_malloc_r+0xc6>
 800a264:	2a0b      	cmp	r2, #11
 800a266:	d916      	bls.n	800a296 <_malloc_r+0xba>
 800a268:	1961      	adds	r1, r4, r5
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	6025      	str	r5, [r4, #0]
 800a26e:	bf18      	it	ne
 800a270:	6059      	strne	r1, [r3, #4]
 800a272:	6863      	ldr	r3, [r4, #4]
 800a274:	bf08      	it	eq
 800a276:	6031      	streq	r1, [r6, #0]
 800a278:	5162      	str	r2, [r4, r5]
 800a27a:	604b      	str	r3, [r1, #4]
 800a27c:	4638      	mov	r0, r7
 800a27e:	f104 060b 	add.w	r6, r4, #11
 800a282:	f000 f9ed 	bl	800a660 <__malloc_unlock>
 800a286:	f026 0607 	bic.w	r6, r6, #7
 800a28a:	1d23      	adds	r3, r4, #4
 800a28c:	1af2      	subs	r2, r6, r3
 800a28e:	d0b6      	beq.n	800a1fe <_malloc_r+0x22>
 800a290:	1b9b      	subs	r3, r3, r6
 800a292:	50a3      	str	r3, [r4, r2]
 800a294:	e7b3      	b.n	800a1fe <_malloc_r+0x22>
 800a296:	6862      	ldr	r2, [r4, #4]
 800a298:	42a3      	cmp	r3, r4
 800a29a:	bf0c      	ite	eq
 800a29c:	6032      	streq	r2, [r6, #0]
 800a29e:	605a      	strne	r2, [r3, #4]
 800a2a0:	e7ec      	b.n	800a27c <_malloc_r+0xa0>
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	6864      	ldr	r4, [r4, #4]
 800a2a6:	e7b2      	b.n	800a20e <_malloc_r+0x32>
 800a2a8:	4634      	mov	r4, r6
 800a2aa:	6876      	ldr	r6, [r6, #4]
 800a2ac:	e7b9      	b.n	800a222 <_malloc_r+0x46>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	603b      	str	r3, [r7, #0]
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f000 f9d4 	bl	800a660 <__malloc_unlock>
 800a2b8:	e7a1      	b.n	800a1fe <_malloc_r+0x22>
 800a2ba:	6025      	str	r5, [r4, #0]
 800a2bc:	e7de      	b.n	800a27c <_malloc_r+0xa0>
 800a2be:	bf00      	nop
 800a2c0:	20000528 	.word	0x20000528

0800a2c4 <__ssputs_r>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	688e      	ldr	r6, [r1, #8]
 800a2ca:	429e      	cmp	r6, r3
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	4690      	mov	r8, r2
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	d838      	bhi.n	800a348 <__ssputs_r+0x84>
 800a2d6:	898a      	ldrh	r2, [r1, #12]
 800a2d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2dc:	d032      	beq.n	800a344 <__ssputs_r+0x80>
 800a2de:	6825      	ldr	r5, [r4, #0]
 800a2e0:	6909      	ldr	r1, [r1, #16]
 800a2e2:	eba5 0901 	sub.w	r9, r5, r1
 800a2e6:	6965      	ldr	r5, [r4, #20]
 800a2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	444b      	add	r3, r9
 800a2f4:	106d      	asrs	r5, r5, #1
 800a2f6:	429d      	cmp	r5, r3
 800a2f8:	bf38      	it	cc
 800a2fa:	461d      	movcc	r5, r3
 800a2fc:	0553      	lsls	r3, r2, #21
 800a2fe:	d531      	bpl.n	800a364 <__ssputs_r+0xa0>
 800a300:	4629      	mov	r1, r5
 800a302:	f7ff ff6b 	bl	800a1dc <_malloc_r>
 800a306:	4606      	mov	r6, r0
 800a308:	b950      	cbnz	r0, 800a320 <__ssputs_r+0x5c>
 800a30a:	230c      	movs	r3, #12
 800a30c:	f8ca 3000 	str.w	r3, [sl]
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a320:	6921      	ldr	r1, [r4, #16]
 800a322:	464a      	mov	r2, r9
 800a324:	f7ff fb46 	bl	80099b4 <memcpy>
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	6126      	str	r6, [r4, #16]
 800a336:	6165      	str	r5, [r4, #20]
 800a338:	444e      	add	r6, r9
 800a33a:	eba5 0509 	sub.w	r5, r5, r9
 800a33e:	6026      	str	r6, [r4, #0]
 800a340:	60a5      	str	r5, [r4, #8]
 800a342:	463e      	mov	r6, r7
 800a344:	42be      	cmp	r6, r7
 800a346:	d900      	bls.n	800a34a <__ssputs_r+0x86>
 800a348:	463e      	mov	r6, r7
 800a34a:	6820      	ldr	r0, [r4, #0]
 800a34c:	4632      	mov	r2, r6
 800a34e:	4641      	mov	r1, r8
 800a350:	f000 f966 	bl	800a620 <memmove>
 800a354:	68a3      	ldr	r3, [r4, #8]
 800a356:	1b9b      	subs	r3, r3, r6
 800a358:	60a3      	str	r3, [r4, #8]
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	4433      	add	r3, r6
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	2000      	movs	r0, #0
 800a362:	e7db      	b.n	800a31c <__ssputs_r+0x58>
 800a364:	462a      	mov	r2, r5
 800a366:	f000 f981 	bl	800a66c <_realloc_r>
 800a36a:	4606      	mov	r6, r0
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1e1      	bne.n	800a334 <__ssputs_r+0x70>
 800a370:	6921      	ldr	r1, [r4, #16]
 800a372:	4650      	mov	r0, sl
 800a374:	f7ff fec6 	bl	800a104 <_free_r>
 800a378:	e7c7      	b.n	800a30a <__ssputs_r+0x46>
	...

0800a37c <_svfiprintf_r>:
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	4698      	mov	r8, r3
 800a382:	898b      	ldrh	r3, [r1, #12]
 800a384:	061b      	lsls	r3, r3, #24
 800a386:	b09d      	sub	sp, #116	; 0x74
 800a388:	4607      	mov	r7, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	4614      	mov	r4, r2
 800a38e:	d50e      	bpl.n	800a3ae <_svfiprintf_r+0x32>
 800a390:	690b      	ldr	r3, [r1, #16]
 800a392:	b963      	cbnz	r3, 800a3ae <_svfiprintf_r+0x32>
 800a394:	2140      	movs	r1, #64	; 0x40
 800a396:	f7ff ff21 	bl	800a1dc <_malloc_r>
 800a39a:	6028      	str	r0, [r5, #0]
 800a39c:	6128      	str	r0, [r5, #16]
 800a39e:	b920      	cbnz	r0, 800a3aa <_svfiprintf_r+0x2e>
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	603b      	str	r3, [r7, #0]
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	e0d1      	b.n	800a54e <_svfiprintf_r+0x1d2>
 800a3aa:	2340      	movs	r3, #64	; 0x40
 800a3ac:	616b      	str	r3, [r5, #20]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b2:	2320      	movs	r3, #32
 800a3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3bc:	2330      	movs	r3, #48	; 0x30
 800a3be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a568 <_svfiprintf_r+0x1ec>
 800a3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3c6:	f04f 0901 	mov.w	r9, #1
 800a3ca:	4623      	mov	r3, r4
 800a3cc:	469a      	mov	sl, r3
 800a3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d2:	b10a      	cbz	r2, 800a3d8 <_svfiprintf_r+0x5c>
 800a3d4:	2a25      	cmp	r2, #37	; 0x25
 800a3d6:	d1f9      	bne.n	800a3cc <_svfiprintf_r+0x50>
 800a3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3dc:	d00b      	beq.n	800a3f6 <_svfiprintf_r+0x7a>
 800a3de:	465b      	mov	r3, fp
 800a3e0:	4622      	mov	r2, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f7ff ff6d 	bl	800a2c4 <__ssputs_r>
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f000 80aa 	beq.w	800a544 <_svfiprintf_r+0x1c8>
 800a3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f2:	445a      	add	r2, fp
 800a3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 80a2 	beq.w	800a544 <_svfiprintf_r+0x1c8>
 800a400:	2300      	movs	r3, #0
 800a402:	f04f 32ff 	mov.w	r2, #4294967295
 800a406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a40a:	f10a 0a01 	add.w	sl, sl, #1
 800a40e:	9304      	str	r3, [sp, #16]
 800a410:	9307      	str	r3, [sp, #28]
 800a412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a416:	931a      	str	r3, [sp, #104]	; 0x68
 800a418:	4654      	mov	r4, sl
 800a41a:	2205      	movs	r2, #5
 800a41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a420:	4851      	ldr	r0, [pc, #324]	; (800a568 <_svfiprintf_r+0x1ec>)
 800a422:	f7f5 fee5 	bl	80001f0 <memchr>
 800a426:	9a04      	ldr	r2, [sp, #16]
 800a428:	b9d8      	cbnz	r0, 800a462 <_svfiprintf_r+0xe6>
 800a42a:	06d0      	lsls	r0, r2, #27
 800a42c:	bf44      	itt	mi
 800a42e:	2320      	movmi	r3, #32
 800a430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a434:	0711      	lsls	r1, r2, #28
 800a436:	bf44      	itt	mi
 800a438:	232b      	movmi	r3, #43	; 0x2b
 800a43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a43e:	f89a 3000 	ldrb.w	r3, [sl]
 800a442:	2b2a      	cmp	r3, #42	; 0x2a
 800a444:	d015      	beq.n	800a472 <_svfiprintf_r+0xf6>
 800a446:	9a07      	ldr	r2, [sp, #28]
 800a448:	4654      	mov	r4, sl
 800a44a:	2000      	movs	r0, #0
 800a44c:	f04f 0c0a 	mov.w	ip, #10
 800a450:	4621      	mov	r1, r4
 800a452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a456:	3b30      	subs	r3, #48	; 0x30
 800a458:	2b09      	cmp	r3, #9
 800a45a:	d94e      	bls.n	800a4fa <_svfiprintf_r+0x17e>
 800a45c:	b1b0      	cbz	r0, 800a48c <_svfiprintf_r+0x110>
 800a45e:	9207      	str	r2, [sp, #28]
 800a460:	e014      	b.n	800a48c <_svfiprintf_r+0x110>
 800a462:	eba0 0308 	sub.w	r3, r0, r8
 800a466:	fa09 f303 	lsl.w	r3, r9, r3
 800a46a:	4313      	orrs	r3, r2
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	46a2      	mov	sl, r4
 800a470:	e7d2      	b.n	800a418 <_svfiprintf_r+0x9c>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	1d19      	adds	r1, r3, #4
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	9103      	str	r1, [sp, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bfbb      	ittet	lt
 800a47e:	425b      	neglt	r3, r3
 800a480:	f042 0202 	orrlt.w	r2, r2, #2
 800a484:	9307      	strge	r3, [sp, #28]
 800a486:	9307      	strlt	r3, [sp, #28]
 800a488:	bfb8      	it	lt
 800a48a:	9204      	strlt	r2, [sp, #16]
 800a48c:	7823      	ldrb	r3, [r4, #0]
 800a48e:	2b2e      	cmp	r3, #46	; 0x2e
 800a490:	d10c      	bne.n	800a4ac <_svfiprintf_r+0x130>
 800a492:	7863      	ldrb	r3, [r4, #1]
 800a494:	2b2a      	cmp	r3, #42	; 0x2a
 800a496:	d135      	bne.n	800a504 <_svfiprintf_r+0x188>
 800a498:	9b03      	ldr	r3, [sp, #12]
 800a49a:	1d1a      	adds	r2, r3, #4
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	9203      	str	r2, [sp, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	bfb8      	it	lt
 800a4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4a8:	3402      	adds	r4, #2
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a578 <_svfiprintf_r+0x1fc>
 800a4b0:	7821      	ldrb	r1, [r4, #0]
 800a4b2:	2203      	movs	r2, #3
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	f7f5 fe9b 	bl	80001f0 <memchr>
 800a4ba:	b140      	cbz	r0, 800a4ce <_svfiprintf_r+0x152>
 800a4bc:	2340      	movs	r3, #64	; 0x40
 800a4be:	eba0 000a 	sub.w	r0, r0, sl
 800a4c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	4303      	orrs	r3, r0
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d2:	4826      	ldr	r0, [pc, #152]	; (800a56c <_svfiprintf_r+0x1f0>)
 800a4d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4d8:	2206      	movs	r2, #6
 800a4da:	f7f5 fe89 	bl	80001f0 <memchr>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d038      	beq.n	800a554 <_svfiprintf_r+0x1d8>
 800a4e2:	4b23      	ldr	r3, [pc, #140]	; (800a570 <_svfiprintf_r+0x1f4>)
 800a4e4:	bb1b      	cbnz	r3, 800a52e <_svfiprintf_r+0x1b2>
 800a4e6:	9b03      	ldr	r3, [sp, #12]
 800a4e8:	3307      	adds	r3, #7
 800a4ea:	f023 0307 	bic.w	r3, r3, #7
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	9303      	str	r3, [sp, #12]
 800a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f4:	4433      	add	r3, r6
 800a4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f8:	e767      	b.n	800a3ca <_svfiprintf_r+0x4e>
 800a4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4fe:	460c      	mov	r4, r1
 800a500:	2001      	movs	r0, #1
 800a502:	e7a5      	b.n	800a450 <_svfiprintf_r+0xd4>
 800a504:	2300      	movs	r3, #0
 800a506:	3401      	adds	r4, #1
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	4619      	mov	r1, r3
 800a50c:	f04f 0c0a 	mov.w	ip, #10
 800a510:	4620      	mov	r0, r4
 800a512:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a516:	3a30      	subs	r2, #48	; 0x30
 800a518:	2a09      	cmp	r2, #9
 800a51a:	d903      	bls.n	800a524 <_svfiprintf_r+0x1a8>
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0c5      	beq.n	800a4ac <_svfiprintf_r+0x130>
 800a520:	9105      	str	r1, [sp, #20]
 800a522:	e7c3      	b.n	800a4ac <_svfiprintf_r+0x130>
 800a524:	fb0c 2101 	mla	r1, ip, r1, r2
 800a528:	4604      	mov	r4, r0
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7f0      	b.n	800a510 <_svfiprintf_r+0x194>
 800a52e:	ab03      	add	r3, sp, #12
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	462a      	mov	r2, r5
 800a534:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <_svfiprintf_r+0x1f8>)
 800a536:	a904      	add	r1, sp, #16
 800a538:	4638      	mov	r0, r7
 800a53a:	f7fd ff3d 	bl	80083b8 <_printf_float>
 800a53e:	1c42      	adds	r2, r0, #1
 800a540:	4606      	mov	r6, r0
 800a542:	d1d6      	bne.n	800a4f2 <_svfiprintf_r+0x176>
 800a544:	89ab      	ldrh	r3, [r5, #12]
 800a546:	065b      	lsls	r3, r3, #25
 800a548:	f53f af2c 	bmi.w	800a3a4 <_svfiprintf_r+0x28>
 800a54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a54e:	b01d      	add	sp, #116	; 0x74
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a554:	ab03      	add	r3, sp, #12
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	462a      	mov	r2, r5
 800a55a:	4b06      	ldr	r3, [pc, #24]	; (800a574 <_svfiprintf_r+0x1f8>)
 800a55c:	a904      	add	r1, sp, #16
 800a55e:	4638      	mov	r0, r7
 800a560:	f7fe f9ce 	bl	8008900 <_printf_i>
 800a564:	e7eb      	b.n	800a53e <_svfiprintf_r+0x1c2>
 800a566:	bf00      	nop
 800a568:	0800b5ac 	.word	0x0800b5ac
 800a56c:	0800b5b6 	.word	0x0800b5b6
 800a570:	080083b9 	.word	0x080083b9
 800a574:	0800a2c5 	.word	0x0800a2c5
 800a578:	0800b5b2 	.word	0x0800b5b2

0800a57c <_sbrk_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4d06      	ldr	r5, [pc, #24]	; (800a598 <_sbrk_r+0x1c>)
 800a580:	2300      	movs	r3, #0
 800a582:	4604      	mov	r4, r0
 800a584:	4608      	mov	r0, r1
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	f7f8 fb92 	bl	8002cb0 <_sbrk>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_sbrk_r+0x1a>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	b103      	cbz	r3, 800a596 <_sbrk_r+0x1a>
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	20000530 	.word	0x20000530

0800a59c <__assert_func>:
 800a59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a59e:	4614      	mov	r4, r2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <__assert_func+0x2c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	68d8      	ldr	r0, [r3, #12]
 800a5aa:	b14c      	cbz	r4, 800a5c0 <__assert_func+0x24>
 800a5ac:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <__assert_func+0x30>)
 800a5ae:	9100      	str	r1, [sp, #0]
 800a5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5b4:	4906      	ldr	r1, [pc, #24]	; (800a5d0 <__assert_func+0x34>)
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f000 f80e 	bl	800a5d8 <fiprintf>
 800a5bc:	f000 faac 	bl	800ab18 <abort>
 800a5c0:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <__assert_func+0x38>)
 800a5c2:	461c      	mov	r4, r3
 800a5c4:	e7f3      	b.n	800a5ae <__assert_func+0x12>
 800a5c6:	bf00      	nop
 800a5c8:	2000001c 	.word	0x2000001c
 800a5cc:	0800b5bd 	.word	0x0800b5bd
 800a5d0:	0800b5ca 	.word	0x0800b5ca
 800a5d4:	0800b5f8 	.word	0x0800b5f8

0800a5d8 <fiprintf>:
 800a5d8:	b40e      	push	{r1, r2, r3}
 800a5da:	b503      	push	{r0, r1, lr}
 800a5dc:	4601      	mov	r1, r0
 800a5de:	ab03      	add	r3, sp, #12
 800a5e0:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <fiprintf+0x20>)
 800a5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e6:	6800      	ldr	r0, [r0, #0]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f000 f897 	bl	800a71c <_vfiprintf_r>
 800a5ee:	b002      	add	sp, #8
 800a5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f4:	b003      	add	sp, #12
 800a5f6:	4770      	bx	lr
 800a5f8:	2000001c 	.word	0x2000001c

0800a5fc <__ascii_mbtowc>:
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	b901      	cbnz	r1, 800a602 <__ascii_mbtowc+0x6>
 800a600:	a901      	add	r1, sp, #4
 800a602:	b142      	cbz	r2, 800a616 <__ascii_mbtowc+0x1a>
 800a604:	b14b      	cbz	r3, 800a61a <__ascii_mbtowc+0x1e>
 800a606:	7813      	ldrb	r3, [r2, #0]
 800a608:	600b      	str	r3, [r1, #0]
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	1e10      	subs	r0, r2, #0
 800a60e:	bf18      	it	ne
 800a610:	2001      	movne	r0, #1
 800a612:	b002      	add	sp, #8
 800a614:	4770      	bx	lr
 800a616:	4610      	mov	r0, r2
 800a618:	e7fb      	b.n	800a612 <__ascii_mbtowc+0x16>
 800a61a:	f06f 0001 	mvn.w	r0, #1
 800a61e:	e7f8      	b.n	800a612 <__ascii_mbtowc+0x16>

0800a620 <memmove>:
 800a620:	4288      	cmp	r0, r1
 800a622:	b510      	push	{r4, lr}
 800a624:	eb01 0402 	add.w	r4, r1, r2
 800a628:	d902      	bls.n	800a630 <memmove+0x10>
 800a62a:	4284      	cmp	r4, r0
 800a62c:	4623      	mov	r3, r4
 800a62e:	d807      	bhi.n	800a640 <memmove+0x20>
 800a630:	1e43      	subs	r3, r0, #1
 800a632:	42a1      	cmp	r1, r4
 800a634:	d008      	beq.n	800a648 <memmove+0x28>
 800a636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a63a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a63e:	e7f8      	b.n	800a632 <memmove+0x12>
 800a640:	4402      	add	r2, r0
 800a642:	4601      	mov	r1, r0
 800a644:	428a      	cmp	r2, r1
 800a646:	d100      	bne.n	800a64a <memmove+0x2a>
 800a648:	bd10      	pop	{r4, pc}
 800a64a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a64e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a652:	e7f7      	b.n	800a644 <memmove+0x24>

0800a654 <__malloc_lock>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__malloc_lock+0x8>)
 800a656:	f000 bc1f 	b.w	800ae98 <__retarget_lock_acquire_recursive>
 800a65a:	bf00      	nop
 800a65c:	20000534 	.word	0x20000534

0800a660 <__malloc_unlock>:
 800a660:	4801      	ldr	r0, [pc, #4]	; (800a668 <__malloc_unlock+0x8>)
 800a662:	f000 bc1a 	b.w	800ae9a <__retarget_lock_release_recursive>
 800a666:	bf00      	nop
 800a668:	20000534 	.word	0x20000534

0800a66c <_realloc_r>:
 800a66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a670:	4680      	mov	r8, r0
 800a672:	4614      	mov	r4, r2
 800a674:	460e      	mov	r6, r1
 800a676:	b921      	cbnz	r1, 800a682 <_realloc_r+0x16>
 800a678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67c:	4611      	mov	r1, r2
 800a67e:	f7ff bdad 	b.w	800a1dc <_malloc_r>
 800a682:	b92a      	cbnz	r2, 800a690 <_realloc_r+0x24>
 800a684:	f7ff fd3e 	bl	800a104 <_free_r>
 800a688:	4625      	mov	r5, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a690:	f000 fc6a 	bl	800af68 <_malloc_usable_size_r>
 800a694:	4284      	cmp	r4, r0
 800a696:	4607      	mov	r7, r0
 800a698:	d802      	bhi.n	800a6a0 <_realloc_r+0x34>
 800a69a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a69e:	d812      	bhi.n	800a6c6 <_realloc_r+0x5a>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f7ff fd9a 	bl	800a1dc <_malloc_r>
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d0ed      	beq.n	800a68a <_realloc_r+0x1e>
 800a6ae:	42bc      	cmp	r4, r7
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	bf28      	it	cs
 800a6b6:	463a      	movcs	r2, r7
 800a6b8:	f7ff f97c 	bl	80099b4 <memcpy>
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4640      	mov	r0, r8
 800a6c0:	f7ff fd20 	bl	800a104 <_free_r>
 800a6c4:	e7e1      	b.n	800a68a <_realloc_r+0x1e>
 800a6c6:	4635      	mov	r5, r6
 800a6c8:	e7df      	b.n	800a68a <_realloc_r+0x1e>

0800a6ca <__sfputc_r>:
 800a6ca:	6893      	ldr	r3, [r2, #8]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	b410      	push	{r4}
 800a6d2:	6093      	str	r3, [r2, #8]
 800a6d4:	da08      	bge.n	800a6e8 <__sfputc_r+0x1e>
 800a6d6:	6994      	ldr	r4, [r2, #24]
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	db01      	blt.n	800a6e0 <__sfputc_r+0x16>
 800a6dc:	290a      	cmp	r1, #10
 800a6de:	d103      	bne.n	800a6e8 <__sfputc_r+0x1e>
 800a6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6e4:	f000 b94a 	b.w	800a97c <__swbuf_r>
 800a6e8:	6813      	ldr	r3, [r2, #0]
 800a6ea:	1c58      	adds	r0, r3, #1
 800a6ec:	6010      	str	r0, [r2, #0]
 800a6ee:	7019      	strb	r1, [r3, #0]
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <__sfputs_r>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	4614      	mov	r4, r2
 800a700:	18d5      	adds	r5, r2, r3
 800a702:	42ac      	cmp	r4, r5
 800a704:	d101      	bne.n	800a70a <__sfputs_r+0x12>
 800a706:	2000      	movs	r0, #0
 800a708:	e007      	b.n	800a71a <__sfputs_r+0x22>
 800a70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70e:	463a      	mov	r2, r7
 800a710:	4630      	mov	r0, r6
 800a712:	f7ff ffda 	bl	800a6ca <__sfputc_r>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d1f3      	bne.n	800a702 <__sfputs_r+0xa>
 800a71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a71c <_vfiprintf_r>:
 800a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	460d      	mov	r5, r1
 800a722:	b09d      	sub	sp, #116	; 0x74
 800a724:	4614      	mov	r4, r2
 800a726:	4698      	mov	r8, r3
 800a728:	4606      	mov	r6, r0
 800a72a:	b118      	cbz	r0, 800a734 <_vfiprintf_r+0x18>
 800a72c:	6983      	ldr	r3, [r0, #24]
 800a72e:	b90b      	cbnz	r3, 800a734 <_vfiprintf_r+0x18>
 800a730:	f000 fb14 	bl	800ad5c <__sinit>
 800a734:	4b89      	ldr	r3, [pc, #548]	; (800a95c <_vfiprintf_r+0x240>)
 800a736:	429d      	cmp	r5, r3
 800a738:	d11b      	bne.n	800a772 <_vfiprintf_r+0x56>
 800a73a:	6875      	ldr	r5, [r6, #4]
 800a73c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a73e:	07d9      	lsls	r1, r3, #31
 800a740:	d405      	bmi.n	800a74e <_vfiprintf_r+0x32>
 800a742:	89ab      	ldrh	r3, [r5, #12]
 800a744:	059a      	lsls	r2, r3, #22
 800a746:	d402      	bmi.n	800a74e <_vfiprintf_r+0x32>
 800a748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a74a:	f000 fba5 	bl	800ae98 <__retarget_lock_acquire_recursive>
 800a74e:	89ab      	ldrh	r3, [r5, #12]
 800a750:	071b      	lsls	r3, r3, #28
 800a752:	d501      	bpl.n	800a758 <_vfiprintf_r+0x3c>
 800a754:	692b      	ldr	r3, [r5, #16]
 800a756:	b9eb      	cbnz	r3, 800a794 <_vfiprintf_r+0x78>
 800a758:	4629      	mov	r1, r5
 800a75a:	4630      	mov	r0, r6
 800a75c:	f000 f96e 	bl	800aa3c <__swsetup_r>
 800a760:	b1c0      	cbz	r0, 800a794 <_vfiprintf_r+0x78>
 800a762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a764:	07dc      	lsls	r4, r3, #31
 800a766:	d50e      	bpl.n	800a786 <_vfiprintf_r+0x6a>
 800a768:	f04f 30ff 	mov.w	r0, #4294967295
 800a76c:	b01d      	add	sp, #116	; 0x74
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	4b7b      	ldr	r3, [pc, #492]	; (800a960 <_vfiprintf_r+0x244>)
 800a774:	429d      	cmp	r5, r3
 800a776:	d101      	bne.n	800a77c <_vfiprintf_r+0x60>
 800a778:	68b5      	ldr	r5, [r6, #8]
 800a77a:	e7df      	b.n	800a73c <_vfiprintf_r+0x20>
 800a77c:	4b79      	ldr	r3, [pc, #484]	; (800a964 <_vfiprintf_r+0x248>)
 800a77e:	429d      	cmp	r5, r3
 800a780:	bf08      	it	eq
 800a782:	68f5      	ldreq	r5, [r6, #12]
 800a784:	e7da      	b.n	800a73c <_vfiprintf_r+0x20>
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	0598      	lsls	r0, r3, #22
 800a78a:	d4ed      	bmi.n	800a768 <_vfiprintf_r+0x4c>
 800a78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a78e:	f000 fb84 	bl	800ae9a <__retarget_lock_release_recursive>
 800a792:	e7e9      	b.n	800a768 <_vfiprintf_r+0x4c>
 800a794:	2300      	movs	r3, #0
 800a796:	9309      	str	r3, [sp, #36]	; 0x24
 800a798:	2320      	movs	r3, #32
 800a79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7a2:	2330      	movs	r3, #48	; 0x30
 800a7a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a968 <_vfiprintf_r+0x24c>
 800a7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ac:	f04f 0901 	mov.w	r9, #1
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	469a      	mov	sl, r3
 800a7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b8:	b10a      	cbz	r2, 800a7be <_vfiprintf_r+0xa2>
 800a7ba:	2a25      	cmp	r2, #37	; 0x25
 800a7bc:	d1f9      	bne.n	800a7b2 <_vfiprintf_r+0x96>
 800a7be:	ebba 0b04 	subs.w	fp, sl, r4
 800a7c2:	d00b      	beq.n	800a7dc <_vfiprintf_r+0xc0>
 800a7c4:	465b      	mov	r3, fp
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff ff94 	bl	800a6f8 <__sfputs_r>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f000 80aa 	beq.w	800a92a <_vfiprintf_r+0x20e>
 800a7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d8:	445a      	add	r2, fp
 800a7da:	9209      	str	r2, [sp, #36]	; 0x24
 800a7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 80a2 	beq.w	800a92a <_vfiprintf_r+0x20e>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f0:	f10a 0a01 	add.w	sl, sl, #1
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7fe:	4654      	mov	r4, sl
 800a800:	2205      	movs	r2, #5
 800a802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a806:	4858      	ldr	r0, [pc, #352]	; (800a968 <_vfiprintf_r+0x24c>)
 800a808:	f7f5 fcf2 	bl	80001f0 <memchr>
 800a80c:	9a04      	ldr	r2, [sp, #16]
 800a80e:	b9d8      	cbnz	r0, 800a848 <_vfiprintf_r+0x12c>
 800a810:	06d1      	lsls	r1, r2, #27
 800a812:	bf44      	itt	mi
 800a814:	2320      	movmi	r3, #32
 800a816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a81a:	0713      	lsls	r3, r2, #28
 800a81c:	bf44      	itt	mi
 800a81e:	232b      	movmi	r3, #43	; 0x2b
 800a820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a824:	f89a 3000 	ldrb.w	r3, [sl]
 800a828:	2b2a      	cmp	r3, #42	; 0x2a
 800a82a:	d015      	beq.n	800a858 <_vfiprintf_r+0x13c>
 800a82c:	9a07      	ldr	r2, [sp, #28]
 800a82e:	4654      	mov	r4, sl
 800a830:	2000      	movs	r0, #0
 800a832:	f04f 0c0a 	mov.w	ip, #10
 800a836:	4621      	mov	r1, r4
 800a838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a83c:	3b30      	subs	r3, #48	; 0x30
 800a83e:	2b09      	cmp	r3, #9
 800a840:	d94e      	bls.n	800a8e0 <_vfiprintf_r+0x1c4>
 800a842:	b1b0      	cbz	r0, 800a872 <_vfiprintf_r+0x156>
 800a844:	9207      	str	r2, [sp, #28]
 800a846:	e014      	b.n	800a872 <_vfiprintf_r+0x156>
 800a848:	eba0 0308 	sub.w	r3, r0, r8
 800a84c:	fa09 f303 	lsl.w	r3, r9, r3
 800a850:	4313      	orrs	r3, r2
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	46a2      	mov	sl, r4
 800a856:	e7d2      	b.n	800a7fe <_vfiprintf_r+0xe2>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	1d19      	adds	r1, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	9103      	str	r1, [sp, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfbb      	ittet	lt
 800a864:	425b      	neglt	r3, r3
 800a866:	f042 0202 	orrlt.w	r2, r2, #2
 800a86a:	9307      	strge	r3, [sp, #28]
 800a86c:	9307      	strlt	r3, [sp, #28]
 800a86e:	bfb8      	it	lt
 800a870:	9204      	strlt	r2, [sp, #16]
 800a872:	7823      	ldrb	r3, [r4, #0]
 800a874:	2b2e      	cmp	r3, #46	; 0x2e
 800a876:	d10c      	bne.n	800a892 <_vfiprintf_r+0x176>
 800a878:	7863      	ldrb	r3, [r4, #1]
 800a87a:	2b2a      	cmp	r3, #42	; 0x2a
 800a87c:	d135      	bne.n	800a8ea <_vfiprintf_r+0x1ce>
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	1d1a      	adds	r2, r3, #4
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	9203      	str	r2, [sp, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfb8      	it	lt
 800a88a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a88e:	3402      	adds	r4, #2
 800a890:	9305      	str	r3, [sp, #20]
 800a892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a978 <_vfiprintf_r+0x25c>
 800a896:	7821      	ldrb	r1, [r4, #0]
 800a898:	2203      	movs	r2, #3
 800a89a:	4650      	mov	r0, sl
 800a89c:	f7f5 fca8 	bl	80001f0 <memchr>
 800a8a0:	b140      	cbz	r0, 800a8b4 <_vfiprintf_r+0x198>
 800a8a2:	2340      	movs	r3, #64	; 0x40
 800a8a4:	eba0 000a 	sub.w	r0, r0, sl
 800a8a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	4303      	orrs	r3, r0
 800a8b0:	3401      	adds	r4, #1
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b8:	482c      	ldr	r0, [pc, #176]	; (800a96c <_vfiprintf_r+0x250>)
 800a8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8be:	2206      	movs	r2, #6
 800a8c0:	f7f5 fc96 	bl	80001f0 <memchr>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d03f      	beq.n	800a948 <_vfiprintf_r+0x22c>
 800a8c8:	4b29      	ldr	r3, [pc, #164]	; (800a970 <_vfiprintf_r+0x254>)
 800a8ca:	bb1b      	cbnz	r3, 800a914 <_vfiprintf_r+0x1f8>
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	3307      	adds	r3, #7
 800a8d0:	f023 0307 	bic.w	r3, r3, #7
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	9303      	str	r3, [sp, #12]
 800a8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8da:	443b      	add	r3, r7
 800a8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8de:	e767      	b.n	800a7b0 <_vfiprintf_r+0x94>
 800a8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	e7a5      	b.n	800a836 <_vfiprintf_r+0x11a>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	3401      	adds	r4, #1
 800a8ee:	9305      	str	r3, [sp, #20]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	f04f 0c0a 	mov.w	ip, #10
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8fc:	3a30      	subs	r2, #48	; 0x30
 800a8fe:	2a09      	cmp	r2, #9
 800a900:	d903      	bls.n	800a90a <_vfiprintf_r+0x1ee>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0c5      	beq.n	800a892 <_vfiprintf_r+0x176>
 800a906:	9105      	str	r1, [sp, #20]
 800a908:	e7c3      	b.n	800a892 <_vfiprintf_r+0x176>
 800a90a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a90e:	4604      	mov	r4, r0
 800a910:	2301      	movs	r3, #1
 800a912:	e7f0      	b.n	800a8f6 <_vfiprintf_r+0x1da>
 800a914:	ab03      	add	r3, sp, #12
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	462a      	mov	r2, r5
 800a91a:	4b16      	ldr	r3, [pc, #88]	; (800a974 <_vfiprintf_r+0x258>)
 800a91c:	a904      	add	r1, sp, #16
 800a91e:	4630      	mov	r0, r6
 800a920:	f7fd fd4a 	bl	80083b8 <_printf_float>
 800a924:	4607      	mov	r7, r0
 800a926:	1c78      	adds	r0, r7, #1
 800a928:	d1d6      	bne.n	800a8d8 <_vfiprintf_r+0x1bc>
 800a92a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a92c:	07d9      	lsls	r1, r3, #31
 800a92e:	d405      	bmi.n	800a93c <_vfiprintf_r+0x220>
 800a930:	89ab      	ldrh	r3, [r5, #12]
 800a932:	059a      	lsls	r2, r3, #22
 800a934:	d402      	bmi.n	800a93c <_vfiprintf_r+0x220>
 800a936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a938:	f000 faaf 	bl	800ae9a <__retarget_lock_release_recursive>
 800a93c:	89ab      	ldrh	r3, [r5, #12]
 800a93e:	065b      	lsls	r3, r3, #25
 800a940:	f53f af12 	bmi.w	800a768 <_vfiprintf_r+0x4c>
 800a944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a946:	e711      	b.n	800a76c <_vfiprintf_r+0x50>
 800a948:	ab03      	add	r3, sp, #12
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	462a      	mov	r2, r5
 800a94e:	4b09      	ldr	r3, [pc, #36]	; (800a974 <_vfiprintf_r+0x258>)
 800a950:	a904      	add	r1, sp, #16
 800a952:	4630      	mov	r0, r6
 800a954:	f7fd ffd4 	bl	8008900 <_printf_i>
 800a958:	e7e4      	b.n	800a924 <_vfiprintf_r+0x208>
 800a95a:	bf00      	nop
 800a95c:	0800b624 	.word	0x0800b624
 800a960:	0800b644 	.word	0x0800b644
 800a964:	0800b604 	.word	0x0800b604
 800a968:	0800b5ac 	.word	0x0800b5ac
 800a96c:	0800b5b6 	.word	0x0800b5b6
 800a970:	080083b9 	.word	0x080083b9
 800a974:	0800a6f9 	.word	0x0800a6f9
 800a978:	0800b5b2 	.word	0x0800b5b2

0800a97c <__swbuf_r>:
 800a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97e:	460e      	mov	r6, r1
 800a980:	4614      	mov	r4, r2
 800a982:	4605      	mov	r5, r0
 800a984:	b118      	cbz	r0, 800a98e <__swbuf_r+0x12>
 800a986:	6983      	ldr	r3, [r0, #24]
 800a988:	b90b      	cbnz	r3, 800a98e <__swbuf_r+0x12>
 800a98a:	f000 f9e7 	bl	800ad5c <__sinit>
 800a98e:	4b21      	ldr	r3, [pc, #132]	; (800aa14 <__swbuf_r+0x98>)
 800a990:	429c      	cmp	r4, r3
 800a992:	d12b      	bne.n	800a9ec <__swbuf_r+0x70>
 800a994:	686c      	ldr	r4, [r5, #4]
 800a996:	69a3      	ldr	r3, [r4, #24]
 800a998:	60a3      	str	r3, [r4, #8]
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	071a      	lsls	r2, r3, #28
 800a99e:	d52f      	bpl.n	800aa00 <__swbuf_r+0x84>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	b36b      	cbz	r3, 800aa00 <__swbuf_r+0x84>
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	6820      	ldr	r0, [r4, #0]
 800a9a8:	1ac0      	subs	r0, r0, r3
 800a9aa:	6963      	ldr	r3, [r4, #20]
 800a9ac:	b2f6      	uxtb	r6, r6
 800a9ae:	4283      	cmp	r3, r0
 800a9b0:	4637      	mov	r7, r6
 800a9b2:	dc04      	bgt.n	800a9be <__swbuf_r+0x42>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 f93c 	bl	800ac34 <_fflush_r>
 800a9bc:	bb30      	cbnz	r0, 800aa0c <__swbuf_r+0x90>
 800a9be:	68a3      	ldr	r3, [r4, #8]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	60a3      	str	r3, [r4, #8]
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	6022      	str	r2, [r4, #0]
 800a9ca:	701e      	strb	r6, [r3, #0]
 800a9cc:	6963      	ldr	r3, [r4, #20]
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	4283      	cmp	r3, r0
 800a9d2:	d004      	beq.n	800a9de <__swbuf_r+0x62>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	07db      	lsls	r3, r3, #31
 800a9d8:	d506      	bpl.n	800a9e8 <__swbuf_r+0x6c>
 800a9da:	2e0a      	cmp	r6, #10
 800a9dc:	d104      	bne.n	800a9e8 <__swbuf_r+0x6c>
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f000 f927 	bl	800ac34 <_fflush_r>
 800a9e6:	b988      	cbnz	r0, 800aa0c <__swbuf_r+0x90>
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ec:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <__swbuf_r+0x9c>)
 800a9ee:	429c      	cmp	r4, r3
 800a9f0:	d101      	bne.n	800a9f6 <__swbuf_r+0x7a>
 800a9f2:	68ac      	ldr	r4, [r5, #8]
 800a9f4:	e7cf      	b.n	800a996 <__swbuf_r+0x1a>
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <__swbuf_r+0xa0>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	bf08      	it	eq
 800a9fc:	68ec      	ldreq	r4, [r5, #12]
 800a9fe:	e7ca      	b.n	800a996 <__swbuf_r+0x1a>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f81a 	bl	800aa3c <__swsetup_r>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0cb      	beq.n	800a9a4 <__swbuf_r+0x28>
 800aa0c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa10:	e7ea      	b.n	800a9e8 <__swbuf_r+0x6c>
 800aa12:	bf00      	nop
 800aa14:	0800b624 	.word	0x0800b624
 800aa18:	0800b644 	.word	0x0800b644
 800aa1c:	0800b604 	.word	0x0800b604

0800aa20 <__ascii_wctomb>:
 800aa20:	b149      	cbz	r1, 800aa36 <__ascii_wctomb+0x16>
 800aa22:	2aff      	cmp	r2, #255	; 0xff
 800aa24:	bf85      	ittet	hi
 800aa26:	238a      	movhi	r3, #138	; 0x8a
 800aa28:	6003      	strhi	r3, [r0, #0]
 800aa2a:	700a      	strbls	r2, [r1, #0]
 800aa2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa30:	bf98      	it	ls
 800aa32:	2001      	movls	r0, #1
 800aa34:	4770      	bx	lr
 800aa36:	4608      	mov	r0, r1
 800aa38:	4770      	bx	lr
	...

0800aa3c <__swsetup_r>:
 800aa3c:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <__swsetup_r+0xcc>)
 800aa3e:	b570      	push	{r4, r5, r6, lr}
 800aa40:	681d      	ldr	r5, [r3, #0]
 800aa42:	4606      	mov	r6, r0
 800aa44:	460c      	mov	r4, r1
 800aa46:	b125      	cbz	r5, 800aa52 <__swsetup_r+0x16>
 800aa48:	69ab      	ldr	r3, [r5, #24]
 800aa4a:	b913      	cbnz	r3, 800aa52 <__swsetup_r+0x16>
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 f985 	bl	800ad5c <__sinit>
 800aa52:	4b2e      	ldr	r3, [pc, #184]	; (800ab0c <__swsetup_r+0xd0>)
 800aa54:	429c      	cmp	r4, r3
 800aa56:	d10f      	bne.n	800aa78 <__swsetup_r+0x3c>
 800aa58:	686c      	ldr	r4, [r5, #4]
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa60:	0719      	lsls	r1, r3, #28
 800aa62:	d42c      	bmi.n	800aabe <__swsetup_r+0x82>
 800aa64:	06dd      	lsls	r5, r3, #27
 800aa66:	d411      	bmi.n	800aa8c <__swsetup_r+0x50>
 800aa68:	2309      	movs	r3, #9
 800aa6a:	6033      	str	r3, [r6, #0]
 800aa6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	f04f 30ff 	mov.w	r0, #4294967295
 800aa76:	e03e      	b.n	800aaf6 <__swsetup_r+0xba>
 800aa78:	4b25      	ldr	r3, [pc, #148]	; (800ab10 <__swsetup_r+0xd4>)
 800aa7a:	429c      	cmp	r4, r3
 800aa7c:	d101      	bne.n	800aa82 <__swsetup_r+0x46>
 800aa7e:	68ac      	ldr	r4, [r5, #8]
 800aa80:	e7eb      	b.n	800aa5a <__swsetup_r+0x1e>
 800aa82:	4b24      	ldr	r3, [pc, #144]	; (800ab14 <__swsetup_r+0xd8>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	bf08      	it	eq
 800aa88:	68ec      	ldreq	r4, [r5, #12]
 800aa8a:	e7e6      	b.n	800aa5a <__swsetup_r+0x1e>
 800aa8c:	0758      	lsls	r0, r3, #29
 800aa8e:	d512      	bpl.n	800aab6 <__swsetup_r+0x7a>
 800aa90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa92:	b141      	cbz	r1, 800aaa6 <__swsetup_r+0x6a>
 800aa94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	d002      	beq.n	800aaa2 <__swsetup_r+0x66>
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff fb31 	bl	800a104 <_free_r>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6363      	str	r3, [r4, #52]	; 0x34
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	2300      	movs	r3, #0
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f043 0308 	orr.w	r3, r3, #8
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	b94b      	cbnz	r3, 800aad6 <__swsetup_r+0x9a>
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aacc:	d003      	beq.n	800aad6 <__swsetup_r+0x9a>
 800aace:	4621      	mov	r1, r4
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 fa09 	bl	800aee8 <__smakebuf_r>
 800aad6:	89a0      	ldrh	r0, [r4, #12]
 800aad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aadc:	f010 0301 	ands.w	r3, r0, #1
 800aae0:	d00a      	beq.n	800aaf8 <__swsetup_r+0xbc>
 800aae2:	2300      	movs	r3, #0
 800aae4:	60a3      	str	r3, [r4, #8]
 800aae6:	6963      	ldr	r3, [r4, #20]
 800aae8:	425b      	negs	r3, r3
 800aaea:	61a3      	str	r3, [r4, #24]
 800aaec:	6923      	ldr	r3, [r4, #16]
 800aaee:	b943      	cbnz	r3, 800ab02 <__swsetup_r+0xc6>
 800aaf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaf4:	d1ba      	bne.n	800aa6c <__swsetup_r+0x30>
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	0781      	lsls	r1, r0, #30
 800aafa:	bf58      	it	pl
 800aafc:	6963      	ldrpl	r3, [r4, #20]
 800aafe:	60a3      	str	r3, [r4, #8]
 800ab00:	e7f4      	b.n	800aaec <__swsetup_r+0xb0>
 800ab02:	2000      	movs	r0, #0
 800ab04:	e7f7      	b.n	800aaf6 <__swsetup_r+0xba>
 800ab06:	bf00      	nop
 800ab08:	2000001c 	.word	0x2000001c
 800ab0c:	0800b624 	.word	0x0800b624
 800ab10:	0800b644 	.word	0x0800b644
 800ab14:	0800b604 	.word	0x0800b604

0800ab18 <abort>:
 800ab18:	b508      	push	{r3, lr}
 800ab1a:	2006      	movs	r0, #6
 800ab1c:	f000 fa54 	bl	800afc8 <raise>
 800ab20:	2001      	movs	r0, #1
 800ab22:	f7f8 f84d 	bl	8002bc0 <_exit>
	...

0800ab28 <__sflush_r>:
 800ab28:	898a      	ldrh	r2, [r1, #12]
 800ab2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	4605      	mov	r5, r0
 800ab30:	0710      	lsls	r0, r2, #28
 800ab32:	460c      	mov	r4, r1
 800ab34:	d458      	bmi.n	800abe8 <__sflush_r+0xc0>
 800ab36:	684b      	ldr	r3, [r1, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	dc05      	bgt.n	800ab48 <__sflush_r+0x20>
 800ab3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	dc02      	bgt.n	800ab48 <__sflush_r+0x20>
 800ab42:	2000      	movs	r0, #0
 800ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab4a:	2e00      	cmp	r6, #0
 800ab4c:	d0f9      	beq.n	800ab42 <__sflush_r+0x1a>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab54:	682f      	ldr	r7, [r5, #0]
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	d032      	beq.n	800abc0 <__sflush_r+0x98>
 800ab5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	075a      	lsls	r2, r3, #29
 800ab60:	d505      	bpl.n	800ab6e <__sflush_r+0x46>
 800ab62:	6863      	ldr	r3, [r4, #4]
 800ab64:	1ac0      	subs	r0, r0, r3
 800ab66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab68:	b10b      	cbz	r3, 800ab6e <__sflush_r+0x46>
 800ab6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab6c:	1ac0      	subs	r0, r0, r3
 800ab6e:	2300      	movs	r3, #0
 800ab70:	4602      	mov	r2, r0
 800ab72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab74:	6a21      	ldr	r1, [r4, #32]
 800ab76:	4628      	mov	r0, r5
 800ab78:	47b0      	blx	r6
 800ab7a:	1c43      	adds	r3, r0, #1
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	d106      	bne.n	800ab8e <__sflush_r+0x66>
 800ab80:	6829      	ldr	r1, [r5, #0]
 800ab82:	291d      	cmp	r1, #29
 800ab84:	d82c      	bhi.n	800abe0 <__sflush_r+0xb8>
 800ab86:	4a2a      	ldr	r2, [pc, #168]	; (800ac30 <__sflush_r+0x108>)
 800ab88:	40ca      	lsrs	r2, r1
 800ab8a:	07d6      	lsls	r6, r2, #31
 800ab8c:	d528      	bpl.n	800abe0 <__sflush_r+0xb8>
 800ab8e:	2200      	movs	r2, #0
 800ab90:	6062      	str	r2, [r4, #4]
 800ab92:	04d9      	lsls	r1, r3, #19
 800ab94:	6922      	ldr	r2, [r4, #16]
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	d504      	bpl.n	800aba4 <__sflush_r+0x7c>
 800ab9a:	1c42      	adds	r2, r0, #1
 800ab9c:	d101      	bne.n	800aba2 <__sflush_r+0x7a>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	b903      	cbnz	r3, 800aba4 <__sflush_r+0x7c>
 800aba2:	6560      	str	r0, [r4, #84]	; 0x54
 800aba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aba6:	602f      	str	r7, [r5, #0]
 800aba8:	2900      	cmp	r1, #0
 800abaa:	d0ca      	beq.n	800ab42 <__sflush_r+0x1a>
 800abac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb0:	4299      	cmp	r1, r3
 800abb2:	d002      	beq.n	800abba <__sflush_r+0x92>
 800abb4:	4628      	mov	r0, r5
 800abb6:	f7ff faa5 	bl	800a104 <_free_r>
 800abba:	2000      	movs	r0, #0
 800abbc:	6360      	str	r0, [r4, #52]	; 0x34
 800abbe:	e7c1      	b.n	800ab44 <__sflush_r+0x1c>
 800abc0:	6a21      	ldr	r1, [r4, #32]
 800abc2:	2301      	movs	r3, #1
 800abc4:	4628      	mov	r0, r5
 800abc6:	47b0      	blx	r6
 800abc8:	1c41      	adds	r1, r0, #1
 800abca:	d1c7      	bne.n	800ab5c <__sflush_r+0x34>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0c4      	beq.n	800ab5c <__sflush_r+0x34>
 800abd2:	2b1d      	cmp	r3, #29
 800abd4:	d001      	beq.n	800abda <__sflush_r+0xb2>
 800abd6:	2b16      	cmp	r3, #22
 800abd8:	d101      	bne.n	800abde <__sflush_r+0xb6>
 800abda:	602f      	str	r7, [r5, #0]
 800abdc:	e7b1      	b.n	800ab42 <__sflush_r+0x1a>
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abe4:	81a3      	strh	r3, [r4, #12]
 800abe6:	e7ad      	b.n	800ab44 <__sflush_r+0x1c>
 800abe8:	690f      	ldr	r7, [r1, #16]
 800abea:	2f00      	cmp	r7, #0
 800abec:	d0a9      	beq.n	800ab42 <__sflush_r+0x1a>
 800abee:	0793      	lsls	r3, r2, #30
 800abf0:	680e      	ldr	r6, [r1, #0]
 800abf2:	bf08      	it	eq
 800abf4:	694b      	ldreq	r3, [r1, #20]
 800abf6:	600f      	str	r7, [r1, #0]
 800abf8:	bf18      	it	ne
 800abfa:	2300      	movne	r3, #0
 800abfc:	eba6 0807 	sub.w	r8, r6, r7
 800ac00:	608b      	str	r3, [r1, #8]
 800ac02:	f1b8 0f00 	cmp.w	r8, #0
 800ac06:	dd9c      	ble.n	800ab42 <__sflush_r+0x1a>
 800ac08:	6a21      	ldr	r1, [r4, #32]
 800ac0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac0c:	4643      	mov	r3, r8
 800ac0e:	463a      	mov	r2, r7
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b0      	blx	r6
 800ac14:	2800      	cmp	r0, #0
 800ac16:	dc06      	bgt.n	800ac26 <__sflush_r+0xfe>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295
 800ac24:	e78e      	b.n	800ab44 <__sflush_r+0x1c>
 800ac26:	4407      	add	r7, r0
 800ac28:	eba8 0800 	sub.w	r8, r8, r0
 800ac2c:	e7e9      	b.n	800ac02 <__sflush_r+0xda>
 800ac2e:	bf00      	nop
 800ac30:	20400001 	.word	0x20400001

0800ac34 <_fflush_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	690b      	ldr	r3, [r1, #16]
 800ac38:	4605      	mov	r5, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	b913      	cbnz	r3, 800ac44 <_fflush_r+0x10>
 800ac3e:	2500      	movs	r5, #0
 800ac40:	4628      	mov	r0, r5
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	b118      	cbz	r0, 800ac4e <_fflush_r+0x1a>
 800ac46:	6983      	ldr	r3, [r0, #24]
 800ac48:	b90b      	cbnz	r3, 800ac4e <_fflush_r+0x1a>
 800ac4a:	f000 f887 	bl	800ad5c <__sinit>
 800ac4e:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <_fflush_r+0x6c>)
 800ac50:	429c      	cmp	r4, r3
 800ac52:	d11b      	bne.n	800ac8c <_fflush_r+0x58>
 800ac54:	686c      	ldr	r4, [r5, #4]
 800ac56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0ef      	beq.n	800ac3e <_fflush_r+0xa>
 800ac5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac60:	07d0      	lsls	r0, r2, #31
 800ac62:	d404      	bmi.n	800ac6e <_fflush_r+0x3a>
 800ac64:	0599      	lsls	r1, r3, #22
 800ac66:	d402      	bmi.n	800ac6e <_fflush_r+0x3a>
 800ac68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6a:	f000 f915 	bl	800ae98 <__retarget_lock_acquire_recursive>
 800ac6e:	4628      	mov	r0, r5
 800ac70:	4621      	mov	r1, r4
 800ac72:	f7ff ff59 	bl	800ab28 <__sflush_r>
 800ac76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac78:	07da      	lsls	r2, r3, #31
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	d4e0      	bmi.n	800ac40 <_fflush_r+0xc>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	059b      	lsls	r3, r3, #22
 800ac82:	d4dd      	bmi.n	800ac40 <_fflush_r+0xc>
 800ac84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac86:	f000 f908 	bl	800ae9a <__retarget_lock_release_recursive>
 800ac8a:	e7d9      	b.n	800ac40 <_fflush_r+0xc>
 800ac8c:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <_fflush_r+0x70>)
 800ac8e:	429c      	cmp	r4, r3
 800ac90:	d101      	bne.n	800ac96 <_fflush_r+0x62>
 800ac92:	68ac      	ldr	r4, [r5, #8]
 800ac94:	e7df      	b.n	800ac56 <_fflush_r+0x22>
 800ac96:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <_fflush_r+0x74>)
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	bf08      	it	eq
 800ac9c:	68ec      	ldreq	r4, [r5, #12]
 800ac9e:	e7da      	b.n	800ac56 <_fflush_r+0x22>
 800aca0:	0800b624 	.word	0x0800b624
 800aca4:	0800b644 	.word	0x0800b644
 800aca8:	0800b604 	.word	0x0800b604

0800acac <std>:
 800acac:	2300      	movs	r3, #0
 800acae:	b510      	push	{r4, lr}
 800acb0:	4604      	mov	r4, r0
 800acb2:	e9c0 3300 	strd	r3, r3, [r0]
 800acb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acba:	6083      	str	r3, [r0, #8]
 800acbc:	8181      	strh	r1, [r0, #12]
 800acbe:	6643      	str	r3, [r0, #100]	; 0x64
 800acc0:	81c2      	strh	r2, [r0, #14]
 800acc2:	6183      	str	r3, [r0, #24]
 800acc4:	4619      	mov	r1, r3
 800acc6:	2208      	movs	r2, #8
 800acc8:	305c      	adds	r0, #92	; 0x5c
 800acca:	f7fd facd 	bl	8008268 <memset>
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <std+0x38>)
 800acd0:	6263      	str	r3, [r4, #36]	; 0x24
 800acd2:	4b05      	ldr	r3, [pc, #20]	; (800ace8 <std+0x3c>)
 800acd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800acd6:	4b05      	ldr	r3, [pc, #20]	; (800acec <std+0x40>)
 800acd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <std+0x44>)
 800acdc:	6224      	str	r4, [r4, #32]
 800acde:	6323      	str	r3, [r4, #48]	; 0x30
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	bf00      	nop
 800ace4:	0800b001 	.word	0x0800b001
 800ace8:	0800b023 	.word	0x0800b023
 800acec:	0800b05b 	.word	0x0800b05b
 800acf0:	0800b07f 	.word	0x0800b07f

0800acf4 <_cleanup_r>:
 800acf4:	4901      	ldr	r1, [pc, #4]	; (800acfc <_cleanup_r+0x8>)
 800acf6:	f000 b8af 	b.w	800ae58 <_fwalk_reent>
 800acfa:	bf00      	nop
 800acfc:	0800ac35 	.word	0x0800ac35

0800ad00 <__sfmoreglue>:
 800ad00:	b570      	push	{r4, r5, r6, lr}
 800ad02:	2268      	movs	r2, #104	; 0x68
 800ad04:	1e4d      	subs	r5, r1, #1
 800ad06:	4355      	muls	r5, r2
 800ad08:	460e      	mov	r6, r1
 800ad0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad0e:	f7ff fa65 	bl	800a1dc <_malloc_r>
 800ad12:	4604      	mov	r4, r0
 800ad14:	b140      	cbz	r0, 800ad28 <__sfmoreglue+0x28>
 800ad16:	2100      	movs	r1, #0
 800ad18:	e9c0 1600 	strd	r1, r6, [r0]
 800ad1c:	300c      	adds	r0, #12
 800ad1e:	60a0      	str	r0, [r4, #8]
 800ad20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad24:	f7fd faa0 	bl	8008268 <memset>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	bd70      	pop	{r4, r5, r6, pc}

0800ad2c <__sfp_lock_acquire>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sfp_lock_acquire+0x8>)
 800ad2e:	f000 b8b3 	b.w	800ae98 <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	20000535 	.word	0x20000535

0800ad38 <__sfp_lock_release>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__sfp_lock_release+0x8>)
 800ad3a:	f000 b8ae 	b.w	800ae9a <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	20000535 	.word	0x20000535

0800ad44 <__sinit_lock_acquire>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__sinit_lock_acquire+0x8>)
 800ad46:	f000 b8a7 	b.w	800ae98 <__retarget_lock_acquire_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20000536 	.word	0x20000536

0800ad50 <__sinit_lock_release>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__sinit_lock_release+0x8>)
 800ad52:	f000 b8a2 	b.w	800ae9a <__retarget_lock_release_recursive>
 800ad56:	bf00      	nop
 800ad58:	20000536 	.word	0x20000536

0800ad5c <__sinit>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	4604      	mov	r4, r0
 800ad60:	f7ff fff0 	bl	800ad44 <__sinit_lock_acquire>
 800ad64:	69a3      	ldr	r3, [r4, #24]
 800ad66:	b11b      	cbz	r3, 800ad70 <__sinit+0x14>
 800ad68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad6c:	f7ff bff0 	b.w	800ad50 <__sinit_lock_release>
 800ad70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad74:	6523      	str	r3, [r4, #80]	; 0x50
 800ad76:	4b13      	ldr	r3, [pc, #76]	; (800adc4 <__sinit+0x68>)
 800ad78:	4a13      	ldr	r2, [pc, #76]	; (800adc8 <__sinit+0x6c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad7e:	42a3      	cmp	r3, r4
 800ad80:	bf04      	itt	eq
 800ad82:	2301      	moveq	r3, #1
 800ad84:	61a3      	streq	r3, [r4, #24]
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 f820 	bl	800adcc <__sfp>
 800ad8c:	6060      	str	r0, [r4, #4]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f81c 	bl	800adcc <__sfp>
 800ad94:	60a0      	str	r0, [r4, #8]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 f818 	bl	800adcc <__sfp>
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	60e0      	str	r0, [r4, #12]
 800ada0:	2104      	movs	r1, #4
 800ada2:	6860      	ldr	r0, [r4, #4]
 800ada4:	f7ff ff82 	bl	800acac <std>
 800ada8:	68a0      	ldr	r0, [r4, #8]
 800adaa:	2201      	movs	r2, #1
 800adac:	2109      	movs	r1, #9
 800adae:	f7ff ff7d 	bl	800acac <std>
 800adb2:	68e0      	ldr	r0, [r4, #12]
 800adb4:	2202      	movs	r2, #2
 800adb6:	2112      	movs	r1, #18
 800adb8:	f7ff ff78 	bl	800acac <std>
 800adbc:	2301      	movs	r3, #1
 800adbe:	61a3      	str	r3, [r4, #24]
 800adc0:	e7d2      	b.n	800ad68 <__sinit+0xc>
 800adc2:	bf00      	nop
 800adc4:	0800b284 	.word	0x0800b284
 800adc8:	0800acf5 	.word	0x0800acf5

0800adcc <__sfp>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	4607      	mov	r7, r0
 800add0:	f7ff ffac 	bl	800ad2c <__sfp_lock_acquire>
 800add4:	4b1e      	ldr	r3, [pc, #120]	; (800ae50 <__sfp+0x84>)
 800add6:	681e      	ldr	r6, [r3, #0]
 800add8:	69b3      	ldr	r3, [r6, #24]
 800adda:	b913      	cbnz	r3, 800ade2 <__sfp+0x16>
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff ffbd 	bl	800ad5c <__sinit>
 800ade2:	3648      	adds	r6, #72	; 0x48
 800ade4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ade8:	3b01      	subs	r3, #1
 800adea:	d503      	bpl.n	800adf4 <__sfp+0x28>
 800adec:	6833      	ldr	r3, [r6, #0]
 800adee:	b30b      	cbz	r3, 800ae34 <__sfp+0x68>
 800adf0:	6836      	ldr	r6, [r6, #0]
 800adf2:	e7f7      	b.n	800ade4 <__sfp+0x18>
 800adf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adf8:	b9d5      	cbnz	r5, 800ae30 <__sfp+0x64>
 800adfa:	4b16      	ldr	r3, [pc, #88]	; (800ae54 <__sfp+0x88>)
 800adfc:	60e3      	str	r3, [r4, #12]
 800adfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae02:	6665      	str	r5, [r4, #100]	; 0x64
 800ae04:	f000 f847 	bl	800ae96 <__retarget_lock_init_recursive>
 800ae08:	f7ff ff96 	bl	800ad38 <__sfp_lock_release>
 800ae0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae14:	6025      	str	r5, [r4, #0]
 800ae16:	61a5      	str	r5, [r4, #24]
 800ae18:	2208      	movs	r2, #8
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae20:	f7fd fa22 	bl	8008268 <memset>
 800ae24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae30:	3468      	adds	r4, #104	; 0x68
 800ae32:	e7d9      	b.n	800ade8 <__sfp+0x1c>
 800ae34:	2104      	movs	r1, #4
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7ff ff62 	bl	800ad00 <__sfmoreglue>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	6030      	str	r0, [r6, #0]
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d1d5      	bne.n	800adf0 <__sfp+0x24>
 800ae44:	f7ff ff78 	bl	800ad38 <__sfp_lock_release>
 800ae48:	230c      	movs	r3, #12
 800ae4a:	603b      	str	r3, [r7, #0]
 800ae4c:	e7ee      	b.n	800ae2c <__sfp+0x60>
 800ae4e:	bf00      	nop
 800ae50:	0800b284 	.word	0x0800b284
 800ae54:	ffff0001 	.word	0xffff0001

0800ae58 <_fwalk_reent>:
 800ae58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	4688      	mov	r8, r1
 800ae60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae64:	2700      	movs	r7, #0
 800ae66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae6e:	d505      	bpl.n	800ae7c <_fwalk_reent+0x24>
 800ae70:	6824      	ldr	r4, [r4, #0]
 800ae72:	2c00      	cmp	r4, #0
 800ae74:	d1f7      	bne.n	800ae66 <_fwalk_reent+0xe>
 800ae76:	4638      	mov	r0, r7
 800ae78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae7c:	89ab      	ldrh	r3, [r5, #12]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d907      	bls.n	800ae92 <_fwalk_reent+0x3a>
 800ae82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae86:	3301      	adds	r3, #1
 800ae88:	d003      	beq.n	800ae92 <_fwalk_reent+0x3a>
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	47c0      	blx	r8
 800ae90:	4307      	orrs	r7, r0
 800ae92:	3568      	adds	r5, #104	; 0x68
 800ae94:	e7e9      	b.n	800ae6a <_fwalk_reent+0x12>

0800ae96 <__retarget_lock_init_recursive>:
 800ae96:	4770      	bx	lr

0800ae98 <__retarget_lock_acquire_recursive>:
 800ae98:	4770      	bx	lr

0800ae9a <__retarget_lock_release_recursive>:
 800ae9a:	4770      	bx	lr

0800ae9c <__swhatbuf_r>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	460e      	mov	r6, r1
 800aea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea4:	2900      	cmp	r1, #0
 800aea6:	b096      	sub	sp, #88	; 0x58
 800aea8:	4614      	mov	r4, r2
 800aeaa:	461d      	mov	r5, r3
 800aeac:	da08      	bge.n	800aec0 <__swhatbuf_r+0x24>
 800aeae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	602a      	str	r2, [r5, #0]
 800aeb6:	061a      	lsls	r2, r3, #24
 800aeb8:	d410      	bmi.n	800aedc <__swhatbuf_r+0x40>
 800aeba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aebe:	e00e      	b.n	800aede <__swhatbuf_r+0x42>
 800aec0:	466a      	mov	r2, sp
 800aec2:	f000 f903 	bl	800b0cc <_fstat_r>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	dbf1      	blt.n	800aeae <__swhatbuf_r+0x12>
 800aeca:	9a01      	ldr	r2, [sp, #4]
 800aecc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aed0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aed4:	425a      	negs	r2, r3
 800aed6:	415a      	adcs	r2, r3
 800aed8:	602a      	str	r2, [r5, #0]
 800aeda:	e7ee      	b.n	800aeba <__swhatbuf_r+0x1e>
 800aedc:	2340      	movs	r3, #64	; 0x40
 800aede:	2000      	movs	r0, #0
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	b016      	add	sp, #88	; 0x58
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aee8 <__smakebuf_r>:
 800aee8:	898b      	ldrh	r3, [r1, #12]
 800aeea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aeec:	079d      	lsls	r5, r3, #30
 800aeee:	4606      	mov	r6, r0
 800aef0:	460c      	mov	r4, r1
 800aef2:	d507      	bpl.n	800af04 <__smakebuf_r+0x1c>
 800aef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	6123      	str	r3, [r4, #16]
 800aefc:	2301      	movs	r3, #1
 800aefe:	6163      	str	r3, [r4, #20]
 800af00:	b002      	add	sp, #8
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	ab01      	add	r3, sp, #4
 800af06:	466a      	mov	r2, sp
 800af08:	f7ff ffc8 	bl	800ae9c <__swhatbuf_r>
 800af0c:	9900      	ldr	r1, [sp, #0]
 800af0e:	4605      	mov	r5, r0
 800af10:	4630      	mov	r0, r6
 800af12:	f7ff f963 	bl	800a1dc <_malloc_r>
 800af16:	b948      	cbnz	r0, 800af2c <__smakebuf_r+0x44>
 800af18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af1c:	059a      	lsls	r2, r3, #22
 800af1e:	d4ef      	bmi.n	800af00 <__smakebuf_r+0x18>
 800af20:	f023 0303 	bic.w	r3, r3, #3
 800af24:	f043 0302 	orr.w	r3, r3, #2
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	e7e3      	b.n	800aef4 <__smakebuf_r+0xc>
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <__smakebuf_r+0x7c>)
 800af2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	6020      	str	r0, [r4, #0]
 800af34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	9b00      	ldr	r3, [sp, #0]
 800af3c:	6163      	str	r3, [r4, #20]
 800af3e:	9b01      	ldr	r3, [sp, #4]
 800af40:	6120      	str	r0, [r4, #16]
 800af42:	b15b      	cbz	r3, 800af5c <__smakebuf_r+0x74>
 800af44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af48:	4630      	mov	r0, r6
 800af4a:	f000 f8d1 	bl	800b0f0 <_isatty_r>
 800af4e:	b128      	cbz	r0, 800af5c <__smakebuf_r+0x74>
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	f023 0303 	bic.w	r3, r3, #3
 800af56:	f043 0301 	orr.w	r3, r3, #1
 800af5a:	81a3      	strh	r3, [r4, #12]
 800af5c:	89a0      	ldrh	r0, [r4, #12]
 800af5e:	4305      	orrs	r5, r0
 800af60:	81a5      	strh	r5, [r4, #12]
 800af62:	e7cd      	b.n	800af00 <__smakebuf_r+0x18>
 800af64:	0800acf5 	.word	0x0800acf5

0800af68 <_malloc_usable_size_r>:
 800af68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af6c:	1f18      	subs	r0, r3, #4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfbc      	itt	lt
 800af72:	580b      	ldrlt	r3, [r1, r0]
 800af74:	18c0      	addlt	r0, r0, r3
 800af76:	4770      	bx	lr

0800af78 <_raise_r>:
 800af78:	291f      	cmp	r1, #31
 800af7a:	b538      	push	{r3, r4, r5, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	460d      	mov	r5, r1
 800af80:	d904      	bls.n	800af8c <_raise_r+0x14>
 800af82:	2316      	movs	r3, #22
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af8e:	b112      	cbz	r2, 800af96 <_raise_r+0x1e>
 800af90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af94:	b94b      	cbnz	r3, 800afaa <_raise_r+0x32>
 800af96:	4620      	mov	r0, r4
 800af98:	f000 f830 	bl	800affc <_getpid_r>
 800af9c:	462a      	mov	r2, r5
 800af9e:	4601      	mov	r1, r0
 800afa0:	4620      	mov	r0, r4
 800afa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afa6:	f000 b817 	b.w	800afd8 <_kill_r>
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d00a      	beq.n	800afc4 <_raise_r+0x4c>
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	d103      	bne.n	800afba <_raise_r+0x42>
 800afb2:	2316      	movs	r3, #22
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	2001      	movs	r0, #1
 800afb8:	e7e7      	b.n	800af8a <_raise_r+0x12>
 800afba:	2400      	movs	r4, #0
 800afbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afc0:	4628      	mov	r0, r5
 800afc2:	4798      	blx	r3
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7e0      	b.n	800af8a <_raise_r+0x12>

0800afc8 <raise>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <raise+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f7ff bfd3 	b.w	800af78 <_raise_r>
 800afd2:	bf00      	nop
 800afd4:	2000001c 	.word	0x2000001c

0800afd8 <_kill_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_kill_r+0x20>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f7f7 fddb 	bl	8002ba0 <_kill>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d102      	bne.n	800aff4 <_kill_r+0x1c>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b103      	cbz	r3, 800aff4 <_kill_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop
 800aff8:	20000530 	.word	0x20000530

0800affc <_getpid_r>:
 800affc:	f7f7 bdc8 	b.w	8002b90 <_getpid>

0800b000 <__sread>:
 800b000:	b510      	push	{r4, lr}
 800b002:	460c      	mov	r4, r1
 800b004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b008:	f000 f894 	bl	800b134 <_read_r>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	bfab      	itete	ge
 800b010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b012:	89a3      	ldrhlt	r3, [r4, #12]
 800b014:	181b      	addge	r3, r3, r0
 800b016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b01a:	bfac      	ite	ge
 800b01c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b01e:	81a3      	strhlt	r3, [r4, #12]
 800b020:	bd10      	pop	{r4, pc}

0800b022 <__swrite>:
 800b022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b026:	461f      	mov	r7, r3
 800b028:	898b      	ldrh	r3, [r1, #12]
 800b02a:	05db      	lsls	r3, r3, #23
 800b02c:	4605      	mov	r5, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	4616      	mov	r6, r2
 800b032:	d505      	bpl.n	800b040 <__swrite+0x1e>
 800b034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b038:	2302      	movs	r3, #2
 800b03a:	2200      	movs	r2, #0
 800b03c:	f000 f868 	bl	800b110 <_lseek_r>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b04a:	81a3      	strh	r3, [r4, #12]
 800b04c:	4632      	mov	r2, r6
 800b04e:	463b      	mov	r3, r7
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b056:	f000 b817 	b.w	800b088 <_write_r>

0800b05a <__sseek>:
 800b05a:	b510      	push	{r4, lr}
 800b05c:	460c      	mov	r4, r1
 800b05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b062:	f000 f855 	bl	800b110 <_lseek_r>
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	bf15      	itete	ne
 800b06c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b06e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b076:	81a3      	strheq	r3, [r4, #12]
 800b078:	bf18      	it	ne
 800b07a:	81a3      	strhne	r3, [r4, #12]
 800b07c:	bd10      	pop	{r4, pc}

0800b07e <__sclose>:
 800b07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b082:	f000 b813 	b.w	800b0ac <_close_r>
	...

0800b088 <_write_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	; (800b0a8 <_write_r+0x20>)
 800b08c:	4604      	mov	r4, r0
 800b08e:	4608      	mov	r0, r1
 800b090:	4611      	mov	r1, r2
 800b092:	2200      	movs	r2, #0
 800b094:	602a      	str	r2, [r5, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	f7f7 fdb9 	bl	8002c0e <_write>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d102      	bne.n	800b0a6 <_write_r+0x1e>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	b103      	cbz	r3, 800b0a6 <_write_r+0x1e>
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	20000530 	.word	0x20000530

0800b0ac <_close_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d06      	ldr	r5, [pc, #24]	; (800b0c8 <_close_r+0x1c>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	f7f7 fdc5 	bl	8002c46 <_close>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_close_r+0x1a>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_close_r+0x1a>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	20000530 	.word	0x20000530

0800b0cc <_fstat_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d07      	ldr	r5, [pc, #28]	; (800b0ec <_fstat_r+0x20>)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	f7f7 fdc0 	bl	8002c5e <_fstat>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	d102      	bne.n	800b0e8 <_fstat_r+0x1c>
 800b0e2:	682b      	ldr	r3, [r5, #0]
 800b0e4:	b103      	cbz	r3, 800b0e8 <_fstat_r+0x1c>
 800b0e6:	6023      	str	r3, [r4, #0]
 800b0e8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000530 	.word	0x20000530

0800b0f0 <_isatty_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	; (800b10c <_isatty_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f7 fdbf 	bl	8002c7e <_isatty>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_isatty_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_isatty_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	20000530 	.word	0x20000530

0800b110 <_lseek_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d07      	ldr	r5, [pc, #28]	; (800b130 <_lseek_r+0x20>)
 800b114:	4604      	mov	r4, r0
 800b116:	4608      	mov	r0, r1
 800b118:	4611      	mov	r1, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	602a      	str	r2, [r5, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	f7f7 fdb8 	bl	8002c94 <_lseek>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_lseek_r+0x1e>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_lseek_r+0x1e>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	20000530 	.word	0x20000530

0800b134 <_read_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4d07      	ldr	r5, [pc, #28]	; (800b154 <_read_r+0x20>)
 800b138:	4604      	mov	r4, r0
 800b13a:	4608      	mov	r0, r1
 800b13c:	4611      	mov	r1, r2
 800b13e:	2200      	movs	r2, #0
 800b140:	602a      	str	r2, [r5, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	f7f7 fd46 	bl	8002bd4 <_read>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d102      	bne.n	800b152 <_read_r+0x1e>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	b103      	cbz	r3, 800b152 <_read_r+0x1e>
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	20000530 	.word	0x20000530

0800b158 <_init>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr

0800b164 <_fini>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	bf00      	nop
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr
