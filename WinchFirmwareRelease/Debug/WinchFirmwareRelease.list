
WinchFirmwareRelease.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800b518  0800b518  0001b518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ec  0800b9ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9f4  0800b9f4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001e4  0800bbe0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800bbe0  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b77  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295a  00000000  00000000  00036d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  0003aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020791  00000000  00000000  0003bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b67  00000000  00000000  0005c451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e951c  00000000  00000000  0007cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001664d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b4  00000000  00000000  00166524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4fc 	.word	0x0800b4fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b4fc 	.word	0x0800b4fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <AS5600_Init>:

#include "AS5600.h"


uint8_t AS5600_Init(AS5600_Handle_t *hAS56)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/*Initialize with the necessary mode*/
	uint8_t temp = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
	 */

	/*
	 * Get the status of the Magnetic sensor by touching the mag register sensor
	 */
	const AS5600_StatusRegister_t agcReg = AS5600_REGISTER_AGC_H;
 8000fac:	231a      	movs	r3, #26
 8000fae:	737b      	strb	r3, [r7, #13]
	if(readByte(hAS56->I2Chandle, WHOAMI, agcReg) >= AS55600_SUCCESS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	7b7a      	ldrb	r2, [r7, #13]
 8000fb6:	216c      	movs	r1, #108	; 0x6c
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f85d 	bl	8001078 <readByte>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00d      	beq.n	8000fe0 <AS5600_Init+0x44>
	{
		ret = AS55600_SUCCESS;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
		hAS56->agcCount = readByte(hAS56->I2Chandle, WHOAMI, agcReg); /* useful while debugging */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	7b7a      	ldrb	r2, [r7, #13]
 8000fce:	216c      	movs	r1, #108	; 0x6c
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f851 	bl	8001078 <readByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	735a      	strb	r2, [r3, #13]
 8000fde:	e001      	b.n	8000fe4 <AS5600_Init+0x48>
	}

	else ret = AS5600_ERROR;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

	const AS5600_StatusRegister_t statusReg = AS5600_REGISTER_STATUS;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	733b      	strb	r3, [r7, #12]

	if((temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg)) >= AS55600_SUCCESS)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	216c      	movs	r1, #108	; 0x6c
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f841 	bl	8001078 <readByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AS5600_Init+0x72>
	{
		//temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg);

		ret = (temp & AS5600_MD) ? AS55600_SUCCESS : AS5600_ERROR;
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	115b      	asrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <AS5600_Init+0x76>
	}

	else ret = AS5600_ERROR;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <AS5600_GetRawAngle>:

uint8_t AS5600_GetRawAngle(AS5600_Handle_t* hAS56)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	const AS5600_OpRegister_t angleReg = AS5600_REGISTER_RAWANGLE_H;
 8001024:	230c      	movs	r3, #12
 8001026:	73fb      	strb	r3, [r7, #15]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]

	uint8_t raw[2] = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	81bb      	strh	r3, [r7, #12]

	if((hAS56->I2Chandle == NULL)) return ret;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <AS5600_GetRawAngle+0x20>
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	e019      	b.n	8001070 <AS5600_GetRawAngle+0x54>

		//readByte(hAS56->I2Chandle, Address, subAddress);
	if(readMem(hAS56->I2Chandle, WHOAMI, angleReg, raw) != AS55600_SUCCESS) return ret;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	216c      	movs	r1, #108	; 0x6c
 8001048:	f000 f840 	bl	80010cc <readMem>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d001      	beq.n	8001056 <AS5600_GetRawAngle+0x3a>
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	e00c      	b.n	8001070 <AS5600_GetRawAngle+0x54>

	else ret = AS55600_SUCCESS;
 8001056:	2301      	movs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]

	hAS56->rawAngle = ((uint16_t)((uint16_t)raw[0] << 8 | raw[1]));
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	80da      	strh	r2, [r3, #6]

	return ret;
 800106e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <readByte>:
		 return 0;

}

uint8_t readByte(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	4613      	mov	r3, r2
 8001086:	70bb      	strb	r3, [r7, #2]
	uint8_t rxData[1] = {0};
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
	uint8_t txData[] = {subAddress};
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(I2Chandle, Address, txData, 1, AS5600_I2C_TIMEOUT);
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	b299      	uxth	r1, r3
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f003 fa46 	bl	8004530 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(I2Chandle, Address, rxData, 1, AS5600_I2C_TIMEOUT) != HAL_ERROR) return rxData[0];
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f003 fb3a 	bl	800472c <HAL_I2C_Master_Receive>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <readByte+0x4a>
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	e000      	b.n	80010c4 <readByte+0x4c>

	else return 0;
 80010c2:	2300      	movs	r3, #0

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <readMem>:
/*
 * Reads bytes of data
 */

uint8_t readMem(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress, uint8_t* raw)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]

	uint8_t rawData[2];

	if(HAL_I2C_Mem_Read(I2Chandle, Address, subAddress, I2C_MEMADD_SIZE_8BIT, rawData, 2, AS5600_I2C_TIMEOUT) != HAL_ERROR)
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b299      	uxth	r1, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2302      	movs	r3, #2
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f003 fd3e 	bl	8004b78 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d008      	beq.n	8001114 <readMem+0x48>
	{
		raw[0] = rawData[0];
 8001102:	7d3a      	ldrb	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]
		raw[1] = rawData[1];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	7d7a      	ldrb	r2, [r7, #21]
 800110e:	701a      	strb	r2, [r3, #0]

		return 1;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <readMem+0x4a>
	}

	else return 0;
 8001114:	2300      	movs	r3, #0

}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <PID_Init>:
    Set the Max/Min lim for System anti saturation.
*/

/*Initializer*/
uint8_t PID_Init(PID_Handle_t *pid)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]

    /*Clear all the residuals*/

    pid->derivative = 0.0f;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
    pid->integrator = 0.0f;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
    pid->propotional = 0.0f;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	60da      	str	r2, [r3, #12]

    SetSampleRate(pid, 10); // 0.01 seconds
 800113e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f878 	bl	8001238 <SetSampleRate>


    pid->prevErr = 0.0f;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
    pid->prevMeasure = 0.0f;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	61da      	str	r2, [r3, #28]

    pid->pidout = 0.0f;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38

    return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <P_Compute>:

/* P controller only */
float P_Compute(PID_Handle_t *p, float measurement, float setPoint, float hal_tick)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	ed87 0a02 	vstr	s0, [r7, #8]
 8001178:	edc7 0a01 	vstr	s1, [r7, #4]
 800117c:	ed87 1a00 	vstr	s2, [r7]

	if(hal_tick > p->Ts)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001186:	ed97 7a00 	vldr	s14, [r7]
 800118a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dd39      	ble.n	8001208 <P_Compute+0x9c>
		*   0-100% after computing the values back to outputs which can be used in the real world.
		*
		*/
		//float err = setPoint - measurement;

		float err = (1 - measurement / setPoint);
 8001194:	edd7 6a02 	vldr	s13, [r7, #8]
 8001198:	ed97 7a01 	vldr	s14, [r7, #4]
 800119c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a8:	edc7 7a05 	vstr	s15, [r7, #20]

		if( err >=0 )
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	db26      	blt.n	8001208 <P_Compute+0x9c>
		{
			/*propotional*/
			p->propotional = p->kp * err;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edc3 7a03 	vstr	s15, [r3, #12]

			return (p->propotional *__8BIT_OUTPUT_MAX) <= (__8BIT_OUTPUT_MAX) ? (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN : __8BIT_OUTPUT_MAX;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001230 <P_Compute+0xc4>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001230 <P_Compute+0xc4>
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	d80b      	bhi.n	8001202 <P_Compute+0x96>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001230 <P_Compute+0xc4>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80011fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001200:	e00e      	b.n	8001220 <P_Compute+0xb4>
 8001202:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8001230 <P_Compute+0xc4>
 8001206:	e00b      	b.n	8001220 <P_Compute+0xb4>

		}

	}

	p->Ts += hal_tick;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800120e:	edd7 7a00 	vldr	s15, [r7]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return 0;
 800121c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001234 <P_Compute+0xc8>

	//return (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN;
}
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	43340000 	.word	0x43340000
 8001234:	00000000 	.word	0x00000000

08001238 <SetSampleRate>:

/* Set sampling period in milliseconds
* And apporiately scale the gains Ki, Kd 
*/
void SetSampleRate(PID_Handle_t *pid, float sampleTime)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	ed87 0a00 	vstr	s0, [r7]
    if(sampleTime > 0)
 8001244:	edd7 7a00 	vldr	s15, [r7]
 8001248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	dc00      	bgt.n	8001254 <SetSampleRate+0x1c>
        pid->ki *= ratio;
        pid->kd /= ratio;

        pid->Ts = sampleTime;
    }
}
 8001252:	e01f      	b.n	8001294 <SetSampleRate+0x5c>
        float ratio = (float)(sampleTime) / (float)(pid->Ts);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800125a:	edd7 6a00 	vldr	s13, [r7]
 800125e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001262:	edc7 7a03 	vstr	s15, [r7, #12]
        pid->ki *= ratio;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ed93 7a01 	vldr	s14, [r3, #4]
 800126c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a01 	vstr	s15, [r3, #4]
        pid->kd /= ratio;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001280:	ed97 7a03 	vldr	s14, [r7, #12]
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a02 	vstr	s15, [r3, #8]
        pid->Ts = sampleTime;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <MX_Universal_Init>:
static void MX_BomBay_Door_Close(void);
static void MX_Jump(void);

/* Private user code ---------------------------------------------------------*/
void MX_Universal_Init()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f001 ff58 	bl	8003158 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 fe98 	bl	8001fdc <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_USB_DEVICE_Init();
  MX_DMA_Init();
 80012ac:	f001 f8d6 	bl	800245c <MX_DMA_Init>
  MX_ADC1_Init();
 80012b0:	f000 fefe 	bl	80020b0 <MX_ADC1_Init>
  MX_GPIO_Init();
 80012b4:	f001 f8f2 	bl	800249c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b8:	f000 ffc6 	bl	8002248 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012bc:	f001 f816 	bl	80022ec <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c0:	f001 f878 	bl	80023b4 <MX_TIM4_Init>
  MX_UART1_Init();
 80012c4:	f000 ff74 	bl	80021b0 <MX_UART1_Init>
  MX_UART2_Init();
 80012c8:	f000 ff98 	bl	80021fc <MX_UART2_Init>
  MX_I2C1_Init();
 80012cc:	f000 ff42 	bl	8002154 <MX_I2C1_Init>


}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MX_Peripheral_Start_Init>:

void MX_Peripheral_Start_Init()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	 *  3. TIM Input Cpature Mode Start
	 *  4. ADC DMA Start
	 */
	//if(HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_Handler();

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80012d8:	2100      	movs	r1, #0
 80012da:	4831      	ldr	r0, [pc, #196]	; (80013a0 <MX_Peripheral_Start_Init+0xcc>)
 80012dc:	f004 ff30 	bl	8006140 <HAL_TIM_PWM_Start>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_Peripheral_Start_Init+0x16>
 80012e6:	f001 f977 	bl	80025d8 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80012ea:	2104      	movs	r1, #4
 80012ec:	482c      	ldr	r0, [pc, #176]	; (80013a0 <MX_Peripheral_Start_Init+0xcc>)
 80012ee:	f004 ff27 	bl	8006140 <HAL_TIM_PWM_Start>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_Peripheral_Start_Init+0x28>
 80012f8:	f001 f96e 	bl	80025d8 <Error_Handler>

	if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK) Error_Handler();
 80012fc:	2100      	movs	r1, #0
 80012fe:	4829      	ldr	r0, [pc, #164]	; (80013a4 <MX_Peripheral_Start_Init+0xd0>)
 8001300:	f005 f8e2 	bl	80064c8 <HAL_TIM_IC_Start_IT>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_Peripheral_Start_Init+0x3a>
 800130a:	f001 f965 	bl	80025d8 <Error_Handler>
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3)!= HAL_OK) Error_Handler();
 800130e:	2108      	movs	r1, #8
 8001310:	4825      	ldr	r0, [pc, #148]	; (80013a8 <MX_Peripheral_Start_Init+0xd4>)
 8001312:	f005 f8d9 	bl	80064c8 <HAL_TIM_IC_Start_IT>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_Peripheral_Start_Init+0x4c>
 800131c:	f001 f95c 	bl	80025d8 <Error_Handler>


	//if(HAL_ADC_Start_DMA(&hadc1, &Buf, 1) != HAL_OK) Error_Handler();

	memset(buf, 0, sizeof(buf));
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2100      	movs	r1, #0
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_Peripheral_Start_Init+0xd8>)
 8001326:	f007 f97f 	bl	8008628 <memset>
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);

	/*
	 * 1.GPIO PIN Inits
	 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	4820      	ldr	r0, [pc, #128]	; (80013b0 <MX_Peripheral_Start_Init+0xdc>)
 8001330:	f002 ff7c 	bl	800422c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133a:	481e      	ldr	r0, [pc, #120]	; (80013b4 <MX_Peripheral_Start_Init+0xe0>)
 800133c:	f002 ff76 	bl	800422c <HAL_GPIO_WritePin>
	 * Get the raw angle.
	 * Store the Init raw angle to a global var.
	 * Then count the revolutions on the basis of that raw angle.
	 * i.e. if the raw angle is 20 deg, then every time the angle goes above 20 is one revolution.
	 */
	as5600.I2Chandle = &hi2c1;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <MX_Peripheral_Start_Init+0xe8>)
 8001344:	601a      	str	r2, [r3, #0]
	while(!AS5600_Init(&as5600))
 8001346:	e007      	b.n	8001358 <MX_Peripheral_Start_Init+0x84>
	{
		sprintf((char*)buf, "Can't detect the Magnet\r\n");
 8001348:	491d      	ldr	r1, [pc, #116]	; (80013c0 <MX_Peripheral_Start_Init+0xec>)
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <MX_Peripheral_Start_Init+0xd8>)
 800134c:	f007 fdde 	bl	8008f0c <siprintf>
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		HAL_Delay(500);
 8001350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001354:	f001 ff72 	bl	800323c <HAL_Delay>
	while(!AS5600_Init(&as5600))
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 800135a:	f7ff fe1f 	bl	8000f9c <AS5600_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f1      	beq.n	8001348 <MX_Peripheral_Start_Init+0x74>
	}

	HAL_Delay(500); /*Time to set*/
 8001364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001368:	f001 ff68 	bl	800323c <HAL_Delay>

	AS5600_GetRawAngle(&as5600);
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 800136e:	f7ff fe55 	bl	800101c <AS5600_GetRawAngle>
	CurrRead = as5600.rawAngle;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 8001374:	88da      	ldrh	r2, [r3, #6]
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_Peripheral_Start_Init+0xf0>)
 8001378:	801a      	strh	r2, [r3, #0]

	LastRead = CurrRead;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_Peripheral_Start_Init+0xf0>)
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_Peripheral_Start_Init+0xf4>)
 8001380:	801a      	strh	r2, [r3, #0]

	rev = 0;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_Peripheral_Start_Init+0xf8>)
 8001384:	2200      	movs	r2, #0
 8001386:	801a      	strh	r2, [r3, #0]
	Length = 0;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_Peripheral_Start_Init+0xfc>)
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	//sprintf((char*)buf, "Initial Angle : %d\r\n", rawAngle);
	//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
//
	memset(buf, 0, sizeof(buf));
 8001390:	2240      	movs	r2, #64	; 0x40
 8001392:	2100      	movs	r1, #0
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_Peripheral_Start_Init+0xd8>)
 8001396:	f007 f947 	bl	8008628 <memset>
	//user_data = "Initialization successful\r\n";
	//data_len = strlen(user_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);


}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002f0 	.word	0x200002f0
 80013a4:	20000338 	.word	0x20000338
 80013a8:	200002a8 	.word	0x200002a8
 80013ac:	20000484 	.word	0x20000484
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	2000045c 	.word	0x2000045c
 80013bc:	20000408 	.word	0x20000408
 80013c0:	0800b588 	.word	0x0800b588
 80013c4:	200004fa 	.word	0x200004fa
 80013c8:	200004f8 	.word	0x200004f8
 80013cc:	200004fc 	.word	0x200004fc
 80013d0:	20000500 	.word	0x20000500

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
	MX_Universal_Init();
 80013d8:	f7ff ff62 	bl	80012a0 <MX_Universal_Init>

  /* MCU Peripherals Start Commands-------------------------------------------*/
	MX_Peripheral_Start_Init();
 80013dc:	f7ff ff7a 	bl	80012d4 <MX_Peripheral_Start_Init>
	/*
	 * Winch Start Sequence
	 * 1. One reception of a signal of particular width start the winch sequence
	 * or else keep looping until forever.
	 */
	MX_WINCH_START_SEQ();
 80013e0:	f000 f832 	bl	8001448 <MX_WINCH_START_SEQ>

	HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4812      	ldr	r0, [pc, #72]	; (8001434 <main+0x60>)
 80013ec:	f002 ff1e 	bl	800422c <HAL_GPIO_WritePin>
	 */
	//MX_BomBay_Door_Open();

	//HAL_Delay(2000); //Delay for the door to settle and prep for winch down.

	MX_WINCH_DOWN_GP_RAMP_UP();
 80013f0:	f000 f856 	bl	80014a0 <MX_WINCH_DOWN_GP_RAMP_UP>
	 *
	 * note TODO: current thing for detecting if payload is landed.
	 *
	 */

	MX_SOFT_START_P_CONTROLLER_RAMP_UP();
 80013f4:	f000 f8b4 	bl	8001560 <MX_SOFT_START_P_CONTROLLER_RAMP_UP>

	MX_WINCH_P_CONTROLLER();
 80013f8:	f000 f90a 	bl	8001610 <MX_WINCH_P_CONTROLLER>


	leg_len = Length; //Store the length of the first leg.
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <main+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <main+0x68>)
 8001402:	6013      	str	r3, [r2, #0]

	HAL_Delay(4000);  //Delay time
 8001404:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001408:	f001 ff18 	bl	800323c <HAL_Delay>


	//MX_WINCH_UP_MOTO_RAMP_UP_DOWN();
	MX_WINCH_UP_P_CONTROLLER();
 800140c:	f000 f9f8 	bl	8001800 <MX_WINCH_UP_P_CONTROLLER>
	/*
	 * After the entire sequence maybe enable the Timer 2 Channel 3 IC
	 *
	 * Just for now compare it with the length.
	 */
	if(close_door)
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <main+0x6c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <main+0x5c>
	{
		HAL_TIM_IC_MspInit(&htim2);
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <main+0x70>)
 800141a:	f001 f9fd 	bl	8002818 <HAL_TIM_IC_MspInit>

		if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3)!= HAL_OK) Error_Handler();
 800141e:	2108      	movs	r1, #8
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <main+0x70>)
 8001422:	f005 f851 	bl	80064c8 <HAL_TIM_IC_Start_IT>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <main+0x5c>
 800142c:	f001 f8d4 	bl	80025d8 <Error_Handler>

	//Start the Door Close sequence
	//MX_BomBay_Door_Close();


	while(1)
 8001430:	e7fe      	b.n	8001430 <main+0x5c>
 8001432:	bf00      	nop
 8001434:	40020800 	.word	0x40020800
 8001438:	20000500 	.word	0x20000500
 800143c:	20000514 	.word	0x20000514
 8001440:	20000510 	.word	0x20000510
 8001444:	200002a8 	.word	0x200002a8

08001448 <MX_WINCH_START_SEQ>:

///////////////////////////////////////////////////////////////////////////////////////////APPLICATION_LEVEL_ROUTINES//////////////////////////////////////////////////////////////


static void MX_WINCH_START_SEQ()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	/*
	 * This part loops until a signal of particular pulse width is captured.
	 */
	//UNUSED();
	while(!(START_THE_SEQUENCE)){};
 800144c:	bf00      	nop
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_WINCH_START_SEQ+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f083 0301 	eor.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f8      	bne.n	800144e <MX_WINCH_START_SEQ+0x6>

	Start_Flag = false;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_WINCH_START_SEQ+0x48>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Was door now winch
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <MX_WINCH_START_SEQ+0x4c>)
 800146a:	f002 fedf 	bl	800422c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Was winch now door pin
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <MX_WINCH_START_SEQ+0x4c>)
 8001474:	f002 feda 	bl	800422c <HAL_GPIO_WritePin>

	/*
	 * Diable the Timer 2 Channel 3 IC
	 */
	HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_3);
 8001478:	2108      	movs	r1, #8
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_WINCH_START_SEQ+0x50>)
 800147c:	f004 ffc3 	bl	8006406 <HAL_TIM_IC_Stop>
	HAL_TIM_IC_MspDeInit(&htim2);
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_WINCH_START_SEQ+0x50>)
 8001482:	f001 fa8d 	bl	80029a0 <HAL_TIM_IC_MspDeInit>
	 * 1. Receive the hover current.
	 * 2. So that it could be compared against the current recevied during the touchdown.
	 */
	//MavLinkReceiveHoverCurr(&huart2, receivedData);

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000509 	.word	0x20000509
 8001490:	20000000 	.word	0x20000000
 8001494:	40020000 	.word	0x40020000
 8001498:	200002a8 	.word	0x200002a8
 800149c:	00000000 	.word	0x00000000

080014a0 <MX_WINCH_DOWN_GP_RAMP_UP>:
	}
}


void MX_WINCH_DOWN_GP_RAMP_UP(void)
{
 80014a0:	b598      	push	{r3, r4, r7, lr}
 80014a2:	af00      	add	r7, sp, #0


	while(gp_i >= 16)
 80014a4:	e048      	b.n	8001538 <MX_WINCH_DOWN_GP_RAMP_UP+0x98>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_FIXED)/100);
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f832 	bl	8000514 <__aeabi_ui2d>
 80014b0:	a325      	add	r3, pc, #148	; (adr r3, 8001548 <MX_WINCH_DOWN_GP_RAMP_UP+0xa8>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8a7 	bl	8000608 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <MX_WINCH_DOWN_GP_RAMP_UP+0xb4>)
 80014c8:	f7ff f9c8 	bl	800085c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	491f      	ldr	r1, [pc, #124]	; (8001550 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 80014d2:	680c      	ldr	r4, [r1, #0]
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb6e 	bl	8000bb8 <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_Delay(PWM_ON_DELAY(PWM_FIXED));
 80014e0:	2001      	movs	r0, #1
 80014e2:	f001 feab 	bl	800323c <HAL_Delay>

		//sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f812 	bl	8000514 <__aeabi_ui2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	f7ff f886 	bl	8000608 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_WINCH_DOWN_GP_RAMP_UP+0xb4>)
 800150a:	f7ff f9a7 	bl	800085c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	490f      	ldr	r1, [pc, #60]	; (8001550 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 8001514:	680c      	ldr	r4, [r1, #0]
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb4d 	bl	8000bb8 <__aeabi_d2uiz>
 800151e:	4603      	mov	r3, r0
 8001520:	63a3      	str	r3, [r4, #56]	; 0x38

		gp_i /= GP_DIV;
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 800152c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(gp_i);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fe82 	bl	800323c <HAL_Delay>
	while(gp_i >= 16)
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d8b2      	bhi.n	80014a6 <MX_WINCH_DOWN_GP_RAMP_UP+0x6>

	}

}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	bd98      	pop	{r3, r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	877be861 	.word	0x877be861
 800154c:	40478787 	.word	0x40478787
 8001550:	200002f0 	.word	0x200002f0
 8001554:	40590000 	.word	0x40590000
 8001558:	20000002 	.word	0x20000002
 800155c:	00000000 	.word	0x00000000

08001560 <MX_SOFT_START_P_CONTROLLER_RAMP_UP>:

}


static void MX_SOFT_START_P_CONTROLLER_RAMP_UP(void)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2120      	movs	r1, #32
 8001568:	4825      	ldr	r0, [pc, #148]	; (8001600 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa0>)
 800156a:	f002 fe5f 	bl	800422c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001574:	4822      	ldr	r0, [pc, #136]	; (8001600 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa0>)
 8001576:	f002 fe59 	bl	800422c <HAL_GPIO_WritePin>

	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa4>)
 800157c:	2279      	movs	r2, #121	; 0x79
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	e032      	b.n	80015e8 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa8>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffc4 	bl	8000514 <__aeabi_ui2d>
 800158c:	4604      	mov	r4, r0
 800158e:	460d      	mov	r5, r1
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa4>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffcd 	bl	8000534 <__aeabi_i2d>
 800159a:	a317      	add	r3, pc, #92	; (adr r3, 80015f8 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x98>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f832 	bl	8000608 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7ff f82c 	bl	8000608 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xac>)
 80015be:	f7ff f94d 	bl	800085c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4910      	ldr	r1, [pc, #64]	; (8001608 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa8>)
 80015c8:	680c      	ldr	r4, [r1, #0]
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff faf3 	bl	8000bb8 <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	63a3      	str	r3, [r4, #56]	; 0x38
		//sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);

		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 80015d6:	2028      	movs	r0, #40	; 0x28
 80015d8:	f001 fe30 	bl	800323c <HAL_Delay>
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa4>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa4>)
 80015e6:	801a      	strh	r2, [r3, #0]
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xa4>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	2bb3      	cmp	r3, #179	; 0xb3
 80015ee:	d9c8      	bls.n	8001582 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x22>
	}
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	bdb0      	pop	{r4, r5, r7, pc}
 80015f6:	bf00      	nop
 80015f8:	190cb39b 	.word	0x190cb39b
 80015fc:	3fd91919 	.word	0x3fd91919
 8001600:	40020000 	.word	0x40020000
 8001604:	20000512 	.word	0x20000512
 8001608:	200002f0 	.word	0x200002f0
 800160c:	40590000 	.word	0x40590000

08001610 <MX_WINCH_P_CONTROLLER>:

/*
 * This sub-routine interfaces the P-based controller for Winch Down with Payload
 */
void MX_WINCH_P_CONTROLLER(void)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b092      	sub	sp, #72	; 0x48
 8001614:	af00      	add	r7, sp, #0
	PID_Handle_t pid;
	uint32_t motor_output = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	647b      	str	r3, [r7, #68]	; 0x44

	pid.Ts = 10; // 10 milliseconds.
 800161a:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <MX_WINCH_P_CONTROLLER+0x1c0>)
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
	pid.kp = 3.5;
 800161e:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <MX_WINCH_P_CONTROLLER+0x1c4>)
 8001620:	607b      	str	r3, [r7, #4]
	PID_Init(&pid);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fd7a 	bl	800111e <PID_Init>



	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig))
 800162a:	e054      	b.n	80016d6 <MX_WINCH_P_CONTROLLER+0xc6>
	{
		motor_output = P_Compute(&pid, Length, LEN_TO_WINCH_DOWN, uwTick);
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <MX_WINCH_P_CONTROLLER+0x1c8>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <MX_WINCH_P_CONTROLLER+0x1cc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	ee07 3a10 	vmov	s14, r3
 800163a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	eeb0 1a47 	vmov.f32	s2, s14
 8001644:	eddf 0a66 	vldr	s1, [pc, #408]	; 80017e0 <MX_WINCH_P_CONTROLLER+0x1d0>
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fd8d 	bl	800116c <P_Compute>
 8001652:	eef0 7a40 	vmov.f32	s15, s0
 8001656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800165a:	ee17 3a90 	vmov	r3, s15
 800165e:	647b      	str	r3, [r7, #68]	; 0x44

		if(motor_output <= 30) motor_output = __8BIT_OUTPUT_MIN;
 8001660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001662:	2b1e      	cmp	r3, #30
 8001664:	d801      	bhi.n	800166a <MX_WINCH_P_CONTROLLER+0x5a>
 8001666:	231e      	movs	r3, #30
 8001668:	647b      	str	r3, [r7, #68]	; 0x44

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(motor_output)/100);
 800166a:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <MX_WINCH_P_CONTROLLER+0x1d4>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff50 	bl	8000514 <__aeabi_ui2d>
 8001674:	4604      	mov	r4, r0
 8001676:	460d      	mov	r5, r1
 8001678:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800167a:	f7fe ff4b 	bl	8000514 <__aeabi_ui2d>
 800167e:	a350      	add	r3, pc, #320	; (adr r3, 80017c0 <MX_WINCH_P_CONTROLLER+0x1b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ffc0 	bl	8000608 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe ffba 	bl	8000608 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <MX_WINCH_P_CONTROLLER+0x1d8>)
 80016a2:	f7ff f8db 	bl	800085c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	494e      	ldr	r1, [pc, #312]	; (80017e4 <MX_WINCH_P_CONTROLLER+0x1d4>)
 80016ac:	680c      	ldr	r4, [r1, #0]
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fa81 	bl	8000bb8 <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	63a3      	str	r3, [r4, #56]	; 0x38

		//sprintf((char*)buf, "PWM: %ld, Length: %f, Tick: %ld\r\n", motor_output, Length, tick); //i*0.019605

		//HAL_Delay(10);

		if(Length >= THRESHOLD_LEN)
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MX_WINCH_P_CONTROLLER+0x1c8>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	da00      	bge.n	80016d0 <MX_WINCH_P_CONTROLLER+0xc0>
 80016ce:	e002      	b.n	80016d6 <MX_WINCH_P_CONTROLLER+0xc6>
		{
			poop_back = true;
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <MX_WINCH_P_CONTROLLER+0x1dc>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig))
 80016d6:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <MX_WINCH_P_CONTROLLER+0x1c8>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80017e0 <MX_WINCH_P_CONTROLLER+0x1d0>
 80016e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	d806      	bhi.n	80016f8 <MX_WINCH_P_CONTROLLER+0xe8>
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <MX_WINCH_P_CONTROLLER+0x1e0>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	f083 0301 	eor.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d199      	bne.n	800162c <MX_WINCH_P_CONTROLLER+0x1c>
	}

	//__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * 0/100);


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2120      	movs	r1, #32
 80016fc:	483d      	ldr	r0, [pc, #244]	; (80017f4 <MX_WINCH_P_CONTROLLER+0x1e4>)
 80016fe:	f002 fd95 	bl	800422c <HAL_GPIO_WritePin>

	for(int i =0; i<12000; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	643b      	str	r3, [r7, #64]	; 0x40
 8001706:	e01f      	b.n	8001748 <MX_WINCH_P_CONTROLLER+0x138>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8001708:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <MX_WINCH_P_CONTROLLER+0x1d4>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff01 	bl	8000514 <__aeabi_ui2d>
 8001712:	a32d      	add	r3, pc, #180	; (adr r3, 80017c8 <MX_WINCH_P_CONTROLLER+0x1b8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff76 	bl	8000608 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <MX_WINCH_P_CONTROLLER+0x1d8>)
 800172a:	f7ff f897 	bl	800085c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	492c      	ldr	r1, [pc, #176]	; (80017e4 <MX_WINCH_P_CONTROLLER+0x1d4>)
 8001734:	680c      	ldr	r4, [r1, #0]
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa3d 	bl	8000bb8 <__aeabi_d2uiz>
 800173e:	4603      	mov	r3, r0
 8001740:	63a3      	str	r3, [r4, #56]	; 0x38
	for(int i =0; i<12000; i++)
 8001742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001744:	3301      	adds	r3, #1
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
 8001748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800174a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800174e:	4293      	cmp	r3, r2
 8001750:	ddda      	ble.n	8001708 <MX_WINCH_P_CONTROLLER+0xf8>

	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <MX_WINCH_P_CONTROLLER+0x1d4>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fedc 	bl	8000514 <__aeabi_ui2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f7fe ff50 	bl	8000608 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_WINCH_P_CONTROLLER+0x1d8>)
 8001776:	f7ff f871 	bl	800085c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4919      	ldr	r1, [pc, #100]	; (80017e4 <MX_WINCH_P_CONTROLLER+0x1d4>)
 8001780:	680c      	ldr	r4, [r1, #0]
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa17 	bl	8000bb8 <__aeabi_d2uiz>
 800178a:	4603      	mov	r3, r0
 800178c:	63a3      	str	r3, [r4, #56]	; 0x38

	if(rev < 0) Counts = -rev;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_WINCH_P_CONTROLLER+0x1e8>)
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	2b00      	cmp	r3, #0
 8001796:	da09      	bge.n	80017ac <MX_WINCH_P_CONTROLLER+0x19c>
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_WINCH_P_CONTROLLER+0x1e8>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	425b      	negs	r3, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_WINCH_P_CONTROLLER+0x1ec>)
 80017a8:	801a      	strh	r2, [r3, #0]
	else Counts = rev;

}
 80017aa:	e004      	b.n	80017b6 <MX_WINCH_P_CONTROLLER+0x1a6>
	else Counts = rev;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_WINCH_P_CONTROLLER+0x1e8>)
 80017ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_WINCH_P_CONTROLLER+0x1ec>)
 80017b4:	801a      	strh	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3748      	adds	r7, #72	; 0x48
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	190cb39b 	.word	0x190cb39b
 80017c4:	3fd91919 	.word	0x3fd91919
 80017c8:	877be861 	.word	0x877be861
 80017cc:	40278787 	.word	0x40278787
 80017d0:	41200000 	.word	0x41200000
 80017d4:	40600000 	.word	0x40600000
 80017d8:	20000500 	.word	0x20000500
 80017dc:	20000540 	.word	0x20000540
 80017e0:	42180000 	.word	0x42180000
 80017e4:	200002f0 	.word	0x200002f0
 80017e8:	40590000 	.word	0x40590000
 80017ec:	2000050a 	.word	0x2000050a
 80017f0:	2000050b 	.word	0x2000050b
 80017f4:	40020000 	.word	0x40020000
 80017f8:	200004fc 	.word	0x200004fc
 80017fc:	200004fe 	.word	0x200004fe

08001800 <MX_WINCH_UP_P_CONTROLLER>:

/*
 * This sub-routine interfaces the P-based controller for Winch Up with Payload
 */
void MX_WINCH_UP_P_CONTROLLER(void)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b094      	sub	sp, #80	; 0x50
 8001804:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	2120      	movs	r1, #32
 800180a:	4863      	ldr	r0, [pc, #396]	; (8001998 <MX_WINCH_UP_P_CONTROLLER+0x198>)
 800180c:	f002 fd0e 	bl	800422c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001816:	4860      	ldr	r0, [pc, #384]	; (8001998 <MX_WINCH_UP_P_CONTROLLER+0x198>)
 8001818:	f002 fd08 	bl	800422c <HAL_GPIO_WritePin>



	PID_Handle_t pid;
	uint32_t motor_output = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c

	pid.Ts = 10; // 10 milliseconds.
 8001820:	4b5e      	ldr	r3, [pc, #376]	; (800199c <MX_WINCH_UP_P_CONTROLLER+0x19c>)
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
	pid.kp = 3;
 8001824:	4b5e      	ldr	r3, [pc, #376]	; (80019a0 <MX_WINCH_UP_P_CONTROLLER+0x1a0>)
 8001826:	607b      	str	r3, [r7, #4]
	PID_Init(&pid);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc77 	bl	800111e <PID_Init>

	float SetPoint = leg_len;
 8001830:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <MX_WINCH_UP_P_CONTROLLER+0x1a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
	float Measurement = (SetPoint - Length);
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <MX_WINCH_UP_P_CONTROLLER+0x1a8>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float ThresholdLen = SetPoint * 0.75;
 8001848:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800184c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001854:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	while((Measurement <= SetPoint))
 8001858:	e085      	b.n	8001966 <MX_WINCH_UP_P_CONTROLLER+0x166>
	{
		motor_output = P_Compute(&pid, Measurement, SetPoint, uwTick);
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <MX_WINCH_UP_P_CONTROLLER+0x1ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	eeb0 1a67 	vmov.f32	s2, s15
 800186c:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8001870:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fc79 	bl	800116c <P_Compute>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001882:	ee17 3a90 	vmov	r3, s15
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c

		if(motor_output <= 30) motor_output = __8BIT_OUTPUT_MIN;
 8001888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188a:	2b1e      	cmp	r3, #30
 800188c:	d801      	bhi.n	8001892 <MX_WINCH_UP_P_CONTROLLER+0x92>
 800188e:	231e      	movs	r3, #30
 8001890:	64fb      	str	r3, [r7, #76]	; 0x4c

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(motor_output)/100);
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <MX_WINCH_UP_P_CONTROLLER+0x1b0>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe3c 	bl	8000514 <__aeabi_ui2d>
 800189c:	4604      	mov	r4, r0
 800189e:	460d      	mov	r5, r1
 80018a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80018a2:	f7fe fe37 	bl	8000514 <__aeabi_ui2d>
 80018a6:	a338      	add	r3, pc, #224	; (adr r3, 8001988 <MX_WINCH_UP_P_CONTROLLER+0x188>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe feac 	bl	8000608 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fea6 	bl	8000608 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <MX_WINCH_UP_P_CONTROLLER+0x1b4>)
 80018ca:	f7fe ffc7 	bl	800085c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <MX_WINCH_UP_P_CONTROLLER+0x1b0>)
 80018d4:	680c      	ldr	r4, [r1, #0]
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f96d 	bl	8000bb8 <__aeabi_d2uiz>
 80018de:	4603      	mov	r3, r0
 80018e0:	63a3      	str	r3, [r4, #56]	; 0x38



		if(Measurement >= ThresholdLen)
 80018e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80018e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	db03      	blt.n	80018fc <MX_WINCH_UP_P_CONTROLLER+0xfc>
		{

			/*
			 *Enable the close door flag
			 */
			close_door = true;
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <MX_WINCH_UP_P_CONTROLLER+0x1b8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
			break;
 80018fa:	e03f      	b.n	800197c <MX_WINCH_UP_P_CONTROLLER+0x17c>
		}


		/*Fail safe, if the winch motor does not close*/

		if(Length < 0.2)
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <MX_WINCH_UP_P_CONTROLLER+0x1a8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe29 	bl	8000558 <__aeabi_f2d>
 8001906:	a322      	add	r3, pc, #136	; (adr r3, 8001990 <MX_WINCH_UP_P_CONTROLLER+0x190>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7ff f8ee 	bl	8000aec <__aeabi_dcmplt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01e      	beq.n	8001954 <MX_WINCH_UP_P_CONTROLLER+0x154>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <MX_WINCH_UP_P_CONTROLLER+0x1b0>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fdfa 	bl	8000514 <__aeabi_ui2d>
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	f7fe fe6e 	bl	8000608 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_WINCH_UP_P_CONTROLLER+0x1b4>)
 800193a:	f7fe ff8f 	bl	800085c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <MX_WINCH_UP_P_CONTROLLER+0x1b0>)
 8001944:	680c      	ldr	r4, [r1, #0]
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f935 	bl	8000bb8 <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	63a3      	str	r3, [r4, #56]	; 0x38
			break;
 8001952:	e013      	b.n	800197c <MX_WINCH_UP_P_CONTROLLER+0x17c>
		}


		Measurement = (SetPoint - Length);
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_WINCH_UP_P_CONTROLLER+0x1a8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	while((Measurement <= SetPoint))
 8001966:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800196a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800196e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	f67f af70 	bls.w	800185a <MX_WINCH_UP_P_CONTROLLER+0x5a>

	}

}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	3750      	adds	r7, #80	; 0x50
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	f3af 8000 	nop.w
 8001988:	190cb39b 	.word	0x190cb39b
 800198c:	3fd91919 	.word	0x3fd91919
 8001990:	9999999a 	.word	0x9999999a
 8001994:	3fc99999 	.word	0x3fc99999
 8001998:	40020000 	.word	0x40020000
 800199c:	41200000 	.word	0x41200000
 80019a0:	40400000 	.word	0x40400000
 80019a4:	20000514 	.word	0x20000514
 80019a8:	20000500 	.word	0x20000500
 80019ac:	20000540 	.word	0x20000540
 80019b0:	200002f0 	.word	0x200002f0
 80019b4:	40590000 	.word	0x40590000
 80019b8:	20000510 	.word	0x20000510

080019bc <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a99      	ldr	r2, [pc, #612]	; (8001c30 <HAL_TIM_IC_CaptureCallback+0x274>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	f040 80b5 	bne.w	8001b3a <HAL_TIM_IC_CaptureCallback+0x17e>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80019d0:	4b98      	ldr	r3, [pc, #608]	; (8001c34 <HAL_TIM_IC_CaptureCallback+0x278>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10a      	bne.n	80019ee <HAL_TIM_IC_CaptureCallback+0x32>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80019d8:	2100      	movs	r1, #0
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f005 f8f4 	bl	8006bc8 <HAL_TIM_ReadCapturedValue>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a95      	ldr	r2, [pc, #596]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80019e4:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80019e6:	4b93      	ldr	r3, [pc, #588]	; (8001c34 <HAL_TIM_IC_CaptureCallback+0x278>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured2 = 0; // set it back to false
		}
	}
}
 80019ec:	e1ba      	b.n	8001d64 <HAL_TIM_IC_CaptureCallback+0x3a8>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80019ee:	2100      	movs	r1, #0
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f005 f8e9 	bl	8006bc8 <HAL_TIM_ReadCapturedValue>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a90      	ldr	r2, [pc, #576]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x280>)
 80019fa:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x280>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d907      	bls.n	8001a18 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x280>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b8a      	ldr	r3, [pc, #552]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	4a8b      	ldr	r2, [pc, #556]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00f      	b.n	8001a38 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8001a18:	4b87      	ldr	r3, [pc, #540]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x280>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d909      	bls.n	8001a38 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001a24:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x280>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a32:	33ff      	adds	r3, #255	; 0xff
 8001a34:	4a82      	ldr	r2, [pc, #520]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001a36:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001a38:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001a3a:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8001a3c:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a48:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a50:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 8001a56:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001c4c <HAL_TIM_IC_CaptureCallback+0x290>
 8001a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a62:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7e:	ee17 2a90 	vmov	r2, s15
 8001a82:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001a84:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 8001a86:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f240 726b 	movw	r2, #1899	; 0x76b
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d90d      	bls.n	8001aae <HAL_TIM_IC_CaptureCallback+0xf2>
				if(!software_deinit)
 8001a92:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f083 0301 	eor.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d044      	beq.n	8001b2a <HAL_TIM_IC_CaptureCallback+0x16e>
					Start_Flag = true;
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
					software_deinit = false;
 8001aa6:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e03d      	b.n	8001b2a <HAL_TIM_IC_CaptureCallback+0x16e>
			else if(usWidth >= THROTTLE_HALF && usWidth < THROTTLE_FULL)
 8001aae:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d90c      	bls.n	8001ad4 <HAL_TIM_IC_CaptureCallback+0x118>
 8001aba:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f240 726b 	movw	r2, #1899	; 0x76b
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d806      	bhi.n	8001ad4 <HAL_TIM_IC_CaptureCallback+0x118>
				Start_Flag = false;
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
				trig = 0;
 8001acc:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e02a      	b.n	8001b2a <HAL_TIM_IC_CaptureCallback+0x16e>
			else if(usWidth < THROTTLE_HALF)
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d824      	bhi.n	8001b2a <HAL_TIM_IC_CaptureCallback+0x16e>
				e_stop = true;
 8001ae0:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd12 	bl	8000514 <__aeabi_ui2d>
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f7fe fd86 	bl	8000608 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001b0a:	f7fe fea7 	bl	800085c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4954      	ldr	r1, [pc, #336]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001b14:	680c      	ldr	r4, [r1, #0]
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f84d 	bl	8000bb8 <__aeabi_d2uiz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	63a3      	str	r3, [r4, #56]	; 0x38
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001b22:	2104      	movs	r1, #4
 8001b24:	484f      	ldr	r0, [pc, #316]	; (8001c64 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001b26:	f004 fbbb 	bl	80062a0 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001b32:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	e114      	b.n	8001d64 <HAL_TIM_IC_CaptureCallback+0x3a8>
	else if(htim->Instance == TIM2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	f040 810f 	bne.w	8001d64 <HAL_TIM_IC_CaptureCallback+0x3a8>
		if (Is_First_Captured2==0) // if the first rising edge is not captured
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_TIM_IC_CaptureCallback+0x1a8>
			IC2_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8001b4e:	2108      	movs	r1, #8
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f005 f839 	bl	8006bc8 <HAL_TIM_ReadCapturedValue>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001b5a:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;  // set the first captured as true
 8001b5c:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	e0ff      	b.n	8001d64 <HAL_TIM_IC_CaptureCallback+0x3a8>
			IC2_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8001b64:	2108      	movs	r1, #8
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f005 f82e 	bl	8006bc8 <HAL_TIM_ReadCapturedValue>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a41      	ldr	r2, [pc, #260]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001b70:	6013      	str	r3, [r2, #0]
			if (IC2_Val2 > IC2_Val1)
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d907      	bls.n	8001b8e <HAL_TIM_IC_CaptureCallback+0x1d2>
				Difference2 = IC2_Val2-IC2_Val1;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e00d      	b.n	8001baa <HAL_TIM_IC_CaptureCallback+0x1ee>
			else if (IC2_Val1 > IC2_Val2)
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d907      	bls.n	8001baa <HAL_TIM_IC_CaptureCallback+0x1ee>
				Difference2 = (0xffffffff - IC2_Val1) + IC2_Val2;
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8001ba8:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001bac:	617b      	str	r3, [r7, #20]
			frequency2 = refClock/Difference2;
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bba:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 8001bc8:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001c4c <HAL_TIM_IC_CaptureCallback+0x290>
 8001bcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	edc7 7a04 	vstr	s15, [r7, #16]
			usWidth2 = Difference2*mFactor;
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf0:	ee17 2a90 	vmov	r2, s15
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8001bf6:	601a      	str	r2, [r3, #0]
			if(usWidth2 >= MAN_WINCH_UP)
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f240 726b 	movw	r2, #1899	; 0x76b
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d94d      	bls.n	8001ca0 <HAL_TIM_IC_CaptureCallback+0x2e4>
					payload_at_20_up = true;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
					payload_at_30_up = false;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
					payload_at_0_up  = false;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
					payload_at_0_stop = false;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
					payload_at_20_down = false;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
					payload_at_30_down = false;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
					payload_at_0_down  = false;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e092      	b.n	8001d56 <HAL_TIM_IC_CaptureCallback+0x39a>
 8001c30:	40000800 	.word	0x40000800
 8001c34:	200004d0 	.word	0x200004d0
 8001c38:	200004c4 	.word	0x200004c4
 8001c3c:	200004c8 	.word	0x200004c8
 8001c40:	200004cc 	.word	0x200004cc
 8001c44:	49742400 	.word	0x49742400
 8001c48:	200004d8 	.word	0x200004d8
 8001c4c:	49742400 	.word	0x49742400
 8001c50:	200004d4 	.word	0x200004d4
 8001c54:	200004dc 	.word	0x200004dc
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000504 	.word	0x20000504
 8001c60:	20000508 	.word	0x20000508
 8001c64:	200002f0 	.word	0x200002f0
 8001c68:	40590000 	.word	0x40590000
 8001c6c:	200004ec 	.word	0x200004ec
 8001c70:	200004e0 	.word	0x200004e0
 8001c74:	200004e4 	.word	0x200004e4
 8001c78:	200004e8 	.word	0x200004e8
 8001c7c:	200004f4 	.word	0x200004f4
 8001c80:	200004f0 	.word	0x200004f0
 8001c84:	20000521 	.word	0x20000521
 8001c88:	20000522 	.word	0x20000522
 8001c8c:	20000520 	.word	0x20000520
 8001c90:	20000523 	.word	0x20000523
 8001c94:	20000525 	.word	0x20000525
 8001c98:	20000526 	.word	0x20000526
 8001c9c:	20000524 	.word	0x20000524
			else if(usWidth2 >= MAN_WINCH_STOP && usWidth2 < MAN_WINCH_UP)
 8001ca0:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d939      	bls.n	8001d20 <HAL_TIM_IC_CaptureCallback+0x364>
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f240 726b 	movw	r2, #1899	; 0x76b
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d833      	bhi.n	8001d20 <HAL_TIM_IC_CaptureCallback+0x364>
				payload_at_0_stop  = true;
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
				payload_at_20_down = false;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
				payload_at_30_down = false;
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
				payload_at_0_down  = false;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
				payload_at_30_up = false;
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
				payload_at_20_up = false;
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
				payload_at_0_up  = false;
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc14 	bl	8000514 <__aeabi_ui2d>
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f7fe fc88 	bl	8000608 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001d06:	f7fe fda9 	bl	800085c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001d10:	680c      	ldr	r4, [r1, #0]
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff4f 	bl	8000bb8 <__aeabi_d2uiz>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d1e:	e01a      	b.n	8001d56 <HAL_TIM_IC_CaptureCallback+0x39a>
			else if(usWidth2 < MAN_WINCH_STOP)
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d814      	bhi.n	8001d56 <HAL_TIM_IC_CaptureCallback+0x39a>
					payload_at_20_down = true;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
					payload_at_30_down = false;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
					payload_at_0_down  = false;
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
					payload_at_0_stop = false;
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
					payload_at_30_up = false;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
					payload_at_20_up = false;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
					payload_at_0_up  = false;
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured2 = 0; // set it back to false
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	200004f0 	.word	0x200004f0
 8001d70:	20000523 	.word	0x20000523
 8001d74:	20000525 	.word	0x20000525
 8001d78:	20000526 	.word	0x20000526
 8001d7c:	20000524 	.word	0x20000524
 8001d80:	20000522 	.word	0x20000522
 8001d84:	20000521 	.word	0x20000521
 8001d88:	20000520 	.word	0x20000520
 8001d8c:	200002f0 	.word	0x200002f0
 8001d90:	40590000 	.word	0x40590000
 8001d94:	200004ec 	.word	0x200004ec

08001d98 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 8001d98:	b598      	push	{r3, r4, r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

	indx++;  //Monitors the time
 8001d9c:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <HAL_SYSTICK_Callback+0x208>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_SYSTICK_Callback+0x208>)
 8001da6:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 8001da8:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <HAL_SYSTICK_Callback+0x20c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a7d      	ldr	r2, [pc, #500]	; (8001fa4 <HAL_SYSTICK_Callback+0x20c>)
 8001db0:	6013      	str	r3, [r2, #0]

	if(payload_at_20_up)
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <HAL_SYSTICK_Callback+0x210>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d027      	beq.n	8001e0a <HAL_SYSTICK_Callback+0x72>
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc0:	487a      	ldr	r0, [pc, #488]	; (8001fac <HAL_SYSTICK_Callback+0x214>)
 8001dc2:	f002 fa33 	bl	800422c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2120      	movs	r1, #32
 8001dca:	4878      	ldr	r0, [pc, #480]	; (8001fac <HAL_SYSTICK_Callback+0x214>)
 8001dcc:	f002 fa2e 	bl	800422c <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_PAYLOAD_2o)/100);
 8001dd0:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <HAL_SYSTICK_Callback+0x218>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fb9d 	bl	8000514 <__aeabi_ui2d>
 8001dda:	a36b      	add	r3, pc, #428	; (adr r3, 8001f88 <HAL_SYSTICK_Callback+0x1f0>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fc12 	bl	8000608 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	4b70      	ldr	r3, [pc, #448]	; (8001fb4 <HAL_SYSTICK_Callback+0x21c>)
 8001df2:	f7fe fd33 	bl	800085c <__aeabi_ddiv>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	496d      	ldr	r1, [pc, #436]	; (8001fb0 <HAL_SYSTICK_Callback+0x218>)
 8001dfc:	680c      	ldr	r4, [r1, #0]
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7fe fed9 	bl	8000bb8 <__aeabi_d2uiz>
 8001e06:	4603      	mov	r3, r0
 8001e08:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	if(payload_at_20_down)
 8001e0a:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <HAL_SYSTICK_Callback+0x220>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d027      	beq.n	8001e62 <HAL_SYSTICK_Callback+0xca>
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e18:	4864      	ldr	r0, [pc, #400]	; (8001fac <HAL_SYSTICK_Callback+0x214>)
 8001e1a:	f002 fa07 	bl	800422c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2120      	movs	r1, #32
 8001e22:	4862      	ldr	r0, [pc, #392]	; (8001fac <HAL_SYSTICK_Callback+0x214>)
 8001e24:	f002 fa02 	bl	800422c <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_PAYLOAD_2o)/100);
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <HAL_SYSTICK_Callback+0x218>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb71 	bl	8000514 <__aeabi_ui2d>
 8001e32:	a355      	add	r3, pc, #340	; (adr r3, 8001f88 <HAL_SYSTICK_Callback+0x1f0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbe6 	bl	8000608 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_SYSTICK_Callback+0x21c>)
 8001e4a:	f7fe fd07 	bl	800085c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4957      	ldr	r1, [pc, #348]	; (8001fb0 <HAL_SYSTICK_Callback+0x218>)
 8001e54:	680c      	ldr	r4, [r1, #0]
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fead 	bl	8000bb8 <__aeabi_d2uiz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	if(Start_Flag)
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_SYSTICK_Callback+0x224>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d014      	beq.n	8001e94 <HAL_SYSTICK_Callback+0xfc>
	{
		++trig;
 8001e6a:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <HAL_SYSTICK_Callback+0x228>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <HAL_SYSTICK_Callback+0x228>)
 8001e72:	6013      	str	r3, [r2, #0]
		if(trig >= 5000)
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <HAL_SYSTICK_Callback+0x228>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d906      	bls.n	8001e8e <HAL_SYSTICK_Callback+0xf6>
		{
			START_THE_SEQUENCE = true;
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_SYSTICK_Callback+0x22c>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
			Start_Flag = false;
 8001e86:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <HAL_SYSTICK_Callback+0x224>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e002      	b.n	8001e94 <HAL_SYSTICK_Callback+0xfc>
			//HAL_TIM_IC_MspDeInit(&htim4);
		}


		else {
			START_THE_SEQUENCE = false;
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_SYSTICK_Callback+0x22c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
		}
	}

	if(indx == 10)  // every 10 millisecond
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_SYSTICK_Callback+0x208>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2b0a      	cmp	r3, #10
 8001e9a:	d172      	bne.n	8001f82 <HAL_SYSTICK_Callback+0x1ea>
	{
		//Calculate the rpm
		indx = 0;
 8001e9c:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_SYSTICK_Callback+0x208>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	801a      	strh	r2, [r3, #0]
		AS5600_GetRawAngle(&as5600);
 8001ea2:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <HAL_SYSTICK_Callback+0x230>)
 8001ea4:	f7ff f8ba 	bl	800101c <AS5600_GetRawAngle>

		CurrRead = as5600.rawAngle;
 8001ea8:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_SYSTICK_Callback+0x230>)
 8001eaa:	88da      	ldrh	r2, [r3, #6]
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_SYSTICK_Callback+0x234>)
 8001eae:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  > 2047) rev ++;
 8001eb0:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_SYSTICK_Callback+0x238>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_SYSTICK_Callback+0x234>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec0:	db08      	blt.n	8001ed4 <HAL_SYSTICK_Callback+0x13c>
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001ed2:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  < -2047) rev --;
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <HAL_SYSTICK_Callback+0x238>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_SYSTICK_Callback+0x234>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8001ee4:	dc08      	bgt.n	8001ef8 <HAL_SYSTICK_Callback+0x160>
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001ef6:	801a      	strh	r2, [r3, #0]

		//sprintf((char*)buf, "Rev : %d\r\n", rev);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);

		LastRead = CurrRead;
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_SYSTICK_Callback+0x234>)
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_SYSTICK_Callback+0x238>)
 8001efe:	801a      	strh	r2, [r3, #0]

		if(rev < 0) Length = (2 * __PI * __RADIUS * (-rev)) * 0.01;   //Converting centi to meters
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da1e      	bge.n	8001f48 <HAL_SYSTICK_Callback+0x1b0>
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	425b      	negs	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb0e 	bl	8000534 <__aeabi_i2d>
 8001f18:	a31d      	add	r3, pc, #116	; (adr r3, 8001f90 <HAL_SYSTICK_Callback+0x1f8>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb73 	bl	8000608 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	a31b      	add	r3, pc, #108	; (adr r3, 8001f98 <HAL_SYSTICK_Callback+0x200>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb6a 	bl	8000608 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fe5c 	bl	8000bf8 <__aeabi_d2f>
 8001f40:	4603      	mov	r3, r0
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_SYSTICK_Callback+0x240>)
 8001f44:	6013      	str	r3, [r2, #0]
		}


	else{}

}
 8001f46:	e01c      	b.n	8001f82 <HAL_SYSTICK_Callback+0x1ea>
		else Length = (2 * __PI * __RADIUS * (rev)) * 0.01;   //Converting centi to meters
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_SYSTICK_Callback+0x23c>)
 8001f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe faf0 	bl	8000534 <__aeabi_i2d>
 8001f54:	a30e      	add	r3, pc, #56	; (adr r3, 8001f90 <HAL_SYSTICK_Callback+0x1f8>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb55 	bl	8000608 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	a30c      	add	r3, pc, #48	; (adr r3, 8001f98 <HAL_SYSTICK_Callback+0x200>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fb4c 	bl	8000608 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fe3e 	bl	8000bf8 <__aeabi_d2f>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_SYSTICK_Callback+0x240>)
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	bd98      	pop	{r3, r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	5f4fe082 	.word	0x5f4fe082
 8001f8c:	402f5f5f 	.word	0x402f5f5f
 8001f90:	39f3c1ae 	.word	0x39f3c1ae
 8001f94:	402ce714 	.word	0x402ce714
 8001f98:	47ae147b 	.word	0x47ae147b
 8001f9c:	3f847ae1 	.word	0x3f847ae1
 8001fa0:	20000518 	.word	0x20000518
 8001fa4:	2000051c 	.word	0x2000051c
 8001fa8:	20000521 	.word	0x20000521
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	200002f0 	.word	0x200002f0
 8001fb4:	40590000 	.word	0x40590000
 8001fb8:	20000525 	.word	0x20000525
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000504 	.word	0x20000504
 8001fc4:	20000509 	.word	0x20000509
 8001fc8:	2000045c 	.word	0x2000045c
 8001fcc:	200004fa 	.word	0x200004fa
 8001fd0:	200004f8 	.word	0x200004f8
 8001fd4:	200004fc 	.word	0x200004fc
 8001fd8:	20000500 	.word	0x20000500

08001fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b094      	sub	sp, #80	; 0x50
 8001fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	2230      	movs	r2, #48	; 0x30
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f006 fb1c 	bl	8008628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <SystemClock_Config+0xcc>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <SystemClock_Config+0xcc>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <SystemClock_Config+0xcc>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <SystemClock_Config+0xd0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002028:	4a20      	ldr	r2, [pc, #128]	; (80020ac <SystemClock_Config+0xd0>)
 800202a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <SystemClock_Config+0xd0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800203c:	2301      	movs	r3, #1
 800203e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002046:	2302      	movs	r3, #2
 8002048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002050:	230f      	movs	r3, #15
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002054:	2390      	movs	r3, #144	; 0x90
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002058:	2304      	movs	r3, #4
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800205c:	2305      	movs	r3, #5
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fbc3 	bl	80057f0 <HAL_RCC_OscConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002070:	f000 fab2 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002074:	230f      	movs	r3, #15
 8002076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002078:	2302      	movs	r3, #2
 800207a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fe25 	bl	8005ce0 <HAL_RCC_ClockConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800209c:	f000 fa9c 	bl	80025d8 <Error_Handler>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3750      	adds	r7, #80	; 0x50
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MX_ADC1_Init+0x98>)
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <MX_ADC1_Init+0x9c>)
 80020c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <MX_ADC1_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_ADC1_Init+0x98>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_ADC1_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <MX_ADC1_Init+0x98>)
 80020dc:	2201      	movs	r2, #1
 80020de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_ADC1_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <MX_ADC1_Init+0x98>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <MX_ADC1_Init+0x98>)
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <MX_ADC1_Init+0xa0>)
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <MX_ADC1_Init+0x98>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <MX_ADC1_Init+0x98>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_ADC1_Init+0x98>)
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_ADC1_Init+0x98>)
 800210a:	2201      	movs	r2, #1
 800210c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800210e:	480e      	ldr	r0, [pc, #56]	; (8002148 <MX_ADC1_Init+0x98>)
 8002110:	f001 f8b8 	bl	8003284 <HAL_ADC_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800211a:	f000 fa5d 	bl	80025d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800211e:	2304      	movs	r3, #4
 8002120:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002126:	2306      	movs	r3, #6
 8002128:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4619      	mov	r1, r3
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <MX_ADC1_Init+0x98>)
 8002130:	f001 f8ec 	bl	800330c <HAL_ADC_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800213a:	f000 fa4d 	bl	80025d8 <Error_Handler>
  }

}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000200 	.word	0x20000200
 800214c:	40012000 	.word	0x40012000
 8002150:	0f000001 	.word	0x0f000001

08002154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_I2C1_Init+0x50>)
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <MX_I2C1_Init+0x54>)
 800215c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_I2C1_Init+0x58>)
 8002162:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_I2C1_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002176:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <MX_I2C1_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_I2C1_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002192:	f002 f889 	bl	80042a8 <HAL_I2C_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800219c:	f000 fa1c 	bl	80025d8 <Error_Handler>
	}
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000408 	.word	0x20000408
 80021a8:	40005400 	.word	0x40005400
 80021ac:	000186a0 	.word	0x000186a0

080021b0 <MX_UART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart1.Instance = USART1;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_UART1_Init+0x44>)
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <MX_UART1_Init+0x48>)
 80021b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_UART1_Init+0x44>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_UART1_Init+0x44>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <MX_UART1_Init+0x44>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_UART1_Init+0x44>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.Parity = UART_PARITY_NONE;
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <MX_UART1_Init+0x44>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_UART1_Init+0x44>)
 80021dc:	220c      	movs	r2, #12
 80021de:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK) Error_Handler();  // If there is a problem
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_UART1_Init+0x44>)
 80021e2:	f005 f92f 	bl	8007444 <HAL_UART_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_UART1_Init+0x40>
 80021ec:	f000 f9f4 	bl	80025d8 <Error_Handler>

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000380 	.word	0x20000380
 80021f8:	40011000 	.word	0x40011000

080021fc <MX_UART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_UART2_Init+0x44>)
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <MX_UART2_Init+0x48>)
 8002204:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_UART2_Init+0x44>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_UART2_Init+0x44>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <MX_UART2_Init+0x44>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_UART2_Init+0x44>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <MX_UART2_Init+0x44>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_UART2_Init+0x44>)
 8002228:	220c      	movs	r2, #12
 800222a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();  // If there is a problem
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_UART2_Init+0x44>)
 800222e:	f005 f909 	bl	8007444 <HAL_UART_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_UART2_Init+0x40>
 8002238:	f000 f9ce 	bl	80025d8 <Error_Handler>

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200003c4 	.word	0x200003c4
 8002244:	40004400 	.word	0x40004400

08002248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
  	 * Load the number to the ARR register.(Only 16 bit wide)
  	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
  	 *
  	 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8002258:	463b      	mov	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <MX_TIM2_Init+0xa0>)
 8002266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226a:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 60-1;
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <MX_TIM2_Init+0xa0>)
 800226e:	223b      	movs	r2, #59	; 0x3b
 8002270:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <MX_TIM2_Init+0xa0>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 4294967295;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_TIM2_Init+0xa0>)
 800227a:	f04f 32ff 	mov.w	r2, #4294967295
 800227e:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <MX_TIM2_Init+0xa0>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_TIM2_Init+0xa0>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800228c:	4816      	ldr	r0, [pc, #88]	; (80022e8 <MX_TIM2_Init+0xa0>)
 800228e:	f004 f86b 	bl	8006368 <HAL_TIM_IC_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x54>
	  {
		Error_Handler();
 8002298:	f000 f99e 	bl	80025d8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	480f      	ldr	r0, [pc, #60]	; (80022e8 <MX_TIM2_Init+0xa0>)
 80022ac:	f005 f848 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM2_Init+0x72>
	  {
		Error_Handler();
 80022b6:	f000 f98f 	bl	80025d8 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80022ba:	230a      	movs	r3, #10
 80022bc:	603b      	str	r3, [r7, #0]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022be:	2301      	movs	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICFilter = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	2208      	movs	r2, #8
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_TIM2_Init+0xa0>)
 80022d2:	f004 fb1b 	bl	800690c <HAL_TIM_IC_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM2_Init+0x98>
	  {
		Error_Handler();
 80022dc:	f000 f97c 	bl	80025d8 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e0:	bf00      	nop
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200002a8 	.word	0x200002a8

080022ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]
 800230a:	615a      	str	r2, [r3, #20]
 800230c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800230e:	4b27      	ldr	r3, [pc, #156]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <MX_TIM3_Init+0xc4>)
 8002312:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1; //60MHz
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002316:	223b      	movs	r2, #59	; 0x3b
 8002318:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <MX_TIM3_Init+0xc0>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64 - 1;  //Generates 15KHz frequency signal.
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002322:	223f      	movs	r2, #63	; 0x3f
 8002324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <MX_TIM3_Init+0xc0>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002332:	481e      	ldr	r0, [pc, #120]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002334:	f003 feb4 	bl	80060a0 <HAL_TIM_PWM_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800233e:	f000 f94b 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	4619      	mov	r1, r3
 8002350:	4816      	ldr	r0, [pc, #88]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002352:	f004 fff5 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800235c:	f000 f93c 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002360:	2360      	movs	r3, #96	; 0x60
 8002362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	480d      	ldr	r0, [pc, #52]	; (80023ac <MX_TIM3_Init+0xc0>)
 8002378:	f004 fb64 	bl	8006a44 <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002382:	f000 f929 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2204      	movs	r2, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <MX_TIM3_Init+0xc0>)
 800238e:	f004 fb59 	bl	8006a44 <HAL_TIM_PWM_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002398:	f000 f91e 	bl	80025d8 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <MX_TIM3_Init+0xc0>)
 800239e:	f000 fac5 	bl	800292c <HAL_TIM_MspPostInit>

}
 80023a2:	bf00      	nop
 80023a4:	3728      	adds	r7, #40	; 0x28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002f0 	.word	0x200002f0
 80023b0:	40000400 	.word	0x40000400

080023b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023d2:	4a21      	ldr	r2, [pc, #132]	; (8002458 <MX_TIM4_Init+0xa4>)
 80023d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023d8:	223b      	movs	r2, #59	; 0x3b
 80023da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80023f6:	4817      	ldr	r0, [pc, #92]	; (8002454 <MX_TIM4_Init+0xa0>)
 80023f8:	f003 ffb6 	bl	8006368 <HAL_TIM_IC_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002402:	f000 f8e9 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4619      	mov	r1, r3
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <MX_TIM4_Init+0xa0>)
 8002416:	f004 ff93 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002420:	f000 f8da 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002424:	230a      	movs	r3, #10
 8002426:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002428:	2301      	movs	r3, #1
 800242a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002434:	463b      	mov	r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <MX_TIM4_Init+0xa0>)
 800243c:	f004 fa66 	bl	800690c <HAL_TIM_IC_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002446:	f000 f8c7 	bl	80025d8 <Error_Handler>
  }

}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000338 	.word	0x20000338
 8002458:	40000800 	.word	0x40000800

0800245c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <MX_DMA_Init+0x3c>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <MX_DMA_Init+0x3c>)
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <MX_DMA_Init+0x3c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2038      	movs	r0, #56	; 0x38
 8002484:	f001 fa3b 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002488:	2038      	movs	r0, #56	; 0x38
 800248a:	f001 fa54 	bl	8003936 <HAL_NVIC_EnableIRQ>

}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
 80024b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a43      	ldr	r2, [pc, #268]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <MX_GPIO_Init+0x12c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <MX_GPIO_Init+0x12c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <MX_GPIO_Init+0x12c>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <MX_GPIO_Init+0x12c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, winch_dir_Pin|bay_dir_Pin, GPIO_PIN_RESET);
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002528:	4828      	ldr	r0, [pc, #160]	; (80025cc <MX_GPIO_Init+0x130>)
 800252a:	f001 fe7f 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : spring_thing_ext_Pin */
  GPIO_InitStruct.Pin = spring_thing_ext_Pin_Pin;
 800252e:	2308      	movs	r3, #8
 8002530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002532:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002538:	2301      	movs	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(spring_thing_ext_Pin_GPIO_Port, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	4823      	ldr	r0, [pc, #140]	; (80025d0 <MX_GPIO_Init+0x134>)
 8002544:	f001 fc0a 	bl	8003d5c <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002548:	2009      	movs	r0, #9
 800254a:	f001 f9f4 	bl	8003936 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn,15,0);
 800254e:	2200      	movs	r2, #0
 8002550:	210f      	movs	r1, #15
 8002552:	2009      	movs	r0, #9
 8002554:	f001 f9d3 	bl	80038fe <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : winch_dir_Pin bay_dir_Pin */
  GPIO_InitStruct.Pin = winch_dir_Pin|bay_dir_Pin;
 8002558:	f44f 7390 	mov.w	r3, #288	; 0x120
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	4816      	ldr	r0, [pc, #88]	; (80025cc <MX_GPIO_Init+0x130>)
 8002572:	f001 fbf3 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : roof_top_ext_Pin */
  GPIO_InitStruct.Pin = roof_top_ext_Pin;
 8002576:	2301      	movs	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800257a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800257e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002580:	2301      	movs	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(roof_top_ext_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	4811      	ldr	r0, [pc, #68]	; (80025d0 <MX_GPIO_Init+0x134>)
 800258c:	f001 fbe6 	bl	8003d5c <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002590:	2006      	movs	r0, #6
 8002592:	f001 f9d0 	bl	8003936 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn,15,0);
 8002596:	2200      	movs	r2, #0
 8002598:	210f      	movs	r1, #15
 800259a:	2006      	movs	r0, #6
 800259c:	f001 f9af 	bl	80038fe <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : internal LED */
  GPIO_InitStruct.Pin = blue_led_Pin;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(blue_led_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <MX_GPIO_Init+0x138>)
 80025ba:	f001 fbcf 	bl	8003d5c <HAL_GPIO_Init>


}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop

	/*
	 * Can Add ASSERT Statements here, for debugging purpose only.
	 */
  __disable_irq();
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <Error_Handler+0x8>
	...

080025e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_MspInit+0x4c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <HAL_MspInit+0x4c>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_MspInit+0x4c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_MspInit+0x4c>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_MspInit+0x4c>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_MspInit+0x4c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_ADC_MspInit+0xec>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d15f      	bne.n	8002716 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_ADC_MspInit+0xf0>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a31      	ldr	r2, [pc, #196]	; (8002724 <HAL_ADC_MspInit+0xf0>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_ADC_MspInit+0xf0>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_ADC_MspInit+0xf0>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <HAL_ADC_MspInit+0xf0>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_ADC_MspInit+0xf0>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = curr_sensor_Pin;
 800268e:	2310      	movs	r3, #16
 8002690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002692:	2303      	movs	r3, #3
 8002694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(curr_sensor_GPIO_Port, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4821      	ldr	r0, [pc, #132]	; (8002728 <HAL_ADC_MspInit+0xf4>)
 80026a2:	f001 fb5b 	bl	8003d5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_ADC_MspInit+0xfc>)
 80026aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026ec:	f001 f944 	bl	8003978 <HAL_DMA_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80026f6:	f7ff ff6f 	bl	80025d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_ADC_MspInit+0xf8>)
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_ADC_MspInit+0xf8>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2012      	movs	r0, #18
 800270c:	f001 f8f7 	bl	80038fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002710:	2012      	movs	r0, #18
 8002712:	f001 f910 	bl	8003936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40012000 	.word	0x40012000
 8002724:	40023800 	.word	0x40023800
 8002728:	40020000 	.word	0x40020000
 800272c:	20000248 	.word	0x20000248
 8002730:	40026410 	.word	0x40026410

08002734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_I2C_MspInit+0x94>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d134      	bne.n	80027c0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_I2C_MspInit+0x98>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_I2C_MspInit+0x98>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_I2C_MspInit+0x98>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002772:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002778:	2312      	movs	r3, #18
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002784:	2304      	movs	r3, #4
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	4810      	ldr	r0, [pc, #64]	; (80027d0 <HAL_I2C_MspInit+0x9c>)
 8002790:	f001 fae4 	bl	8003d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_I2C_MspInit+0x98>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_I2C_MspInit+0x98>)
 800279e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a2:	6413      	str	r3, [r2, #64]	; 0x40
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_I2C_MspInit+0x98>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2101      	movs	r1, #1
 80027b4:	201f      	movs	r0, #31
 80027b6:	f001 f8a2 	bl	80038fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027ba:	201f      	movs	r0, #31
 80027bc:	f001 f8bb 	bl	8003936 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027c0:	bf00      	nop
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40005400 	.word	0x40005400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_TIM_PWM_MspInit+0x3c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_TIM_PWM_MspInit+0x40>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_TIM_PWM_MspInit+0x40>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_TIM_PWM_MspInit+0x40>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40000400 	.word	0x40000400
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_TIM_IC_MspInit+0x108>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d134      	bne.n	80028a4 <HAL_TIM_IC_MspInit+0x8c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a31      	ldr	r2, [pc, #196]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = pixhawk_signal_Pin;
 8002872:	2340      	movs	r3, #64	; 0x40
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002882:	2302      	movs	r3, #2
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pixhawk_signal_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	4826      	ldr	r0, [pc, #152]	; (8002928 <HAL_TIM_IC_MspInit+0x110>)
 800288e:	f001 fa65 	bl	8003d5c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
   HAL_NVIC_SetPriority(TIM4_IRQn, 8, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2108      	movs	r1, #8
 8002896:	201e      	movs	r0, #30
 8002898:	f001 f831 	bl	80038fe <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800289c:	201e      	movs	r0, #30
 800289e:	f001 f84a 	bl	8003936 <HAL_NVIC_EnableIRQ>
      /* TIM4 interrupt Init */
     HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
    }

}
 80028a2:	e039      	b.n	8002918 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d134      	bne.n	8002918 <HAL_TIM_IC_MspInit+0x100>
      __HAL_RCC_TIM2_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_TIM_IC_MspInit+0x10c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = man_winch_Pin;
 80028e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ea:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028f8:	2301      	movs	r3, #1
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      HAL_GPIO_Init(man_winch_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	4809      	ldr	r0, [pc, #36]	; (8002928 <HAL_TIM_IC_MspInit+0x110>)
 8002904:	f001 fa2a 	bl	8003d5c <HAL_GPIO_Init>
     HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2106      	movs	r1, #6
 800290c:	201c      	movs	r0, #28
 800290e:	f000 fff6 	bl	80038fe <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002912:	201c      	movs	r0, #28
 8002914:	f001 f80f 	bl	8003936 <HAL_NVIC_EnableIRQ>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40000800 	.word	0x40000800
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400

0800292c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_TIM_MspPostInit+0x68>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d11d      	bne.n	800298a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_TIM_MspPostInit+0x6c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <HAL_TIM_MspPostInit+0x6c>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_TIM_MspPostInit+0x6c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = winch_pwm_Pin|bay_door_pwm_Pin;
 800296a:	23c0      	movs	r3, #192	; 0xc0
 800296c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800297a:	2302      	movs	r3, #2
 800297c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <HAL_TIM_MspPostInit+0x70>)
 8002986:	f001 f9e9 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40000400 	.word	0x40000400
 8002998:	40023800 	.word	0x40023800
 800299c:	40020000 	.word	0x40020000

080029a0 <HAL_TIM_IC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef* htim_ic)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if(htim_ic->Instance==TIM4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <HAL_TIM_IC_MspDeInit+0x50>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d109      	bne.n	80029c6 <HAL_TIM_IC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_TIM_IC_MspDeInit+0x54>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_TIM_IC_MspDeInit+0x54>)
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40

    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    HAL_GPIO_DeInit(pixhawk_signal_GPIO_Port, pixhawk_signal_Pin);
 80029be:	2140      	movs	r1, #64	; 0x40
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <HAL_TIM_IC_MspDeInit+0x58>)
 80029c2:	f001 fb4f 	bl	8004064 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

  if(htim_ic->Instance==TIM2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d10a      	bne.n	80029e6 <HAL_TIM_IC_MspDeInit+0x46>
    {
    /* USER CODE BEGIN TIM4_MspDeInit 0 */

    /* USER CODE END TIM4_MspDeInit 0 */
      /* Peripheral clock disable */
      __HAL_RCC_TIM2_CLK_DISABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_TIM_IC_MspDeInit+0x54>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_TIM_IC_MspDeInit+0x54>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6413      	str	r3, [r2, #64]	; 0x40

      /**TIM4 GPIO Configuration
      PB6     ------> TIM4_CH1
      */
      HAL_GPIO_DeInit(man_winch_GPIO_Port, man_winch_Pin);
 80029dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_TIM_IC_MspDeInit+0x58>)
 80029e2:	f001 fb3f 	bl	8004064 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN TIM4_MspDeInit 1 */

    /* USER CODE END TIM4_MspDeInit 1 */
    }

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020400 	.word	0x40020400

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d13d      	bne.n	8002a9a <HAL_UART_MspInit+0x9e>
  {
      /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a28:	f043 0310 	orr.w	r3, r3, #16
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4826      	ldr	r0, [pc, #152]	; (8002b0c <HAL_UART_MspInit+0x110>)
 8002a74:	f001 f972 	bl	8003d5c <HAL_GPIO_Init>


    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a78:	2025      	movs	r0, #37	; 0x25
 8002a7a:	f000 ff5c 	bl	8003936 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2106      	movs	r1, #6
 8002a82:	2025      	movs	r0, #37	; 0x25
 8002a84:	f000 ff3b 	bl	80038fe <HAL_NVIC_SetPriority>

	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002a88:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <HAL_UART_MspInit+0x114>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_UART_MspInit+0x114>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	60da      	str	r2, [r3, #12]

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  }

}
 8002a98:	e030      	b.n	8002afc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <HAL_UART_MspInit+0x118>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d12b      	bne.n	8002afc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_UART_MspInit+0x10c>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002adc:	230c      	movs	r3, #12
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aec:	2307      	movs	r3, #7
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_UART_MspInit+0x110>)
 8002af8:	f001 f930 	bl	8003d5c <HAL_GPIO_Init>
}
 8002afc:	bf00      	nop
 8002afe:	3730      	adds	r7, #48	; 0x30
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40011000 	.word	0x40011000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	20000380 	.word	0x20000380
 8002b14:	40004400 	.word	0x40004400

08002b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <NMI_Handler+0x4>

08002b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <HardFault_Handler+0x4>

08002b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <MemManage_Handler+0x4>

08002b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <BusFault_Handler+0x4>

08002b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <UsageFault_Handler+0x4>

08002b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8002b64:	f000 fb4a 	bl	80031fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002b68:	f000 feff 	bl	800396a <HAL_SYSTICK_IRQHandler>
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM4_IRQHandler+0x10>)
 8002b76:	f003 fdc1 	bl	80066fc <HAL_TIM_IRQHandler>
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000338 	.word	0x20000338

08002b84 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <TIM2_IRQHandler+0x10>)
 8002b8a:	f003 fdb7 	bl	80066fc <HAL_TIM_IRQHandler>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200002a8 	.word	0x200002a8

08002b98 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4985      	ldr	r1, [pc, #532]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002ba4:	4885      	ldr	r0, [pc, #532]	; (8002dbc <USART1_IRQHandler+0x224>)
 8002ba6:	f004 fd2c 	bl	8007602 <HAL_UART_Receive>
		if (receivedData == '\r')
 8002baa:	4b83      	ldr	r3, [pc, #524]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b0d      	cmp	r3, #13
 8002bb0:	f040 809e 	bne.w	8002cf0 <USART1_IRQHandler+0x158>
			{
				recepCmplt = true;
 8002bb4:	4b82      	ldr	r3, [pc, #520]	; (8002dc0 <USART1_IRQHandler+0x228>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
				Data = atoi((char*)data_buffer);
 8002bba:	4882      	ldr	r0, [pc, #520]	; (8002dc4 <USART1_IRQHandler+0x22c>)
 8002bbc:	f005 fcf8 	bl	80085b0 <atoi>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	4b80      	ldr	r3, [pc, #512]	; (8002dc8 <USART1_IRQHandler+0x230>)
 8002bc6:	801a      	strh	r2, [r3, #0]

				data_buffer[count++] = '\r';
 8002bc8:	4b80      	ldr	r3, [pc, #512]	; (8002dcc <USART1_IRQHandler+0x234>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	497f      	ldr	r1, [pc, #508]	; (8002dcc <USART1_IRQHandler+0x234>)
 8002bd0:	600a      	str	r2, [r1, #0]
 8002bd2:	4a7c      	ldr	r2, [pc, #496]	; (8002dc4 <USART1_IRQHandler+0x22c>)
 8002bd4:	210d      	movs	r1, #13
 8002bd6:	54d1      	strb	r1, [r2, r3]

				Data1 = -Data;
 8002bd8:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <USART1_IRQHandler+0x230>)
 8002bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bde:	425b      	negs	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b7b      	ldr	r3, [pc, #492]	; (8002dd0 <USART1_IRQHandler+0x238>)
 8002be4:	601a      	str	r2, [r3, #0]

				if(Data >= 0)
 8002be6:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <USART1_IRQHandler+0x230>)
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db36      	blt.n	8002c5e <USART1_IRQHandler+0xc6>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf6:	4877      	ldr	r0, [pc, #476]	; (8002dd4 <USART1_IRQHandler+0x23c>)
 8002bf8:	f001 fb18 	bl	800422c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2120      	movs	r1, #32
 8002c00:	4874      	ldr	r0, [pc, #464]	; (8002dd4 <USART1_IRQHandler+0x23c>)
 8002c02:	f001 fb13 	bl	800422c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(Data)/100);
 8002c06:	4b74      	ldr	r3, [pc, #464]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fc82 	bl	8000514 <__aeabi_ui2d>
 8002c10:	4604      	mov	r4, r0
 8002c12:	460d      	mov	r5, r1
 8002c14:	4b6c      	ldr	r3, [pc, #432]	; (8002dc8 <USART1_IRQHandler+0x230>)
 8002c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc8a 	bl	8000534 <__aeabi_i2d>
 8002c20:	a363      	add	r3, pc, #396	; (adr r3, 8002db0 <USART1_IRQHandler+0x218>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fcef 	bl	8000608 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f7fd fce9 	bl	8000608 <__aeabi_dmul>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	4b66      	ldr	r3, [pc, #408]	; (8002ddc <USART1_IRQHandler+0x244>)
 8002c44:	f7fd fe0a 	bl	800085c <__aeabi_ddiv>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4962      	ldr	r1, [pc, #392]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002c4e:	680c      	ldr	r4, [r1, #0]
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ffb0 	bl	8000bb8 <__aeabi_d2uiz>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c5c:	e036      	b.n	8002ccc <USART1_IRQHandler+0x134>

				}

				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c64:	485b      	ldr	r0, [pc, #364]	; (8002dd4 <USART1_IRQHandler+0x23c>)
 8002c66:	f001 fae1 	bl	800422c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2120      	movs	r1, #32
 8002c6e:	4859      	ldr	r0, [pc, #356]	; (8002dd4 <USART1_IRQHandler+0x23c>)
 8002c70:	f001 fadc 	bl	800422c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(-Data)/100);
 8002c74:	4b58      	ldr	r3, [pc, #352]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc4b 	bl	8000514 <__aeabi_ui2d>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	460d      	mov	r5, r1
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <USART1_IRQHandler+0x230>)
 8002c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c88:	425b      	negs	r3, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc52 	bl	8000534 <__aeabi_i2d>
 8002c90:	a347      	add	r3, pc, #284	; (adr r3, 8002db0 <USART1_IRQHandler+0x218>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd fcb7 	bl	8000608 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fcb1 	bl	8000608 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <USART1_IRQHandler+0x244>)
 8002cb4:	f7fd fdd2 	bl	800085c <__aeabi_ddiv>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4946      	ldr	r1, [pc, #280]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002cbe:	680c      	ldr	r4, [r1, #0]
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7fd ff78 	bl	8000bb8 <__aeabi_d2uiz>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	63a3      	str	r3, [r4, #56]	; 0x38

				}


				HAL_UART_Transmit(&huart1, data_buffer, count, HAL_MAX_DELAY);  //send to terminal
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <USART1_IRQHandler+0x234>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	493b      	ldr	r1, [pc, #236]	; (8002dc4 <USART1_IRQHandler+0x22c>)
 8002cd8:	4838      	ldr	r0, [pc, #224]	; (8002dbc <USART1_IRQHandler+0x224>)
 8002cda:	f004 fc00 	bl	80074de <HAL_UART_Transmit>
				memset(data_buffer, 0, sizeof(data_buffer));
 8002cde:	2205      	movs	r2, #5
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4838      	ldr	r0, [pc, #224]	; (8002dc4 <USART1_IRQHandler+0x22c>)
 8002ce4:	f005 fca0 	bl	8008628 <memset>
				count = 0;
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <USART1_IRQHandler+0x234>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
		else
		{
			data_buffer[count++] = receivedData;
		}

	return;
 8002cee:	e05c      	b.n	8002daa <USART1_IRQHandler+0x212>
		else if(receivedData == ' ')
 8002cf0:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d136      	bne.n	8002d66 <USART1_IRQHandler+0x1ce>
			HAL_UART_Transmit(&huart1, (uint8_t *)E_Stop, strlen(E_Stop), HAL_MAX_DELAY);  //send to terminal
 8002cf8:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <USART1_IRQHandler+0x248>)
 8002cfa:	681c      	ldr	r4, [r3, #0]
 8002cfc:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <USART1_IRQHandler+0x248>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fa6d 	bl	80001e0 <strlen>
 8002d06:	4603      	mov	r3, r0
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	4621      	mov	r1, r4
 8002d10:	482a      	ldr	r0, [pc, #168]	; (8002dbc <USART1_IRQHandler+0x224>)
 8002d12:	f004 fbe4 	bl	80074de <HAL_UART_Transmit>
			memset(data_buffer, 0, sizeof(data_buffer));
 8002d16:	2205      	movs	r2, #5
 8002d18:	2100      	movs	r1, #0
 8002d1a:	482a      	ldr	r0, [pc, #168]	; (8002dc4 <USART1_IRQHandler+0x22c>)
 8002d1c:	f005 fc84 	bl	8008628 <memset>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002d20:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fbf5 	bl	8000514 <__aeabi_ui2d>
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	f7fd fc69 	bl	8000608 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <USART1_IRQHandler+0x244>)
 8002d44:	f7fd fd8a 	bl	800085c <__aeabi_ddiv>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4922      	ldr	r1, [pc, #136]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002d4e:	680c      	ldr	r4, [r1, #0]
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f7fd ff30 	bl	8000bb8 <__aeabi_d2uiz>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	63a3      	str	r3, [r4, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	481e      	ldr	r0, [pc, #120]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002d60:	f003 fa9e 	bl	80062a0 <HAL_TIM_PWM_Stop>
	return;
 8002d64:	e021      	b.n	8002daa <USART1_IRQHandler+0x212>
		else if(receivedData == 'r')
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b72      	cmp	r3, #114	; 0x72
 8002d6c:	d108      	bne.n	8002d80 <USART1_IRQHandler+0x1e8>
			HAL_GPIO_Init(GPIOA, &tim3ch1gpio);
 8002d6e:	491d      	ldr	r1, [pc, #116]	; (8002de4 <USART1_IRQHandler+0x24c>)
 8002d70:	4818      	ldr	r0, [pc, #96]	; (8002dd4 <USART1_IRQHandler+0x23c>)
 8002d72:	f000 fff3 	bl	8003d5c <HAL_GPIO_Init>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002d76:	2104      	movs	r1, #4
 8002d78:	4817      	ldr	r0, [pc, #92]	; (8002dd8 <USART1_IRQHandler+0x240>)
 8002d7a:	f003 f9e1 	bl	8006140 <HAL_TIM_PWM_Start>
	return;
 8002d7e:	e014      	b.n	8002daa <USART1_IRQHandler+0x212>
		else if(receivedData == 'v')
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b76      	cmp	r3, #118	; 0x76
 8002d86:	d010      	beq.n	8002daa <USART1_IRQHandler+0x212>
		else if(receivedData == 's')
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b73      	cmp	r3, #115	; 0x73
 8002d8e:	d103      	bne.n	8002d98 <USART1_IRQHandler+0x200>
			Start_Flag = true;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <USART1_IRQHandler+0x250>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
	return;
 8002d96:	e008      	b.n	8002daa <USART1_IRQHandler+0x212>
			data_buffer[count++] = receivedData;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <USART1_IRQHandler+0x234>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	490b      	ldr	r1, [pc, #44]	; (8002dcc <USART1_IRQHandler+0x234>)
 8002da0:	600a      	str	r2, [r1, #0]
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <USART1_IRQHandler+0x220>)
 8002da4:	7811      	ldrb	r1, [r2, #0]
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <USART1_IRQHandler+0x22c>)
 8002da8:	54d1      	strb	r1, [r2, r3]
	return;
 8002daa:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);

}
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	190cb39b 	.word	0x190cb39b
 8002db4:	3fd91919 	.word	0x3fd91919
 8002db8:	2000046c 	.word	0x2000046c
 8002dbc:	20000380 	.word	0x20000380
 8002dc0:	2000047c 	.word	0x2000047c
 8002dc4:	20000470 	.word	0x20000470
 8002dc8:	2000047e 	.word	0x2000047e
 8002dcc:	20000478 	.word	0x20000478
 8002dd0:	20000480 	.word	0x20000480
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	200002f0 	.word	0x200002f0
 8002ddc:	40590000 	.word	0x40590000
 8002de0:	20000004 	.word	0x20000004
 8002de4:	20000528 	.word	0x20000528
 8002de8:	20000000 	.word	0x20000000

08002dec <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
//	if(poop_back)
//	{
//		MavLinkReceive(&huart2, receivedData);
//	}

	HAL_UART_IRQHandler(&huart2);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <USART2_IRQHandler+0x10>)
 8002df2:	f004 fca9 	bl	8007748 <HAL_UART_IRQHandler>
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200003c4 	.word	0x200003c4

08002e00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e00:	b598      	push	{r3, r4, r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PB0
	 */

	if(close_door)
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <EXTI0_IRQHandler+0x70>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02c      	beq.n	8002e66 <EXTI0_IRQHandler+0x66>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <EXTI0_IRQHandler+0x74>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fb7f 	bl	8000514 <__aeabi_ui2d>
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	f7fd fbf3 	bl	8000608 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <EXTI0_IRQHandler+0x78>)
 8002e30:	f7fd fd14 	bl	800085c <__aeabi_ddiv>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <EXTI0_IRQHandler+0x74>)
 8002e3a:	680c      	ldr	r4, [r1, #0]
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7fd feba 	bl	8000bb8 <__aeabi_d2uiz>
 8002e44:	4603      	mov	r3, r0
 8002e46:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_SET);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e4e:	480b      	ldr	r0, [pc, #44]	; (8002e7c <EXTI0_IRQHandler+0x7c>)
 8002e50:	f001 f9ec 	bl	800422c <HAL_GPIO_WritePin>
		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <EXTI0_IRQHandler+0x80>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&hhtim3, TIM_CHANNEL_1, hhtim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/

		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		spring_trig = false;
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <EXTI0_IRQHandler+0x84>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
		START_THE_SEQUENCE = false;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <EXTI0_IRQHandler+0x88>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]


	}


  HAL_GPIO_EXTI_IRQHandler(roof_top_ext_Pin);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f001 f9fa 	bl	8004260 <HAL_GPIO_EXTI_IRQHandler>

}
 8002e6c:	bf00      	nop
 8002e6e:	bd98      	pop	{r3, r4, r7, pc}
 8002e70:	20000510 	.word	0x20000510
 8002e74:	200002f0 	.word	0x200002f0
 8002e78:	40590000 	.word	0x40590000
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	20000511 	.word	0x20000511
 8002e84:	2000050b 	.word	0x2000050b
 8002e88:	20000509 	.word	0x20000509
 8002e8c:	00000000 	.word	0x00000000

08002e90 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
	 */

	/*
	 * Just a check for how many times does the spring trigger
	 */
	spring_trig_count++;
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <EXTI3_IRQHandler+0xa8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <EXTI3_IRQHandler+0xa8>)
 8002e9e:	6013      	str	r3, [r2, #0]

 	if(poop_back)
 8002ea0:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <EXTI3_IRQHandler+0xac>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d03a      	beq.n	8002f1e <EXTI3_IRQHandler+0x8e>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <EXTI3_IRQHandler+0xb0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38

		for(int i =0; i<96000; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e01f      	b.n	8002ef6 <EXTI3_IRQHandler+0x66>
		{

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <EXTI3_IRQHandler+0xb0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb2a 	bl	8000514 <__aeabi_ui2d>
 8002ec0:	a31b      	add	r3, pc, #108	; (adr r3, 8002f30 <EXTI3_IRQHandler+0xa0>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fb9f 	bl	8000608 <__aeabi_dmul>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <EXTI3_IRQHandler+0xb4>)
 8002ed8:	f7fd fcc0 	bl	800085c <__aeabi_ddiv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4917      	ldr	r1, [pc, #92]	; (8002f40 <EXTI3_IRQHandler+0xb0>)
 8002ee2:	680c      	ldr	r4, [r1, #0]
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd fe66 	bl	8000bb8 <__aeabi_d2uiz>
 8002eec:	4603      	mov	r3, r0
 8002eee:	63a3      	str	r3, [r4, #56]	; 0x38
		for(int i =0; i<96000; i++)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <EXTI3_IRQHandler+0xb8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	dddb      	ble.n	8002eb6 <EXTI3_IRQHandler+0x26>

		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <EXTI3_IRQHandler+0xb0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2200      	movs	r2, #0
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);

		HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_RESET);
 8002f06:	2200      	movs	r2, #0
 8002f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f0c:	480f      	ldr	r0, [pc, #60]	; (8002f4c <EXTI3_IRQHandler+0xbc>)
 8002f0e:	f001 f98d 	bl	800422c <HAL_GPIO_WritePin>
		poop_back = false;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <EXTI3_IRQHandler+0xac>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
		spring_trig = true;
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <EXTI3_IRQHandler+0xc0>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]

	}

  HAL_GPIO_EXTI_IRQHandler(spring_thing_ext_Pin_Pin);
 8002f1e:	2008      	movs	r0, #8
 8002f20:	f001 f99e 	bl	8004260 <HAL_GPIO_EXTI_IRQHandler>

}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd90      	pop	{r4, r7, pc}
 8002f2c:	f3af 8000 	nop.w
 8002f30:	877be861 	.word	0x877be861
 8002f34:	40278787 	.word	0x40278787
 8002f38:	2000050c 	.word	0x2000050c
 8002f3c:	2000050a 	.word	0x2000050a
 8002f40:	200002f0 	.word	0x200002f0
 8002f44:	40590000 	.word	0x40590000
 8002f48:	000176ff 	.word	0x000176ff
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	2000050b 	.word	0x2000050b

08002f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
	return 1;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_kill>:

int _kill(int pid, int sig)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f6e:	f005 fb23 	bl	80085b8 <__errno>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2216      	movs	r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
	return -1;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_exit>:

void _exit (int status)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ffe7 	bl	8002f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f96:	e7fe      	b.n	8002f96 <_exit+0x12>

08002f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e00a      	b.n	8002fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002faa:	f3af 8000 	nop.w
 8002fae:	4601      	mov	r1, r0
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	60ba      	str	r2, [r7, #8]
 8002fb6:	b2ca      	uxtb	r2, r1
 8002fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dbf0      	blt.n	8002faa <_read+0x12>
	}

return len;
 8002fc8:	687b      	ldr	r3, [r7, #4]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e009      	b.n	8002ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	60ba      	str	r2, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dbf1      	blt.n	8002fe4 <_write+0x12>
	}
	return len;
 8003000:	687b      	ldr	r3, [r7, #4]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <_close>:

int _close(int file)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
	return -1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003032:	605a      	str	r2, [r3, #4]
	return 0;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <_isatty>:

int _isatty(int file)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	return 1;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
	return 0;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <_sbrk+0x5c>)
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <_sbrk+0x60>)
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <_sbrk+0x64>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <_sbrk+0x68>)
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <_sbrk+0x64>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d207      	bcs.n	80030b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a4:	f005 fa88 	bl	80085b8 <__errno>
 80030a8:	4603      	mov	r3, r0
 80030aa:	220c      	movs	r2, #12
 80030ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	e009      	b.n	80030c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <_sbrk+0x64>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <_sbrk+0x64>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <_sbrk+0x64>)
 80030c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20010000 	.word	0x20010000
 80030d4:	00000400 	.word	0x00000400
 80030d8:	2000053c 	.word	0x2000053c
 80030dc:	20000558 	.word	0x20000558

080030e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <SystemInit+0x20>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	4a05      	ldr	r2, [pc, #20]	; (8003100 <SystemInit+0x20>)
 80030ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800313c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800310a:	490e      	ldr	r1, [pc, #56]	; (8003144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003110:	e002      	b.n	8003118 <LoopCopyDataInit>

08003112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003116:	3304      	adds	r3, #4

08003118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800311c:	d3f9      	bcc.n	8003112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311e:	4a0b      	ldr	r2, [pc, #44]	; (800314c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003120:	4c0b      	ldr	r4, [pc, #44]	; (8003150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003124:	e001      	b.n	800312a <LoopFillZerobss>

08003126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003128:	3204      	adds	r2, #4

0800312a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800312c:	d3fb      	bcc.n	8003126 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800312e:	f7ff ffd7 	bl	80030e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003132:	f005 fa47 	bl	80085c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003136:	f7fe f94d 	bl	80013d4 <main>
  bx  lr    
 800313a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800313c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003144:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003148:	0800b9fc 	.word	0x0800b9fc
  ldr r2, =_sbss
 800314c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003150:	20000554 	.word	0x20000554

08003154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fbb1 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	200f      	movs	r0, #15
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7ff fa2a 	bl	80025e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fbc9 	bl	8003952 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fb91 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000008 	.word	0x20000008
 80031f4:	20000010 	.word	0x20000010
 80031f8:	2000000c 	.word	0x2000000c

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000010 	.word	0x20000010
 8003220:	20000540 	.word	0x20000540

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000540 	.word	0x20000540

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff ffee 	bl	8003224 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_Delay+0x44>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffde 	bl	8003224 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000010 	.word	0x20000010

08003284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e033      	b.n	8003302 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f9c6 	bl	8002634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ca:	f023 0302 	bic.w	r3, r3, #2
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f93a 	bl	8003550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
 80032f2:	e001      	b.n	80032f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x1c>
 8003324:	2302      	movs	r3, #2
 8003326:	e105      	b.n	8003534 <HAL_ADC_ConfigChannel+0x228>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b09      	cmp	r3, #9
 8003336:	d925      	bls.n	8003384 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	3b1e      	subs	r3, #30
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43da      	mvns	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	400a      	ands	r2, r1
 800335c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68d9      	ldr	r1, [r3, #12]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	4603      	mov	r3, r0
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4403      	add	r3, r0
 8003376:	3b1e      	subs	r3, #30
 8003378:	409a      	lsls	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	e022      	b.n	80033ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6919      	ldr	r1, [r3, #16]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	2207      	movs	r2, #7
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	400a      	ands	r2, r1
 80033a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6919      	ldr	r1, [r3, #16]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4618      	mov	r0, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4403      	add	r3, r0
 80033c0:	409a      	lsls	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d824      	bhi.n	800341c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	3b05      	subs	r3, #5
 80033e4:	221f      	movs	r2, #31
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	400a      	ands	r2, r1
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4618      	mov	r0, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	3b05      	subs	r3, #5
 800340e:	fa00 f203 	lsl.w	r2, r0, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
 800341a:	e04c      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d824      	bhi.n	800346e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	3b23      	subs	r3, #35	; 0x23
 8003436:	221f      	movs	r2, #31
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43da      	mvns	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	400a      	ands	r2, r1
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4618      	mov	r0, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	3b23      	subs	r3, #35	; 0x23
 8003460:	fa00 f203 	lsl.w	r2, r0, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
 800346c:	e023      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	3b41      	subs	r3, #65	; 0x41
 8003480:	221f      	movs	r2, #31
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	400a      	ands	r2, r1
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	4618      	mov	r0, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	3b41      	subs	r3, #65	; 0x41
 80034aa:	fa00 f203 	lsl.w	r2, r0, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_ADC_ConfigChannel+0x234>)
 80034b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_ADC_ConfigChannel+0x238>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1cc>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b12      	cmp	r3, #18
 80034ca:	d105      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_ADC_ConfigChannel+0x238>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d123      	bne.n	800352a <HAL_ADC_ConfigChannel+0x21e>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d003      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x1e6>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b11      	cmp	r3, #17
 80034f0:	d11b      	bne.n	800352a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b10      	cmp	r3, #16
 8003504:	d111      	bne.n	800352a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_ADC_ConfigChannel+0x23c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a10      	ldr	r2, [pc, #64]	; (800354c <HAL_ADC_ConfigChannel+0x240>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	0c9a      	lsrs	r2, r3, #18
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800351c:	e002      	b.n	8003524 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3b01      	subs	r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40012300 	.word	0x40012300
 8003544:	40012000 	.word	0x40012000
 8003548:	20000008 	.word	0x20000008
 800354c:	431bde83 	.word	0x431bde83

08003550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <ADC_Init+0x1f0>)
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4a58      	ldr	r2, [pc, #352]	; (8003744 <ADC_Init+0x1f4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e00f      	b.n	800364e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800364c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0202 	bic.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800369a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	3b01      	subs	r3, #1
 80036a8:	035a      	lsls	r2, r3, #13
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e007      	b.n	80036c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	3b01      	subs	r3, #1
 80036e0:	051a      	lsls	r2, r3, #20
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003706:	025a      	lsls	r2, r3, #9
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	029a      	lsls	r2, r3, #10
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012300 	.word	0x40012300
 8003744:	0f000001 	.word	0x0f000001

08003748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60d3      	str	r3, [r2, #12]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 0307 	and.w	r3, r3, #7
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db0b      	blt.n	80037d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <__NVIC_EnableIRQ+0x38>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2001      	movs	r0, #1
 80037ce:	fa00 f202 	lsl.w	r2, r0, r2
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f7ff ff8e 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff29 	bl	8003748 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003910:	f7ff ff3e 	bl	8003790 <__NVIC_GetPriorityGrouping>
 8003914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f7ff ff8e 	bl	800383c <NVIC_EncodePriority>
 8003920:	4602      	mov	r2, r0
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff5d 	bl	80037e8 <__NVIC_SetPriority>
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff31 	bl	80037ac <__NVIC_EnableIRQ>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ffa2 	bl	80038a4 <SysTick_Config>
 8003960:	4603      	mov	r3, r0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800396e:	f7fe fa13 	bl	8001d98 <HAL_SYSTICK_Callback>
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff fc4e 	bl	8003224 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e099      	b.n	8003ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b4:	e00f      	b.n	80039d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b6:	f7ff fc35 	bl	8003224 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d908      	bls.n	80039d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2203      	movs	r2, #3
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e078      	b.n	8003ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e8      	bne.n	80039b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <HAL_DMA_Init+0x158>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d107      	bne.n	8003a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d117      	bne.n	8003a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8f1 	bl	8003c64 <DMA_CheckFifoParam>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a96:	2301      	movs	r3, #1
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8a8 	bl	8003bf8 <DMA_CalcBaseAndBitshift>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	223f      	movs	r2, #63	; 0x3f
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	f010803f 	.word	0xf010803f

08003ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ae2:	f7ff fb9f 	bl	8003224 <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e052      	b.n	8003bac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0216 	bic.w	r2, r2, #22
 8003b14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_DMA_Abort+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0208 	bic.w	r2, r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b56:	e013      	b.n	8003b80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b58:	f7ff fb64 	bl	8003224 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d90c      	bls.n	8003b80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e015      	b.n	8003bac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e4      	bne.n	8003b58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	223f      	movs	r2, #63	; 0x3f
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00c      	b.n	8003bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3b10      	subs	r3, #16
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <DMA_CalcBaseAndBitshift+0x64>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <DMA_CalcBaseAndBitshift+0x68>)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d909      	bls.n	8003c3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	1d1a      	adds	r2, r3, #4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	; 0x58
 8003c38:	e007      	b.n	8003c4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	aaaaaaab 	.word	0xaaaaaaab
 8003c60:	0800b608 	.word	0x0800b608

08003c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d11f      	bne.n	8003cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d856      	bhi.n	8003d32 <DMA_CheckFifoParam+0xce>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <DMA_CheckFifoParam+0x28>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003caf 	.word	0x08003caf
 8003c94:	08003c9d 	.word	0x08003c9d
 8003c98:	08003d33 	.word	0x08003d33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d046      	beq.n	8003d36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cac:	e043      	b.n	8003d36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cb6:	d140      	bne.n	8003d3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cbc:	e03d      	b.n	8003d3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc6:	d121      	bne.n	8003d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d837      	bhi.n	8003d3e <DMA_CheckFifoParam+0xda>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <DMA_CheckFifoParam+0x70>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003ceb 	.word	0x08003ceb
 8003cdc:	08003ce5 	.word	0x08003ce5
 8003ce0:	08003cfd 	.word	0x08003cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	e030      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d025      	beq.n	8003d42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfa:	e022      	b.n	8003d42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d04:	d11f      	bne.n	8003d46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d0a:	e01c      	b.n	8003d46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d903      	bls.n	8003d1a <DMA_CheckFifoParam+0xb6>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d003      	beq.n	8003d20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d18:	e018      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1e:	e015      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	e00b      	b.n	8003d4a <DMA_CheckFifoParam+0xe6>
      break;
 8003d32:	bf00      	nop
 8003d34:	e00a      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d36:	bf00      	nop
 8003d38:	e008      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e006      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	; 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e159      	b.n	800402c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f040 8148 	bne.w	8004026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d005      	beq.n	8003dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d130      	bne.n	8003e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 0201 	and.w	r2, r3, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d017      	beq.n	8003e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	2203      	movs	r2, #3
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d123      	bne.n	8003ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	08da      	lsrs	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3208      	adds	r2, #8
 8003e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	220f      	movs	r2, #15
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	08da      	lsrs	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3208      	adds	r2, #8
 8003e9a:	69b9      	ldr	r1, [r7, #24]
 8003e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a2 	beq.w	8004026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b57      	ldr	r3, [pc, #348]	; (8004044 <HAL_GPIO_Init+0x2e8>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	4a56      	ldr	r2, [pc, #344]	; (8004044 <HAL_GPIO_Init+0x2e8>)
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b54      	ldr	r3, [pc, #336]	; (8004044 <HAL_GPIO_Init+0x2e8>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003efe:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_GPIO_Init+0x2ec>)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a49      	ldr	r2, [pc, #292]	; (800404c <HAL_GPIO_Init+0x2f0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d019      	beq.n	8003f5e <HAL_GPIO_Init+0x202>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a48      	ldr	r2, [pc, #288]	; (8004050 <HAL_GPIO_Init+0x2f4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_GPIO_Init+0x1fe>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a47      	ldr	r2, [pc, #284]	; (8004054 <HAL_GPIO_Init+0x2f8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00d      	beq.n	8003f56 <HAL_GPIO_Init+0x1fa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a46      	ldr	r2, [pc, #280]	; (8004058 <HAL_GPIO_Init+0x2fc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <HAL_GPIO_Init+0x1f6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a45      	ldr	r2, [pc, #276]	; (800405c <HAL_GPIO_Init+0x300>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_GPIO_Init+0x1f2>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	e008      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f4e:	2307      	movs	r3, #7
 8003f50:	e006      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e004      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_Init+0x204>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f002 0203 	and.w	r2, r2, #3
 8003f66:	0092      	lsls	r2, r2, #2
 8003f68:	4093      	lsls	r3, r2
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f70:	4935      	ldr	r1, [pc, #212]	; (8004048 <HAL_GPIO_Init+0x2ec>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f7e:	4b38      	ldr	r3, [pc, #224]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fa2:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fcc:	4a24      	ldr	r2, [pc, #144]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <HAL_GPIO_Init+0x304>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004020:	4a0f      	ldr	r2, [pc, #60]	; (8004060 <HAL_GPIO_Init+0x304>)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3301      	adds	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	f67f aea2 	bls.w	8003d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3724      	adds	r7, #36	; 0x24
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	40013800 	.word	0x40013800
 800404c:	40020000 	.word	0x40020000
 8004050:	40020400 	.word	0x40020400
 8004054:	40020800 	.word	0x40020800
 8004058:	40020c00 	.word	0x40020c00
 800405c:	40021000 	.word	0x40021000
 8004060:	40013c00 	.word	0x40013c00

08004064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e0bb      	b.n	80041f8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004080:	2201      	movs	r2, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	429a      	cmp	r2, r3
 8004098:	f040 80ab 	bne.w	80041f2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800409c:	4a5c      	ldr	r2, [pc, #368]	; (8004210 <HAL_GPIO_DeInit+0x1ac>)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	3302      	adds	r3, #2
 80040a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	220f      	movs	r2, #15
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a54      	ldr	r2, [pc, #336]	; (8004214 <HAL_GPIO_DeInit+0x1b0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_GPIO_DeInit+0x96>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a53      	ldr	r2, [pc, #332]	; (8004218 <HAL_GPIO_DeInit+0x1b4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_DeInit+0x92>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a52      	ldr	r2, [pc, #328]	; (800421c <HAL_GPIO_DeInit+0x1b8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_DeInit+0x8e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <HAL_GPIO_DeInit+0x1bc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_DeInit+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a50      	ldr	r2, [pc, #320]	; (8004224 <HAL_GPIO_DeInit+0x1c0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_DeInit+0x86>
 80040e6:	2304      	movs	r3, #4
 80040e8:	e008      	b.n	80040fc <HAL_GPIO_DeInit+0x98>
 80040ea:	2307      	movs	r3, #7
 80040ec:	e006      	b.n	80040fc <HAL_GPIO_DeInit+0x98>
 80040ee:	2303      	movs	r3, #3
 80040f0:	e004      	b.n	80040fc <HAL_GPIO_DeInit+0x98>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e002      	b.n	80040fc <HAL_GPIO_DeInit+0x98>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_GPIO_DeInit+0x98>
 80040fa:	2300      	movs	r3, #0
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	f002 0203 	and.w	r2, r2, #3
 8004102:	0092      	lsls	r2, r2, #2
 8004104:	4093      	lsls	r3, r2
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	429a      	cmp	r2, r3
 800410a:	d132      	bne.n	8004172 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43db      	mvns	r3, r3
 8004114:	4944      	ldr	r1, [pc, #272]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 8004116:	4013      	ands	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800411a:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	43db      	mvns	r3, r3
 8004122:	4941      	ldr	r1, [pc, #260]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 8004124:	4013      	ands	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004128:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43db      	mvns	r3, r3
 8004130:	493d      	ldr	r1, [pc, #244]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 8004132:	4013      	ands	r3, r2
 8004134:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004136:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43db      	mvns	r3, r3
 800413e:	493a      	ldr	r1, [pc, #232]	; (8004228 <HAL_GPIO_DeInit+0x1c4>)
 8004140:	4013      	ands	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	220f      	movs	r2, #15
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004154:	4a2e      	ldr	r2, [pc, #184]	; (8004210 <HAL_GPIO_DeInit+0x1ac>)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	3302      	adds	r3, #2
 800415c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	43da      	mvns	r2, r3
 8004164:	482a      	ldr	r0, [pc, #168]	; (8004210 <HAL_GPIO_DeInit+0x1ac>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	400a      	ands	r2, r1
 800416c:	3302      	adds	r3, #2
 800416e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2103      	movs	r1, #3
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	401a      	ands	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	08da      	lsrs	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3208      	adds	r2, #8
 8004190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	08d2      	lsrs	r2, r2, #3
 80041a8:	4019      	ands	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3208      	adds	r2, #8
 80041ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	2103      	movs	r1, #3
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	401a      	ands	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	2101      	movs	r1, #1
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2103      	movs	r1, #3
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	401a      	ands	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	f67f af40 	bls.w	8004080 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40013800 	.word	0x40013800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020400 	.word	0x40020400
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40021000 	.word	0x40021000
 8004228:	40013c00 	.word	0x40013c00

0800422c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
 8004238:	4613      	mov	r3, r2
 800423a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800423c:	787b      	ldrb	r3, [r7, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004248:	e003      	b.n	8004252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	041a      	lsls	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	619a      	str	r2, [r3, #24]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d006      	beq.n	8004284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f806 	bl	8004290 <HAL_GPIO_EXTI_Callback>
  }
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40013c00 	.word	0x40013c00

08004290 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e12b      	b.n	8004512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe fa30 	bl	8002734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	; 0x24
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800430a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800430c:	f001 fea0 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8004310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a81      	ldr	r2, [pc, #516]	; (800451c <HAL_I2C_Init+0x274>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d807      	bhi.n	800432c <HAL_I2C_Init+0x84>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a80      	ldr	r2, [pc, #512]	; (8004520 <HAL_I2C_Init+0x278>)
 8004320:	4293      	cmp	r3, r2
 8004322:	bf94      	ite	ls
 8004324:	2301      	movls	r3, #1
 8004326:	2300      	movhi	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e006      	b.n	800433a <HAL_I2C_Init+0x92>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a7d      	ldr	r2, [pc, #500]	; (8004524 <HAL_I2C_Init+0x27c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	bf94      	ite	ls
 8004334:	2301      	movls	r3, #1
 8004336:	2300      	movhi	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0e7      	b.n	8004512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a78      	ldr	r2, [pc, #480]	; (8004528 <HAL_I2C_Init+0x280>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0c9b      	lsrs	r3, r3, #18
 800434c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a6a      	ldr	r2, [pc, #424]	; (800451c <HAL_I2C_Init+0x274>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d802      	bhi.n	800437c <HAL_I2C_Init+0xd4>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3301      	adds	r3, #1
 800437a:	e009      	b.n	8004390 <HAL_I2C_Init+0xe8>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	4a69      	ldr	r2, [pc, #420]	; (800452c <HAL_I2C_Init+0x284>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	099b      	lsrs	r3, r3, #6
 800438e:	3301      	adds	r3, #1
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	430b      	orrs	r3, r1
 8004396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	495c      	ldr	r1, [pc, #368]	; (800451c <HAL_I2C_Init+0x274>)
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d819      	bhi.n	80043e4 <HAL_I2C_Init+0x13c>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e59      	subs	r1, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043c4:	400b      	ands	r3, r1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_I2C_Init+0x138>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1e59      	subs	r1, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043de:	e051      	b.n	8004484 <HAL_I2C_Init+0x1dc>
 80043e0:	2304      	movs	r3, #4
 80043e2:	e04f      	b.n	8004484 <HAL_I2C_Init+0x1dc>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d111      	bne.n	8004410 <HAL_I2C_Init+0x168>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e58      	subs	r0, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	440b      	add	r3, r1
 80043fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e012      	b.n	8004436 <HAL_I2C_Init+0x18e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1e58      	subs	r0, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	0099      	lsls	r1, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	fbb0 f3f3 	udiv	r3, r0, r3
 8004426:	3301      	adds	r3, #1
 8004428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Init+0x196>
 800443a:	2301      	movs	r3, #1
 800443c:	e022      	b.n	8004484 <HAL_I2C_Init+0x1dc>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10e      	bne.n	8004464 <HAL_I2C_Init+0x1bc>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1e58      	subs	r0, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6859      	ldr	r1, [r3, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	440b      	add	r3, r1
 8004454:	fbb0 f3f3 	udiv	r3, r0, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004462:	e00f      	b.n	8004484 <HAL_I2C_Init+0x1dc>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e58      	subs	r0, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	0099      	lsls	r1, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	fbb0 f3f3 	udiv	r3, r0, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	6809      	ldr	r1, [r1, #0]
 8004488:	4313      	orrs	r3, r2
 800448a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6911      	ldr	r1, [r2, #16]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68d2      	ldr	r2, [r2, #12]
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	000186a0 	.word	0x000186a0
 8004520:	001e847f 	.word	0x001e847f
 8004524:	003d08ff 	.word	0x003d08ff
 8004528:	431bde83 	.word	0x431bde83
 800452c:	10624dd3 	.word	0x10624dd3

08004530 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	461a      	mov	r2, r3
 800453c:	460b      	mov	r3, r1
 800453e:	817b      	strh	r3, [r7, #10]
 8004540:	4613      	mov	r3, r2
 8004542:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004544:	f7fe fe6e 	bl	8003224 <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	f040 80e0 	bne.w	8004718 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2319      	movs	r3, #25
 800455e:	2201      	movs	r2, #1
 8004560:	4970      	ldr	r1, [pc, #448]	; (8004724 <HAL_I2C_Master_Transmit+0x1f4>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 ff66 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
 8004570:	e0d3      	b.n	800471a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_I2C_Master_Transmit+0x50>
 800457c:	2302      	movs	r3, #2
 800457e:	e0cc      	b.n	800471a <HAL_I2C_Master_Transmit+0x1ea>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d007      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2221      	movs	r2, #33	; 0x21
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2210      	movs	r2, #16
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	893a      	ldrh	r2, [r7, #8]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a50      	ldr	r2, [pc, #320]	; (8004728 <HAL_I2C_Master_Transmit+0x1f8>)
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045e8:	8979      	ldrh	r1, [r7, #10]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fce8 	bl	8004fc4 <I2C_MasterRequestWrite>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e08d      	b.n	800471a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004614:	e066      	b.n	80046e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	6a39      	ldr	r1, [r7, #32]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 ffe0 	bl	80055e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b04      	cmp	r3, #4
 800462c:	d107      	bne.n	800463e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06b      	b.n	800471a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d11b      	bne.n	80046b8 <HAL_I2C_Master_Transmit+0x188>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d017      	beq.n	80046b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	6a39      	ldr	r1, [r7, #32]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 ffd0 	bl	8005662 <I2C_WaitOnBTFFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d107      	bne.n	80046e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e01a      	b.n	800471a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d194      	bne.n	8004616 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	00100002 	.word	0x00100002
 8004728:	ffff0000 	.word	0xffff0000

0800472c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	; 0x30
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	461a      	mov	r2, r3
 8004738:	460b      	mov	r3, r1
 800473a:	817b      	strh	r3, [r7, #10]
 800473c:	4613      	mov	r3, r2
 800473e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004740:	f7fe fd70 	bl	8003224 <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b20      	cmp	r3, #32
 8004750:	f040 820b 	bne.w	8004b6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2319      	movs	r3, #25
 800475a:	2201      	movs	r2, #1
 800475c:	497c      	ldr	r1, [pc, #496]	; (8004950 <HAL_I2C_Master_Receive+0x224>)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fe68 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
 800476c:	e1fe      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_I2C_Master_Receive+0x50>
 8004778:	2302      	movs	r3, #2
 800477a:	e1f7      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b01      	cmp	r3, #1
 8004790:	d007      	beq.n	80047a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2222      	movs	r2, #34	; 0x22
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2210      	movs	r2, #16
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	893a      	ldrh	r2, [r7, #8]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a5c      	ldr	r2, [pc, #368]	; (8004954 <HAL_I2C_Master_Receive+0x228>)
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047e4:	8979      	ldrh	r1, [r7, #10]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fc6c 	bl	80050c8 <I2C_MasterRequestRead>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1b8      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d113      	bne.n	800482a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e18c      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482e:	2b01      	cmp	r3, #1
 8004830:	d11b      	bne.n	800486a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e16c      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	2b02      	cmp	r3, #2
 8004870:	d11b      	bne.n	80048aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004880:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	e14c      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048d0:	e138      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	f200 80f1 	bhi.w	8004abe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d123      	bne.n	800492c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fefb 	bl	80056e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e139      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800492a:	e10b      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	2b02      	cmp	r3, #2
 8004932:	d14e      	bne.n	80049d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	2200      	movs	r2, #0
 800493c:	4906      	ldr	r1, [pc, #24]	; (8004958 <HAL_I2C_Master_Receive+0x22c>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fd78 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e10e      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
 800494e:	bf00      	nop
 8004950:	00100002 	.word	0x00100002
 8004954:	ffff0000 	.word	0xffff0000
 8004958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049d0:	e0b8      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2200      	movs	r2, #0
 80049da:	4966      	ldr	r1, [pc, #408]	; (8004b74 <HAL_I2C_Master_Receive+0x448>)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fd29 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0bf      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2200      	movs	r2, #0
 8004a36:	494f      	ldr	r1, [pc, #316]	; (8004b74 <HAL_I2C_Master_Receive+0x448>)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fcfb 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e091      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004abc:	e042      	b.n	8004b44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fe0e 	bl	80056e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e04c      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d118      	bne.n	8004b44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f47f aec2 	bne.w	80048d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
  }
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3728      	adds	r7, #40	; 0x28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	00010004 	.word	0x00010004

08004b78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08c      	sub	sp, #48	; 0x30
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b92:	f7fe fb47 	bl	8003224 <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	f040 8208 	bne.w	8004fb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2319      	movs	r3, #25
 8004bac:	2201      	movs	r2, #1
 8004bae:	497b      	ldr	r1, [pc, #492]	; (8004d9c <HAL_I2C_Mem_Read+0x224>)
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fc3f 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e1fb      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Mem_Read+0x56>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e1f4      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d007      	beq.n	8004bf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2222      	movs	r2, #34	; 0x22
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a5b      	ldr	r2, [pc, #364]	; (8004da0 <HAL_I2C_Mem_Read+0x228>)
 8004c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c36:	88f8      	ldrh	r0, [r7, #6]
 8004c38:	893a      	ldrh	r2, [r7, #8]
 8004c3a:	8979      	ldrh	r1, [r7, #10]
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	4603      	mov	r3, r0
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fb0c 	bl	8005264 <I2C_RequestMemoryRead>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e1b0      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d113      	bne.n	8004c86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	623b      	str	r3, [r7, #32]
 8004c72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e184      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d11b      	bne.n	8004cc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e164      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d11b      	bne.n	8004d06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	e144      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d1c:	e138      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	f200 80f1 	bhi.w	8004f0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d123      	bne.n	8004d78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fcd5 	bl	80056e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e139      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d76:	e10b      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d14e      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2200      	movs	r2, #0
 8004d88:	4906      	ldr	r1, [pc, #24]	; (8004da4 <HAL_I2C_Mem_Read+0x22c>)
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb52 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e10e      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
 8004d9a:	bf00      	nop
 8004d9c:	00100002 	.word	0x00100002
 8004da0:	ffff0000 	.word	0xffff0000
 8004da4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e1c:	e0b8      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2200      	movs	r2, #0
 8004e26:	4966      	ldr	r1, [pc, #408]	; (8004fc0 <HAL_I2C_Mem_Read+0x448>)
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fb03 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0bf      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	2200      	movs	r2, #0
 8004e82:	494f      	ldr	r1, [pc, #316]	; (8004fc0 <HAL_I2C_Mem_Read+0x448>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fad5 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e091      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f08:	e042      	b.n	8004f90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fbe8 	bl	80056e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e04c      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d118      	bne.n	8004f90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f47f aec2 	bne.w	8004d1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
  }
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3728      	adds	r7, #40	; 0x28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	00010004 	.word	0x00010004

08004fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d006      	beq.n	8004fee <I2C_MasterRequestWrite+0x2a>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <I2C_MasterRequestWrite+0x2a>
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fec:	d108      	bne.n	8005000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e00b      	b.n	8005018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	2b12      	cmp	r3, #18
 8005006:	d107      	bne.n	8005018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fa05 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d103      	bne.n	8005048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e035      	b.n	80050b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005054:	d108      	bne.n	8005068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005056:	897b      	ldrh	r3, [r7, #10]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005064:	611a      	str	r2, [r3, #16]
 8005066:	e01b      	b.n	80050a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	11db      	asrs	r3, r3, #7
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 0306 	and.w	r3, r3, #6
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f063 030f 	orn	r3, r3, #15
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <I2C_MasterRequestWrite+0xfc>)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fa2b 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e010      	b.n	80050b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005096:	897b      	ldrh	r3, [r7, #10]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4907      	ldr	r1, [pc, #28]	; (80050c4 <I2C_MasterRequestWrite+0x100>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa1b 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	00010008 	.word	0x00010008
 80050c4:	00010002 	.word	0x00010002

080050c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	460b      	mov	r3, r1
 80050d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d006      	beq.n	8005102 <I2C_MasterRequestRead+0x3a>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d003      	beq.n	8005102 <I2C_MasterRequestRead+0x3a>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005100:	d108      	bne.n	8005114 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e00b      	b.n	800512c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	2b11      	cmp	r3, #17
 800511a:	d107      	bne.n	800512c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800512a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f97b 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00d      	beq.n	8005160 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005152:	d103      	bne.n	800515c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e079      	b.n	8005254 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005168:	d108      	bne.n	800517c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800516a:	897b      	ldrh	r3, [r7, #10]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e05f      	b.n	800523c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800517c:	897b      	ldrh	r3, [r7, #10]
 800517e:	11db      	asrs	r3, r3, #7
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0306 	and.w	r3, r3, #6
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f063 030f 	orn	r3, r3, #15
 800518c:	b2da      	uxtb	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4930      	ldr	r1, [pc, #192]	; (800525c <I2C_MasterRequestRead+0x194>)
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f9a1 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e054      	b.n	8005254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4929      	ldr	r1, [pc, #164]	; (8005260 <I2C_MasterRequestRead+0x198>)
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f991 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e044      	b.n	8005254 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f919 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00d      	beq.n	8005224 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005216:	d103      	bne.n	8005220 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e017      	b.n	8005254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005224:	897b      	ldrh	r3, [r7, #10]
 8005226:	11db      	asrs	r3, r3, #7
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 0306 	and.w	r3, r3, #6
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f063 030e 	orn	r3, r3, #14
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4907      	ldr	r1, [pc, #28]	; (8005260 <I2C_MasterRequestRead+0x198>)
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f94d 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	00010008 	.word	0x00010008
 8005260:	00010002 	.word	0x00010002

08005264 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4603      	mov	r3, r0
 8005274:	817b      	strh	r3, [r7, #10]
 8005276:	460b      	mov	r3, r1
 8005278:	813b      	strh	r3, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800528c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f8c2 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d103      	bne.n	80052ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e0aa      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d2:	897b      	ldrh	r3, [r7, #10]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	4952      	ldr	r1, [pc, #328]	; (8005430 <I2C_RequestMemoryRead+0x1cc>)
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f8fa 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e097      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	6a39      	ldr	r1, [r7, #32]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f964 	bl	80055e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00d      	beq.n	800533a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b04      	cmp	r3, #4
 8005324:	d107      	bne.n	8005336 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e076      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d105      	bne.n	800534c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005340:	893b      	ldrh	r3, [r7, #8]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	611a      	str	r2, [r3, #16]
 800534a:	e021      	b.n	8005390 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800534c:	893b      	ldrh	r3, [r7, #8]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	b29b      	uxth	r3, r3
 8005352:	b2da      	uxtb	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f93e 	bl	80055e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b04      	cmp	r3, #4
 8005370:	d107      	bne.n	8005382 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e050      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005386:	893b      	ldrh	r3, [r7, #8]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005392:	6a39      	ldr	r1, [r7, #32]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f923 	bl	80055e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d107      	bne.n	80053b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e035      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f82b 	bl	8005434 <I2C_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d103      	bne.n	80053fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e013      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005400:	897b      	ldrh	r3, [r7, #10]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	4906      	ldr	r1, [pc, #24]	; (8005430 <I2C_RequestMemoryRead+0x1cc>)
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f863 	bl	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	00010002 	.word	0x00010002

08005434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005444:	e025      	b.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d021      	beq.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544e:	f7fd fee9 	bl	8003224 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d116      	bne.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e023      	b.n	80054da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10d      	bne.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	43da      	mvns	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	e00c      	b.n	80054d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d0b6      	beq.n	8005446 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f0:	e051      	b.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d123      	bne.n	800554a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005510:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800551a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f043 0204 	orr.w	r2, r3, #4
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e046      	b.n	80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d021      	beq.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fd fe67 	bl	8003224 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d116      	bne.n	8005596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e020      	b.n	80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10c      	bne.n	80055ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	43da      	mvns	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	bf14      	ite	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	2300      	moveq	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	e00b      	b.n	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	43da      	mvns	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4013      	ands	r3, r2
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d18d      	bne.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ec:	e02d      	b.n	800564a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f8ce 	bl	8005790 <I2C_IsAcknowledgeFailed>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e02d      	b.n	800565a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d021      	beq.n	800564a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fd fe0d 	bl	8003224 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d116      	bne.n	800564a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e007      	b.n	800565a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005654:	2b80      	cmp	r3, #128	; 0x80
 8005656:	d1ca      	bne.n	80055ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800566e:	e02d      	b.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f88d 	bl	8005790 <I2C_IsAcknowledgeFailed>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e02d      	b.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d021      	beq.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005688:	f7fd fdcc 	bl	8003224 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d116      	bne.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e007      	b.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d1ca      	bne.n	8005670 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056f0:	e042      	b.n	8005778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d119      	bne.n	8005734 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0210 	mvn.w	r2, #16
 8005708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e029      	b.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005734:	f7fd fd76 	bl	8003224 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d116      	bne.n	8005778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e007      	b.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d1b5      	bne.n	80056f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a6:	d11b      	bne.n	80057e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	f043 0204 	orr.w	r2, r3, #4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e267      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d075      	beq.n	80058fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580e:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	2b04      	cmp	r3, #4
 8005818:	d00c      	beq.n	8005834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800581a:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005822:	2b08      	cmp	r3, #8
 8005824:	d112      	bne.n	800584c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005826:	4b82      	ldr	r3, [pc, #520]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005832:	d10b      	bne.n	800584c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005834:	4b7e      	ldr	r3, [pc, #504]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d05b      	beq.n	80058f8 <HAL_RCC_OscConfig+0x108>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d157      	bne.n	80058f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e242      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005854:	d106      	bne.n	8005864 <HAL_RCC_OscConfig+0x74>
 8005856:	4b76      	ldr	r3, [pc, #472]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a75      	ldr	r2, [pc, #468]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e01d      	b.n	80058a0 <HAL_RCC_OscConfig+0xb0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800586c:	d10c      	bne.n	8005888 <HAL_RCC_OscConfig+0x98>
 800586e:	4b70      	ldr	r3, [pc, #448]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6f      	ldr	r2, [pc, #444]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	4b6d      	ldr	r3, [pc, #436]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a6c      	ldr	r2, [pc, #432]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e00b      	b.n	80058a0 <HAL_RCC_OscConfig+0xb0>
 8005888:	4b69      	ldr	r3, [pc, #420]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a68      	ldr	r2, [pc, #416]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800588e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	4b66      	ldr	r3, [pc, #408]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a65      	ldr	r2, [pc, #404]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800589a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d013      	beq.n	80058d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fd fcbc 	bl	8003224 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058b0:	f7fd fcb8 	bl	8003224 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	; 0x64
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e207      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c2:	4b5b      	ldr	r3, [pc, #364]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0xc0>
 80058ce:	e014      	b.n	80058fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d0:	f7fd fca8 	bl	8003224 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d8:	f7fd fca4 	bl	8003224 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	; 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e1f3      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ea:	4b51      	ldr	r3, [pc, #324]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0xe8>
 80058f6:	e000      	b.n	80058fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d063      	beq.n	80059ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005906:	4b4a      	ldr	r3, [pc, #296]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005912:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800591a:	2b08      	cmp	r3, #8
 800591c:	d11c      	bne.n	8005958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800591e:	4b44      	ldr	r3, [pc, #272]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d116      	bne.n	8005958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <HAL_RCC_OscConfig+0x152>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d001      	beq.n	8005942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e1c7      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005942:	4b3b      	ldr	r3, [pc, #236]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4937      	ldr	r1, [pc, #220]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005952:	4313      	orrs	r3, r2
 8005954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005956:	e03a      	b.n	80059ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d020      	beq.n	80059a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <HAL_RCC_OscConfig+0x244>)
 8005962:	2201      	movs	r2, #1
 8005964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fd fc5d 	bl	8003224 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596e:	f7fd fc59 	bl	8003224 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e1a8      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005980:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598c:	4b28      	ldr	r3, [pc, #160]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4925      	ldr	r1, [pc, #148]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 800599c:	4313      	orrs	r3, r2
 800599e:	600b      	str	r3, [r1, #0]
 80059a0:	e015      	b.n	80059ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <HAL_RCC_OscConfig+0x244>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fd fc3c 	bl	8003224 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b0:	f7fd fc38 	bl	8003224 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e187      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c2:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d036      	beq.n	8005a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <HAL_RCC_OscConfig+0x248>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fd fc1c 	bl	8003224 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f0:	f7fd fc18 	bl	8003224 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e167      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_RCC_OscConfig+0x240>)
 8005a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0x200>
 8005a0e:	e01b      	b.n	8005a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a10:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCC_OscConfig+0x248>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a16:	f7fd fc05 	bl	8003224 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a1c:	e00e      	b.n	8005a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1e:	f7fd fc01 	bl	8003224 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d907      	bls.n	8005a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e150      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
 8005a30:	40023800 	.word	0x40023800
 8005a34:	42470000 	.word	0x42470000
 8005a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a3c:	4b88      	ldr	r3, [pc, #544]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1ea      	bne.n	8005a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8097 	beq.w	8005b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5a:	4b81      	ldr	r3, [pc, #516]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10f      	bne.n	8005a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a66:	2300      	movs	r3, #0
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	4b7d      	ldr	r3, [pc, #500]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	4a7c      	ldr	r2, [pc, #496]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6413      	str	r3, [r2, #64]	; 0x40
 8005a76:	4b7a      	ldr	r3, [pc, #488]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a82:	2301      	movs	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a86:	4b77      	ldr	r3, [pc, #476]	; (8005c64 <HAL_RCC_OscConfig+0x474>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d118      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a92:	4b74      	ldr	r3, [pc, #464]	; (8005c64 <HAL_RCC_OscConfig+0x474>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a73      	ldr	r2, [pc, #460]	; (8005c64 <HAL_RCC_OscConfig+0x474>)
 8005a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9e:	f7fd fbc1 	bl	8003224 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa6:	f7fd fbbd 	bl	8003224 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e10c      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab8:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCC_OscConfig+0x474>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <HAL_RCC_OscConfig+0x2ea>
 8005acc:	4b64      	ldr	r3, [pc, #400]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a63      	ldr	r2, [pc, #396]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad8:	e01c      	b.n	8005b14 <HAL_RCC_OscConfig+0x324>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCC_OscConfig+0x30c>
 8005ae2:	4b5f      	ldr	r3, [pc, #380]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a5e      	ldr	r2, [pc, #376]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
 8005aee:	4b5c      	ldr	r3, [pc, #368]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af2:	4a5b      	ldr	r2, [pc, #364]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005af4:	f043 0301 	orr.w	r3, r3, #1
 8005af8:	6713      	str	r3, [r2, #112]	; 0x70
 8005afa:	e00b      	b.n	8005b14 <HAL_RCC_OscConfig+0x324>
 8005afc:	4b58      	ldr	r3, [pc, #352]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	4a57      	ldr	r2, [pc, #348]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	6713      	str	r3, [r2, #112]	; 0x70
 8005b08:	4b55      	ldr	r3, [pc, #340]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	4a54      	ldr	r2, [pc, #336]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	f023 0304 	bic.w	r3, r3, #4
 8005b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d015      	beq.n	8005b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1c:	f7fd fb82 	bl	8003224 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b22:	e00a      	b.n	8005b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b24:	f7fd fb7e 	bl	8003224 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e0cb      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3a:	4b49      	ldr	r3, [pc, #292]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0ee      	beq.n	8005b24 <HAL_RCC_OscConfig+0x334>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b48:	f7fd fb6c 	bl	8003224 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b50:	f7fd fb68 	bl	8003224 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e0b5      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ee      	bne.n	8005b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b78:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	4a38      	ldr	r2, [pc, #224]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80a1 	beq.w	8005cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b8e:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 030c 	and.w	r3, r3, #12
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d05c      	beq.n	8005c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d141      	bne.n	8005c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba2:	4b31      	ldr	r3, [pc, #196]	; (8005c68 <HAL_RCC_OscConfig+0x478>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fd fb3c 	bl	8003224 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fd fb38 	bl	8003224 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e087      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	019b      	lsls	r3, r3, #6
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	3b01      	subs	r3, #1
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	061b      	lsls	r3, r3, #24
 8005bf2:	491b      	ldr	r1, [pc, #108]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf8:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <HAL_RCC_OscConfig+0x478>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfe:	f7fd fb11 	bl	8003224 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c06:	f7fd fb0d 	bl	8003224 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e05c      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c18:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x416>
 8005c24:	e054      	b.n	8005cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c26:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <HAL_RCC_OscConfig+0x478>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fd fafa 	bl	8003224 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fd faf6 	bl	8003224 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e045      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_RCC_OscConfig+0x470>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x444>
 8005c52:	e03d      	b.n	8005cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d107      	bne.n	8005c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e038      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40007000 	.word	0x40007000
 8005c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <HAL_RCC_OscConfig+0x4ec>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d028      	beq.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d121      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d11a      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d111      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800

08005ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0cc      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf4:	4b68      	ldr	r3, [pc, #416]	; (8005e98 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d90c      	bls.n	8005d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d02:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <HAL_RCC_ClockConfig+0x1b8>)
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0a:	4b63      	ldr	r3, [pc, #396]	; (8005e98 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0b8      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d34:	4b59      	ldr	r3, [pc, #356]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a58      	ldr	r2, [pc, #352]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d4c:	4b53      	ldr	r3, [pc, #332]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4a52      	ldr	r2, [pc, #328]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d58:	4b50      	ldr	r3, [pc, #320]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	494d      	ldr	r1, [pc, #308]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d044      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7e:	4b47      	ldr	r3, [pc, #284]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d119      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e07f      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d003      	beq.n	8005d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d107      	bne.n	8005dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9e:	4b3f      	ldr	r3, [pc, #252]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e06f      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dae:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e067      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dbe:	4b37      	ldr	r3, [pc, #220]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 0203 	bic.w	r2, r3, #3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	4934      	ldr	r1, [pc, #208]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dd0:	f7fd fa28 	bl	8003224 <HAL_GetTick>
 8005dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd6:	e00a      	b.n	8005dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd8:	f7fd fa24 	bl	8003224 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e04f      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dee:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 020c 	and.w	r2, r3, #12
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d1eb      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e00:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <HAL_RCC_ClockConfig+0x1b8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d20c      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0e:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <HAL_RCC_ClockConfig+0x1b8>)
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <HAL_RCC_ClockConfig+0x1b8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e032      	b.n	8005e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e34:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4916      	ldr	r1, [pc, #88]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e52:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	490e      	ldr	r1, [pc, #56]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e66:	f000 f821 	bl	8005eac <HAL_RCC_GetSysClockFreq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	490a      	ldr	r1, [pc, #40]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e78:	5ccb      	ldrb	r3, [r1, r3]
 8005e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e82:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd f988 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40023c00 	.word	0x40023c00
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	0800b5f0 	.word	0x0800b5f0
 8005ea4:	20000008 	.word	0x20000008
 8005ea8:	2000000c 	.word	0x2000000c

08005eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb0:	b090      	sub	sp, #64	; 0x40
 8005eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	2300      	movs	r3, #0
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec4:	4b59      	ldr	r3, [pc, #356]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 030c 	and.w	r3, r3, #12
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d00d      	beq.n	8005eec <HAL_RCC_GetSysClockFreq+0x40>
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	f200 80a1 	bhi.w	8006018 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d003      	beq.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ede:	e09b      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ee0:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ee2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ee4:	e09b      	b.n	800601e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee6:	4b53      	ldr	r3, [pc, #332]	; (8006034 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005eea:	e098      	b.n	800601e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eec:	4b4f      	ldr	r3, [pc, #316]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef6:	4b4d      	ldr	r3, [pc, #308]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d028      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f02:	4b4a      	ldr	r3, [pc, #296]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	2200      	movs	r2, #0
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f14:	2100      	movs	r1, #0
 8005f16:	4b47      	ldr	r3, [pc, #284]	; (8006034 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f18:	fb03 f201 	mul.w	r2, r3, r1
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	fb00 f303 	mul.w	r3, r0, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	4a43      	ldr	r2, [pc, #268]	; (8006034 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f26:	fba0 1202 	umull	r1, r2, r0, r2
 8005f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f32:	4413      	add	r3, r2
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	2200      	movs	r2, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	61fa      	str	r2, [r7, #28]
 8005f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f46:	f7fa fea7 	bl	8000c98 <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4613      	mov	r3, r2
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f52:	e053      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f54:	4b35      	ldr	r3, [pc, #212]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	099b      	lsrs	r3, r3, #6
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	617a      	str	r2, [r7, #20]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f66:	f04f 0b00 	mov.w	fp, #0
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	465b      	mov	r3, fp
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f7c:	0150      	lsls	r0, r2, #5
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	ebb2 080a 	subs.w	r8, r2, sl
 8005f86:	eb63 090b 	sbc.w	r9, r3, fp
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f9e:	ebb2 0408 	subs.w	r4, r2, r8
 8005fa2:	eb63 0509 	sbc.w	r5, r3, r9
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	00eb      	lsls	r3, r5, #3
 8005fb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fb4:	00e2      	lsls	r2, r4, #3
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	461d      	mov	r5, r3
 8005fba:	eb14 030a 	adds.w	r3, r4, sl
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	eb45 030b 	adc.w	r3, r5, fp
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	028b      	lsls	r3, r1, #10
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fdc:	4621      	mov	r1, r4
 8005fde:	028a      	lsls	r2, r1, #10
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	60fa      	str	r2, [r7, #12]
 8005fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff0:	f7fa fe52 	bl	8000c98 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	3301      	adds	r3, #1
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800600c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006016:	e002      	b.n	800601e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCC_GetSysClockFreq+0x184>)
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800601c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006020:	4618      	mov	r0, r3
 8006022:	3740      	adds	r7, #64	; 0x40
 8006024:	46bd      	mov	sp, r7
 8006026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602a:	bf00      	nop
 800602c:	40023800 	.word	0x40023800
 8006030:	00f42400 	.word	0x00f42400
 8006034:	017d7840 	.word	0x017d7840

08006038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_RCC_GetHCLKFreq+0x14>)
 800603e:	681b      	ldr	r3, [r3, #0]
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000008 	.word	0x20000008

08006050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006054:	f7ff fff0 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006058:	4602      	mov	r2, r0
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	0a9b      	lsrs	r3, r3, #10
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	4903      	ldr	r1, [pc, #12]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006066:	5ccb      	ldrb	r3, [r1, r3]
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40023800 	.word	0x40023800
 8006074:	0800b600 	.word	0x0800b600

08006078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800607c:	f7ff ffdc 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	0b5b      	lsrs	r3, r3, #13
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4903      	ldr	r1, [pc, #12]	; (800609c <HAL_RCC_GetPCLK2Freq+0x24>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40023800 	.word	0x40023800
 800609c:	0800b600 	.word	0x0800b600

080060a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e041      	b.n	8006136 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fc fb84 	bl	80027d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 fdde 	bl	8006ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e022      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e015      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e008      	b.n	80061aa <HAL_TIM_PWM_Start+0x6a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e068      	b.n	8006284 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start+0x82>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c0:	e013      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start+0x92>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e0:	e003      	b.n	80061ea <HAL_TIM_PWM_Start+0xaa>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 f87e 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a23      	ldr	r2, [pc, #140]	; (800628c <HAL_TIM_PWM_Start+0x14c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d107      	bne.n	8006212 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_TIM_PWM_Start+0x14c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d013      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_TIM_PWM_Start+0x150>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_TIM_PWM_Start+0x154>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	; (8006298 <HAL_TIM_PWM_Start+0x158>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_TIM_PWM_Start+0x10e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a14      	ldr	r2, [pc, #80]	; (800629c <HAL_TIM_PWM_Start+0x15c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d111      	bne.n	8006272 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b06      	cmp	r3, #6
 800625e:	d010      	beq.n	8006282 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006270:	e007      	b.n	8006282 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0201 	orr.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40010000 	.word	0x40010000
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40014000 	.word	0x40014000

080062a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f81e 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_TIM_PWM_Stop+0xc4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d117      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10f      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x52>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	f240 4344 	movw	r3, #1092	; 0x444
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <HAL_TIM_PWM_Stop+0x52>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10f      	bne.n	8006322 <HAL_TIM_PWM_Stop+0x82>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	f240 4344 	movw	r3, #1092	; 0x444
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d107      	bne.n	8006322 <HAL_TIM_PWM_Stop+0x82>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Stop+0x92>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006330:	e013      	b.n	800635a <HAL_TIM_PWM_Stop+0xba>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Stop+0xa2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006340:	e00b      	b.n	800635a <HAL_TIM_PWM_Stop+0xba>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Stop+0xb2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006350:	e003      	b.n	800635a <HAL_TIM_PWM_Stop+0xba>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40010000 	.word	0x40010000

08006368 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e041      	b.n	80063fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fc fa42 	bl	8002818 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 fc7a 	bl	8006ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2200      	movs	r2, #0
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 ff6b 	bl	80072f4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	f241 1311 	movw	r3, #4369	; 0x1111
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <HAL_TIM_IC_Stop+0x48>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	f240 4344 	movw	r3, #1092	; 0x444
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <HAL_TIM_IC_Stop+0x48>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <HAL_TIM_IC_Stop+0x58>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800645c:	e013      	b.n	8006486 <HAL_TIM_IC_Stop+0x80>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d104      	bne.n	800646e <HAL_TIM_IC_Stop+0x68>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800646c:	e00b      	b.n	8006486 <HAL_TIM_IC_Stop+0x80>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b08      	cmp	r3, #8
 8006472:	d104      	bne.n	800647e <HAL_TIM_IC_Stop+0x78>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800647c:	e003      	b.n	8006486 <HAL_TIM_IC_Stop+0x80>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_TIM_IC_Stop+0x90>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006494:	e013      	b.n	80064be <HAL_TIM_IC_Stop+0xb8>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_IC_Stop+0xa0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064a4:	e00b      	b.n	80064be <HAL_TIM_IC_Stop+0xb8>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_IC_Stop+0xb0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b4:	e003      	b.n	80064be <HAL_TIM_IC_Stop+0xb8>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_IC_Start_IT+0x1e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	e013      	b.n	800650e <HAL_TIM_IC_Start_IT+0x46>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d104      	bne.n	80064f6 <HAL_TIM_IC_Start_IT+0x2e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	e00b      	b.n	800650e <HAL_TIM_IC_Start_IT+0x46>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_IC_Start_IT+0x3e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006502:	b2db      	uxtb	r3, r3
 8006504:	e003      	b.n	800650e <HAL_TIM_IC_Start_IT+0x46>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <HAL_TIM_IC_Start_IT+0x58>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e013      	b.n	8006548 <HAL_TIM_IC_Start_IT+0x80>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d104      	bne.n	8006530 <HAL_TIM_IC_Start_IT+0x68>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800652c:	b2db      	uxtb	r3, r3
 800652e:	e00b      	b.n	8006548 <HAL_TIM_IC_Start_IT+0x80>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b08      	cmp	r3, #8
 8006534:	d104      	bne.n	8006540 <HAL_TIM_IC_Start_IT+0x78>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e003      	b.n	8006548 <HAL_TIM_IC_Start_IT+0x80>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006546:	b2db      	uxtb	r3, r3
 8006548:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d102      	bne.n	8006556 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006550:	7b7b      	ldrb	r3, [r7, #13]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d001      	beq.n	800655a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e0c2      	b.n	80066e0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <HAL_TIM_IC_Start_IT+0xa2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006568:	e013      	b.n	8006592 <HAL_TIM_IC_Start_IT+0xca>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b04      	cmp	r3, #4
 800656e:	d104      	bne.n	800657a <HAL_TIM_IC_Start_IT+0xb2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006578:	e00b      	b.n	8006592 <HAL_TIM_IC_Start_IT+0xca>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d104      	bne.n	800658a <HAL_TIM_IC_Start_IT+0xc2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006588:	e003      	b.n	8006592 <HAL_TIM_IC_Start_IT+0xca>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_IC_Start_IT+0xda>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065a0:	e013      	b.n	80065ca <HAL_TIM_IC_Start_IT+0x102>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_IC_Start_IT+0xea>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065b0:	e00b      	b.n	80065ca <HAL_TIM_IC_Start_IT+0x102>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_IC_Start_IT+0xfa>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c0:	e003      	b.n	80065ca <HAL_TIM_IC_Start_IT+0x102>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b0c      	cmp	r3, #12
 80065ce:	d841      	bhi.n	8006654 <HAL_TIM_IC_Start_IT+0x18c>
 80065d0:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <HAL_TIM_IC_Start_IT+0x110>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	08006655 	.word	0x08006655
 80065e0:	08006655 	.word	0x08006655
 80065e4:	08006655 	.word	0x08006655
 80065e8:	0800661f 	.word	0x0800661f
 80065ec:	08006655 	.word	0x08006655
 80065f0:	08006655 	.word	0x08006655
 80065f4:	08006655 	.word	0x08006655
 80065f8:	08006631 	.word	0x08006631
 80065fc:	08006655 	.word	0x08006655
 8006600:	08006655 	.word	0x08006655
 8006604:	08006655 	.word	0x08006655
 8006608:	08006643 	.word	0x08006643
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0202 	orr.w	r2, r2, #2
 800661a:	60da      	str	r2, [r3, #12]
      break;
 800661c:	e01d      	b.n	800665a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0204 	orr.w	r2, r2, #4
 800662c:	60da      	str	r2, [r3, #12]
      break;
 800662e:	e014      	b.n	800665a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0208 	orr.w	r2, r2, #8
 800663e:	60da      	str	r2, [r3, #12]
      break;
 8006640:	e00b      	b.n	800665a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0210 	orr.w	r2, r2, #16
 8006650:	60da      	str	r2, [r3, #12]
      break;
 8006652:	e002      	b.n	800665a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
      break;
 8006658:	bf00      	nop
  }

  if (status == HAL_OK)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d13e      	bne.n	80066de <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2201      	movs	r2, #1
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fe43 	bl	80072f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIM_IC_Start_IT+0x220>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_TIM_IC_Start_IT+0x1e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d013      	beq.n	80066aa <HAL_TIM_IC_Start_IT+0x1e2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a19      	ldr	r2, [pc, #100]	; (80066ec <HAL_TIM_IC_Start_IT+0x224>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_TIM_IC_Start_IT+0x1e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <HAL_TIM_IC_Start_IT+0x228>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_TIM_IC_Start_IT+0x1e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <HAL_TIM_IC_Start_IT+0x22c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_TIM_IC_Start_IT+0x1e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <HAL_TIM_IC_Start_IT+0x230>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d111      	bne.n	80066ce <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	d010      	beq.n	80066de <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066cc:	e007      	b.n	80066de <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40014000 	.word	0x40014000

080066fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d122      	bne.n	8006758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d11b      	bne.n	8006758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0202 	mvn.w	r2, #2
 8006728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fb f93c 	bl	80019bc <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa8c 	bl	8006c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa93 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b04      	cmp	r3, #4
 8006764:	d122      	bne.n	80067ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b04      	cmp	r3, #4
 8006772:	d11b      	bne.n	80067ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0204 	mvn.w	r2, #4
 800677c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fb f912 	bl	80019bc <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa62 	bl	8006c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa69 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d122      	bne.n	8006800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d11b      	bne.n	8006800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0208 	mvn.w	r2, #8
 80067d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2204      	movs	r2, #4
 80067d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fb f8e8 	bl	80019bc <HAL_TIM_IC_CaptureCallback>
 80067ec:	e005      	b.n	80067fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa38 	bl	8006c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa3f 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b10      	cmp	r3, #16
 800680c:	d122      	bne.n	8006854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b10      	cmp	r3, #16
 800681a:	d11b      	bne.n	8006854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0210 	mvn.w	r2, #16
 8006824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2208      	movs	r2, #8
 800682a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f8be 	bl	80019bc <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa0e 	bl	8006c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa15 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10e      	bne.n	8006880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b01      	cmp	r3, #1
 800686e:	d107      	bne.n	8006880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0201 	mvn.w	r2, #1
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f9e8 	bl	8006c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688a:	2b80      	cmp	r3, #128	; 0x80
 800688c:	d10e      	bne.n	80068ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d107      	bne.n	80068ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fdc2 	bl	8007430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	d10e      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d107      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9da 	bl	8006c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d10e      	bne.n	8006904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d107      	bne.n	8006904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0220 	mvn.w	r2, #32
 80068fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fd8c 	bl	800741c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006926:	2302      	movs	r3, #2
 8006928:	e088      	b.n	8006a3c <HAL_TIM_IC_ConfigChannel+0x130>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11b      	bne.n	8006970 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f000 fbb6 	bl	80070b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 020c 	bic.w	r2, r2, #12
 800695a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6999      	ldr	r1, [r3, #24]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	619a      	str	r2, [r3, #24]
 800696e:	e060      	b.n	8006a32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d11c      	bne.n	80069b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f000 fbff 	bl	8007188 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006998:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6999      	ldr	r1, [r3, #24]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	021a      	lsls	r2, r3, #8
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	619a      	str	r2, [r3, #24]
 80069ae:	e040      	b.n	8006a32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d11b      	bne.n	80069ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f000 fc1c 	bl	8007202 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 020c 	bic.w	r2, r2, #12
 80069d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69d9      	ldr	r1, [r3, #28]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	61da      	str	r2, [r3, #28]
 80069ec:	e021      	b.n	8006a32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d11c      	bne.n	8006a2e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6819      	ldr	r1, [r3, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f000 fc39 	bl	800727a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69da      	ldr	r2, [r3, #28]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69d9      	ldr	r1, [r3, #28]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	61da      	str	r2, [r3, #28]
 8006a2c:	e001      	b.n	8006a32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0ae      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b0c      	cmp	r3, #12
 8006a6e:	f200 809f 	bhi.w	8006bb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006aad 	.word	0x08006aad
 8006a7c:	08006bb1 	.word	0x08006bb1
 8006a80:	08006bb1 	.word	0x08006bb1
 8006a84:	08006bb1 	.word	0x08006bb1
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006bb1 	.word	0x08006bb1
 8006a90:	08006bb1 	.word	0x08006bb1
 8006a94:	08006bb1 	.word	0x08006bb1
 8006a98:	08006b2f 	.word	0x08006b2f
 8006a9c:	08006bb1 	.word	0x08006bb1
 8006aa0:	08006bb1 	.word	0x08006bb1
 8006aa4:	08006bb1 	.word	0x08006bb1
 8006aa8:	08006b6f 	.word	0x08006b6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f974 	bl	8006da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0208 	orr.w	r2, r2, #8
 8006ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0204 	bic.w	r2, r2, #4
 8006ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6999      	ldr	r1, [r3, #24]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	619a      	str	r2, [r3, #24]
      break;
 8006aea:	e064      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f9ba 	bl	8006e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6999      	ldr	r1, [r3, #24]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	021a      	lsls	r2, r3, #8
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	619a      	str	r2, [r3, #24]
      break;
 8006b2c:	e043      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fa05 	bl	8006f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69da      	ldr	r2, [r3, #28]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0208 	orr.w	r2, r2, #8
 8006b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0204 	bic.w	r2, r2, #4
 8006b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69d9      	ldr	r1, [r3, #28]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	61da      	str	r2, [r3, #28]
      break;
 8006b6c:	e023      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fa4f 	bl	8007018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69d9      	ldr	r1, [r3, #28]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	021a      	lsls	r2, r3, #8
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	61da      	str	r2, [r3, #28]
      break;
 8006bae:	e002      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	d831      	bhi.n	8006c40 <HAL_TIM_ReadCapturedValue+0x78>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c19 	.word	0x08006c19
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006c41 	.word	0x08006c41
 8006bf4:	08006c23 	.word	0x08006c23
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c41 	.word	0x08006c41
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c41 	.word	0x08006c41
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006c37 	.word	0x08006c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1e:	60fb      	str	r3, [r7, #12]

      break;
 8006c20:	e00f      	b.n	8006c42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	60fb      	str	r3, [r7, #12]

      break;
 8006c2a:	e00a      	b.n	8006c42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	60fb      	str	r3, [r7, #12]

      break;
 8006c34:	e005      	b.n	8006c42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	60fb      	str	r3, [r7, #12]

      break;
 8006c3e:	e000      	b.n	8006c42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c40:	bf00      	nop
  }

  return tmpreg;
 8006c42:	68fb      	ldr	r3, [r7, #12]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a34      	ldr	r2, [pc, #208]	; (8006d84 <TIM_Base_SetConfig+0xe4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a31      	ldr	r2, [pc, #196]	; (8006d88 <TIM_Base_SetConfig+0xe8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a30      	ldr	r2, [pc, #192]	; (8006d8c <TIM_Base_SetConfig+0xec>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0x38>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <TIM_Base_SetConfig+0xf0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d108      	bne.n	8006cea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a25      	ldr	r2, [pc, #148]	; (8006d84 <TIM_Base_SetConfig+0xe4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a22      	ldr	r2, [pc, #136]	; (8006d88 <TIM_Base_SetConfig+0xe8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <TIM_Base_SetConfig+0xec>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <TIM_Base_SetConfig+0xf0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <TIM_Base_SetConfig+0xf4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <TIM_Base_SetConfig+0xf8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0x8a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <TIM_Base_SetConfig+0xfc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <TIM_Base_SetConfig+0xe4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800

08006da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f023 0201 	bic.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f023 0302 	bic.w	r3, r3, #2
 8006de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a1c      	ldr	r2, [pc, #112]	; (8006e68 <TIM_OC1_SetConfig+0xc8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d10c      	bne.n	8006e16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f023 0308 	bic.w	r3, r3, #8
 8006e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 0304 	bic.w	r3, r3, #4
 8006e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <TIM_OC1_SetConfig+0xc8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d111      	bne.n	8006e42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	621a      	str	r2, [r3, #32]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40010000 	.word	0x40010000

08006e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	f023 0210 	bic.w	r2, r3, #16
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0320 	bic.w	r3, r3, #32
 8006eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <TIM_OC2_SetConfig+0xd4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d10d      	bne.n	8006ee8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <TIM_OC2_SetConfig+0xd4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d113      	bne.n	8006f18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	621a      	str	r2, [r3, #32]
}
 8006f32:	bf00      	nop
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000

08006f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <TIM_OC3_SetConfig+0xd0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10d      	bne.n	8006fbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a14      	ldr	r2, [pc, #80]	; (8007014 <TIM_OC3_SetConfig+0xd0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d113      	bne.n	8006fee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	621a      	str	r2, [r3, #32]
}
 8007008:	bf00      	nop
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40010000 	.word	0x40010000

08007018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	021b      	lsls	r3, r3, #8
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	031b      	lsls	r3, r3, #12
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <TIM_OC4_SetConfig+0x9c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d109      	bne.n	800708c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800707e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	019b      	lsls	r3, r3, #6
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	621a      	str	r2, [r3, #32]
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40010000 	.word	0x40010000

080070b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f023 0201 	bic.w	r2, r3, #1
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a24      	ldr	r2, [pc, #144]	; (8007174 <TIM_TI1_SetConfig+0xbc>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <TIM_TI1_SetConfig+0x56>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ec:	d00f      	beq.n	800710e <TIM_TI1_SetConfig+0x56>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4a21      	ldr	r2, [pc, #132]	; (8007178 <TIM_TI1_SetConfig+0xc0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_TI1_SetConfig+0x56>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a20      	ldr	r2, [pc, #128]	; (800717c <TIM_TI1_SetConfig+0xc4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_TI1_SetConfig+0x56>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <TIM_TI1_SetConfig+0xc8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_TI1_SetConfig+0x56>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <TIM_TI1_SetConfig+0xcc>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <TIM_TI1_SetConfig+0x5a>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <TIM_TI1_SetConfig+0x5c>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e003      	b.n	8007132 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	b2db      	uxtb	r3, r3
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f023 030a 	bic.w	r3, r3, #10
 800714c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f003 030a 	and.w	r3, r3, #10
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40010000 	.word	0x40010000
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40014000 	.word	0x40014000

08007188 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0210 	bic.w	r2, r3, #16
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	031b      	lsls	r3, r3, #12
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007202:	b480      	push	{r7}
 8007204:	b087      	sub	sp, #28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800723e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	b2db      	uxtb	r3, r3
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800727a:	b480      	push	{r7}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	031b      	lsls	r3, r3, #12
 80072be:	b29b      	uxth	r3, r3
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80072cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	031b      	lsls	r3, r3, #12
 80072d2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	621a      	str	r2, [r3, #32]
}
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	43db      	mvns	r3, r3
 8007316:	401a      	ands	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	fa01 f303 	lsl.w	r3, r1, r3
 800732c:	431a      	orrs	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e050      	b.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d013      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a15      	ldr	r2, [pc, #84]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a13      	ldr	r2, [pc, #76]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d10c      	bne.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000
 800740c:	40000400 	.word	0x40000400
 8007410:	40000800 	.word	0x40000800
 8007414:	40000c00 	.word	0x40000c00
 8007418:	40014000 	.word	0x40014000

0800741c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e03f      	b.n	80074d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fb fac6 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2224      	movs	r2, #36	; 0x24
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fe1d 	bl	80080c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800749c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b08a      	sub	sp, #40	; 0x28
 80074e2:	af02      	add	r7, sp, #8
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	603b      	str	r3, [r7, #0]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d17c      	bne.n	80075f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <HAL_UART_Transmit+0x2c>
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e075      	b.n	80075fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_UART_Transmit+0x3e>
 8007518:	2302      	movs	r3, #2
 800751a:	e06e      	b.n	80075fa <HAL_UART_Transmit+0x11c>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2221      	movs	r2, #33	; 0x21
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007532:	f7fb fe77 	bl	8003224 <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	88fa      	ldrh	r2, [r7, #6]
 8007542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754c:	d108      	bne.n	8007560 <HAL_UART_Transmit+0x82>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	e003      	b.n	8007568 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007570:	e02a      	b.n	80075c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2200      	movs	r2, #0
 800757a:	2180      	movs	r1, #128	; 0x80
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fb9b 	bl	8007cb8 <UART_WaitOnFlagUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e036      	b.n	80075fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	3302      	adds	r3, #2
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	e007      	b.n	80075ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1cf      	bne.n	8007572 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2200      	movs	r2, #0
 80075da:	2140      	movs	r1, #64	; 0x40
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fb6b 	bl	8007cb8 <UART_WaitOnFlagUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e006      	b.n	80075fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e000      	b.n	80075fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075f8:	2302      	movs	r3, #2
  }
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3720      	adds	r7, #32
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b08a      	sub	sp, #40	; 0x28
 8007606:	af02      	add	r7, sp, #8
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b20      	cmp	r3, #32
 8007620:	f040 808c 	bne.w	800773c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_UART_Receive+0x2e>
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e084      	b.n	800773e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_UART_Receive+0x40>
 800763e:	2302      	movs	r3, #2
 8007640:	e07d      	b.n	800773e <HAL_UART_Receive+0x13c>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2222      	movs	r2, #34	; 0x22
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800765e:	f7fb fde1 	bl	8003224 <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	88fa      	ldrh	r2, [r7, #6]
 8007668:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	88fa      	ldrh	r2, [r7, #6]
 800766e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007678:	d108      	bne.n	800768c <HAL_UART_Receive+0x8a>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	e003      	b.n	8007694 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800769c:	e043      	b.n	8007726 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2200      	movs	r2, #0
 80076a6:	2120      	movs	r1, #32
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fb05 	bl	8007cb8 <UART_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e042      	b.n	800773e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10c      	bne.n	80076d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	3302      	adds	r3, #2
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e01f      	b.n	8007718 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e0:	d007      	beq.n	80076f2 <HAL_UART_Receive+0xf0>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <HAL_UART_Receive+0xfe>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	e008      	b.n	8007712 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770c:	b2da      	uxtb	r2, r3
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3301      	adds	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1b6      	bne.n	800769e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0ba      	sub	sp, #232	; 0xe8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800776e:	2300      	movs	r3, #0
 8007770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007774:	2300      	movs	r3, #0
 8007776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10f      	bne.n	80077ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_UART_IRQHandler+0x66>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fbd3 	bl	8007f52 <UART_Receive_IT>
      return;
 80077ac:	e256      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80de 	beq.w	8007974 <HAL_UART_IRQHandler+0x22c>
 80077b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d106      	bne.n	80077d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80d1 	beq.w	8007974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_UART_IRQHandler+0xae>
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f043 0201 	orr.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <HAL_UART_IRQHandler+0xd2>
 8007802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0202 	orr.w	r2, r3, #2
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_UART_IRQHandler+0xf6>
 8007826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f043 0204 	orr.w	r2, r3, #4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d011      	beq.n	800786e <HAL_UART_IRQHandler+0x126>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d105      	bne.n	8007862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	f043 0208 	orr.w	r2, r3, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 81ed 	beq.w	8007c52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_UART_IRQHandler+0x14e>
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb5e 	bl	8007f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <HAL_UART_IRQHandler+0x17a>
 80078ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d04f      	beq.n	8007962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa66 	bl	8007d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d141      	bne.n	800795a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3314      	adds	r3, #20
 80078fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800790e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800791a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1d9      	bne.n	80078d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d013      	beq.n	8007952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	4a7d      	ldr	r2, [pc, #500]	; (8007b24 <HAL_UART_IRQHandler+0x3dc>)
 8007930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	4618      	mov	r0, r3
 8007938:	f7fc f93c 	bl	8003bb4 <HAL_DMA_Abort_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d016      	beq.n	8007970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00e      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f99a 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e00a      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f996 	bl	8007c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e006      	b.n	8007970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f992 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800796e:	e170      	b.n	8007c52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	bf00      	nop
    return;
 8007972:	e16e      	b.n	8007c52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	2b01      	cmp	r3, #1
 800797a:	f040 814a 	bne.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8143 	beq.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 813c 	beq.w	8007c12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	f040 80b4 	bne.w	8007b28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8140 	beq.w	8007c56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079de:	429a      	cmp	r2, r3
 80079e0:	f080 8139 	bcs.w	8007c56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	f000 8088 	beq.w	8007b0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	330c      	adds	r3, #12
 8007a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1d9      	bne.n	80079fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3314      	adds	r3, #20
 8007a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e1      	bne.n	8007a46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3314      	adds	r3, #20
 8007a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3314      	adds	r3, #20
 8007aa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e3      	bne.n	8007a82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ada:	f023 0310 	bic.w	r3, r3, #16
 8007ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e3      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fb ffe5 	bl	8003ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8c0 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b20:	e099      	b.n	8007c56 <HAL_UART_IRQHandler+0x50e>
 8007b22:	bf00      	nop
 8007b24:	08007e5b 	.word	0x08007e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 808b 	beq.w	8007c5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8086 	beq.w	8007c5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b72:	647a      	str	r2, [r7, #68]	; 0x44
 8007b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e3      	bne.n	8007b4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	623b      	str	r3, [r7, #32]
   return(result);
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007baa:	633a      	str	r2, [r7, #48]	; 0x30
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bf0:	61fa      	str	r2, [r7, #28]
 8007bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	69b9      	ldr	r1, [r7, #24]
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e3      	bne.n	8007bcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f848 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c10:	e023      	b.n	8007c5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <HAL_UART_IRQHandler+0x4ea>
 8007c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f929 	bl	8007e82 <UART_Transmit_IT>
    return;
 8007c30:	e014      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <HAL_UART_IRQHandler+0x514>
 8007c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f969 	bl	8007f22 <UART_EndTransmit_IT>
    return;
 8007c50:	e004      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
    return;
 8007c52:	bf00      	nop
 8007c54:	e002      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
      return;
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <HAL_UART_IRQHandler+0x514>
      return;
 8007c5a:	bf00      	nop
  }
}
 8007c5c:	37e8      	adds	r7, #232	; 0xe8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b090      	sub	sp, #64	; 0x40
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc8:	e050      	b.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd0:	d04c      	beq.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cd8:	f7fb faa4 	bl	8003224 <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d241      	bcs.n	8007d6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	330c      	adds	r3, #12
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	330c      	adds	r3, #12
 8007d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d08:	637a      	str	r2, [r7, #52]	; 0x34
 8007d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3314      	adds	r3, #20
 8007d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3c:	623a      	str	r2, [r7, #32]
 8007d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	69f9      	ldr	r1, [r7, #28]
 8007d42:	6a3a      	ldr	r2, [r7, #32]
 8007d44:	e841 2300 	strex	r3, r2, [r1]
 8007d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e5      	bne.n	8007d1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e00f      	b.n	8007d8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4013      	ands	r3, r2
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d09f      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3740      	adds	r7, #64	; 0x40
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b095      	sub	sp, #84	; 0x54
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	330c      	adds	r3, #12
 8007dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e5      	bne.n	8007d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3314      	adds	r3, #20
 8007dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e5      	bne.n	8007dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d119      	bne.n	8007e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	330c      	adds	r3, #12
 8007e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0310 	bic.w	r3, r3, #16
 8007e22:	647b      	str	r3, [r7, #68]	; 0x44
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2c:	61ba      	str	r2, [r7, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e4e:	bf00      	nop
 8007e50:	3754      	adds	r7, #84	; 0x54
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff ff09 	bl	8007c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e7a:	bf00      	nop
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b21      	cmp	r3, #33	; 0x21
 8007e94:	d13e      	bne.n	8007f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d114      	bne.n	8007eca <UART_Transmit_IT+0x48>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d110      	bne.n	8007eca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	1c9a      	adds	r2, r3, #2
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	621a      	str	r2, [r3, #32]
 8007ec8:	e008      	b.n	8007edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	1c59      	adds	r1, r3, #1
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6211      	str	r1, [r2, #32]
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10f      	bne.n	8007f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e000      	b.n	8007f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f14:	2302      	movs	r3, #2
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fe8e 	bl	8007c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b08c      	sub	sp, #48	; 0x30
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b22      	cmp	r3, #34	; 0x22
 8007f64:	f040 80ab 	bne.w	80080be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f70:	d117      	bne.n	8007fa2 <UART_Receive_IT+0x50>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d113      	bne.n	8007fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	1c9a      	adds	r2, r3, #2
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa0:	e026      	b.n	8007ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb4:	d007      	beq.n	8007fc6 <UART_Receive_IT+0x74>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <UART_Receive_IT+0x82>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	e008      	b.n	8007fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008000:	2b00      	cmp	r3, #0
 8008002:	d15a      	bne.n	80080ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0220 	bic.w	r2, r2, #32
 8008012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695a      	ldr	r2, [r3, #20]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	2b01      	cmp	r3, #1
 8008042:	d135      	bne.n	80080b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	613b      	str	r3, [r7, #16]
   return(result);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f023 0310 	bic.w	r3, r3, #16
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	330c      	adds	r3, #12
 8008068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806a:	623a      	str	r2, [r7, #32]
 800806c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	69f9      	ldr	r1, [r7, #28]
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	61bb      	str	r3, [r7, #24]
   return(result);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b10      	cmp	r3, #16
 800808a:	d10a      	bne.n	80080a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff fdf9 	bl	8007ca0 <HAL_UARTEx_RxEventCallback>
 80080ae:	e002      	b.n	80080b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fde1 	bl	8007c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e002      	b.n	80080c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080be:	2302      	movs	r3, #2
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3730      	adds	r7, #48	; 0x30
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080cc:	b0c0      	sub	sp, #256	; 0x100
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e4:	68d9      	ldr	r1, [r3, #12]
 80080e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	ea40 0301 	orr.w	r3, r0, r1
 80080f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	431a      	orrs	r2, r3
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	431a      	orrs	r2, r3
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	4313      	orrs	r3, r2
 8008110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008120:	f021 010c 	bic.w	r1, r1, #12
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800812e:	430b      	orrs	r3, r1
 8008130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008142:	6999      	ldr	r1, [r3, #24]
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	ea40 0301 	orr.w	r3, r0, r1
 800814e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4b8f      	ldr	r3, [pc, #572]	; (8008394 <UART_SetConfig+0x2cc>)
 8008158:	429a      	cmp	r2, r3
 800815a:	d005      	beq.n	8008168 <UART_SetConfig+0xa0>
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4b8d      	ldr	r3, [pc, #564]	; (8008398 <UART_SetConfig+0x2d0>)
 8008164:	429a      	cmp	r2, r3
 8008166:	d104      	bne.n	8008172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008168:	f7fd ff86 	bl	8006078 <HAL_RCC_GetPCLK2Freq>
 800816c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008170:	e003      	b.n	800817a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008172:	f7fd ff6d 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8008176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800817a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008184:	f040 810c 	bne.w	80083a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800818c:	2200      	movs	r2, #0
 800818e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800819a:	4622      	mov	r2, r4
 800819c:	462b      	mov	r3, r5
 800819e:	1891      	adds	r1, r2, r2
 80081a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80081a2:	415b      	adcs	r3, r3
 80081a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081aa:	4621      	mov	r1, r4
 80081ac:	eb12 0801 	adds.w	r8, r2, r1
 80081b0:	4629      	mov	r1, r5
 80081b2:	eb43 0901 	adc.w	r9, r3, r1
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ca:	4690      	mov	r8, r2
 80081cc:	4699      	mov	r9, r3
 80081ce:	4623      	mov	r3, r4
 80081d0:	eb18 0303 	adds.w	r3, r8, r3
 80081d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081d8:	462b      	mov	r3, r5
 80081da:	eb49 0303 	adc.w	r3, r9, r3
 80081de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081f6:	460b      	mov	r3, r1
 80081f8:	18db      	adds	r3, r3, r3
 80081fa:	653b      	str	r3, [r7, #80]	; 0x50
 80081fc:	4613      	mov	r3, r2
 80081fe:	eb42 0303 	adc.w	r3, r2, r3
 8008202:	657b      	str	r3, [r7, #84]	; 0x54
 8008204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800820c:	f7f8 fd44 	bl	8000c98 <__aeabi_uldivmod>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4b61      	ldr	r3, [pc, #388]	; (800839c <UART_SetConfig+0x2d4>)
 8008216:	fba3 2302 	umull	r2, r3, r3, r2
 800821a:	095b      	lsrs	r3, r3, #5
 800821c:	011c      	lsls	r4, r3, #4
 800821e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008222:	2200      	movs	r2, #0
 8008224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800822c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008230:	4642      	mov	r2, r8
 8008232:	464b      	mov	r3, r9
 8008234:	1891      	adds	r1, r2, r2
 8008236:	64b9      	str	r1, [r7, #72]	; 0x48
 8008238:	415b      	adcs	r3, r3
 800823a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800823c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008240:	4641      	mov	r1, r8
 8008242:	eb12 0a01 	adds.w	sl, r2, r1
 8008246:	4649      	mov	r1, r9
 8008248:	eb43 0b01 	adc.w	fp, r3, r1
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800825c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008260:	4692      	mov	sl, r2
 8008262:	469b      	mov	fp, r3
 8008264:	4643      	mov	r3, r8
 8008266:	eb1a 0303 	adds.w	r3, sl, r3
 800826a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800826e:	464b      	mov	r3, r9
 8008270:	eb4b 0303 	adc.w	r3, fp, r3
 8008274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800828c:	460b      	mov	r3, r1
 800828e:	18db      	adds	r3, r3, r3
 8008290:	643b      	str	r3, [r7, #64]	; 0x40
 8008292:	4613      	mov	r3, r2
 8008294:	eb42 0303 	adc.w	r3, r2, r3
 8008298:	647b      	str	r3, [r7, #68]	; 0x44
 800829a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800829e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082a2:	f7f8 fcf9 	bl	8000c98 <__aeabi_uldivmod>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4611      	mov	r1, r2
 80082ac:	4b3b      	ldr	r3, [pc, #236]	; (800839c <UART_SetConfig+0x2d4>)
 80082ae:	fba3 2301 	umull	r2, r3, r3, r1
 80082b2:	095b      	lsrs	r3, r3, #5
 80082b4:	2264      	movs	r2, #100	; 0x64
 80082b6:	fb02 f303 	mul.w	r3, r2, r3
 80082ba:	1acb      	subs	r3, r1, r3
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082c2:	4b36      	ldr	r3, [pc, #216]	; (800839c <UART_SetConfig+0x2d4>)
 80082c4:	fba3 2302 	umull	r2, r3, r3, r2
 80082c8:	095b      	lsrs	r3, r3, #5
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082d0:	441c      	add	r4, r3
 80082d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082e4:	4642      	mov	r2, r8
 80082e6:	464b      	mov	r3, r9
 80082e8:	1891      	adds	r1, r2, r2
 80082ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80082ec:	415b      	adcs	r3, r3
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082f4:	4641      	mov	r1, r8
 80082f6:	1851      	adds	r1, r2, r1
 80082f8:	6339      	str	r1, [r7, #48]	; 0x30
 80082fa:	4649      	mov	r1, r9
 80082fc:	414b      	adcs	r3, r1
 80082fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800830c:	4659      	mov	r1, fp
 800830e:	00cb      	lsls	r3, r1, #3
 8008310:	4651      	mov	r1, sl
 8008312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008316:	4651      	mov	r1, sl
 8008318:	00ca      	lsls	r2, r1, #3
 800831a:	4610      	mov	r0, r2
 800831c:	4619      	mov	r1, r3
 800831e:	4603      	mov	r3, r0
 8008320:	4642      	mov	r2, r8
 8008322:	189b      	adds	r3, r3, r2
 8008324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008328:	464b      	mov	r3, r9
 800832a:	460a      	mov	r2, r1
 800832c:	eb42 0303 	adc.w	r3, r2, r3
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008348:	460b      	mov	r3, r1
 800834a:	18db      	adds	r3, r3, r3
 800834c:	62bb      	str	r3, [r7, #40]	; 0x28
 800834e:	4613      	mov	r3, r2
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800835a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800835e:	f7f8 fc9b 	bl	8000c98 <__aeabi_uldivmod>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4b0d      	ldr	r3, [pc, #52]	; (800839c <UART_SetConfig+0x2d4>)
 8008368:	fba3 1302 	umull	r1, r3, r3, r2
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	2164      	movs	r1, #100	; 0x64
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	3332      	adds	r3, #50	; 0x32
 800837a:	4a08      	ldr	r2, [pc, #32]	; (800839c <UART_SetConfig+0x2d4>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	f003 0207 	and.w	r2, r3, #7
 8008386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4422      	add	r2, r4
 800838e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008390:	e105      	b.n	800859e <UART_SetConfig+0x4d6>
 8008392:	bf00      	nop
 8008394:	40011000 	.word	0x40011000
 8008398:	40011400 	.word	0x40011400
 800839c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083b2:	4642      	mov	r2, r8
 80083b4:	464b      	mov	r3, r9
 80083b6:	1891      	adds	r1, r2, r2
 80083b8:	6239      	str	r1, [r7, #32]
 80083ba:	415b      	adcs	r3, r3
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
 80083be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083c2:	4641      	mov	r1, r8
 80083c4:	1854      	adds	r4, r2, r1
 80083c6:	4649      	mov	r1, r9
 80083c8:	eb43 0501 	adc.w	r5, r3, r1
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	00eb      	lsls	r3, r5, #3
 80083d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083da:	00e2      	lsls	r2, r4, #3
 80083dc:	4614      	mov	r4, r2
 80083de:	461d      	mov	r5, r3
 80083e0:	4643      	mov	r3, r8
 80083e2:	18e3      	adds	r3, r4, r3
 80083e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083e8:	464b      	mov	r3, r9
 80083ea:	eb45 0303 	adc.w	r3, r5, r3
 80083ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800840e:	4629      	mov	r1, r5
 8008410:	008b      	lsls	r3, r1, #2
 8008412:	4621      	mov	r1, r4
 8008414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008418:	4621      	mov	r1, r4
 800841a:	008a      	lsls	r2, r1, #2
 800841c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008420:	f7f8 fc3a 	bl	8000c98 <__aeabi_uldivmod>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4b60      	ldr	r3, [pc, #384]	; (80085ac <UART_SetConfig+0x4e4>)
 800842a:	fba3 2302 	umull	r2, r3, r3, r2
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	011c      	lsls	r4, r3, #4
 8008432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008436:	2200      	movs	r2, #0
 8008438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800843c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	1891      	adds	r1, r2, r2
 800844a:	61b9      	str	r1, [r7, #24]
 800844c:	415b      	adcs	r3, r3
 800844e:	61fb      	str	r3, [r7, #28]
 8008450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008454:	4641      	mov	r1, r8
 8008456:	1851      	adds	r1, r2, r1
 8008458:	6139      	str	r1, [r7, #16]
 800845a:	4649      	mov	r1, r9
 800845c:	414b      	adcs	r3, r1
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	f04f 0200 	mov.w	r2, #0
 8008464:	f04f 0300 	mov.w	r3, #0
 8008468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800846c:	4659      	mov	r1, fp
 800846e:	00cb      	lsls	r3, r1, #3
 8008470:	4651      	mov	r1, sl
 8008472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008476:	4651      	mov	r1, sl
 8008478:	00ca      	lsls	r2, r1, #3
 800847a:	4610      	mov	r0, r2
 800847c:	4619      	mov	r1, r3
 800847e:	4603      	mov	r3, r0
 8008480:	4642      	mov	r2, r8
 8008482:	189b      	adds	r3, r3, r2
 8008484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008488:	464b      	mov	r3, r9
 800848a:	460a      	mov	r2, r1
 800848c:	eb42 0303 	adc.w	r3, r2, r3
 8008490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	67bb      	str	r3, [r7, #120]	; 0x78
 800849e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084ac:	4649      	mov	r1, r9
 80084ae:	008b      	lsls	r3, r1, #2
 80084b0:	4641      	mov	r1, r8
 80084b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b6:	4641      	mov	r1, r8
 80084b8:	008a      	lsls	r2, r1, #2
 80084ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084be:	f7f8 fbeb 	bl	8000c98 <__aeabi_uldivmod>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4b39      	ldr	r3, [pc, #228]	; (80085ac <UART_SetConfig+0x4e4>)
 80084c8:	fba3 1302 	umull	r1, r3, r3, r2
 80084cc:	095b      	lsrs	r3, r3, #5
 80084ce:	2164      	movs	r1, #100	; 0x64
 80084d0:	fb01 f303 	mul.w	r3, r1, r3
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	3332      	adds	r3, #50	; 0x32
 80084da:	4a34      	ldr	r2, [pc, #208]	; (80085ac <UART_SetConfig+0x4e4>)
 80084dc:	fba2 2303 	umull	r2, r3, r2, r3
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084e6:	441c      	add	r4, r3
 80084e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ec:	2200      	movs	r2, #0
 80084ee:	673b      	str	r3, [r7, #112]	; 0x70
 80084f0:	677a      	str	r2, [r7, #116]	; 0x74
 80084f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084f6:	4642      	mov	r2, r8
 80084f8:	464b      	mov	r3, r9
 80084fa:	1891      	adds	r1, r2, r2
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	415b      	adcs	r3, r3
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008506:	4641      	mov	r1, r8
 8008508:	1851      	adds	r1, r2, r1
 800850a:	6039      	str	r1, [r7, #0]
 800850c:	4649      	mov	r1, r9
 800850e:	414b      	adcs	r3, r1
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800851e:	4659      	mov	r1, fp
 8008520:	00cb      	lsls	r3, r1, #3
 8008522:	4651      	mov	r1, sl
 8008524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008528:	4651      	mov	r1, sl
 800852a:	00ca      	lsls	r2, r1, #3
 800852c:	4610      	mov	r0, r2
 800852e:	4619      	mov	r1, r3
 8008530:	4603      	mov	r3, r0
 8008532:	4642      	mov	r2, r8
 8008534:	189b      	adds	r3, r3, r2
 8008536:	66bb      	str	r3, [r7, #104]	; 0x68
 8008538:	464b      	mov	r3, r9
 800853a:	460a      	mov	r2, r1
 800853c:	eb42 0303 	adc.w	r3, r2, r3
 8008540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	663b      	str	r3, [r7, #96]	; 0x60
 800854c:	667a      	str	r2, [r7, #100]	; 0x64
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800855a:	4649      	mov	r1, r9
 800855c:	008b      	lsls	r3, r1, #2
 800855e:	4641      	mov	r1, r8
 8008560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008564:	4641      	mov	r1, r8
 8008566:	008a      	lsls	r2, r1, #2
 8008568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800856c:	f7f8 fb94 	bl	8000c98 <__aeabi_uldivmod>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <UART_SetConfig+0x4e4>)
 8008576:	fba3 1302 	umull	r1, r3, r3, r2
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	2164      	movs	r1, #100	; 0x64
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	3332      	adds	r3, #50	; 0x32
 8008588:	4a08      	ldr	r2, [pc, #32]	; (80085ac <UART_SetConfig+0x4e4>)
 800858a:	fba2 2303 	umull	r2, r3, r2, r3
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4422      	add	r2, r4
 800859c:	609a      	str	r2, [r3, #8]
}
 800859e:	bf00      	nop
 80085a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085a4:	46bd      	mov	sp, r7
 80085a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085aa:	bf00      	nop
 80085ac:	51eb851f 	.word	0x51eb851f

080085b0 <atoi>:
 80085b0:	220a      	movs	r2, #10
 80085b2:	2100      	movs	r1, #0
 80085b4:	f000 bd4c 	b.w	8009050 <strtol>

080085b8 <__errno>:
 80085b8:	4b01      	ldr	r3, [pc, #4]	; (80085c0 <__errno+0x8>)
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20000014 	.word	0x20000014

080085c4 <__libc_init_array>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	4d0d      	ldr	r5, [pc, #52]	; (80085fc <__libc_init_array+0x38>)
 80085c8:	4c0d      	ldr	r4, [pc, #52]	; (8008600 <__libc_init_array+0x3c>)
 80085ca:	1b64      	subs	r4, r4, r5
 80085cc:	10a4      	asrs	r4, r4, #2
 80085ce:	2600      	movs	r6, #0
 80085d0:	42a6      	cmp	r6, r4
 80085d2:	d109      	bne.n	80085e8 <__libc_init_array+0x24>
 80085d4:	4d0b      	ldr	r5, [pc, #44]	; (8008604 <__libc_init_array+0x40>)
 80085d6:	4c0c      	ldr	r4, [pc, #48]	; (8008608 <__libc_init_array+0x44>)
 80085d8:	f002 ff90 	bl	800b4fc <_init>
 80085dc:	1b64      	subs	r4, r4, r5
 80085de:	10a4      	asrs	r4, r4, #2
 80085e0:	2600      	movs	r6, #0
 80085e2:	42a6      	cmp	r6, r4
 80085e4:	d105      	bne.n	80085f2 <__libc_init_array+0x2e>
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ec:	4798      	blx	r3
 80085ee:	3601      	adds	r6, #1
 80085f0:	e7ee      	b.n	80085d0 <__libc_init_array+0xc>
 80085f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f6:	4798      	blx	r3
 80085f8:	3601      	adds	r6, #1
 80085fa:	e7f2      	b.n	80085e2 <__libc_init_array+0x1e>
 80085fc:	0800b9f4 	.word	0x0800b9f4
 8008600:	0800b9f4 	.word	0x0800b9f4
 8008604:	0800b9f4 	.word	0x0800b9f4
 8008608:	0800b9f8 	.word	0x0800b9f8

0800860c <memcpy>:
 800860c:	440a      	add	r2, r1
 800860e:	4291      	cmp	r1, r2
 8008610:	f100 33ff 	add.w	r3, r0, #4294967295
 8008614:	d100      	bne.n	8008618 <memcpy+0xc>
 8008616:	4770      	bx	lr
 8008618:	b510      	push	{r4, lr}
 800861a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800861e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008622:	4291      	cmp	r1, r2
 8008624:	d1f9      	bne.n	800861a <memcpy+0xe>
 8008626:	bd10      	pop	{r4, pc}

08008628 <memset>:
 8008628:	4402      	add	r2, r0
 800862a:	4603      	mov	r3, r0
 800862c:	4293      	cmp	r3, r2
 800862e:	d100      	bne.n	8008632 <memset+0xa>
 8008630:	4770      	bx	lr
 8008632:	f803 1b01 	strb.w	r1, [r3], #1
 8008636:	e7f9      	b.n	800862c <memset+0x4>

08008638 <__cvt>:
 8008638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	ec55 4b10 	vmov	r4, r5, d0
 8008640:	2d00      	cmp	r5, #0
 8008642:	460e      	mov	r6, r1
 8008644:	4619      	mov	r1, r3
 8008646:	462b      	mov	r3, r5
 8008648:	bfbb      	ittet	lt
 800864a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800864e:	461d      	movlt	r5, r3
 8008650:	2300      	movge	r3, #0
 8008652:	232d      	movlt	r3, #45	; 0x2d
 8008654:	700b      	strb	r3, [r1, #0]
 8008656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008658:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800865c:	4691      	mov	r9, r2
 800865e:	f023 0820 	bic.w	r8, r3, #32
 8008662:	bfbc      	itt	lt
 8008664:	4622      	movlt	r2, r4
 8008666:	4614      	movlt	r4, r2
 8008668:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800866c:	d005      	beq.n	800867a <__cvt+0x42>
 800866e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008672:	d100      	bne.n	8008676 <__cvt+0x3e>
 8008674:	3601      	adds	r6, #1
 8008676:	2102      	movs	r1, #2
 8008678:	e000      	b.n	800867c <__cvt+0x44>
 800867a:	2103      	movs	r1, #3
 800867c:	ab03      	add	r3, sp, #12
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	ab02      	add	r3, sp, #8
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	ec45 4b10 	vmov	d0, r4, r5
 8008688:	4653      	mov	r3, sl
 800868a:	4632      	mov	r2, r6
 800868c:	f000 fd78 	bl	8009180 <_dtoa_r>
 8008690:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008694:	4607      	mov	r7, r0
 8008696:	d102      	bne.n	800869e <__cvt+0x66>
 8008698:	f019 0f01 	tst.w	r9, #1
 800869c:	d022      	beq.n	80086e4 <__cvt+0xac>
 800869e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086a2:	eb07 0906 	add.w	r9, r7, r6
 80086a6:	d110      	bne.n	80086ca <__cvt+0x92>
 80086a8:	783b      	ldrb	r3, [r7, #0]
 80086aa:	2b30      	cmp	r3, #48	; 0x30
 80086ac:	d10a      	bne.n	80086c4 <__cvt+0x8c>
 80086ae:	2200      	movs	r2, #0
 80086b0:	2300      	movs	r3, #0
 80086b2:	4620      	mov	r0, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	f7f8 fa0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80086ba:	b918      	cbnz	r0, 80086c4 <__cvt+0x8c>
 80086bc:	f1c6 0601 	rsb	r6, r6, #1
 80086c0:	f8ca 6000 	str.w	r6, [sl]
 80086c4:	f8da 3000 	ldr.w	r3, [sl]
 80086c8:	4499      	add	r9, r3
 80086ca:	2200      	movs	r2, #0
 80086cc:	2300      	movs	r3, #0
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f8 fa01 	bl	8000ad8 <__aeabi_dcmpeq>
 80086d6:	b108      	cbz	r0, 80086dc <__cvt+0xa4>
 80086d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80086dc:	2230      	movs	r2, #48	; 0x30
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	454b      	cmp	r3, r9
 80086e2:	d307      	bcc.n	80086f4 <__cvt+0xbc>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e8:	1bdb      	subs	r3, r3, r7
 80086ea:	4638      	mov	r0, r7
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	b004      	add	sp, #16
 80086f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f4:	1c59      	adds	r1, r3, #1
 80086f6:	9103      	str	r1, [sp, #12]
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	e7f0      	b.n	80086de <__cvt+0xa6>

080086fc <__exponent>:
 80086fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086fe:	4603      	mov	r3, r0
 8008700:	2900      	cmp	r1, #0
 8008702:	bfb8      	it	lt
 8008704:	4249      	neglt	r1, r1
 8008706:	f803 2b02 	strb.w	r2, [r3], #2
 800870a:	bfb4      	ite	lt
 800870c:	222d      	movlt	r2, #45	; 0x2d
 800870e:	222b      	movge	r2, #43	; 0x2b
 8008710:	2909      	cmp	r1, #9
 8008712:	7042      	strb	r2, [r0, #1]
 8008714:	dd2a      	ble.n	800876c <__exponent+0x70>
 8008716:	f10d 0407 	add.w	r4, sp, #7
 800871a:	46a4      	mov	ip, r4
 800871c:	270a      	movs	r7, #10
 800871e:	46a6      	mov	lr, r4
 8008720:	460a      	mov	r2, r1
 8008722:	fb91 f6f7 	sdiv	r6, r1, r7
 8008726:	fb07 1516 	mls	r5, r7, r6, r1
 800872a:	3530      	adds	r5, #48	; 0x30
 800872c:	2a63      	cmp	r2, #99	; 0x63
 800872e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008732:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008736:	4631      	mov	r1, r6
 8008738:	dcf1      	bgt.n	800871e <__exponent+0x22>
 800873a:	3130      	adds	r1, #48	; 0x30
 800873c:	f1ae 0502 	sub.w	r5, lr, #2
 8008740:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008744:	1c44      	adds	r4, r0, #1
 8008746:	4629      	mov	r1, r5
 8008748:	4561      	cmp	r1, ip
 800874a:	d30a      	bcc.n	8008762 <__exponent+0x66>
 800874c:	f10d 0209 	add.w	r2, sp, #9
 8008750:	eba2 020e 	sub.w	r2, r2, lr
 8008754:	4565      	cmp	r5, ip
 8008756:	bf88      	it	hi
 8008758:	2200      	movhi	r2, #0
 800875a:	4413      	add	r3, r2
 800875c:	1a18      	subs	r0, r3, r0
 800875e:	b003      	add	sp, #12
 8008760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008766:	f804 2f01 	strb.w	r2, [r4, #1]!
 800876a:	e7ed      	b.n	8008748 <__exponent+0x4c>
 800876c:	2330      	movs	r3, #48	; 0x30
 800876e:	3130      	adds	r1, #48	; 0x30
 8008770:	7083      	strb	r3, [r0, #2]
 8008772:	70c1      	strb	r1, [r0, #3]
 8008774:	1d03      	adds	r3, r0, #4
 8008776:	e7f1      	b.n	800875c <__exponent+0x60>

08008778 <_printf_float>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	ed2d 8b02 	vpush	{d8}
 8008780:	b08d      	sub	sp, #52	; 0x34
 8008782:	460c      	mov	r4, r1
 8008784:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008788:	4616      	mov	r6, r2
 800878a:	461f      	mov	r7, r3
 800878c:	4605      	mov	r5, r0
 800878e:	f001 fae5 	bl	8009d5c <_localeconv_r>
 8008792:	f8d0 a000 	ldr.w	sl, [r0]
 8008796:	4650      	mov	r0, sl
 8008798:	f7f7 fd22 	bl	80001e0 <strlen>
 800879c:	2300      	movs	r3, #0
 800879e:	930a      	str	r3, [sp, #40]	; 0x28
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	f8d8 3000 	ldr.w	r3, [r8]
 80087a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087ac:	3307      	adds	r3, #7
 80087ae:	f023 0307 	bic.w	r3, r3, #7
 80087b2:	f103 0208 	add.w	r2, r3, #8
 80087b6:	f8c8 2000 	str.w	r2, [r8]
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087ca:	9307      	str	r3, [sp, #28]
 80087cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80087d0:	ee08 0a10 	vmov	s16, r0
 80087d4:	4b9f      	ldr	r3, [pc, #636]	; (8008a54 <_printf_float+0x2dc>)
 80087d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087da:	f04f 32ff 	mov.w	r2, #4294967295
 80087de:	f7f8 f9ad 	bl	8000b3c <__aeabi_dcmpun>
 80087e2:	bb88      	cbnz	r0, 8008848 <_printf_float+0xd0>
 80087e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e8:	4b9a      	ldr	r3, [pc, #616]	; (8008a54 <_printf_float+0x2dc>)
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	f7f8 f987 	bl	8000b00 <__aeabi_dcmple>
 80087f2:	bb48      	cbnz	r0, 8008848 <_printf_float+0xd0>
 80087f4:	2200      	movs	r2, #0
 80087f6:	2300      	movs	r3, #0
 80087f8:	4640      	mov	r0, r8
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f8 f976 	bl	8000aec <__aeabi_dcmplt>
 8008800:	b110      	cbz	r0, 8008808 <_printf_float+0x90>
 8008802:	232d      	movs	r3, #45	; 0x2d
 8008804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008808:	4b93      	ldr	r3, [pc, #588]	; (8008a58 <_printf_float+0x2e0>)
 800880a:	4894      	ldr	r0, [pc, #592]	; (8008a5c <_printf_float+0x2e4>)
 800880c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008810:	bf94      	ite	ls
 8008812:	4698      	movls	r8, r3
 8008814:	4680      	movhi	r8, r0
 8008816:	2303      	movs	r3, #3
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	9b05      	ldr	r3, [sp, #20]
 800881c:	f023 0204 	bic.w	r2, r3, #4
 8008820:	6022      	str	r2, [r4, #0]
 8008822:	f04f 0900 	mov.w	r9, #0
 8008826:	9700      	str	r7, [sp, #0]
 8008828:	4633      	mov	r3, r6
 800882a:	aa0b      	add	r2, sp, #44	; 0x2c
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f9d8 	bl	8008be4 <_printf_common>
 8008834:	3001      	adds	r0, #1
 8008836:	f040 8090 	bne.w	800895a <_printf_float+0x1e2>
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	b00d      	add	sp, #52	; 0x34
 8008840:	ecbd 8b02 	vpop	{d8}
 8008844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	f7f8 f974 	bl	8000b3c <__aeabi_dcmpun>
 8008854:	b140      	cbz	r0, 8008868 <_printf_float+0xf0>
 8008856:	464b      	mov	r3, r9
 8008858:	2b00      	cmp	r3, #0
 800885a:	bfbc      	itt	lt
 800885c:	232d      	movlt	r3, #45	; 0x2d
 800885e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008862:	487f      	ldr	r0, [pc, #508]	; (8008a60 <_printf_float+0x2e8>)
 8008864:	4b7f      	ldr	r3, [pc, #508]	; (8008a64 <_printf_float+0x2ec>)
 8008866:	e7d1      	b.n	800880c <_printf_float+0x94>
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800886e:	9206      	str	r2, [sp, #24]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	d13f      	bne.n	80088f4 <_printf_float+0x17c>
 8008874:	2306      	movs	r3, #6
 8008876:	6063      	str	r3, [r4, #4]
 8008878:	9b05      	ldr	r3, [sp, #20]
 800887a:	6861      	ldr	r1, [r4, #4]
 800887c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008880:	2300      	movs	r3, #0
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	ab0a      	add	r3, sp, #40	; 0x28
 8008886:	e9cd b301 	strd	fp, r3, [sp, #4]
 800888a:	ab09      	add	r3, sp, #36	; 0x24
 800888c:	ec49 8b10 	vmov	d0, r8, r9
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	6022      	str	r2, [r4, #0]
 8008894:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008898:	4628      	mov	r0, r5
 800889a:	f7ff fecd 	bl	8008638 <__cvt>
 800889e:	9b06      	ldr	r3, [sp, #24]
 80088a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088a2:	2b47      	cmp	r3, #71	; 0x47
 80088a4:	4680      	mov	r8, r0
 80088a6:	d108      	bne.n	80088ba <_printf_float+0x142>
 80088a8:	1cc8      	adds	r0, r1, #3
 80088aa:	db02      	blt.n	80088b2 <_printf_float+0x13a>
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	4299      	cmp	r1, r3
 80088b0:	dd41      	ble.n	8008936 <_printf_float+0x1be>
 80088b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80088b6:	fa5f fb8b 	uxtb.w	fp, fp
 80088ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088be:	d820      	bhi.n	8008902 <_printf_float+0x18a>
 80088c0:	3901      	subs	r1, #1
 80088c2:	465a      	mov	r2, fp
 80088c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088c8:	9109      	str	r1, [sp, #36]	; 0x24
 80088ca:	f7ff ff17 	bl	80086fc <__exponent>
 80088ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d0:	1813      	adds	r3, r2, r0
 80088d2:	2a01      	cmp	r2, #1
 80088d4:	4681      	mov	r9, r0
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	dc02      	bgt.n	80088e0 <_printf_float+0x168>
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	07d2      	lsls	r2, r2, #31
 80088de:	d501      	bpl.n	80088e4 <_printf_float+0x16c>
 80088e0:	3301      	adds	r3, #1
 80088e2:	6123      	str	r3, [r4, #16]
 80088e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d09c      	beq.n	8008826 <_printf_float+0xae>
 80088ec:	232d      	movs	r3, #45	; 0x2d
 80088ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f2:	e798      	b.n	8008826 <_printf_float+0xae>
 80088f4:	9a06      	ldr	r2, [sp, #24]
 80088f6:	2a47      	cmp	r2, #71	; 0x47
 80088f8:	d1be      	bne.n	8008878 <_printf_float+0x100>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1bc      	bne.n	8008878 <_printf_float+0x100>
 80088fe:	2301      	movs	r3, #1
 8008900:	e7b9      	b.n	8008876 <_printf_float+0xfe>
 8008902:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008906:	d118      	bne.n	800893a <_printf_float+0x1c2>
 8008908:	2900      	cmp	r1, #0
 800890a:	6863      	ldr	r3, [r4, #4]
 800890c:	dd0b      	ble.n	8008926 <_printf_float+0x1ae>
 800890e:	6121      	str	r1, [r4, #16]
 8008910:	b913      	cbnz	r3, 8008918 <_printf_float+0x1a0>
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	07d0      	lsls	r0, r2, #31
 8008916:	d502      	bpl.n	800891e <_printf_float+0x1a6>
 8008918:	3301      	adds	r3, #1
 800891a:	440b      	add	r3, r1
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008920:	f04f 0900 	mov.w	r9, #0
 8008924:	e7de      	b.n	80088e4 <_printf_float+0x16c>
 8008926:	b913      	cbnz	r3, 800892e <_printf_float+0x1b6>
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	07d2      	lsls	r2, r2, #31
 800892c:	d501      	bpl.n	8008932 <_printf_float+0x1ba>
 800892e:	3302      	adds	r3, #2
 8008930:	e7f4      	b.n	800891c <_printf_float+0x1a4>
 8008932:	2301      	movs	r3, #1
 8008934:	e7f2      	b.n	800891c <_printf_float+0x1a4>
 8008936:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800893a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893c:	4299      	cmp	r1, r3
 800893e:	db05      	blt.n	800894c <_printf_float+0x1d4>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	6121      	str	r1, [r4, #16]
 8008944:	07d8      	lsls	r0, r3, #31
 8008946:	d5ea      	bpl.n	800891e <_printf_float+0x1a6>
 8008948:	1c4b      	adds	r3, r1, #1
 800894a:	e7e7      	b.n	800891c <_printf_float+0x1a4>
 800894c:	2900      	cmp	r1, #0
 800894e:	bfd4      	ite	le
 8008950:	f1c1 0202 	rsble	r2, r1, #2
 8008954:	2201      	movgt	r2, #1
 8008956:	4413      	add	r3, r2
 8008958:	e7e0      	b.n	800891c <_printf_float+0x1a4>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	055a      	lsls	r2, r3, #21
 800895e:	d407      	bmi.n	8008970 <_printf_float+0x1f8>
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	4642      	mov	r2, r8
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	d12c      	bne.n	80089c8 <_printf_float+0x250>
 800896e:	e764      	b.n	800883a <_printf_float+0xc2>
 8008970:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008974:	f240 80e0 	bls.w	8008b38 <_printf_float+0x3c0>
 8008978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800897c:	2200      	movs	r2, #0
 800897e:	2300      	movs	r3, #0
 8008980:	f7f8 f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008984:	2800      	cmp	r0, #0
 8008986:	d034      	beq.n	80089f2 <_printf_float+0x27a>
 8008988:	4a37      	ldr	r2, [pc, #220]	; (8008a68 <_printf_float+0x2f0>)
 800898a:	2301      	movs	r3, #1
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af51 	beq.w	800883a <_printf_float+0xc2>
 8008998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899c:	429a      	cmp	r2, r3
 800899e:	db02      	blt.n	80089a6 <_printf_float+0x22e>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	07d8      	lsls	r0, r3, #31
 80089a4:	d510      	bpl.n	80089c8 <_printf_float+0x250>
 80089a6:	ee18 3a10 	vmov	r3, s16
 80089aa:	4652      	mov	r2, sl
 80089ac:	4631      	mov	r1, r6
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f af41 	beq.w	800883a <_printf_float+0xc2>
 80089b8:	f04f 0800 	mov.w	r8, #0
 80089bc:	f104 091a 	add.w	r9, r4, #26
 80089c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c2:	3b01      	subs	r3, #1
 80089c4:	4543      	cmp	r3, r8
 80089c6:	dc09      	bgt.n	80089dc <_printf_float+0x264>
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	079b      	lsls	r3, r3, #30
 80089cc:	f100 8105 	bmi.w	8008bda <_printf_float+0x462>
 80089d0:	68e0      	ldr	r0, [r4, #12]
 80089d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d4:	4298      	cmp	r0, r3
 80089d6:	bfb8      	it	lt
 80089d8:	4618      	movlt	r0, r3
 80089da:	e730      	b.n	800883e <_printf_float+0xc6>
 80089dc:	2301      	movs	r3, #1
 80089de:	464a      	mov	r2, r9
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f af27 	beq.w	800883a <_printf_float+0xc2>
 80089ec:	f108 0801 	add.w	r8, r8, #1
 80089f0:	e7e6      	b.n	80089c0 <_printf_float+0x248>
 80089f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dc39      	bgt.n	8008a6c <_printf_float+0x2f4>
 80089f8:	4a1b      	ldr	r2, [pc, #108]	; (8008a68 <_printf_float+0x2f0>)
 80089fa:	2301      	movs	r3, #1
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f af19 	beq.w	800883a <_printf_float+0xc2>
 8008a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d102      	bne.n	8008a16 <_printf_float+0x29e>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07d9      	lsls	r1, r3, #31
 8008a14:	d5d8      	bpl.n	80089c8 <_printf_float+0x250>
 8008a16:	ee18 3a10 	vmov	r3, s16
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af09 	beq.w	800883a <_printf_float+0xc2>
 8008a28:	f04f 0900 	mov.w	r9, #0
 8008a2c:	f104 0a1a 	add.w	sl, r4, #26
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	425b      	negs	r3, r3
 8008a34:	454b      	cmp	r3, r9
 8008a36:	dc01      	bgt.n	8008a3c <_printf_float+0x2c4>
 8008a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3a:	e792      	b.n	8008962 <_printf_float+0x1ea>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	4652      	mov	r2, sl
 8008a40:	4631      	mov	r1, r6
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	f43f aef7 	beq.w	800883a <_printf_float+0xc2>
 8008a4c:	f109 0901 	add.w	r9, r9, #1
 8008a50:	e7ee      	b.n	8008a30 <_printf_float+0x2b8>
 8008a52:	bf00      	nop
 8008a54:	7fefffff 	.word	0x7fefffff
 8008a58:	0800b614 	.word	0x0800b614
 8008a5c:	0800b618 	.word	0x0800b618
 8008a60:	0800b620 	.word	0x0800b620
 8008a64:	0800b61c 	.word	0x0800b61c
 8008a68:	0800b624 	.word	0x0800b624
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a70:	429a      	cmp	r2, r3
 8008a72:	bfa8      	it	ge
 8008a74:	461a      	movge	r2, r3
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	4691      	mov	r9, r2
 8008a7a:	dc37      	bgt.n	8008aec <_printf_float+0x374>
 8008a7c:	f04f 0b00 	mov.w	fp, #0
 8008a80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a84:	f104 021a 	add.w	r2, r4, #26
 8008a88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	eba3 0309 	sub.w	r3, r3, r9
 8008a90:	455b      	cmp	r3, fp
 8008a92:	dc33      	bgt.n	8008afc <_printf_float+0x384>
 8008a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	db3b      	blt.n	8008b14 <_printf_float+0x39c>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	07da      	lsls	r2, r3, #31
 8008aa0:	d438      	bmi.n	8008b14 <_printf_float+0x39c>
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa4:	9a05      	ldr	r2, [sp, #20]
 8008aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa8:	1a9a      	subs	r2, r3, r2
 8008aaa:	eba3 0901 	sub.w	r9, r3, r1
 8008aae:	4591      	cmp	r9, r2
 8008ab0:	bfa8      	it	ge
 8008ab2:	4691      	movge	r9, r2
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	dc35      	bgt.n	8008b26 <_printf_float+0x3ae>
 8008aba:	f04f 0800 	mov.w	r8, #0
 8008abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac2:	f104 0a1a 	add.w	sl, r4, #26
 8008ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	eba3 0309 	sub.w	r3, r3, r9
 8008ad0:	4543      	cmp	r3, r8
 8008ad2:	f77f af79 	ble.w	80089c8 <_printf_float+0x250>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4652      	mov	r2, sl
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f43f aeaa 	beq.w	800883a <_printf_float+0xc2>
 8008ae6:	f108 0801 	add.w	r8, r8, #1
 8008aea:	e7ec      	b.n	8008ac6 <_printf_float+0x34e>
 8008aec:	4613      	mov	r3, r2
 8008aee:	4631      	mov	r1, r6
 8008af0:	4642      	mov	r2, r8
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	d1c0      	bne.n	8008a7c <_printf_float+0x304>
 8008afa:	e69e      	b.n	800883a <_printf_float+0xc2>
 8008afc:	2301      	movs	r3, #1
 8008afe:	4631      	mov	r1, r6
 8008b00:	4628      	mov	r0, r5
 8008b02:	9205      	str	r2, [sp, #20]
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f ae97 	beq.w	800883a <_printf_float+0xc2>
 8008b0c:	9a05      	ldr	r2, [sp, #20]
 8008b0e:	f10b 0b01 	add.w	fp, fp, #1
 8008b12:	e7b9      	b.n	8008a88 <_printf_float+0x310>
 8008b14:	ee18 3a10 	vmov	r3, s16
 8008b18:	4652      	mov	r2, sl
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b8      	blx	r7
 8008b20:	3001      	adds	r0, #1
 8008b22:	d1be      	bne.n	8008aa2 <_printf_float+0x32a>
 8008b24:	e689      	b.n	800883a <_printf_float+0xc2>
 8008b26:	9a05      	ldr	r2, [sp, #20]
 8008b28:	464b      	mov	r3, r9
 8008b2a:	4442      	add	r2, r8
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	d1c1      	bne.n	8008aba <_printf_float+0x342>
 8008b36:	e680      	b.n	800883a <_printf_float+0xc2>
 8008b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b3a:	2a01      	cmp	r2, #1
 8008b3c:	dc01      	bgt.n	8008b42 <_printf_float+0x3ca>
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d538      	bpl.n	8008bb4 <_printf_float+0x43c>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4642      	mov	r2, r8
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f43f ae74 	beq.w	800883a <_printf_float+0xc2>
 8008b52:	ee18 3a10 	vmov	r3, s16
 8008b56:	4652      	mov	r2, sl
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f ae6b 	beq.w	800883a <_printf_float+0xc2>
 8008b64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f7f7 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b70:	b9d8      	cbnz	r0, 8008baa <_printf_float+0x432>
 8008b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b74:	f108 0201 	add.w	r2, r8, #1
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b8      	blx	r7
 8008b80:	3001      	adds	r0, #1
 8008b82:	d10e      	bne.n	8008ba2 <_printf_float+0x42a>
 8008b84:	e659      	b.n	800883a <_printf_float+0xc2>
 8008b86:	2301      	movs	r3, #1
 8008b88:	4652      	mov	r2, sl
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	f43f ae52 	beq.w	800883a <_printf_float+0xc2>
 8008b96:	f108 0801 	add.w	r8, r8, #1
 8008b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	4543      	cmp	r3, r8
 8008ba0:	dcf1      	bgt.n	8008b86 <_printf_float+0x40e>
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ba8:	e6dc      	b.n	8008964 <_printf_float+0x1ec>
 8008baa:	f04f 0800 	mov.w	r8, #0
 8008bae:	f104 0a1a 	add.w	sl, r4, #26
 8008bb2:	e7f2      	b.n	8008b9a <_printf_float+0x422>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4642      	mov	r2, r8
 8008bb8:	e7df      	b.n	8008b7a <_printf_float+0x402>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	464a      	mov	r2, r9
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b8      	blx	r7
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	f43f ae38 	beq.w	800883a <_printf_float+0xc2>
 8008bca:	f108 0801 	add.w	r8, r8, #1
 8008bce:	68e3      	ldr	r3, [r4, #12]
 8008bd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd2:	1a5b      	subs	r3, r3, r1
 8008bd4:	4543      	cmp	r3, r8
 8008bd6:	dcf0      	bgt.n	8008bba <_printf_float+0x442>
 8008bd8:	e6fa      	b.n	80089d0 <_printf_float+0x258>
 8008bda:	f04f 0800 	mov.w	r8, #0
 8008bde:	f104 0919 	add.w	r9, r4, #25
 8008be2:	e7f4      	b.n	8008bce <_printf_float+0x456>

08008be4 <_printf_common>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	4616      	mov	r6, r2
 8008bea:	4699      	mov	r9, r3
 8008bec:	688a      	ldr	r2, [r1, #8]
 8008bee:	690b      	ldr	r3, [r1, #16]
 8008bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	bfb8      	it	lt
 8008bf8:	4613      	movlt	r3, r2
 8008bfa:	6033      	str	r3, [r6, #0]
 8008bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c00:	4607      	mov	r7, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	b10a      	cbz	r2, 8008c0a <_printf_common+0x26>
 8008c06:	3301      	adds	r3, #1
 8008c08:	6033      	str	r3, [r6, #0]
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	0699      	lsls	r1, r3, #26
 8008c0e:	bf42      	ittt	mi
 8008c10:	6833      	ldrmi	r3, [r6, #0]
 8008c12:	3302      	addmi	r3, #2
 8008c14:	6033      	strmi	r3, [r6, #0]
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	f015 0506 	ands.w	r5, r5, #6
 8008c1c:	d106      	bne.n	8008c2c <_printf_common+0x48>
 8008c1e:	f104 0a19 	add.w	sl, r4, #25
 8008c22:	68e3      	ldr	r3, [r4, #12]
 8008c24:	6832      	ldr	r2, [r6, #0]
 8008c26:	1a9b      	subs	r3, r3, r2
 8008c28:	42ab      	cmp	r3, r5
 8008c2a:	dc26      	bgt.n	8008c7a <_printf_common+0x96>
 8008c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c30:	1e13      	subs	r3, r2, #0
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	bf18      	it	ne
 8008c36:	2301      	movne	r3, #1
 8008c38:	0692      	lsls	r2, r2, #26
 8008c3a:	d42b      	bmi.n	8008c94 <_printf_common+0xb0>
 8008c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c40:	4649      	mov	r1, r9
 8008c42:	4638      	mov	r0, r7
 8008c44:	47c0      	blx	r8
 8008c46:	3001      	adds	r0, #1
 8008c48:	d01e      	beq.n	8008c88 <_printf_common+0xa4>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	68e5      	ldr	r5, [r4, #12]
 8008c4e:	6832      	ldr	r2, [r6, #0]
 8008c50:	f003 0306 	and.w	r3, r3, #6
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	bf08      	it	eq
 8008c58:	1aad      	subeq	r5, r5, r2
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	6922      	ldr	r2, [r4, #16]
 8008c5e:	bf0c      	ite	eq
 8008c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c64:	2500      	movne	r5, #0
 8008c66:	4293      	cmp	r3, r2
 8008c68:	bfc4      	itt	gt
 8008c6a:	1a9b      	subgt	r3, r3, r2
 8008c6c:	18ed      	addgt	r5, r5, r3
 8008c6e:	2600      	movs	r6, #0
 8008c70:	341a      	adds	r4, #26
 8008c72:	42b5      	cmp	r5, r6
 8008c74:	d11a      	bne.n	8008cac <_printf_common+0xc8>
 8008c76:	2000      	movs	r0, #0
 8008c78:	e008      	b.n	8008c8c <_printf_common+0xa8>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	4652      	mov	r2, sl
 8008c7e:	4649      	mov	r1, r9
 8008c80:	4638      	mov	r0, r7
 8008c82:	47c0      	blx	r8
 8008c84:	3001      	adds	r0, #1
 8008c86:	d103      	bne.n	8008c90 <_printf_common+0xac>
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c90:	3501      	adds	r5, #1
 8008c92:	e7c6      	b.n	8008c22 <_printf_common+0x3e>
 8008c94:	18e1      	adds	r1, r4, r3
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	2030      	movs	r0, #48	; 0x30
 8008c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c9e:	4422      	add	r2, r4
 8008ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca8:	3302      	adds	r3, #2
 8008caa:	e7c7      	b.n	8008c3c <_printf_common+0x58>
 8008cac:	2301      	movs	r3, #1
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	47c0      	blx	r8
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d0e6      	beq.n	8008c88 <_printf_common+0xa4>
 8008cba:	3601      	adds	r6, #1
 8008cbc:	e7d9      	b.n	8008c72 <_printf_common+0x8e>
	...

08008cc0 <_printf_i>:
 8008cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc4:	7e0f      	ldrb	r7, [r1, #24]
 8008cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cc8:	2f78      	cmp	r7, #120	; 0x78
 8008cca:	4691      	mov	r9, r2
 8008ccc:	4680      	mov	r8, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	469a      	mov	sl, r3
 8008cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cd6:	d807      	bhi.n	8008ce8 <_printf_i+0x28>
 8008cd8:	2f62      	cmp	r7, #98	; 0x62
 8008cda:	d80a      	bhi.n	8008cf2 <_printf_i+0x32>
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	f000 80d8 	beq.w	8008e92 <_printf_i+0x1d2>
 8008ce2:	2f58      	cmp	r7, #88	; 0x58
 8008ce4:	f000 80a3 	beq.w	8008e2e <_printf_i+0x16e>
 8008ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf0:	e03a      	b.n	8008d68 <_printf_i+0xa8>
 8008cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cf6:	2b15      	cmp	r3, #21
 8008cf8:	d8f6      	bhi.n	8008ce8 <_printf_i+0x28>
 8008cfa:	a101      	add	r1, pc, #4	; (adr r1, 8008d00 <_printf_i+0x40>)
 8008cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d00:	08008d59 	.word	0x08008d59
 8008d04:	08008d6d 	.word	0x08008d6d
 8008d08:	08008ce9 	.word	0x08008ce9
 8008d0c:	08008ce9 	.word	0x08008ce9
 8008d10:	08008ce9 	.word	0x08008ce9
 8008d14:	08008ce9 	.word	0x08008ce9
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008ce9 	.word	0x08008ce9
 8008d20:	08008ce9 	.word	0x08008ce9
 8008d24:	08008ce9 	.word	0x08008ce9
 8008d28:	08008ce9 	.word	0x08008ce9
 8008d2c:	08008e79 	.word	0x08008e79
 8008d30:	08008d9d 	.word	0x08008d9d
 8008d34:	08008e5b 	.word	0x08008e5b
 8008d38:	08008ce9 	.word	0x08008ce9
 8008d3c:	08008ce9 	.word	0x08008ce9
 8008d40:	08008e9b 	.word	0x08008e9b
 8008d44:	08008ce9 	.word	0x08008ce9
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008ce9 	.word	0x08008ce9
 8008d50:	08008ce9 	.word	0x08008ce9
 8008d54:	08008e63 	.word	0x08008e63
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	1d1a      	adds	r2, r3, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	602a      	str	r2, [r5, #0]
 8008d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e0a3      	b.n	8008eb4 <_printf_i+0x1f4>
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	6829      	ldr	r1, [r5, #0]
 8008d70:	0606      	lsls	r6, r0, #24
 8008d72:	f101 0304 	add.w	r3, r1, #4
 8008d76:	d50a      	bpl.n	8008d8e <_printf_i+0xce>
 8008d78:	680e      	ldr	r6, [r1, #0]
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	2e00      	cmp	r6, #0
 8008d7e:	da03      	bge.n	8008d88 <_printf_i+0xc8>
 8008d80:	232d      	movs	r3, #45	; 0x2d
 8008d82:	4276      	negs	r6, r6
 8008d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d88:	485e      	ldr	r0, [pc, #376]	; (8008f04 <_printf_i+0x244>)
 8008d8a:	230a      	movs	r3, #10
 8008d8c:	e019      	b.n	8008dc2 <_printf_i+0x102>
 8008d8e:	680e      	ldr	r6, [r1, #0]
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d96:	bf18      	it	ne
 8008d98:	b236      	sxthne	r6, r6
 8008d9a:	e7ef      	b.n	8008d7c <_printf_i+0xbc>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	1d19      	adds	r1, r3, #4
 8008da2:	6029      	str	r1, [r5, #0]
 8008da4:	0601      	lsls	r1, r0, #24
 8008da6:	d501      	bpl.n	8008dac <_printf_i+0xec>
 8008da8:	681e      	ldr	r6, [r3, #0]
 8008daa:	e002      	b.n	8008db2 <_printf_i+0xf2>
 8008dac:	0646      	lsls	r6, r0, #25
 8008dae:	d5fb      	bpl.n	8008da8 <_printf_i+0xe8>
 8008db0:	881e      	ldrh	r6, [r3, #0]
 8008db2:	4854      	ldr	r0, [pc, #336]	; (8008f04 <_printf_i+0x244>)
 8008db4:	2f6f      	cmp	r7, #111	; 0x6f
 8008db6:	bf0c      	ite	eq
 8008db8:	2308      	moveq	r3, #8
 8008dba:	230a      	movne	r3, #10
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dc2:	6865      	ldr	r5, [r4, #4]
 8008dc4:	60a5      	str	r5, [r4, #8]
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	bfa2      	ittt	ge
 8008dca:	6821      	ldrge	r1, [r4, #0]
 8008dcc:	f021 0104 	bicge.w	r1, r1, #4
 8008dd0:	6021      	strge	r1, [r4, #0]
 8008dd2:	b90e      	cbnz	r6, 8008dd8 <_printf_i+0x118>
 8008dd4:	2d00      	cmp	r5, #0
 8008dd6:	d04d      	beq.n	8008e74 <_printf_i+0x1b4>
 8008dd8:	4615      	mov	r5, r2
 8008dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dde:	fb03 6711 	mls	r7, r3, r1, r6
 8008de2:	5dc7      	ldrb	r7, [r0, r7]
 8008de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008de8:	4637      	mov	r7, r6
 8008dea:	42bb      	cmp	r3, r7
 8008dec:	460e      	mov	r6, r1
 8008dee:	d9f4      	bls.n	8008dda <_printf_i+0x11a>
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d10b      	bne.n	8008e0c <_printf_i+0x14c>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	07de      	lsls	r6, r3, #31
 8008df8:	d508      	bpl.n	8008e0c <_printf_i+0x14c>
 8008dfa:	6923      	ldr	r3, [r4, #16]
 8008dfc:	6861      	ldr	r1, [r4, #4]
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	bfde      	ittt	le
 8008e02:	2330      	movle	r3, #48	; 0x30
 8008e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e0c:	1b52      	subs	r2, r2, r5
 8008e0e:	6122      	str	r2, [r4, #16]
 8008e10:	f8cd a000 	str.w	sl, [sp]
 8008e14:	464b      	mov	r3, r9
 8008e16:	aa03      	add	r2, sp, #12
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7ff fee2 	bl	8008be4 <_printf_common>
 8008e20:	3001      	adds	r0, #1
 8008e22:	d14c      	bne.n	8008ebe <_printf_i+0x1fe>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	b004      	add	sp, #16
 8008e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2e:	4835      	ldr	r0, [pc, #212]	; (8008f04 <_printf_i+0x244>)
 8008e30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e34:	6829      	ldr	r1, [r5, #0]
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e3c:	6029      	str	r1, [r5, #0]
 8008e3e:	061d      	lsls	r5, r3, #24
 8008e40:	d514      	bpl.n	8008e6c <_printf_i+0x1ac>
 8008e42:	07df      	lsls	r7, r3, #31
 8008e44:	bf44      	itt	mi
 8008e46:	f043 0320 	orrmi.w	r3, r3, #32
 8008e4a:	6023      	strmi	r3, [r4, #0]
 8008e4c:	b91e      	cbnz	r6, 8008e56 <_printf_i+0x196>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f023 0320 	bic.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	2310      	movs	r3, #16
 8008e58:	e7b0      	b.n	8008dbc <_printf_i+0xfc>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f043 0320 	orr.w	r3, r3, #32
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	2378      	movs	r3, #120	; 0x78
 8008e64:	4828      	ldr	r0, [pc, #160]	; (8008f08 <_printf_i+0x248>)
 8008e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e6a:	e7e3      	b.n	8008e34 <_printf_i+0x174>
 8008e6c:	0659      	lsls	r1, r3, #25
 8008e6e:	bf48      	it	mi
 8008e70:	b2b6      	uxthmi	r6, r6
 8008e72:	e7e6      	b.n	8008e42 <_printf_i+0x182>
 8008e74:	4615      	mov	r5, r2
 8008e76:	e7bb      	b.n	8008df0 <_printf_i+0x130>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	6826      	ldr	r6, [r4, #0]
 8008e7c:	6961      	ldr	r1, [r4, #20]
 8008e7e:	1d18      	adds	r0, r3, #4
 8008e80:	6028      	str	r0, [r5, #0]
 8008e82:	0635      	lsls	r5, r6, #24
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	d501      	bpl.n	8008e8c <_printf_i+0x1cc>
 8008e88:	6019      	str	r1, [r3, #0]
 8008e8a:	e002      	b.n	8008e92 <_printf_i+0x1d2>
 8008e8c:	0670      	lsls	r0, r6, #25
 8008e8e:	d5fb      	bpl.n	8008e88 <_printf_i+0x1c8>
 8008e90:	8019      	strh	r1, [r3, #0]
 8008e92:	2300      	movs	r3, #0
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	4615      	mov	r5, r2
 8008e98:	e7ba      	b.n	8008e10 <_printf_i+0x150>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	1d1a      	adds	r2, r3, #4
 8008e9e:	602a      	str	r2, [r5, #0]
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	6862      	ldr	r2, [r4, #4]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f7f7 f9a2 	bl	80001f0 <memchr>
 8008eac:	b108      	cbz	r0, 8008eb2 <_printf_i+0x1f2>
 8008eae:	1b40      	subs	r0, r0, r5
 8008eb0:	6060      	str	r0, [r4, #4]
 8008eb2:	6863      	ldr	r3, [r4, #4]
 8008eb4:	6123      	str	r3, [r4, #16]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ebc:	e7a8      	b.n	8008e10 <_printf_i+0x150>
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	47d0      	blx	sl
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d0ab      	beq.n	8008e24 <_printf_i+0x164>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	079b      	lsls	r3, r3, #30
 8008ed0:	d413      	bmi.n	8008efa <_printf_i+0x23a>
 8008ed2:	68e0      	ldr	r0, [r4, #12]
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	4298      	cmp	r0, r3
 8008ed8:	bfb8      	it	lt
 8008eda:	4618      	movlt	r0, r3
 8008edc:	e7a4      	b.n	8008e28 <_printf_i+0x168>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	47d0      	blx	sl
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d09b      	beq.n	8008e24 <_printf_i+0x164>
 8008eec:	3501      	adds	r5, #1
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	9903      	ldr	r1, [sp, #12]
 8008ef2:	1a5b      	subs	r3, r3, r1
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dcf2      	bgt.n	8008ede <_printf_i+0x21e>
 8008ef8:	e7eb      	b.n	8008ed2 <_printf_i+0x212>
 8008efa:	2500      	movs	r5, #0
 8008efc:	f104 0619 	add.w	r6, r4, #25
 8008f00:	e7f5      	b.n	8008eee <_printf_i+0x22e>
 8008f02:	bf00      	nop
 8008f04:	0800b626 	.word	0x0800b626
 8008f08:	0800b637 	.word	0x0800b637

08008f0c <siprintf>:
 8008f0c:	b40e      	push	{r1, r2, r3}
 8008f0e:	b500      	push	{lr}
 8008f10:	b09c      	sub	sp, #112	; 0x70
 8008f12:	ab1d      	add	r3, sp, #116	; 0x74
 8008f14:	9002      	str	r0, [sp, #8]
 8008f16:	9006      	str	r0, [sp, #24]
 8008f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <siprintf+0x38>)
 8008f1e:	9107      	str	r1, [sp, #28]
 8008f20:	9104      	str	r1, [sp, #16]
 8008f22:	4909      	ldr	r1, [pc, #36]	; (8008f48 <siprintf+0x3c>)
 8008f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	a902      	add	r1, sp, #8
 8008f30:	f001 fbf6 	bl	800a720 <_svfiprintf_r>
 8008f34:	9b02      	ldr	r3, [sp, #8]
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	b01c      	add	sp, #112	; 0x70
 8008f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f40:	b003      	add	sp, #12
 8008f42:	4770      	bx	lr
 8008f44:	20000014 	.word	0x20000014
 8008f48:	ffff0208 	.word	0xffff0208

08008f4c <_strtol_l.constprop.0>:
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f52:	d001      	beq.n	8008f58 <_strtol_l.constprop.0+0xc>
 8008f54:	2b24      	cmp	r3, #36	; 0x24
 8008f56:	d906      	bls.n	8008f66 <_strtol_l.constprop.0+0x1a>
 8008f58:	f7ff fb2e 	bl	80085b8 <__errno>
 8008f5c:	2316      	movs	r3, #22
 8008f5e:	6003      	str	r3, [r0, #0]
 8008f60:	2000      	movs	r0, #0
 8008f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800904c <_strtol_l.constprop.0+0x100>
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	462e      	mov	r6, r5
 8008f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f72:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008f76:	f017 0708 	ands.w	r7, r7, #8
 8008f7a:	d1f7      	bne.n	8008f6c <_strtol_l.constprop.0+0x20>
 8008f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f7e:	d132      	bne.n	8008fe6 <_strtol_l.constprop.0+0x9a>
 8008f80:	782c      	ldrb	r4, [r5, #0]
 8008f82:	2701      	movs	r7, #1
 8008f84:	1cb5      	adds	r5, r6, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d05b      	beq.n	8009042 <_strtol_l.constprop.0+0xf6>
 8008f8a:	2b10      	cmp	r3, #16
 8008f8c:	d109      	bne.n	8008fa2 <_strtol_l.constprop.0+0x56>
 8008f8e:	2c30      	cmp	r4, #48	; 0x30
 8008f90:	d107      	bne.n	8008fa2 <_strtol_l.constprop.0+0x56>
 8008f92:	782c      	ldrb	r4, [r5, #0]
 8008f94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f98:	2c58      	cmp	r4, #88	; 0x58
 8008f9a:	d14d      	bne.n	8009038 <_strtol_l.constprop.0+0xec>
 8008f9c:	786c      	ldrb	r4, [r5, #1]
 8008f9e:	2310      	movs	r3, #16
 8008fa0:	3502      	adds	r5, #2
 8008fa2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008fa6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008faa:	f04f 0c00 	mov.w	ip, #0
 8008fae:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fb2:	4666      	mov	r6, ip
 8008fb4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008fbc:	f1be 0f09 	cmp.w	lr, #9
 8008fc0:	d816      	bhi.n	8008ff0 <_strtol_l.constprop.0+0xa4>
 8008fc2:	4674      	mov	r4, lr
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	dd24      	ble.n	8009012 <_strtol_l.constprop.0+0xc6>
 8008fc8:	f1bc 0f00 	cmp.w	ip, #0
 8008fcc:	db1e      	blt.n	800900c <_strtol_l.constprop.0+0xc0>
 8008fce:	45b1      	cmp	r9, r6
 8008fd0:	d31c      	bcc.n	800900c <_strtol_l.constprop.0+0xc0>
 8008fd2:	d101      	bne.n	8008fd8 <_strtol_l.constprop.0+0x8c>
 8008fd4:	45a2      	cmp	sl, r4
 8008fd6:	db19      	blt.n	800900c <_strtol_l.constprop.0+0xc0>
 8008fd8:	fb06 4603 	mla	r6, r6, r3, r4
 8008fdc:	f04f 0c01 	mov.w	ip, #1
 8008fe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fe4:	e7e8      	b.n	8008fb8 <_strtol_l.constprop.0+0x6c>
 8008fe6:	2c2b      	cmp	r4, #43	; 0x2b
 8008fe8:	bf04      	itt	eq
 8008fea:	782c      	ldrbeq	r4, [r5, #0]
 8008fec:	1cb5      	addeq	r5, r6, #2
 8008fee:	e7ca      	b.n	8008f86 <_strtol_l.constprop.0+0x3a>
 8008ff0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008ff4:	f1be 0f19 	cmp.w	lr, #25
 8008ff8:	d801      	bhi.n	8008ffe <_strtol_l.constprop.0+0xb2>
 8008ffa:	3c37      	subs	r4, #55	; 0x37
 8008ffc:	e7e2      	b.n	8008fc4 <_strtol_l.constprop.0+0x78>
 8008ffe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009002:	f1be 0f19 	cmp.w	lr, #25
 8009006:	d804      	bhi.n	8009012 <_strtol_l.constprop.0+0xc6>
 8009008:	3c57      	subs	r4, #87	; 0x57
 800900a:	e7db      	b.n	8008fc4 <_strtol_l.constprop.0+0x78>
 800900c:	f04f 3cff 	mov.w	ip, #4294967295
 8009010:	e7e6      	b.n	8008fe0 <_strtol_l.constprop.0+0x94>
 8009012:	f1bc 0f00 	cmp.w	ip, #0
 8009016:	da05      	bge.n	8009024 <_strtol_l.constprop.0+0xd8>
 8009018:	2322      	movs	r3, #34	; 0x22
 800901a:	6003      	str	r3, [r0, #0]
 800901c:	4646      	mov	r6, r8
 800901e:	b942      	cbnz	r2, 8009032 <_strtol_l.constprop.0+0xe6>
 8009020:	4630      	mov	r0, r6
 8009022:	e79e      	b.n	8008f62 <_strtol_l.constprop.0+0x16>
 8009024:	b107      	cbz	r7, 8009028 <_strtol_l.constprop.0+0xdc>
 8009026:	4276      	negs	r6, r6
 8009028:	2a00      	cmp	r2, #0
 800902a:	d0f9      	beq.n	8009020 <_strtol_l.constprop.0+0xd4>
 800902c:	f1bc 0f00 	cmp.w	ip, #0
 8009030:	d000      	beq.n	8009034 <_strtol_l.constprop.0+0xe8>
 8009032:	1e69      	subs	r1, r5, #1
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	e7f3      	b.n	8009020 <_strtol_l.constprop.0+0xd4>
 8009038:	2430      	movs	r4, #48	; 0x30
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1b1      	bne.n	8008fa2 <_strtol_l.constprop.0+0x56>
 800903e:	2308      	movs	r3, #8
 8009040:	e7af      	b.n	8008fa2 <_strtol_l.constprop.0+0x56>
 8009042:	2c30      	cmp	r4, #48	; 0x30
 8009044:	d0a5      	beq.n	8008f92 <_strtol_l.constprop.0+0x46>
 8009046:	230a      	movs	r3, #10
 8009048:	e7ab      	b.n	8008fa2 <_strtol_l.constprop.0+0x56>
 800904a:	bf00      	nop
 800904c:	0800b649 	.word	0x0800b649

08009050 <strtol>:
 8009050:	4613      	mov	r3, r2
 8009052:	460a      	mov	r2, r1
 8009054:	4601      	mov	r1, r0
 8009056:	4802      	ldr	r0, [pc, #8]	; (8009060 <strtol+0x10>)
 8009058:	6800      	ldr	r0, [r0, #0]
 800905a:	f7ff bf77 	b.w	8008f4c <_strtol_l.constprop.0>
 800905e:	bf00      	nop
 8009060:	20000014 	.word	0x20000014

08009064 <quorem>:
 8009064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	6903      	ldr	r3, [r0, #16]
 800906a:	690c      	ldr	r4, [r1, #16]
 800906c:	42a3      	cmp	r3, r4
 800906e:	4607      	mov	r7, r0
 8009070:	f2c0 8081 	blt.w	8009176 <quorem+0x112>
 8009074:	3c01      	subs	r4, #1
 8009076:	f101 0814 	add.w	r8, r1, #20
 800907a:	f100 0514 	add.w	r5, r0, #20
 800907e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908c:	3301      	adds	r3, #1
 800908e:	429a      	cmp	r2, r3
 8009090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009098:	fbb2 f6f3 	udiv	r6, r2, r3
 800909c:	d331      	bcc.n	8009102 <quorem+0x9e>
 800909e:	f04f 0e00 	mov.w	lr, #0
 80090a2:	4640      	mov	r0, r8
 80090a4:	46ac      	mov	ip, r5
 80090a6:	46f2      	mov	sl, lr
 80090a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80090ac:	b293      	uxth	r3, r2
 80090ae:	fb06 e303 	mla	r3, r6, r3, lr
 80090b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	ebaa 0303 	sub.w	r3, sl, r3
 80090bc:	f8dc a000 	ldr.w	sl, [ip]
 80090c0:	0c12      	lsrs	r2, r2, #16
 80090c2:	fa13 f38a 	uxtah	r3, r3, sl
 80090c6:	fb06 e202 	mla	r2, r6, r2, lr
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	9b00      	ldr	r3, [sp, #0]
 80090ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090d2:	b292      	uxth	r2, r2
 80090d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80090e0:	4581      	cmp	r9, r0
 80090e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090e6:	f84c 3b04 	str.w	r3, [ip], #4
 80090ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090ee:	d2db      	bcs.n	80090a8 <quorem+0x44>
 80090f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80090f4:	b92b      	cbnz	r3, 8009102 <quorem+0x9e>
 80090f6:	9b01      	ldr	r3, [sp, #4]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	429d      	cmp	r5, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	d32e      	bcc.n	800915e <quorem+0xfa>
 8009100:	613c      	str	r4, [r7, #16]
 8009102:	4638      	mov	r0, r7
 8009104:	f001 f8b8 	bl	800a278 <__mcmp>
 8009108:	2800      	cmp	r0, #0
 800910a:	db24      	blt.n	8009156 <quorem+0xf2>
 800910c:	3601      	adds	r6, #1
 800910e:	4628      	mov	r0, r5
 8009110:	f04f 0c00 	mov.w	ip, #0
 8009114:	f858 2b04 	ldr.w	r2, [r8], #4
 8009118:	f8d0 e000 	ldr.w	lr, [r0]
 800911c:	b293      	uxth	r3, r2
 800911e:	ebac 0303 	sub.w	r3, ip, r3
 8009122:	0c12      	lsrs	r2, r2, #16
 8009124:	fa13 f38e 	uxtah	r3, r3, lr
 8009128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800912c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009130:	b29b      	uxth	r3, r3
 8009132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009136:	45c1      	cmp	r9, r8
 8009138:	f840 3b04 	str.w	r3, [r0], #4
 800913c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009140:	d2e8      	bcs.n	8009114 <quorem+0xb0>
 8009142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800914a:	b922      	cbnz	r2, 8009156 <quorem+0xf2>
 800914c:	3b04      	subs	r3, #4
 800914e:	429d      	cmp	r5, r3
 8009150:	461a      	mov	r2, r3
 8009152:	d30a      	bcc.n	800916a <quorem+0x106>
 8009154:	613c      	str	r4, [r7, #16]
 8009156:	4630      	mov	r0, r6
 8009158:	b003      	add	sp, #12
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	6812      	ldr	r2, [r2, #0]
 8009160:	3b04      	subs	r3, #4
 8009162:	2a00      	cmp	r2, #0
 8009164:	d1cc      	bne.n	8009100 <quorem+0x9c>
 8009166:	3c01      	subs	r4, #1
 8009168:	e7c7      	b.n	80090fa <quorem+0x96>
 800916a:	6812      	ldr	r2, [r2, #0]
 800916c:	3b04      	subs	r3, #4
 800916e:	2a00      	cmp	r2, #0
 8009170:	d1f0      	bne.n	8009154 <quorem+0xf0>
 8009172:	3c01      	subs	r4, #1
 8009174:	e7eb      	b.n	800914e <quorem+0xea>
 8009176:	2000      	movs	r0, #0
 8009178:	e7ee      	b.n	8009158 <quorem+0xf4>
 800917a:	0000      	movs	r0, r0
 800917c:	0000      	movs	r0, r0
	...

08009180 <_dtoa_r>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	ed2d 8b04 	vpush	{d8-d9}
 8009188:	ec57 6b10 	vmov	r6, r7, d0
 800918c:	b093      	sub	sp, #76	; 0x4c
 800918e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009194:	9106      	str	r1, [sp, #24]
 8009196:	ee10 aa10 	vmov	sl, s0
 800919a:	4604      	mov	r4, r0
 800919c:	9209      	str	r2, [sp, #36]	; 0x24
 800919e:	930c      	str	r3, [sp, #48]	; 0x30
 80091a0:	46bb      	mov	fp, r7
 80091a2:	b975      	cbnz	r5, 80091c2 <_dtoa_r+0x42>
 80091a4:	2010      	movs	r0, #16
 80091a6:	f000 fddd 	bl	8009d64 <malloc>
 80091aa:	4602      	mov	r2, r0
 80091ac:	6260      	str	r0, [r4, #36]	; 0x24
 80091ae:	b920      	cbnz	r0, 80091ba <_dtoa_r+0x3a>
 80091b0:	4ba7      	ldr	r3, [pc, #668]	; (8009450 <_dtoa_r+0x2d0>)
 80091b2:	21ea      	movs	r1, #234	; 0xea
 80091b4:	48a7      	ldr	r0, [pc, #668]	; (8009454 <_dtoa_r+0x2d4>)
 80091b6:	f001 fbc3 	bl	800a940 <__assert_func>
 80091ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091be:	6005      	str	r5, [r0, #0]
 80091c0:	60c5      	str	r5, [r0, #12]
 80091c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c4:	6819      	ldr	r1, [r3, #0]
 80091c6:	b151      	cbz	r1, 80091de <_dtoa_r+0x5e>
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	604a      	str	r2, [r1, #4]
 80091cc:	2301      	movs	r3, #1
 80091ce:	4093      	lsls	r3, r2
 80091d0:	608b      	str	r3, [r1, #8]
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fe0e 	bl	8009df4 <_Bfree>
 80091d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	1e3b      	subs	r3, r7, #0
 80091e0:	bfaa      	itet	ge
 80091e2:	2300      	movge	r3, #0
 80091e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091e8:	f8c8 3000 	strge.w	r3, [r8]
 80091ec:	4b9a      	ldr	r3, [pc, #616]	; (8009458 <_dtoa_r+0x2d8>)
 80091ee:	bfbc      	itt	lt
 80091f0:	2201      	movlt	r2, #1
 80091f2:	f8c8 2000 	strlt.w	r2, [r8]
 80091f6:	ea33 030b 	bics.w	r3, r3, fp
 80091fa:	d11b      	bne.n	8009234 <_dtoa_r+0xb4>
 80091fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009208:	4333      	orrs	r3, r6
 800920a:	f000 8592 	beq.w	8009d32 <_dtoa_r+0xbb2>
 800920e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009210:	b963      	cbnz	r3, 800922c <_dtoa_r+0xac>
 8009212:	4b92      	ldr	r3, [pc, #584]	; (800945c <_dtoa_r+0x2dc>)
 8009214:	e022      	b.n	800925c <_dtoa_r+0xdc>
 8009216:	4b92      	ldr	r3, [pc, #584]	; (8009460 <_dtoa_r+0x2e0>)
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	3308      	adds	r3, #8
 800921c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	9801      	ldr	r0, [sp, #4]
 8009222:	b013      	add	sp, #76	; 0x4c
 8009224:	ecbd 8b04 	vpop	{d8-d9}
 8009228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922c:	4b8b      	ldr	r3, [pc, #556]	; (800945c <_dtoa_r+0x2dc>)
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	3303      	adds	r3, #3
 8009232:	e7f3      	b.n	800921c <_dtoa_r+0x9c>
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	4650      	mov	r0, sl
 800923a:	4659      	mov	r1, fp
 800923c:	f7f7 fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009240:	ec4b ab19 	vmov	d9, sl, fp
 8009244:	4680      	mov	r8, r0
 8009246:	b158      	cbz	r0, 8009260 <_dtoa_r+0xe0>
 8009248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800924a:	2301      	movs	r3, #1
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 856b 	beq.w	8009d2c <_dtoa_r+0xbac>
 8009256:	4883      	ldr	r0, [pc, #524]	; (8009464 <_dtoa_r+0x2e4>)
 8009258:	6018      	str	r0, [r3, #0]
 800925a:	1e43      	subs	r3, r0, #1
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	e7df      	b.n	8009220 <_dtoa_r+0xa0>
 8009260:	ec4b ab10 	vmov	d0, sl, fp
 8009264:	aa10      	add	r2, sp, #64	; 0x40
 8009266:	a911      	add	r1, sp, #68	; 0x44
 8009268:	4620      	mov	r0, r4
 800926a:	f001 f8ab 	bl	800a3c4 <__d2b>
 800926e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009272:	ee08 0a10 	vmov	s16, r0
 8009276:	2d00      	cmp	r5, #0
 8009278:	f000 8084 	beq.w	8009384 <_dtoa_r+0x204>
 800927c:	ee19 3a90 	vmov	r3, s19
 8009280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009284:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009288:	4656      	mov	r6, sl
 800928a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800928e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009292:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009296:	4b74      	ldr	r3, [pc, #464]	; (8009468 <_dtoa_r+0x2e8>)
 8009298:	2200      	movs	r2, #0
 800929a:	4630      	mov	r0, r6
 800929c:	4639      	mov	r1, r7
 800929e:	f7f6 fffb 	bl	8000298 <__aeabi_dsub>
 80092a2:	a365      	add	r3, pc, #404	; (adr r3, 8009438 <_dtoa_r+0x2b8>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f7 f9ae 	bl	8000608 <__aeabi_dmul>
 80092ac:	a364      	add	r3, pc, #400	; (adr r3, 8009440 <_dtoa_r+0x2c0>)
 80092ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b2:	f7f6 fff3 	bl	800029c <__adddf3>
 80092b6:	4606      	mov	r6, r0
 80092b8:	4628      	mov	r0, r5
 80092ba:	460f      	mov	r7, r1
 80092bc:	f7f7 f93a 	bl	8000534 <__aeabi_i2d>
 80092c0:	a361      	add	r3, pc, #388	; (adr r3, 8009448 <_dtoa_r+0x2c8>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f7 f99f 	bl	8000608 <__aeabi_dmul>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f6 ffe3 	bl	800029c <__adddf3>
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	f7f7 fc45 	bl	8000b68 <__aeabi_d2iz>
 80092de:	2200      	movs	r2, #0
 80092e0:	9000      	str	r0, [sp, #0]
 80092e2:	2300      	movs	r3, #0
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f7 fc00 	bl	8000aec <__aeabi_dcmplt>
 80092ec:	b150      	cbz	r0, 8009304 <_dtoa_r+0x184>
 80092ee:	9800      	ldr	r0, [sp, #0]
 80092f0:	f7f7 f920 	bl	8000534 <__aeabi_i2d>
 80092f4:	4632      	mov	r2, r6
 80092f6:	463b      	mov	r3, r7
 80092f8:	f7f7 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80092fc:	b910      	cbnz	r0, 8009304 <_dtoa_r+0x184>
 80092fe:	9b00      	ldr	r3, [sp, #0]
 8009300:	3b01      	subs	r3, #1
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	2b16      	cmp	r3, #22
 8009308:	d85a      	bhi.n	80093c0 <_dtoa_r+0x240>
 800930a:	9a00      	ldr	r2, [sp, #0]
 800930c:	4b57      	ldr	r3, [pc, #348]	; (800946c <_dtoa_r+0x2ec>)
 800930e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	ec51 0b19 	vmov	r0, r1, d9
 800931a:	f7f7 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800931e:	2800      	cmp	r0, #0
 8009320:	d050      	beq.n	80093c4 <_dtoa_r+0x244>
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	3b01      	subs	r3, #1
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	930b      	str	r3, [sp, #44]	; 0x2c
 800932c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800932e:	1b5d      	subs	r5, r3, r5
 8009330:	1e6b      	subs	r3, r5, #1
 8009332:	9305      	str	r3, [sp, #20]
 8009334:	bf45      	ittet	mi
 8009336:	f1c5 0301 	rsbmi	r3, r5, #1
 800933a:	9304      	strmi	r3, [sp, #16]
 800933c:	2300      	movpl	r3, #0
 800933e:	2300      	movmi	r3, #0
 8009340:	bf4c      	ite	mi
 8009342:	9305      	strmi	r3, [sp, #20]
 8009344:	9304      	strpl	r3, [sp, #16]
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	db3d      	blt.n	80093c8 <_dtoa_r+0x248>
 800934c:	9b05      	ldr	r3, [sp, #20]
 800934e:	9a00      	ldr	r2, [sp, #0]
 8009350:	920a      	str	r2, [sp, #40]	; 0x28
 8009352:	4413      	add	r3, r2
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	2300      	movs	r3, #0
 8009358:	9307      	str	r3, [sp, #28]
 800935a:	9b06      	ldr	r3, [sp, #24]
 800935c:	2b09      	cmp	r3, #9
 800935e:	f200 8089 	bhi.w	8009474 <_dtoa_r+0x2f4>
 8009362:	2b05      	cmp	r3, #5
 8009364:	bfc4      	itt	gt
 8009366:	3b04      	subgt	r3, #4
 8009368:	9306      	strgt	r3, [sp, #24]
 800936a:	9b06      	ldr	r3, [sp, #24]
 800936c:	f1a3 0302 	sub.w	r3, r3, #2
 8009370:	bfcc      	ite	gt
 8009372:	2500      	movgt	r5, #0
 8009374:	2501      	movle	r5, #1
 8009376:	2b03      	cmp	r3, #3
 8009378:	f200 8087 	bhi.w	800948a <_dtoa_r+0x30a>
 800937c:	e8df f003 	tbb	[pc, r3]
 8009380:	59383a2d 	.word	0x59383a2d
 8009384:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009388:	441d      	add	r5, r3
 800938a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800938e:	2b20      	cmp	r3, #32
 8009390:	bfc1      	itttt	gt
 8009392:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009396:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800939a:	fa0b f303 	lslgt.w	r3, fp, r3
 800939e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80093a2:	bfda      	itte	le
 80093a4:	f1c3 0320 	rsble	r3, r3, #32
 80093a8:	fa06 f003 	lslle.w	r0, r6, r3
 80093ac:	4318      	orrgt	r0, r3
 80093ae:	f7f7 f8b1 	bl	8000514 <__aeabi_ui2d>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4606      	mov	r6, r0
 80093b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093ba:	3d01      	subs	r5, #1
 80093bc:	930e      	str	r3, [sp, #56]	; 0x38
 80093be:	e76a      	b.n	8009296 <_dtoa_r+0x116>
 80093c0:	2301      	movs	r3, #1
 80093c2:	e7b2      	b.n	800932a <_dtoa_r+0x1aa>
 80093c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80093c6:	e7b1      	b.n	800932c <_dtoa_r+0x1ac>
 80093c8:	9b04      	ldr	r3, [sp, #16]
 80093ca:	9a00      	ldr	r2, [sp, #0]
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	4253      	negs	r3, r2
 80093d2:	9307      	str	r3, [sp, #28]
 80093d4:	2300      	movs	r3, #0
 80093d6:	930a      	str	r3, [sp, #40]	; 0x28
 80093d8:	e7bf      	b.n	800935a <_dtoa_r+0x1da>
 80093da:	2300      	movs	r3, #0
 80093dc:	9308      	str	r3, [sp, #32]
 80093de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dc55      	bgt.n	8009490 <_dtoa_r+0x310>
 80093e4:	2301      	movs	r3, #1
 80093e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093ea:	461a      	mov	r2, r3
 80093ec:	9209      	str	r2, [sp, #36]	; 0x24
 80093ee:	e00c      	b.n	800940a <_dtoa_r+0x28a>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e7f3      	b.n	80093dc <_dtoa_r+0x25c>
 80093f4:	2300      	movs	r3, #0
 80093f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f8:	9308      	str	r3, [sp, #32]
 80093fa:	9b00      	ldr	r3, [sp, #0]
 80093fc:	4413      	add	r3, r2
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	3301      	adds	r3, #1
 8009402:	2b01      	cmp	r3, #1
 8009404:	9303      	str	r3, [sp, #12]
 8009406:	bfb8      	it	lt
 8009408:	2301      	movlt	r3, #1
 800940a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800940c:	2200      	movs	r2, #0
 800940e:	6042      	str	r2, [r0, #4]
 8009410:	2204      	movs	r2, #4
 8009412:	f102 0614 	add.w	r6, r2, #20
 8009416:	429e      	cmp	r6, r3
 8009418:	6841      	ldr	r1, [r0, #4]
 800941a:	d93d      	bls.n	8009498 <_dtoa_r+0x318>
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fca9 	bl	8009d74 <_Balloc>
 8009422:	9001      	str	r0, [sp, #4]
 8009424:	2800      	cmp	r0, #0
 8009426:	d13b      	bne.n	80094a0 <_dtoa_r+0x320>
 8009428:	4b11      	ldr	r3, [pc, #68]	; (8009470 <_dtoa_r+0x2f0>)
 800942a:	4602      	mov	r2, r0
 800942c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009430:	e6c0      	b.n	80091b4 <_dtoa_r+0x34>
 8009432:	2301      	movs	r3, #1
 8009434:	e7df      	b.n	80093f6 <_dtoa_r+0x276>
 8009436:	bf00      	nop
 8009438:	636f4361 	.word	0x636f4361
 800943c:	3fd287a7 	.word	0x3fd287a7
 8009440:	8b60c8b3 	.word	0x8b60c8b3
 8009444:	3fc68a28 	.word	0x3fc68a28
 8009448:	509f79fb 	.word	0x509f79fb
 800944c:	3fd34413 	.word	0x3fd34413
 8009450:	0800b756 	.word	0x0800b756
 8009454:	0800b76d 	.word	0x0800b76d
 8009458:	7ff00000 	.word	0x7ff00000
 800945c:	0800b752 	.word	0x0800b752
 8009460:	0800b749 	.word	0x0800b749
 8009464:	0800b625 	.word	0x0800b625
 8009468:	3ff80000 	.word	0x3ff80000
 800946c:	0800b860 	.word	0x0800b860
 8009470:	0800b7c8 	.word	0x0800b7c8
 8009474:	2501      	movs	r5, #1
 8009476:	2300      	movs	r3, #0
 8009478:	9306      	str	r3, [sp, #24]
 800947a:	9508      	str	r5, [sp, #32]
 800947c:	f04f 33ff 	mov.w	r3, #4294967295
 8009480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009484:	2200      	movs	r2, #0
 8009486:	2312      	movs	r3, #18
 8009488:	e7b0      	b.n	80093ec <_dtoa_r+0x26c>
 800948a:	2301      	movs	r3, #1
 800948c:	9308      	str	r3, [sp, #32]
 800948e:	e7f5      	b.n	800947c <_dtoa_r+0x2fc>
 8009490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009492:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009496:	e7b8      	b.n	800940a <_dtoa_r+0x28a>
 8009498:	3101      	adds	r1, #1
 800949a:	6041      	str	r1, [r0, #4]
 800949c:	0052      	lsls	r2, r2, #1
 800949e:	e7b8      	b.n	8009412 <_dtoa_r+0x292>
 80094a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a2:	9a01      	ldr	r2, [sp, #4]
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	2b0e      	cmp	r3, #14
 80094aa:	f200 809d 	bhi.w	80095e8 <_dtoa_r+0x468>
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	f000 809a 	beq.w	80095e8 <_dtoa_r+0x468>
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	dd32      	ble.n	8009520 <_dtoa_r+0x3a0>
 80094ba:	4ab7      	ldr	r2, [pc, #732]	; (8009798 <_dtoa_r+0x618>)
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094c8:	9b00      	ldr	r3, [sp, #0]
 80094ca:	05d8      	lsls	r0, r3, #23
 80094cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80094d0:	d516      	bpl.n	8009500 <_dtoa_r+0x380>
 80094d2:	4bb2      	ldr	r3, [pc, #712]	; (800979c <_dtoa_r+0x61c>)
 80094d4:	ec51 0b19 	vmov	r0, r1, d9
 80094d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094dc:	f7f7 f9be 	bl	800085c <__aeabi_ddiv>
 80094e0:	f007 070f 	and.w	r7, r7, #15
 80094e4:	4682      	mov	sl, r0
 80094e6:	468b      	mov	fp, r1
 80094e8:	2503      	movs	r5, #3
 80094ea:	4eac      	ldr	r6, [pc, #688]	; (800979c <_dtoa_r+0x61c>)
 80094ec:	b957      	cbnz	r7, 8009504 <_dtoa_r+0x384>
 80094ee:	4642      	mov	r2, r8
 80094f0:	464b      	mov	r3, r9
 80094f2:	4650      	mov	r0, sl
 80094f4:	4659      	mov	r1, fp
 80094f6:	f7f7 f9b1 	bl	800085c <__aeabi_ddiv>
 80094fa:	4682      	mov	sl, r0
 80094fc:	468b      	mov	fp, r1
 80094fe:	e028      	b.n	8009552 <_dtoa_r+0x3d2>
 8009500:	2502      	movs	r5, #2
 8009502:	e7f2      	b.n	80094ea <_dtoa_r+0x36a>
 8009504:	07f9      	lsls	r1, r7, #31
 8009506:	d508      	bpl.n	800951a <_dtoa_r+0x39a>
 8009508:	4640      	mov	r0, r8
 800950a:	4649      	mov	r1, r9
 800950c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009510:	f7f7 f87a 	bl	8000608 <__aeabi_dmul>
 8009514:	3501      	adds	r5, #1
 8009516:	4680      	mov	r8, r0
 8009518:	4689      	mov	r9, r1
 800951a:	107f      	asrs	r7, r7, #1
 800951c:	3608      	adds	r6, #8
 800951e:	e7e5      	b.n	80094ec <_dtoa_r+0x36c>
 8009520:	f000 809b 	beq.w	800965a <_dtoa_r+0x4da>
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	4f9d      	ldr	r7, [pc, #628]	; (800979c <_dtoa_r+0x61c>)
 8009528:	425e      	negs	r6, r3
 800952a:	4b9b      	ldr	r3, [pc, #620]	; (8009798 <_dtoa_r+0x618>)
 800952c:	f006 020f 	and.w	r2, r6, #15
 8009530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	ec51 0b19 	vmov	r0, r1, d9
 800953c:	f7f7 f864 	bl	8000608 <__aeabi_dmul>
 8009540:	1136      	asrs	r6, r6, #4
 8009542:	4682      	mov	sl, r0
 8009544:	468b      	mov	fp, r1
 8009546:	2300      	movs	r3, #0
 8009548:	2502      	movs	r5, #2
 800954a:	2e00      	cmp	r6, #0
 800954c:	d17a      	bne.n	8009644 <_dtoa_r+0x4c4>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1d3      	bne.n	80094fa <_dtoa_r+0x37a>
 8009552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 8082 	beq.w	800965e <_dtoa_r+0x4de>
 800955a:	4b91      	ldr	r3, [pc, #580]	; (80097a0 <_dtoa_r+0x620>)
 800955c:	2200      	movs	r2, #0
 800955e:	4650      	mov	r0, sl
 8009560:	4659      	mov	r1, fp
 8009562:	f7f7 fac3 	bl	8000aec <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	d079      	beq.n	800965e <_dtoa_r+0x4de>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d076      	beq.n	800965e <_dtoa_r+0x4de>
 8009570:	9b02      	ldr	r3, [sp, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	dd36      	ble.n	80095e4 <_dtoa_r+0x464>
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	4650      	mov	r0, sl
 800957a:	4659      	mov	r1, fp
 800957c:	1e5f      	subs	r7, r3, #1
 800957e:	2200      	movs	r2, #0
 8009580:	4b88      	ldr	r3, [pc, #544]	; (80097a4 <_dtoa_r+0x624>)
 8009582:	f7f7 f841 	bl	8000608 <__aeabi_dmul>
 8009586:	9e02      	ldr	r6, [sp, #8]
 8009588:	4682      	mov	sl, r0
 800958a:	468b      	mov	fp, r1
 800958c:	3501      	adds	r5, #1
 800958e:	4628      	mov	r0, r5
 8009590:	f7f6 ffd0 	bl	8000534 <__aeabi_i2d>
 8009594:	4652      	mov	r2, sl
 8009596:	465b      	mov	r3, fp
 8009598:	f7f7 f836 	bl	8000608 <__aeabi_dmul>
 800959c:	4b82      	ldr	r3, [pc, #520]	; (80097a8 <_dtoa_r+0x628>)
 800959e:	2200      	movs	r2, #0
 80095a0:	f7f6 fe7c 	bl	800029c <__adddf3>
 80095a4:	46d0      	mov	r8, sl
 80095a6:	46d9      	mov	r9, fp
 80095a8:	4682      	mov	sl, r0
 80095aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	d158      	bne.n	8009664 <_dtoa_r+0x4e4>
 80095b2:	4b7e      	ldr	r3, [pc, #504]	; (80097ac <_dtoa_r+0x62c>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f6 fe6d 	bl	8000298 <__aeabi_dsub>
 80095be:	4652      	mov	r2, sl
 80095c0:	465b      	mov	r3, fp
 80095c2:	4680      	mov	r8, r0
 80095c4:	4689      	mov	r9, r1
 80095c6:	f7f7 faaf 	bl	8000b28 <__aeabi_dcmpgt>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	f040 8295 	bne.w	8009afa <_dtoa_r+0x97a>
 80095d0:	4652      	mov	r2, sl
 80095d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095d6:	4640      	mov	r0, r8
 80095d8:	4649      	mov	r1, r9
 80095da:	f7f7 fa87 	bl	8000aec <__aeabi_dcmplt>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f040 8289 	bne.w	8009af6 <_dtoa_r+0x976>
 80095e4:	ec5b ab19 	vmov	sl, fp, d9
 80095e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f2c0 8148 	blt.w	8009880 <_dtoa_r+0x700>
 80095f0:	9a00      	ldr	r2, [sp, #0]
 80095f2:	2a0e      	cmp	r2, #14
 80095f4:	f300 8144 	bgt.w	8009880 <_dtoa_r+0x700>
 80095f8:	4b67      	ldr	r3, [pc, #412]	; (8009798 <_dtoa_r+0x618>)
 80095fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	f280 80d5 	bge.w	80097b4 <_dtoa_r+0x634>
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f300 80d1 	bgt.w	80097b4 <_dtoa_r+0x634>
 8009612:	f040 826f 	bne.w	8009af4 <_dtoa_r+0x974>
 8009616:	4b65      	ldr	r3, [pc, #404]	; (80097ac <_dtoa_r+0x62c>)
 8009618:	2200      	movs	r2, #0
 800961a:	4640      	mov	r0, r8
 800961c:	4649      	mov	r1, r9
 800961e:	f7f6 fff3 	bl	8000608 <__aeabi_dmul>
 8009622:	4652      	mov	r2, sl
 8009624:	465b      	mov	r3, fp
 8009626:	f7f7 fa75 	bl	8000b14 <__aeabi_dcmpge>
 800962a:	9e03      	ldr	r6, [sp, #12]
 800962c:	4637      	mov	r7, r6
 800962e:	2800      	cmp	r0, #0
 8009630:	f040 8245 	bne.w	8009abe <_dtoa_r+0x93e>
 8009634:	9d01      	ldr	r5, [sp, #4]
 8009636:	2331      	movs	r3, #49	; 0x31
 8009638:	f805 3b01 	strb.w	r3, [r5], #1
 800963c:	9b00      	ldr	r3, [sp, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	e240      	b.n	8009ac6 <_dtoa_r+0x946>
 8009644:	07f2      	lsls	r2, r6, #31
 8009646:	d505      	bpl.n	8009654 <_dtoa_r+0x4d4>
 8009648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800964c:	f7f6 ffdc 	bl	8000608 <__aeabi_dmul>
 8009650:	3501      	adds	r5, #1
 8009652:	2301      	movs	r3, #1
 8009654:	1076      	asrs	r6, r6, #1
 8009656:	3708      	adds	r7, #8
 8009658:	e777      	b.n	800954a <_dtoa_r+0x3ca>
 800965a:	2502      	movs	r5, #2
 800965c:	e779      	b.n	8009552 <_dtoa_r+0x3d2>
 800965e:	9f00      	ldr	r7, [sp, #0]
 8009660:	9e03      	ldr	r6, [sp, #12]
 8009662:	e794      	b.n	800958e <_dtoa_r+0x40e>
 8009664:	9901      	ldr	r1, [sp, #4]
 8009666:	4b4c      	ldr	r3, [pc, #304]	; (8009798 <_dtoa_r+0x618>)
 8009668:	4431      	add	r1, r6
 800966a:	910d      	str	r1, [sp, #52]	; 0x34
 800966c:	9908      	ldr	r1, [sp, #32]
 800966e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009676:	2900      	cmp	r1, #0
 8009678:	d043      	beq.n	8009702 <_dtoa_r+0x582>
 800967a:	494d      	ldr	r1, [pc, #308]	; (80097b0 <_dtoa_r+0x630>)
 800967c:	2000      	movs	r0, #0
 800967e:	f7f7 f8ed 	bl	800085c <__aeabi_ddiv>
 8009682:	4652      	mov	r2, sl
 8009684:	465b      	mov	r3, fp
 8009686:	f7f6 fe07 	bl	8000298 <__aeabi_dsub>
 800968a:	9d01      	ldr	r5, [sp, #4]
 800968c:	4682      	mov	sl, r0
 800968e:	468b      	mov	fp, r1
 8009690:	4649      	mov	r1, r9
 8009692:	4640      	mov	r0, r8
 8009694:	f7f7 fa68 	bl	8000b68 <__aeabi_d2iz>
 8009698:	4606      	mov	r6, r0
 800969a:	f7f6 ff4b 	bl	8000534 <__aeabi_i2d>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4640      	mov	r0, r8
 80096a4:	4649      	mov	r1, r9
 80096a6:	f7f6 fdf7 	bl	8000298 <__aeabi_dsub>
 80096aa:	3630      	adds	r6, #48	; 0x30
 80096ac:	f805 6b01 	strb.w	r6, [r5], #1
 80096b0:	4652      	mov	r2, sl
 80096b2:	465b      	mov	r3, fp
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	f7f7 fa18 	bl	8000aec <__aeabi_dcmplt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	d163      	bne.n	8009788 <_dtoa_r+0x608>
 80096c0:	4642      	mov	r2, r8
 80096c2:	464b      	mov	r3, r9
 80096c4:	4936      	ldr	r1, [pc, #216]	; (80097a0 <_dtoa_r+0x620>)
 80096c6:	2000      	movs	r0, #0
 80096c8:	f7f6 fde6 	bl	8000298 <__aeabi_dsub>
 80096cc:	4652      	mov	r2, sl
 80096ce:	465b      	mov	r3, fp
 80096d0:	f7f7 fa0c 	bl	8000aec <__aeabi_dcmplt>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	f040 80b5 	bne.w	8009844 <_dtoa_r+0x6c4>
 80096da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096dc:	429d      	cmp	r5, r3
 80096de:	d081      	beq.n	80095e4 <_dtoa_r+0x464>
 80096e0:	4b30      	ldr	r3, [pc, #192]	; (80097a4 <_dtoa_r+0x624>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	4650      	mov	r0, sl
 80096e6:	4659      	mov	r1, fp
 80096e8:	f7f6 ff8e 	bl	8000608 <__aeabi_dmul>
 80096ec:	4b2d      	ldr	r3, [pc, #180]	; (80097a4 <_dtoa_r+0x624>)
 80096ee:	4682      	mov	sl, r0
 80096f0:	468b      	mov	fp, r1
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	2200      	movs	r2, #0
 80096f8:	f7f6 ff86 	bl	8000608 <__aeabi_dmul>
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	e7c6      	b.n	8009690 <_dtoa_r+0x510>
 8009702:	4650      	mov	r0, sl
 8009704:	4659      	mov	r1, fp
 8009706:	f7f6 ff7f 	bl	8000608 <__aeabi_dmul>
 800970a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800970c:	9d01      	ldr	r5, [sp, #4]
 800970e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009710:	4682      	mov	sl, r0
 8009712:	468b      	mov	fp, r1
 8009714:	4649      	mov	r1, r9
 8009716:	4640      	mov	r0, r8
 8009718:	f7f7 fa26 	bl	8000b68 <__aeabi_d2iz>
 800971c:	4606      	mov	r6, r0
 800971e:	f7f6 ff09 	bl	8000534 <__aeabi_i2d>
 8009722:	3630      	adds	r6, #48	; 0x30
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4640      	mov	r0, r8
 800972a:	4649      	mov	r1, r9
 800972c:	f7f6 fdb4 	bl	8000298 <__aeabi_dsub>
 8009730:	f805 6b01 	strb.w	r6, [r5], #1
 8009734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009736:	429d      	cmp	r5, r3
 8009738:	4680      	mov	r8, r0
 800973a:	4689      	mov	r9, r1
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	d124      	bne.n	800978c <_dtoa_r+0x60c>
 8009742:	4b1b      	ldr	r3, [pc, #108]	; (80097b0 <_dtoa_r+0x630>)
 8009744:	4650      	mov	r0, sl
 8009746:	4659      	mov	r1, fp
 8009748:	f7f6 fda8 	bl	800029c <__adddf3>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f7 f9e8 	bl	8000b28 <__aeabi_dcmpgt>
 8009758:	2800      	cmp	r0, #0
 800975a:	d173      	bne.n	8009844 <_dtoa_r+0x6c4>
 800975c:	4652      	mov	r2, sl
 800975e:	465b      	mov	r3, fp
 8009760:	4913      	ldr	r1, [pc, #76]	; (80097b0 <_dtoa_r+0x630>)
 8009762:	2000      	movs	r0, #0
 8009764:	f7f6 fd98 	bl	8000298 <__aeabi_dsub>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4640      	mov	r0, r8
 800976e:	4649      	mov	r1, r9
 8009770:	f7f7 f9bc 	bl	8000aec <__aeabi_dcmplt>
 8009774:	2800      	cmp	r0, #0
 8009776:	f43f af35 	beq.w	80095e4 <_dtoa_r+0x464>
 800977a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800977c:	1e6b      	subs	r3, r5, #1
 800977e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009780:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009784:	2b30      	cmp	r3, #48	; 0x30
 8009786:	d0f8      	beq.n	800977a <_dtoa_r+0x5fa>
 8009788:	9700      	str	r7, [sp, #0]
 800978a:	e049      	b.n	8009820 <_dtoa_r+0x6a0>
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <_dtoa_r+0x624>)
 800978e:	f7f6 ff3b 	bl	8000608 <__aeabi_dmul>
 8009792:	4680      	mov	r8, r0
 8009794:	4689      	mov	r9, r1
 8009796:	e7bd      	b.n	8009714 <_dtoa_r+0x594>
 8009798:	0800b860 	.word	0x0800b860
 800979c:	0800b838 	.word	0x0800b838
 80097a0:	3ff00000 	.word	0x3ff00000
 80097a4:	40240000 	.word	0x40240000
 80097a8:	401c0000 	.word	0x401c0000
 80097ac:	40140000 	.word	0x40140000
 80097b0:	3fe00000 	.word	0x3fe00000
 80097b4:	9d01      	ldr	r5, [sp, #4]
 80097b6:	4656      	mov	r6, sl
 80097b8:	465f      	mov	r7, fp
 80097ba:	4642      	mov	r2, r8
 80097bc:	464b      	mov	r3, r9
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f7 f84b 	bl	800085c <__aeabi_ddiv>
 80097c6:	f7f7 f9cf 	bl	8000b68 <__aeabi_d2iz>
 80097ca:	4682      	mov	sl, r0
 80097cc:	f7f6 feb2 	bl	8000534 <__aeabi_i2d>
 80097d0:	4642      	mov	r2, r8
 80097d2:	464b      	mov	r3, r9
 80097d4:	f7f6 ff18 	bl	8000608 <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4630      	mov	r0, r6
 80097de:	4639      	mov	r1, r7
 80097e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097e4:	f7f6 fd58 	bl	8000298 <__aeabi_dsub>
 80097e8:	f805 6b01 	strb.w	r6, [r5], #1
 80097ec:	9e01      	ldr	r6, [sp, #4]
 80097ee:	9f03      	ldr	r7, [sp, #12]
 80097f0:	1bae      	subs	r6, r5, r6
 80097f2:	42b7      	cmp	r7, r6
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	d135      	bne.n	8009866 <_dtoa_r+0x6e6>
 80097fa:	f7f6 fd4f 	bl	800029c <__adddf3>
 80097fe:	4642      	mov	r2, r8
 8009800:	464b      	mov	r3, r9
 8009802:	4606      	mov	r6, r0
 8009804:	460f      	mov	r7, r1
 8009806:	f7f7 f98f 	bl	8000b28 <__aeabi_dcmpgt>
 800980a:	b9d0      	cbnz	r0, 8009842 <_dtoa_r+0x6c2>
 800980c:	4642      	mov	r2, r8
 800980e:	464b      	mov	r3, r9
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 8009818:	b110      	cbz	r0, 8009820 <_dtoa_r+0x6a0>
 800981a:	f01a 0f01 	tst.w	sl, #1
 800981e:	d110      	bne.n	8009842 <_dtoa_r+0x6c2>
 8009820:	4620      	mov	r0, r4
 8009822:	ee18 1a10 	vmov	r1, s16
 8009826:	f000 fae5 	bl	8009df4 <_Bfree>
 800982a:	2300      	movs	r3, #0
 800982c:	9800      	ldr	r0, [sp, #0]
 800982e:	702b      	strb	r3, [r5, #0]
 8009830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009832:	3001      	adds	r0, #1
 8009834:	6018      	str	r0, [r3, #0]
 8009836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009838:	2b00      	cmp	r3, #0
 800983a:	f43f acf1 	beq.w	8009220 <_dtoa_r+0xa0>
 800983e:	601d      	str	r5, [r3, #0]
 8009840:	e4ee      	b.n	8009220 <_dtoa_r+0xa0>
 8009842:	9f00      	ldr	r7, [sp, #0]
 8009844:	462b      	mov	r3, r5
 8009846:	461d      	mov	r5, r3
 8009848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800984c:	2a39      	cmp	r2, #57	; 0x39
 800984e:	d106      	bne.n	800985e <_dtoa_r+0x6de>
 8009850:	9a01      	ldr	r2, [sp, #4]
 8009852:	429a      	cmp	r2, r3
 8009854:	d1f7      	bne.n	8009846 <_dtoa_r+0x6c6>
 8009856:	9901      	ldr	r1, [sp, #4]
 8009858:	2230      	movs	r2, #48	; 0x30
 800985a:	3701      	adds	r7, #1
 800985c:	700a      	strb	r2, [r1, #0]
 800985e:	781a      	ldrb	r2, [r3, #0]
 8009860:	3201      	adds	r2, #1
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	e790      	b.n	8009788 <_dtoa_r+0x608>
 8009866:	4ba6      	ldr	r3, [pc, #664]	; (8009b00 <_dtoa_r+0x980>)
 8009868:	2200      	movs	r2, #0
 800986a:	f7f6 fecd 	bl	8000608 <__aeabi_dmul>
 800986e:	2200      	movs	r2, #0
 8009870:	2300      	movs	r3, #0
 8009872:	4606      	mov	r6, r0
 8009874:	460f      	mov	r7, r1
 8009876:	f7f7 f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 800987a:	2800      	cmp	r0, #0
 800987c:	d09d      	beq.n	80097ba <_dtoa_r+0x63a>
 800987e:	e7cf      	b.n	8009820 <_dtoa_r+0x6a0>
 8009880:	9a08      	ldr	r2, [sp, #32]
 8009882:	2a00      	cmp	r2, #0
 8009884:	f000 80d7 	beq.w	8009a36 <_dtoa_r+0x8b6>
 8009888:	9a06      	ldr	r2, [sp, #24]
 800988a:	2a01      	cmp	r2, #1
 800988c:	f300 80ba 	bgt.w	8009a04 <_dtoa_r+0x884>
 8009890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009892:	2a00      	cmp	r2, #0
 8009894:	f000 80b2 	beq.w	80099fc <_dtoa_r+0x87c>
 8009898:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800989c:	9e07      	ldr	r6, [sp, #28]
 800989e:	9d04      	ldr	r5, [sp, #16]
 80098a0:	9a04      	ldr	r2, [sp, #16]
 80098a2:	441a      	add	r2, r3
 80098a4:	9204      	str	r2, [sp, #16]
 80098a6:	9a05      	ldr	r2, [sp, #20]
 80098a8:	2101      	movs	r1, #1
 80098aa:	441a      	add	r2, r3
 80098ac:	4620      	mov	r0, r4
 80098ae:	9205      	str	r2, [sp, #20]
 80098b0:	f000 fb58 	bl	8009f64 <__i2b>
 80098b4:	4607      	mov	r7, r0
 80098b6:	2d00      	cmp	r5, #0
 80098b8:	dd0c      	ble.n	80098d4 <_dtoa_r+0x754>
 80098ba:	9b05      	ldr	r3, [sp, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd09      	ble.n	80098d4 <_dtoa_r+0x754>
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	9a04      	ldr	r2, [sp, #16]
 80098c4:	bfa8      	it	ge
 80098c6:	462b      	movge	r3, r5
 80098c8:	1ad2      	subs	r2, r2, r3
 80098ca:	9204      	str	r2, [sp, #16]
 80098cc:	9a05      	ldr	r2, [sp, #20]
 80098ce:	1aed      	subs	r5, r5, r3
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	b31b      	cbz	r3, 8009920 <_dtoa_r+0x7a0>
 80098d8:	9b08      	ldr	r3, [sp, #32]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80af 	beq.w	8009a3e <_dtoa_r+0x8be>
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	dd13      	ble.n	800990c <_dtoa_r+0x78c>
 80098e4:	4639      	mov	r1, r7
 80098e6:	4632      	mov	r2, r6
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 fbfb 	bl	800a0e4 <__pow5mult>
 80098ee:	ee18 2a10 	vmov	r2, s16
 80098f2:	4601      	mov	r1, r0
 80098f4:	4607      	mov	r7, r0
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fb4a 	bl	8009f90 <__multiply>
 80098fc:	ee18 1a10 	vmov	r1, s16
 8009900:	4680      	mov	r8, r0
 8009902:	4620      	mov	r0, r4
 8009904:	f000 fa76 	bl	8009df4 <_Bfree>
 8009908:	ee08 8a10 	vmov	s16, r8
 800990c:	9b07      	ldr	r3, [sp, #28]
 800990e:	1b9a      	subs	r2, r3, r6
 8009910:	d006      	beq.n	8009920 <_dtoa_r+0x7a0>
 8009912:	ee18 1a10 	vmov	r1, s16
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fbe4 	bl	800a0e4 <__pow5mult>
 800991c:	ee08 0a10 	vmov	s16, r0
 8009920:	2101      	movs	r1, #1
 8009922:	4620      	mov	r0, r4
 8009924:	f000 fb1e 	bl	8009f64 <__i2b>
 8009928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992a:	2b00      	cmp	r3, #0
 800992c:	4606      	mov	r6, r0
 800992e:	f340 8088 	ble.w	8009a42 <_dtoa_r+0x8c2>
 8009932:	461a      	mov	r2, r3
 8009934:	4601      	mov	r1, r0
 8009936:	4620      	mov	r0, r4
 8009938:	f000 fbd4 	bl	800a0e4 <__pow5mult>
 800993c:	9b06      	ldr	r3, [sp, #24]
 800993e:	2b01      	cmp	r3, #1
 8009940:	4606      	mov	r6, r0
 8009942:	f340 8081 	ble.w	8009a48 <_dtoa_r+0x8c8>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	6933      	ldr	r3, [r6, #16]
 800994c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009950:	6918      	ldr	r0, [r3, #16]
 8009952:	f000 fab7 	bl	8009ec4 <__hi0bits>
 8009956:	f1c0 0020 	rsb	r0, r0, #32
 800995a:	9b05      	ldr	r3, [sp, #20]
 800995c:	4418      	add	r0, r3
 800995e:	f010 001f 	ands.w	r0, r0, #31
 8009962:	f000 8092 	beq.w	8009a8a <_dtoa_r+0x90a>
 8009966:	f1c0 0320 	rsb	r3, r0, #32
 800996a:	2b04      	cmp	r3, #4
 800996c:	f340 808a 	ble.w	8009a84 <_dtoa_r+0x904>
 8009970:	f1c0 001c 	rsb	r0, r0, #28
 8009974:	9b04      	ldr	r3, [sp, #16]
 8009976:	4403      	add	r3, r0
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	9b05      	ldr	r3, [sp, #20]
 800997c:	4403      	add	r3, r0
 800997e:	4405      	add	r5, r0
 8009980:	9305      	str	r3, [sp, #20]
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd07      	ble.n	8009998 <_dtoa_r+0x818>
 8009988:	ee18 1a10 	vmov	r1, s16
 800998c:	461a      	mov	r2, r3
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fc02 	bl	800a198 <__lshift>
 8009994:	ee08 0a10 	vmov	s16, r0
 8009998:	9b05      	ldr	r3, [sp, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	dd05      	ble.n	80099aa <_dtoa_r+0x82a>
 800999e:	4631      	mov	r1, r6
 80099a0:	461a      	mov	r2, r3
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fbf8 	bl	800a198 <__lshift>
 80099a8:	4606      	mov	r6, r0
 80099aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d06e      	beq.n	8009a8e <_dtoa_r+0x90e>
 80099b0:	ee18 0a10 	vmov	r0, s16
 80099b4:	4631      	mov	r1, r6
 80099b6:	f000 fc5f 	bl	800a278 <__mcmp>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	da67      	bge.n	8009a8e <_dtoa_r+0x90e>
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	ee18 1a10 	vmov	r1, s16
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	220a      	movs	r2, #10
 80099ca:	2300      	movs	r3, #0
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fa33 	bl	8009e38 <__multadd>
 80099d2:	9b08      	ldr	r3, [sp, #32]
 80099d4:	ee08 0a10 	vmov	s16, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 81b1 	beq.w	8009d40 <_dtoa_r+0xbc0>
 80099de:	2300      	movs	r3, #0
 80099e0:	4639      	mov	r1, r7
 80099e2:	220a      	movs	r2, #10
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 fa27 	bl	8009e38 <__multadd>
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	4607      	mov	r7, r0
 80099f0:	f300 808e 	bgt.w	8009b10 <_dtoa_r+0x990>
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	dc51      	bgt.n	8009a9e <_dtoa_r+0x91e>
 80099fa:	e089      	b.n	8009b10 <_dtoa_r+0x990>
 80099fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a02:	e74b      	b.n	800989c <_dtoa_r+0x71c>
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	1e5e      	subs	r6, r3, #1
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	42b3      	cmp	r3, r6
 8009a0c:	bfbf      	itttt	lt
 8009a0e:	9b07      	ldrlt	r3, [sp, #28]
 8009a10:	9607      	strlt	r6, [sp, #28]
 8009a12:	1af2      	sublt	r2, r6, r3
 8009a14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a16:	bfb6      	itet	lt
 8009a18:	189b      	addlt	r3, r3, r2
 8009a1a:	1b9e      	subge	r6, r3, r6
 8009a1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	bfb8      	it	lt
 8009a22:	2600      	movlt	r6, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfb7      	itett	lt
 8009a28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009a30:	1a9d      	sublt	r5, r3, r2
 8009a32:	2300      	movlt	r3, #0
 8009a34:	e734      	b.n	80098a0 <_dtoa_r+0x720>
 8009a36:	9e07      	ldr	r6, [sp, #28]
 8009a38:	9d04      	ldr	r5, [sp, #16]
 8009a3a:	9f08      	ldr	r7, [sp, #32]
 8009a3c:	e73b      	b.n	80098b6 <_dtoa_r+0x736>
 8009a3e:	9a07      	ldr	r2, [sp, #28]
 8009a40:	e767      	b.n	8009912 <_dtoa_r+0x792>
 8009a42:	9b06      	ldr	r3, [sp, #24]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	dc18      	bgt.n	8009a7a <_dtoa_r+0x8fa>
 8009a48:	f1ba 0f00 	cmp.w	sl, #0
 8009a4c:	d115      	bne.n	8009a7a <_dtoa_r+0x8fa>
 8009a4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a52:	b993      	cbnz	r3, 8009a7a <_dtoa_r+0x8fa>
 8009a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a58:	0d1b      	lsrs	r3, r3, #20
 8009a5a:	051b      	lsls	r3, r3, #20
 8009a5c:	b183      	cbz	r3, 8009a80 <_dtoa_r+0x900>
 8009a5e:	9b04      	ldr	r3, [sp, #16]
 8009a60:	3301      	adds	r3, #1
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	9b05      	ldr	r3, [sp, #20]
 8009a66:	3301      	adds	r3, #1
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	f04f 0801 	mov.w	r8, #1
 8009a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f47f af6a 	bne.w	800994a <_dtoa_r+0x7ca>
 8009a76:	2001      	movs	r0, #1
 8009a78:	e76f      	b.n	800995a <_dtoa_r+0x7da>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	e7f6      	b.n	8009a6e <_dtoa_r+0x8ee>
 8009a80:	4698      	mov	r8, r3
 8009a82:	e7f4      	b.n	8009a6e <_dtoa_r+0x8ee>
 8009a84:	f43f af7d 	beq.w	8009982 <_dtoa_r+0x802>
 8009a88:	4618      	mov	r0, r3
 8009a8a:	301c      	adds	r0, #28
 8009a8c:	e772      	b.n	8009974 <_dtoa_r+0x7f4>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc37      	bgt.n	8009b04 <_dtoa_r+0x984>
 8009a94:	9b06      	ldr	r3, [sp, #24]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	dd34      	ble.n	8009b04 <_dtoa_r+0x984>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	9302      	str	r3, [sp, #8]
 8009a9e:	9b02      	ldr	r3, [sp, #8]
 8009aa0:	b96b      	cbnz	r3, 8009abe <_dtoa_r+0x93e>
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 f9c6 	bl	8009e38 <__multadd>
 8009aac:	4601      	mov	r1, r0
 8009aae:	4606      	mov	r6, r0
 8009ab0:	ee18 0a10 	vmov	r0, s16
 8009ab4:	f000 fbe0 	bl	800a278 <__mcmp>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f73f adbb 	bgt.w	8009634 <_dtoa_r+0x4b4>
 8009abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac0:	9d01      	ldr	r5, [sp, #4]
 8009ac2:	43db      	mvns	r3, r3
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	f04f 0800 	mov.w	r8, #0
 8009aca:	4631      	mov	r1, r6
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 f991 	bl	8009df4 <_Bfree>
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	f43f aea4 	beq.w	8009820 <_dtoa_r+0x6a0>
 8009ad8:	f1b8 0f00 	cmp.w	r8, #0
 8009adc:	d005      	beq.n	8009aea <_dtoa_r+0x96a>
 8009ade:	45b8      	cmp	r8, r7
 8009ae0:	d003      	beq.n	8009aea <_dtoa_r+0x96a>
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 f985 	bl	8009df4 <_Bfree>
 8009aea:	4639      	mov	r1, r7
 8009aec:	4620      	mov	r0, r4
 8009aee:	f000 f981 	bl	8009df4 <_Bfree>
 8009af2:	e695      	b.n	8009820 <_dtoa_r+0x6a0>
 8009af4:	2600      	movs	r6, #0
 8009af6:	4637      	mov	r7, r6
 8009af8:	e7e1      	b.n	8009abe <_dtoa_r+0x93e>
 8009afa:	9700      	str	r7, [sp, #0]
 8009afc:	4637      	mov	r7, r6
 8009afe:	e599      	b.n	8009634 <_dtoa_r+0x4b4>
 8009b00:	40240000 	.word	0x40240000
 8009b04:	9b08      	ldr	r3, [sp, #32]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80ca 	beq.w	8009ca0 <_dtoa_r+0xb20>
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	9302      	str	r3, [sp, #8]
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	dd05      	ble.n	8009b20 <_dtoa_r+0x9a0>
 8009b14:	4639      	mov	r1, r7
 8009b16:	462a      	mov	r2, r5
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f000 fb3d 	bl	800a198 <__lshift>
 8009b1e:	4607      	mov	r7, r0
 8009b20:	f1b8 0f00 	cmp.w	r8, #0
 8009b24:	d05b      	beq.n	8009bde <_dtoa_r+0xa5e>
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 f923 	bl	8009d74 <_Balloc>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b928      	cbnz	r0, 8009b3e <_dtoa_r+0x9be>
 8009b32:	4b87      	ldr	r3, [pc, #540]	; (8009d50 <_dtoa_r+0xbd0>)
 8009b34:	4602      	mov	r2, r0
 8009b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b3a:	f7ff bb3b 	b.w	80091b4 <_dtoa_r+0x34>
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	3202      	adds	r2, #2
 8009b42:	0092      	lsls	r2, r2, #2
 8009b44:	f107 010c 	add.w	r1, r7, #12
 8009b48:	300c      	adds	r0, #12
 8009b4a:	f7fe fd5f 	bl	800860c <memcpy>
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4629      	mov	r1, r5
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fb20 	bl	800a198 <__lshift>
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	f103 0901 	add.w	r9, r3, #1
 8009b5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b62:	4413      	add	r3, r2
 8009b64:	9305      	str	r3, [sp, #20]
 8009b66:	f00a 0301 	and.w	r3, sl, #1
 8009b6a:	46b8      	mov	r8, r7
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	4607      	mov	r7, r0
 8009b70:	4631      	mov	r1, r6
 8009b72:	ee18 0a10 	vmov	r0, s16
 8009b76:	f7ff fa75 	bl	8009064 <quorem>
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	9002      	str	r0, [sp, #8]
 8009b7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b82:	ee18 0a10 	vmov	r0, s16
 8009b86:	f000 fb77 	bl	800a278 <__mcmp>
 8009b8a:	463a      	mov	r2, r7
 8009b8c:	9003      	str	r0, [sp, #12]
 8009b8e:	4631      	mov	r1, r6
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fb8d 	bl	800a2b0 <__mdiff>
 8009b96:	68c2      	ldr	r2, [r0, #12]
 8009b98:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	bb02      	cbnz	r2, 8009be2 <_dtoa_r+0xa62>
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	ee18 0a10 	vmov	r0, s16
 8009ba6:	f000 fb67 	bl	800a278 <__mcmp>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4629      	mov	r1, r5
 8009bae:	4620      	mov	r0, r4
 8009bb0:	9207      	str	r2, [sp, #28]
 8009bb2:	f000 f91f 	bl	8009df4 <_Bfree>
 8009bb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009bba:	ea43 0102 	orr.w	r1, r3, r2
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	430b      	orrs	r3, r1
 8009bc2:	464d      	mov	r5, r9
 8009bc4:	d10f      	bne.n	8009be6 <_dtoa_r+0xa66>
 8009bc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bca:	d02a      	beq.n	8009c22 <_dtoa_r+0xaa2>
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd02      	ble.n	8009bd8 <_dtoa_r+0xa58>
 8009bd2:	9b02      	ldr	r3, [sp, #8]
 8009bd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009bd8:	f88b a000 	strb.w	sl, [fp]
 8009bdc:	e775      	b.n	8009aca <_dtoa_r+0x94a>
 8009bde:	4638      	mov	r0, r7
 8009be0:	e7ba      	b.n	8009b58 <_dtoa_r+0x9d8>
 8009be2:	2201      	movs	r2, #1
 8009be4:	e7e2      	b.n	8009bac <_dtoa_r+0xa2c>
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	db04      	blt.n	8009bf6 <_dtoa_r+0xa76>
 8009bec:	9906      	ldr	r1, [sp, #24]
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	9904      	ldr	r1, [sp, #16]
 8009bf2:	430b      	orrs	r3, r1
 8009bf4:	d122      	bne.n	8009c3c <_dtoa_r+0xabc>
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	ddee      	ble.n	8009bd8 <_dtoa_r+0xa58>
 8009bfa:	ee18 1a10 	vmov	r1, s16
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fac9 	bl	800a198 <__lshift>
 8009c06:	4631      	mov	r1, r6
 8009c08:	ee08 0a10 	vmov	s16, r0
 8009c0c:	f000 fb34 	bl	800a278 <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	dc03      	bgt.n	8009c1c <_dtoa_r+0xa9c>
 8009c14:	d1e0      	bne.n	8009bd8 <_dtoa_r+0xa58>
 8009c16:	f01a 0f01 	tst.w	sl, #1
 8009c1a:	d0dd      	beq.n	8009bd8 <_dtoa_r+0xa58>
 8009c1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c20:	d1d7      	bne.n	8009bd2 <_dtoa_r+0xa52>
 8009c22:	2339      	movs	r3, #57	; 0x39
 8009c24:	f88b 3000 	strb.w	r3, [fp]
 8009c28:	462b      	mov	r3, r5
 8009c2a:	461d      	mov	r5, r3
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c32:	2a39      	cmp	r2, #57	; 0x39
 8009c34:	d071      	beq.n	8009d1a <_dtoa_r+0xb9a>
 8009c36:	3201      	adds	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
 8009c3a:	e746      	b.n	8009aca <_dtoa_r+0x94a>
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	dd07      	ble.n	8009c50 <_dtoa_r+0xad0>
 8009c40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c44:	d0ed      	beq.n	8009c22 <_dtoa_r+0xaa2>
 8009c46:	f10a 0301 	add.w	r3, sl, #1
 8009c4a:	f88b 3000 	strb.w	r3, [fp]
 8009c4e:	e73c      	b.n	8009aca <_dtoa_r+0x94a>
 8009c50:	9b05      	ldr	r3, [sp, #20]
 8009c52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c56:	4599      	cmp	r9, r3
 8009c58:	d047      	beq.n	8009cea <_dtoa_r+0xb6a>
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	2300      	movs	r3, #0
 8009c60:	220a      	movs	r2, #10
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 f8e8 	bl	8009e38 <__multadd>
 8009c68:	45b8      	cmp	r8, r7
 8009c6a:	ee08 0a10 	vmov	s16, r0
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	f04f 020a 	mov.w	r2, #10
 8009c76:	4641      	mov	r1, r8
 8009c78:	4620      	mov	r0, r4
 8009c7a:	d106      	bne.n	8009c8a <_dtoa_r+0xb0a>
 8009c7c:	f000 f8dc 	bl	8009e38 <__multadd>
 8009c80:	4680      	mov	r8, r0
 8009c82:	4607      	mov	r7, r0
 8009c84:	f109 0901 	add.w	r9, r9, #1
 8009c88:	e772      	b.n	8009b70 <_dtoa_r+0x9f0>
 8009c8a:	f000 f8d5 	bl	8009e38 <__multadd>
 8009c8e:	4639      	mov	r1, r7
 8009c90:	4680      	mov	r8, r0
 8009c92:	2300      	movs	r3, #0
 8009c94:	220a      	movs	r2, #10
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 f8ce 	bl	8009e38 <__multadd>
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	e7f1      	b.n	8009c84 <_dtoa_r+0xb04>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	9302      	str	r3, [sp, #8]
 8009ca4:	9d01      	ldr	r5, [sp, #4]
 8009ca6:	ee18 0a10 	vmov	r0, s16
 8009caa:	4631      	mov	r1, r6
 8009cac:	f7ff f9da 	bl	8009064 <quorem>
 8009cb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	f805 ab01 	strb.w	sl, [r5], #1
 8009cba:	1aea      	subs	r2, r5, r3
 8009cbc:	9b02      	ldr	r3, [sp, #8]
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	dd09      	ble.n	8009cd6 <_dtoa_r+0xb56>
 8009cc2:	ee18 1a10 	vmov	r1, s16
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	220a      	movs	r2, #10
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 f8b4 	bl	8009e38 <__multadd>
 8009cd0:	ee08 0a10 	vmov	s16, r0
 8009cd4:	e7e7      	b.n	8009ca6 <_dtoa_r+0xb26>
 8009cd6:	9b02      	ldr	r3, [sp, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bfc8      	it	gt
 8009cdc:	461d      	movgt	r5, r3
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	bfd8      	it	le
 8009ce2:	2501      	movle	r5, #1
 8009ce4:	441d      	add	r5, r3
 8009ce6:	f04f 0800 	mov.w	r8, #0
 8009cea:	ee18 1a10 	vmov	r1, s16
 8009cee:	2201      	movs	r2, #1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fa51 	bl	800a198 <__lshift>
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	ee08 0a10 	vmov	s16, r0
 8009cfc:	f000 fabc 	bl	800a278 <__mcmp>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	dc91      	bgt.n	8009c28 <_dtoa_r+0xaa8>
 8009d04:	d102      	bne.n	8009d0c <_dtoa_r+0xb8c>
 8009d06:	f01a 0f01 	tst.w	sl, #1
 8009d0a:	d18d      	bne.n	8009c28 <_dtoa_r+0xaa8>
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	461d      	mov	r5, r3
 8009d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d14:	2a30      	cmp	r2, #48	; 0x30
 8009d16:	d0fa      	beq.n	8009d0e <_dtoa_r+0xb8e>
 8009d18:	e6d7      	b.n	8009aca <_dtoa_r+0x94a>
 8009d1a:	9a01      	ldr	r2, [sp, #4]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d184      	bne.n	8009c2a <_dtoa_r+0xaaa>
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	2331      	movs	r3, #49	; 0x31
 8009d28:	7013      	strb	r3, [r2, #0]
 8009d2a:	e6ce      	b.n	8009aca <_dtoa_r+0x94a>
 8009d2c:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <_dtoa_r+0xbd4>)
 8009d2e:	f7ff ba95 	b.w	800925c <_dtoa_r+0xdc>
 8009d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f47f aa6e 	bne.w	8009216 <_dtoa_r+0x96>
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <_dtoa_r+0xbd8>)
 8009d3c:	f7ff ba8e 	b.w	800925c <_dtoa_r+0xdc>
 8009d40:	9b02      	ldr	r3, [sp, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dcae      	bgt.n	8009ca4 <_dtoa_r+0xb24>
 8009d46:	9b06      	ldr	r3, [sp, #24]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	f73f aea8 	bgt.w	8009a9e <_dtoa_r+0x91e>
 8009d4e:	e7a9      	b.n	8009ca4 <_dtoa_r+0xb24>
 8009d50:	0800b7c8 	.word	0x0800b7c8
 8009d54:	0800b624 	.word	0x0800b624
 8009d58:	0800b749 	.word	0x0800b749

08009d5c <_localeconv_r>:
 8009d5c:	4800      	ldr	r0, [pc, #0]	; (8009d60 <_localeconv_r+0x4>)
 8009d5e:	4770      	bx	lr
 8009d60:	20000168 	.word	0x20000168

08009d64 <malloc>:
 8009d64:	4b02      	ldr	r3, [pc, #8]	; (8009d70 <malloc+0xc>)
 8009d66:	4601      	mov	r1, r0
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	f000 bc09 	b.w	800a580 <_malloc_r>
 8009d6e:	bf00      	nop
 8009d70:	20000014 	.word	0x20000014

08009d74 <_Balloc>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	b976      	cbnz	r6, 8009d9c <_Balloc+0x28>
 8009d7e:	2010      	movs	r0, #16
 8009d80:	f7ff fff0 	bl	8009d64 <malloc>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6260      	str	r0, [r4, #36]	; 0x24
 8009d88:	b920      	cbnz	r0, 8009d94 <_Balloc+0x20>
 8009d8a:	4b18      	ldr	r3, [pc, #96]	; (8009dec <_Balloc+0x78>)
 8009d8c:	4818      	ldr	r0, [pc, #96]	; (8009df0 <_Balloc+0x7c>)
 8009d8e:	2166      	movs	r1, #102	; 0x66
 8009d90:	f000 fdd6 	bl	800a940 <__assert_func>
 8009d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d98:	6006      	str	r6, [r0, #0]
 8009d9a:	60c6      	str	r6, [r0, #12]
 8009d9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d9e:	68f3      	ldr	r3, [r6, #12]
 8009da0:	b183      	cbz	r3, 8009dc4 <_Balloc+0x50>
 8009da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009daa:	b9b8      	cbnz	r0, 8009ddc <_Balloc+0x68>
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f605 	lsl.w	r6, r1, r5
 8009db2:	1d72      	adds	r2, r6, #5
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 fb60 	bl	800a47c <_calloc_r>
 8009dbc:	b160      	cbz	r0, 8009dd8 <_Balloc+0x64>
 8009dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dc2:	e00e      	b.n	8009de2 <_Balloc+0x6e>
 8009dc4:	2221      	movs	r2, #33	; 0x21
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fb57 	bl	800a47c <_calloc_r>
 8009dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd0:	60f0      	str	r0, [r6, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e4      	bne.n	8009da2 <_Balloc+0x2e>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	6802      	ldr	r2, [r0, #0]
 8009dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009de2:	2300      	movs	r3, #0
 8009de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de8:	e7f7      	b.n	8009dda <_Balloc+0x66>
 8009dea:	bf00      	nop
 8009dec:	0800b756 	.word	0x0800b756
 8009df0:	0800b7d9 	.word	0x0800b7d9

08009df4 <_Bfree>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	b976      	cbnz	r6, 8009e1c <_Bfree+0x28>
 8009dfe:	2010      	movs	r0, #16
 8009e00:	f7ff ffb0 	bl	8009d64 <malloc>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6268      	str	r0, [r5, #36]	; 0x24
 8009e08:	b920      	cbnz	r0, 8009e14 <_Bfree+0x20>
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <_Bfree+0x3c>)
 8009e0c:	4809      	ldr	r0, [pc, #36]	; (8009e34 <_Bfree+0x40>)
 8009e0e:	218a      	movs	r1, #138	; 0x8a
 8009e10:	f000 fd96 	bl	800a940 <__assert_func>
 8009e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e18:	6006      	str	r6, [r0, #0]
 8009e1a:	60c6      	str	r6, [r0, #12]
 8009e1c:	b13c      	cbz	r4, 8009e2e <_Bfree+0x3a>
 8009e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e20:	6862      	ldr	r2, [r4, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e28:	6021      	str	r1, [r4, #0]
 8009e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	0800b756 	.word	0x0800b756
 8009e34:	0800b7d9 	.word	0x0800b7d9

08009e38 <__multadd>:
 8009e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3c:	690d      	ldr	r5, [r1, #16]
 8009e3e:	4607      	mov	r7, r0
 8009e40:	460c      	mov	r4, r1
 8009e42:	461e      	mov	r6, r3
 8009e44:	f101 0c14 	add.w	ip, r1, #20
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8009e4e:	b299      	uxth	r1, r3
 8009e50:	fb02 6101 	mla	r1, r2, r1, r6
 8009e54:	0c1e      	lsrs	r6, r3, #16
 8009e56:	0c0b      	lsrs	r3, r1, #16
 8009e58:	fb02 3306 	mla	r3, r2, r6, r3
 8009e5c:	b289      	uxth	r1, r1
 8009e5e:	3001      	adds	r0, #1
 8009e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e64:	4285      	cmp	r5, r0
 8009e66:	f84c 1b04 	str.w	r1, [ip], #4
 8009e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e6e:	dcec      	bgt.n	8009e4a <__multadd+0x12>
 8009e70:	b30e      	cbz	r6, 8009eb6 <__multadd+0x7e>
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	42ab      	cmp	r3, r5
 8009e76:	dc19      	bgt.n	8009eac <__multadd+0x74>
 8009e78:	6861      	ldr	r1, [r4, #4]
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	3101      	adds	r1, #1
 8009e7e:	f7ff ff79 	bl	8009d74 <_Balloc>
 8009e82:	4680      	mov	r8, r0
 8009e84:	b928      	cbnz	r0, 8009e92 <__multadd+0x5a>
 8009e86:	4602      	mov	r2, r0
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <__multadd+0x84>)
 8009e8a:	480d      	ldr	r0, [pc, #52]	; (8009ec0 <__multadd+0x88>)
 8009e8c:	21b5      	movs	r1, #181	; 0xb5
 8009e8e:	f000 fd57 	bl	800a940 <__assert_func>
 8009e92:	6922      	ldr	r2, [r4, #16]
 8009e94:	3202      	adds	r2, #2
 8009e96:	f104 010c 	add.w	r1, r4, #12
 8009e9a:	0092      	lsls	r2, r2, #2
 8009e9c:	300c      	adds	r0, #12
 8009e9e:	f7fe fbb5 	bl	800860c <memcpy>
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff ffa5 	bl	8009df4 <_Bfree>
 8009eaa:	4644      	mov	r4, r8
 8009eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eb0:	3501      	adds	r5, #1
 8009eb2:	615e      	str	r6, [r3, #20]
 8009eb4:	6125      	str	r5, [r4, #16]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ebc:	0800b7c8 	.word	0x0800b7c8
 8009ec0:	0800b7d9 	.word	0x0800b7d9

08009ec4 <__hi0bits>:
 8009ec4:	0c03      	lsrs	r3, r0, #16
 8009ec6:	041b      	lsls	r3, r3, #16
 8009ec8:	b9d3      	cbnz	r3, 8009f00 <__hi0bits+0x3c>
 8009eca:	0400      	lsls	r0, r0, #16
 8009ecc:	2310      	movs	r3, #16
 8009ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ed2:	bf04      	itt	eq
 8009ed4:	0200      	lsleq	r0, r0, #8
 8009ed6:	3308      	addeq	r3, #8
 8009ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009edc:	bf04      	itt	eq
 8009ede:	0100      	lsleq	r0, r0, #4
 8009ee0:	3304      	addeq	r3, #4
 8009ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ee6:	bf04      	itt	eq
 8009ee8:	0080      	lsleq	r0, r0, #2
 8009eea:	3302      	addeq	r3, #2
 8009eec:	2800      	cmp	r0, #0
 8009eee:	db05      	blt.n	8009efc <__hi0bits+0x38>
 8009ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ef4:	f103 0301 	add.w	r3, r3, #1
 8009ef8:	bf08      	it	eq
 8009efa:	2320      	moveq	r3, #32
 8009efc:	4618      	mov	r0, r3
 8009efe:	4770      	bx	lr
 8009f00:	2300      	movs	r3, #0
 8009f02:	e7e4      	b.n	8009ece <__hi0bits+0xa>

08009f04 <__lo0bits>:
 8009f04:	6803      	ldr	r3, [r0, #0]
 8009f06:	f013 0207 	ands.w	r2, r3, #7
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	d00b      	beq.n	8009f26 <__lo0bits+0x22>
 8009f0e:	07da      	lsls	r2, r3, #31
 8009f10:	d423      	bmi.n	8009f5a <__lo0bits+0x56>
 8009f12:	0798      	lsls	r0, r3, #30
 8009f14:	bf49      	itett	mi
 8009f16:	085b      	lsrmi	r3, r3, #1
 8009f18:	089b      	lsrpl	r3, r3, #2
 8009f1a:	2001      	movmi	r0, #1
 8009f1c:	600b      	strmi	r3, [r1, #0]
 8009f1e:	bf5c      	itt	pl
 8009f20:	600b      	strpl	r3, [r1, #0]
 8009f22:	2002      	movpl	r0, #2
 8009f24:	4770      	bx	lr
 8009f26:	b298      	uxth	r0, r3
 8009f28:	b9a8      	cbnz	r0, 8009f56 <__lo0bits+0x52>
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	2010      	movs	r0, #16
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	b90a      	cbnz	r2, 8009f36 <__lo0bits+0x32>
 8009f32:	3008      	adds	r0, #8
 8009f34:	0a1b      	lsrs	r3, r3, #8
 8009f36:	071a      	lsls	r2, r3, #28
 8009f38:	bf04      	itt	eq
 8009f3a:	091b      	lsreq	r3, r3, #4
 8009f3c:	3004      	addeq	r0, #4
 8009f3e:	079a      	lsls	r2, r3, #30
 8009f40:	bf04      	itt	eq
 8009f42:	089b      	lsreq	r3, r3, #2
 8009f44:	3002      	addeq	r0, #2
 8009f46:	07da      	lsls	r2, r3, #31
 8009f48:	d403      	bmi.n	8009f52 <__lo0bits+0x4e>
 8009f4a:	085b      	lsrs	r3, r3, #1
 8009f4c:	f100 0001 	add.w	r0, r0, #1
 8009f50:	d005      	beq.n	8009f5e <__lo0bits+0x5a>
 8009f52:	600b      	str	r3, [r1, #0]
 8009f54:	4770      	bx	lr
 8009f56:	4610      	mov	r0, r2
 8009f58:	e7e9      	b.n	8009f2e <__lo0bits+0x2a>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	4770      	bx	lr
 8009f5e:	2020      	movs	r0, #32
 8009f60:	4770      	bx	lr
	...

08009f64 <__i2b>:
 8009f64:	b510      	push	{r4, lr}
 8009f66:	460c      	mov	r4, r1
 8009f68:	2101      	movs	r1, #1
 8009f6a:	f7ff ff03 	bl	8009d74 <_Balloc>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	b928      	cbnz	r0, 8009f7e <__i2b+0x1a>
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <__i2b+0x24>)
 8009f74:	4805      	ldr	r0, [pc, #20]	; (8009f8c <__i2b+0x28>)
 8009f76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f7a:	f000 fce1 	bl	800a940 <__assert_func>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	6144      	str	r4, [r0, #20]
 8009f82:	6103      	str	r3, [r0, #16]
 8009f84:	bd10      	pop	{r4, pc}
 8009f86:	bf00      	nop
 8009f88:	0800b7c8 	.word	0x0800b7c8
 8009f8c:	0800b7d9 	.word	0x0800b7d9

08009f90 <__multiply>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	4691      	mov	r9, r2
 8009f96:	690a      	ldr	r2, [r1, #16]
 8009f98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	bfb8      	it	lt
 8009fa0:	460b      	movlt	r3, r1
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	bfbc      	itt	lt
 8009fa6:	464c      	movlt	r4, r9
 8009fa8:	4699      	movlt	r9, r3
 8009faa:	6927      	ldr	r7, [r4, #16]
 8009fac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fb0:	68a3      	ldr	r3, [r4, #8]
 8009fb2:	6861      	ldr	r1, [r4, #4]
 8009fb4:	eb07 060a 	add.w	r6, r7, sl
 8009fb8:	42b3      	cmp	r3, r6
 8009fba:	b085      	sub	sp, #20
 8009fbc:	bfb8      	it	lt
 8009fbe:	3101      	addlt	r1, #1
 8009fc0:	f7ff fed8 	bl	8009d74 <_Balloc>
 8009fc4:	b930      	cbnz	r0, 8009fd4 <__multiply+0x44>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	4b44      	ldr	r3, [pc, #272]	; (800a0dc <__multiply+0x14c>)
 8009fca:	4845      	ldr	r0, [pc, #276]	; (800a0e0 <__multiply+0x150>)
 8009fcc:	f240 115d 	movw	r1, #349	; 0x15d
 8009fd0:	f000 fcb6 	bl	800a940 <__assert_func>
 8009fd4:	f100 0514 	add.w	r5, r0, #20
 8009fd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fdc:	462b      	mov	r3, r5
 8009fde:	2200      	movs	r2, #0
 8009fe0:	4543      	cmp	r3, r8
 8009fe2:	d321      	bcc.n	800a028 <__multiply+0x98>
 8009fe4:	f104 0314 	add.w	r3, r4, #20
 8009fe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fec:	f109 0314 	add.w	r3, r9, #20
 8009ff0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ff4:	9202      	str	r2, [sp, #8]
 8009ff6:	1b3a      	subs	r2, r7, r4
 8009ff8:	3a15      	subs	r2, #21
 8009ffa:	f022 0203 	bic.w	r2, r2, #3
 8009ffe:	3204      	adds	r2, #4
 800a000:	f104 0115 	add.w	r1, r4, #21
 800a004:	428f      	cmp	r7, r1
 800a006:	bf38      	it	cc
 800a008:	2204      	movcc	r2, #4
 800a00a:	9201      	str	r2, [sp, #4]
 800a00c:	9a02      	ldr	r2, [sp, #8]
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	429a      	cmp	r2, r3
 800a012:	d80c      	bhi.n	800a02e <__multiply+0x9e>
 800a014:	2e00      	cmp	r6, #0
 800a016:	dd03      	ble.n	800a020 <__multiply+0x90>
 800a018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d05a      	beq.n	800a0d6 <__multiply+0x146>
 800a020:	6106      	str	r6, [r0, #16]
 800a022:	b005      	add	sp, #20
 800a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a028:	f843 2b04 	str.w	r2, [r3], #4
 800a02c:	e7d8      	b.n	8009fe0 <__multiply+0x50>
 800a02e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a032:	f1ba 0f00 	cmp.w	sl, #0
 800a036:	d024      	beq.n	800a082 <__multiply+0xf2>
 800a038:	f104 0e14 	add.w	lr, r4, #20
 800a03c:	46a9      	mov	r9, r5
 800a03e:	f04f 0c00 	mov.w	ip, #0
 800a042:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a046:	f8d9 1000 	ldr.w	r1, [r9]
 800a04a:	fa1f fb82 	uxth.w	fp, r2
 800a04e:	b289      	uxth	r1, r1
 800a050:	fb0a 110b 	mla	r1, sl, fp, r1
 800a054:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a058:	f8d9 2000 	ldr.w	r2, [r9]
 800a05c:	4461      	add	r1, ip
 800a05e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a062:	fb0a c20b 	mla	r2, sl, fp, ip
 800a066:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a06a:	b289      	uxth	r1, r1
 800a06c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a070:	4577      	cmp	r7, lr
 800a072:	f849 1b04 	str.w	r1, [r9], #4
 800a076:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a07a:	d8e2      	bhi.n	800a042 <__multiply+0xb2>
 800a07c:	9a01      	ldr	r2, [sp, #4]
 800a07e:	f845 c002 	str.w	ip, [r5, r2]
 800a082:	9a03      	ldr	r2, [sp, #12]
 800a084:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a088:	3304      	adds	r3, #4
 800a08a:	f1b9 0f00 	cmp.w	r9, #0
 800a08e:	d020      	beq.n	800a0d2 <__multiply+0x142>
 800a090:	6829      	ldr	r1, [r5, #0]
 800a092:	f104 0c14 	add.w	ip, r4, #20
 800a096:	46ae      	mov	lr, r5
 800a098:	f04f 0a00 	mov.w	sl, #0
 800a09c:	f8bc b000 	ldrh.w	fp, [ip]
 800a0a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a0a8:	4492      	add	sl, r2
 800a0aa:	b289      	uxth	r1, r1
 800a0ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a0b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0b8:	f8be 1000 	ldrh.w	r1, [lr]
 800a0bc:	0c12      	lsrs	r2, r2, #16
 800a0be:	fb09 1102 	mla	r1, r9, r2, r1
 800a0c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0c6:	4567      	cmp	r7, ip
 800a0c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0cc:	d8e6      	bhi.n	800a09c <__multiply+0x10c>
 800a0ce:	9a01      	ldr	r2, [sp, #4]
 800a0d0:	50a9      	str	r1, [r5, r2]
 800a0d2:	3504      	adds	r5, #4
 800a0d4:	e79a      	b.n	800a00c <__multiply+0x7c>
 800a0d6:	3e01      	subs	r6, #1
 800a0d8:	e79c      	b.n	800a014 <__multiply+0x84>
 800a0da:	bf00      	nop
 800a0dc:	0800b7c8 	.word	0x0800b7c8
 800a0e0:	0800b7d9 	.word	0x0800b7d9

0800a0e4 <__pow5mult>:
 800a0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e8:	4615      	mov	r5, r2
 800a0ea:	f012 0203 	ands.w	r2, r2, #3
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	d007      	beq.n	800a104 <__pow5mult+0x20>
 800a0f4:	4c25      	ldr	r4, [pc, #148]	; (800a18c <__pow5mult+0xa8>)
 800a0f6:	3a01      	subs	r2, #1
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0fe:	f7ff fe9b 	bl	8009e38 <__multadd>
 800a102:	4607      	mov	r7, r0
 800a104:	10ad      	asrs	r5, r5, #2
 800a106:	d03d      	beq.n	800a184 <__pow5mult+0xa0>
 800a108:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a10a:	b97c      	cbnz	r4, 800a12c <__pow5mult+0x48>
 800a10c:	2010      	movs	r0, #16
 800a10e:	f7ff fe29 	bl	8009d64 <malloc>
 800a112:	4602      	mov	r2, r0
 800a114:	6270      	str	r0, [r6, #36]	; 0x24
 800a116:	b928      	cbnz	r0, 800a124 <__pow5mult+0x40>
 800a118:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <__pow5mult+0xac>)
 800a11a:	481e      	ldr	r0, [pc, #120]	; (800a194 <__pow5mult+0xb0>)
 800a11c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a120:	f000 fc0e 	bl	800a940 <__assert_func>
 800a124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a128:	6004      	str	r4, [r0, #0]
 800a12a:	60c4      	str	r4, [r0, #12]
 800a12c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a134:	b94c      	cbnz	r4, 800a14a <__pow5mult+0x66>
 800a136:	f240 2171 	movw	r1, #625	; 0x271
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff ff12 	bl	8009f64 <__i2b>
 800a140:	2300      	movs	r3, #0
 800a142:	f8c8 0008 	str.w	r0, [r8, #8]
 800a146:	4604      	mov	r4, r0
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	f04f 0900 	mov.w	r9, #0
 800a14e:	07eb      	lsls	r3, r5, #31
 800a150:	d50a      	bpl.n	800a168 <__pow5mult+0x84>
 800a152:	4639      	mov	r1, r7
 800a154:	4622      	mov	r2, r4
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ff1a 	bl	8009f90 <__multiply>
 800a15c:	4639      	mov	r1, r7
 800a15e:	4680      	mov	r8, r0
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff fe47 	bl	8009df4 <_Bfree>
 800a166:	4647      	mov	r7, r8
 800a168:	106d      	asrs	r5, r5, #1
 800a16a:	d00b      	beq.n	800a184 <__pow5mult+0xa0>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	b938      	cbnz	r0, 800a180 <__pow5mult+0x9c>
 800a170:	4622      	mov	r2, r4
 800a172:	4621      	mov	r1, r4
 800a174:	4630      	mov	r0, r6
 800a176:	f7ff ff0b 	bl	8009f90 <__multiply>
 800a17a:	6020      	str	r0, [r4, #0]
 800a17c:	f8c0 9000 	str.w	r9, [r0]
 800a180:	4604      	mov	r4, r0
 800a182:	e7e4      	b.n	800a14e <__pow5mult+0x6a>
 800a184:	4638      	mov	r0, r7
 800a186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18a:	bf00      	nop
 800a18c:	0800b928 	.word	0x0800b928
 800a190:	0800b756 	.word	0x0800b756
 800a194:	0800b7d9 	.word	0x0800b7d9

0800a198 <__lshift>:
 800a198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a19c:	460c      	mov	r4, r1
 800a19e:	6849      	ldr	r1, [r1, #4]
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1a6:	68a3      	ldr	r3, [r4, #8]
 800a1a8:	4607      	mov	r7, r0
 800a1aa:	4691      	mov	r9, r2
 800a1ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1b0:	f108 0601 	add.w	r6, r8, #1
 800a1b4:	42b3      	cmp	r3, r6
 800a1b6:	db0b      	blt.n	800a1d0 <__lshift+0x38>
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff fddb 	bl	8009d74 <_Balloc>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b948      	cbnz	r0, 800a1d6 <__lshift+0x3e>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	4b2a      	ldr	r3, [pc, #168]	; (800a270 <__lshift+0xd8>)
 800a1c6:	482b      	ldr	r0, [pc, #172]	; (800a274 <__lshift+0xdc>)
 800a1c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1cc:	f000 fbb8 	bl	800a940 <__assert_func>
 800a1d0:	3101      	adds	r1, #1
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	e7ee      	b.n	800a1b4 <__lshift+0x1c>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f100 0114 	add.w	r1, r0, #20
 800a1dc:	f100 0210 	add.w	r2, r0, #16
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	4553      	cmp	r3, sl
 800a1e4:	db37      	blt.n	800a256 <__lshift+0xbe>
 800a1e6:	6920      	ldr	r0, [r4, #16]
 800a1e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1ec:	f104 0314 	add.w	r3, r4, #20
 800a1f0:	f019 091f 	ands.w	r9, r9, #31
 800a1f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1fc:	d02f      	beq.n	800a25e <__lshift+0xc6>
 800a1fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a202:	468a      	mov	sl, r1
 800a204:	f04f 0c00 	mov.w	ip, #0
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	fa02 f209 	lsl.w	r2, r2, r9
 800a20e:	ea42 020c 	orr.w	r2, r2, ip
 800a212:	f84a 2b04 	str.w	r2, [sl], #4
 800a216:	f853 2b04 	ldr.w	r2, [r3], #4
 800a21a:	4298      	cmp	r0, r3
 800a21c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a220:	d8f2      	bhi.n	800a208 <__lshift+0x70>
 800a222:	1b03      	subs	r3, r0, r4
 800a224:	3b15      	subs	r3, #21
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	3304      	adds	r3, #4
 800a22c:	f104 0215 	add.w	r2, r4, #21
 800a230:	4290      	cmp	r0, r2
 800a232:	bf38      	it	cc
 800a234:	2304      	movcc	r3, #4
 800a236:	f841 c003 	str.w	ip, [r1, r3]
 800a23a:	f1bc 0f00 	cmp.w	ip, #0
 800a23e:	d001      	beq.n	800a244 <__lshift+0xac>
 800a240:	f108 0602 	add.w	r6, r8, #2
 800a244:	3e01      	subs	r6, #1
 800a246:	4638      	mov	r0, r7
 800a248:	612e      	str	r6, [r5, #16]
 800a24a:	4621      	mov	r1, r4
 800a24c:	f7ff fdd2 	bl	8009df4 <_Bfree>
 800a250:	4628      	mov	r0, r5
 800a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a256:	f842 0f04 	str.w	r0, [r2, #4]!
 800a25a:	3301      	adds	r3, #1
 800a25c:	e7c1      	b.n	800a1e2 <__lshift+0x4a>
 800a25e:	3904      	subs	r1, #4
 800a260:	f853 2b04 	ldr.w	r2, [r3], #4
 800a264:	f841 2f04 	str.w	r2, [r1, #4]!
 800a268:	4298      	cmp	r0, r3
 800a26a:	d8f9      	bhi.n	800a260 <__lshift+0xc8>
 800a26c:	e7ea      	b.n	800a244 <__lshift+0xac>
 800a26e:	bf00      	nop
 800a270:	0800b7c8 	.word	0x0800b7c8
 800a274:	0800b7d9 	.word	0x0800b7d9

0800a278 <__mcmp>:
 800a278:	b530      	push	{r4, r5, lr}
 800a27a:	6902      	ldr	r2, [r0, #16]
 800a27c:	690c      	ldr	r4, [r1, #16]
 800a27e:	1b12      	subs	r2, r2, r4
 800a280:	d10e      	bne.n	800a2a0 <__mcmp+0x28>
 800a282:	f100 0314 	add.w	r3, r0, #20
 800a286:	3114      	adds	r1, #20
 800a288:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a28c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a290:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a294:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a298:	42a5      	cmp	r5, r4
 800a29a:	d003      	beq.n	800a2a4 <__mcmp+0x2c>
 800a29c:	d305      	bcc.n	800a2aa <__mcmp+0x32>
 800a29e:	2201      	movs	r2, #1
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	bd30      	pop	{r4, r5, pc}
 800a2a4:	4283      	cmp	r3, r0
 800a2a6:	d3f3      	bcc.n	800a290 <__mcmp+0x18>
 800a2a8:	e7fa      	b.n	800a2a0 <__mcmp+0x28>
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	e7f7      	b.n	800a2a0 <__mcmp+0x28>

0800a2b0 <__mdiff>:
 800a2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	4690      	mov	r8, r2
 800a2be:	f7ff ffdb 	bl	800a278 <__mcmp>
 800a2c2:	1e05      	subs	r5, r0, #0
 800a2c4:	d110      	bne.n	800a2e8 <__mdiff+0x38>
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff fd53 	bl	8009d74 <_Balloc>
 800a2ce:	b930      	cbnz	r0, 800a2de <__mdiff+0x2e>
 800a2d0:	4b3a      	ldr	r3, [pc, #232]	; (800a3bc <__mdiff+0x10c>)
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	f240 2132 	movw	r1, #562	; 0x232
 800a2d8:	4839      	ldr	r0, [pc, #228]	; (800a3c0 <__mdiff+0x110>)
 800a2da:	f000 fb31 	bl	800a940 <__assert_func>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	bfa4      	itt	ge
 800a2ea:	4643      	movge	r3, r8
 800a2ec:	46a0      	movge	r8, r4
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2f4:	bfa6      	itte	ge
 800a2f6:	461c      	movge	r4, r3
 800a2f8:	2500      	movge	r5, #0
 800a2fa:	2501      	movlt	r5, #1
 800a2fc:	f7ff fd3a 	bl	8009d74 <_Balloc>
 800a300:	b920      	cbnz	r0, 800a30c <__mdiff+0x5c>
 800a302:	4b2e      	ldr	r3, [pc, #184]	; (800a3bc <__mdiff+0x10c>)
 800a304:	4602      	mov	r2, r0
 800a306:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a30a:	e7e5      	b.n	800a2d8 <__mdiff+0x28>
 800a30c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a310:	6926      	ldr	r6, [r4, #16]
 800a312:	60c5      	str	r5, [r0, #12]
 800a314:	f104 0914 	add.w	r9, r4, #20
 800a318:	f108 0514 	add.w	r5, r8, #20
 800a31c:	f100 0e14 	add.w	lr, r0, #20
 800a320:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a324:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a328:	f108 0210 	add.w	r2, r8, #16
 800a32c:	46f2      	mov	sl, lr
 800a32e:	2100      	movs	r1, #0
 800a330:	f859 3b04 	ldr.w	r3, [r9], #4
 800a334:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a338:	fa1f f883 	uxth.w	r8, r3
 800a33c:	fa11 f18b 	uxtah	r1, r1, fp
 800a340:	0c1b      	lsrs	r3, r3, #16
 800a342:	eba1 0808 	sub.w	r8, r1, r8
 800a346:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a34a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a34e:	fa1f f888 	uxth.w	r8, r8
 800a352:	1419      	asrs	r1, r3, #16
 800a354:	454e      	cmp	r6, r9
 800a356:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a35a:	f84a 3b04 	str.w	r3, [sl], #4
 800a35e:	d8e7      	bhi.n	800a330 <__mdiff+0x80>
 800a360:	1b33      	subs	r3, r6, r4
 800a362:	3b15      	subs	r3, #21
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	3304      	adds	r3, #4
 800a36a:	3415      	adds	r4, #21
 800a36c:	42a6      	cmp	r6, r4
 800a36e:	bf38      	it	cc
 800a370:	2304      	movcc	r3, #4
 800a372:	441d      	add	r5, r3
 800a374:	4473      	add	r3, lr
 800a376:	469e      	mov	lr, r3
 800a378:	462e      	mov	r6, r5
 800a37a:	4566      	cmp	r6, ip
 800a37c:	d30e      	bcc.n	800a39c <__mdiff+0xec>
 800a37e:	f10c 0203 	add.w	r2, ip, #3
 800a382:	1b52      	subs	r2, r2, r5
 800a384:	f022 0203 	bic.w	r2, r2, #3
 800a388:	3d03      	subs	r5, #3
 800a38a:	45ac      	cmp	ip, r5
 800a38c:	bf38      	it	cc
 800a38e:	2200      	movcc	r2, #0
 800a390:	441a      	add	r2, r3
 800a392:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a396:	b17b      	cbz	r3, 800a3b8 <__mdiff+0x108>
 800a398:	6107      	str	r7, [r0, #16]
 800a39a:	e7a3      	b.n	800a2e4 <__mdiff+0x34>
 800a39c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3a0:	fa11 f288 	uxtah	r2, r1, r8
 800a3a4:	1414      	asrs	r4, r2, #16
 800a3a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3aa:	b292      	uxth	r2, r2
 800a3ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3b0:	f84e 2b04 	str.w	r2, [lr], #4
 800a3b4:	1421      	asrs	r1, r4, #16
 800a3b6:	e7e0      	b.n	800a37a <__mdiff+0xca>
 800a3b8:	3f01      	subs	r7, #1
 800a3ba:	e7ea      	b.n	800a392 <__mdiff+0xe2>
 800a3bc:	0800b7c8 	.word	0x0800b7c8
 800a3c0:	0800b7d9 	.word	0x0800b7d9

0800a3c4 <__d2b>:
 800a3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	4689      	mov	r9, r1
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	ec57 6b10 	vmov	r6, r7, d0
 800a3d0:	4690      	mov	r8, r2
 800a3d2:	f7ff fccf 	bl	8009d74 <_Balloc>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b930      	cbnz	r0, 800a3e8 <__d2b+0x24>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4b25      	ldr	r3, [pc, #148]	; (800a474 <__d2b+0xb0>)
 800a3de:	4826      	ldr	r0, [pc, #152]	; (800a478 <__d2b+0xb4>)
 800a3e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e4:	f000 faac 	bl	800a940 <__assert_func>
 800a3e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3f0:	bb35      	cbnz	r5, 800a440 <__d2b+0x7c>
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	d028      	beq.n	800a44a <__d2b+0x86>
 800a3f8:	4668      	mov	r0, sp
 800a3fa:	9600      	str	r6, [sp, #0]
 800a3fc:	f7ff fd82 	bl	8009f04 <__lo0bits>
 800a400:	9900      	ldr	r1, [sp, #0]
 800a402:	b300      	cbz	r0, 800a446 <__d2b+0x82>
 800a404:	9a01      	ldr	r2, [sp, #4]
 800a406:	f1c0 0320 	rsb	r3, r0, #32
 800a40a:	fa02 f303 	lsl.w	r3, r2, r3
 800a40e:	430b      	orrs	r3, r1
 800a410:	40c2      	lsrs	r2, r0
 800a412:	6163      	str	r3, [r4, #20]
 800a414:	9201      	str	r2, [sp, #4]
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	61a3      	str	r3, [r4, #24]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2202      	movne	r2, #2
 800a420:	2201      	moveq	r2, #1
 800a422:	6122      	str	r2, [r4, #16]
 800a424:	b1d5      	cbz	r5, 800a45c <__d2b+0x98>
 800a426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a42a:	4405      	add	r5, r0
 800a42c:	f8c9 5000 	str.w	r5, [r9]
 800a430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a434:	f8c8 0000 	str.w	r0, [r8]
 800a438:	4620      	mov	r0, r4
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a444:	e7d5      	b.n	800a3f2 <__d2b+0x2e>
 800a446:	6161      	str	r1, [r4, #20]
 800a448:	e7e5      	b.n	800a416 <__d2b+0x52>
 800a44a:	a801      	add	r0, sp, #4
 800a44c:	f7ff fd5a 	bl	8009f04 <__lo0bits>
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	6163      	str	r3, [r4, #20]
 800a454:	2201      	movs	r2, #1
 800a456:	6122      	str	r2, [r4, #16]
 800a458:	3020      	adds	r0, #32
 800a45a:	e7e3      	b.n	800a424 <__d2b+0x60>
 800a45c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a464:	f8c9 0000 	str.w	r0, [r9]
 800a468:	6918      	ldr	r0, [r3, #16]
 800a46a:	f7ff fd2b 	bl	8009ec4 <__hi0bits>
 800a46e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a472:	e7df      	b.n	800a434 <__d2b+0x70>
 800a474:	0800b7c8 	.word	0x0800b7c8
 800a478:	0800b7d9 	.word	0x0800b7d9

0800a47c <_calloc_r>:
 800a47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47e:	fba1 2402 	umull	r2, r4, r1, r2
 800a482:	b94c      	cbnz	r4, 800a498 <_calloc_r+0x1c>
 800a484:	4611      	mov	r1, r2
 800a486:	9201      	str	r2, [sp, #4]
 800a488:	f000 f87a 	bl	800a580 <_malloc_r>
 800a48c:	9a01      	ldr	r2, [sp, #4]
 800a48e:	4605      	mov	r5, r0
 800a490:	b930      	cbnz	r0, 800a4a0 <_calloc_r+0x24>
 800a492:	4628      	mov	r0, r5
 800a494:	b003      	add	sp, #12
 800a496:	bd30      	pop	{r4, r5, pc}
 800a498:	220c      	movs	r2, #12
 800a49a:	6002      	str	r2, [r0, #0]
 800a49c:	2500      	movs	r5, #0
 800a49e:	e7f8      	b.n	800a492 <_calloc_r+0x16>
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	f7fe f8c1 	bl	8008628 <memset>
 800a4a6:	e7f4      	b.n	800a492 <_calloc_r+0x16>

0800a4a8 <_free_r>:
 800a4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4aa:	2900      	cmp	r1, #0
 800a4ac:	d044      	beq.n	800a538 <_free_r+0x90>
 800a4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b2:	9001      	str	r0, [sp, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ba:	bfb8      	it	lt
 800a4bc:	18e4      	addlt	r4, r4, r3
 800a4be:	f000 fa9b 	bl	800a9f8 <__malloc_lock>
 800a4c2:	4a1e      	ldr	r2, [pc, #120]	; (800a53c <_free_r+0x94>)
 800a4c4:	9801      	ldr	r0, [sp, #4]
 800a4c6:	6813      	ldr	r3, [r2, #0]
 800a4c8:	b933      	cbnz	r3, 800a4d8 <_free_r+0x30>
 800a4ca:	6063      	str	r3, [r4, #4]
 800a4cc:	6014      	str	r4, [r2, #0]
 800a4ce:	b003      	add	sp, #12
 800a4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d4:	f000 ba96 	b.w	800aa04 <__malloc_unlock>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d908      	bls.n	800a4ee <_free_r+0x46>
 800a4dc:	6825      	ldr	r5, [r4, #0]
 800a4de:	1961      	adds	r1, r4, r5
 800a4e0:	428b      	cmp	r3, r1
 800a4e2:	bf01      	itttt	eq
 800a4e4:	6819      	ldreq	r1, [r3, #0]
 800a4e6:	685b      	ldreq	r3, [r3, #4]
 800a4e8:	1949      	addeq	r1, r1, r5
 800a4ea:	6021      	streq	r1, [r4, #0]
 800a4ec:	e7ed      	b.n	800a4ca <_free_r+0x22>
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	b10b      	cbz	r3, 800a4f8 <_free_r+0x50>
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	d9fa      	bls.n	800a4ee <_free_r+0x46>
 800a4f8:	6811      	ldr	r1, [r2, #0]
 800a4fa:	1855      	adds	r5, r2, r1
 800a4fc:	42a5      	cmp	r5, r4
 800a4fe:	d10b      	bne.n	800a518 <_free_r+0x70>
 800a500:	6824      	ldr	r4, [r4, #0]
 800a502:	4421      	add	r1, r4
 800a504:	1854      	adds	r4, r2, r1
 800a506:	42a3      	cmp	r3, r4
 800a508:	6011      	str	r1, [r2, #0]
 800a50a:	d1e0      	bne.n	800a4ce <_free_r+0x26>
 800a50c:	681c      	ldr	r4, [r3, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	6053      	str	r3, [r2, #4]
 800a512:	4421      	add	r1, r4
 800a514:	6011      	str	r1, [r2, #0]
 800a516:	e7da      	b.n	800a4ce <_free_r+0x26>
 800a518:	d902      	bls.n	800a520 <_free_r+0x78>
 800a51a:	230c      	movs	r3, #12
 800a51c:	6003      	str	r3, [r0, #0]
 800a51e:	e7d6      	b.n	800a4ce <_free_r+0x26>
 800a520:	6825      	ldr	r5, [r4, #0]
 800a522:	1961      	adds	r1, r4, r5
 800a524:	428b      	cmp	r3, r1
 800a526:	bf04      	itt	eq
 800a528:	6819      	ldreq	r1, [r3, #0]
 800a52a:	685b      	ldreq	r3, [r3, #4]
 800a52c:	6063      	str	r3, [r4, #4]
 800a52e:	bf04      	itt	eq
 800a530:	1949      	addeq	r1, r1, r5
 800a532:	6021      	streq	r1, [r4, #0]
 800a534:	6054      	str	r4, [r2, #4]
 800a536:	e7ca      	b.n	800a4ce <_free_r+0x26>
 800a538:	b003      	add	sp, #12
 800a53a:	bd30      	pop	{r4, r5, pc}
 800a53c:	20000544 	.word	0x20000544

0800a540 <sbrk_aligned>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	4e0e      	ldr	r6, [pc, #56]	; (800a57c <sbrk_aligned+0x3c>)
 800a544:	460c      	mov	r4, r1
 800a546:	6831      	ldr	r1, [r6, #0]
 800a548:	4605      	mov	r5, r0
 800a54a:	b911      	cbnz	r1, 800a552 <sbrk_aligned+0x12>
 800a54c:	f000 f9e8 	bl	800a920 <_sbrk_r>
 800a550:	6030      	str	r0, [r6, #0]
 800a552:	4621      	mov	r1, r4
 800a554:	4628      	mov	r0, r5
 800a556:	f000 f9e3 	bl	800a920 <_sbrk_r>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d00a      	beq.n	800a574 <sbrk_aligned+0x34>
 800a55e:	1cc4      	adds	r4, r0, #3
 800a560:	f024 0403 	bic.w	r4, r4, #3
 800a564:	42a0      	cmp	r0, r4
 800a566:	d007      	beq.n	800a578 <sbrk_aligned+0x38>
 800a568:	1a21      	subs	r1, r4, r0
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 f9d8 	bl	800a920 <_sbrk_r>
 800a570:	3001      	adds	r0, #1
 800a572:	d101      	bne.n	800a578 <sbrk_aligned+0x38>
 800a574:	f04f 34ff 	mov.w	r4, #4294967295
 800a578:	4620      	mov	r0, r4
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	20000548 	.word	0x20000548

0800a580 <_malloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	1ccd      	adds	r5, r1, #3
 800a586:	f025 0503 	bic.w	r5, r5, #3
 800a58a:	3508      	adds	r5, #8
 800a58c:	2d0c      	cmp	r5, #12
 800a58e:	bf38      	it	cc
 800a590:	250c      	movcc	r5, #12
 800a592:	2d00      	cmp	r5, #0
 800a594:	4607      	mov	r7, r0
 800a596:	db01      	blt.n	800a59c <_malloc_r+0x1c>
 800a598:	42a9      	cmp	r1, r5
 800a59a:	d905      	bls.n	800a5a8 <_malloc_r+0x28>
 800a59c:	230c      	movs	r3, #12
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	2600      	movs	r6, #0
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	4e2e      	ldr	r6, [pc, #184]	; (800a664 <_malloc_r+0xe4>)
 800a5aa:	f000 fa25 	bl	800a9f8 <__malloc_lock>
 800a5ae:	6833      	ldr	r3, [r6, #0]
 800a5b0:	461c      	mov	r4, r3
 800a5b2:	bb34      	cbnz	r4, 800a602 <_malloc_r+0x82>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f7ff ffc2 	bl	800a540 <sbrk_aligned>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	4604      	mov	r4, r0
 800a5c0:	d14d      	bne.n	800a65e <_malloc_r+0xde>
 800a5c2:	6834      	ldr	r4, [r6, #0]
 800a5c4:	4626      	mov	r6, r4
 800a5c6:	2e00      	cmp	r6, #0
 800a5c8:	d140      	bne.n	800a64c <_malloc_r+0xcc>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	eb04 0803 	add.w	r8, r4, r3
 800a5d4:	f000 f9a4 	bl	800a920 <_sbrk_r>
 800a5d8:	4580      	cmp	r8, r0
 800a5da:	d13a      	bne.n	800a652 <_malloc_r+0xd2>
 800a5dc:	6821      	ldr	r1, [r4, #0]
 800a5de:	3503      	adds	r5, #3
 800a5e0:	1a6d      	subs	r5, r5, r1
 800a5e2:	f025 0503 	bic.w	r5, r5, #3
 800a5e6:	3508      	adds	r5, #8
 800a5e8:	2d0c      	cmp	r5, #12
 800a5ea:	bf38      	it	cc
 800a5ec:	250c      	movcc	r5, #12
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ffa5 	bl	800a540 <sbrk_aligned>
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d02b      	beq.n	800a652 <_malloc_r+0xd2>
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	442b      	add	r3, r5
 800a5fe:	6023      	str	r3, [r4, #0]
 800a600:	e00e      	b.n	800a620 <_malloc_r+0xa0>
 800a602:	6822      	ldr	r2, [r4, #0]
 800a604:	1b52      	subs	r2, r2, r5
 800a606:	d41e      	bmi.n	800a646 <_malloc_r+0xc6>
 800a608:	2a0b      	cmp	r2, #11
 800a60a:	d916      	bls.n	800a63a <_malloc_r+0xba>
 800a60c:	1961      	adds	r1, r4, r5
 800a60e:	42a3      	cmp	r3, r4
 800a610:	6025      	str	r5, [r4, #0]
 800a612:	bf18      	it	ne
 800a614:	6059      	strne	r1, [r3, #4]
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	bf08      	it	eq
 800a61a:	6031      	streq	r1, [r6, #0]
 800a61c:	5162      	str	r2, [r4, r5]
 800a61e:	604b      	str	r3, [r1, #4]
 800a620:	4638      	mov	r0, r7
 800a622:	f104 060b 	add.w	r6, r4, #11
 800a626:	f000 f9ed 	bl	800aa04 <__malloc_unlock>
 800a62a:	f026 0607 	bic.w	r6, r6, #7
 800a62e:	1d23      	adds	r3, r4, #4
 800a630:	1af2      	subs	r2, r6, r3
 800a632:	d0b6      	beq.n	800a5a2 <_malloc_r+0x22>
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	50a3      	str	r3, [r4, r2]
 800a638:	e7b3      	b.n	800a5a2 <_malloc_r+0x22>
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	bf0c      	ite	eq
 800a640:	6032      	streq	r2, [r6, #0]
 800a642:	605a      	strne	r2, [r3, #4]
 800a644:	e7ec      	b.n	800a620 <_malloc_r+0xa0>
 800a646:	4623      	mov	r3, r4
 800a648:	6864      	ldr	r4, [r4, #4]
 800a64a:	e7b2      	b.n	800a5b2 <_malloc_r+0x32>
 800a64c:	4634      	mov	r4, r6
 800a64e:	6876      	ldr	r6, [r6, #4]
 800a650:	e7b9      	b.n	800a5c6 <_malloc_r+0x46>
 800a652:	230c      	movs	r3, #12
 800a654:	603b      	str	r3, [r7, #0]
 800a656:	4638      	mov	r0, r7
 800a658:	f000 f9d4 	bl	800aa04 <__malloc_unlock>
 800a65c:	e7a1      	b.n	800a5a2 <_malloc_r+0x22>
 800a65e:	6025      	str	r5, [r4, #0]
 800a660:	e7de      	b.n	800a620 <_malloc_r+0xa0>
 800a662:	bf00      	nop
 800a664:	20000544 	.word	0x20000544

0800a668 <__ssputs_r>:
 800a668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	688e      	ldr	r6, [r1, #8]
 800a66e:	429e      	cmp	r6, r3
 800a670:	4682      	mov	sl, r0
 800a672:	460c      	mov	r4, r1
 800a674:	4690      	mov	r8, r2
 800a676:	461f      	mov	r7, r3
 800a678:	d838      	bhi.n	800a6ec <__ssputs_r+0x84>
 800a67a:	898a      	ldrh	r2, [r1, #12]
 800a67c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a680:	d032      	beq.n	800a6e8 <__ssputs_r+0x80>
 800a682:	6825      	ldr	r5, [r4, #0]
 800a684:	6909      	ldr	r1, [r1, #16]
 800a686:	eba5 0901 	sub.w	r9, r5, r1
 800a68a:	6965      	ldr	r5, [r4, #20]
 800a68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a694:	3301      	adds	r3, #1
 800a696:	444b      	add	r3, r9
 800a698:	106d      	asrs	r5, r5, #1
 800a69a:	429d      	cmp	r5, r3
 800a69c:	bf38      	it	cc
 800a69e:	461d      	movcc	r5, r3
 800a6a0:	0553      	lsls	r3, r2, #21
 800a6a2:	d531      	bpl.n	800a708 <__ssputs_r+0xa0>
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7ff ff6b 	bl	800a580 <_malloc_r>
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	b950      	cbnz	r0, 800a6c4 <__ssputs_r+0x5c>
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	f8ca 3000 	str.w	r3, [sl]
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ba:	81a3      	strh	r3, [r4, #12]
 800a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c4:	6921      	ldr	r1, [r4, #16]
 800a6c6:	464a      	mov	r2, r9
 800a6c8:	f7fd ffa0 	bl	800860c <memcpy>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	6126      	str	r6, [r4, #16]
 800a6da:	6165      	str	r5, [r4, #20]
 800a6dc:	444e      	add	r6, r9
 800a6de:	eba5 0509 	sub.w	r5, r5, r9
 800a6e2:	6026      	str	r6, [r4, #0]
 800a6e4:	60a5      	str	r5, [r4, #8]
 800a6e6:	463e      	mov	r6, r7
 800a6e8:	42be      	cmp	r6, r7
 800a6ea:	d900      	bls.n	800a6ee <__ssputs_r+0x86>
 800a6ec:	463e      	mov	r6, r7
 800a6ee:	6820      	ldr	r0, [r4, #0]
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	4641      	mov	r1, r8
 800a6f4:	f000 f966 	bl	800a9c4 <memmove>
 800a6f8:	68a3      	ldr	r3, [r4, #8]
 800a6fa:	1b9b      	subs	r3, r3, r6
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	4433      	add	r3, r6
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	2000      	movs	r0, #0
 800a706:	e7db      	b.n	800a6c0 <__ssputs_r+0x58>
 800a708:	462a      	mov	r2, r5
 800a70a:	f000 f981 	bl	800aa10 <_realloc_r>
 800a70e:	4606      	mov	r6, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	d1e1      	bne.n	800a6d8 <__ssputs_r+0x70>
 800a714:	6921      	ldr	r1, [r4, #16]
 800a716:	4650      	mov	r0, sl
 800a718:	f7ff fec6 	bl	800a4a8 <_free_r>
 800a71c:	e7c7      	b.n	800a6ae <__ssputs_r+0x46>
	...

0800a720 <_svfiprintf_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	4698      	mov	r8, r3
 800a726:	898b      	ldrh	r3, [r1, #12]
 800a728:	061b      	lsls	r3, r3, #24
 800a72a:	b09d      	sub	sp, #116	; 0x74
 800a72c:	4607      	mov	r7, r0
 800a72e:	460d      	mov	r5, r1
 800a730:	4614      	mov	r4, r2
 800a732:	d50e      	bpl.n	800a752 <_svfiprintf_r+0x32>
 800a734:	690b      	ldr	r3, [r1, #16]
 800a736:	b963      	cbnz	r3, 800a752 <_svfiprintf_r+0x32>
 800a738:	2140      	movs	r1, #64	; 0x40
 800a73a:	f7ff ff21 	bl	800a580 <_malloc_r>
 800a73e:	6028      	str	r0, [r5, #0]
 800a740:	6128      	str	r0, [r5, #16]
 800a742:	b920      	cbnz	r0, 800a74e <_svfiprintf_r+0x2e>
 800a744:	230c      	movs	r3, #12
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	e0d1      	b.n	800a8f2 <_svfiprintf_r+0x1d2>
 800a74e:	2340      	movs	r3, #64	; 0x40
 800a750:	616b      	str	r3, [r5, #20]
 800a752:	2300      	movs	r3, #0
 800a754:	9309      	str	r3, [sp, #36]	; 0x24
 800a756:	2320      	movs	r3, #32
 800a758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a760:	2330      	movs	r3, #48	; 0x30
 800a762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a90c <_svfiprintf_r+0x1ec>
 800a766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a76a:	f04f 0901 	mov.w	r9, #1
 800a76e:	4623      	mov	r3, r4
 800a770:	469a      	mov	sl, r3
 800a772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a776:	b10a      	cbz	r2, 800a77c <_svfiprintf_r+0x5c>
 800a778:	2a25      	cmp	r2, #37	; 0x25
 800a77a:	d1f9      	bne.n	800a770 <_svfiprintf_r+0x50>
 800a77c:	ebba 0b04 	subs.w	fp, sl, r4
 800a780:	d00b      	beq.n	800a79a <_svfiprintf_r+0x7a>
 800a782:	465b      	mov	r3, fp
 800a784:	4622      	mov	r2, r4
 800a786:	4629      	mov	r1, r5
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff ff6d 	bl	800a668 <__ssputs_r>
 800a78e:	3001      	adds	r0, #1
 800a790:	f000 80aa 	beq.w	800a8e8 <_svfiprintf_r+0x1c8>
 800a794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a796:	445a      	add	r2, fp
 800a798:	9209      	str	r2, [sp, #36]	; 0x24
 800a79a:	f89a 3000 	ldrb.w	r3, [sl]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80a2 	beq.w	800a8e8 <_svfiprintf_r+0x1c8>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ae:	f10a 0a01 	add.w	sl, sl, #1
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	9307      	str	r3, [sp, #28]
 800a7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a7bc:	4654      	mov	r4, sl
 800a7be:	2205      	movs	r2, #5
 800a7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c4:	4851      	ldr	r0, [pc, #324]	; (800a90c <_svfiprintf_r+0x1ec>)
 800a7c6:	f7f5 fd13 	bl	80001f0 <memchr>
 800a7ca:	9a04      	ldr	r2, [sp, #16]
 800a7cc:	b9d8      	cbnz	r0, 800a806 <_svfiprintf_r+0xe6>
 800a7ce:	06d0      	lsls	r0, r2, #27
 800a7d0:	bf44      	itt	mi
 800a7d2:	2320      	movmi	r3, #32
 800a7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d8:	0711      	lsls	r1, r2, #28
 800a7da:	bf44      	itt	mi
 800a7dc:	232b      	movmi	r3, #43	; 0x2b
 800a7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e8:	d015      	beq.n	800a816 <_svfiprintf_r+0xf6>
 800a7ea:	9a07      	ldr	r2, [sp, #28]
 800a7ec:	4654      	mov	r4, sl
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	f04f 0c0a 	mov.w	ip, #10
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7fa:	3b30      	subs	r3, #48	; 0x30
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	d94e      	bls.n	800a89e <_svfiprintf_r+0x17e>
 800a800:	b1b0      	cbz	r0, 800a830 <_svfiprintf_r+0x110>
 800a802:	9207      	str	r2, [sp, #28]
 800a804:	e014      	b.n	800a830 <_svfiprintf_r+0x110>
 800a806:	eba0 0308 	sub.w	r3, r0, r8
 800a80a:	fa09 f303 	lsl.w	r3, r9, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	46a2      	mov	sl, r4
 800a814:	e7d2      	b.n	800a7bc <_svfiprintf_r+0x9c>
 800a816:	9b03      	ldr	r3, [sp, #12]
 800a818:	1d19      	adds	r1, r3, #4
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	9103      	str	r1, [sp, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bfbb      	ittet	lt
 800a822:	425b      	neglt	r3, r3
 800a824:	f042 0202 	orrlt.w	r2, r2, #2
 800a828:	9307      	strge	r3, [sp, #28]
 800a82a:	9307      	strlt	r3, [sp, #28]
 800a82c:	bfb8      	it	lt
 800a82e:	9204      	strlt	r2, [sp, #16]
 800a830:	7823      	ldrb	r3, [r4, #0]
 800a832:	2b2e      	cmp	r3, #46	; 0x2e
 800a834:	d10c      	bne.n	800a850 <_svfiprintf_r+0x130>
 800a836:	7863      	ldrb	r3, [r4, #1]
 800a838:	2b2a      	cmp	r3, #42	; 0x2a
 800a83a:	d135      	bne.n	800a8a8 <_svfiprintf_r+0x188>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	1d1a      	adds	r2, r3, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	9203      	str	r2, [sp, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	bfb8      	it	lt
 800a848:	f04f 33ff 	movlt.w	r3, #4294967295
 800a84c:	3402      	adds	r4, #2
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a91c <_svfiprintf_r+0x1fc>
 800a854:	7821      	ldrb	r1, [r4, #0]
 800a856:	2203      	movs	r2, #3
 800a858:	4650      	mov	r0, sl
 800a85a:	f7f5 fcc9 	bl	80001f0 <memchr>
 800a85e:	b140      	cbz	r0, 800a872 <_svfiprintf_r+0x152>
 800a860:	2340      	movs	r3, #64	; 0x40
 800a862:	eba0 000a 	sub.w	r0, r0, sl
 800a866:	fa03 f000 	lsl.w	r0, r3, r0
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	4303      	orrs	r3, r0
 800a86e:	3401      	adds	r4, #1
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a876:	4826      	ldr	r0, [pc, #152]	; (800a910 <_svfiprintf_r+0x1f0>)
 800a878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a87c:	2206      	movs	r2, #6
 800a87e:	f7f5 fcb7 	bl	80001f0 <memchr>
 800a882:	2800      	cmp	r0, #0
 800a884:	d038      	beq.n	800a8f8 <_svfiprintf_r+0x1d8>
 800a886:	4b23      	ldr	r3, [pc, #140]	; (800a914 <_svfiprintf_r+0x1f4>)
 800a888:	bb1b      	cbnz	r3, 800a8d2 <_svfiprintf_r+0x1b2>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	3307      	adds	r3, #7
 800a88e:	f023 0307 	bic.w	r3, r3, #7
 800a892:	3308      	adds	r3, #8
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a898:	4433      	add	r3, r6
 800a89a:	9309      	str	r3, [sp, #36]	; 0x24
 800a89c:	e767      	b.n	800a76e <_svfiprintf_r+0x4e>
 800a89e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	2001      	movs	r0, #1
 800a8a6:	e7a5      	b.n	800a7f4 <_svfiprintf_r+0xd4>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	3401      	adds	r4, #1
 800a8ac:	9305      	str	r3, [sp, #20]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	f04f 0c0a 	mov.w	ip, #10
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ba:	3a30      	subs	r2, #48	; 0x30
 800a8bc:	2a09      	cmp	r2, #9
 800a8be:	d903      	bls.n	800a8c8 <_svfiprintf_r+0x1a8>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0c5      	beq.n	800a850 <_svfiprintf_r+0x130>
 800a8c4:	9105      	str	r1, [sp, #20]
 800a8c6:	e7c3      	b.n	800a850 <_svfiprintf_r+0x130>
 800a8c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e7f0      	b.n	800a8b4 <_svfiprintf_r+0x194>
 800a8d2:	ab03      	add	r3, sp, #12
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <_svfiprintf_r+0x1f8>)
 800a8da:	a904      	add	r1, sp, #16
 800a8dc:	4638      	mov	r0, r7
 800a8de:	f7fd ff4b 	bl	8008778 <_printf_float>
 800a8e2:	1c42      	adds	r2, r0, #1
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	d1d6      	bne.n	800a896 <_svfiprintf_r+0x176>
 800a8e8:	89ab      	ldrh	r3, [r5, #12]
 800a8ea:	065b      	lsls	r3, r3, #25
 800a8ec:	f53f af2c 	bmi.w	800a748 <_svfiprintf_r+0x28>
 800a8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8f2:	b01d      	add	sp, #116	; 0x74
 800a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4b06      	ldr	r3, [pc, #24]	; (800a918 <_svfiprintf_r+0x1f8>)
 800a900:	a904      	add	r1, sp, #16
 800a902:	4638      	mov	r0, r7
 800a904:	f7fe f9dc 	bl	8008cc0 <_printf_i>
 800a908:	e7eb      	b.n	800a8e2 <_svfiprintf_r+0x1c2>
 800a90a:	bf00      	nop
 800a90c:	0800b934 	.word	0x0800b934
 800a910:	0800b93e 	.word	0x0800b93e
 800a914:	08008779 	.word	0x08008779
 800a918:	0800a669 	.word	0x0800a669
 800a91c:	0800b93a 	.word	0x0800b93a

0800a920 <_sbrk_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d06      	ldr	r5, [pc, #24]	; (800a93c <_sbrk_r+0x1c>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7f8 fba2 	bl	8003074 <_sbrk>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_sbrk_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_sbrk_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	2000054c 	.word	0x2000054c

0800a940 <__assert_func>:
 800a940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a942:	4614      	mov	r4, r2
 800a944:	461a      	mov	r2, r3
 800a946:	4b09      	ldr	r3, [pc, #36]	; (800a96c <__assert_func+0x2c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4605      	mov	r5, r0
 800a94c:	68d8      	ldr	r0, [r3, #12]
 800a94e:	b14c      	cbz	r4, 800a964 <__assert_func+0x24>
 800a950:	4b07      	ldr	r3, [pc, #28]	; (800a970 <__assert_func+0x30>)
 800a952:	9100      	str	r1, [sp, #0]
 800a954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a958:	4906      	ldr	r1, [pc, #24]	; (800a974 <__assert_func+0x34>)
 800a95a:	462b      	mov	r3, r5
 800a95c:	f000 f80e 	bl	800a97c <fiprintf>
 800a960:	f000 faac 	bl	800aebc <abort>
 800a964:	4b04      	ldr	r3, [pc, #16]	; (800a978 <__assert_func+0x38>)
 800a966:	461c      	mov	r4, r3
 800a968:	e7f3      	b.n	800a952 <__assert_func+0x12>
 800a96a:	bf00      	nop
 800a96c:	20000014 	.word	0x20000014
 800a970:	0800b945 	.word	0x0800b945
 800a974:	0800b952 	.word	0x0800b952
 800a978:	0800b980 	.word	0x0800b980

0800a97c <fiprintf>:
 800a97c:	b40e      	push	{r1, r2, r3}
 800a97e:	b503      	push	{r0, r1, lr}
 800a980:	4601      	mov	r1, r0
 800a982:	ab03      	add	r3, sp, #12
 800a984:	4805      	ldr	r0, [pc, #20]	; (800a99c <fiprintf+0x20>)
 800a986:	f853 2b04 	ldr.w	r2, [r3], #4
 800a98a:	6800      	ldr	r0, [r0, #0]
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	f000 f897 	bl	800aac0 <_vfiprintf_r>
 800a992:	b002      	add	sp, #8
 800a994:	f85d eb04 	ldr.w	lr, [sp], #4
 800a998:	b003      	add	sp, #12
 800a99a:	4770      	bx	lr
 800a99c:	20000014 	.word	0x20000014

0800a9a0 <__ascii_mbtowc>:
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	b901      	cbnz	r1, 800a9a6 <__ascii_mbtowc+0x6>
 800a9a4:	a901      	add	r1, sp, #4
 800a9a6:	b142      	cbz	r2, 800a9ba <__ascii_mbtowc+0x1a>
 800a9a8:	b14b      	cbz	r3, 800a9be <__ascii_mbtowc+0x1e>
 800a9aa:	7813      	ldrb	r3, [r2, #0]
 800a9ac:	600b      	str	r3, [r1, #0]
 800a9ae:	7812      	ldrb	r2, [r2, #0]
 800a9b0:	1e10      	subs	r0, r2, #0
 800a9b2:	bf18      	it	ne
 800a9b4:	2001      	movne	r0, #1
 800a9b6:	b002      	add	sp, #8
 800a9b8:	4770      	bx	lr
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	e7fb      	b.n	800a9b6 <__ascii_mbtowc+0x16>
 800a9be:	f06f 0001 	mvn.w	r0, #1
 800a9c2:	e7f8      	b.n	800a9b6 <__ascii_mbtowc+0x16>

0800a9c4 <memmove>:
 800a9c4:	4288      	cmp	r0, r1
 800a9c6:	b510      	push	{r4, lr}
 800a9c8:	eb01 0402 	add.w	r4, r1, r2
 800a9cc:	d902      	bls.n	800a9d4 <memmove+0x10>
 800a9ce:	4284      	cmp	r4, r0
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	d807      	bhi.n	800a9e4 <memmove+0x20>
 800a9d4:	1e43      	subs	r3, r0, #1
 800a9d6:	42a1      	cmp	r1, r4
 800a9d8:	d008      	beq.n	800a9ec <memmove+0x28>
 800a9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9e2:	e7f8      	b.n	800a9d6 <memmove+0x12>
 800a9e4:	4402      	add	r2, r0
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	428a      	cmp	r2, r1
 800a9ea:	d100      	bne.n	800a9ee <memmove+0x2a>
 800a9ec:	bd10      	pop	{r4, pc}
 800a9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9f6:	e7f7      	b.n	800a9e8 <memmove+0x24>

0800a9f8 <__malloc_lock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__malloc_lock+0x8>)
 800a9fa:	f000 bc1f 	b.w	800b23c <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20000550 	.word	0x20000550

0800aa04 <__malloc_unlock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__malloc_unlock+0x8>)
 800aa06:	f000 bc1a 	b.w	800b23e <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20000550 	.word	0x20000550

0800aa10 <_realloc_r>:
 800aa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	4680      	mov	r8, r0
 800aa16:	4614      	mov	r4, r2
 800aa18:	460e      	mov	r6, r1
 800aa1a:	b921      	cbnz	r1, 800aa26 <_realloc_r+0x16>
 800aa1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	4611      	mov	r1, r2
 800aa22:	f7ff bdad 	b.w	800a580 <_malloc_r>
 800aa26:	b92a      	cbnz	r2, 800aa34 <_realloc_r+0x24>
 800aa28:	f7ff fd3e 	bl	800a4a8 <_free_r>
 800aa2c:	4625      	mov	r5, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa34:	f000 fc6a 	bl	800b30c <_malloc_usable_size_r>
 800aa38:	4284      	cmp	r4, r0
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	d802      	bhi.n	800aa44 <_realloc_r+0x34>
 800aa3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa42:	d812      	bhi.n	800aa6a <_realloc_r+0x5a>
 800aa44:	4621      	mov	r1, r4
 800aa46:	4640      	mov	r0, r8
 800aa48:	f7ff fd9a 	bl	800a580 <_malloc_r>
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d0ed      	beq.n	800aa2e <_realloc_r+0x1e>
 800aa52:	42bc      	cmp	r4, r7
 800aa54:	4622      	mov	r2, r4
 800aa56:	4631      	mov	r1, r6
 800aa58:	bf28      	it	cs
 800aa5a:	463a      	movcs	r2, r7
 800aa5c:	f7fd fdd6 	bl	800860c <memcpy>
 800aa60:	4631      	mov	r1, r6
 800aa62:	4640      	mov	r0, r8
 800aa64:	f7ff fd20 	bl	800a4a8 <_free_r>
 800aa68:	e7e1      	b.n	800aa2e <_realloc_r+0x1e>
 800aa6a:	4635      	mov	r5, r6
 800aa6c:	e7df      	b.n	800aa2e <_realloc_r+0x1e>

0800aa6e <__sfputc_r>:
 800aa6e:	6893      	ldr	r3, [r2, #8]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	b410      	push	{r4}
 800aa76:	6093      	str	r3, [r2, #8]
 800aa78:	da08      	bge.n	800aa8c <__sfputc_r+0x1e>
 800aa7a:	6994      	ldr	r4, [r2, #24]
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	db01      	blt.n	800aa84 <__sfputc_r+0x16>
 800aa80:	290a      	cmp	r1, #10
 800aa82:	d103      	bne.n	800aa8c <__sfputc_r+0x1e>
 800aa84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa88:	f000 b94a 	b.w	800ad20 <__swbuf_r>
 800aa8c:	6813      	ldr	r3, [r2, #0]
 800aa8e:	1c58      	adds	r0, r3, #1
 800aa90:	6010      	str	r0, [r2, #0]
 800aa92:	7019      	strb	r1, [r3, #0]
 800aa94:	4608      	mov	r0, r1
 800aa96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <__sfputs_r>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	18d5      	adds	r5, r2, r3
 800aaa6:	42ac      	cmp	r4, r5
 800aaa8:	d101      	bne.n	800aaae <__sfputs_r+0x12>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	e007      	b.n	800aabe <__sfputs_r+0x22>
 800aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab2:	463a      	mov	r2, r7
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7ff ffda 	bl	800aa6e <__sfputc_r>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	d1f3      	bne.n	800aaa6 <__sfputs_r+0xa>
 800aabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aac0 <_vfiprintf_r>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	460d      	mov	r5, r1
 800aac6:	b09d      	sub	sp, #116	; 0x74
 800aac8:	4614      	mov	r4, r2
 800aaca:	4698      	mov	r8, r3
 800aacc:	4606      	mov	r6, r0
 800aace:	b118      	cbz	r0, 800aad8 <_vfiprintf_r+0x18>
 800aad0:	6983      	ldr	r3, [r0, #24]
 800aad2:	b90b      	cbnz	r3, 800aad8 <_vfiprintf_r+0x18>
 800aad4:	f000 fb14 	bl	800b100 <__sinit>
 800aad8:	4b89      	ldr	r3, [pc, #548]	; (800ad00 <_vfiprintf_r+0x240>)
 800aada:	429d      	cmp	r5, r3
 800aadc:	d11b      	bne.n	800ab16 <_vfiprintf_r+0x56>
 800aade:	6875      	ldr	r5, [r6, #4]
 800aae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae2:	07d9      	lsls	r1, r3, #31
 800aae4:	d405      	bmi.n	800aaf2 <_vfiprintf_r+0x32>
 800aae6:	89ab      	ldrh	r3, [r5, #12]
 800aae8:	059a      	lsls	r2, r3, #22
 800aaea:	d402      	bmi.n	800aaf2 <_vfiprintf_r+0x32>
 800aaec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaee:	f000 fba5 	bl	800b23c <__retarget_lock_acquire_recursive>
 800aaf2:	89ab      	ldrh	r3, [r5, #12]
 800aaf4:	071b      	lsls	r3, r3, #28
 800aaf6:	d501      	bpl.n	800aafc <_vfiprintf_r+0x3c>
 800aaf8:	692b      	ldr	r3, [r5, #16]
 800aafa:	b9eb      	cbnz	r3, 800ab38 <_vfiprintf_r+0x78>
 800aafc:	4629      	mov	r1, r5
 800aafe:	4630      	mov	r0, r6
 800ab00:	f000 f96e 	bl	800ade0 <__swsetup_r>
 800ab04:	b1c0      	cbz	r0, 800ab38 <_vfiprintf_r+0x78>
 800ab06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab08:	07dc      	lsls	r4, r3, #31
 800ab0a:	d50e      	bpl.n	800ab2a <_vfiprintf_r+0x6a>
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	b01d      	add	sp, #116	; 0x74
 800ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab16:	4b7b      	ldr	r3, [pc, #492]	; (800ad04 <_vfiprintf_r+0x244>)
 800ab18:	429d      	cmp	r5, r3
 800ab1a:	d101      	bne.n	800ab20 <_vfiprintf_r+0x60>
 800ab1c:	68b5      	ldr	r5, [r6, #8]
 800ab1e:	e7df      	b.n	800aae0 <_vfiprintf_r+0x20>
 800ab20:	4b79      	ldr	r3, [pc, #484]	; (800ad08 <_vfiprintf_r+0x248>)
 800ab22:	429d      	cmp	r5, r3
 800ab24:	bf08      	it	eq
 800ab26:	68f5      	ldreq	r5, [r6, #12]
 800ab28:	e7da      	b.n	800aae0 <_vfiprintf_r+0x20>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	0598      	lsls	r0, r3, #22
 800ab2e:	d4ed      	bmi.n	800ab0c <_vfiprintf_r+0x4c>
 800ab30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab32:	f000 fb84 	bl	800b23e <__retarget_lock_release_recursive>
 800ab36:	e7e9      	b.n	800ab0c <_vfiprintf_r+0x4c>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3c:	2320      	movs	r3, #32
 800ab3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab46:	2330      	movs	r3, #48	; 0x30
 800ab48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad0c <_vfiprintf_r+0x24c>
 800ab4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab50:	f04f 0901 	mov.w	r9, #1
 800ab54:	4623      	mov	r3, r4
 800ab56:	469a      	mov	sl, r3
 800ab58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab5c:	b10a      	cbz	r2, 800ab62 <_vfiprintf_r+0xa2>
 800ab5e:	2a25      	cmp	r2, #37	; 0x25
 800ab60:	d1f9      	bne.n	800ab56 <_vfiprintf_r+0x96>
 800ab62:	ebba 0b04 	subs.w	fp, sl, r4
 800ab66:	d00b      	beq.n	800ab80 <_vfiprintf_r+0xc0>
 800ab68:	465b      	mov	r3, fp
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7ff ff94 	bl	800aa9c <__sfputs_r>
 800ab74:	3001      	adds	r0, #1
 800ab76:	f000 80aa 	beq.w	800acce <_vfiprintf_r+0x20e>
 800ab7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab7c:	445a      	add	r2, fp
 800ab7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab80:	f89a 3000 	ldrb.w	r3, [sl]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80a2 	beq.w	800acce <_vfiprintf_r+0x20e>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab94:	f10a 0a01 	add.w	sl, sl, #1
 800ab98:	9304      	str	r3, [sp, #16]
 800ab9a:	9307      	str	r3, [sp, #28]
 800ab9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aba0:	931a      	str	r3, [sp, #104]	; 0x68
 800aba2:	4654      	mov	r4, sl
 800aba4:	2205      	movs	r2, #5
 800aba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abaa:	4858      	ldr	r0, [pc, #352]	; (800ad0c <_vfiprintf_r+0x24c>)
 800abac:	f7f5 fb20 	bl	80001f0 <memchr>
 800abb0:	9a04      	ldr	r2, [sp, #16]
 800abb2:	b9d8      	cbnz	r0, 800abec <_vfiprintf_r+0x12c>
 800abb4:	06d1      	lsls	r1, r2, #27
 800abb6:	bf44      	itt	mi
 800abb8:	2320      	movmi	r3, #32
 800abba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abbe:	0713      	lsls	r3, r2, #28
 800abc0:	bf44      	itt	mi
 800abc2:	232b      	movmi	r3, #43	; 0x2b
 800abc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc8:	f89a 3000 	ldrb.w	r3, [sl]
 800abcc:	2b2a      	cmp	r3, #42	; 0x2a
 800abce:	d015      	beq.n	800abfc <_vfiprintf_r+0x13c>
 800abd0:	9a07      	ldr	r2, [sp, #28]
 800abd2:	4654      	mov	r4, sl
 800abd4:	2000      	movs	r0, #0
 800abd6:	f04f 0c0a 	mov.w	ip, #10
 800abda:	4621      	mov	r1, r4
 800abdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe0:	3b30      	subs	r3, #48	; 0x30
 800abe2:	2b09      	cmp	r3, #9
 800abe4:	d94e      	bls.n	800ac84 <_vfiprintf_r+0x1c4>
 800abe6:	b1b0      	cbz	r0, 800ac16 <_vfiprintf_r+0x156>
 800abe8:	9207      	str	r2, [sp, #28]
 800abea:	e014      	b.n	800ac16 <_vfiprintf_r+0x156>
 800abec:	eba0 0308 	sub.w	r3, r0, r8
 800abf0:	fa09 f303 	lsl.w	r3, r9, r3
 800abf4:	4313      	orrs	r3, r2
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	46a2      	mov	sl, r4
 800abfa:	e7d2      	b.n	800aba2 <_vfiprintf_r+0xe2>
 800abfc:	9b03      	ldr	r3, [sp, #12]
 800abfe:	1d19      	adds	r1, r3, #4
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	9103      	str	r1, [sp, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	bfbb      	ittet	lt
 800ac08:	425b      	neglt	r3, r3
 800ac0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac0e:	9307      	strge	r3, [sp, #28]
 800ac10:	9307      	strlt	r3, [sp, #28]
 800ac12:	bfb8      	it	lt
 800ac14:	9204      	strlt	r2, [sp, #16]
 800ac16:	7823      	ldrb	r3, [r4, #0]
 800ac18:	2b2e      	cmp	r3, #46	; 0x2e
 800ac1a:	d10c      	bne.n	800ac36 <_vfiprintf_r+0x176>
 800ac1c:	7863      	ldrb	r3, [r4, #1]
 800ac1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac20:	d135      	bne.n	800ac8e <_vfiprintf_r+0x1ce>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	1d1a      	adds	r2, r3, #4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	9203      	str	r2, [sp, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfb8      	it	lt
 800ac2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac32:	3402      	adds	r4, #2
 800ac34:	9305      	str	r3, [sp, #20]
 800ac36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad1c <_vfiprintf_r+0x25c>
 800ac3a:	7821      	ldrb	r1, [r4, #0]
 800ac3c:	2203      	movs	r2, #3
 800ac3e:	4650      	mov	r0, sl
 800ac40:	f7f5 fad6 	bl	80001f0 <memchr>
 800ac44:	b140      	cbz	r0, 800ac58 <_vfiprintf_r+0x198>
 800ac46:	2340      	movs	r3, #64	; 0x40
 800ac48:	eba0 000a 	sub.w	r0, r0, sl
 800ac4c:	fa03 f000 	lsl.w	r0, r3, r0
 800ac50:	9b04      	ldr	r3, [sp, #16]
 800ac52:	4303      	orrs	r3, r0
 800ac54:	3401      	adds	r4, #1
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac5c:	482c      	ldr	r0, [pc, #176]	; (800ad10 <_vfiprintf_r+0x250>)
 800ac5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac62:	2206      	movs	r2, #6
 800ac64:	f7f5 fac4 	bl	80001f0 <memchr>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d03f      	beq.n	800acec <_vfiprintf_r+0x22c>
 800ac6c:	4b29      	ldr	r3, [pc, #164]	; (800ad14 <_vfiprintf_r+0x254>)
 800ac6e:	bb1b      	cbnz	r3, 800acb8 <_vfiprintf_r+0x1f8>
 800ac70:	9b03      	ldr	r3, [sp, #12]
 800ac72:	3307      	adds	r3, #7
 800ac74:	f023 0307 	bic.w	r3, r3, #7
 800ac78:	3308      	adds	r3, #8
 800ac7a:	9303      	str	r3, [sp, #12]
 800ac7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac7e:	443b      	add	r3, r7
 800ac80:	9309      	str	r3, [sp, #36]	; 0x24
 800ac82:	e767      	b.n	800ab54 <_vfiprintf_r+0x94>
 800ac84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac88:	460c      	mov	r4, r1
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	e7a5      	b.n	800abda <_vfiprintf_r+0x11a>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	3401      	adds	r4, #1
 800ac92:	9305      	str	r3, [sp, #20]
 800ac94:	4619      	mov	r1, r3
 800ac96:	f04f 0c0a 	mov.w	ip, #10
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca0:	3a30      	subs	r2, #48	; 0x30
 800aca2:	2a09      	cmp	r2, #9
 800aca4:	d903      	bls.n	800acae <_vfiprintf_r+0x1ee>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0c5      	beq.n	800ac36 <_vfiprintf_r+0x176>
 800acaa:	9105      	str	r1, [sp, #20]
 800acac:	e7c3      	b.n	800ac36 <_vfiprintf_r+0x176>
 800acae:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb2:	4604      	mov	r4, r0
 800acb4:	2301      	movs	r3, #1
 800acb6:	e7f0      	b.n	800ac9a <_vfiprintf_r+0x1da>
 800acb8:	ab03      	add	r3, sp, #12
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	462a      	mov	r2, r5
 800acbe:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <_vfiprintf_r+0x258>)
 800acc0:	a904      	add	r1, sp, #16
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7fd fd58 	bl	8008778 <_printf_float>
 800acc8:	4607      	mov	r7, r0
 800acca:	1c78      	adds	r0, r7, #1
 800accc:	d1d6      	bne.n	800ac7c <_vfiprintf_r+0x1bc>
 800acce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd0:	07d9      	lsls	r1, r3, #31
 800acd2:	d405      	bmi.n	800ace0 <_vfiprintf_r+0x220>
 800acd4:	89ab      	ldrh	r3, [r5, #12]
 800acd6:	059a      	lsls	r2, r3, #22
 800acd8:	d402      	bmi.n	800ace0 <_vfiprintf_r+0x220>
 800acda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acdc:	f000 faaf 	bl	800b23e <__retarget_lock_release_recursive>
 800ace0:	89ab      	ldrh	r3, [r5, #12]
 800ace2:	065b      	lsls	r3, r3, #25
 800ace4:	f53f af12 	bmi.w	800ab0c <_vfiprintf_r+0x4c>
 800ace8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acea:	e711      	b.n	800ab10 <_vfiprintf_r+0x50>
 800acec:	ab03      	add	r3, sp, #12
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	462a      	mov	r2, r5
 800acf2:	4b09      	ldr	r3, [pc, #36]	; (800ad18 <_vfiprintf_r+0x258>)
 800acf4:	a904      	add	r1, sp, #16
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7fd ffe2 	bl	8008cc0 <_printf_i>
 800acfc:	e7e4      	b.n	800acc8 <_vfiprintf_r+0x208>
 800acfe:	bf00      	nop
 800ad00:	0800b9ac 	.word	0x0800b9ac
 800ad04:	0800b9cc 	.word	0x0800b9cc
 800ad08:	0800b98c 	.word	0x0800b98c
 800ad0c:	0800b934 	.word	0x0800b934
 800ad10:	0800b93e 	.word	0x0800b93e
 800ad14:	08008779 	.word	0x08008779
 800ad18:	0800aa9d 	.word	0x0800aa9d
 800ad1c:	0800b93a 	.word	0x0800b93a

0800ad20 <__swbuf_r>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	460e      	mov	r6, r1
 800ad24:	4614      	mov	r4, r2
 800ad26:	4605      	mov	r5, r0
 800ad28:	b118      	cbz	r0, 800ad32 <__swbuf_r+0x12>
 800ad2a:	6983      	ldr	r3, [r0, #24]
 800ad2c:	b90b      	cbnz	r3, 800ad32 <__swbuf_r+0x12>
 800ad2e:	f000 f9e7 	bl	800b100 <__sinit>
 800ad32:	4b21      	ldr	r3, [pc, #132]	; (800adb8 <__swbuf_r+0x98>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	d12b      	bne.n	800ad90 <__swbuf_r+0x70>
 800ad38:	686c      	ldr	r4, [r5, #4]
 800ad3a:	69a3      	ldr	r3, [r4, #24]
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	071a      	lsls	r2, r3, #28
 800ad42:	d52f      	bpl.n	800ada4 <__swbuf_r+0x84>
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	b36b      	cbz	r3, 800ada4 <__swbuf_r+0x84>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	6820      	ldr	r0, [r4, #0]
 800ad4c:	1ac0      	subs	r0, r0, r3
 800ad4e:	6963      	ldr	r3, [r4, #20]
 800ad50:	b2f6      	uxtb	r6, r6
 800ad52:	4283      	cmp	r3, r0
 800ad54:	4637      	mov	r7, r6
 800ad56:	dc04      	bgt.n	800ad62 <__swbuf_r+0x42>
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f000 f93c 	bl	800afd8 <_fflush_r>
 800ad60:	bb30      	cbnz	r0, 800adb0 <__swbuf_r+0x90>
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	701e      	strb	r6, [r3, #0]
 800ad70:	6963      	ldr	r3, [r4, #20]
 800ad72:	3001      	adds	r0, #1
 800ad74:	4283      	cmp	r3, r0
 800ad76:	d004      	beq.n	800ad82 <__swbuf_r+0x62>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	07db      	lsls	r3, r3, #31
 800ad7c:	d506      	bpl.n	800ad8c <__swbuf_r+0x6c>
 800ad7e:	2e0a      	cmp	r6, #10
 800ad80:	d104      	bne.n	800ad8c <__swbuf_r+0x6c>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 f927 	bl	800afd8 <_fflush_r>
 800ad8a:	b988      	cbnz	r0, 800adb0 <__swbuf_r+0x90>
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <__swbuf_r+0x9c>)
 800ad92:	429c      	cmp	r4, r3
 800ad94:	d101      	bne.n	800ad9a <__swbuf_r+0x7a>
 800ad96:	68ac      	ldr	r4, [r5, #8]
 800ad98:	e7cf      	b.n	800ad3a <__swbuf_r+0x1a>
 800ad9a:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <__swbuf_r+0xa0>)
 800ad9c:	429c      	cmp	r4, r3
 800ad9e:	bf08      	it	eq
 800ada0:	68ec      	ldreq	r4, [r5, #12]
 800ada2:	e7ca      	b.n	800ad3a <__swbuf_r+0x1a>
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 f81a 	bl	800ade0 <__swsetup_r>
 800adac:	2800      	cmp	r0, #0
 800adae:	d0cb      	beq.n	800ad48 <__swbuf_r+0x28>
 800adb0:	f04f 37ff 	mov.w	r7, #4294967295
 800adb4:	e7ea      	b.n	800ad8c <__swbuf_r+0x6c>
 800adb6:	bf00      	nop
 800adb8:	0800b9ac 	.word	0x0800b9ac
 800adbc:	0800b9cc 	.word	0x0800b9cc
 800adc0:	0800b98c 	.word	0x0800b98c

0800adc4 <__ascii_wctomb>:
 800adc4:	b149      	cbz	r1, 800adda <__ascii_wctomb+0x16>
 800adc6:	2aff      	cmp	r2, #255	; 0xff
 800adc8:	bf85      	ittet	hi
 800adca:	238a      	movhi	r3, #138	; 0x8a
 800adcc:	6003      	strhi	r3, [r0, #0]
 800adce:	700a      	strbls	r2, [r1, #0]
 800add0:	f04f 30ff 	movhi.w	r0, #4294967295
 800add4:	bf98      	it	ls
 800add6:	2001      	movls	r0, #1
 800add8:	4770      	bx	lr
 800adda:	4608      	mov	r0, r1
 800addc:	4770      	bx	lr
	...

0800ade0 <__swsetup_r>:
 800ade0:	4b32      	ldr	r3, [pc, #200]	; (800aeac <__swsetup_r+0xcc>)
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	681d      	ldr	r5, [r3, #0]
 800ade6:	4606      	mov	r6, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	b125      	cbz	r5, 800adf6 <__swsetup_r+0x16>
 800adec:	69ab      	ldr	r3, [r5, #24]
 800adee:	b913      	cbnz	r3, 800adf6 <__swsetup_r+0x16>
 800adf0:	4628      	mov	r0, r5
 800adf2:	f000 f985 	bl	800b100 <__sinit>
 800adf6:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <__swsetup_r+0xd0>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	d10f      	bne.n	800ae1c <__swsetup_r+0x3c>
 800adfc:	686c      	ldr	r4, [r5, #4]
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae04:	0719      	lsls	r1, r3, #28
 800ae06:	d42c      	bmi.n	800ae62 <__swsetup_r+0x82>
 800ae08:	06dd      	lsls	r5, r3, #27
 800ae0a:	d411      	bmi.n	800ae30 <__swsetup_r+0x50>
 800ae0c:	2309      	movs	r3, #9
 800ae0e:	6033      	str	r3, [r6, #0]
 800ae10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	e03e      	b.n	800ae9a <__swsetup_r+0xba>
 800ae1c:	4b25      	ldr	r3, [pc, #148]	; (800aeb4 <__swsetup_r+0xd4>)
 800ae1e:	429c      	cmp	r4, r3
 800ae20:	d101      	bne.n	800ae26 <__swsetup_r+0x46>
 800ae22:	68ac      	ldr	r4, [r5, #8]
 800ae24:	e7eb      	b.n	800adfe <__swsetup_r+0x1e>
 800ae26:	4b24      	ldr	r3, [pc, #144]	; (800aeb8 <__swsetup_r+0xd8>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	bf08      	it	eq
 800ae2c:	68ec      	ldreq	r4, [r5, #12]
 800ae2e:	e7e6      	b.n	800adfe <__swsetup_r+0x1e>
 800ae30:	0758      	lsls	r0, r3, #29
 800ae32:	d512      	bpl.n	800ae5a <__swsetup_r+0x7a>
 800ae34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae36:	b141      	cbz	r1, 800ae4a <__swsetup_r+0x6a>
 800ae38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae3c:	4299      	cmp	r1, r3
 800ae3e:	d002      	beq.n	800ae46 <__swsetup_r+0x66>
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff fb31 	bl	800a4a8 <_free_r>
 800ae46:	2300      	movs	r3, #0
 800ae48:	6363      	str	r3, [r4, #52]	; 0x34
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	2300      	movs	r3, #0
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f043 0308 	orr.w	r3, r3, #8
 800ae60:	81a3      	strh	r3, [r4, #12]
 800ae62:	6923      	ldr	r3, [r4, #16]
 800ae64:	b94b      	cbnz	r3, 800ae7a <__swsetup_r+0x9a>
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae70:	d003      	beq.n	800ae7a <__swsetup_r+0x9a>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4630      	mov	r0, r6
 800ae76:	f000 fa09 	bl	800b28c <__smakebuf_r>
 800ae7a:	89a0      	ldrh	r0, [r4, #12]
 800ae7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae80:	f010 0301 	ands.w	r3, r0, #1
 800ae84:	d00a      	beq.n	800ae9c <__swsetup_r+0xbc>
 800ae86:	2300      	movs	r3, #0
 800ae88:	60a3      	str	r3, [r4, #8]
 800ae8a:	6963      	ldr	r3, [r4, #20]
 800ae8c:	425b      	negs	r3, r3
 800ae8e:	61a3      	str	r3, [r4, #24]
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	b943      	cbnz	r3, 800aea6 <__swsetup_r+0xc6>
 800ae94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae98:	d1ba      	bne.n	800ae10 <__swsetup_r+0x30>
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	0781      	lsls	r1, r0, #30
 800ae9e:	bf58      	it	pl
 800aea0:	6963      	ldrpl	r3, [r4, #20]
 800aea2:	60a3      	str	r3, [r4, #8]
 800aea4:	e7f4      	b.n	800ae90 <__swsetup_r+0xb0>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e7f7      	b.n	800ae9a <__swsetup_r+0xba>
 800aeaa:	bf00      	nop
 800aeac:	20000014 	.word	0x20000014
 800aeb0:	0800b9ac 	.word	0x0800b9ac
 800aeb4:	0800b9cc 	.word	0x0800b9cc
 800aeb8:	0800b98c 	.word	0x0800b98c

0800aebc <abort>:
 800aebc:	b508      	push	{r3, lr}
 800aebe:	2006      	movs	r0, #6
 800aec0:	f000 fa54 	bl	800b36c <raise>
 800aec4:	2001      	movs	r0, #1
 800aec6:	f7f8 f85d 	bl	8002f84 <_exit>
	...

0800aecc <__sflush_r>:
 800aecc:	898a      	ldrh	r2, [r1, #12]
 800aece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed2:	4605      	mov	r5, r0
 800aed4:	0710      	lsls	r0, r2, #28
 800aed6:	460c      	mov	r4, r1
 800aed8:	d458      	bmi.n	800af8c <__sflush_r+0xc0>
 800aeda:	684b      	ldr	r3, [r1, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dc05      	bgt.n	800aeec <__sflush_r+0x20>
 800aee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dc02      	bgt.n	800aeec <__sflush_r+0x20>
 800aee6:	2000      	movs	r0, #0
 800aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	d0f9      	beq.n	800aee6 <__sflush_r+0x1a>
 800aef2:	2300      	movs	r3, #0
 800aef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aef8:	682f      	ldr	r7, [r5, #0]
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	d032      	beq.n	800af64 <__sflush_r+0x98>
 800aefe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	075a      	lsls	r2, r3, #29
 800af04:	d505      	bpl.n	800af12 <__sflush_r+0x46>
 800af06:	6863      	ldr	r3, [r4, #4]
 800af08:	1ac0      	subs	r0, r0, r3
 800af0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af0c:	b10b      	cbz	r3, 800af12 <__sflush_r+0x46>
 800af0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af10:	1ac0      	subs	r0, r0, r3
 800af12:	2300      	movs	r3, #0
 800af14:	4602      	mov	r2, r0
 800af16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af18:	6a21      	ldr	r1, [r4, #32]
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b0      	blx	r6
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	d106      	bne.n	800af32 <__sflush_r+0x66>
 800af24:	6829      	ldr	r1, [r5, #0]
 800af26:	291d      	cmp	r1, #29
 800af28:	d82c      	bhi.n	800af84 <__sflush_r+0xb8>
 800af2a:	4a2a      	ldr	r2, [pc, #168]	; (800afd4 <__sflush_r+0x108>)
 800af2c:	40ca      	lsrs	r2, r1
 800af2e:	07d6      	lsls	r6, r2, #31
 800af30:	d528      	bpl.n	800af84 <__sflush_r+0xb8>
 800af32:	2200      	movs	r2, #0
 800af34:	6062      	str	r2, [r4, #4]
 800af36:	04d9      	lsls	r1, r3, #19
 800af38:	6922      	ldr	r2, [r4, #16]
 800af3a:	6022      	str	r2, [r4, #0]
 800af3c:	d504      	bpl.n	800af48 <__sflush_r+0x7c>
 800af3e:	1c42      	adds	r2, r0, #1
 800af40:	d101      	bne.n	800af46 <__sflush_r+0x7a>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b903      	cbnz	r3, 800af48 <__sflush_r+0x7c>
 800af46:	6560      	str	r0, [r4, #84]	; 0x54
 800af48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af4a:	602f      	str	r7, [r5, #0]
 800af4c:	2900      	cmp	r1, #0
 800af4e:	d0ca      	beq.n	800aee6 <__sflush_r+0x1a>
 800af50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af54:	4299      	cmp	r1, r3
 800af56:	d002      	beq.n	800af5e <__sflush_r+0x92>
 800af58:	4628      	mov	r0, r5
 800af5a:	f7ff faa5 	bl	800a4a8 <_free_r>
 800af5e:	2000      	movs	r0, #0
 800af60:	6360      	str	r0, [r4, #52]	; 0x34
 800af62:	e7c1      	b.n	800aee8 <__sflush_r+0x1c>
 800af64:	6a21      	ldr	r1, [r4, #32]
 800af66:	2301      	movs	r3, #1
 800af68:	4628      	mov	r0, r5
 800af6a:	47b0      	blx	r6
 800af6c:	1c41      	adds	r1, r0, #1
 800af6e:	d1c7      	bne.n	800af00 <__sflush_r+0x34>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0c4      	beq.n	800af00 <__sflush_r+0x34>
 800af76:	2b1d      	cmp	r3, #29
 800af78:	d001      	beq.n	800af7e <__sflush_r+0xb2>
 800af7a:	2b16      	cmp	r3, #22
 800af7c:	d101      	bne.n	800af82 <__sflush_r+0xb6>
 800af7e:	602f      	str	r7, [r5, #0]
 800af80:	e7b1      	b.n	800aee6 <__sflush_r+0x1a>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	e7ad      	b.n	800aee8 <__sflush_r+0x1c>
 800af8c:	690f      	ldr	r7, [r1, #16]
 800af8e:	2f00      	cmp	r7, #0
 800af90:	d0a9      	beq.n	800aee6 <__sflush_r+0x1a>
 800af92:	0793      	lsls	r3, r2, #30
 800af94:	680e      	ldr	r6, [r1, #0]
 800af96:	bf08      	it	eq
 800af98:	694b      	ldreq	r3, [r1, #20]
 800af9a:	600f      	str	r7, [r1, #0]
 800af9c:	bf18      	it	ne
 800af9e:	2300      	movne	r3, #0
 800afa0:	eba6 0807 	sub.w	r8, r6, r7
 800afa4:	608b      	str	r3, [r1, #8]
 800afa6:	f1b8 0f00 	cmp.w	r8, #0
 800afaa:	dd9c      	ble.n	800aee6 <__sflush_r+0x1a>
 800afac:	6a21      	ldr	r1, [r4, #32]
 800afae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afb0:	4643      	mov	r3, r8
 800afb2:	463a      	mov	r2, r7
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b0      	blx	r6
 800afb8:	2800      	cmp	r0, #0
 800afba:	dc06      	bgt.n	800afca <__sflush_r+0xfe>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc2:	81a3      	strh	r3, [r4, #12]
 800afc4:	f04f 30ff 	mov.w	r0, #4294967295
 800afc8:	e78e      	b.n	800aee8 <__sflush_r+0x1c>
 800afca:	4407      	add	r7, r0
 800afcc:	eba8 0800 	sub.w	r8, r8, r0
 800afd0:	e7e9      	b.n	800afa6 <__sflush_r+0xda>
 800afd2:	bf00      	nop
 800afd4:	20400001 	.word	0x20400001

0800afd8 <_fflush_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	690b      	ldr	r3, [r1, #16]
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	b913      	cbnz	r3, 800afe8 <_fflush_r+0x10>
 800afe2:	2500      	movs	r5, #0
 800afe4:	4628      	mov	r0, r5
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	b118      	cbz	r0, 800aff2 <_fflush_r+0x1a>
 800afea:	6983      	ldr	r3, [r0, #24]
 800afec:	b90b      	cbnz	r3, 800aff2 <_fflush_r+0x1a>
 800afee:	f000 f887 	bl	800b100 <__sinit>
 800aff2:	4b14      	ldr	r3, [pc, #80]	; (800b044 <_fflush_r+0x6c>)
 800aff4:	429c      	cmp	r4, r3
 800aff6:	d11b      	bne.n	800b030 <_fflush_r+0x58>
 800aff8:	686c      	ldr	r4, [r5, #4]
 800affa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0ef      	beq.n	800afe2 <_fflush_r+0xa>
 800b002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b004:	07d0      	lsls	r0, r2, #31
 800b006:	d404      	bmi.n	800b012 <_fflush_r+0x3a>
 800b008:	0599      	lsls	r1, r3, #22
 800b00a:	d402      	bmi.n	800b012 <_fflush_r+0x3a>
 800b00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b00e:	f000 f915 	bl	800b23c <__retarget_lock_acquire_recursive>
 800b012:	4628      	mov	r0, r5
 800b014:	4621      	mov	r1, r4
 800b016:	f7ff ff59 	bl	800aecc <__sflush_r>
 800b01a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b01c:	07da      	lsls	r2, r3, #31
 800b01e:	4605      	mov	r5, r0
 800b020:	d4e0      	bmi.n	800afe4 <_fflush_r+0xc>
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	059b      	lsls	r3, r3, #22
 800b026:	d4dd      	bmi.n	800afe4 <_fflush_r+0xc>
 800b028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b02a:	f000 f908 	bl	800b23e <__retarget_lock_release_recursive>
 800b02e:	e7d9      	b.n	800afe4 <_fflush_r+0xc>
 800b030:	4b05      	ldr	r3, [pc, #20]	; (800b048 <_fflush_r+0x70>)
 800b032:	429c      	cmp	r4, r3
 800b034:	d101      	bne.n	800b03a <_fflush_r+0x62>
 800b036:	68ac      	ldr	r4, [r5, #8]
 800b038:	e7df      	b.n	800affa <_fflush_r+0x22>
 800b03a:	4b04      	ldr	r3, [pc, #16]	; (800b04c <_fflush_r+0x74>)
 800b03c:	429c      	cmp	r4, r3
 800b03e:	bf08      	it	eq
 800b040:	68ec      	ldreq	r4, [r5, #12]
 800b042:	e7da      	b.n	800affa <_fflush_r+0x22>
 800b044:	0800b9ac 	.word	0x0800b9ac
 800b048:	0800b9cc 	.word	0x0800b9cc
 800b04c:	0800b98c 	.word	0x0800b98c

0800b050 <std>:
 800b050:	2300      	movs	r3, #0
 800b052:	b510      	push	{r4, lr}
 800b054:	4604      	mov	r4, r0
 800b056:	e9c0 3300 	strd	r3, r3, [r0]
 800b05a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b05e:	6083      	str	r3, [r0, #8]
 800b060:	8181      	strh	r1, [r0, #12]
 800b062:	6643      	str	r3, [r0, #100]	; 0x64
 800b064:	81c2      	strh	r2, [r0, #14]
 800b066:	6183      	str	r3, [r0, #24]
 800b068:	4619      	mov	r1, r3
 800b06a:	2208      	movs	r2, #8
 800b06c:	305c      	adds	r0, #92	; 0x5c
 800b06e:	f7fd fadb 	bl	8008628 <memset>
 800b072:	4b05      	ldr	r3, [pc, #20]	; (800b088 <std+0x38>)
 800b074:	6263      	str	r3, [r4, #36]	; 0x24
 800b076:	4b05      	ldr	r3, [pc, #20]	; (800b08c <std+0x3c>)
 800b078:	62a3      	str	r3, [r4, #40]	; 0x28
 800b07a:	4b05      	ldr	r3, [pc, #20]	; (800b090 <std+0x40>)
 800b07c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b07e:	4b05      	ldr	r3, [pc, #20]	; (800b094 <std+0x44>)
 800b080:	6224      	str	r4, [r4, #32]
 800b082:	6323      	str	r3, [r4, #48]	; 0x30
 800b084:	bd10      	pop	{r4, pc}
 800b086:	bf00      	nop
 800b088:	0800b3a5 	.word	0x0800b3a5
 800b08c:	0800b3c7 	.word	0x0800b3c7
 800b090:	0800b3ff 	.word	0x0800b3ff
 800b094:	0800b423 	.word	0x0800b423

0800b098 <_cleanup_r>:
 800b098:	4901      	ldr	r1, [pc, #4]	; (800b0a0 <_cleanup_r+0x8>)
 800b09a:	f000 b8af 	b.w	800b1fc <_fwalk_reent>
 800b09e:	bf00      	nop
 800b0a0:	0800afd9 	.word	0x0800afd9

0800b0a4 <__sfmoreglue>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	2268      	movs	r2, #104	; 0x68
 800b0a8:	1e4d      	subs	r5, r1, #1
 800b0aa:	4355      	muls	r5, r2
 800b0ac:	460e      	mov	r6, r1
 800b0ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0b2:	f7ff fa65 	bl	800a580 <_malloc_r>
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	b140      	cbz	r0, 800b0cc <__sfmoreglue+0x28>
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b0c0:	300c      	adds	r0, #12
 800b0c2:	60a0      	str	r0, [r4, #8]
 800b0c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0c8:	f7fd faae 	bl	8008628 <memset>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}

0800b0d0 <__sfp_lock_acquire>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	; (800b0d8 <__sfp_lock_acquire+0x8>)
 800b0d2:	f000 b8b3 	b.w	800b23c <__retarget_lock_acquire_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	20000551 	.word	0x20000551

0800b0dc <__sfp_lock_release>:
 800b0dc:	4801      	ldr	r0, [pc, #4]	; (800b0e4 <__sfp_lock_release+0x8>)
 800b0de:	f000 b8ae 	b.w	800b23e <__retarget_lock_release_recursive>
 800b0e2:	bf00      	nop
 800b0e4:	20000551 	.word	0x20000551

0800b0e8 <__sinit_lock_acquire>:
 800b0e8:	4801      	ldr	r0, [pc, #4]	; (800b0f0 <__sinit_lock_acquire+0x8>)
 800b0ea:	f000 b8a7 	b.w	800b23c <__retarget_lock_acquire_recursive>
 800b0ee:	bf00      	nop
 800b0f0:	20000552 	.word	0x20000552

0800b0f4 <__sinit_lock_release>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__sinit_lock_release+0x8>)
 800b0f6:	f000 b8a2 	b.w	800b23e <__retarget_lock_release_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20000552 	.word	0x20000552

0800b100 <__sinit>:
 800b100:	b510      	push	{r4, lr}
 800b102:	4604      	mov	r4, r0
 800b104:	f7ff fff0 	bl	800b0e8 <__sinit_lock_acquire>
 800b108:	69a3      	ldr	r3, [r4, #24]
 800b10a:	b11b      	cbz	r3, 800b114 <__sinit+0x14>
 800b10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b110:	f7ff bff0 	b.w	800b0f4 <__sinit_lock_release>
 800b114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b118:	6523      	str	r3, [r4, #80]	; 0x50
 800b11a:	4b13      	ldr	r3, [pc, #76]	; (800b168 <__sinit+0x68>)
 800b11c:	4a13      	ldr	r2, [pc, #76]	; (800b16c <__sinit+0x6c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	62a2      	str	r2, [r4, #40]	; 0x28
 800b122:	42a3      	cmp	r3, r4
 800b124:	bf04      	itt	eq
 800b126:	2301      	moveq	r3, #1
 800b128:	61a3      	streq	r3, [r4, #24]
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f820 	bl	800b170 <__sfp>
 800b130:	6060      	str	r0, [r4, #4]
 800b132:	4620      	mov	r0, r4
 800b134:	f000 f81c 	bl	800b170 <__sfp>
 800b138:	60a0      	str	r0, [r4, #8]
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 f818 	bl	800b170 <__sfp>
 800b140:	2200      	movs	r2, #0
 800b142:	60e0      	str	r0, [r4, #12]
 800b144:	2104      	movs	r1, #4
 800b146:	6860      	ldr	r0, [r4, #4]
 800b148:	f7ff ff82 	bl	800b050 <std>
 800b14c:	68a0      	ldr	r0, [r4, #8]
 800b14e:	2201      	movs	r2, #1
 800b150:	2109      	movs	r1, #9
 800b152:	f7ff ff7d 	bl	800b050 <std>
 800b156:	68e0      	ldr	r0, [r4, #12]
 800b158:	2202      	movs	r2, #2
 800b15a:	2112      	movs	r1, #18
 800b15c:	f7ff ff78 	bl	800b050 <std>
 800b160:	2301      	movs	r3, #1
 800b162:	61a3      	str	r3, [r4, #24]
 800b164:	e7d2      	b.n	800b10c <__sinit+0xc>
 800b166:	bf00      	nop
 800b168:	0800b610 	.word	0x0800b610
 800b16c:	0800b099 	.word	0x0800b099

0800b170 <__sfp>:
 800b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b172:	4607      	mov	r7, r0
 800b174:	f7ff ffac 	bl	800b0d0 <__sfp_lock_acquire>
 800b178:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <__sfp+0x84>)
 800b17a:	681e      	ldr	r6, [r3, #0]
 800b17c:	69b3      	ldr	r3, [r6, #24]
 800b17e:	b913      	cbnz	r3, 800b186 <__sfp+0x16>
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff ffbd 	bl	800b100 <__sinit>
 800b186:	3648      	adds	r6, #72	; 0x48
 800b188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	d503      	bpl.n	800b198 <__sfp+0x28>
 800b190:	6833      	ldr	r3, [r6, #0]
 800b192:	b30b      	cbz	r3, 800b1d8 <__sfp+0x68>
 800b194:	6836      	ldr	r6, [r6, #0]
 800b196:	e7f7      	b.n	800b188 <__sfp+0x18>
 800b198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b19c:	b9d5      	cbnz	r5, 800b1d4 <__sfp+0x64>
 800b19e:	4b16      	ldr	r3, [pc, #88]	; (800b1f8 <__sfp+0x88>)
 800b1a0:	60e3      	str	r3, [r4, #12]
 800b1a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b1a8:	f000 f847 	bl	800b23a <__retarget_lock_init_recursive>
 800b1ac:	f7ff ff96 	bl	800b0dc <__sfp_lock_release>
 800b1b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1b8:	6025      	str	r5, [r4, #0]
 800b1ba:	61a5      	str	r5, [r4, #24]
 800b1bc:	2208      	movs	r2, #8
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1c4:	f7fd fa30 	bl	8008628 <memset>
 800b1c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d4:	3468      	adds	r4, #104	; 0x68
 800b1d6:	e7d9      	b.n	800b18c <__sfp+0x1c>
 800b1d8:	2104      	movs	r1, #4
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f7ff ff62 	bl	800b0a4 <__sfmoreglue>
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	6030      	str	r0, [r6, #0]
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d1d5      	bne.n	800b194 <__sfp+0x24>
 800b1e8:	f7ff ff78 	bl	800b0dc <__sfp_lock_release>
 800b1ec:	230c      	movs	r3, #12
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	e7ee      	b.n	800b1d0 <__sfp+0x60>
 800b1f2:	bf00      	nop
 800b1f4:	0800b610 	.word	0x0800b610
 800b1f8:	ffff0001 	.word	0xffff0001

0800b1fc <_fwalk_reent>:
 800b1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b200:	4606      	mov	r6, r0
 800b202:	4688      	mov	r8, r1
 800b204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b208:	2700      	movs	r7, #0
 800b20a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b20e:	f1b9 0901 	subs.w	r9, r9, #1
 800b212:	d505      	bpl.n	800b220 <_fwalk_reent+0x24>
 800b214:	6824      	ldr	r4, [r4, #0]
 800b216:	2c00      	cmp	r4, #0
 800b218:	d1f7      	bne.n	800b20a <_fwalk_reent+0xe>
 800b21a:	4638      	mov	r0, r7
 800b21c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b220:	89ab      	ldrh	r3, [r5, #12]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d907      	bls.n	800b236 <_fwalk_reent+0x3a>
 800b226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b22a:	3301      	adds	r3, #1
 800b22c:	d003      	beq.n	800b236 <_fwalk_reent+0x3a>
 800b22e:	4629      	mov	r1, r5
 800b230:	4630      	mov	r0, r6
 800b232:	47c0      	blx	r8
 800b234:	4307      	orrs	r7, r0
 800b236:	3568      	adds	r5, #104	; 0x68
 800b238:	e7e9      	b.n	800b20e <_fwalk_reent+0x12>

0800b23a <__retarget_lock_init_recursive>:
 800b23a:	4770      	bx	lr

0800b23c <__retarget_lock_acquire_recursive>:
 800b23c:	4770      	bx	lr

0800b23e <__retarget_lock_release_recursive>:
 800b23e:	4770      	bx	lr

0800b240 <__swhatbuf_r>:
 800b240:	b570      	push	{r4, r5, r6, lr}
 800b242:	460e      	mov	r6, r1
 800b244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b248:	2900      	cmp	r1, #0
 800b24a:	b096      	sub	sp, #88	; 0x58
 800b24c:	4614      	mov	r4, r2
 800b24e:	461d      	mov	r5, r3
 800b250:	da08      	bge.n	800b264 <__swhatbuf_r+0x24>
 800b252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	602a      	str	r2, [r5, #0]
 800b25a:	061a      	lsls	r2, r3, #24
 800b25c:	d410      	bmi.n	800b280 <__swhatbuf_r+0x40>
 800b25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b262:	e00e      	b.n	800b282 <__swhatbuf_r+0x42>
 800b264:	466a      	mov	r2, sp
 800b266:	f000 f903 	bl	800b470 <_fstat_r>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	dbf1      	blt.n	800b252 <__swhatbuf_r+0x12>
 800b26e:	9a01      	ldr	r2, [sp, #4]
 800b270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b278:	425a      	negs	r2, r3
 800b27a:	415a      	adcs	r2, r3
 800b27c:	602a      	str	r2, [r5, #0]
 800b27e:	e7ee      	b.n	800b25e <__swhatbuf_r+0x1e>
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	2000      	movs	r0, #0
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	b016      	add	sp, #88	; 0x58
 800b288:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b28c <__smakebuf_r>:
 800b28c:	898b      	ldrh	r3, [r1, #12]
 800b28e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b290:	079d      	lsls	r5, r3, #30
 800b292:	4606      	mov	r6, r0
 800b294:	460c      	mov	r4, r1
 800b296:	d507      	bpl.n	800b2a8 <__smakebuf_r+0x1c>
 800b298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	6123      	str	r3, [r4, #16]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	6163      	str	r3, [r4, #20]
 800b2a4:	b002      	add	sp, #8
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	ab01      	add	r3, sp, #4
 800b2aa:	466a      	mov	r2, sp
 800b2ac:	f7ff ffc8 	bl	800b240 <__swhatbuf_r>
 800b2b0:	9900      	ldr	r1, [sp, #0]
 800b2b2:	4605      	mov	r5, r0
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7ff f963 	bl	800a580 <_malloc_r>
 800b2ba:	b948      	cbnz	r0, 800b2d0 <__smakebuf_r+0x44>
 800b2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c0:	059a      	lsls	r2, r3, #22
 800b2c2:	d4ef      	bmi.n	800b2a4 <__smakebuf_r+0x18>
 800b2c4:	f023 0303 	bic.w	r3, r3, #3
 800b2c8:	f043 0302 	orr.w	r3, r3, #2
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	e7e3      	b.n	800b298 <__smakebuf_r+0xc>
 800b2d0:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <__smakebuf_r+0x7c>)
 800b2d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	6020      	str	r0, [r4, #0]
 800b2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	6163      	str	r3, [r4, #20]
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	6120      	str	r0, [r4, #16]
 800b2e6:	b15b      	cbz	r3, 800b300 <__smakebuf_r+0x74>
 800b2e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f8d1 	bl	800b494 <_isatty_r>
 800b2f2:	b128      	cbz	r0, 800b300 <__smakebuf_r+0x74>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	f023 0303 	bic.w	r3, r3, #3
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	89a0      	ldrh	r0, [r4, #12]
 800b302:	4305      	orrs	r5, r0
 800b304:	81a5      	strh	r5, [r4, #12]
 800b306:	e7cd      	b.n	800b2a4 <__smakebuf_r+0x18>
 800b308:	0800b099 	.word	0x0800b099

0800b30c <_malloc_usable_size_r>:
 800b30c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b310:	1f18      	subs	r0, r3, #4
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfbc      	itt	lt
 800b316:	580b      	ldrlt	r3, [r1, r0]
 800b318:	18c0      	addlt	r0, r0, r3
 800b31a:	4770      	bx	lr

0800b31c <_raise_r>:
 800b31c:	291f      	cmp	r1, #31
 800b31e:	b538      	push	{r3, r4, r5, lr}
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	d904      	bls.n	800b330 <_raise_r+0x14>
 800b326:	2316      	movs	r3, #22
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b332:	b112      	cbz	r2, 800b33a <_raise_r+0x1e>
 800b334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b338:	b94b      	cbnz	r3, 800b34e <_raise_r+0x32>
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 f830 	bl	800b3a0 <_getpid_r>
 800b340:	462a      	mov	r2, r5
 800b342:	4601      	mov	r1, r0
 800b344:	4620      	mov	r0, r4
 800b346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b34a:	f000 b817 	b.w	800b37c <_kill_r>
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d00a      	beq.n	800b368 <_raise_r+0x4c>
 800b352:	1c59      	adds	r1, r3, #1
 800b354:	d103      	bne.n	800b35e <_raise_r+0x42>
 800b356:	2316      	movs	r3, #22
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	2001      	movs	r0, #1
 800b35c:	e7e7      	b.n	800b32e <_raise_r+0x12>
 800b35e:	2400      	movs	r4, #0
 800b360:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b364:	4628      	mov	r0, r5
 800b366:	4798      	blx	r3
 800b368:	2000      	movs	r0, #0
 800b36a:	e7e0      	b.n	800b32e <_raise_r+0x12>

0800b36c <raise>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <raise+0xc>)
 800b36e:	4601      	mov	r1, r0
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	f7ff bfd3 	b.w	800b31c <_raise_r>
 800b376:	bf00      	nop
 800b378:	20000014 	.word	0x20000014

0800b37c <_kill_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d07      	ldr	r5, [pc, #28]	; (800b39c <_kill_r+0x20>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	4611      	mov	r1, r2
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	f7f7 fdeb 	bl	8002f64 <_kill>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	d102      	bne.n	800b398 <_kill_r+0x1c>
 800b392:	682b      	ldr	r3, [r5, #0]
 800b394:	b103      	cbz	r3, 800b398 <_kill_r+0x1c>
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	bd38      	pop	{r3, r4, r5, pc}
 800b39a:	bf00      	nop
 800b39c:	2000054c 	.word	0x2000054c

0800b3a0 <_getpid_r>:
 800b3a0:	f7f7 bdd8 	b.w	8002f54 <_getpid>

0800b3a4 <__sread>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ac:	f000 f894 	bl	800b4d8 <_read_r>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	bfab      	itete	ge
 800b3b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3b8:	181b      	addge	r3, r3, r0
 800b3ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3be:	bfac      	ite	ge
 800b3c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3c2:	81a3      	strhlt	r3, [r4, #12]
 800b3c4:	bd10      	pop	{r4, pc}

0800b3c6 <__swrite>:
 800b3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ca:	461f      	mov	r7, r3
 800b3cc:	898b      	ldrh	r3, [r1, #12]
 800b3ce:	05db      	lsls	r3, r3, #23
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	4616      	mov	r6, r2
 800b3d6:	d505      	bpl.n	800b3e4 <__swrite+0x1e>
 800b3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3dc:	2302      	movs	r3, #2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f000 f868 	bl	800b4b4 <_lseek_r>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	463b      	mov	r3, r7
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fa:	f000 b817 	b.w	800b42c <_write_r>

0800b3fe <__sseek>:
 800b3fe:	b510      	push	{r4, lr}
 800b400:	460c      	mov	r4, r1
 800b402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b406:	f000 f855 	bl	800b4b4 <_lseek_r>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	bf15      	itete	ne
 800b410:	6560      	strne	r0, [r4, #84]	; 0x54
 800b412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b41a:	81a3      	strheq	r3, [r4, #12]
 800b41c:	bf18      	it	ne
 800b41e:	81a3      	strhne	r3, [r4, #12]
 800b420:	bd10      	pop	{r4, pc}

0800b422 <__sclose>:
 800b422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b426:	f000 b813 	b.w	800b450 <_close_r>
	...

0800b42c <_write_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4d07      	ldr	r5, [pc, #28]	; (800b44c <_write_r+0x20>)
 800b430:	4604      	mov	r4, r0
 800b432:	4608      	mov	r0, r1
 800b434:	4611      	mov	r1, r2
 800b436:	2200      	movs	r2, #0
 800b438:	602a      	str	r2, [r5, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	f7f7 fdc9 	bl	8002fd2 <_write>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d102      	bne.n	800b44a <_write_r+0x1e>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	b103      	cbz	r3, 800b44a <_write_r+0x1e>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	2000054c 	.word	0x2000054c

0800b450 <_close_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d06      	ldr	r5, [pc, #24]	; (800b46c <_close_r+0x1c>)
 800b454:	2300      	movs	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f7 fdd5 	bl	800300a <_close>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_close_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_close_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	2000054c 	.word	0x2000054c

0800b470 <_fstat_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4d07      	ldr	r5, [pc, #28]	; (800b490 <_fstat_r+0x20>)
 800b474:	2300      	movs	r3, #0
 800b476:	4604      	mov	r4, r0
 800b478:	4608      	mov	r0, r1
 800b47a:	4611      	mov	r1, r2
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	f7f7 fdd0 	bl	8003022 <_fstat>
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	d102      	bne.n	800b48c <_fstat_r+0x1c>
 800b486:	682b      	ldr	r3, [r5, #0]
 800b488:	b103      	cbz	r3, 800b48c <_fstat_r+0x1c>
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop
 800b490:	2000054c 	.word	0x2000054c

0800b494 <_isatty_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d06      	ldr	r5, [pc, #24]	; (800b4b0 <_isatty_r+0x1c>)
 800b498:	2300      	movs	r3, #0
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	f7f7 fdcf 	bl	8003042 <_isatty>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_isatty_r+0x1a>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_isatty_r+0x1a>
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	2000054c 	.word	0x2000054c

0800b4b4 <_lseek_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4d07      	ldr	r5, [pc, #28]	; (800b4d4 <_lseek_r+0x20>)
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	602a      	str	r2, [r5, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f7f7 fdc8 	bl	8003058 <_lseek>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_lseek_r+0x1e>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_lseek_r+0x1e>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	2000054c 	.word	0x2000054c

0800b4d8 <_read_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d07      	ldr	r5, [pc, #28]	; (800b4f8 <_read_r+0x20>)
 800b4dc:	4604      	mov	r4, r0
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	602a      	str	r2, [r5, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f7f7 fd56 	bl	8002f98 <_read>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_read_r+0x1e>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_read_r+0x1e>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	2000054c 	.word	0x2000054c

0800b4fc <_init>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	bf00      	nop
 800b500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b502:	bc08      	pop	{r3}
 800b504:	469e      	mov	lr, r3
 800b506:	4770      	bx	lr

0800b508 <_fini>:
 800b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50a:	bf00      	nop
 800b50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b50e:	bc08      	pop	{r3}
 800b510:	469e      	mov	lr, r3
 800b512:	4770      	bx	lr
