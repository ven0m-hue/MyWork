
WinchFirmwareRelease.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800b200  0800b200  0001b200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b68c  0800b68c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b694  0800b694  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b694  0800b694  0001b694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b698  0800b698  0001b698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001e8  0800b884  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800b884  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f6c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002707  00000000  00000000  00034184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00037a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f2d  00000000  00000000  00038b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cbd  00000000  00000000  00052aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f447  00000000  00000000  0006876a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00107c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1e8 	.word	0x0800b1e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800b1e8 	.word	0x0800b1e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <AS5600_Init>:

#include "AS5600.h"


uint8_t AS5600_Init(AS5600_Handle_t *hAS56)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/*Initialize with the necessary mode*/
	uint8_t temp = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
	 */

	/*
	 * Get the status of the Magnetic sensor by touching the mag register sensor
	 */
	const AS5600_StatusRegister_t agcReg = AS5600_REGISTER_AGC_H;
 8000fac:	231a      	movs	r3, #26
 8000fae:	737b      	strb	r3, [r7, #13]
	if(readByte(hAS56->I2Chandle, WHOAMI, agcReg) >= AS55600_SUCCESS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	7b7a      	ldrb	r2, [r7, #13]
 8000fb6:	216c      	movs	r1, #108	; 0x6c
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f85d 	bl	8001078 <readByte>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00d      	beq.n	8000fe0 <AS5600_Init+0x44>
	{
		ret = AS55600_SUCCESS;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
		hAS56->agcCount = readByte(hAS56->I2Chandle, WHOAMI, agcReg); /* useful while debugging */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	7b7a      	ldrb	r2, [r7, #13]
 8000fce:	216c      	movs	r1, #108	; 0x6c
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f851 	bl	8001078 <readByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	735a      	strb	r2, [r3, #13]
 8000fde:	e001      	b.n	8000fe4 <AS5600_Init+0x48>
	}

	else ret = AS5600_ERROR;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

	const AS5600_StatusRegister_t statusReg = AS5600_REGISTER_STATUS;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	733b      	strb	r3, [r7, #12]

	if((temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg)) >= AS55600_SUCCESS)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	216c      	movs	r1, #108	; 0x6c
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f841 	bl	8001078 <readByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AS5600_Init+0x72>
	{
		//temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg);

		ret = (temp & AS5600_MD) ? AS55600_SUCCESS : AS5600_ERROR;
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	115b      	asrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <AS5600_Init+0x76>
	}

	else ret = AS5600_ERROR;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <AS5600_GetRawAngle>:

uint8_t AS5600_GetRawAngle(AS5600_Handle_t* hAS56)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	const AS5600_OpRegister_t angleReg = AS5600_REGISTER_RAWANGLE_H;
 8001024:	230c      	movs	r3, #12
 8001026:	73fb      	strb	r3, [r7, #15]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]

	uint8_t raw[2] = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	81bb      	strh	r3, [r7, #12]

	if((hAS56->I2Chandle == NULL)) return ret;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <AS5600_GetRawAngle+0x20>
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	e019      	b.n	8001070 <AS5600_GetRawAngle+0x54>

		//readByte(hAS56->I2Chandle, Address, subAddress);
	if(readMem(hAS56->I2Chandle, WHOAMI, angleReg, raw) != AS55600_SUCCESS) return ret;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	216c      	movs	r1, #108	; 0x6c
 8001048:	f000 f840 	bl	80010cc <readMem>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d001      	beq.n	8001056 <AS5600_GetRawAngle+0x3a>
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	e00c      	b.n	8001070 <AS5600_GetRawAngle+0x54>

	else ret = AS55600_SUCCESS;
 8001056:	2301      	movs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]

	hAS56->rawAngle = ((uint16_t)((uint16_t)raw[0] << 8 | raw[1]));
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	80da      	strh	r2, [r3, #6]

	return ret;
 800106e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <readByte>:
		 return 0;

}

uint8_t readByte(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	4613      	mov	r3, r2
 8001086:	70bb      	strb	r3, [r7, #2]
	uint8_t rxData[1] = {0};
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
	uint8_t txData[] = {subAddress};
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(I2Chandle, Address, txData, 1, AS5600_I2C_TIMEOUT);
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	b299      	uxth	r1, r3
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f003 f8e4 	bl	800426c <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(I2Chandle, Address, rxData, 1, AS5600_I2C_TIMEOUT) != HAL_ERROR) return rxData[0];
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f003 f9d8 	bl	8004468 <HAL_I2C_Master_Receive>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <readByte+0x4a>
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	e000      	b.n	80010c4 <readByte+0x4c>

	else return 0;
 80010c2:	2300      	movs	r3, #0

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <readMem>:
/*
 * Reads bytes of data
 */

uint8_t readMem(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress, uint8_t* raw)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]

	uint8_t rawData[2];

	if(HAL_I2C_Mem_Read(I2Chandle, Address, subAddress, I2C_MEMADD_SIZE_8BIT, rawData, 2, AS5600_I2C_TIMEOUT) != HAL_ERROR)
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b299      	uxth	r1, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2302      	movs	r3, #2
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f003 fbdc 	bl	80048b4 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d008      	beq.n	8001114 <readMem+0x48>
	{
		raw[0] = rawData[0];
 8001102:	7d3a      	ldrb	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]
		raw[1] = rawData[1];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	7d7a      	ldrb	r2, [r7, #21]
 800110e:	701a      	strb	r2, [r3, #0]

		return 1;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <readMem+0x4a>
	}

	else return 0;
 8001114:	2300      	movs	r3, #0

}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <PID_Init>:
    Set the Max/Min lim for System anti saturation.
*/

/*Initializer*/
uint8_t PID_Init(PID_Handle_t *pid)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]

    /*Clear all the residuals*/

    pid->derivative = 0.0f;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
    pid->integrator = 0.0f;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
    pid->propotional = 0.0f;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	60da      	str	r2, [r3, #12]

    SetSampleRate(pid, 10); // 0.01 seconds
 800113e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f878 	bl	8001238 <SetSampleRate>


    pid->prevErr = 0.0f;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
    pid->prevMeasure = 0.0f;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	61da      	str	r2, [r3, #28]

    pid->pidout = 0.0f;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38

    return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <P_Compute>:

/* P controller only */
float P_Compute(PID_Handle_t *p, float measurement, float setPoint, float hal_tick)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	ed87 0a02 	vstr	s0, [r7, #8]
 8001178:	edc7 0a01 	vstr	s1, [r7, #4]
 800117c:	ed87 1a00 	vstr	s2, [r7]

	if(hal_tick > p->Ts)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001186:	ed97 7a00 	vldr	s14, [r7]
 800118a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dd39      	ble.n	8001208 <P_Compute+0x9c>
		*   0-100% after computing the values back to outputs which can be used in the real world.
		*
		*/
		//float err = setPoint - measurement;

		float err = (1 - measurement / setPoint);
 8001194:	edd7 6a02 	vldr	s13, [r7, #8]
 8001198:	ed97 7a01 	vldr	s14, [r7, #4]
 800119c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a8:	edc7 7a05 	vstr	s15, [r7, #20]

		if( err >=0 )
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	db26      	blt.n	8001208 <P_Compute+0x9c>
		{
			/*propotional*/
			p->propotional = p->kp * err;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edc3 7a03 	vstr	s15, [r3, #12]

			return (p->propotional *__8BIT_OUTPUT_MAX) <= (__8BIT_OUTPUT_MAX) ? (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN : __8BIT_OUTPUT_MAX;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001230 <P_Compute+0xc4>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001230 <P_Compute+0xc4>
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	d80b      	bhi.n	8001202 <P_Compute+0x96>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001230 <P_Compute+0xc4>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80011fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001200:	e00e      	b.n	8001220 <P_Compute+0xb4>
 8001202:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8001230 <P_Compute+0xc4>
 8001206:	e00b      	b.n	8001220 <P_Compute+0xb4>

		}

	}

	p->Ts += hal_tick;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800120e:	edd7 7a00 	vldr	s15, [r7]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return 0;
 800121c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001234 <P_Compute+0xc8>

	//return (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN;
}
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	43340000 	.word	0x43340000
 8001234:	00000000 	.word	0x00000000

08001238 <SetSampleRate>:

/* Set sampling period in milliseconds
* And apporiately scale the gains Ki, Kd 
*/
void SetSampleRate(PID_Handle_t *pid, float sampleTime)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	ed87 0a00 	vstr	s0, [r7]
    if(sampleTime > 0)
 8001244:	edd7 7a00 	vldr	s15, [r7]
 8001248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	dc00      	bgt.n	8001254 <SetSampleRate+0x1c>
        pid->ki *= ratio;
        pid->kd /= ratio;

        pid->Ts = sampleTime;
    }
}
 8001252:	e01f      	b.n	8001294 <SetSampleRate+0x5c>
        float ratio = (float)(sampleTime) / (float)(pid->Ts);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800125a:	edd7 6a00 	vldr	s13, [r7]
 800125e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001262:	edc7 7a03 	vstr	s15, [r7, #12]
        pid->ki *= ratio;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ed93 7a01 	vldr	s14, [r3, #4]
 800126c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a01 	vstr	s15, [r3, #4]
        pid->kd /= ratio;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001280:	ed97 7a03 	vldr	s14, [r7, #12]
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a02 	vstr	s15, [r3, #8]
        pid->Ts = sampleTime;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <MX_Universal_Init>:
static void MX_BomBay_Door_Close(void);
static void MX_Jump(void);

/* Private user code ---------------------------------------------------------*/
void MX_Universal_Init()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f001 fdf6 	bl	8002e94 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 fcfc 	bl	8001ca4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_USB_DEVICE_Init();
  MX_DMA_Init();
 80012ac:	f000 ff3c 	bl	8002128 <MX_DMA_Init>
  MX_ADC1_Init();
 80012b0:	f000 fd62 	bl	8001d78 <MX_ADC1_Init>
  MX_GPIO_Init();
 80012b4:	f000 ff58 	bl	8002168 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b8:	f000 fe2a 	bl	8001f10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012bc:	f000 fe7c 	bl	8001fb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c0:	f000 fede 	bl	8002080 <MX_TIM4_Init>
  MX_UART1_Init();
 80012c4:	f000 fdd8 	bl	8001e78 <MX_UART1_Init>
  MX_UART2_Init();
 80012c8:	f000 fdfc 	bl	8001ec4 <MX_UART2_Init>
  MX_I2C1_Init();
 80012cc:	f000 fda6 	bl	8001e1c <MX_I2C1_Init>


}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MX_Peripheral_Start_Init>:

void MX_Peripheral_Start_Init()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	 *  1. Encoder IT Start
	 *  2. PWM CH1, CH2 Start
	 *  3. TIM Input Cpature Mode Start
	 *  4. ADC DMA Start
	 */
	if(HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_Handler();
 80012d8:	213c      	movs	r1, #60	; 0x3c
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <MX_Peripheral_Start_Init+0xac>)
 80012dc:	f004 ffd7 	bl	800628e <HAL_TIM_Encoder_Start_IT>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_Peripheral_Start_Init+0x16>
 80012e6:	f000 ffe2 	bl	80022ae <Error_Handler>

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80012ea:	2100      	movs	r1, #0
 80012ec:	4825      	ldr	r0, [pc, #148]	; (8001384 <MX_Peripheral_Start_Init+0xb0>)
 80012ee:	f004 fdc5 	bl	8005e7c <HAL_TIM_PWM_Start>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_Peripheral_Start_Init+0x28>
 80012f8:	f000 ffd9 	bl	80022ae <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80012fc:	2104      	movs	r1, #4
 80012fe:	4821      	ldr	r0, [pc, #132]	; (8001384 <MX_Peripheral_Start_Init+0xb0>)
 8001300:	f004 fdbc 	bl	8005e7c <HAL_TIM_PWM_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_Peripheral_Start_Init+0x3a>
 800130a:	f000 ffd0 	bl	80022ae <Error_Handler>

	//if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK) Error_Handler();

	//if(HAL_ADC_Start_DMA(&hadc1, &Buf, 1) != HAL_OK) Error_Handler();

	memset(buf, 0, sizeof(buf));
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	2100      	movs	r1, #0
 8001312:	481d      	ldr	r0, [pc, #116]	; (8001388 <MX_Peripheral_Start_Init+0xb4>)
 8001314:	f006 fff2 	bl	80082fc <memset>
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);

	/*
	 * 1.GPIO PIN Inits
	 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	481b      	ldr	r0, [pc, #108]	; (800138c <MX_Peripheral_Start_Init+0xb8>)
 800131e:	f002 fe23 	bl	8003f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	4819      	ldr	r0, [pc, #100]	; (8001390 <MX_Peripheral_Start_Init+0xbc>)
 800132a:	f002 fe1d 	bl	8003f68 <HAL_GPIO_WritePin>
	 * Get the raw angle.
	 * Store the Init raw angle to a global var.
	 * Then count the revolutions on the basis of that raw angle.
	 * i.e. if the raw angle is 20 deg, then every time the angle goes above 20 is one revolution.
	 */
	as5600.I2Chandle = &hi2c1;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_Peripheral_Start_Init+0xc0>)
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <MX_Peripheral_Start_Init+0xc4>)
 8001332:	601a      	str	r2, [r3, #0]
	while(!AS5600_Init(&as5600))
 8001334:	e007      	b.n	8001346 <MX_Peripheral_Start_Init+0x72>
	{
		sprintf((char*)buf, "Can't detect the Magnet\r\n");
 8001336:	4919      	ldr	r1, [pc, #100]	; (800139c <MX_Peripheral_Start_Init+0xc8>)
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_Peripheral_Start_Init+0xb4>)
 800133a:	f007 fc51 	bl	8008be0 <siprintf>
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		HAL_Delay(500);
 800133e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001342:	f001 fe19 	bl	8002f78 <HAL_Delay>
	while(!AS5600_Init(&as5600))
 8001346:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_Peripheral_Start_Init+0xc0>)
 8001348:	f7ff fe28 	bl	8000f9c <AS5600_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f1      	beq.n	8001336 <MX_Peripheral_Start_Init+0x62>
	}

	HAL_Delay(500); /*Time to set*/
 8001352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001356:	f001 fe0f 	bl	8002f78 <HAL_Delay>

	AS5600_GetRawAngle(&as5600);
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_Peripheral_Start_Init+0xc0>)
 800135c:	f7ff fe5e 	bl	800101c <AS5600_GetRawAngle>
	CurrRead = as5600.rawAngle;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_Peripheral_Start_Init+0xc0>)
 8001362:	88da      	ldrh	r2, [r3, #6]
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_Peripheral_Start_Init+0xcc>)
 8001366:	801a      	strh	r2, [r3, #0]

	LastRead = CurrRead;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_Peripheral_Start_Init+0xcc>)
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_Peripheral_Start_Init+0xd0>)
 800136e:	801a      	strh	r2, [r3, #0]

	//sprintf((char*)buf, "Initial Angle : %d\r\n", rawAngle);
	//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
//
	memset(buf, 0, sizeof(buf));
 8001370:	2240      	movs	r2, #64	; 0x40
 8001372:	2100      	movs	r1, #0
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_Peripheral_Start_Init+0xb4>)
 8001376:	f006 ffc1 	bl	80082fc <memset>
	//user_data = "Initialization successful\r\n";
	//data_len = strlen(user_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);


}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002ac 	.word	0x200002ac
 8001384:	200002f4 	.word	0x200002f4
 8001388:	20000488 	.word	0x20000488
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	20000460 	.word	0x20000460
 8001398:	2000040c 	.word	0x2000040c
 800139c:	0800b200 	.word	0x0800b200
 80013a0:	200004e2 	.word	0x200004e2
 80013a4:	200004e0 	.word	0x200004e0

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
	MX_Universal_Init();
 80013ac:	f7ff ff78 	bl	80012a0 <MX_Universal_Init>

  /* MCU Peripherals Start Commands-------------------------------------------*/
	MX_Peripheral_Start_Init();
 80013b0:	f7ff ff90 	bl	80012d4 <MX_Peripheral_Start_Init>
	/*
	 * Winch Start Sequence
	 * 1. One reception of a signal of particular width start the winch sequence
	 * or else keep looping until forever.
	 */
	MX_WINCH_START_SEQ();
 80013b4:	f000 f814 	bl	80013e0 <MX_WINCH_START_SEQ>

	HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <main+0x34>)
 80013c0:	f002 fdd2 	bl	8003f68 <HAL_GPIO_WritePin>
	//This is the wait period for the winch up sequence.
	//HAL_Delay(5000);

	//MX_WINCH_UP_MOTO_RAMP_UP_DOWN();

	MX_SOFT_START_P_CONTROLLER_RAMP_UP();
 80013c4:	f000 f97c 	bl	80016c0 <MX_SOFT_START_P_CONTROLLER_RAMP_UP>

	MX_WINCH_P_CONTROLLER();
 80013c8:	f000 f9c6 	bl	8001758 <MX_WINCH_P_CONTROLLER>

	HAL_Delay(8000);
 80013cc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80013d0:	f001 fdd2 	bl	8002f78 <HAL_Delay>


	MX_WINCH_UP_MOTO_RAMP_UP_DOWN();
 80013d4:	f000 f81c 	bl	8001410 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>
	//Until the flag for door open is not set do nothing
	//If it breaks the loop, it means hook has reached the bay roof
	//Start the Door Close sequence
	//MX_BomBay_Door_Close();

	while(1)
 80013d8:	e7fe      	b.n	80013d8 <main+0x30>
 80013da:	bf00      	nop
 80013dc:	40020800 	.word	0x40020800

080013e0 <MX_WINCH_START_SEQ>:

///////////////////////////////////////////////////////////////////////////////////////////APPLICATION_LEVEL_ROUTINES//////////////////////////////////////////////////////////////


static void MX_WINCH_START_SEQ()
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	/*
	 * This part loops until a signal of particular pulse width is captured.
	 */
	//UNUSED();
	while(!(START_THE_SEQUENCE)){};
 80013e4:	bf00      	nop
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_WINCH_START_SEQ+0x24>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f8      	bne.n	80013e6 <MX_WINCH_START_SEQ+0x6>

	Start_Flag = false;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <MX_WINCH_START_SEQ+0x28>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]

}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200004f9 	.word	0x200004f9
 8001408:	200004f0 	.word	0x200004f0
 800140c:	00000000 	.word	0x00000000

08001410 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>:
 	memset(buf, 0, sizeof(buf));

}

void MX_WINCH_UP_MOTO_RAMP_UP_DOWN(void)
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af02      	add	r7, sp, #8

	//First things first change the direction
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2120      	movs	r1, #32
 800141a:	489f      	ldr	r0, [pc, #636]	; (8001698 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x288>)
 800141c:	f002 fda4 	bl	8003f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	489c      	ldr	r0, [pc, #624]	; (8001698 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x288>)
 8001428:	f002 fd9e 	bl	8003f68 <HAL_GPIO_WritePin>

	uint32_t loop_5 = Counts * 0.1;  //Set the threshold
 800142c:	4b9b      	ldr	r3, [pc, #620]	; (800169c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x28c>)
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f87e 	bl	8000534 <__aeabi_i2d>
 8001438:	a38f      	add	r3, pc, #572	; (adr r3, 8001678 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x268>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f8e3 	bl	8000608 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fbb5 	bl	8000bb8 <__aeabi_d2uiz>
 800144e:	4603      	mov	r3, r0
 8001450:	607b      	str	r3, [r7, #4]

	//Ramp Up Sequence

	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 8001452:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001454:	221e      	movs	r2, #30
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	e0ab      	b.n	80015b2 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1a2>
	{
		if(rev > loop_5)
 800145a:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x294>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4293      	cmp	r3, r2
 8001466:	d23e      	bcs.n	80014e6 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0xd6>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f851 	bl	8000514 <__aeabi_ui2d>
 8001472:	4604      	mov	r4, r0
 8001474:	460d      	mov	r5, r1
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f85a 	bl	8000534 <__aeabi_i2d>
 8001480:	a37f      	add	r3, pc, #508	; (adr r3, 8001680 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x270>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f8bf 	bl	8000608 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff f8b9 	bl	8000608 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b82      	ldr	r3, [pc, #520]	; (80016ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 80014a4:	f7ff f9da 	bl	800085c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 80014ae:	680c      	ldr	r4, [r1, #0]
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb80 	bl	8000bb8 <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	63a3      	str	r3, [r4, #56]	; 0x38
			sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
 80014bc:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	461c      	mov	r4, r3
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f846 	bl	8000558 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	e9cd 2300 	strd	r2, r3, [sp]
 80014d4:	4622      	mov	r2, r4
 80014d6:	4977      	ldr	r1, [pc, #476]	; (80016b4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a4>)
 80014d8:	4877      	ldr	r0, [pc, #476]	; (80016b8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a8>)
 80014da:	f007 fb81 	bl	8008be0 <siprintf>

			//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
			//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

			HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 80014de:	2014      	movs	r0, #20
 80014e0:	f001 fd4a 	bl	8002f78 <HAL_Delay>
 80014e4:	e05f      	b.n	80015a6 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x196>

		//This is unlikely to ever happen but for safety.
		else
		{
			//Write a very short but effective ramp_down so that there is not jerk at zero.
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(40)/100);
 80014e6:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f812 	bl	8000514 <__aeabi_ui2d>
 80014f0:	a365      	add	r3, pc, #404	; (adr r3, 8001688 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x278>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f887 	bl	8000608 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b69      	ldr	r3, [pc, #420]	; (80016ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 8001508:	f7ff f9a8 	bl	800085c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4965      	ldr	r1, [pc, #404]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001512:	680c      	ldr	r4, [r1, #0]
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb4e 	bl	8000bb8 <__aeabi_d2uiz>
 800151c:	4603      	mov	r3, r0
 800151e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 8001520:	2014      	movs	r0, #20
 8001522:	f001 fd29 	bl	8002f78 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(20)/100);
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fff2 	bl	8000514 <__aeabi_ui2d>
 8001530:	a357      	add	r3, pc, #348	; (adr r3, 8001690 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x280>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f867 	bl	8000608 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 8001548:	f7ff f988 	bl	800085c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4955      	ldr	r1, [pc, #340]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001552:	680c      	ldr	r4, [r1, #0]
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fb2e 	bl	8000bb8 <__aeabi_d2uiz>
 800155c:	4603      	mov	r3, r0
 800155e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 8001560:	2014      	movs	r0, #20
 8001562:	f001 fd09 	bl	8002f78 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffd2 	bl	8000514 <__aeabi_ui2d>
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	f7ff f846 	bl	8000608 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b48      	ldr	r3, [pc, #288]	; (80016ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 800158a:	f7ff f967 	bl	800085c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4945      	ldr	r1, [pc, #276]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001594:	680c      	ldr	r4, [r1, #0]
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fb0d 	bl	8000bb8 <__aeabi_d2uiz>
 800159e:	4603      	mov	r3, r0
 80015a0:	6363      	str	r3, [r4, #52]	; 0x34

			//And just stop, something's fishy!
			MX_Jump();
 80015a2:	f000 fe7f 	bl	80022a4 <MX_Jump>
	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80015b0:	801a      	strh	r2, [r3, #0]
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	2bb3      	cmp	r3, #179	; 0xb3
 80015b8:	f67f af4f 	bls.w	800145a <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x4a>
	}


	//Ramp Down Sequence

	for(i = INTERMITENT_DC; i> 60; i -- )
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80015be:	22b4      	movs	r2, #180	; 0xb4
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	e04a      	b.n	800165a <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x24a>
		{
			if(rev > loop_5)
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x294>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d248      	bcs.n	8001664 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x254>
			{
				//There is enough room to spool at the current rate do nothing different.
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff9c 	bl	8000514 <__aeabi_ui2d>
 80015dc:	4604      	mov	r4, r0
 80015de:	460d      	mov	r5, r1
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffa5 	bl	8000534 <__aeabi_i2d>
 80015ea:	a325      	add	r3, pc, #148	; (adr r3, 8001680 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x270>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f80a 	bl	8000608 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7ff f804 	bl	8000608 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 800160e:	f7ff f925 	bl	800085c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4924      	ldr	r1, [pc, #144]	; (80016a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001618:	680c      	ldr	r4, [r1, #0]
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff facb 	bl	8000bb8 <__aeabi_d2uiz>
 8001622:	4603      	mov	r3, r0
 8001624:	63a3      	str	r3, [r4, #56]	; 0x38
				sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length); //i*0.019605
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	461c      	mov	r4, r3
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff91 	bl	8000558 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	e9cd 2300 	strd	r2, r3, [sp]
 800163e:	4622      	mov	r2, r4
 8001640:	491c      	ldr	r1, [pc, #112]	; (80016b4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a4>)
 8001642:	481d      	ldr	r0, [pc, #116]	; (80016b8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a8>)
 8001644:	f007 facc 	bl	8008be0 <siprintf>

				//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
				//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

				HAL_Delay(PWM_RAMP_DOWN_DURATION);    //This finishes the ramp up in
 8001648:	2055      	movs	r0, #85	; 0x55
 800164a:	f001 fc95 	bl	8002f78 <HAL_Delay>
	for(i = INTERMITENT_DC; i> 60; i -- )
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	2b3c      	cmp	r3, #60	; 0x3c
 8001660:	d8b0      	bhi.n	80015c4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1b4>
 8001662:	e000      	b.n	8001666 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x256>
			}

			else break;
 8001664:	bf00      	nop
		}


	//Its only after this point we need to activate the door close interrupt flag
	close_door = true;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2ac>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
	//sprintf((char*)buf, "About to reach the payload bay @ PWM: %d\r\n", PWM_CONSTANT);

	//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
	//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	9999999a 	.word	0x9999999a
 800167c:	3fb99999 	.word	0x3fb99999
 8001680:	190cb39b 	.word	0x190cb39b
 8001684:	3fd91919 	.word	0x3fd91919
 8001688:	5f4fe082 	.word	0x5f4fe082
 800168c:	402f5f5f 	.word	0x402f5f5f
 8001690:	5f4fe082 	.word	0x5f4fe082
 8001694:	401f5f5f 	.word	0x401f5f5f
 8001698:	40020000 	.word	0x40020000
 800169c:	200004e8 	.word	0x200004e8
 80016a0:	200004fe 	.word	0x200004fe
 80016a4:	200004e6 	.word	0x200004e6
 80016a8:	200002f4 	.word	0x200002f4
 80016ac:	40590000 	.word	0x40590000
 80016b0:	200004ec 	.word	0x200004ec
 80016b4:	0800b21c 	.word	0x0800b21c
 80016b8:	20000488 	.word	0x20000488
 80016bc:	200004fc 	.word	0x200004fc

080016c0 <MX_SOFT_START_P_CONTROLLER_RAMP_UP>:


static void MX_SOFT_START_P_CONTROLLER_RAMP_UP(void)
{
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 80016c6:	2279      	movs	r2, #121	; 0x79
 80016c8:	801a      	strh	r2, [r3, #0]
 80016ca:	e032      	b.n	8001732 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x72>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x8c>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff1f 	bl	8000514 <__aeabi_ui2d>
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff28 	bl	8000534 <__aeabi_i2d>
 80016e4:	a316      	add	r3, pc, #88	; (adr r3, 8001740 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x80>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff8d 	bl	8000608 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe ff87 	bl	8000608 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x90>)
 8001708:	f7ff f8a8 	bl	800085c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x8c>)
 8001712:	680c      	ldr	r4, [r1, #0]
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa4e 	bl	8000bb8 <__aeabi_d2uiz>
 800171c:	4603      	mov	r3, r0
 800171e:	63a3      	str	r3, [r4, #56]	; 0x38
		//sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);

		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 8001720:	2014      	movs	r0, #20
 8001722:	f001 fc29 	bl	8002f78 <HAL_Delay>
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 8001730:	801a      	strh	r2, [r3, #0]
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	2bb3      	cmp	r3, #179	; 0xb3
 8001738:	d9c8      	bls.n	80016cc <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xc>
	}
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	190cb39b 	.word	0x190cb39b
 8001744:	3fd91919 	.word	0x3fd91919
 8001748:	200004fe 	.word	0x200004fe
 800174c:	200002f4 	.word	0x200002f4
 8001750:	40590000 	.word	0x40590000
 8001754:	00000000 	.word	0x00000000

08001758 <MX_WINCH_P_CONTROLLER>:

/*
 * This sub-routine interfaces the P-based controller
 */
void MX_WINCH_P_CONTROLLER(void)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b096      	sub	sp, #88	; 0x58
 800175c:	af04      	add	r7, sp, #16
	PID_Handle_t pid;
	uint32_t motor_output = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	647b      	str	r3, [r7, #68]	; 0x44

	pid.Ts = 10; // 10 milliseconds.
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <MX_WINCH_P_CONTROLLER+0x1e8>)
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
	pid.kp = 1.5;
 8001766:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800176a:	607b      	str	r3, [r7, #4]
	PID_Init(&pid);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fcd5 	bl	800111e <PID_Init>



	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig))
 8001774:	e068      	b.n	8001848 <MX_WINCH_P_CONTROLLER+0xf0>
	{
		motor_output = P_Compute(&pid, Length, LEN_TO_WINCH_DOWN, uwTick);
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <MX_WINCH_P_CONTROLLER+0x1ec>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	4b72      	ldr	r3, [pc, #456]	; (8001948 <MX_WINCH_P_CONTROLLER+0x1f0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	ee07 3a10 	vmov	s14, r3
 8001784:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	eeb0 1a47 	vmov.f32	s2, s14
 800178e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fce8 	bl	800116c <P_Compute>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a4:	ee17 3a90 	vmov	r3, s15
 80017a8:	647b      	str	r3, [r7, #68]	; 0x44

		if(motor_output <= 30) motor_output = __8BIT_OUTPUT_MIN;
 80017aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ac:	2b1e      	cmp	r3, #30
 80017ae:	d801      	bhi.n	80017b4 <MX_WINCH_P_CONTROLLER+0x5c>
 80017b0:	231e      	movs	r3, #30
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(motor_output)/100);
 80017b4:	4b65      	ldr	r3, [pc, #404]	; (800194c <MX_WINCH_P_CONTROLLER+0x1f4>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe feab 	bl	8000514 <__aeabi_ui2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017c4:	f7fe fea6 	bl	8000514 <__aeabi_ui2d>
 80017c8:	a359      	add	r3, pc, #356	; (adr r3, 8001930 <MX_WINCH_P_CONTROLLER+0x1d8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff1b 	bl	8000608 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe ff15 	bl	8000608 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b59      	ldr	r3, [pc, #356]	; (8001950 <MX_WINCH_P_CONTROLLER+0x1f8>)
 80017ec:	f7ff f836 	bl	800085c <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4955      	ldr	r1, [pc, #340]	; (800194c <MX_WINCH_P_CONTROLLER+0x1f4>)
 80017f6:	680c      	ldr	r4, [r1, #0]
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9dc 	bl	8000bb8 <__aeabi_d2uiz>
 8001800:	4603      	mov	r3, r0
 8001802:	63a3      	str	r3, [r4, #56]	; 0x38

		sprintf((char*)buf, "PWM: %ld, Length: %f, Tick: %ld\r\n", motor_output, Length, tick); //i*0.019605
 8001804:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <MX_WINCH_P_CONTROLLER+0x1ec>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fea5 	bl	8000558 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4950      	ldr	r1, [pc, #320]	; (8001954 <MX_WINCH_P_CONTROLLER+0x1fc>)
 8001814:	6809      	ldr	r1, [r1, #0]
 8001816:	9102      	str	r1, [sp, #8]
 8001818:	e9cd 2300 	strd	r2, r3, [sp]
 800181c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800181e:	494e      	ldr	r1, [pc, #312]	; (8001958 <MX_WINCH_P_CONTROLLER+0x200>)
 8001820:	484e      	ldr	r0, [pc, #312]	; (800195c <MX_WINCH_P_CONTROLLER+0x204>)
 8001822:	f007 f9dd 	bl	8008be0 <siprintf>

		//HAL_Delay(10);

		if(Length >= THRESHOLD_LEN)
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <MX_WINCH_P_CONTROLLER+0x1ec>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	db02      	blt.n	8001840 <MX_WINCH_P_CONTROLLER+0xe8>
		{
			poop_back = true;
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <MX_WINCH_P_CONTROLLER+0x208>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
		}
		//Flag
		prevTick = tick;
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <MX_WINCH_P_CONTROLLER+0x1fc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a47      	ldr	r2, [pc, #284]	; (8001964 <MX_WINCH_P_CONTROLLER+0x20c>)
 8001846:	6013      	str	r3, [r2, #0]
	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig))
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <MX_WINCH_P_CONTROLLER+0x1ec>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	d806      	bhi.n	800186a <MX_WINCH_P_CONTROLLER+0x112>
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <MX_WINCH_P_CONTROLLER+0x210>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d185      	bne.n	8001776 <MX_WINCH_P_CONTROLLER+0x1e>


	//__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * 0/100);


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2120      	movs	r1, #32
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <MX_WINCH_P_CONTROLLER+0x214>)
 8001870:	f002 fb7a 	bl	8003f68 <HAL_GPIO_WritePin>

	for(int i =0; i<12000; i++)
 8001874:	2300      	movs	r3, #0
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
 8001878:	e01f      	b.n	80018ba <MX_WINCH_P_CONTROLLER+0x162>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <MX_WINCH_P_CONTROLLER+0x1f4>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe48 	bl	8000514 <__aeabi_ui2d>
 8001884:	a32c      	add	r3, pc, #176	; (adr r3, 8001938 <MX_WINCH_P_CONTROLLER+0x1e0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe febd 	bl	8000608 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <MX_WINCH_P_CONTROLLER+0x1f8>)
 800189c:	f7fe ffde 	bl	800085c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4929      	ldr	r1, [pc, #164]	; (800194c <MX_WINCH_P_CONTROLLER+0x1f4>)
 80018a6:	680c      	ldr	r4, [r1, #0]
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f984 	bl	8000bb8 <__aeabi_d2uiz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	63a3      	str	r3, [r4, #56]	; 0x38
	for(int i =0; i<12000; i++)
 80018b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018b6:	3301      	adds	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
 80018ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018bc:	f642 62df 	movw	r2, #11999	; 0x2edf
 80018c0:	4293      	cmp	r3, r2
 80018c2:	ddda      	ble.n	800187a <MX_WINCH_P_CONTROLLER+0x122>

	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_WINCH_P_CONTROLLER+0x1f4>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe23 	bl	8000514 <__aeabi_ui2d>
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	f7fe fe97 	bl	8000608 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_WINCH_P_CONTROLLER+0x1f8>)
 80018e8:	f7fe ffb8 	bl	800085c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <MX_WINCH_P_CONTROLLER+0x1f4>)
 80018f2:	680c      	ldr	r4, [r1, #0]
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7ff f95e 	bl	8000bb8 <__aeabi_d2uiz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	63a3      	str	r3, [r4, #56]	; 0x38

	if(rev < 0) Counts = -rev;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_WINCH_P_CONTROLLER+0x218>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	2b00      	cmp	r3, #0
 8001908:	da09      	bge.n	800191e <MX_WINCH_P_CONTROLLER+0x1c6>
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <MX_WINCH_P_CONTROLLER+0x218>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	b29b      	uxth	r3, r3
 8001912:	425b      	negs	r3, r3
 8001914:	b29b      	uxth	r3, r3
 8001916:	b21a      	sxth	r2, r3
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_WINCH_P_CONTROLLER+0x21c>)
 800191a:	801a      	strh	r2, [r3, #0]
	else Counts = rev;

}
 800191c:	e004      	b.n	8001928 <MX_WINCH_P_CONTROLLER+0x1d0>
	else Counts = rev;
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_WINCH_P_CONTROLLER+0x218>)
 8001920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_WINCH_P_CONTROLLER+0x21c>)
 8001926:	801a      	strh	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	3748      	adds	r7, #72	; 0x48
 800192c:	46bd      	mov	sp, r7
 800192e:	bdb0      	pop	{r4, r5, r7, pc}
 8001930:	190cb39b 	.word	0x190cb39b
 8001934:	3fd91919 	.word	0x3fd91919
 8001938:	877be861 	.word	0x877be861
 800193c:	40278787 	.word	0x40278787
 8001940:	41200000 	.word	0x41200000
 8001944:	200004ec 	.word	0x200004ec
 8001948:	20000524 	.word	0x20000524
 800194c:	200002f4 	.word	0x200002f4
 8001950:	40590000 	.word	0x40590000
 8001954:	20000504 	.word	0x20000504
 8001958:	0800b234 	.word	0x0800b234
 800195c:	20000488 	.word	0x20000488
 8001960:	200004fa 	.word	0x200004fa
 8001964:	20000508 	.word	0x20000508
 8001968:	200004fb 	.word	0x200004fb
 800196c:	40020000 	.word	0x40020000
 8001970:	200004e6 	.word	0x200004e6
 8001974:	200004e8 	.word	0x200004e8

08001978 <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001986:	4293      	cmp	r3, r2
 8001988:	f040 80aa 	bne.w	8001ae0 <HAL_TIM_IC_CaptureCallback+0x168>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 800198c:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_TIM_IC_CaptureCallback+0x174>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_TIM_IC_CaptureCallback+0x32>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001994:	2100      	movs	r1, #0
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f004 ff8e 	bl	80068b8 <HAL_TIM_ReadCapturedValue>
 800199c:	4603      	mov	r3, r0
 800199e:	4a54      	ldr	r2, [pc, #336]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019a0:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80019a2:	4b52      	ldr	r3, [pc, #328]	; (8001aec <HAL_TIM_IC_CaptureCallback+0x174>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 80019a8:	e09a      	b.n	8001ae0 <HAL_TIM_IC_CaptureCallback+0x168>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80019aa:	2100      	movs	r1, #0
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f004 ff83 	bl	80068b8 <HAL_TIM_ReadCapturedValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019b6:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80019b8:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d907      	bls.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 80019c4:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a4a      	ldr	r2, [pc, #296]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e00f      	b.n	80019f4 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d909      	bls.n	80019f4 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80019ee:	33ff      	adds	r3, #255	; 0xff
 80019f0:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80019f2:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_TIM_IC_CaptureCallback+0x184>)
 80019f6:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a04:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 8001a12:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001b04 <HAL_TIM_IC_CaptureCallback+0x18c>
 8001a16:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3a:	ee17 2a90 	vmov	r2, s15
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a40:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f240 726b 	movw	r2, #1899	; 0x76b
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d903      	bls.n	8001a56 <HAL_TIM_IC_CaptureCallback+0xde>
				Start_Flag = true;
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e03d      	b.n	8001ad2 <HAL_TIM_IC_CaptureCallback+0x15a>
			else if(usWidth >= THROTTLE_HALF && usWidth < THROTTLE_FULL)
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d90c      	bls.n	8001a7c <HAL_TIM_IC_CaptureCallback+0x104>
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f240 726b 	movw	r2, #1899	; 0x76b
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d806      	bhi.n	8001a7c <HAL_TIM_IC_CaptureCallback+0x104>
				Start_Flag = false;
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
				trig = 0;
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e02a      	b.n	8001ad2 <HAL_TIM_IC_CaptureCallback+0x15a>
			else if(usWidth < THROTTLE_HALF)
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d824      	bhi.n	8001ad2 <HAL_TIM_IC_CaptureCallback+0x15a>
				e_stop = true;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd3e 	bl	8000514 <__aeabi_ui2d>
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	f7fe fdb2 	bl	8000608 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001ab2:	f7fe fed3 	bl	800085c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4917      	ldr	r1, [pc, #92]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001abc:	680c      	ldr	r4, [r1, #0]
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f879 	bl	8000bb8 <__aeabi_d2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6363      	str	r3, [r4, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001aca:	2100      	movs	r1, #0
 8001acc:	4812      	ldr	r0, [pc, #72]	; (8001b18 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001ace:	f004 fa85 	bl	8005fdc <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_TIM_IC_CaptureCallback+0x174>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	40000800 	.word	0x40000800
 8001aec:	200004d4 	.word	0x200004d4
 8001af0:	200004c8 	.word	0x200004c8
 8001af4:	200004cc 	.word	0x200004cc
 8001af8:	200004d0 	.word	0x200004d0
 8001afc:	49742400 	.word	0x49742400
 8001b00:	200004dc 	.word	0x200004dc
 8001b04:	49742400 	.word	0x49742400
 8001b08:	200004d8 	.word	0x200004d8
 8001b0c:	200004f0 	.word	0x200004f0
 8001b10:	200004f4 	.word	0x200004f4
 8001b14:	200004f8 	.word	0x200004f8
 8001b18:	200002f4 	.word	0x200002f4
 8001b1c:	40590000 	.word	0x40590000

08001b20 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

	indx++;  //Monitors the time
 8001b24:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <HAL_SYSTICK_Callback+0x158>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b52      	ldr	r3, [pc, #328]	; (8001c78 <HAL_SYSTICK_Callback+0x158>)
 8001b2e:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 8001b30:	4b52      	ldr	r3, [pc, #328]	; (8001c7c <HAL_SYSTICK_Callback+0x15c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_SYSTICK_Callback+0x15c>)
 8001b38:	6013      	str	r3, [r2, #0]

	if(Start_Flag)
 8001b3a:	4b51      	ldr	r3, [pc, #324]	; (8001c80 <HAL_SYSTICK_Callback+0x160>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d017      	beq.n	8001b72 <HAL_SYSTICK_Callback+0x52>
	{
		++trig;
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_SYSTICK_Callback+0x164>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	4a4e      	ldr	r2, [pc, #312]	; (8001c84 <HAL_SYSTICK_Callback+0x164>)
 8001b4a:	6013      	str	r3, [r2, #0]
		if(trig >= 5000)
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_SYSTICK_Callback+0x164>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d909      	bls.n	8001b6c <HAL_SYSTICK_Callback+0x4c>
		{
			START_THE_SEQUENCE = true;
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_SYSTICK_Callback+0x168>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
			Start_Flag = false;
 8001b5e:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <HAL_SYSTICK_Callback+0x160>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]

			//DeInit the IC interrupt
			HAL_TIM_IC_MspDeInit(&htim4);
 8001b64:	4849      	ldr	r0, [pc, #292]	; (8001c8c <HAL_SYSTICK_Callback+0x16c>)
 8001b66:	f000 fd91 	bl	800268c <HAL_TIM_IC_MspDeInit>
 8001b6a:	e002      	b.n	8001b72 <HAL_SYSTICK_Callback+0x52>

		}


		else {
			START_THE_SEQUENCE = false;
 8001b6c:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_SYSTICK_Callback+0x168>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
		}
	}

	if(indx == 10)  // every 10 millisecond
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_SYSTICK_Callback+0x158>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d172      	bne.n	8001c60 <HAL_SYSTICK_Callback+0x140>
	{
		//Calculate the rpm
		indx = 0;
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_SYSTICK_Callback+0x158>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	801a      	strh	r2, [r3, #0]
		AS5600_GetRawAngle(&as5600);
 8001b80:	4843      	ldr	r0, [pc, #268]	; (8001c90 <HAL_SYSTICK_Callback+0x170>)
 8001b82:	f7ff fa4b 	bl	800101c <AS5600_GetRawAngle>

		CurrRead = as5600.rawAngle;
 8001b86:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_SYSTICK_Callback+0x170>)
 8001b88:	88da      	ldrh	r2, [r3, #6]
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_SYSTICK_Callback+0x174>)
 8001b8c:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  > 2047) rev ++;
 8001b8e:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_SYSTICK_Callback+0x178>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_SYSTICK_Callback+0x174>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9e:	db08      	blt.n	8001bb2 <HAL_SYSTICK_Callback+0x92>
 8001ba0:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001bb0:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  < -2047) rev --;
 8001bb2:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_SYSTICK_Callback+0x178>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_SYSTICK_Callback+0x174>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8001bc2:	dc08      	bgt.n	8001bd6 <HAL_SYSTICK_Callback+0xb6>
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001bd4:	801a      	strh	r2, [r3, #0]
		//sprintf((char*)buf, "Rev : %d\r\n", rev);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);

		//HAL_Delay(10);

		LastRead = CurrRead;
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_SYSTICK_Callback+0x174>)
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <HAL_SYSTICK_Callback+0x178>)
 8001bdc:	801a      	strh	r2, [r3, #0]

		if(rev < 0) Length = (2 * __PI * __RADIUS * (-rev)) * 0.01;   //Converting centi to meters
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da1e      	bge.n	8001c26 <HAL_SYSTICK_Callback+0x106>
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bee:	425b      	negs	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc9f 	bl	8000534 <__aeabi_i2d>
 8001bf6:	a31c      	add	r3, pc, #112	; (adr r3, 8001c68 <HAL_SYSTICK_Callback+0x148>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fd04 	bl	8000608 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	a319      	add	r3, pc, #100	; (adr r3, 8001c70 <HAL_SYSTICK_Callback+0x150>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fcfb 	bl	8000608 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ffed 	bl	8000bf8 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_SYSTICK_Callback+0x180>)
 8001c22:	6013      	str	r3, [r2, #0]
		}


	else{}

}
 8001c24:	e01c      	b.n	8001c60 <HAL_SYSTICK_Callback+0x140>
		else Length = (2 * __PI * __RADIUS * (rev)) * 0.01;   //Converting centi to meters
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_SYSTICK_Callback+0x17c>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc81 	bl	8000534 <__aeabi_i2d>
 8001c32:	a30d      	add	r3, pc, #52	; (adr r3, 8001c68 <HAL_SYSTICK_Callback+0x148>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fce6 	bl	8000608 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	a30a      	add	r3, pc, #40	; (adr r3, 8001c70 <HAL_SYSTICK_Callback+0x150>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fcdd 	bl	8000608 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ffcf 	bl	8000bf8 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_SYSTICK_Callback+0x180>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	39f3c1ae 	.word	0x39f3c1ae
 8001c6c:	402ce714 	.word	0x402ce714
 8001c70:	47ae147b 	.word	0x47ae147b
 8001c74:	3f847ae1 	.word	0x3f847ae1
 8001c78:	20000500 	.word	0x20000500
 8001c7c:	20000504 	.word	0x20000504
 8001c80:	200004f0 	.word	0x200004f0
 8001c84:	200004f4 	.word	0x200004f4
 8001c88:	200004f9 	.word	0x200004f9
 8001c8c:	2000033c 	.word	0x2000033c
 8001c90:	20000460 	.word	0x20000460
 8001c94:	200004e2 	.word	0x200004e2
 8001c98:	200004e0 	.word	0x200004e0
 8001c9c:	200004e6 	.word	0x200004e6
 8001ca0:	200004ec 	.word	0x200004ec

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	; 0x50
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2230      	movs	r2, #48	; 0x30
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f006 fb22 	bl	80082fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <SystemClock_Config+0xcc>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <SystemClock_Config+0xcc>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <SystemClock_Config+0xcc>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <SystemClock_Config+0xd0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cf0:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <SystemClock_Config+0xd0>)
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <SystemClock_Config+0xd0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001d18:	230f      	movs	r3, #15
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001d1c:	2390      	movs	r3, #144	; 0x90
 8001d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d20:	2304      	movs	r3, #4
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001d24:	2305      	movs	r3, #5
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fbfd 	bl	800552c <HAL_RCC_OscConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d38:	f000 fab9 	bl	80022ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fe5f 	bl	8005a1c <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d64:	f000 faa3 	bl	80022ae <Error_Handler>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3750      	adds	r7, #80	; 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <MX_ADC1_Init+0x9c>)
 8001d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <MX_ADC1_Init+0xa0>)
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd6:	480e      	ldr	r0, [pc, #56]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001dd8:	f001 f8f2 	bl	8002fc0 <HAL_ADC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001de2:	f000 fa64 	bl	80022ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001de6:	2304      	movs	r3, #4
 8001de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001dee:	2306      	movs	r3, #6
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df2:	463b      	mov	r3, r7
 8001df4:	4619      	mov	r1, r3
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <MX_ADC1_Init+0x98>)
 8001df8:	f001 f926 	bl	8003048 <HAL_ADC_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e02:	f000 fa54 	bl	80022ae <Error_Handler>
  }

}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000204 	.word	0x20000204
 8001e14:	40012000 	.word	0x40012000
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <MX_I2C1_Init+0x54>)
 8001e24:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <MX_I2C1_Init+0x58>)
 8001e2a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_I2C1_Init+0x50>)
 8001e5a:	f002 f8c3 	bl	8003fe4 <HAL_I2C_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001e64:	f000 fa23 	bl	80022ae <Error_Handler>
	}
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000040c 	.word	0x2000040c
 8001e70:	40005400 	.word	0x40005400
 8001e74:	000186a0 	.word	0x000186a0

08001e78 <MX_UART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart1.Instance = USART1;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_UART1_Init+0x44>)
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <MX_UART1_Init+0x48>)
 8001e80:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_UART1_Init+0x44>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_UART1_Init+0x44>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_UART1_Init+0x44>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_UART1_Init+0x44>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_UART1_Init+0x44>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_UART1_Init+0x44>)
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK) Error_Handler();  // If there is a problem
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_UART1_Init+0x44>)
 8001eaa:	f005 f943 	bl	8007134 <HAL_UART_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_UART1_Init+0x40>
 8001eb4:	f000 f9fb 	bl	80022ae <Error_Handler>

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000384 	.word	0x20000384
 8001ec0:	40011000 	.word	0x40011000

08001ec4 <MX_UART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_UART2_Init+0x44>)
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <MX_UART2_Init+0x48>)
 8001ecc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_UART2_Init+0x44>)
 8001ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_UART2_Init+0x44>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_UART2_Init+0x44>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_UART2_Init+0x44>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_UART2_Init+0x44>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_UART2_Init+0x44>)
 8001ef0:	220c      	movs	r2, #12
 8001ef2:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();  // If there is a problem
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_UART2_Init+0x44>)
 8001ef6:	f005 f91d 	bl	8007134 <HAL_UART_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_UART2_Init+0x40>
 8001f00:	f000 f9d5 	bl	80022ae <Error_Handler>

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200003c8 	.word	0x200003c8
 8001f0c:	40004400 	.word	0x40004400

08001f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2224      	movs	r2, #36	; 0x24
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f006 f9ec 	bl	80082fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
  	 * Load the number to the ARR register.(Only 16 bit wide)
  	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
  	 *
  	 */

  htim2.Instance = TIM2;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f54:	2303      	movs	r3, #3
 8001f56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f80:	f004 f8df 	bl	8006142 <HAL_TIM_Encoder_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f8a:	f000 f990 	bl	80022ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_TIM2_Init+0xa4>)
 8001f9c:	f005 f848 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001fa6:	f000 f982 	bl	80022ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	3730      	adds	r7, #48	; 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200002ac 	.word	0x200002ac

08001fb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	615a      	str	r2, [r3, #20]
 8001fd8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <MX_TIM3_Init+0xc0>)
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <MX_TIM3_Init+0xc4>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1; //60MHz
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <MX_TIM3_Init+0xc0>)
 8001fe2:	223b      	movs	r2, #59	; 0x3b
 8001fe4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <MX_TIM3_Init+0xc0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64 - 1;  //Generates 15KHz frequency signal.
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <MX_TIM3_Init+0xc0>)
 8001fee:	223f      	movs	r2, #63	; 0x3f
 8001ff0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <MX_TIM3_Init+0xc0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <MX_TIM3_Init+0xc0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ffe:	481e      	ldr	r0, [pc, #120]	; (8002078 <MX_TIM3_Init+0xc0>)
 8002000:	f003 feec 	bl	8005ddc <HAL_TIM_PWM_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800200a:	f000 f950 	bl	80022ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	4619      	mov	r1, r3
 800201c:	4816      	ldr	r0, [pc, #88]	; (8002078 <MX_TIM3_Init+0xc0>)
 800201e:	f005 f807 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002028:	f000 f941 	bl	80022ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202c:	2360      	movs	r3, #96	; 0x60
 800202e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	480d      	ldr	r0, [pc, #52]	; (8002078 <MX_TIM3_Init+0xc0>)
 8002044:	f004 fb76 	bl	8006734 <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800204e:	f000 f92e 	bl	80022ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2204      	movs	r2, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4807      	ldr	r0, [pc, #28]	; (8002078 <MX_TIM3_Init+0xc0>)
 800205a:	f004 fb6b 	bl	8006734 <HAL_TIM_PWM_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002064:	f000 f923 	bl	80022ae <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <MX_TIM3_Init+0xc0>)
 800206a:	f000 fad5 	bl	8002618 <HAL_TIM_MspPostInit>

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200002f4 	.word	0x200002f4
 800207c:	40000400 	.word	0x40000400

08002080 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_TIM4_Init+0xa0>)
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <MX_TIM4_Init+0xa4>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020a4:	223b      	movs	r2, #59	; 0x3b
 80020a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80020c2:	4817      	ldr	r0, [pc, #92]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020c4:	f003 ffee 	bl	80060a4 <HAL_TIM_IC_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 f8ee 	bl	80022ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4619      	mov	r1, r3
 80020e0:	480f      	ldr	r0, [pc, #60]	; (8002120 <MX_TIM4_Init+0xa0>)
 80020e2:	f004 ffa5 	bl	8007030 <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80020ec:	f000 f8df 	bl	80022ae <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80020f0:	230a      	movs	r3, #10
 80020f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020f4:	2301      	movs	r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <MX_TIM4_Init+0xa0>)
 8002108:	f004 fa77 	bl	80065fa <HAL_TIM_IC_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002112:	f000 f8cc 	bl	80022ae <Error_Handler>
  }

}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000033c 	.word	0x2000033c
 8002124:	40000800 	.word	0x40000800

08002128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_DMA_Init+0x3c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <MX_DMA_Init+0x3c>)
 8002138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_DMA_Init+0x3c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2038      	movs	r0, #56	; 0x38
 8002150:	f001 fa73 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002154:	2038      	movs	r0, #56	; 0x38
 8002156:	f001 fa8c 	bl	8003672 <HAL_NVIC_EnableIRQ>

}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <MX_GPIO_Init+0x12c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a43      	ldr	r2, [pc, #268]	; (8002294 <MX_GPIO_Init+0x12c>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <MX_GPIO_Init+0x12c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a35      	ldr	r2, [pc, #212]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <MX_GPIO_Init+0x12c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, winch_dir_Pin|bay_dir_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80021f4:	4828      	ldr	r0, [pc, #160]	; (8002298 <MX_GPIO_Init+0x130>)
 80021f6:	f001 feb7 	bl	8003f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : spring_thing_ext_Pin */
  GPIO_InitStruct.Pin = spring_thing_ext_Pin_Pin;
 80021fa:	2308      	movs	r3, #8
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(spring_thing_ext_Pin_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4823      	ldr	r0, [pc, #140]	; (800229c <MX_GPIO_Init+0x134>)
 8002210:	f001 fc42 	bl	8003a98 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002214:	2009      	movs	r0, #9
 8002216:	f001 fa2c 	bl	8003672 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn,15,0);
 800221a:	2200      	movs	r2, #0
 800221c:	210f      	movs	r1, #15
 800221e:	2009      	movs	r0, #9
 8002220:	f001 fa0b 	bl	800363a <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : winch_dir_Pin bay_dir_Pin */
  GPIO_InitStruct.Pin = winch_dir_Pin|bay_dir_Pin;
 8002224:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4816      	ldr	r0, [pc, #88]	; (8002298 <MX_GPIO_Init+0x130>)
 800223e:	f001 fc2b 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : roof_top_ext_Pin */
  GPIO_InitStruct.Pin = roof_top_ext_Pin;
 8002242:	2301      	movs	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002246:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800224a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800224c:	2301      	movs	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(roof_top_ext_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4811      	ldr	r0, [pc, #68]	; (800229c <MX_GPIO_Init+0x134>)
 8002258:	f001 fc1e 	bl	8003a98 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800225c:	2006      	movs	r0, #6
 800225e:	f001 fa08 	bl	8003672 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn,15,0);
 8002262:	2200      	movs	r2, #0
 8002264:	210f      	movs	r1, #15
 8002266:	2006      	movs	r0, #6
 8002268:	f001 f9e7 	bl	800363a <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : internal LED */
  GPIO_InitStruct.Pin = blue_led_Pin;
 800226c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(blue_led_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4806      	ldr	r0, [pc, #24]	; (80022a0 <MX_GPIO_Init+0x138>)
 8002286:	f001 fc07 	bl	8003a98 <HAL_GPIO_Init>


}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800

080022a4 <MX_Jump>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void MX_Jump()
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
	__disable_irq();
	while(1);
 80022ac:	e7fe      	b.n	80022ac <MX_Jump+0x8>

080022ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022b2:	b672      	cpsid	i
}
 80022b4:	bf00      	nop

	/*
	 * Can Add ASSERT Statements here, for debugging purpose only.
	 */
  __disable_irq();
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <Error_Handler+0x8>

080022b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_MspInit+0x4c>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <HAL_MspInit+0x4c>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_MspInit+0x4c>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_MspInit+0x4c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_MspInit+0x4c>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_MspInit+0x4c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_ADC_MspInit+0xec>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d15f      	bne.n	80023ea <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_ADC_MspInit+0xf0>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_ADC_MspInit+0xf0>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6453      	str	r3, [r2, #68]	; 0x44
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_ADC_MspInit+0xf0>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_ADC_MspInit+0xf0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_ADC_MspInit+0xf0>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_ADC_MspInit+0xf0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = curr_sensor_Pin;
 8002362:	2310      	movs	r3, #16
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002366:	2303      	movs	r3, #3
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(curr_sensor_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4821      	ldr	r0, [pc, #132]	; (80023fc <HAL_ADC_MspInit+0xf4>)
 8002376:	f001 fb8f 	bl	8003a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <HAL_ADC_MspInit+0xfc>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 8002382:	2200      	movs	r2, #0
 8002384:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 8002394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002398:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 800239c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023be:	4810      	ldr	r0, [pc, #64]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023c0:	f001 f978 	bl	80036b4 <HAL_DMA_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80023ca:	f7ff ff70 	bl	80022ae <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_ADC_MspInit+0xf8>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2012      	movs	r0, #18
 80023e0:	f001 f92b 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80023e4:	2012      	movs	r0, #18
 80023e6:	f001 f944 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40012000 	.word	0x40012000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000
 8002400:	2000024c 	.word	0x2000024c
 8002404:	40026410 	.word	0x40026410

08002408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_I2C_MspInit+0x94>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d134      	bne.n	8002494 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002446:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244c:	2312      	movs	r3, #18
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002458:	2304      	movs	r3, #4
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4810      	ldr	r0, [pc, #64]	; (80024a4 <HAL_I2C_MspInit+0x9c>)
 8002464:	f001 fb18 	bl	8003a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 8002472:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002476:	6413      	str	r3, [r2, #64]	; 0x40
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_I2C_MspInit+0x98>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2101      	movs	r1, #1
 8002488:	201f      	movs	r0, #31
 800248a:	f001 f8d6 	bl	800363a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800248e:	201f      	movs	r0, #31
 8002490:	f001 f8ef 	bl	8003672 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40005400 	.word	0x40005400
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020400 	.word	0x40020400

080024a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d12b      	bne.n	8002522 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_TIM_Encoder_MspInit+0x84>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder_a_Pin|encoder_b_Pin;
 8002502:	2303      	movs	r3, #3
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <HAL_TIM_Encoder_MspInit+0x88>)
 800251e:	f001 fabb 	bl	8003a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000

08002534 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <HAL_TIM_PWM_MspInit+0x3c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10d      	bne.n	8002562 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_TIM_PWM_MspInit+0x40>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_TIM_PWM_MspInit+0x40>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_TIM_PWM_MspInit+0x40>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40000400 	.word	0x40000400
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1d      	ldr	r2, [pc, #116]	; (800260c <HAL_TIM_IC_MspInit+0x94>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d133      	bne.n	8002602 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_TIM_IC_MspInit+0x98>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = pixhawk_signal_Pin;
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025e2:	2302      	movs	r3, #2
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pixhawk_signal_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4809      	ldr	r0, [pc, #36]	; (8002614 <HAL_TIM_IC_MspInit+0x9c>)
 80025ee:	f001 fa53 	bl	8003a98 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
   HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	201e      	movs	r0, #30
 80025f8:	f001 f81f 	bl	800363a <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025fc:	201e      	movs	r0, #30
 80025fe:	f001 f838 	bl	8003672 <HAL_NVIC_EnableIRQ>
  }

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40000800 	.word	0x40000800
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400

08002618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <HAL_TIM_MspPostInit+0x68>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11d      	bne.n	8002676 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_TIM_MspPostInit+0x6c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_TIM_MspPostInit+0x6c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_TIM_MspPostInit+0x6c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = winch_pwm_Pin|bay_door_pwm_Pin;
 8002656:	23c0      	movs	r3, #192	; 0xc0
 8002658:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002666:	2302      	movs	r3, #2
 8002668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <HAL_TIM_MspPostInit+0x70>)
 8002672:	f001 fa11 	bl	8003a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002676:	bf00      	nop
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40000400 	.word	0x40000400
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_TIM_IC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef* htim_ic)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_ic->Instance==TIM4)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a08      	ldr	r2, [pc, #32]	; (80026bc <HAL_TIM_IC_MspDeInit+0x30>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d109      	bne.n	80026b2 <HAL_TIM_IC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_TIM_IC_MspDeInit+0x34>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_TIM_IC_MspDeInit+0x34>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40

    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    HAL_GPIO_DeInit(pixhawk_signal_GPIO_Port, pixhawk_signal_Pin);
 80026aa:	2140      	movs	r1, #64	; 0x40
 80026ac:	4805      	ldr	r0, [pc, #20]	; (80026c4 <HAL_TIM_IC_MspDeInit+0x38>)
 80026ae:	f001 fb77 	bl	8003da0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020400 	.word	0x40020400

080026c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	; 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_UART_MspInit+0x108>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13d      	bne.n	8002766 <HAL_UART_MspInit+0x9e>
  {
      /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002722:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002734:	2307      	movs	r3, #7
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	4619      	mov	r1, r3
 800273e:	4826      	ldr	r0, [pc, #152]	; (80027d8 <HAL_UART_MspInit+0x110>)
 8002740:	f001 f9aa 	bl	8003a98 <HAL_GPIO_Init>


    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002744:	2025      	movs	r0, #37	; 0x25
 8002746:	f000 ff94 	bl	8003672 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 800274a:	2200      	movs	r2, #0
 800274c:	2106      	movs	r1, #6
 800274e:	2025      	movs	r0, #37	; 0x25
 8002750:	f000 ff73 	bl	800363a <HAL_NVIC_SetPriority>

	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_UART_MspInit+0x114>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_UART_MspInit+0x114>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0220 	orr.w	r2, r2, #32
 8002762:	60da      	str	r2, [r3, #12]

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  }

}
 8002764:	e030      	b.n	80027c8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <HAL_UART_MspInit+0x118>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d12b      	bne.n	80027c8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 800277a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6313      	str	r3, [r2, #48]	; 0x30
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_UART_MspInit+0x10c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027a8:	230c      	movs	r3, #12
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027b8:	2307      	movs	r3, #7
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <HAL_UART_MspInit+0x110>)
 80027c4:	f001 f968 	bl	8003a98 <HAL_GPIO_Init>
}
 80027c8:	bf00      	nop
 80027ca:	3730      	adds	r7, #48	; 0x30
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	20000384 	.word	0x20000384
 80027e0:	40004400 	.word	0x40004400

080027e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <NMI_Handler+0x4>

080027ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <HardFault_Handler+0x4>

080027f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <MemManage_Handler+0x4>

080027f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fa:	e7fe      	b.n	80027fa <BusFault_Handler+0x4>

080027fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <UsageFault_Handler+0x4>

08002802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8002830:	f000 fb82 	bl	8002f38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002834:	f000 ff37 	bl	80036a6 <HAL_SYSTICK_IRQHandler>
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <TIM4_IRQHandler+0x10>)
 8002842:	f003 fdd2 	bl	80063ea <HAL_TIM_IRQHandler>
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000033c 	.word	0x2000033c

08002850 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8002850:	b5b0      	push	{r4, r5, r7, lr}
 8002852:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	2201      	movs	r2, #1
 800285a:	4985      	ldr	r1, [pc, #532]	; (8002a70 <USART1_IRQHandler+0x220>)
 800285c:	4885      	ldr	r0, [pc, #532]	; (8002a74 <USART1_IRQHandler+0x224>)
 800285e:	f004 fd48 	bl	80072f2 <HAL_UART_Receive>
		if (receivedData == '\r')
 8002862:	4b83      	ldr	r3, [pc, #524]	; (8002a70 <USART1_IRQHandler+0x220>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b0d      	cmp	r3, #13
 8002868:	f040 809e 	bne.w	80029a8 <USART1_IRQHandler+0x158>
			{
				recepCmplt = true;
 800286c:	4b82      	ldr	r3, [pc, #520]	; (8002a78 <USART1_IRQHandler+0x228>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
				Data = atoi((char*)data_buffer);
 8002872:	4882      	ldr	r0, [pc, #520]	; (8002a7c <USART1_IRQHandler+0x22c>)
 8002874:	f005 fd14 	bl	80082a0 <atoi>
 8002878:	4603      	mov	r3, r0
 800287a:	b21a      	sxth	r2, r3
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <USART1_IRQHandler+0x230>)
 800287e:	801a      	strh	r2, [r3, #0]

				data_buffer[count++] = '\r';
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <USART1_IRQHandler+0x234>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	497f      	ldr	r1, [pc, #508]	; (8002a84 <USART1_IRQHandler+0x234>)
 8002888:	600a      	str	r2, [r1, #0]
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <USART1_IRQHandler+0x22c>)
 800288c:	210d      	movs	r1, #13
 800288e:	54d1      	strb	r1, [r2, r3]

				Data1 = -Data;
 8002890:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <USART1_IRQHandler+0x230>)
 8002892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002896:	425b      	negs	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4b7b      	ldr	r3, [pc, #492]	; (8002a88 <USART1_IRQHandler+0x238>)
 800289c:	601a      	str	r2, [r3, #0]

				if(Data >= 0)
 800289e:	4b78      	ldr	r3, [pc, #480]	; (8002a80 <USART1_IRQHandler+0x230>)
 80028a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db36      	blt.n	8002916 <USART1_IRQHandler+0xc6>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ae:	4877      	ldr	r0, [pc, #476]	; (8002a8c <USART1_IRQHandler+0x23c>)
 80028b0:	f001 fb5a 	bl	8003f68 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2120      	movs	r1, #32
 80028b8:	4874      	ldr	r0, [pc, #464]	; (8002a8c <USART1_IRQHandler+0x23c>)
 80028ba:	f001 fb55 	bl	8003f68 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(Data)/100);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <USART1_IRQHandler+0x240>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe26 	bl	8000514 <__aeabi_ui2d>
 80028c8:	4604      	mov	r4, r0
 80028ca:	460d      	mov	r5, r1
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <USART1_IRQHandler+0x230>)
 80028ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe2e 	bl	8000534 <__aeabi_i2d>
 80028d8:	a363      	add	r3, pc, #396	; (adr r3, 8002a68 <USART1_IRQHandler+0x218>)
 80028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028de:	f7fd fe93 	bl	8000608 <__aeabi_dmul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4620      	mov	r0, r4
 80028e8:	4629      	mov	r1, r5
 80028ea:	f7fd fe8d 	bl	8000608 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <USART1_IRQHandler+0x244>)
 80028fc:	f7fd ffae 	bl	800085c <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4962      	ldr	r1, [pc, #392]	; (8002a90 <USART1_IRQHandler+0x240>)
 8002906:	680c      	ldr	r4, [r1, #0]
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f7fe f954 	bl	8000bb8 <__aeabi_d2uiz>
 8002910:	4603      	mov	r3, r0
 8002912:	63a3      	str	r3, [r4, #56]	; 0x38
 8002914:	e036      	b.n	8002984 <USART1_IRQHandler+0x134>

				}

				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8002916:	2201      	movs	r2, #1
 8002918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800291c:	485b      	ldr	r0, [pc, #364]	; (8002a8c <USART1_IRQHandler+0x23c>)
 800291e:	f001 fb23 	bl	8003f68 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002922:	2201      	movs	r2, #1
 8002924:	2120      	movs	r1, #32
 8002926:	4859      	ldr	r0, [pc, #356]	; (8002a8c <USART1_IRQHandler+0x23c>)
 8002928:	f001 fb1e 	bl	8003f68 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(-Data)/100);
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <USART1_IRQHandler+0x240>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fdef 	bl	8000514 <__aeabi_ui2d>
 8002936:	4604      	mov	r4, r0
 8002938:	460d      	mov	r5, r1
 800293a:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <USART1_IRQHandler+0x230>)
 800293c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002940:	425b      	negs	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fdf6 	bl	8000534 <__aeabi_i2d>
 8002948:	a347      	add	r3, pc, #284	; (adr r3, 8002a68 <USART1_IRQHandler+0x218>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fe5b 	bl	8000608 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4620      	mov	r0, r4
 8002958:	4629      	mov	r1, r5
 800295a:	f7fd fe55 	bl	8000608 <__aeabi_dmul>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <USART1_IRQHandler+0x244>)
 800296c:	f7fd ff76 	bl	800085c <__aeabi_ddiv>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4946      	ldr	r1, [pc, #280]	; (8002a90 <USART1_IRQHandler+0x240>)
 8002976:	680c      	ldr	r4, [r1, #0]
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f91c 	bl	8000bb8 <__aeabi_d2uiz>
 8002980:	4603      	mov	r3, r0
 8002982:	63a3      	str	r3, [r4, #56]	; 0x38

				}


				HAL_UART_Transmit(&huart1, data_buffer, count, HAL_MAX_DELAY);  //send to terminal
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <USART1_IRQHandler+0x234>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b29a      	uxth	r2, r3
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	493b      	ldr	r1, [pc, #236]	; (8002a7c <USART1_IRQHandler+0x22c>)
 8002990:	4838      	ldr	r0, [pc, #224]	; (8002a74 <USART1_IRQHandler+0x224>)
 8002992:	f004 fc1c 	bl	80071ce <HAL_UART_Transmit>
				memset(data_buffer, 0, sizeof(data_buffer));
 8002996:	2205      	movs	r2, #5
 8002998:	2100      	movs	r1, #0
 800299a:	4838      	ldr	r0, [pc, #224]	; (8002a7c <USART1_IRQHandler+0x22c>)
 800299c:	f005 fcae 	bl	80082fc <memset>
				count = 0;
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <USART1_IRQHandler+0x234>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
		else
		{
			data_buffer[count++] = receivedData;
		}

	return;
 80029a6:	e05c      	b.n	8002a62 <USART1_IRQHandler+0x212>
		else if(receivedData == ' ')
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <USART1_IRQHandler+0x220>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d136      	bne.n	8002a1e <USART1_IRQHandler+0x1ce>
			HAL_UART_Transmit(&huart1, (uint8_t *)E_Stop, strlen(E_Stop), HAL_MAX_DELAY);  //send to terminal
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <USART1_IRQHandler+0x248>)
 80029b2:	681c      	ldr	r4, [r3, #0]
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <USART1_IRQHandler+0x248>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fc11 	bl	80001e0 <strlen>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	4621      	mov	r1, r4
 80029c8:	482a      	ldr	r0, [pc, #168]	; (8002a74 <USART1_IRQHandler+0x224>)
 80029ca:	f004 fc00 	bl	80071ce <HAL_UART_Transmit>
			memset(data_buffer, 0, sizeof(data_buffer));
 80029ce:	2205      	movs	r2, #5
 80029d0:	2100      	movs	r1, #0
 80029d2:	482a      	ldr	r0, [pc, #168]	; (8002a7c <USART1_IRQHandler+0x22c>)
 80029d4:	f005 fc92 	bl	80082fc <memset>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <USART1_IRQHandler+0x240>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fd99 	bl	8000514 <__aeabi_ui2d>
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	f7fd fe0d 	bl	8000608 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <USART1_IRQHandler+0x244>)
 80029fc:	f7fd ff2e 	bl	800085c <__aeabi_ddiv>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4922      	ldr	r1, [pc, #136]	; (8002a90 <USART1_IRQHandler+0x240>)
 8002a06:	680c      	ldr	r4, [r1, #0]
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7fe f8d4 	bl	8000bb8 <__aeabi_d2uiz>
 8002a10:	4603      	mov	r3, r0
 8002a12:	63a3      	str	r3, [r4, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002a14:	2104      	movs	r1, #4
 8002a16:	481e      	ldr	r0, [pc, #120]	; (8002a90 <USART1_IRQHandler+0x240>)
 8002a18:	f003 fae0 	bl	8005fdc <HAL_TIM_PWM_Stop>
	return;
 8002a1c:	e021      	b.n	8002a62 <USART1_IRQHandler+0x212>
		else if(receivedData == 'r')
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <USART1_IRQHandler+0x220>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b72      	cmp	r3, #114	; 0x72
 8002a24:	d108      	bne.n	8002a38 <USART1_IRQHandler+0x1e8>
			HAL_GPIO_Init(GPIOA, &tim3ch1gpio);
 8002a26:	491d      	ldr	r1, [pc, #116]	; (8002a9c <USART1_IRQHandler+0x24c>)
 8002a28:	4818      	ldr	r0, [pc, #96]	; (8002a8c <USART1_IRQHandler+0x23c>)
 8002a2a:	f001 f835 	bl	8003a98 <HAL_GPIO_Init>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a2e:	2104      	movs	r1, #4
 8002a30:	4817      	ldr	r0, [pc, #92]	; (8002a90 <USART1_IRQHandler+0x240>)
 8002a32:	f003 fa23 	bl	8005e7c <HAL_TIM_PWM_Start>
	return;
 8002a36:	e014      	b.n	8002a62 <USART1_IRQHandler+0x212>
		else if(receivedData == 'v')
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <USART1_IRQHandler+0x220>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b76      	cmp	r3, #118	; 0x76
 8002a3e:	d010      	beq.n	8002a62 <USART1_IRQHandler+0x212>
		else if(receivedData == 's')
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <USART1_IRQHandler+0x220>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b73      	cmp	r3, #115	; 0x73
 8002a46:	d103      	bne.n	8002a50 <USART1_IRQHandler+0x200>
			Start_Flag = true;
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <USART1_IRQHandler+0x250>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
	return;
 8002a4e:	e008      	b.n	8002a62 <USART1_IRQHandler+0x212>
			data_buffer[count++] = receivedData;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <USART1_IRQHandler+0x234>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	490b      	ldr	r1, [pc, #44]	; (8002a84 <USART1_IRQHandler+0x234>)
 8002a58:	600a      	str	r2, [r1, #0]
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <USART1_IRQHandler+0x220>)
 8002a5c:	7811      	ldrb	r1, [r2, #0]
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <USART1_IRQHandler+0x22c>)
 8002a60:	54d1      	strb	r1, [r2, r3]
	return;
 8002a62:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);

}
 8002a64:	bdb0      	pop	{r4, r5, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	190cb39b 	.word	0x190cb39b
 8002a6c:	3fd91919 	.word	0x3fd91919
 8002a70:	20000470 	.word	0x20000470
 8002a74:	20000384 	.word	0x20000384
 8002a78:	20000480 	.word	0x20000480
 8002a7c:	20000474 	.word	0x20000474
 8002a80:	20000482 	.word	0x20000482
 8002a84:	2000047c 	.word	0x2000047c
 8002a88:	20000484 	.word	0x20000484
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	200002f4 	.word	0x200002f4
 8002a94:	40590000 	.word	0x40590000
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	2000050c 	.word	0x2000050c
 8002aa0:	200004f0 	.word	0x200004f0

08002aa4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	/*
	 * This handler is reserved for the Mavlink interface. Future Implementation.
	 */
	HAL_UART_IRQHandler(&huart2);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <USART2_IRQHandler+0x10>)
 8002aaa:	f004 fcc5 	bl	8007438 <HAL_UART_IRQHandler>
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200003c8 	.word	0x200003c8

08002ab8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ab8:	b598      	push	{r3, r4, r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PB0
	 */

	if(close_door)
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <EXTI0_IRQHandler+0xcc>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d059      	beq.n	8002b78 <EXTI0_IRQHandler+0xc0>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);
 8002ac4:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <EXTI0_IRQHandler+0xd0>)
 8002ac6:	681c      	ldr	r4, [r3, #0]
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <EXTI0_IRQHandler+0xd0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fb87 	bl	80001e0 <strlen>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	4621      	mov	r1, r4
 8002adc:	482b      	ldr	r0, [pc, #172]	; (8002b8c <EXTI0_IRQHandler+0xd4>)
 8002ade:	f004 fb76 	bl	80071ce <HAL_UART_Transmit>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002ae2:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <EXTI0_IRQHandler+0xd8>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd14 	bl	8000514 <__aeabi_ui2d>
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fd fd88 	bl	8000608 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <EXTI0_IRQHandler+0xdc>)
 8002b06:	f7fd fea9 	bl	800085c <__aeabi_ddiv>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4920      	ldr	r1, [pc, #128]	; (8002b90 <EXTI0_IRQHandler+0xd8>)
 8002b10:	680c      	ldr	r4, [r1, #0]
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fe f84f 	bl	8000bb8 <__aeabi_d2uiz>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	63a3      	str	r3, [r4, #56]	; 0x38


		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <EXTI0_IRQHandler+0xe0>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]


		HAL_GPIO_WritePin(winch_dir_GPIO_Port, winch_dir_Pin, GPIO_PIN_RESET);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2120      	movs	r1, #32
 8002b28:	481c      	ldr	r0, [pc, #112]	; (8002b9c <EXTI0_IRQHandler+0xe4>)
 8002b2a:	f001 fa1d 	bl	8003f68 <HAL_GPIO_WritePin>
			for(int i =0; i<6000; i++){

				__HAL_TIM_SET_COMPARE(&hhtim3, TIM_CHANNEL_1, hhtim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <EXTI0_IRQHandler+0xd8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcee 	bl	8000514 <__aeabi_ui2d>
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	f7fd fd62 	bl	8000608 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <EXTI0_IRQHandler+0xdc>)
 8002b52:	f7fd fe83 	bl	800085c <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	490d      	ldr	r1, [pc, #52]	; (8002b90 <EXTI0_IRQHandler+0xd8>)
 8002b5c:	680c      	ldr	r4, [r1, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f829 	bl	8000bb8 <__aeabi_d2uiz>
 8002b66:	4603      	mov	r3, r0
 8002b68:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002b6a:	2104      	movs	r1, #4
 8002b6c:	4808      	ldr	r0, [pc, #32]	; (8002b90 <EXTI0_IRQHandler+0xd8>)
 8002b6e:	f003 fa35 	bl	8005fdc <HAL_TIM_PWM_Stop>
		spring_trig = false;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <EXTI0_IRQHandler+0xe8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
	}


  HAL_GPIO_EXTI_IRQHandler(roof_top_ext_Pin);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f001 fa0f 	bl	8003f9c <HAL_GPIO_EXTI_IRQHandler>

}
 8002b7e:	bf00      	nop
 8002b80:	bd98      	pop	{r3, r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200004fc 	.word	0x200004fc
 8002b88:	20000008 	.word	0x20000008
 8002b8c:	20000384 	.word	0x20000384
 8002b90:	200002f4 	.word	0x200002f4
 8002b94:	40590000 	.word	0x40590000
 8002b98:	200004fd 	.word	0x200004fd
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	200004fb 	.word	0x200004fb
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
	 *  This subroutine handles the Spring thing interrupt
	 *
	 *  PB3
	 */

 	if(poop_back)
 8002bae:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <EXTI3_IRQHandler+0xb0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d044      	beq.n	8002c40 <EXTI3_IRQHandler+0x98>
	{
		HAL_UART_Transmit(&huart1, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <EXTI3_IRQHandler+0xb4>)
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <EXTI3_IRQHandler+0xb4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fb0e 	bl	80001e0 <strlen>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4824      	ldr	r0, [pc, #144]	; (8002c60 <EXTI3_IRQHandler+0xb8>)
 8002bd0:	f004 fafd 	bl	80071ce <HAL_UART_Transmit>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <EXTI3_IRQHandler+0xbc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38

		for(int i =0; i<24000; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	e01f      	b.n	8002c22 <EXTI3_IRQHandler+0x7a>
		{

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <EXTI3_IRQHandler+0xbc>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc94 	bl	8000514 <__aeabi_ui2d>
 8002bec:	a318      	add	r3, pc, #96	; (adr r3, 8002c50 <EXTI3_IRQHandler+0xa8>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fd09 	bl	8000608 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <EXTI3_IRQHandler+0xc0>)
 8002c04:	f7fd fe2a 	bl	800085c <__aeabi_ddiv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4915      	ldr	r1, [pc, #84]	; (8002c64 <EXTI3_IRQHandler+0xbc>)
 8002c0e:	680c      	ldr	r4, [r1, #0]
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ffd0 	bl	8000bb8 <__aeabi_d2uiz>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	63a3      	str	r3, [r4, #56]	; 0x38
		for(int i =0; i<24000; i++)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	ddda      	ble.n	8002be2 <EXTI3_IRQHandler+0x3a>

		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <EXTI3_IRQHandler+0xbc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);


		poop_back = false;
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <EXTI3_IRQHandler+0xb0>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
		spring_trig = true;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <EXTI3_IRQHandler+0xc4>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]

	}

  HAL_GPIO_EXTI_IRQHandler(spring_thing_ext_Pin_Pin);
 8002c40:	2008      	movs	r0, #8
 8002c42:	f001 f9ab 	bl	8003f9c <HAL_GPIO_EXTI_IRQHandler>

}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	877be861 	.word	0x877be861
 8002c54:	40278787 	.word	0x40278787
 8002c58:	200004fa 	.word	0x200004fa
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000384 	.word	0x20000384
 8002c64:	200002f4 	.word	0x200002f4
 8002c68:	40590000 	.word	0x40590000
 8002c6c:	200004fb 	.word	0x200004fb

08002c70 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
	rawAngle = as5600.rawAngle;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <I2C1_EV_IRQHandler+0x18>)
 8002c76:	88da      	ldrh	r2, [r3, #6]
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <I2C1_EV_IRQHandler+0x1c>)
 8002c7a:	801a      	strh	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000460 	.word	0x20000460
 8002c8c:	200004e4 	.word	0x200004e4

08002c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
	return 1;
 8002c94:	2301      	movs	r3, #1
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_kill>:

int _kill(int pid, int sig)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002caa:	f005 fafd 	bl	80082a8 <__errno>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2216      	movs	r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
	return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_exit>:

void _exit (int status)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffe7 	bl	8002ca0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cd2:	e7fe      	b.n	8002cd2 <_exit+0x12>

08002cd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e00a      	b.n	8002cfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ce6:	f3af 8000 	nop.w
 8002cea:	4601      	mov	r1, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	b2ca      	uxtb	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbf0      	blt.n	8002ce6 <_read+0x12>
	}

return len;
 8002d04:	687b      	ldr	r3, [r7, #4]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e009      	b.n	8002d34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	60ba      	str	r2, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dbf1      	blt.n	8002d20 <_write+0x12>
	}
	return len;
 8002d3c:	687b      	ldr	r3, [r7, #4]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_close>:

int _close(int file)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_isatty>:

int _isatty(int file)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
	return 1;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <_sbrk+0x5c>)
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <_sbrk+0x60>)
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <_sbrk+0x64>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <_sbrk+0x68>)
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de0:	f005 fa62 	bl	80082a8 <__errno>
 8002de4:	4603      	mov	r3, r0
 8002de6:	220c      	movs	r2, #12
 8002de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	e009      	b.n	8002e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <_sbrk+0x64>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <_sbrk+0x64>)
 8002e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20010000 	.word	0x20010000
 8002e10:	00000400 	.word	0x00000400
 8002e14:	20000520 	.word	0x20000520
 8002e18:	20000538 	.word	0x20000538

08002e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <SystemInit+0x20>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <SystemInit+0x20>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e46:	490e      	ldr	r1, [pc, #56]	; (8002e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e5c:	4c0b      	ldr	r4, [pc, #44]	; (8002e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e6a:	f7ff ffd7 	bl	8002e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6e:	f005 fa21 	bl	80082b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e72:	f7fe fa99 	bl	80013a8 <main>
  bx  lr    
 8002e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002e84:	0800b69c 	.word	0x0800b69c
  ldr r2, =_sbss
 8002e88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002e8c:	20000538 	.word	0x20000538

08002e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC_IRQHandler>
	...

08002e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_Init+0x40>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_Init+0x40>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_Init+0x40>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f000 fbb1 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec2:	200f      	movs	r0, #15
 8002ec4:	f000 f808 	bl	8002ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec8:	f7ff f9f6 	bl	80022b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_InitTick+0x54>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_InitTick+0x58>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fbc9 	bl	800368e <HAL_SYSTICK_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00e      	b.n	8002f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	d80a      	bhi.n	8002f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f000 fb91 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <HAL_InitTick+0x5c>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	20000014 	.word	0x20000014
 8002f34:	20000010 	.word	0x20000010

08002f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_IncTick+0x20>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_IncTick+0x24>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <HAL_IncTick+0x24>)
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000014 	.word	0x20000014
 8002f5c:	20000524 	.word	0x20000524

08002f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return uwTick;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_GetTick+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000524 	.word	0x20000524

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff ffee 	bl	8002f60 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d005      	beq.n	8002f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_Delay+0x44>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f9e:	bf00      	nop
 8002fa0:	f7ff ffde 	bl	8002f60 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8f7      	bhi.n	8002fa0 <HAL_Delay+0x28>
  {
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000014 	.word	0x20000014

08002fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e033      	b.n	800303e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff f992 	bl	8002308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003006:	f023 0302 	bic.w	r3, r3, #2
 800300a:	f043 0202 	orr.w	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f93a 	bl	800328c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
 800302e:	e001      	b.n	8003034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x1c>
 8003060:	2302      	movs	r3, #2
 8003062:	e105      	b.n	8003270 <HAL_ADC_ConfigChannel+0x228>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d925      	bls.n	80030c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	3b1e      	subs	r3, #30
 800308a:	2207      	movs	r2, #7
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43da      	mvns	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	400a      	ands	r2, r1
 8003098:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68d9      	ldr	r1, [r3, #12]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	4603      	mov	r3, r0
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4403      	add	r3, r0
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	409a      	lsls	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e022      	b.n	8003106 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6919      	ldr	r1, [r3, #16]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	2207      	movs	r2, #7
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	400a      	ands	r2, r1
 80030e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4403      	add	r3, r0
 80030fc:	409a      	lsls	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d824      	bhi.n	8003158 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b05      	subs	r3, #5
 8003120:	221f      	movs	r2, #31
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	400a      	ands	r2, r1
 800312e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	4618      	mov	r0, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	3b05      	subs	r3, #5
 800314a:	fa00 f203 	lsl.w	r2, r0, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
 8003156:	e04c      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d824      	bhi.n	80031aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b23      	subs	r3, #35	; 0x23
 8003172:	221f      	movs	r2, #31
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43da      	mvns	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	400a      	ands	r2, r1
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b23      	subs	r3, #35	; 0x23
 800319c:	fa00 f203 	lsl.w	r2, r0, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
 80031a8:	e023      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b41      	subs	r3, #65	; 0x41
 80031bc:	221f      	movs	r2, #31
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	3b41      	subs	r3, #65	; 0x41
 80031e6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <HAL_ADC_ConfigChannel+0x234>)
 80031f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_ADC_ConfigChannel+0x238>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d109      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x1cc>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b12      	cmp	r3, #18
 8003206:	d105      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_ADC_ConfigChannel+0x238>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d123      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x21e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d003      	beq.n	800322e <HAL_ADC_ConfigChannel+0x1e6>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b11      	cmp	r3, #17
 800322c:	d11b      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d111      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_ADC_ConfigChannel+0x23c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a10      	ldr	r2, [pc, #64]	; (8003288 <HAL_ADC_ConfigChannel+0x240>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	0c9a      	lsrs	r2, r3, #18
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003258:	e002      	b.n	8003260 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3b01      	subs	r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f9      	bne.n	800325a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012300 	.word	0x40012300
 8003280:	40012000 	.word	0x40012000
 8003284:	2000000c 	.word	0x2000000c
 8003288:	431bde83 	.word	0x431bde83

0800328c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003294:	4b79      	ldr	r3, [pc, #484]	; (800347c <ADC_Init+0x1f0>)
 8003296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	4a58      	ldr	r2, [pc, #352]	; (8003480 <ADC_Init+0x1f4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	e00f      	b.n	800338a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0202 	bic.w	r2, r2, #2
 8003398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7e1b      	ldrb	r3, [r3, #24]
 80033a4:	005a      	lsls	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	3b01      	subs	r3, #1
 80033e4:	035a      	lsls	r2, r3, #13
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	e007      	b.n	8003400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	3b01      	subs	r3, #1
 800341c:	051a      	lsls	r2, r3, #20
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003442:	025a      	lsls	r2, r3, #9
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	029a      	lsls	r2, r3, #10
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40012300 	.word	0x40012300
 8003480:	0f000001 	.word	0x0f000001

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80036aa:	f7fe fa39 	bl	8001b20 <HAL_SYSTICK_Callback>
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7ff fc4e 	bl	8002f60 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e099      	b.n	8003804 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f0:	e00f      	b.n	8003712 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f2:	f7ff fc35 	bl	8002f60 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b05      	cmp	r3, #5
 80036fe:	d908      	bls.n	8003712 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2203      	movs	r2, #3
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e078      	b.n	8003804 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e8      	bne.n	80036f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4b38      	ldr	r3, [pc, #224]	; (800380c <HAL_DMA_Init+0x158>)
 800372c:	4013      	ands	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b04      	cmp	r3, #4
 800376a:	d107      	bne.n	800377c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4313      	orrs	r3, r2
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d117      	bne.n	80037d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8f1 	bl	80039a0 <DMA_CheckFifoParam>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037d2:	2301      	movs	r3, #1
 80037d4:	e016      	b.n	8003804 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8a8 	bl	8003934 <DMA_CalcBaseAndBitshift>
 80037e4:	4603      	mov	r3, r0
 80037e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	223f      	movs	r2, #63	; 0x3f
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	f010803f 	.word	0xf010803f

08003810 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800381e:	f7ff fb9f 	bl	8002f60 <HAL_GetTick>
 8003822:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d008      	beq.n	8003842 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e052      	b.n	80038e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0216 	bic.w	r2, r2, #22
 8003850:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003860:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_DMA_Abort+0x62>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0208 	bic.w	r2, r2, #8
 8003880:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003892:	e013      	b.n	80038bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003894:	f7ff fb64 	bl	8002f60 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d90c      	bls.n	80038bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2203      	movs	r2, #3
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e015      	b.n	80038e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e4      	bne.n	8003894 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	223f      	movs	r2, #63	; 0x3f
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e00c      	b.n	8003928 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2205      	movs	r2, #5
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3b10      	subs	r3, #16
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <DMA_CalcBaseAndBitshift+0x64>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <DMA_CalcBaseAndBitshift+0x68>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d909      	bls.n	8003976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	1d1a      	adds	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	659a      	str	r2, [r3, #88]	; 0x58
 8003974:	e007      	b.n	8003986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	aaaaaaab 	.word	0xaaaaaaab
 800399c:	0800b2a4 	.word	0x0800b2a4

080039a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d856      	bhi.n	8003a6e <DMA_CheckFifoParam+0xce>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <DMA_CheckFifoParam+0x28>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039eb 	.word	0x080039eb
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	08003a6f 	.word	0x08003a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d046      	beq.n	8003a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e043      	b.n	8003a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f2:	d140      	bne.n	8003a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f8:	e03d      	b.n	8003a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d121      	bne.n	8003a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d837      	bhi.n	8003a7a <DMA_CheckFifoParam+0xda>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x70>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a27 	.word	0x08003a27
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003a39 	.word	0x08003a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e030      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d025      	beq.n	8003a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a36:	e022      	b.n	8003a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a40:	d11f      	bne.n	8003a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a46:	e01c      	b.n	8003a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d903      	bls.n	8003a56 <DMA_CheckFifoParam+0xb6>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a54:	e018      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5a:	e015      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e00b      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e00a      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a72:	bf00      	nop
 8003a74:	e008      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
 8003a78:	e006      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e004      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a86:	bf00      	nop
    }
  } 
  
  return status; 
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e159      	b.n	8003d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f040 8148 	bne.w	8003d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d005      	beq.n	8003aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d130      	bne.n	8003b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b20:	2201      	movs	r2, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 0201 	and.w	r2, r3, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d017      	beq.n	8003b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d123      	bne.n	8003bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	220f      	movs	r2, #15
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80a2 	beq.w	8003d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_GPIO_Init+0x2e8>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a56      	ldr	r2, [pc, #344]	; (8003d80 <HAL_GPIO_Init+0x2e8>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b54      	ldr	r3, [pc, #336]	; (8003d80 <HAL_GPIO_Init+0x2e8>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c3a:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_GPIO_Init+0x2ec>)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a49      	ldr	r2, [pc, #292]	; (8003d88 <HAL_GPIO_Init+0x2f0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0x202>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <HAL_GPIO_Init+0x2f4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0x1fe>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a47      	ldr	r2, [pc, #284]	; (8003d90 <HAL_GPIO_Init+0x2f8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00d      	beq.n	8003c92 <HAL_GPIO_Init+0x1fa>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a46      	ldr	r2, [pc, #280]	; (8003d94 <HAL_GPIO_Init+0x2fc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <HAL_GPIO_Init+0x1f6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a45      	ldr	r2, [pc, #276]	; (8003d98 <HAL_GPIO_Init+0x300>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_GPIO_Init+0x1f2>
 8003c86:	2304      	movs	r3, #4
 8003c88:	e008      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	e006      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e004      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e002      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	f002 0203 	and.w	r2, r2, #3
 8003ca2:	0092      	lsls	r2, r2, #2
 8003ca4:	4093      	lsls	r3, r2
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cac:	4935      	ldr	r1, [pc, #212]	; (8003d84 <HAL_GPIO_Init+0x2ec>)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cba:	4b38      	ldr	r3, [pc, #224]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d08:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d0e:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d32:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d5c:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3301      	adds	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	f67f aea2 	bls.w	8003ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40013800 	.word	0x40013800
 8003d88:	40020000 	.word	0x40020000
 8003d8c:	40020400 	.word	0x40020400
 8003d90:	40020800 	.word	0x40020800
 8003d94:	40020c00 	.word	0x40020c00
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e0bb      	b.n	8003f34 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	f040 80ab 	bne.w	8003f2e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003dd8:	4a5c      	ldr	r2, [pc, #368]	; (8003f4c <HAL_GPIO_DeInit+0x1ac>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a54      	ldr	r2, [pc, #336]	; (8003f50 <HAL_GPIO_DeInit+0x1b0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d019      	beq.n	8003e36 <HAL_GPIO_DeInit+0x96>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a53      	ldr	r2, [pc, #332]	; (8003f54 <HAL_GPIO_DeInit+0x1b4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_GPIO_DeInit+0x92>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_GPIO_DeInit+0x1b8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00d      	beq.n	8003e2e <HAL_GPIO_DeInit+0x8e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a51      	ldr	r2, [pc, #324]	; (8003f5c <HAL_GPIO_DeInit+0x1bc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <HAL_GPIO_DeInit+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a50      	ldr	r2, [pc, #320]	; (8003f60 <HAL_GPIO_DeInit+0x1c0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_GPIO_DeInit+0x86>
 8003e22:	2304      	movs	r3, #4
 8003e24:	e008      	b.n	8003e38 <HAL_GPIO_DeInit+0x98>
 8003e26:	2307      	movs	r3, #7
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_DeInit+0x98>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e004      	b.n	8003e38 <HAL_GPIO_DeInit+0x98>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_DeInit+0x98>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_GPIO_DeInit+0x98>
 8003e36:	2300      	movs	r3, #0
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	f002 0203 	and.w	r2, r2, #3
 8003e3e:	0092      	lsls	r2, r2, #2
 8003e40:	4093      	lsls	r3, r2
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d132      	bne.n	8003eae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e48:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	4944      	ldr	r1, [pc, #272]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e56:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	4941      	ldr	r1, [pc, #260]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e64:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	493d      	ldr	r1, [pc, #244]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	493a      	ldr	r1, [pc, #232]	; (8003f64 <HAL_GPIO_DeInit+0x1c4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	220f      	movs	r2, #15
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e90:	4a2e      	ldr	r2, [pc, #184]	; (8003f4c <HAL_GPIO_DeInit+0x1ac>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	482a      	ldr	r0, [pc, #168]	; (8003f4c <HAL_GPIO_DeInit+0x1ac>)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	220f      	movs	r2, #15
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	08d2      	lsrs	r2, r2, #3
 8003ee4:	4019      	ands	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	401a      	ands	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	2103      	movs	r1, #3
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	f67f af40 	bls.w	8003dbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40013c00 	.word	0x40013c00

08003f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
 8003f74:	4613      	mov	r3, r2
 8003f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f78:	787b      	ldrb	r3, [r7, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f84:	e003      	b.n	8003f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f86:	887b      	ldrh	r3, [r7, #2]
 8003f88:	041a      	lsls	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	619a      	str	r2, [r3, #24]
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fb2:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f806 	bl	8003fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40013c00 	.word	0x40013c00

08003fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e12b      	b.n	800424e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fe f9fc 	bl	8002408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004048:	f001 fea0 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a81      	ldr	r2, [pc, #516]	; (8004258 <HAL_I2C_Init+0x274>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d807      	bhi.n	8004068 <HAL_I2C_Init+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a80      	ldr	r2, [pc, #512]	; (800425c <HAL_I2C_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x92>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a7d      	ldr	r2, [pc, #500]	; (8004260 <HAL_I2C_Init+0x27c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0e7      	b.n	800424e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a78      	ldr	r2, [pc, #480]	; (8004264 <HAL_I2C_Init+0x280>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_I2C_Init+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <HAL_I2C_Init+0xd4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e009      	b.n	80040cc <HAL_I2C_Init+0xe8>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a69      	ldr	r2, [pc, #420]	; (8004268 <HAL_I2C_Init+0x284>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	3301      	adds	r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495c      	ldr	r1, [pc, #368]	; (8004258 <HAL_I2C_Init+0x274>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d819      	bhi.n	8004120 <HAL_I2C_Init+0x13c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e59      	subs	r1, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004100:	400b      	ands	r3, r1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_I2C_Init+0x138>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb1 f3f3 	udiv	r3, r1, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	e051      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800411c:	2304      	movs	r3, #4
 800411e:	e04f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_I2C_Init+0x168>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e012      	b.n	8004172 <HAL_I2C_Init+0x18e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Init+0x196>
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <HAL_I2C_Init+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e58      	subs	r0, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	fbb0 f3f3 	udiv	r3, r0, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	e00f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6911      	ldr	r1, [r2, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68d2      	ldr	r2, [r2, #12]
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000186a0 	.word	0x000186a0
 800425c:	001e847f 	.word	0x001e847f
 8004260:	003d08ff 	.word	0x003d08ff
 8004264:	431bde83 	.word	0x431bde83
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	460b      	mov	r3, r1
 800427a:	817b      	strh	r3, [r7, #10]
 800427c:	4613      	mov	r3, r2
 800427e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7fe fe6e 	bl	8002f60 <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 80e0 	bne.w	8004454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2319      	movs	r3, #25
 800429a:	2201      	movs	r2, #1
 800429c:	4970      	ldr	r1, [pc, #448]	; (8004460 <HAL_I2C_Master_Transmit+0x1f4>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 ff66 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0d3      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2C_Master_Transmit+0x50>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0cc      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d007      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	; 0x21
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2210      	movs	r2, #16
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	893a      	ldrh	r2, [r7, #8]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_I2C_Master_Transmit+0x1f8>)
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fce8 	bl	8004d00 <I2C_MasterRequestWrite>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e08d      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004350:	e066      	b.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 ffe0 	bl	800531c <I2C_WaitOnTXEFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d107      	bne.n	800437a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06b      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d11b      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 ffd0 	bl	800539e <I2C_WaitOnBTFFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e01a      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d194      	bne.n	8004352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	00100002 	.word	0x00100002
 8004464:	ffff0000 	.word	0xffff0000

08004468 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
 8004478:	4613      	mov	r3, r2
 800447a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7fe fd70 	bl	8002f60 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b20      	cmp	r3, #32
 800448c:	f040 820b 	bne.w	80048a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2319      	movs	r3, #25
 8004496:	2201      	movs	r2, #1
 8004498:	497c      	ldr	r1, [pc, #496]	; (800468c <HAL_I2C_Master_Receive+0x224>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 fe68 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
 80044a8:	e1fe      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2C_Master_Receive+0x50>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e1f7      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d007      	beq.n	80044de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2222      	movs	r2, #34	; 0x22
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2210      	movs	r2, #16
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	893a      	ldrh	r2, [r7, #8]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a5c      	ldr	r2, [pc, #368]	; (8004690 <HAL_I2C_Master_Receive+0x228>)
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004520:	8979      	ldrh	r1, [r7, #10]
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fc6c 	bl	8004e04 <I2C_MasterRequestRead>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1b8      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d113      	bne.n	8004566 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453e:	2300      	movs	r3, #0
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e18c      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d11b      	bne.n	80045a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e16c      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d11b      	bne.n	80045e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	e14c      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800460c:	e138      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	2b03      	cmp	r3, #3
 8004614:	f200 80f1 	bhi.w	80047fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b01      	cmp	r3, #1
 800461e:	d123      	bne.n	8004668 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fefb 	bl	8005420 <I2C_WaitOnRXNEFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e139      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004666:	e10b      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b02      	cmp	r3, #2
 800466e:	d14e      	bne.n	800470e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	2200      	movs	r2, #0
 8004678:	4906      	ldr	r1, [pc, #24]	; (8004694 <HAL_I2C_Master_Receive+0x22c>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fd78 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e10e      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
 800468a:	bf00      	nop
 800468c:	00100002 	.word	0x00100002
 8004690:	ffff0000 	.word	0xffff0000
 8004694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800470c:	e0b8      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	2200      	movs	r2, #0
 8004716:	4966      	ldr	r1, [pc, #408]	; (80048b0 <HAL_I2C_Master_Receive+0x448>)
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fd29 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0bf      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	2200      	movs	r2, #0
 8004772:	494f      	ldr	r1, [pc, #316]	; (80048b0 <HAL_I2C_Master_Receive+0x448>)
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fcfb 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e091      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047f8:	e042      	b.n	8004880 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fe0e 	bl	8005420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e04c      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d118      	bne.n	8004880 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	f47f aec2 	bne.w	800460e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e000      	b.n	80048a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048a6:	2302      	movs	r3, #2
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	00010004 	.word	0x00010004

080048b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	460b      	mov	r3, r1
 80048c8:	813b      	strh	r3, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ce:	f7fe fb47 	bl	8002f60 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b20      	cmp	r3, #32
 80048de:	f040 8208 	bne.w	8004cf2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2319      	movs	r3, #25
 80048e8:	2201      	movs	r2, #1
 80048ea:	497b      	ldr	r1, [pc, #492]	; (8004ad8 <HAL_I2C_Mem_Read+0x224>)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fc3f 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
 80048fa:	e1fb      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_I2C_Mem_Read+0x56>
 8004906:	2302      	movs	r3, #2
 8004908:	e1f4      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d007      	beq.n	8004930 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2222      	movs	r2, #34	; 0x22
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a5b      	ldr	r2, [pc, #364]	; (8004adc <HAL_I2C_Mem_Read+0x228>)
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004972:	88f8      	ldrh	r0, [r7, #6]
 8004974:	893a      	ldrh	r2, [r7, #8]
 8004976:	8979      	ldrh	r1, [r7, #10]
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fb0c 	bl	8004fa0 <I2C_RequestMemoryRead>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e1b0      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d113      	bne.n	80049c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e184      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d11b      	bne.n	8004a02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e164      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d11b      	bne.n	8004a42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	e144      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a58:	e138      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	f200 80f1 	bhi.w	8004c46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d123      	bne.n	8004ab4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fcd5 	bl	8005420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e139      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ab2:	e10b      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d14e      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4906      	ldr	r1, [pc, #24]	; (8004ae0 <HAL_I2C_Mem_Read+0x22c>)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fb52 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e10e      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
 8004ad6:	bf00      	nop
 8004ad8:	00100002 	.word	0x00100002
 8004adc:	ffff0000 	.word	0xffff0000
 8004ae0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b58:	e0b8      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	2200      	movs	r2, #0
 8004b62:	4966      	ldr	r1, [pc, #408]	; (8004cfc <HAL_I2C_Mem_Read+0x448>)
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fb03 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0bf      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	494f      	ldr	r1, [pc, #316]	; (8004cfc <HAL_I2C_Mem_Read+0x448>)
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fad5 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e091      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c44:	e042      	b.n	8004ccc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fbe8 	bl	8005420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e04c      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d118      	bne.n	8004ccc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f aec2 	bne.w	8004a5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e000      	b.n	8004cf4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
  }
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3728      	adds	r7, #40	; 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	00010004 	.word	0x00010004

08004d00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d006      	beq.n	8004d2a <I2C_MasterRequestWrite+0x2a>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d003      	beq.n	8004d2a <I2C_MasterRequestWrite+0x2a>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d28:	d108      	bne.n	8004d3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e00b      	b.n	8004d54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	2b12      	cmp	r3, #18
 8004d42:	d107      	bne.n	8004d54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fa05 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d103      	bne.n	8004d84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e035      	b.n	8004df4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d90:	d108      	bne.n	8004da4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d92:	897b      	ldrh	r3, [r7, #10]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da0:	611a      	str	r2, [r3, #16]
 8004da2:	e01b      	b.n	8004ddc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004da4:	897b      	ldrh	r3, [r7, #10]
 8004da6:	11db      	asrs	r3, r3, #7
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 0306 	and.w	r3, r3, #6
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f063 030f 	orn	r3, r3, #15
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	490e      	ldr	r1, [pc, #56]	; (8004dfc <I2C_MasterRequestWrite+0xfc>)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fa2b 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e010      	b.n	8004df4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4907      	ldr	r1, [pc, #28]	; (8004e00 <I2C_MasterRequestWrite+0x100>)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fa1b 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	00010008 	.word	0x00010008
 8004e00:	00010002 	.word	0x00010002

08004e04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	460b      	mov	r3, r1
 8004e12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d006      	beq.n	8004e3e <I2C_MasterRequestRead+0x3a>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d003      	beq.n	8004e3e <I2C_MasterRequestRead+0x3a>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e3c:	d108      	bne.n	8004e50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00b      	b.n	8004e68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b11      	cmp	r3, #17
 8004e56:	d107      	bne.n	8004e68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f97b 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d103      	bne.n	8004e98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e079      	b.n	8004f90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea4:	d108      	bne.n	8004eb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	611a      	str	r2, [r3, #16]
 8004eb6:	e05f      	b.n	8004f78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eb8:	897b      	ldrh	r3, [r7, #10]
 8004eba:	11db      	asrs	r3, r3, #7
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f063 030f 	orn	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4930      	ldr	r1, [pc, #192]	; (8004f98 <I2C_MasterRequestRead+0x194>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f9a1 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e054      	b.n	8004f90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4929      	ldr	r1, [pc, #164]	; (8004f9c <I2C_MasterRequestRead+0x198>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f991 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e044      	b.n	8004f90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f919 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d103      	bne.n	8004f5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e017      	b.n	8004f90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f60:	897b      	ldrh	r3, [r7, #10]
 8004f62:	11db      	asrs	r3, r3, #7
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0306 	and.w	r3, r3, #6
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f063 030e 	orn	r3, r3, #14
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	4907      	ldr	r1, [pc, #28]	; (8004f9c <I2C_MasterRequestRead+0x198>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f94d 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00010008 	.word	0x00010008
 8004f9c:	00010002 	.word	0x00010002

08004fa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	461a      	mov	r2, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	813b      	strh	r3, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8c2 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005000:	d103      	bne.n	800500a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0aa      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800501c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	4952      	ldr	r1, [pc, #328]	; (800516c <I2C_RequestMemoryRead+0x1cc>)
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f8fa 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e097      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f964 	bl	800531c <I2C_WaitOnTXEFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00d      	beq.n	8005076 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b04      	cmp	r3, #4
 8005060:	d107      	bne.n	8005072 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e076      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507c:	893b      	ldrh	r3, [r7, #8]
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e021      	b.n	80050cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005088:	893b      	ldrh	r3, [r7, #8]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	b29b      	uxth	r3, r3
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	6a39      	ldr	r1, [r7, #32]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f93e 	bl	800531c <I2C_WaitOnTXEFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d107      	bne.n	80050be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e050      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c2:	893b      	ldrh	r3, [r7, #8]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f923 	bl	800531c <I2C_WaitOnTXEFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e035      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005106:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	2200      	movs	r2, #0
 8005110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f82b 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512e:	d103      	bne.n	8005138 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e013      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800513c:	897b      	ldrh	r3, [r7, #10]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	4906      	ldr	r1, [pc, #24]	; (800516c <I2C_RequestMemoryRead+0x1cc>)
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f863 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	00010002 	.word	0x00010002

08005170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005180:	e025      	b.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d021      	beq.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fd fee9 	bl	8002f60 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e023      	b.n	8005216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10d      	bne.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	e00c      	b.n	800520e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	43da      	mvns	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d0b6      	beq.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800522c:	e051      	b.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d123      	bne.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0204 	orr.w	r2, r3, #4
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e046      	b.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d021      	beq.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fd fe67 	bl	8002f60 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d116      	bne.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e020      	b.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10c      	bne.n	80052f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	43da      	mvns	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	e00b      	b.n	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	43da      	mvns	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d18d      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005328:	e02d      	b.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f8ce 	bl	80054cc <I2C_IsAcknowledgeFailed>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e02d      	b.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d021      	beq.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005342:	f7fd fe0d 	bl	8002f60 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e007      	b.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d1ca      	bne.n	800532a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053aa:	e02d      	b.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f88d 	bl	80054cc <I2C_IsAcknowledgeFailed>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e02d      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d021      	beq.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c4:	f7fd fdcc 	bl	8002f60 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d302      	bcc.n	80053da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d116      	bne.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e007      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d1ca      	bne.n	80053ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800542c:	e042      	b.n	80054b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b10      	cmp	r3, #16
 800543a:	d119      	bne.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0210 	mvn.w	r2, #16
 8005444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e029      	b.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fd fd76 	bl	8002f60 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d1b5      	bne.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d11b      	bne.n	800551c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e267      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d075      	beq.n	8005636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554a:	4b88      	ldr	r3, [pc, #544]	; (800576c <HAL_RCC_OscConfig+0x240>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b04      	cmp	r3, #4
 8005554:	d00c      	beq.n	8005570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005556:	4b85      	ldr	r3, [pc, #532]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555e:	2b08      	cmp	r3, #8
 8005560:	d112      	bne.n	8005588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005562:	4b82      	ldr	r3, [pc, #520]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556e:	d10b      	bne.n	8005588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	4b7e      	ldr	r3, [pc, #504]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d05b      	beq.n	8005634 <HAL_RCC_OscConfig+0x108>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d157      	bne.n	8005634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e242      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005590:	d106      	bne.n	80055a0 <HAL_RCC_OscConfig+0x74>
 8005592:	4b76      	ldr	r3, [pc, #472]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a75      	ldr	r2, [pc, #468]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e01d      	b.n	80055dc <HAL_RCC_OscConfig+0xb0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x98>
 80055aa:	4b70      	ldr	r3, [pc, #448]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6f      	ldr	r2, [pc, #444]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	4b6d      	ldr	r3, [pc, #436]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6c      	ldr	r2, [pc, #432]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e00b      	b.n	80055dc <HAL_RCC_OscConfig+0xb0>
 80055c4:	4b69      	ldr	r3, [pc, #420]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a68      	ldr	r2, [pc, #416]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4b66      	ldr	r3, [pc, #408]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a65      	ldr	r2, [pc, #404]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80055d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d013      	beq.n	800560c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fd fcbc 	bl	8002f60 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fd fcb8 	bl	8002f60 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e207      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	4b5b      	ldr	r3, [pc, #364]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0xc0>
 800560a:	e014      	b.n	8005636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fd fca8 	bl	8002f60 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005614:	f7fd fca4 	bl	8002f60 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e1f3      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005626:	4b51      	ldr	r3, [pc, #324]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0xe8>
 8005632:	e000      	b.n	8005636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d063      	beq.n	800570a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005642:	4b4a      	ldr	r3, [pc, #296]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800564e:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005656:	2b08      	cmp	r3, #8
 8005658:	d11c      	bne.n	8005694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565a:	4b44      	ldr	r3, [pc, #272]	; (800576c <HAL_RCC_OscConfig+0x240>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <HAL_RCC_OscConfig+0x152>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e1c7      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567e:	4b3b      	ldr	r3, [pc, #236]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4937      	ldr	r1, [pc, #220]	; (800576c <HAL_RCC_OscConfig+0x240>)
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005692:	e03a      	b.n	800570a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d020      	beq.n	80056de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800569c:	4b34      	ldr	r3, [pc, #208]	; (8005770 <HAL_RCC_OscConfig+0x244>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fd fc5d 	bl	8002f60 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056aa:	f7fd fc59 	bl	8002f60 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e1a8      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056bc:	4b2b      	ldr	r3, [pc, #172]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4925      	ldr	r1, [pc, #148]	; (800576c <HAL_RCC_OscConfig+0x240>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]
 80056dc:	e015      	b.n	800570a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_RCC_OscConfig+0x244>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fd fc3c 	bl	8002f60 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ec:	f7fd fc38 	bl	8002f60 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e187      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fe:	4b1b      	ldr	r3, [pc, #108]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d036      	beq.n	8005784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_RCC_OscConfig+0x248>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fd fc1c 	bl	8002f60 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800572c:	f7fd fc18 	bl	8002f60 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e167      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_OscConfig+0x240>)
 8005740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x200>
 800574a:	e01b      	b.n	8005784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_OscConfig+0x248>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005752:	f7fd fc05 	bl	8002f60 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005758:	e00e      	b.n	8005778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800575a:	f7fd fc01 	bl	8002f60 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d907      	bls.n	8005778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e150      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
 800576c:	40023800 	.word	0x40023800
 8005770:	42470000 	.word	0x42470000
 8005774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005778:	4b88      	ldr	r3, [pc, #544]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800577a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ea      	bne.n	800575a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8097 	beq.w	80058c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005796:	4b81      	ldr	r3, [pc, #516]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	4b7d      	ldr	r3, [pc, #500]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	4a7c      	ldr	r2, [pc, #496]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6413      	str	r3, [r2, #64]	; 0x40
 80057b2:	4b7a      	ldr	r3, [pc, #488]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	4b77      	ldr	r3, [pc, #476]	; (80059a0 <HAL_RCC_OscConfig+0x474>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d118      	bne.n	8005800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ce:	4b74      	ldr	r3, [pc, #464]	; (80059a0 <HAL_RCC_OscConfig+0x474>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a73      	ldr	r2, [pc, #460]	; (80059a0 <HAL_RCC_OscConfig+0x474>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057da:	f7fd fbc1 	bl	8002f60 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e2:	f7fd fbbd 	bl	8002f60 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e10c      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	4b6a      	ldr	r3, [pc, #424]	; (80059a0 <HAL_RCC_OscConfig+0x474>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d106      	bne.n	8005816 <HAL_RCC_OscConfig+0x2ea>
 8005808:	4b64      	ldr	r3, [pc, #400]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800580a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580c:	4a63      	ldr	r2, [pc, #396]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	6713      	str	r3, [r2, #112]	; 0x70
 8005814:	e01c      	b.n	8005850 <HAL_RCC_OscConfig+0x324>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b05      	cmp	r3, #5
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x30c>
 800581e:	4b5f      	ldr	r3, [pc, #380]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a5e      	ldr	r2, [pc, #376]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005824:	f043 0304 	orr.w	r3, r3, #4
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
 800582a:	4b5c      	ldr	r3, [pc, #368]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	4a5b      	ldr	r2, [pc, #364]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	6713      	str	r3, [r2, #112]	; 0x70
 8005836:	e00b      	b.n	8005850 <HAL_RCC_OscConfig+0x324>
 8005838:	4b58      	ldr	r3, [pc, #352]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	4a57      	ldr	r2, [pc, #348]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	6713      	str	r3, [r2, #112]	; 0x70
 8005844:	4b55      	ldr	r3, [pc, #340]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	4a54      	ldr	r2, [pc, #336]	; (800599c <HAL_RCC_OscConfig+0x470>)
 800584a:	f023 0304 	bic.w	r3, r3, #4
 800584e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d015      	beq.n	8005884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fd fb82 	bl	8002f60 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585e:	e00a      	b.n	8005876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005860:	f7fd fb7e 	bl	8002f60 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e0cb      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005876:	4b49      	ldr	r3, [pc, #292]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0ee      	beq.n	8005860 <HAL_RCC_OscConfig+0x334>
 8005882:	e014      	b.n	80058ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005884:	f7fd fb6c 	bl	8002f60 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588c:	f7fd fb68 	bl	8002f60 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e0b5      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a2:	4b3e      	ldr	r3, [pc, #248]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1ee      	bne.n	800588c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d105      	bne.n	80058c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	4a38      	ldr	r2, [pc, #224]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80058ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80a1 	beq.w	8005a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ca:	4b34      	ldr	r3, [pc, #208]	; (800599c <HAL_RCC_OscConfig+0x470>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d05c      	beq.n	8005990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d141      	bne.n	8005962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058de:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <HAL_RCC_OscConfig+0x478>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd fb3c 	bl	8002f60 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fd fb38 	bl	8002f60 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e087      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fe:	4b27      	ldr	r3, [pc, #156]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	3b01      	subs	r3, #1
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	491b      	ldr	r1, [pc, #108]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005930:	4313      	orrs	r3, r2
 8005932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <HAL_RCC_OscConfig+0x478>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593a:	f7fd fb11 	bl	8002f60 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005942:	f7fd fb0d 	bl	8002f60 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e05c      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x416>
 8005960:	e054      	b.n	8005a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005962:	4b10      	ldr	r3, [pc, #64]	; (80059a4 <HAL_RCC_OscConfig+0x478>)
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7fd fafa 	bl	8002f60 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005970:	f7fd faf6 	bl	8002f60 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e045      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_OscConfig+0x470>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x444>
 800598e:	e03d      	b.n	8005a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d107      	bne.n	80059a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e038      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
 800599c:	40023800 	.word	0x40023800
 80059a0:	40007000 	.word	0x40007000
 80059a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059a8:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_RCC_OscConfig+0x4ec>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d028      	beq.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d121      	bne.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d11a      	bne.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d111      	bne.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	3b01      	subs	r3, #1
 80059f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d107      	bne.n	8005a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023800 	.word	0x40023800

08005a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0cc      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b68      	ldr	r3, [pc, #416]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d90c      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b65      	ldr	r3, [pc, #404]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0b8      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a88:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a52      	ldr	r2, [pc, #328]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	494d      	ldr	r1, [pc, #308]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d044      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d119      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d107      	bne.n	8005aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e06f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aea:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e067      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afa:	4b37      	ldr	r3, [pc, #220]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4934      	ldr	r1, [pc, #208]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b0c:	f7fd fa28 	bl	8002f60 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b14:	f7fd fa24 	bl	8002f60 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e04f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 020c 	and.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1eb      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d20c      	bcs.n	8005b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e032      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4916      	ldr	r1, [pc, #88]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ba2:	f000 f821 	bl	8005be8 <HAL_RCC_GetSysClockFreq>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	490a      	ldr	r1, [pc, #40]	; (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005bb4:	5ccb      	ldrb	r3, [r1, r3]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fd f988 	bl	8002ed8 <HAL_InitTick>

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023c00 	.word	0x40023c00
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	0800b28c 	.word	0x0800b28c
 8005be0:	2000000c 	.word	0x2000000c
 8005be4:	20000010 	.word	0x20000010

08005be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bec:	b090      	sub	sp, #64	; 0x40
 8005bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c00:	4b59      	ldr	r3, [pc, #356]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 030c 	and.w	r3, r3, #12
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d00d      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x40>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	f200 80a1 	bhi.w	8005d54 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x34>
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d003      	beq.n	8005c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1a:	e09b      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c1c:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c20:	e09b      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c22:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c26:	e098      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c28:	4b4f      	ldr	r3, [pc, #316]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c32:	4b4d      	ldr	r3, [pc, #308]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d028      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3e:	4b4a      	ldr	r3, [pc, #296]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	2200      	movs	r2, #0
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	627a      	str	r2, [r7, #36]	; 0x24
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c50:	2100      	movs	r1, #0
 8005c52:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c54:	fb03 f201 	mul.w	r2, r3, r1
 8005c58:	2300      	movs	r3, #0
 8005c5a:	fb00 f303 	mul.w	r3, r0, r3
 8005c5e:	4413      	add	r3, r2
 8005c60:	4a43      	ldr	r2, [pc, #268]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c62:	fba0 1202 	umull	r1, r2, r0, r2
 8005c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c68:	460a      	mov	r2, r1
 8005c6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6e:	4413      	add	r3, r2
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2200      	movs	r2, #0
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	61fa      	str	r2, [r7, #28]
 8005c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c82:	f7fb f809 	bl	8000c98 <__aeabi_uldivmod>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8e:	e053      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c90:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	099b      	lsrs	r3, r3, #6
 8005c96:	2200      	movs	r2, #0
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	617a      	str	r2, [r7, #20]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ca2:	f04f 0b00 	mov.w	fp, #0
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	465b      	mov	r3, fp
 8005caa:	f04f 0000 	mov.w	r0, #0
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	0159      	lsls	r1, r3, #5
 8005cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb8:	0150      	lsls	r0, r2, #5
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	ebb2 080a 	subs.w	r8, r2, sl
 8005cc2:	eb63 090b 	sbc.w	r9, r3, fp
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cda:	ebb2 0408 	subs.w	r4, r2, r8
 8005cde:	eb63 0509 	sbc.w	r5, r3, r9
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	00eb      	lsls	r3, r5, #3
 8005cec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf0:	00e2      	lsls	r2, r4, #3
 8005cf2:	4614      	mov	r4, r2
 8005cf4:	461d      	mov	r5, r3
 8005cf6:	eb14 030a 	adds.w	r3, r4, sl
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	eb45 030b 	adc.w	r3, r5, fp
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d0e:	4629      	mov	r1, r5
 8005d10:	028b      	lsls	r3, r1, #10
 8005d12:	4621      	mov	r1, r4
 8005d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d18:	4621      	mov	r1, r4
 8005d1a:	028a      	lsls	r2, r1, #10
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	2200      	movs	r2, #0
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	60fa      	str	r2, [r7, #12]
 8005d28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d2c:	f7fa ffb4 	bl	8000c98 <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4613      	mov	r3, r2
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	3301      	adds	r3, #1
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d52:	e002      	b.n	8005d5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x184>)
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3740      	adds	r7, #64	; 0x40
 8005d60:	46bd      	mov	sp, r7
 8005d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	017d7840 	.word	0x017d7840

08005d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d78:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	2000000c 	.word	0x2000000c

08005d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d90:	f7ff fff0 	bl	8005d74 <HAL_RCC_GetHCLKFreq>
 8005d94:	4602      	mov	r2, r0
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	0a9b      	lsrs	r3, r3, #10
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	4903      	ldr	r1, [pc, #12]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da2:	5ccb      	ldrb	r3, [r1, r3]
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40023800 	.word	0x40023800
 8005db0:	0800b29c 	.word	0x0800b29c

08005db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005db8:	f7ff ffdc 	bl	8005d74 <HAL_RCC_GetHCLKFreq>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	0b5b      	lsrs	r3, r3, #13
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	4903      	ldr	r1, [pc, #12]	; (8005dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dca:	5ccb      	ldrb	r3, [r1, r3]
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	0800b29c 	.word	0x0800b29c

08005ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e041      	b.n	8005e72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc fb96 	bl	8002534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f000 fdb8 	bl	8006990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x24>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e022      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d109      	bne.n	8005eba <HAL_TIM_PWM_Start+0x3e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e015      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d109      	bne.n	8005ed4 <HAL_TIM_PWM_Start+0x58>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e008      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e068      	b.n	8005fc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Start+0x82>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efc:	e013      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start+0x92>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0c:	e00b      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1c:	e003      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 f858 	bl	8006fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <HAL_TIM_PWM_Start+0x14c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d107      	bne.n	8005f4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <HAL_TIM_PWM_Start+0x14c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d018      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x10e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d013      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x10e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a19      	ldr	r2, [pc, #100]	; (8005fcc <HAL_TIM_PWM_Start+0x150>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00e      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x10e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <HAL_TIM_PWM_Start+0x154>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x10e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a16      	ldr	r2, [pc, #88]	; (8005fd4 <HAL_TIM_PWM_Start+0x158>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d004      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x10e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <HAL_TIM_PWM_Start+0x15c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d111      	bne.n	8005fae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b06      	cmp	r3, #6
 8005f9a:	d010      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fac:	e007      	b.n	8005fbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40000400 	.word	0x40000400
 8005fd0:	40000800 	.word	0x40000800
 8005fd4:	40000c00 	.word	0x40000c00
 8005fd8:	40014000 	.word	0x40014000

08005fdc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fff8 	bl	8006fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a29      	ldr	r2, [pc, #164]	; (80060a0 <HAL_TIM_PWM_Stop+0xc4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d117      	bne.n	800602e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	f241 1311 	movw	r3, #4369	; 0x1111
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <HAL_TIM_PWM_Stop+0x52>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a1a      	ldr	r2, [r3, #32]
 8006014:	f240 4344 	movw	r3, #1092	; 0x444
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d107      	bne.n	800602e <HAL_TIM_PWM_Stop+0x52>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a1a      	ldr	r2, [r3, #32]
 8006034:	f241 1311 	movw	r3, #4369	; 0x1111
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <HAL_TIM_PWM_Stop+0x82>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	f240 4344 	movw	r3, #1092	; 0x444
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d107      	bne.n	800605e <HAL_TIM_PWM_Stop+0x82>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_TIM_PWM_Stop+0x92>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606c:	e013      	b.n	8006096 <HAL_TIM_PWM_Stop+0xba>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Stop+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	e00b      	b.n	8006096 <HAL_TIM_PWM_Stop+0xba>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d104      	bne.n	800608e <HAL_TIM_PWM_Stop+0xb2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608c:	e003      	b.n	8006096 <HAL_TIM_PWM_Stop+0xba>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40010000 	.word	0x40010000

080060a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e041      	b.n	800613a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc fa54 	bl	8002578 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 fc54 	bl	8006990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e097      	b.n	8006286 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fc f99c 	bl	80024a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f000 fbfa 	bl	8006990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	4313      	orrs	r3, r2
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061e2:	f023 030c 	bic.w	r3, r3, #12
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	4313      	orrs	r3, r2
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	011a      	lsls	r2, r3, #4
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	031b      	lsls	r3, r3, #12
 8006212:	4313      	orrs	r3, r2
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006220:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006228:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	4313      	orrs	r3, r2
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062ae:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062b6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d110      	bne.n	80062e0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d102      	bne.n	80062ca <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062c4:	7b7b      	ldrb	r3, [r7, #13]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d001      	beq.n	80062ce <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e089      	b.n	80063e2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062de:	e031      	b.n	8006344 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d110      	bne.n	8006308 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d102      	bne.n	80062f2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ec:	7b3b      	ldrb	r3, [r7, #12]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d001      	beq.n	80062f6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e075      	b.n	80063e2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006306:	e01d      	b.n	8006344 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d108      	bne.n	8006320 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d105      	bne.n	8006320 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006314:	7b7b      	ldrb	r3, [r7, #13]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d102      	bne.n	8006320 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800631a:	7b3b      	ldrb	r3, [r7, #12]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d001      	beq.n	8006324 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e05e      	b.n	80063e2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_Encoder_Start_IT+0xc4>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b04      	cmp	r3, #4
 800634e:	d010      	beq.n	8006372 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006350:	e01f      	b.n	8006392 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fe42 	bl	8006fe4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0202 	orr.w	r2, r2, #2
 800636e:	60da      	str	r2, [r3, #12]
      break;
 8006370:	e02e      	b.n	80063d0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2201      	movs	r2, #1
 8006378:	2104      	movs	r1, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fe32 	bl	8006fe4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0204 	orr.w	r2, r2, #4
 800638e:	60da      	str	r2, [r3, #12]
      break;
 8006390:	e01e      	b.n	80063d0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2201      	movs	r2, #1
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fe22 	bl	8006fe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2201      	movs	r2, #1
 80063a6:	2104      	movs	r1, #4
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fe1b 	bl	8006fe4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0202 	orr.w	r2, r2, #2
 80063bc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0204 	orr.w	r2, r2, #4
 80063cc:	60da      	str	r2, [r3, #12]
      break;
 80063ce:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d122      	bne.n	8006446 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d11b      	bne.n	8006446 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f06f 0202 	mvn.w	r2, #2
 8006416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7fb faa3 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 8006432:	e005      	b.n	8006440 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fa8d 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa94 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d122      	bne.n	800649a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b04      	cmp	r3, #4
 8006460:	d11b      	bne.n	800649a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f06f 0204 	mvn.w	r2, #4
 800646a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fb fa79 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 8006486:	e005      	b.n	8006494 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fa63 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa6a 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d122      	bne.n	80064ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d11b      	bne.n	80064ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f06f 0208 	mvn.w	r2, #8
 80064be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2204      	movs	r2, #4
 80064c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fb fa4f 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 80064da:	e005      	b.n	80064e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa39 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa40 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d122      	bne.n	8006542 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b10      	cmp	r3, #16
 8006508:	d11b      	bne.n	8006542 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f06f 0210 	mvn.w	r2, #16
 8006512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2208      	movs	r2, #8
 8006518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb fa25 	bl	8001978 <HAL_TIM_IC_CaptureCallback>
 800652e:	e005      	b.n	800653c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa0f 	bl	8006954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa16 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d10e      	bne.n	800656e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b01      	cmp	r3, #1
 800655c:	d107      	bne.n	800656e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0201 	mvn.w	r2, #1
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f9e9 	bl	8006940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d10e      	bne.n	800659a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b80      	cmp	r3, #128	; 0x80
 8006588:	d107      	bne.n	800659a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fdc3 	bl	8007120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d10e      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d107      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f9db 	bl	800697c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d10e      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d107      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f06f 0220 	mvn.w	r2, #32
 80065ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fd8d 	bl	800710c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006614:	2302      	movs	r3, #2
 8006616:	e088      	b.n	800672a <HAL_TIM_IC_ConfigChannel+0x130>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d11b      	bne.n	800665e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f000 fbb7 	bl	8006da8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699a      	ldr	r2, [r3, #24]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 020c 	bic.w	r2, r2, #12
 8006648:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6999      	ldr	r1, [r3, #24]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	619a      	str	r2, [r3, #24]
 800665c:	e060      	b.n	8006720 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b04      	cmp	r3, #4
 8006662:	d11c      	bne.n	800669e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6819      	ldr	r1, [r3, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f000 fc00 	bl	8006e78 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006686:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6999      	ldr	r1, [r3, #24]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	021a      	lsls	r2, r3, #8
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	619a      	str	r2, [r3, #24]
 800669c:	e040      	b.n	8006720 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f000 fc1d 	bl	8006ef2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 020c 	bic.w	r2, r2, #12
 80066c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69d9      	ldr	r1, [r3, #28]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	61da      	str	r2, [r3, #28]
 80066da:	e021      	b.n	8006720 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b0c      	cmp	r3, #12
 80066e0:	d11c      	bne.n	800671c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6819      	ldr	r1, [r3, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f000 fc3a 	bl	8006f6a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006704:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	021a      	lsls	r2, r3, #8
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	61da      	str	r2, [r3, #28]
 800671a:	e001      	b.n	8006720 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800674e:	2302      	movs	r3, #2
 8006750:	e0ae      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b0c      	cmp	r3, #12
 800675e:	f200 809f 	bhi.w	80068a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	0800679d 	.word	0x0800679d
 800676c:	080068a1 	.word	0x080068a1
 8006770:	080068a1 	.word	0x080068a1
 8006774:	080068a1 	.word	0x080068a1
 8006778:	080067dd 	.word	0x080067dd
 800677c:	080068a1 	.word	0x080068a1
 8006780:	080068a1 	.word	0x080068a1
 8006784:	080068a1 	.word	0x080068a1
 8006788:	0800681f 	.word	0x0800681f
 800678c:	080068a1 	.word	0x080068a1
 8006790:	080068a1 	.word	0x080068a1
 8006794:	080068a1 	.word	0x080068a1
 8006798:	0800685f 	.word	0x0800685f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f974 	bl	8006a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0208 	orr.w	r2, r2, #8
 80067b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0204 	bic.w	r2, r2, #4
 80067c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691a      	ldr	r2, [r3, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	619a      	str	r2, [r3, #24]
      break;
 80067da:	e064      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f9ba 	bl	8006b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6999      	ldr	r1, [r3, #24]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	021a      	lsls	r2, r3, #8
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	619a      	str	r2, [r3, #24]
      break;
 800681c:	e043      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fa05 	bl	8006c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0208 	orr.w	r2, r2, #8
 8006838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0204 	bic.w	r2, r2, #4
 8006848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69d9      	ldr	r1, [r3, #28]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	61da      	str	r2, [r3, #28]
      break;
 800685c:	e023      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fa4f 	bl	8006d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69d9      	ldr	r1, [r3, #28]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	021a      	lsls	r2, r3, #8
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	61da      	str	r2, [r3, #28]
      break;
 800689e:	e002      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b0c      	cmp	r3, #12
 80068ca:	d831      	bhi.n	8006930 <HAL_TIM_ReadCapturedValue+0x78>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006913 	.word	0x08006913
 80068e8:	08006931 	.word	0x08006931
 80068ec:	08006931 	.word	0x08006931
 80068f0:	08006931 	.word	0x08006931
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	08006931 	.word	0x08006931
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006931 	.word	0x08006931
 8006904:	08006927 	.word	0x08006927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	60fb      	str	r3, [r7, #12]

      break;
 8006910:	e00f      	b.n	8006932 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	60fb      	str	r3, [r7, #12]

      break;
 800691a:	e00a      	b.n	8006932 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	60fb      	str	r3, [r7, #12]

      break;
 8006924:	e005      	b.n	8006932 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	60fb      	str	r3, [r7, #12]

      break;
 800692e:	e000      	b.n	8006932 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006930:	bf00      	nop
  }

  return tmpreg;
 8006932:	68fb      	ldr	r3, [r7, #12]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a34      	ldr	r2, [pc, #208]	; (8006a74 <TIM_Base_SetConfig+0xe4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d00b      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a31      	ldr	r2, [pc, #196]	; (8006a78 <TIM_Base_SetConfig+0xe8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a30      	ldr	r2, [pc, #192]	; (8006a7c <TIM_Base_SetConfig+0xec>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <TIM_Base_SetConfig+0xf0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d108      	bne.n	80069da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a25      	ldr	r2, [pc, #148]	; (8006a74 <TIM_Base_SetConfig+0xe4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01b      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d017      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <TIM_Base_SetConfig+0xe8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <TIM_Base_SetConfig+0xec>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <TIM_Base_SetConfig+0xf0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <TIM_Base_SetConfig+0xf4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <TIM_Base_SetConfig+0xf8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <TIM_Base_SetConfig+0xfc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a08      	ldr	r2, [pc, #32]	; (8006a74 <TIM_Base_SetConfig+0xe4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d103      	bne.n	8006a60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	615a      	str	r2, [r3, #20]
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	40014800 	.word	0x40014800

08006a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 0302 	bic.w	r3, r3, #2
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <TIM_OC1_SetConfig+0xc8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d10c      	bne.n	8006b06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0308 	bic.w	r3, r3, #8
 8006af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a13      	ldr	r2, [pc, #76]	; (8006b58 <TIM_OC1_SetConfig+0xc8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d111      	bne.n	8006b32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	621a      	str	r2, [r3, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40010000 	.word	0x40010000

08006b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0210 	bic.w	r2, r3, #16
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0320 	bic.w	r3, r3, #32
 8006ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <TIM_OC2_SetConfig+0xd4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d10d      	bne.n	8006bd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <TIM_OC2_SetConfig+0xd4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d113      	bne.n	8006c08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	621a      	str	r2, [r3, #32]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40010000 	.word	0x40010000

08006c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <TIM_OC3_SetConfig+0xd0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10d      	bne.n	8006cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <TIM_OC3_SetConfig+0xd0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d113      	bne.n	8006cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40010000 	.word	0x40010000

08006d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <TIM_OC4_SetConfig+0x9c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d109      	bne.n	8006d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	019b      	lsls	r3, r3, #6
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40010000 	.word	0x40010000

08006da8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0201 	bic.w	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a24      	ldr	r2, [pc, #144]	; (8006e64 <TIM_TI1_SetConfig+0xbc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <TIM_TI1_SetConfig+0x56>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ddc:	d00f      	beq.n	8006dfe <TIM_TI1_SetConfig+0x56>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a21      	ldr	r2, [pc, #132]	; (8006e68 <TIM_TI1_SetConfig+0xc0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00b      	beq.n	8006dfe <TIM_TI1_SetConfig+0x56>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4a20      	ldr	r2, [pc, #128]	; (8006e6c <TIM_TI1_SetConfig+0xc4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <TIM_TI1_SetConfig+0x56>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4a1f      	ldr	r2, [pc, #124]	; (8006e70 <TIM_TI1_SetConfig+0xc8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_TI1_SetConfig+0x56>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <TIM_TI1_SetConfig+0xcc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <TIM_TI1_SetConfig+0x5a>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <TIM_TI1_SetConfig+0x5c>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e003      	b.n	8006e22 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f023 030a 	bic.w	r3, r3, #10
 8006e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f003 030a 	and.w	r3, r3, #10
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40014000 	.word	0x40014000

08006e78 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f023 0210 	bic.w	r2, r3, #16
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	021b      	lsls	r3, r3, #8
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	031b      	lsls	r3, r3, #12
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b087      	sub	sp, #28
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
 8006f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	031b      	lsls	r3, r3, #12
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
}
 8007022:	bf00      	nop
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007044:	2302      	movs	r3, #2
 8007046:	e050      	b.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d018      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007094:	d013      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a18      	ldr	r2, [pc, #96]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00e      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a16      	ldr	r2, [pc, #88]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d009      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a15      	ldr	r2, [pc, #84]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d004      	beq.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d10c      	bne.n	80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800
 8007104:	40000c00 	.word	0x40000c00
 8007108:	40014000 	.word	0x40014000

0800710c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e03f      	b.n	80071c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fb fab4 	bl	80026c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2224      	movs	r2, #36	; 0x24
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fe1d 	bl	8007db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800718c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695a      	ldr	r2, [r3, #20]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800719c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b08a      	sub	sp, #40	; 0x28
 80071d2:	af02      	add	r7, sp, #8
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d17c      	bne.n	80072e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <HAL_UART_Transmit+0x2c>
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e075      	b.n	80072ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_UART_Transmit+0x3e>
 8007208:	2302      	movs	r3, #2
 800720a:	e06e      	b.n	80072ea <HAL_UART_Transmit+0x11c>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2221      	movs	r2, #33	; 0x21
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007222:	f7fb fe9d 	bl	8002f60 <HAL_GetTick>
 8007226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	88fa      	ldrh	r2, [r7, #6]
 800722c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	88fa      	ldrh	r2, [r7, #6]
 8007232:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723c:	d108      	bne.n	8007250 <HAL_UART_Transmit+0x82>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d104      	bne.n	8007250 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	61bb      	str	r3, [r7, #24]
 800724e:	e003      	b.n	8007258 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007260:	e02a      	b.n	80072b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2200      	movs	r2, #0
 800726a:	2180      	movs	r1, #128	; 0x80
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fb9b 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e036      	b.n	80072ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	3302      	adds	r3, #2
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	e007      	b.n	80072aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	781a      	ldrb	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1cf      	bne.n	8007262 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	2140      	movs	r1, #64	; 0x40
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fb6b 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e006      	b.n	80072ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e000      	b.n	80072ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072e8:	2302      	movs	r3, #2
  }
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b08a      	sub	sp, #40	; 0x28
 80072f6:	af02      	add	r7, sp, #8
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b20      	cmp	r3, #32
 8007310:	f040 808c 	bne.w	800742c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <HAL_UART_Receive+0x2e>
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e084      	b.n	800742e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_UART_Receive+0x40>
 800732e:	2302      	movs	r3, #2
 8007330:	e07d      	b.n	800742e <HAL_UART_Receive+0x13c>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2222      	movs	r2, #34	; 0x22
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800734e:	f7fb fe07 	bl	8002f60 <HAL_GetTick>
 8007352:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	88fa      	ldrh	r2, [r7, #6]
 8007358:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007368:	d108      	bne.n	800737c <HAL_UART_Receive+0x8a>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e003      	b.n	8007384 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800738c:	e043      	b.n	8007416 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	2120      	movs	r1, #32
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fb05 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e042      	b.n	800742e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10c      	bne.n	80073c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	3302      	adds	r3, #2
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	e01f      	b.n	8007408 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d0:	d007      	beq.n	80073e2 <HAL_UART_Receive+0xf0>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <HAL_UART_Receive+0xfe>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	e008      	b.n	8007402 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1b6      	bne.n	800738e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e000      	b.n	800742e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800742c:	2302      	movs	r3, #2
  }
}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b0ba      	sub	sp, #232	; 0xe8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800745e:	2300      	movs	r3, #0
 8007460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007464:	2300      	movs	r3, #0
 8007466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10f      	bne.n	800749e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_UART_IRQHandler+0x66>
 800748a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fbd3 	bl	8007c42 <UART_Receive_IT>
      return;
 800749c:	e256      	b.n	800794c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800749e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80de 	beq.w	8007664 <HAL_UART_IRQHandler+0x22c>
 80074a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80d1 	beq.w	8007664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <HAL_UART_IRQHandler+0xae>
 80074ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <HAL_UART_IRQHandler+0xd2>
 80074f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0202 	orr.w	r2, r3, #2
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <HAL_UART_IRQHandler+0xf6>
 8007516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f043 0204 	orr.w	r2, r3, #4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d011      	beq.n	800755e <HAL_UART_IRQHandler+0x126>
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d105      	bne.n	8007552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f043 0208 	orr.w	r2, r3, #8
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 81ed 	beq.w	8007942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_UART_IRQHandler+0x14e>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb5e 	bl	8007c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <HAL_UART_IRQHandler+0x17a>
 80075aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d04f      	beq.n	8007652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa66 	bl	8007a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d141      	bne.n	800764a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3314      	adds	r3, #20
 80075ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800760a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1d9      	bne.n	80075c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d013      	beq.n	8007642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	4a7d      	ldr	r2, [pc, #500]	; (8007814 <HAL_UART_IRQHandler+0x3dc>)
 8007620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	4618      	mov	r0, r3
 8007628:	f7fc f962 	bl	80038f0 <HAL_DMA_Abort_IT>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007640:	e00e      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f99a 	bl	800797c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e00a      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f996 	bl	800797c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	e006      	b.n	8007660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f992 	bl	800797c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800765e:	e170      	b.n	8007942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	bf00      	nop
    return;
 8007662:	e16e      	b.n	8007942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 814a 	bne.w	8007902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8143 	beq.w	8007902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800767c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 813c 	beq.w	8007902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b40      	cmp	r3, #64	; 0x40
 80076ac:	f040 80b4 	bne.w	8007818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8140 	beq.w	8007946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ce:	429a      	cmp	r2, r3
 80076d0:	f080 8139 	bcs.w	8007946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e6:	f000 8088 	beq.w	80077fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800771a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800772e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1d9      	bne.n	80076ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3314      	adds	r3, #20
 8007756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800775a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800775e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800776c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e1      	bne.n	8007736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3314      	adds	r3, #20
 8007778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3314      	adds	r3, #20
 8007792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800779c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e3      	bne.n	8007772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ca:	f023 0310 	bic.w	r3, r3, #16
 80077ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	330c      	adds	r3, #12
 80077d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80077de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e3      	bne.n	80077b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fc f80b 	bl	8003810 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007802:	b29b      	uxth	r3, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	b29b      	uxth	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8c0 	bl	8007990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007810:	e099      	b.n	8007946 <HAL_UART_IRQHandler+0x50e>
 8007812:	bf00      	nop
 8007814:	08007b4b 	.word	0x08007b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007820:	b29b      	uxth	r3, r3
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 808b 	beq.w	800794a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8086 	beq.w	800794a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007862:	647a      	str	r2, [r7, #68]	; 0x44
 8007864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	623b      	str	r3, [r7, #32]
   return(result);
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3314      	adds	r3, #20
 8007896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800789a:	633a      	str	r2, [r7, #48]	; 0x30
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e3      	bne.n	8007876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0310 	bic.w	r3, r3, #16
 80078d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078e0:	61fa      	str	r2, [r7, #28]
 80078e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	617b      	str	r3, [r7, #20]
   return(result);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e3      	bne.n	80078bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f848 	bl	8007990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007900:	e023      	b.n	800794a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <HAL_UART_IRQHandler+0x4ea>
 800790e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f929 	bl	8007b72 <UART_Transmit_IT>
    return;
 8007920:	e014      	b.n	800794c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00e      	beq.n	800794c <HAL_UART_IRQHandler+0x514>
 800792e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f969 	bl	8007c12 <UART_EndTransmit_IT>
    return;
 8007940:	e004      	b.n	800794c <HAL_UART_IRQHandler+0x514>
    return;
 8007942:	bf00      	nop
 8007944:	e002      	b.n	800794c <HAL_UART_IRQHandler+0x514>
      return;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <HAL_UART_IRQHandler+0x514>
      return;
 800794a:	bf00      	nop
  }
}
 800794c:	37e8      	adds	r7, #232	; 0xe8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop

08007954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b090      	sub	sp, #64	; 0x40
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b8:	e050      	b.n	8007a5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d04c      	beq.n	8007a5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079c8:	f7fb faca 	bl	8002f60 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d241      	bcs.n	8007a5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079f8:	637a      	str	r2, [r7, #52]	; 0x34
 80079fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3314      	adds	r3, #20
 8007a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3314      	adds	r3, #20
 8007a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a2c:	623a      	str	r2, [r7, #32]
 8007a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	69f9      	ldr	r1, [r7, #28]
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e5      	bne.n	8007a0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e00f      	b.n	8007a7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	4013      	ands	r3, r2
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	bf0c      	ite	eq
 8007a6c:	2301      	moveq	r3, #1
 8007a6e:	2300      	movne	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d09f      	beq.n	80079ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3740      	adds	r7, #64	; 0x40
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b095      	sub	sp, #84	; 0x54
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007aac:	643a      	str	r2, [r7, #64]	; 0x40
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e5      	bne.n	8007a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3314      	adds	r3, #20
 8007ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f023 0301 	bic.w	r3, r3, #1
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3314      	adds	r3, #20
 8007ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e5      	bne.n	8007ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d119      	bne.n	8007b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0310 	bic.w	r3, r3, #16
 8007b12:	647b      	str	r3, [r7, #68]	; 0x44
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1c:	61ba      	str	r2, [r7, #24]
 8007b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6979      	ldr	r1, [r7, #20]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e5      	bne.n	8007afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b3e:	bf00      	nop
 8007b40:	3754      	adds	r7, #84	; 0x54
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff ff09 	bl	800797c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b21      	cmp	r3, #33	; 0x21
 8007b84:	d13e      	bne.n	8007c04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8e:	d114      	bne.n	8007bba <UART_Transmit_IT+0x48>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d110      	bne.n	8007bba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	1c9a      	adds	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]
 8007bb8:	e008      	b.n	8007bcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	1c59      	adds	r1, r3, #1
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6211      	str	r1, [r2, #32]
 8007bc4:	781a      	ldrb	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10f      	bne.n	8007c00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e000      	b.n	8007c06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c04:	2302      	movs	r3, #2
  }
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7ff fe8e 	bl	8007954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b08c      	sub	sp, #48	; 0x30
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b22      	cmp	r3, #34	; 0x22
 8007c54:	f040 80ab 	bne.w	8007dae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c60:	d117      	bne.n	8007c92 <UART_Receive_IT+0x50>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d113      	bne.n	8007c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	1c9a      	adds	r2, r3, #2
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c90:	e026      	b.n	8007ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca4:	d007      	beq.n	8007cb6 <UART_Receive_IT+0x74>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10a      	bne.n	8007cc4 <UART_Receive_IT+0x82>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	e008      	b.n	8007cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	4619      	mov	r1, r3
 8007cee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d15a      	bne.n	8007daa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0220 	bic.w	r2, r2, #32
 8007d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d135      	bne.n	8007da0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	613b      	str	r3, [r7, #16]
   return(result);
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5a:	623a      	str	r2, [r7, #32]
 8007d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	69f9      	ldr	r1, [r7, #28]
 8007d60:	6a3a      	ldr	r2, [r7, #32]
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d10a      	bne.n	8007d92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fdf9 	bl	8007990 <HAL_UARTEx_RxEventCallback>
 8007d9e:	e002      	b.n	8007da6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fde1 	bl	8007968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e002      	b.n	8007db0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e000      	b.n	8007db0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007dae:	2302      	movs	r3, #2
  }
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3730      	adds	r7, #48	; 0x30
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dbc:	b0c0      	sub	sp, #256	; 0x100
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd4:	68d9      	ldr	r1, [r3, #12]
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	ea40 0301 	orr.w	r3, r0, r1
 8007de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e10:	f021 010c 	bic.w	r1, r1, #12
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e32:	6999      	ldr	r1, [r3, #24]
 8007e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	ea40 0301 	orr.w	r3, r0, r1
 8007e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4b8f      	ldr	r3, [pc, #572]	; (8008084 <UART_SetConfig+0x2cc>)
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d005      	beq.n	8007e58 <UART_SetConfig+0xa0>
 8007e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b8d      	ldr	r3, [pc, #564]	; (8008088 <UART_SetConfig+0x2d0>)
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d104      	bne.n	8007e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e58:	f7fd ffac 	bl	8005db4 <HAL_RCC_GetPCLK2Freq>
 8007e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e60:	e003      	b.n	8007e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e62:	f7fd ff93 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 8007e66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e74:	f040 810c 	bne.w	8008090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	1891      	adds	r1, r2, r2
 8007e90:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e92:	415b      	adcs	r3, r3
 8007e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	eb12 0801 	adds.w	r8, r2, r1
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	eb43 0901 	adc.w	r9, r3, r1
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eba:	4690      	mov	r8, r2
 8007ebc:	4699      	mov	r9, r3
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	eb18 0303 	adds.w	r3, r8, r3
 8007ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ec8:	462b      	mov	r3, r5
 8007eca:	eb49 0303 	adc.w	r3, r9, r3
 8007ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ede:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	18db      	adds	r3, r3, r3
 8007eea:	653b      	str	r3, [r7, #80]	; 0x50
 8007eec:	4613      	mov	r3, r2
 8007eee:	eb42 0303 	adc.w	r3, r2, r3
 8007ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007efc:	f7f8 fecc 	bl	8000c98 <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4b61      	ldr	r3, [pc, #388]	; (800808c <UART_SetConfig+0x2d4>)
 8007f06:	fba3 2302 	umull	r2, r3, r3, r2
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	011c      	lsls	r4, r3, #4
 8007f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	1891      	adds	r1, r2, r2
 8007f26:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f28:	415b      	adcs	r3, r3
 8007f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f30:	4641      	mov	r1, r8
 8007f32:	eb12 0a01 	adds.w	sl, r2, r1
 8007f36:	4649      	mov	r1, r9
 8007f38:	eb43 0b01 	adc.w	fp, r3, r1
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f50:	4692      	mov	sl, r2
 8007f52:	469b      	mov	fp, r3
 8007f54:	4643      	mov	r3, r8
 8007f56:	eb1a 0303 	adds.w	r3, sl, r3
 8007f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f5e:	464b      	mov	r3, r9
 8007f60:	eb4b 0303 	adc.w	r3, fp, r3
 8007f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	18db      	adds	r3, r3, r3
 8007f80:	643b      	str	r3, [r7, #64]	; 0x40
 8007f82:	4613      	mov	r3, r2
 8007f84:	eb42 0303 	adc.w	r3, r2, r3
 8007f88:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f92:	f7f8 fe81 	bl	8000c98 <__aeabi_uldivmod>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4b3b      	ldr	r3, [pc, #236]	; (800808c <UART_SetConfig+0x2d4>)
 8007f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8007fa2:	095b      	lsrs	r3, r3, #5
 8007fa4:	2264      	movs	r2, #100	; 0x64
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
 8007faa:	1acb      	subs	r3, r1, r3
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007fb2:	4b36      	ldr	r3, [pc, #216]	; (800808c <UART_SetConfig+0x2d4>)
 8007fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fc0:	441c      	add	r4, r3
 8007fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	1891      	adds	r1, r2, r2
 8007fda:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fdc:	415b      	adcs	r3, r3
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fe4:	4641      	mov	r1, r8
 8007fe6:	1851      	adds	r1, r2, r1
 8007fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8007fea:	4649      	mov	r1, r9
 8007fec:	414b      	adcs	r3, r1
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ffc:	4659      	mov	r1, fp
 8007ffe:	00cb      	lsls	r3, r1, #3
 8008000:	4651      	mov	r1, sl
 8008002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008006:	4651      	mov	r1, sl
 8008008:	00ca      	lsls	r2, r1, #3
 800800a:	4610      	mov	r0, r2
 800800c:	4619      	mov	r1, r3
 800800e:	4603      	mov	r3, r0
 8008010:	4642      	mov	r2, r8
 8008012:	189b      	adds	r3, r3, r2
 8008014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008018:	464b      	mov	r3, r9
 800801a:	460a      	mov	r2, r1
 800801c:	eb42 0303 	adc.w	r3, r2, r3
 8008020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008030:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008038:	460b      	mov	r3, r1
 800803a:	18db      	adds	r3, r3, r3
 800803c:	62bb      	str	r3, [r7, #40]	; 0x28
 800803e:	4613      	mov	r3, r2
 8008040:	eb42 0303 	adc.w	r3, r2, r3
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800804a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800804e:	f7f8 fe23 	bl	8000c98 <__aeabi_uldivmod>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <UART_SetConfig+0x2d4>)
 8008058:	fba3 1302 	umull	r1, r3, r3, r2
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	2164      	movs	r1, #100	; 0x64
 8008060:	fb01 f303 	mul.w	r3, r1, r3
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	3332      	adds	r3, #50	; 0x32
 800806a:	4a08      	ldr	r2, [pc, #32]	; (800808c <UART_SetConfig+0x2d4>)
 800806c:	fba2 2303 	umull	r2, r3, r2, r3
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	f003 0207 	and.w	r2, r3, #7
 8008076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4422      	add	r2, r4
 800807e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008080:	e105      	b.n	800828e <UART_SetConfig+0x4d6>
 8008082:	bf00      	nop
 8008084:	40011000 	.word	0x40011000
 8008088:	40011400 	.word	0x40011400
 800808c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008094:	2200      	movs	r2, #0
 8008096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800809a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800809e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80080a2:	4642      	mov	r2, r8
 80080a4:	464b      	mov	r3, r9
 80080a6:	1891      	adds	r1, r2, r2
 80080a8:	6239      	str	r1, [r7, #32]
 80080aa:	415b      	adcs	r3, r3
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
 80080ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080b2:	4641      	mov	r1, r8
 80080b4:	1854      	adds	r4, r2, r1
 80080b6:	4649      	mov	r1, r9
 80080b8:	eb43 0501 	adc.w	r5, r3, r1
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	00eb      	lsls	r3, r5, #3
 80080c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ca:	00e2      	lsls	r2, r4, #3
 80080cc:	4614      	mov	r4, r2
 80080ce:	461d      	mov	r5, r3
 80080d0:	4643      	mov	r3, r8
 80080d2:	18e3      	adds	r3, r4, r3
 80080d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080d8:	464b      	mov	r3, r9
 80080da:	eb45 0303 	adc.w	r3, r5, r3
 80080de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080fe:	4629      	mov	r1, r5
 8008100:	008b      	lsls	r3, r1, #2
 8008102:	4621      	mov	r1, r4
 8008104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008108:	4621      	mov	r1, r4
 800810a:	008a      	lsls	r2, r1, #2
 800810c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008110:	f7f8 fdc2 	bl	8000c98 <__aeabi_uldivmod>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4b60      	ldr	r3, [pc, #384]	; (800829c <UART_SetConfig+0x4e4>)
 800811a:	fba3 2302 	umull	r2, r3, r3, r2
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	011c      	lsls	r4, r3, #4
 8008122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008126:	2200      	movs	r2, #0
 8008128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800812c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	1891      	adds	r1, r2, r2
 800813a:	61b9      	str	r1, [r7, #24]
 800813c:	415b      	adcs	r3, r3
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008144:	4641      	mov	r1, r8
 8008146:	1851      	adds	r1, r2, r1
 8008148:	6139      	str	r1, [r7, #16]
 800814a:	4649      	mov	r1, r9
 800814c:	414b      	adcs	r3, r1
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800815c:	4659      	mov	r1, fp
 800815e:	00cb      	lsls	r3, r1, #3
 8008160:	4651      	mov	r1, sl
 8008162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008166:	4651      	mov	r1, sl
 8008168:	00ca      	lsls	r2, r1, #3
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	4603      	mov	r3, r0
 8008170:	4642      	mov	r2, r8
 8008172:	189b      	adds	r3, r3, r2
 8008174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008178:	464b      	mov	r3, r9
 800817a:	460a      	mov	r2, r1
 800817c:	eb42 0303 	adc.w	r3, r2, r3
 8008180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	67bb      	str	r3, [r7, #120]	; 0x78
 800818e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800819c:	4649      	mov	r1, r9
 800819e:	008b      	lsls	r3, r1, #2
 80081a0:	4641      	mov	r1, r8
 80081a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081a6:	4641      	mov	r1, r8
 80081a8:	008a      	lsls	r2, r1, #2
 80081aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80081ae:	f7f8 fd73 	bl	8000c98 <__aeabi_uldivmod>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <UART_SetConfig+0x4e4>)
 80081b8:	fba3 1302 	umull	r1, r3, r3, r2
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	2164      	movs	r1, #100	; 0x64
 80081c0:	fb01 f303 	mul.w	r3, r1, r3
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	3332      	adds	r3, #50	; 0x32
 80081ca:	4a34      	ldr	r2, [pc, #208]	; (800829c <UART_SetConfig+0x4e4>)
 80081cc:	fba2 2303 	umull	r2, r3, r2, r3
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081d6:	441c      	add	r4, r3
 80081d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081dc:	2200      	movs	r2, #0
 80081de:	673b      	str	r3, [r7, #112]	; 0x70
 80081e0:	677a      	str	r2, [r7, #116]	; 0x74
 80081e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80081e6:	4642      	mov	r2, r8
 80081e8:	464b      	mov	r3, r9
 80081ea:	1891      	adds	r1, r2, r2
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	415b      	adcs	r3, r3
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081f6:	4641      	mov	r1, r8
 80081f8:	1851      	adds	r1, r2, r1
 80081fa:	6039      	str	r1, [r7, #0]
 80081fc:	4649      	mov	r1, r9
 80081fe:	414b      	adcs	r3, r1
 8008200:	607b      	str	r3, [r7, #4]
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800820e:	4659      	mov	r1, fp
 8008210:	00cb      	lsls	r3, r1, #3
 8008212:	4651      	mov	r1, sl
 8008214:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008218:	4651      	mov	r1, sl
 800821a:	00ca      	lsls	r2, r1, #3
 800821c:	4610      	mov	r0, r2
 800821e:	4619      	mov	r1, r3
 8008220:	4603      	mov	r3, r0
 8008222:	4642      	mov	r2, r8
 8008224:	189b      	adds	r3, r3, r2
 8008226:	66bb      	str	r3, [r7, #104]	; 0x68
 8008228:	464b      	mov	r3, r9
 800822a:	460a      	mov	r2, r1
 800822c:	eb42 0303 	adc.w	r3, r2, r3
 8008230:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	663b      	str	r3, [r7, #96]	; 0x60
 800823c:	667a      	str	r2, [r7, #100]	; 0x64
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800824a:	4649      	mov	r1, r9
 800824c:	008b      	lsls	r3, r1, #2
 800824e:	4641      	mov	r1, r8
 8008250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008254:	4641      	mov	r1, r8
 8008256:	008a      	lsls	r2, r1, #2
 8008258:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800825c:	f7f8 fd1c 	bl	8000c98 <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <UART_SetConfig+0x4e4>)
 8008266:	fba3 1302 	umull	r1, r3, r3, r2
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	2164      	movs	r1, #100	; 0x64
 800826e:	fb01 f303 	mul.w	r3, r1, r3
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	3332      	adds	r3, #50	; 0x32
 8008278:	4a08      	ldr	r2, [pc, #32]	; (800829c <UART_SetConfig+0x4e4>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	f003 020f 	and.w	r2, r3, #15
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4422      	add	r2, r4
 800828c:	609a      	str	r2, [r3, #8]
}
 800828e:	bf00      	nop
 8008290:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008294:	46bd      	mov	sp, r7
 8008296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800829a:	bf00      	nop
 800829c:	51eb851f 	.word	0x51eb851f

080082a0 <atoi>:
 80082a0:	220a      	movs	r2, #10
 80082a2:	2100      	movs	r1, #0
 80082a4:	f000 bd3e 	b.w	8008d24 <strtol>

080082a8 <__errno>:
 80082a8:	4b01      	ldr	r3, [pc, #4]	; (80082b0 <__errno+0x8>)
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000018 	.word	0x20000018

080082b4 <__libc_init_array>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4d0d      	ldr	r5, [pc, #52]	; (80082ec <__libc_init_array+0x38>)
 80082b8:	4c0d      	ldr	r4, [pc, #52]	; (80082f0 <__libc_init_array+0x3c>)
 80082ba:	1b64      	subs	r4, r4, r5
 80082bc:	10a4      	asrs	r4, r4, #2
 80082be:	2600      	movs	r6, #0
 80082c0:	42a6      	cmp	r6, r4
 80082c2:	d109      	bne.n	80082d8 <__libc_init_array+0x24>
 80082c4:	4d0b      	ldr	r5, [pc, #44]	; (80082f4 <__libc_init_array+0x40>)
 80082c6:	4c0c      	ldr	r4, [pc, #48]	; (80082f8 <__libc_init_array+0x44>)
 80082c8:	f002 ff8e 	bl	800b1e8 <_init>
 80082cc:	1b64      	subs	r4, r4, r5
 80082ce:	10a4      	asrs	r4, r4, #2
 80082d0:	2600      	movs	r6, #0
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	d105      	bne.n	80082e2 <__libc_init_array+0x2e>
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082dc:	4798      	blx	r3
 80082de:	3601      	adds	r6, #1
 80082e0:	e7ee      	b.n	80082c0 <__libc_init_array+0xc>
 80082e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e6:	4798      	blx	r3
 80082e8:	3601      	adds	r6, #1
 80082ea:	e7f2      	b.n	80082d2 <__libc_init_array+0x1e>
 80082ec:	0800b694 	.word	0x0800b694
 80082f0:	0800b694 	.word	0x0800b694
 80082f4:	0800b694 	.word	0x0800b694
 80082f8:	0800b698 	.word	0x0800b698

080082fc <memset>:
 80082fc:	4402      	add	r2, r0
 80082fe:	4603      	mov	r3, r0
 8008300:	4293      	cmp	r3, r2
 8008302:	d100      	bne.n	8008306 <memset+0xa>
 8008304:	4770      	bx	lr
 8008306:	f803 1b01 	strb.w	r1, [r3], #1
 800830a:	e7f9      	b.n	8008300 <memset+0x4>

0800830c <__cvt>:
 800830c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	ec55 4b10 	vmov	r4, r5, d0
 8008314:	2d00      	cmp	r5, #0
 8008316:	460e      	mov	r6, r1
 8008318:	4619      	mov	r1, r3
 800831a:	462b      	mov	r3, r5
 800831c:	bfbb      	ittet	lt
 800831e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008322:	461d      	movlt	r5, r3
 8008324:	2300      	movge	r3, #0
 8008326:	232d      	movlt	r3, #45	; 0x2d
 8008328:	700b      	strb	r3, [r1, #0]
 800832a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008330:	4691      	mov	r9, r2
 8008332:	f023 0820 	bic.w	r8, r3, #32
 8008336:	bfbc      	itt	lt
 8008338:	4622      	movlt	r2, r4
 800833a:	4614      	movlt	r4, r2
 800833c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008340:	d005      	beq.n	800834e <__cvt+0x42>
 8008342:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008346:	d100      	bne.n	800834a <__cvt+0x3e>
 8008348:	3601      	adds	r6, #1
 800834a:	2102      	movs	r1, #2
 800834c:	e000      	b.n	8008350 <__cvt+0x44>
 800834e:	2103      	movs	r1, #3
 8008350:	ab03      	add	r3, sp, #12
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	ab02      	add	r3, sp, #8
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	ec45 4b10 	vmov	d0, r4, r5
 800835c:	4653      	mov	r3, sl
 800835e:	4632      	mov	r2, r6
 8008360:	f000 fd76 	bl	8008e50 <_dtoa_r>
 8008364:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008368:	4607      	mov	r7, r0
 800836a:	d102      	bne.n	8008372 <__cvt+0x66>
 800836c:	f019 0f01 	tst.w	r9, #1
 8008370:	d022      	beq.n	80083b8 <__cvt+0xac>
 8008372:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008376:	eb07 0906 	add.w	r9, r7, r6
 800837a:	d110      	bne.n	800839e <__cvt+0x92>
 800837c:	783b      	ldrb	r3, [r7, #0]
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	d10a      	bne.n	8008398 <__cvt+0x8c>
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f8 fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800838e:	b918      	cbnz	r0, 8008398 <__cvt+0x8c>
 8008390:	f1c6 0601 	rsb	r6, r6, #1
 8008394:	f8ca 6000 	str.w	r6, [sl]
 8008398:	f8da 3000 	ldr.w	r3, [sl]
 800839c:	4499      	add	r9, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	4620      	mov	r0, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	f7f8 fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80083aa:	b108      	cbz	r0, 80083b0 <__cvt+0xa4>
 80083ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80083b0:	2230      	movs	r2, #48	; 0x30
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	454b      	cmp	r3, r9
 80083b6:	d307      	bcc.n	80083c8 <__cvt+0xbc>
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083bc:	1bdb      	subs	r3, r3, r7
 80083be:	4638      	mov	r0, r7
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	b004      	add	sp, #16
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	1c59      	adds	r1, r3, #1
 80083ca:	9103      	str	r1, [sp, #12]
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e7f0      	b.n	80083b2 <__cvt+0xa6>

080083d0 <__exponent>:
 80083d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d2:	4603      	mov	r3, r0
 80083d4:	2900      	cmp	r1, #0
 80083d6:	bfb8      	it	lt
 80083d8:	4249      	neglt	r1, r1
 80083da:	f803 2b02 	strb.w	r2, [r3], #2
 80083de:	bfb4      	ite	lt
 80083e0:	222d      	movlt	r2, #45	; 0x2d
 80083e2:	222b      	movge	r2, #43	; 0x2b
 80083e4:	2909      	cmp	r1, #9
 80083e6:	7042      	strb	r2, [r0, #1]
 80083e8:	dd2a      	ble.n	8008440 <__exponent+0x70>
 80083ea:	f10d 0407 	add.w	r4, sp, #7
 80083ee:	46a4      	mov	ip, r4
 80083f0:	270a      	movs	r7, #10
 80083f2:	46a6      	mov	lr, r4
 80083f4:	460a      	mov	r2, r1
 80083f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80083fa:	fb07 1516 	mls	r5, r7, r6, r1
 80083fe:	3530      	adds	r5, #48	; 0x30
 8008400:	2a63      	cmp	r2, #99	; 0x63
 8008402:	f104 34ff 	add.w	r4, r4, #4294967295
 8008406:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800840a:	4631      	mov	r1, r6
 800840c:	dcf1      	bgt.n	80083f2 <__exponent+0x22>
 800840e:	3130      	adds	r1, #48	; 0x30
 8008410:	f1ae 0502 	sub.w	r5, lr, #2
 8008414:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008418:	1c44      	adds	r4, r0, #1
 800841a:	4629      	mov	r1, r5
 800841c:	4561      	cmp	r1, ip
 800841e:	d30a      	bcc.n	8008436 <__exponent+0x66>
 8008420:	f10d 0209 	add.w	r2, sp, #9
 8008424:	eba2 020e 	sub.w	r2, r2, lr
 8008428:	4565      	cmp	r5, ip
 800842a:	bf88      	it	hi
 800842c:	2200      	movhi	r2, #0
 800842e:	4413      	add	r3, r2
 8008430:	1a18      	subs	r0, r3, r0
 8008432:	b003      	add	sp, #12
 8008434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800843e:	e7ed      	b.n	800841c <__exponent+0x4c>
 8008440:	2330      	movs	r3, #48	; 0x30
 8008442:	3130      	adds	r1, #48	; 0x30
 8008444:	7083      	strb	r3, [r0, #2]
 8008446:	70c1      	strb	r1, [r0, #3]
 8008448:	1d03      	adds	r3, r0, #4
 800844a:	e7f1      	b.n	8008430 <__exponent+0x60>

0800844c <_printf_float>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	ed2d 8b02 	vpush	{d8}
 8008454:	b08d      	sub	sp, #52	; 0x34
 8008456:	460c      	mov	r4, r1
 8008458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800845c:	4616      	mov	r6, r2
 800845e:	461f      	mov	r7, r3
 8008460:	4605      	mov	r5, r0
 8008462:	f001 fae3 	bl	8009a2c <_localeconv_r>
 8008466:	f8d0 a000 	ldr.w	sl, [r0]
 800846a:	4650      	mov	r0, sl
 800846c:	f7f7 feb8 	bl	80001e0 <strlen>
 8008470:	2300      	movs	r3, #0
 8008472:	930a      	str	r3, [sp, #40]	; 0x28
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	9305      	str	r3, [sp, #20]
 8008478:	f8d8 3000 	ldr.w	r3, [r8]
 800847c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008480:	3307      	adds	r3, #7
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	f103 0208 	add.w	r2, r3, #8
 800848a:	f8c8 2000 	str.w	r2, [r8]
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008496:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800849a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800849e:	9307      	str	r3, [sp, #28]
 80084a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80084a4:	ee08 0a10 	vmov	s16, r0
 80084a8:	4b9f      	ldr	r3, [pc, #636]	; (8008728 <_printf_float+0x2dc>)
 80084aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ae:	f04f 32ff 	mov.w	r2, #4294967295
 80084b2:	f7f8 fb43 	bl	8000b3c <__aeabi_dcmpun>
 80084b6:	bb88      	cbnz	r0, 800851c <_printf_float+0xd0>
 80084b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084bc:	4b9a      	ldr	r3, [pc, #616]	; (8008728 <_printf_float+0x2dc>)
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	f7f8 fb1d 	bl	8000b00 <__aeabi_dcmple>
 80084c6:	bb48      	cbnz	r0, 800851c <_printf_float+0xd0>
 80084c8:	2200      	movs	r2, #0
 80084ca:	2300      	movs	r3, #0
 80084cc:	4640      	mov	r0, r8
 80084ce:	4649      	mov	r1, r9
 80084d0:	f7f8 fb0c 	bl	8000aec <__aeabi_dcmplt>
 80084d4:	b110      	cbz	r0, 80084dc <_printf_float+0x90>
 80084d6:	232d      	movs	r3, #45	; 0x2d
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	4b93      	ldr	r3, [pc, #588]	; (800872c <_printf_float+0x2e0>)
 80084de:	4894      	ldr	r0, [pc, #592]	; (8008730 <_printf_float+0x2e4>)
 80084e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084e4:	bf94      	ite	ls
 80084e6:	4698      	movls	r8, r3
 80084e8:	4680      	movhi	r8, r0
 80084ea:	2303      	movs	r3, #3
 80084ec:	6123      	str	r3, [r4, #16]
 80084ee:	9b05      	ldr	r3, [sp, #20]
 80084f0:	f023 0204 	bic.w	r2, r3, #4
 80084f4:	6022      	str	r2, [r4, #0]
 80084f6:	f04f 0900 	mov.w	r9, #0
 80084fa:	9700      	str	r7, [sp, #0]
 80084fc:	4633      	mov	r3, r6
 80084fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f9d8 	bl	80088b8 <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	f040 8090 	bne.w	800862e <_printf_float+0x1e2>
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	b00d      	add	sp, #52	; 0x34
 8008514:	ecbd 8b02 	vpop	{d8}
 8008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	4642      	mov	r2, r8
 800851e:	464b      	mov	r3, r9
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f8 fb0a 	bl	8000b3c <__aeabi_dcmpun>
 8008528:	b140      	cbz	r0, 800853c <_printf_float+0xf0>
 800852a:	464b      	mov	r3, r9
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfbc      	itt	lt
 8008530:	232d      	movlt	r3, #45	; 0x2d
 8008532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008536:	487f      	ldr	r0, [pc, #508]	; (8008734 <_printf_float+0x2e8>)
 8008538:	4b7f      	ldr	r3, [pc, #508]	; (8008738 <_printf_float+0x2ec>)
 800853a:	e7d1      	b.n	80084e0 <_printf_float+0x94>
 800853c:	6863      	ldr	r3, [r4, #4]
 800853e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008542:	9206      	str	r2, [sp, #24]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	d13f      	bne.n	80085c8 <_printf_float+0x17c>
 8008548:	2306      	movs	r3, #6
 800854a:	6063      	str	r3, [r4, #4]
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	6861      	ldr	r1, [r4, #4]
 8008550:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008554:	2300      	movs	r3, #0
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	ab0a      	add	r3, sp, #40	; 0x28
 800855a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800855e:	ab09      	add	r3, sp, #36	; 0x24
 8008560:	ec49 8b10 	vmov	d0, r8, r9
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	6022      	str	r2, [r4, #0]
 8008568:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800856c:	4628      	mov	r0, r5
 800856e:	f7ff fecd 	bl	800830c <__cvt>
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008576:	2b47      	cmp	r3, #71	; 0x47
 8008578:	4680      	mov	r8, r0
 800857a:	d108      	bne.n	800858e <_printf_float+0x142>
 800857c:	1cc8      	adds	r0, r1, #3
 800857e:	db02      	blt.n	8008586 <_printf_float+0x13a>
 8008580:	6863      	ldr	r3, [r4, #4]
 8008582:	4299      	cmp	r1, r3
 8008584:	dd41      	ble.n	800860a <_printf_float+0x1be>
 8008586:	f1ab 0b02 	sub.w	fp, fp, #2
 800858a:	fa5f fb8b 	uxtb.w	fp, fp
 800858e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008592:	d820      	bhi.n	80085d6 <_printf_float+0x18a>
 8008594:	3901      	subs	r1, #1
 8008596:	465a      	mov	r2, fp
 8008598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800859c:	9109      	str	r1, [sp, #36]	; 0x24
 800859e:	f7ff ff17 	bl	80083d0 <__exponent>
 80085a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a4:	1813      	adds	r3, r2, r0
 80085a6:	2a01      	cmp	r2, #1
 80085a8:	4681      	mov	r9, r0
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	dc02      	bgt.n	80085b4 <_printf_float+0x168>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	07d2      	lsls	r2, r2, #31
 80085b2:	d501      	bpl.n	80085b8 <_printf_float+0x16c>
 80085b4:	3301      	adds	r3, #1
 80085b6:	6123      	str	r3, [r4, #16]
 80085b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d09c      	beq.n	80084fa <_printf_float+0xae>
 80085c0:	232d      	movs	r3, #45	; 0x2d
 80085c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c6:	e798      	b.n	80084fa <_printf_float+0xae>
 80085c8:	9a06      	ldr	r2, [sp, #24]
 80085ca:	2a47      	cmp	r2, #71	; 0x47
 80085cc:	d1be      	bne.n	800854c <_printf_float+0x100>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1bc      	bne.n	800854c <_printf_float+0x100>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7b9      	b.n	800854a <_printf_float+0xfe>
 80085d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085da:	d118      	bne.n	800860e <_printf_float+0x1c2>
 80085dc:	2900      	cmp	r1, #0
 80085de:	6863      	ldr	r3, [r4, #4]
 80085e0:	dd0b      	ble.n	80085fa <_printf_float+0x1ae>
 80085e2:	6121      	str	r1, [r4, #16]
 80085e4:	b913      	cbnz	r3, 80085ec <_printf_float+0x1a0>
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	07d0      	lsls	r0, r2, #31
 80085ea:	d502      	bpl.n	80085f2 <_printf_float+0x1a6>
 80085ec:	3301      	adds	r3, #1
 80085ee:	440b      	add	r3, r1
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80085f4:	f04f 0900 	mov.w	r9, #0
 80085f8:	e7de      	b.n	80085b8 <_printf_float+0x16c>
 80085fa:	b913      	cbnz	r3, 8008602 <_printf_float+0x1b6>
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	07d2      	lsls	r2, r2, #31
 8008600:	d501      	bpl.n	8008606 <_printf_float+0x1ba>
 8008602:	3302      	adds	r3, #2
 8008604:	e7f4      	b.n	80085f0 <_printf_float+0x1a4>
 8008606:	2301      	movs	r3, #1
 8008608:	e7f2      	b.n	80085f0 <_printf_float+0x1a4>
 800860a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	4299      	cmp	r1, r3
 8008612:	db05      	blt.n	8008620 <_printf_float+0x1d4>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	6121      	str	r1, [r4, #16]
 8008618:	07d8      	lsls	r0, r3, #31
 800861a:	d5ea      	bpl.n	80085f2 <_printf_float+0x1a6>
 800861c:	1c4b      	adds	r3, r1, #1
 800861e:	e7e7      	b.n	80085f0 <_printf_float+0x1a4>
 8008620:	2900      	cmp	r1, #0
 8008622:	bfd4      	ite	le
 8008624:	f1c1 0202 	rsble	r2, r1, #2
 8008628:	2201      	movgt	r2, #1
 800862a:	4413      	add	r3, r2
 800862c:	e7e0      	b.n	80085f0 <_printf_float+0x1a4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	055a      	lsls	r2, r3, #21
 8008632:	d407      	bmi.n	8008644 <_printf_float+0x1f8>
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	4642      	mov	r2, r8
 8008638:	4631      	mov	r1, r6
 800863a:	4628      	mov	r0, r5
 800863c:	47b8      	blx	r7
 800863e:	3001      	adds	r0, #1
 8008640:	d12c      	bne.n	800869c <_printf_float+0x250>
 8008642:	e764      	b.n	800850e <_printf_float+0xc2>
 8008644:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008648:	f240 80e0 	bls.w	800880c <_printf_float+0x3c0>
 800864c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008650:	2200      	movs	r2, #0
 8008652:	2300      	movs	r3, #0
 8008654:	f7f8 fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 8008658:	2800      	cmp	r0, #0
 800865a:	d034      	beq.n	80086c6 <_printf_float+0x27a>
 800865c:	4a37      	ldr	r2, [pc, #220]	; (800873c <_printf_float+0x2f0>)
 800865e:	2301      	movs	r3, #1
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f af51 	beq.w	800850e <_printf_float+0xc2>
 800866c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008670:	429a      	cmp	r2, r3
 8008672:	db02      	blt.n	800867a <_printf_float+0x22e>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	07d8      	lsls	r0, r3, #31
 8008678:	d510      	bpl.n	800869c <_printf_float+0x250>
 800867a:	ee18 3a10 	vmov	r3, s16
 800867e:	4652      	mov	r2, sl
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f af41 	beq.w	800850e <_printf_float+0xc2>
 800868c:	f04f 0800 	mov.w	r8, #0
 8008690:	f104 091a 	add.w	r9, r4, #26
 8008694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008696:	3b01      	subs	r3, #1
 8008698:	4543      	cmp	r3, r8
 800869a:	dc09      	bgt.n	80086b0 <_printf_float+0x264>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	079b      	lsls	r3, r3, #30
 80086a0:	f100 8105 	bmi.w	80088ae <_printf_float+0x462>
 80086a4:	68e0      	ldr	r0, [r4, #12]
 80086a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a8:	4298      	cmp	r0, r3
 80086aa:	bfb8      	it	lt
 80086ac:	4618      	movlt	r0, r3
 80086ae:	e730      	b.n	8008512 <_printf_float+0xc6>
 80086b0:	2301      	movs	r3, #1
 80086b2:	464a      	mov	r2, r9
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	f43f af27 	beq.w	800850e <_printf_float+0xc2>
 80086c0:	f108 0801 	add.w	r8, r8, #1
 80086c4:	e7e6      	b.n	8008694 <_printf_float+0x248>
 80086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc39      	bgt.n	8008740 <_printf_float+0x2f4>
 80086cc:	4a1b      	ldr	r2, [pc, #108]	; (800873c <_printf_float+0x2f0>)
 80086ce:	2301      	movs	r3, #1
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	f43f af19 	beq.w	800850e <_printf_float+0xc2>
 80086dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086e0:	4313      	orrs	r3, r2
 80086e2:	d102      	bne.n	80086ea <_printf_float+0x29e>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	d5d8      	bpl.n	800869c <_printf_float+0x250>
 80086ea:	ee18 3a10 	vmov	r3, s16
 80086ee:	4652      	mov	r2, sl
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	f43f af09 	beq.w	800850e <_printf_float+0xc2>
 80086fc:	f04f 0900 	mov.w	r9, #0
 8008700:	f104 0a1a 	add.w	sl, r4, #26
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	425b      	negs	r3, r3
 8008708:	454b      	cmp	r3, r9
 800870a:	dc01      	bgt.n	8008710 <_printf_float+0x2c4>
 800870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800870e:	e792      	b.n	8008636 <_printf_float+0x1ea>
 8008710:	2301      	movs	r3, #1
 8008712:	4652      	mov	r2, sl
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f aef7 	beq.w	800850e <_printf_float+0xc2>
 8008720:	f109 0901 	add.w	r9, r9, #1
 8008724:	e7ee      	b.n	8008704 <_printf_float+0x2b8>
 8008726:	bf00      	nop
 8008728:	7fefffff 	.word	0x7fefffff
 800872c:	0800b2b0 	.word	0x0800b2b0
 8008730:	0800b2b4 	.word	0x0800b2b4
 8008734:	0800b2bc 	.word	0x0800b2bc
 8008738:	0800b2b8 	.word	0x0800b2b8
 800873c:	0800b2c0 	.word	0x0800b2c0
 8008740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008744:	429a      	cmp	r2, r3
 8008746:	bfa8      	it	ge
 8008748:	461a      	movge	r2, r3
 800874a:	2a00      	cmp	r2, #0
 800874c:	4691      	mov	r9, r2
 800874e:	dc37      	bgt.n	80087c0 <_printf_float+0x374>
 8008750:	f04f 0b00 	mov.w	fp, #0
 8008754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008758:	f104 021a 	add.w	r2, r4, #26
 800875c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	eba3 0309 	sub.w	r3, r3, r9
 8008764:	455b      	cmp	r3, fp
 8008766:	dc33      	bgt.n	80087d0 <_printf_float+0x384>
 8008768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800876c:	429a      	cmp	r2, r3
 800876e:	db3b      	blt.n	80087e8 <_printf_float+0x39c>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	07da      	lsls	r2, r3, #31
 8008774:	d438      	bmi.n	80087e8 <_printf_float+0x39c>
 8008776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800877c:	1a9a      	subs	r2, r3, r2
 800877e:	eba3 0901 	sub.w	r9, r3, r1
 8008782:	4591      	cmp	r9, r2
 8008784:	bfa8      	it	ge
 8008786:	4691      	movge	r9, r2
 8008788:	f1b9 0f00 	cmp.w	r9, #0
 800878c:	dc35      	bgt.n	80087fa <_printf_float+0x3ae>
 800878e:	f04f 0800 	mov.w	r8, #0
 8008792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008796:	f104 0a1a 	add.w	sl, r4, #26
 800879a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	eba3 0309 	sub.w	r3, r3, r9
 80087a4:	4543      	cmp	r3, r8
 80087a6:	f77f af79 	ble.w	800869c <_printf_float+0x250>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4652      	mov	r2, sl
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	f43f aeaa 	beq.w	800850e <_printf_float+0xc2>
 80087ba:	f108 0801 	add.w	r8, r8, #1
 80087be:	e7ec      	b.n	800879a <_printf_float+0x34e>
 80087c0:	4613      	mov	r3, r2
 80087c2:	4631      	mov	r1, r6
 80087c4:	4642      	mov	r2, r8
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	d1c0      	bne.n	8008750 <_printf_float+0x304>
 80087ce:	e69e      	b.n	800850e <_printf_float+0xc2>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4631      	mov	r1, r6
 80087d4:	4628      	mov	r0, r5
 80087d6:	9205      	str	r2, [sp, #20]
 80087d8:	47b8      	blx	r7
 80087da:	3001      	adds	r0, #1
 80087dc:	f43f ae97 	beq.w	800850e <_printf_float+0xc2>
 80087e0:	9a05      	ldr	r2, [sp, #20]
 80087e2:	f10b 0b01 	add.w	fp, fp, #1
 80087e6:	e7b9      	b.n	800875c <_printf_float+0x310>
 80087e8:	ee18 3a10 	vmov	r3, s16
 80087ec:	4652      	mov	r2, sl
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	d1be      	bne.n	8008776 <_printf_float+0x32a>
 80087f8:	e689      	b.n	800850e <_printf_float+0xc2>
 80087fa:	9a05      	ldr	r2, [sp, #20]
 80087fc:	464b      	mov	r3, r9
 80087fe:	4442      	add	r2, r8
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	d1c1      	bne.n	800878e <_printf_float+0x342>
 800880a:	e680      	b.n	800850e <_printf_float+0xc2>
 800880c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800880e:	2a01      	cmp	r2, #1
 8008810:	dc01      	bgt.n	8008816 <_printf_float+0x3ca>
 8008812:	07db      	lsls	r3, r3, #31
 8008814:	d538      	bpl.n	8008888 <_printf_float+0x43c>
 8008816:	2301      	movs	r3, #1
 8008818:	4642      	mov	r2, r8
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	f43f ae74 	beq.w	800850e <_printf_float+0xc2>
 8008826:	ee18 3a10 	vmov	r3, s16
 800882a:	4652      	mov	r2, sl
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f ae6b 	beq.w	800850e <_printf_float+0xc2>
 8008838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800883c:	2200      	movs	r2, #0
 800883e:	2300      	movs	r3, #0
 8008840:	f7f8 f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008844:	b9d8      	cbnz	r0, 800887e <_printf_float+0x432>
 8008846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008848:	f108 0201 	add.w	r2, r8, #1
 800884c:	3b01      	subs	r3, #1
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	d10e      	bne.n	8008876 <_printf_float+0x42a>
 8008858:	e659      	b.n	800850e <_printf_float+0xc2>
 800885a:	2301      	movs	r3, #1
 800885c:	4652      	mov	r2, sl
 800885e:	4631      	mov	r1, r6
 8008860:	4628      	mov	r0, r5
 8008862:	47b8      	blx	r7
 8008864:	3001      	adds	r0, #1
 8008866:	f43f ae52 	beq.w	800850e <_printf_float+0xc2>
 800886a:	f108 0801 	add.w	r8, r8, #1
 800886e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008870:	3b01      	subs	r3, #1
 8008872:	4543      	cmp	r3, r8
 8008874:	dcf1      	bgt.n	800885a <_printf_float+0x40e>
 8008876:	464b      	mov	r3, r9
 8008878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800887c:	e6dc      	b.n	8008638 <_printf_float+0x1ec>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	f104 0a1a 	add.w	sl, r4, #26
 8008886:	e7f2      	b.n	800886e <_printf_float+0x422>
 8008888:	2301      	movs	r3, #1
 800888a:	4642      	mov	r2, r8
 800888c:	e7df      	b.n	800884e <_printf_float+0x402>
 800888e:	2301      	movs	r3, #1
 8008890:	464a      	mov	r2, r9
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	f43f ae38 	beq.w	800850e <_printf_float+0xc2>
 800889e:	f108 0801 	add.w	r8, r8, #1
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088a6:	1a5b      	subs	r3, r3, r1
 80088a8:	4543      	cmp	r3, r8
 80088aa:	dcf0      	bgt.n	800888e <_printf_float+0x442>
 80088ac:	e6fa      	b.n	80086a4 <_printf_float+0x258>
 80088ae:	f04f 0800 	mov.w	r8, #0
 80088b2:	f104 0919 	add.w	r9, r4, #25
 80088b6:	e7f4      	b.n	80088a2 <_printf_float+0x456>

080088b8 <_printf_common>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	4616      	mov	r6, r2
 80088be:	4699      	mov	r9, r3
 80088c0:	688a      	ldr	r2, [r1, #8]
 80088c2:	690b      	ldr	r3, [r1, #16]
 80088c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088c8:	4293      	cmp	r3, r2
 80088ca:	bfb8      	it	lt
 80088cc:	4613      	movlt	r3, r2
 80088ce:	6033      	str	r3, [r6, #0]
 80088d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088d4:	4607      	mov	r7, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b10a      	cbz	r2, 80088de <_printf_common+0x26>
 80088da:	3301      	adds	r3, #1
 80088dc:	6033      	str	r3, [r6, #0]
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	0699      	lsls	r1, r3, #26
 80088e2:	bf42      	ittt	mi
 80088e4:	6833      	ldrmi	r3, [r6, #0]
 80088e6:	3302      	addmi	r3, #2
 80088e8:	6033      	strmi	r3, [r6, #0]
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	f015 0506 	ands.w	r5, r5, #6
 80088f0:	d106      	bne.n	8008900 <_printf_common+0x48>
 80088f2:	f104 0a19 	add.w	sl, r4, #25
 80088f6:	68e3      	ldr	r3, [r4, #12]
 80088f8:	6832      	ldr	r2, [r6, #0]
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	42ab      	cmp	r3, r5
 80088fe:	dc26      	bgt.n	800894e <_printf_common+0x96>
 8008900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008904:	1e13      	subs	r3, r2, #0
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	bf18      	it	ne
 800890a:	2301      	movne	r3, #1
 800890c:	0692      	lsls	r2, r2, #26
 800890e:	d42b      	bmi.n	8008968 <_printf_common+0xb0>
 8008910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008914:	4649      	mov	r1, r9
 8008916:	4638      	mov	r0, r7
 8008918:	47c0      	blx	r8
 800891a:	3001      	adds	r0, #1
 800891c:	d01e      	beq.n	800895c <_printf_common+0xa4>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	68e5      	ldr	r5, [r4, #12]
 8008922:	6832      	ldr	r2, [r6, #0]
 8008924:	f003 0306 	and.w	r3, r3, #6
 8008928:	2b04      	cmp	r3, #4
 800892a:	bf08      	it	eq
 800892c:	1aad      	subeq	r5, r5, r2
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	6922      	ldr	r2, [r4, #16]
 8008932:	bf0c      	ite	eq
 8008934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008938:	2500      	movne	r5, #0
 800893a:	4293      	cmp	r3, r2
 800893c:	bfc4      	itt	gt
 800893e:	1a9b      	subgt	r3, r3, r2
 8008940:	18ed      	addgt	r5, r5, r3
 8008942:	2600      	movs	r6, #0
 8008944:	341a      	adds	r4, #26
 8008946:	42b5      	cmp	r5, r6
 8008948:	d11a      	bne.n	8008980 <_printf_common+0xc8>
 800894a:	2000      	movs	r0, #0
 800894c:	e008      	b.n	8008960 <_printf_common+0xa8>
 800894e:	2301      	movs	r3, #1
 8008950:	4652      	mov	r2, sl
 8008952:	4649      	mov	r1, r9
 8008954:	4638      	mov	r0, r7
 8008956:	47c0      	blx	r8
 8008958:	3001      	adds	r0, #1
 800895a:	d103      	bne.n	8008964 <_printf_common+0xac>
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008964:	3501      	adds	r5, #1
 8008966:	e7c6      	b.n	80088f6 <_printf_common+0x3e>
 8008968:	18e1      	adds	r1, r4, r3
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	2030      	movs	r0, #48	; 0x30
 800896e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008972:	4422      	add	r2, r4
 8008974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800897c:	3302      	adds	r3, #2
 800897e:	e7c7      	b.n	8008910 <_printf_common+0x58>
 8008980:	2301      	movs	r3, #1
 8008982:	4622      	mov	r2, r4
 8008984:	4649      	mov	r1, r9
 8008986:	4638      	mov	r0, r7
 8008988:	47c0      	blx	r8
 800898a:	3001      	adds	r0, #1
 800898c:	d0e6      	beq.n	800895c <_printf_common+0xa4>
 800898e:	3601      	adds	r6, #1
 8008990:	e7d9      	b.n	8008946 <_printf_common+0x8e>
	...

08008994 <_printf_i>:
 8008994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	7e0f      	ldrb	r7, [r1, #24]
 800899a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800899c:	2f78      	cmp	r7, #120	; 0x78
 800899e:	4691      	mov	r9, r2
 80089a0:	4680      	mov	r8, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	469a      	mov	sl, r3
 80089a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089aa:	d807      	bhi.n	80089bc <_printf_i+0x28>
 80089ac:	2f62      	cmp	r7, #98	; 0x62
 80089ae:	d80a      	bhi.n	80089c6 <_printf_i+0x32>
 80089b0:	2f00      	cmp	r7, #0
 80089b2:	f000 80d8 	beq.w	8008b66 <_printf_i+0x1d2>
 80089b6:	2f58      	cmp	r7, #88	; 0x58
 80089b8:	f000 80a3 	beq.w	8008b02 <_printf_i+0x16e>
 80089bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089c4:	e03a      	b.n	8008a3c <_printf_i+0xa8>
 80089c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ca:	2b15      	cmp	r3, #21
 80089cc:	d8f6      	bhi.n	80089bc <_printf_i+0x28>
 80089ce:	a101      	add	r1, pc, #4	; (adr r1, 80089d4 <_printf_i+0x40>)
 80089d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089d4:	08008a2d 	.word	0x08008a2d
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	080089bd 	.word	0x080089bd
 80089e0:	080089bd 	.word	0x080089bd
 80089e4:	080089bd 	.word	0x080089bd
 80089e8:	080089bd 	.word	0x080089bd
 80089ec:	08008a41 	.word	0x08008a41
 80089f0:	080089bd 	.word	0x080089bd
 80089f4:	080089bd 	.word	0x080089bd
 80089f8:	080089bd 	.word	0x080089bd
 80089fc:	080089bd 	.word	0x080089bd
 8008a00:	08008b4d 	.word	0x08008b4d
 8008a04:	08008a71 	.word	0x08008a71
 8008a08:	08008b2f 	.word	0x08008b2f
 8008a0c:	080089bd 	.word	0x080089bd
 8008a10:	080089bd 	.word	0x080089bd
 8008a14:	08008b6f 	.word	0x08008b6f
 8008a18:	080089bd 	.word	0x080089bd
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	080089bd 	.word	0x080089bd
 8008a24:	080089bd 	.word	0x080089bd
 8008a28:	08008b37 	.word	0x08008b37
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	1d1a      	adds	r2, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	602a      	str	r2, [r5, #0]
 8008a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e0a3      	b.n	8008b88 <_printf_i+0x1f4>
 8008a40:	6820      	ldr	r0, [r4, #0]
 8008a42:	6829      	ldr	r1, [r5, #0]
 8008a44:	0606      	lsls	r6, r0, #24
 8008a46:	f101 0304 	add.w	r3, r1, #4
 8008a4a:	d50a      	bpl.n	8008a62 <_printf_i+0xce>
 8008a4c:	680e      	ldr	r6, [r1, #0]
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	da03      	bge.n	8008a5c <_printf_i+0xc8>
 8008a54:	232d      	movs	r3, #45	; 0x2d
 8008a56:	4276      	negs	r6, r6
 8008a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a5c:	485e      	ldr	r0, [pc, #376]	; (8008bd8 <_printf_i+0x244>)
 8008a5e:	230a      	movs	r3, #10
 8008a60:	e019      	b.n	8008a96 <_printf_i+0x102>
 8008a62:	680e      	ldr	r6, [r1, #0]
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a6a:	bf18      	it	ne
 8008a6c:	b236      	sxthne	r6, r6
 8008a6e:	e7ef      	b.n	8008a50 <_printf_i+0xbc>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	6820      	ldr	r0, [r4, #0]
 8008a74:	1d19      	adds	r1, r3, #4
 8008a76:	6029      	str	r1, [r5, #0]
 8008a78:	0601      	lsls	r1, r0, #24
 8008a7a:	d501      	bpl.n	8008a80 <_printf_i+0xec>
 8008a7c:	681e      	ldr	r6, [r3, #0]
 8008a7e:	e002      	b.n	8008a86 <_printf_i+0xf2>
 8008a80:	0646      	lsls	r6, r0, #25
 8008a82:	d5fb      	bpl.n	8008a7c <_printf_i+0xe8>
 8008a84:	881e      	ldrh	r6, [r3, #0]
 8008a86:	4854      	ldr	r0, [pc, #336]	; (8008bd8 <_printf_i+0x244>)
 8008a88:	2f6f      	cmp	r7, #111	; 0x6f
 8008a8a:	bf0c      	ite	eq
 8008a8c:	2308      	moveq	r3, #8
 8008a8e:	230a      	movne	r3, #10
 8008a90:	2100      	movs	r1, #0
 8008a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a96:	6865      	ldr	r5, [r4, #4]
 8008a98:	60a5      	str	r5, [r4, #8]
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	bfa2      	ittt	ge
 8008a9e:	6821      	ldrge	r1, [r4, #0]
 8008aa0:	f021 0104 	bicge.w	r1, r1, #4
 8008aa4:	6021      	strge	r1, [r4, #0]
 8008aa6:	b90e      	cbnz	r6, 8008aac <_printf_i+0x118>
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	d04d      	beq.n	8008b48 <_printf_i+0x1b4>
 8008aac:	4615      	mov	r5, r2
 8008aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ab6:	5dc7      	ldrb	r7, [r0, r7]
 8008ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008abc:	4637      	mov	r7, r6
 8008abe:	42bb      	cmp	r3, r7
 8008ac0:	460e      	mov	r6, r1
 8008ac2:	d9f4      	bls.n	8008aae <_printf_i+0x11a>
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d10b      	bne.n	8008ae0 <_printf_i+0x14c>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	07de      	lsls	r6, r3, #31
 8008acc:	d508      	bpl.n	8008ae0 <_printf_i+0x14c>
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	6861      	ldr	r1, [r4, #4]
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	bfde      	ittt	le
 8008ad6:	2330      	movle	r3, #48	; 0x30
 8008ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ae0:	1b52      	subs	r2, r2, r5
 8008ae2:	6122      	str	r2, [r4, #16]
 8008ae4:	f8cd a000 	str.w	sl, [sp]
 8008ae8:	464b      	mov	r3, r9
 8008aea:	aa03      	add	r2, sp, #12
 8008aec:	4621      	mov	r1, r4
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7ff fee2 	bl	80088b8 <_printf_common>
 8008af4:	3001      	adds	r0, #1
 8008af6:	d14c      	bne.n	8008b92 <_printf_i+0x1fe>
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	b004      	add	sp, #16
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	4835      	ldr	r0, [pc, #212]	; (8008bd8 <_printf_i+0x244>)
 8008b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b08:	6829      	ldr	r1, [r5, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b10:	6029      	str	r1, [r5, #0]
 8008b12:	061d      	lsls	r5, r3, #24
 8008b14:	d514      	bpl.n	8008b40 <_printf_i+0x1ac>
 8008b16:	07df      	lsls	r7, r3, #31
 8008b18:	bf44      	itt	mi
 8008b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b1e:	6023      	strmi	r3, [r4, #0]
 8008b20:	b91e      	cbnz	r6, 8008b2a <_printf_i+0x196>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	f023 0320 	bic.w	r3, r3, #32
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	2310      	movs	r3, #16
 8008b2c:	e7b0      	b.n	8008a90 <_printf_i+0xfc>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	f043 0320 	orr.w	r3, r3, #32
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	2378      	movs	r3, #120	; 0x78
 8008b38:	4828      	ldr	r0, [pc, #160]	; (8008bdc <_printf_i+0x248>)
 8008b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b3e:	e7e3      	b.n	8008b08 <_printf_i+0x174>
 8008b40:	0659      	lsls	r1, r3, #25
 8008b42:	bf48      	it	mi
 8008b44:	b2b6      	uxthmi	r6, r6
 8008b46:	e7e6      	b.n	8008b16 <_printf_i+0x182>
 8008b48:	4615      	mov	r5, r2
 8008b4a:	e7bb      	b.n	8008ac4 <_printf_i+0x130>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	6826      	ldr	r6, [r4, #0]
 8008b50:	6961      	ldr	r1, [r4, #20]
 8008b52:	1d18      	adds	r0, r3, #4
 8008b54:	6028      	str	r0, [r5, #0]
 8008b56:	0635      	lsls	r5, r6, #24
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0x1cc>
 8008b5c:	6019      	str	r1, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0x1d2>
 8008b60:	0670      	lsls	r0, r6, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0x1c8>
 8008b64:	8019      	strh	r1, [r3, #0]
 8008b66:	2300      	movs	r3, #0
 8008b68:	6123      	str	r3, [r4, #16]
 8008b6a:	4615      	mov	r5, r2
 8008b6c:	e7ba      	b.n	8008ae4 <_printf_i+0x150>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	1d1a      	adds	r2, r3, #4
 8008b72:	602a      	str	r2, [r5, #0]
 8008b74:	681d      	ldr	r5, [r3, #0]
 8008b76:	6862      	ldr	r2, [r4, #4]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f7f7 fb38 	bl	80001f0 <memchr>
 8008b80:	b108      	cbz	r0, 8008b86 <_printf_i+0x1f2>
 8008b82:	1b40      	subs	r0, r0, r5
 8008b84:	6060      	str	r0, [r4, #4]
 8008b86:	6863      	ldr	r3, [r4, #4]
 8008b88:	6123      	str	r3, [r4, #16]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b90:	e7a8      	b.n	8008ae4 <_printf_i+0x150>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4649      	mov	r1, r9
 8008b98:	4640      	mov	r0, r8
 8008b9a:	47d0      	blx	sl
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d0ab      	beq.n	8008af8 <_printf_i+0x164>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	079b      	lsls	r3, r3, #30
 8008ba4:	d413      	bmi.n	8008bce <_printf_i+0x23a>
 8008ba6:	68e0      	ldr	r0, [r4, #12]
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	4298      	cmp	r0, r3
 8008bac:	bfb8      	it	lt
 8008bae:	4618      	movlt	r0, r3
 8008bb0:	e7a4      	b.n	8008afc <_printf_i+0x168>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4640      	mov	r0, r8
 8008bba:	47d0      	blx	sl
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d09b      	beq.n	8008af8 <_printf_i+0x164>
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	9903      	ldr	r1, [sp, #12]
 8008bc6:	1a5b      	subs	r3, r3, r1
 8008bc8:	42ab      	cmp	r3, r5
 8008bca:	dcf2      	bgt.n	8008bb2 <_printf_i+0x21e>
 8008bcc:	e7eb      	b.n	8008ba6 <_printf_i+0x212>
 8008bce:	2500      	movs	r5, #0
 8008bd0:	f104 0619 	add.w	r6, r4, #25
 8008bd4:	e7f5      	b.n	8008bc2 <_printf_i+0x22e>
 8008bd6:	bf00      	nop
 8008bd8:	0800b2c2 	.word	0x0800b2c2
 8008bdc:	0800b2d3 	.word	0x0800b2d3

08008be0 <siprintf>:
 8008be0:	b40e      	push	{r1, r2, r3}
 8008be2:	b500      	push	{lr}
 8008be4:	b09c      	sub	sp, #112	; 0x70
 8008be6:	ab1d      	add	r3, sp, #116	; 0x74
 8008be8:	9002      	str	r0, [sp, #8]
 8008bea:	9006      	str	r0, [sp, #24]
 8008bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bf0:	4809      	ldr	r0, [pc, #36]	; (8008c18 <siprintf+0x38>)
 8008bf2:	9107      	str	r1, [sp, #28]
 8008bf4:	9104      	str	r1, [sp, #16]
 8008bf6:	4909      	ldr	r1, [pc, #36]	; (8008c1c <siprintf+0x3c>)
 8008bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfc:	9105      	str	r1, [sp, #20]
 8008bfe:	6800      	ldr	r0, [r0, #0]
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	a902      	add	r1, sp, #8
 8008c04:	f001 fc02 	bl	800a40c <_svfiprintf_r>
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	b01c      	add	sp, #112	; 0x70
 8008c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c14:	b003      	add	sp, #12
 8008c16:	4770      	bx	lr
 8008c18:	20000018 	.word	0x20000018
 8008c1c:	ffff0208 	.word	0xffff0208

08008c20 <_strtol_l.constprop.0>:
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c26:	d001      	beq.n	8008c2c <_strtol_l.constprop.0+0xc>
 8008c28:	2b24      	cmp	r3, #36	; 0x24
 8008c2a:	d906      	bls.n	8008c3a <_strtol_l.constprop.0+0x1a>
 8008c2c:	f7ff fb3c 	bl	80082a8 <__errno>
 8008c30:	2316      	movs	r3, #22
 8008c32:	6003      	str	r3, [r0, #0]
 8008c34:	2000      	movs	r0, #0
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008d20 <_strtol_l.constprop.0+0x100>
 8008c3e:	460d      	mov	r5, r1
 8008c40:	462e      	mov	r6, r5
 8008c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008c4a:	f017 0708 	ands.w	r7, r7, #8
 8008c4e:	d1f7      	bne.n	8008c40 <_strtol_l.constprop.0+0x20>
 8008c50:	2c2d      	cmp	r4, #45	; 0x2d
 8008c52:	d132      	bne.n	8008cba <_strtol_l.constprop.0+0x9a>
 8008c54:	782c      	ldrb	r4, [r5, #0]
 8008c56:	2701      	movs	r7, #1
 8008c58:	1cb5      	adds	r5, r6, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d05b      	beq.n	8008d16 <_strtol_l.constprop.0+0xf6>
 8008c5e:	2b10      	cmp	r3, #16
 8008c60:	d109      	bne.n	8008c76 <_strtol_l.constprop.0+0x56>
 8008c62:	2c30      	cmp	r4, #48	; 0x30
 8008c64:	d107      	bne.n	8008c76 <_strtol_l.constprop.0+0x56>
 8008c66:	782c      	ldrb	r4, [r5, #0]
 8008c68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c6c:	2c58      	cmp	r4, #88	; 0x58
 8008c6e:	d14d      	bne.n	8008d0c <_strtol_l.constprop.0+0xec>
 8008c70:	786c      	ldrb	r4, [r5, #1]
 8008c72:	2310      	movs	r3, #16
 8008c74:	3502      	adds	r5, #2
 8008c76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c7e:	f04f 0c00 	mov.w	ip, #0
 8008c82:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c86:	4666      	mov	r6, ip
 8008c88:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c90:	f1be 0f09 	cmp.w	lr, #9
 8008c94:	d816      	bhi.n	8008cc4 <_strtol_l.constprop.0+0xa4>
 8008c96:	4674      	mov	r4, lr
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	dd24      	ble.n	8008ce6 <_strtol_l.constprop.0+0xc6>
 8008c9c:	f1bc 0f00 	cmp.w	ip, #0
 8008ca0:	db1e      	blt.n	8008ce0 <_strtol_l.constprop.0+0xc0>
 8008ca2:	45b1      	cmp	r9, r6
 8008ca4:	d31c      	bcc.n	8008ce0 <_strtol_l.constprop.0+0xc0>
 8008ca6:	d101      	bne.n	8008cac <_strtol_l.constprop.0+0x8c>
 8008ca8:	45a2      	cmp	sl, r4
 8008caa:	db19      	blt.n	8008ce0 <_strtol_l.constprop.0+0xc0>
 8008cac:	fb06 4603 	mla	r6, r6, r3, r4
 8008cb0:	f04f 0c01 	mov.w	ip, #1
 8008cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cb8:	e7e8      	b.n	8008c8c <_strtol_l.constprop.0+0x6c>
 8008cba:	2c2b      	cmp	r4, #43	; 0x2b
 8008cbc:	bf04      	itt	eq
 8008cbe:	782c      	ldrbeq	r4, [r5, #0]
 8008cc0:	1cb5      	addeq	r5, r6, #2
 8008cc2:	e7ca      	b.n	8008c5a <_strtol_l.constprop.0+0x3a>
 8008cc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008cc8:	f1be 0f19 	cmp.w	lr, #25
 8008ccc:	d801      	bhi.n	8008cd2 <_strtol_l.constprop.0+0xb2>
 8008cce:	3c37      	subs	r4, #55	; 0x37
 8008cd0:	e7e2      	b.n	8008c98 <_strtol_l.constprop.0+0x78>
 8008cd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008cd6:	f1be 0f19 	cmp.w	lr, #25
 8008cda:	d804      	bhi.n	8008ce6 <_strtol_l.constprop.0+0xc6>
 8008cdc:	3c57      	subs	r4, #87	; 0x57
 8008cde:	e7db      	b.n	8008c98 <_strtol_l.constprop.0+0x78>
 8008ce0:	f04f 3cff 	mov.w	ip, #4294967295
 8008ce4:	e7e6      	b.n	8008cb4 <_strtol_l.constprop.0+0x94>
 8008ce6:	f1bc 0f00 	cmp.w	ip, #0
 8008cea:	da05      	bge.n	8008cf8 <_strtol_l.constprop.0+0xd8>
 8008cec:	2322      	movs	r3, #34	; 0x22
 8008cee:	6003      	str	r3, [r0, #0]
 8008cf0:	4646      	mov	r6, r8
 8008cf2:	b942      	cbnz	r2, 8008d06 <_strtol_l.constprop.0+0xe6>
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	e79e      	b.n	8008c36 <_strtol_l.constprop.0+0x16>
 8008cf8:	b107      	cbz	r7, 8008cfc <_strtol_l.constprop.0+0xdc>
 8008cfa:	4276      	negs	r6, r6
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	d0f9      	beq.n	8008cf4 <_strtol_l.constprop.0+0xd4>
 8008d00:	f1bc 0f00 	cmp.w	ip, #0
 8008d04:	d000      	beq.n	8008d08 <_strtol_l.constprop.0+0xe8>
 8008d06:	1e69      	subs	r1, r5, #1
 8008d08:	6011      	str	r1, [r2, #0]
 8008d0a:	e7f3      	b.n	8008cf4 <_strtol_l.constprop.0+0xd4>
 8008d0c:	2430      	movs	r4, #48	; 0x30
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1b1      	bne.n	8008c76 <_strtol_l.constprop.0+0x56>
 8008d12:	2308      	movs	r3, #8
 8008d14:	e7af      	b.n	8008c76 <_strtol_l.constprop.0+0x56>
 8008d16:	2c30      	cmp	r4, #48	; 0x30
 8008d18:	d0a5      	beq.n	8008c66 <_strtol_l.constprop.0+0x46>
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	e7ab      	b.n	8008c76 <_strtol_l.constprop.0+0x56>
 8008d1e:	bf00      	nop
 8008d20:	0800b2e5 	.word	0x0800b2e5

08008d24 <strtol>:
 8008d24:	4613      	mov	r3, r2
 8008d26:	460a      	mov	r2, r1
 8008d28:	4601      	mov	r1, r0
 8008d2a:	4802      	ldr	r0, [pc, #8]	; (8008d34 <strtol+0x10>)
 8008d2c:	6800      	ldr	r0, [r0, #0]
 8008d2e:	f7ff bf77 	b.w	8008c20 <_strtol_l.constprop.0>
 8008d32:	bf00      	nop
 8008d34:	20000018 	.word	0x20000018

08008d38 <quorem>:
 8008d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	6903      	ldr	r3, [r0, #16]
 8008d3e:	690c      	ldr	r4, [r1, #16]
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	4607      	mov	r7, r0
 8008d44:	f2c0 8081 	blt.w	8008e4a <quorem+0x112>
 8008d48:	3c01      	subs	r4, #1
 8008d4a:	f101 0814 	add.w	r8, r1, #20
 8008d4e:	f100 0514 	add.w	r5, r0, #20
 8008d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d60:	3301      	adds	r3, #1
 8008d62:	429a      	cmp	r2, r3
 8008d64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d70:	d331      	bcc.n	8008dd6 <quorem+0x9e>
 8008d72:	f04f 0e00 	mov.w	lr, #0
 8008d76:	4640      	mov	r0, r8
 8008d78:	46ac      	mov	ip, r5
 8008d7a:	46f2      	mov	sl, lr
 8008d7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d80:	b293      	uxth	r3, r2
 8008d82:	fb06 e303 	mla	r3, r6, r3, lr
 8008d86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d90:	f8dc a000 	ldr.w	sl, [ip]
 8008d94:	0c12      	lsrs	r2, r2, #16
 8008d96:	fa13 f38a 	uxtah	r3, r3, sl
 8008d9a:	fb06 e202 	mla	r2, r6, r2, lr
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008da6:	b292      	uxth	r2, r2
 8008da8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008db0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008db4:	4581      	cmp	r9, r0
 8008db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dba:	f84c 3b04 	str.w	r3, [ip], #4
 8008dbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008dc2:	d2db      	bcs.n	8008d7c <quorem+0x44>
 8008dc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008dc8:	b92b      	cbnz	r3, 8008dd6 <quorem+0x9e>
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	429d      	cmp	r5, r3
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	d32e      	bcc.n	8008e32 <quorem+0xfa>
 8008dd4:	613c      	str	r4, [r7, #16]
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	f001 f8c4 	bl	8009f64 <__mcmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	db24      	blt.n	8008e2a <quorem+0xf2>
 8008de0:	3601      	adds	r6, #1
 8008de2:	4628      	mov	r0, r5
 8008de4:	f04f 0c00 	mov.w	ip, #0
 8008de8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008dec:	f8d0 e000 	ldr.w	lr, [r0]
 8008df0:	b293      	uxth	r3, r2
 8008df2:	ebac 0303 	sub.w	r3, ip, r3
 8008df6:	0c12      	lsrs	r2, r2, #16
 8008df8:	fa13 f38e 	uxtah	r3, r3, lr
 8008dfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e0a:	45c1      	cmp	r9, r8
 8008e0c:	f840 3b04 	str.w	r3, [r0], #4
 8008e10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e14:	d2e8      	bcs.n	8008de8 <quorem+0xb0>
 8008e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e1e:	b922      	cbnz	r2, 8008e2a <quorem+0xf2>
 8008e20:	3b04      	subs	r3, #4
 8008e22:	429d      	cmp	r5, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	d30a      	bcc.n	8008e3e <quorem+0x106>
 8008e28:	613c      	str	r4, [r7, #16]
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	b003      	add	sp, #12
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	d1cc      	bne.n	8008dd4 <quorem+0x9c>
 8008e3a:	3c01      	subs	r4, #1
 8008e3c:	e7c7      	b.n	8008dce <quorem+0x96>
 8008e3e:	6812      	ldr	r2, [r2, #0]
 8008e40:	3b04      	subs	r3, #4
 8008e42:	2a00      	cmp	r2, #0
 8008e44:	d1f0      	bne.n	8008e28 <quorem+0xf0>
 8008e46:	3c01      	subs	r4, #1
 8008e48:	e7eb      	b.n	8008e22 <quorem+0xea>
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e7ee      	b.n	8008e2c <quorem+0xf4>
	...

08008e50 <_dtoa_r>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b04 	vpush	{d8-d9}
 8008e58:	ec57 6b10 	vmov	r6, r7, d0
 8008e5c:	b093      	sub	sp, #76	; 0x4c
 8008e5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e64:	9106      	str	r1, [sp, #24]
 8008e66:	ee10 aa10 	vmov	sl, s0
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e70:	46bb      	mov	fp, r7
 8008e72:	b975      	cbnz	r5, 8008e92 <_dtoa_r+0x42>
 8008e74:	2010      	movs	r0, #16
 8008e76:	f000 fddd 	bl	8009a34 <malloc>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e7e:	b920      	cbnz	r0, 8008e8a <_dtoa_r+0x3a>
 8008e80:	4ba7      	ldr	r3, [pc, #668]	; (8009120 <_dtoa_r+0x2d0>)
 8008e82:	21ea      	movs	r1, #234	; 0xea
 8008e84:	48a7      	ldr	r0, [pc, #668]	; (8009124 <_dtoa_r+0x2d4>)
 8008e86:	f001 fbd1 	bl	800a62c <__assert_func>
 8008e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e8e:	6005      	str	r5, [r0, #0]
 8008e90:	60c5      	str	r5, [r0, #12]
 8008e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e94:	6819      	ldr	r1, [r3, #0]
 8008e96:	b151      	cbz	r1, 8008eae <_dtoa_r+0x5e>
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	604a      	str	r2, [r1, #4]
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4093      	lsls	r3, r2
 8008ea0:	608b      	str	r3, [r1, #8]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 fe1c 	bl	8009ae0 <_Bfree>
 8008ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	1e3b      	subs	r3, r7, #0
 8008eb0:	bfaa      	itet	ge
 8008eb2:	2300      	movge	r3, #0
 8008eb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008eb8:	f8c8 3000 	strge.w	r3, [r8]
 8008ebc:	4b9a      	ldr	r3, [pc, #616]	; (8009128 <_dtoa_r+0x2d8>)
 8008ebe:	bfbc      	itt	lt
 8008ec0:	2201      	movlt	r2, #1
 8008ec2:	f8c8 2000 	strlt.w	r2, [r8]
 8008ec6:	ea33 030b 	bics.w	r3, r3, fp
 8008eca:	d11b      	bne.n	8008f04 <_dtoa_r+0xb4>
 8008ecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ece:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ed8:	4333      	orrs	r3, r6
 8008eda:	f000 8592 	beq.w	8009a02 <_dtoa_r+0xbb2>
 8008ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee0:	b963      	cbnz	r3, 8008efc <_dtoa_r+0xac>
 8008ee2:	4b92      	ldr	r3, [pc, #584]	; (800912c <_dtoa_r+0x2dc>)
 8008ee4:	e022      	b.n	8008f2c <_dtoa_r+0xdc>
 8008ee6:	4b92      	ldr	r3, [pc, #584]	; (8009130 <_dtoa_r+0x2e0>)
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	3308      	adds	r3, #8
 8008eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	9801      	ldr	r0, [sp, #4]
 8008ef2:	b013      	add	sp, #76	; 0x4c
 8008ef4:	ecbd 8b04 	vpop	{d8-d9}
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	4b8b      	ldr	r3, [pc, #556]	; (800912c <_dtoa_r+0x2dc>)
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	3303      	adds	r3, #3
 8008f02:	e7f3      	b.n	8008eec <_dtoa_r+0x9c>
 8008f04:	2200      	movs	r2, #0
 8008f06:	2300      	movs	r3, #0
 8008f08:	4650      	mov	r0, sl
 8008f0a:	4659      	mov	r1, fp
 8008f0c:	f7f7 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f10:	ec4b ab19 	vmov	d9, sl, fp
 8008f14:	4680      	mov	r8, r0
 8008f16:	b158      	cbz	r0, 8008f30 <_dtoa_r+0xe0>
 8008f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 856b 	beq.w	80099fc <_dtoa_r+0xbac>
 8008f26:	4883      	ldr	r0, [pc, #524]	; (8009134 <_dtoa_r+0x2e4>)
 8008f28:	6018      	str	r0, [r3, #0]
 8008f2a:	1e43      	subs	r3, r0, #1
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	e7df      	b.n	8008ef0 <_dtoa_r+0xa0>
 8008f30:	ec4b ab10 	vmov	d0, sl, fp
 8008f34:	aa10      	add	r2, sp, #64	; 0x40
 8008f36:	a911      	add	r1, sp, #68	; 0x44
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 f8b9 	bl	800a0b0 <__d2b>
 8008f3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f42:	ee08 0a10 	vmov	s16, r0
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	f000 8084 	beq.w	8009054 <_dtoa_r+0x204>
 8008f4c:	ee19 3a90 	vmov	r3, s19
 8008f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f58:	4656      	mov	r6, sl
 8008f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f66:	4b74      	ldr	r3, [pc, #464]	; (8009138 <_dtoa_r+0x2e8>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 f993 	bl	8000298 <__aeabi_dsub>
 8008f72:	a365      	add	r3, pc, #404	; (adr r3, 8009108 <_dtoa_r+0x2b8>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 fb46 	bl	8000608 <__aeabi_dmul>
 8008f7c:	a364      	add	r3, pc, #400	; (adr r3, 8009110 <_dtoa_r+0x2c0>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 f98b 	bl	800029c <__adddf3>
 8008f86:	4606      	mov	r6, r0
 8008f88:	4628      	mov	r0, r5
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	f7f7 fad2 	bl	8000534 <__aeabi_i2d>
 8008f90:	a361      	add	r3, pc, #388	; (adr r3, 8009118 <_dtoa_r+0x2c8>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 fb37 	bl	8000608 <__aeabi_dmul>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	f7f7 f97b 	bl	800029c <__adddf3>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	460f      	mov	r7, r1
 8008faa:	f7f7 fddd 	bl	8000b68 <__aeabi_d2iz>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	9000      	str	r0, [sp, #0]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fd98 	bl	8000aec <__aeabi_dcmplt>
 8008fbc:	b150      	cbz	r0, 8008fd4 <_dtoa_r+0x184>
 8008fbe:	9800      	ldr	r0, [sp, #0]
 8008fc0:	f7f7 fab8 	bl	8000534 <__aeabi_i2d>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	f7f7 fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fcc:	b910      	cbnz	r0, 8008fd4 <_dtoa_r+0x184>
 8008fce:	9b00      	ldr	r3, [sp, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	2b16      	cmp	r3, #22
 8008fd8:	d85a      	bhi.n	8009090 <_dtoa_r+0x240>
 8008fda:	9a00      	ldr	r2, [sp, #0]
 8008fdc:	4b57      	ldr	r3, [pc, #348]	; (800913c <_dtoa_r+0x2ec>)
 8008fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	ec51 0b19 	vmov	r0, r1, d9
 8008fea:	f7f7 fd7f 	bl	8000aec <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d050      	beq.n	8009094 <_dtoa_r+0x244>
 8008ff2:	9b00      	ldr	r3, [sp, #0]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ffe:	1b5d      	subs	r5, r3, r5
 8009000:	1e6b      	subs	r3, r5, #1
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	bf45      	ittet	mi
 8009006:	f1c5 0301 	rsbmi	r3, r5, #1
 800900a:	9304      	strmi	r3, [sp, #16]
 800900c:	2300      	movpl	r3, #0
 800900e:	2300      	movmi	r3, #0
 8009010:	bf4c      	ite	mi
 8009012:	9305      	strmi	r3, [sp, #20]
 8009014:	9304      	strpl	r3, [sp, #16]
 8009016:	9b00      	ldr	r3, [sp, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db3d      	blt.n	8009098 <_dtoa_r+0x248>
 800901c:	9b05      	ldr	r3, [sp, #20]
 800901e:	9a00      	ldr	r2, [sp, #0]
 8009020:	920a      	str	r2, [sp, #40]	; 0x28
 8009022:	4413      	add	r3, r2
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	2300      	movs	r3, #0
 8009028:	9307      	str	r3, [sp, #28]
 800902a:	9b06      	ldr	r3, [sp, #24]
 800902c:	2b09      	cmp	r3, #9
 800902e:	f200 8089 	bhi.w	8009144 <_dtoa_r+0x2f4>
 8009032:	2b05      	cmp	r3, #5
 8009034:	bfc4      	itt	gt
 8009036:	3b04      	subgt	r3, #4
 8009038:	9306      	strgt	r3, [sp, #24]
 800903a:	9b06      	ldr	r3, [sp, #24]
 800903c:	f1a3 0302 	sub.w	r3, r3, #2
 8009040:	bfcc      	ite	gt
 8009042:	2500      	movgt	r5, #0
 8009044:	2501      	movle	r5, #1
 8009046:	2b03      	cmp	r3, #3
 8009048:	f200 8087 	bhi.w	800915a <_dtoa_r+0x30a>
 800904c:	e8df f003 	tbb	[pc, r3]
 8009050:	59383a2d 	.word	0x59383a2d
 8009054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009058:	441d      	add	r5, r3
 800905a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800905e:	2b20      	cmp	r3, #32
 8009060:	bfc1      	itttt	gt
 8009062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800906a:	fa0b f303 	lslgt.w	r3, fp, r3
 800906e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009072:	bfda      	itte	le
 8009074:	f1c3 0320 	rsble	r3, r3, #32
 8009078:	fa06 f003 	lslle.w	r0, r6, r3
 800907c:	4318      	orrgt	r0, r3
 800907e:	f7f7 fa49 	bl	8000514 <__aeabi_ui2d>
 8009082:	2301      	movs	r3, #1
 8009084:	4606      	mov	r6, r0
 8009086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800908a:	3d01      	subs	r5, #1
 800908c:	930e      	str	r3, [sp, #56]	; 0x38
 800908e:	e76a      	b.n	8008f66 <_dtoa_r+0x116>
 8009090:	2301      	movs	r3, #1
 8009092:	e7b2      	b.n	8008ffa <_dtoa_r+0x1aa>
 8009094:	900b      	str	r0, [sp, #44]	; 0x2c
 8009096:	e7b1      	b.n	8008ffc <_dtoa_r+0x1ac>
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	9a00      	ldr	r2, [sp, #0]
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	4253      	negs	r3, r2
 80090a2:	9307      	str	r3, [sp, #28]
 80090a4:	2300      	movs	r3, #0
 80090a6:	930a      	str	r3, [sp, #40]	; 0x28
 80090a8:	e7bf      	b.n	800902a <_dtoa_r+0x1da>
 80090aa:	2300      	movs	r3, #0
 80090ac:	9308      	str	r3, [sp, #32]
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dc55      	bgt.n	8009160 <_dtoa_r+0x310>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090ba:	461a      	mov	r2, r3
 80090bc:	9209      	str	r2, [sp, #36]	; 0x24
 80090be:	e00c      	b.n	80090da <_dtoa_r+0x28a>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7f3      	b.n	80090ac <_dtoa_r+0x25c>
 80090c4:	2300      	movs	r3, #0
 80090c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c8:	9308      	str	r3, [sp, #32]
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	4413      	add	r3, r2
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	3301      	adds	r3, #1
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	9303      	str	r3, [sp, #12]
 80090d6:	bfb8      	it	lt
 80090d8:	2301      	movlt	r3, #1
 80090da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090dc:	2200      	movs	r2, #0
 80090de:	6042      	str	r2, [r0, #4]
 80090e0:	2204      	movs	r2, #4
 80090e2:	f102 0614 	add.w	r6, r2, #20
 80090e6:	429e      	cmp	r6, r3
 80090e8:	6841      	ldr	r1, [r0, #4]
 80090ea:	d93d      	bls.n	8009168 <_dtoa_r+0x318>
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 fcb7 	bl	8009a60 <_Balloc>
 80090f2:	9001      	str	r0, [sp, #4]
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d13b      	bne.n	8009170 <_dtoa_r+0x320>
 80090f8:	4b11      	ldr	r3, [pc, #68]	; (8009140 <_dtoa_r+0x2f0>)
 80090fa:	4602      	mov	r2, r0
 80090fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009100:	e6c0      	b.n	8008e84 <_dtoa_r+0x34>
 8009102:	2301      	movs	r3, #1
 8009104:	e7df      	b.n	80090c6 <_dtoa_r+0x276>
 8009106:	bf00      	nop
 8009108:	636f4361 	.word	0x636f4361
 800910c:	3fd287a7 	.word	0x3fd287a7
 8009110:	8b60c8b3 	.word	0x8b60c8b3
 8009114:	3fc68a28 	.word	0x3fc68a28
 8009118:	509f79fb 	.word	0x509f79fb
 800911c:	3fd34413 	.word	0x3fd34413
 8009120:	0800b3f2 	.word	0x0800b3f2
 8009124:	0800b409 	.word	0x0800b409
 8009128:	7ff00000 	.word	0x7ff00000
 800912c:	0800b3ee 	.word	0x0800b3ee
 8009130:	0800b3e5 	.word	0x0800b3e5
 8009134:	0800b2c1 	.word	0x0800b2c1
 8009138:	3ff80000 	.word	0x3ff80000
 800913c:	0800b500 	.word	0x0800b500
 8009140:	0800b464 	.word	0x0800b464
 8009144:	2501      	movs	r5, #1
 8009146:	2300      	movs	r3, #0
 8009148:	9306      	str	r3, [sp, #24]
 800914a:	9508      	str	r5, [sp, #32]
 800914c:	f04f 33ff 	mov.w	r3, #4294967295
 8009150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	2312      	movs	r3, #18
 8009158:	e7b0      	b.n	80090bc <_dtoa_r+0x26c>
 800915a:	2301      	movs	r3, #1
 800915c:	9308      	str	r3, [sp, #32]
 800915e:	e7f5      	b.n	800914c <_dtoa_r+0x2fc>
 8009160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009166:	e7b8      	b.n	80090da <_dtoa_r+0x28a>
 8009168:	3101      	adds	r1, #1
 800916a:	6041      	str	r1, [r0, #4]
 800916c:	0052      	lsls	r2, r2, #1
 800916e:	e7b8      	b.n	80090e2 <_dtoa_r+0x292>
 8009170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009172:	9a01      	ldr	r2, [sp, #4]
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	2b0e      	cmp	r3, #14
 800917a:	f200 809d 	bhi.w	80092b8 <_dtoa_r+0x468>
 800917e:	2d00      	cmp	r5, #0
 8009180:	f000 809a 	beq.w	80092b8 <_dtoa_r+0x468>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd32      	ble.n	80091f0 <_dtoa_r+0x3a0>
 800918a:	4ab7      	ldr	r2, [pc, #732]	; (8009468 <_dtoa_r+0x618>)
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009198:	9b00      	ldr	r3, [sp, #0]
 800919a:	05d8      	lsls	r0, r3, #23
 800919c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091a0:	d516      	bpl.n	80091d0 <_dtoa_r+0x380>
 80091a2:	4bb2      	ldr	r3, [pc, #712]	; (800946c <_dtoa_r+0x61c>)
 80091a4:	ec51 0b19 	vmov	r0, r1, d9
 80091a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091ac:	f7f7 fb56 	bl	800085c <__aeabi_ddiv>
 80091b0:	f007 070f 	and.w	r7, r7, #15
 80091b4:	4682      	mov	sl, r0
 80091b6:	468b      	mov	fp, r1
 80091b8:	2503      	movs	r5, #3
 80091ba:	4eac      	ldr	r6, [pc, #688]	; (800946c <_dtoa_r+0x61c>)
 80091bc:	b957      	cbnz	r7, 80091d4 <_dtoa_r+0x384>
 80091be:	4642      	mov	r2, r8
 80091c0:	464b      	mov	r3, r9
 80091c2:	4650      	mov	r0, sl
 80091c4:	4659      	mov	r1, fp
 80091c6:	f7f7 fb49 	bl	800085c <__aeabi_ddiv>
 80091ca:	4682      	mov	sl, r0
 80091cc:	468b      	mov	fp, r1
 80091ce:	e028      	b.n	8009222 <_dtoa_r+0x3d2>
 80091d0:	2502      	movs	r5, #2
 80091d2:	e7f2      	b.n	80091ba <_dtoa_r+0x36a>
 80091d4:	07f9      	lsls	r1, r7, #31
 80091d6:	d508      	bpl.n	80091ea <_dtoa_r+0x39a>
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091e0:	f7f7 fa12 	bl	8000608 <__aeabi_dmul>
 80091e4:	3501      	adds	r5, #1
 80091e6:	4680      	mov	r8, r0
 80091e8:	4689      	mov	r9, r1
 80091ea:	107f      	asrs	r7, r7, #1
 80091ec:	3608      	adds	r6, #8
 80091ee:	e7e5      	b.n	80091bc <_dtoa_r+0x36c>
 80091f0:	f000 809b 	beq.w	800932a <_dtoa_r+0x4da>
 80091f4:	9b00      	ldr	r3, [sp, #0]
 80091f6:	4f9d      	ldr	r7, [pc, #628]	; (800946c <_dtoa_r+0x61c>)
 80091f8:	425e      	negs	r6, r3
 80091fa:	4b9b      	ldr	r3, [pc, #620]	; (8009468 <_dtoa_r+0x618>)
 80091fc:	f006 020f 	and.w	r2, r6, #15
 8009200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	ec51 0b19 	vmov	r0, r1, d9
 800920c:	f7f7 f9fc 	bl	8000608 <__aeabi_dmul>
 8009210:	1136      	asrs	r6, r6, #4
 8009212:	4682      	mov	sl, r0
 8009214:	468b      	mov	fp, r1
 8009216:	2300      	movs	r3, #0
 8009218:	2502      	movs	r5, #2
 800921a:	2e00      	cmp	r6, #0
 800921c:	d17a      	bne.n	8009314 <_dtoa_r+0x4c4>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1d3      	bne.n	80091ca <_dtoa_r+0x37a>
 8009222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 8082 	beq.w	800932e <_dtoa_r+0x4de>
 800922a:	4b91      	ldr	r3, [pc, #580]	; (8009470 <_dtoa_r+0x620>)
 800922c:	2200      	movs	r2, #0
 800922e:	4650      	mov	r0, sl
 8009230:	4659      	mov	r1, fp
 8009232:	f7f7 fc5b 	bl	8000aec <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	d079      	beq.n	800932e <_dtoa_r+0x4de>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d076      	beq.n	800932e <_dtoa_r+0x4de>
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	dd36      	ble.n	80092b4 <_dtoa_r+0x464>
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	4650      	mov	r0, sl
 800924a:	4659      	mov	r1, fp
 800924c:	1e5f      	subs	r7, r3, #1
 800924e:	2200      	movs	r2, #0
 8009250:	4b88      	ldr	r3, [pc, #544]	; (8009474 <_dtoa_r+0x624>)
 8009252:	f7f7 f9d9 	bl	8000608 <__aeabi_dmul>
 8009256:	9e02      	ldr	r6, [sp, #8]
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	3501      	adds	r5, #1
 800925e:	4628      	mov	r0, r5
 8009260:	f7f7 f968 	bl	8000534 <__aeabi_i2d>
 8009264:	4652      	mov	r2, sl
 8009266:	465b      	mov	r3, fp
 8009268:	f7f7 f9ce 	bl	8000608 <__aeabi_dmul>
 800926c:	4b82      	ldr	r3, [pc, #520]	; (8009478 <_dtoa_r+0x628>)
 800926e:	2200      	movs	r2, #0
 8009270:	f7f7 f814 	bl	800029c <__adddf3>
 8009274:	46d0      	mov	r8, sl
 8009276:	46d9      	mov	r9, fp
 8009278:	4682      	mov	sl, r0
 800927a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800927e:	2e00      	cmp	r6, #0
 8009280:	d158      	bne.n	8009334 <_dtoa_r+0x4e4>
 8009282:	4b7e      	ldr	r3, [pc, #504]	; (800947c <_dtoa_r+0x62c>)
 8009284:	2200      	movs	r2, #0
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f7 f805 	bl	8000298 <__aeabi_dsub>
 800928e:	4652      	mov	r2, sl
 8009290:	465b      	mov	r3, fp
 8009292:	4680      	mov	r8, r0
 8009294:	4689      	mov	r9, r1
 8009296:	f7f7 fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800929a:	2800      	cmp	r0, #0
 800929c:	f040 8295 	bne.w	80097ca <_dtoa_r+0x97a>
 80092a0:	4652      	mov	r2, sl
 80092a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	f7f7 fc1f 	bl	8000aec <__aeabi_dcmplt>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f040 8289 	bne.w	80097c6 <_dtoa_r+0x976>
 80092b4:	ec5b ab19 	vmov	sl, fp, d9
 80092b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f2c0 8148 	blt.w	8009550 <_dtoa_r+0x700>
 80092c0:	9a00      	ldr	r2, [sp, #0]
 80092c2:	2a0e      	cmp	r2, #14
 80092c4:	f300 8144 	bgt.w	8009550 <_dtoa_r+0x700>
 80092c8:	4b67      	ldr	r3, [pc, #412]	; (8009468 <_dtoa_r+0x618>)
 80092ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f280 80d5 	bge.w	8009484 <_dtoa_r+0x634>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f300 80d1 	bgt.w	8009484 <_dtoa_r+0x634>
 80092e2:	f040 826f 	bne.w	80097c4 <_dtoa_r+0x974>
 80092e6:	4b65      	ldr	r3, [pc, #404]	; (800947c <_dtoa_r+0x62c>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f7 f98b 	bl	8000608 <__aeabi_dmul>
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	f7f7 fc0d 	bl	8000b14 <__aeabi_dcmpge>
 80092fa:	9e03      	ldr	r6, [sp, #12]
 80092fc:	4637      	mov	r7, r6
 80092fe:	2800      	cmp	r0, #0
 8009300:	f040 8245 	bne.w	800978e <_dtoa_r+0x93e>
 8009304:	9d01      	ldr	r5, [sp, #4]
 8009306:	2331      	movs	r3, #49	; 0x31
 8009308:	f805 3b01 	strb.w	r3, [r5], #1
 800930c:	9b00      	ldr	r3, [sp, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	e240      	b.n	8009796 <_dtoa_r+0x946>
 8009314:	07f2      	lsls	r2, r6, #31
 8009316:	d505      	bpl.n	8009324 <_dtoa_r+0x4d4>
 8009318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800931c:	f7f7 f974 	bl	8000608 <__aeabi_dmul>
 8009320:	3501      	adds	r5, #1
 8009322:	2301      	movs	r3, #1
 8009324:	1076      	asrs	r6, r6, #1
 8009326:	3708      	adds	r7, #8
 8009328:	e777      	b.n	800921a <_dtoa_r+0x3ca>
 800932a:	2502      	movs	r5, #2
 800932c:	e779      	b.n	8009222 <_dtoa_r+0x3d2>
 800932e:	9f00      	ldr	r7, [sp, #0]
 8009330:	9e03      	ldr	r6, [sp, #12]
 8009332:	e794      	b.n	800925e <_dtoa_r+0x40e>
 8009334:	9901      	ldr	r1, [sp, #4]
 8009336:	4b4c      	ldr	r3, [pc, #304]	; (8009468 <_dtoa_r+0x618>)
 8009338:	4431      	add	r1, r6
 800933a:	910d      	str	r1, [sp, #52]	; 0x34
 800933c:	9908      	ldr	r1, [sp, #32]
 800933e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009346:	2900      	cmp	r1, #0
 8009348:	d043      	beq.n	80093d2 <_dtoa_r+0x582>
 800934a:	494d      	ldr	r1, [pc, #308]	; (8009480 <_dtoa_r+0x630>)
 800934c:	2000      	movs	r0, #0
 800934e:	f7f7 fa85 	bl	800085c <__aeabi_ddiv>
 8009352:	4652      	mov	r2, sl
 8009354:	465b      	mov	r3, fp
 8009356:	f7f6 ff9f 	bl	8000298 <__aeabi_dsub>
 800935a:	9d01      	ldr	r5, [sp, #4]
 800935c:	4682      	mov	sl, r0
 800935e:	468b      	mov	fp, r1
 8009360:	4649      	mov	r1, r9
 8009362:	4640      	mov	r0, r8
 8009364:	f7f7 fc00 	bl	8000b68 <__aeabi_d2iz>
 8009368:	4606      	mov	r6, r0
 800936a:	f7f7 f8e3 	bl	8000534 <__aeabi_i2d>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4640      	mov	r0, r8
 8009374:	4649      	mov	r1, r9
 8009376:	f7f6 ff8f 	bl	8000298 <__aeabi_dsub>
 800937a:	3630      	adds	r6, #48	; 0x30
 800937c:	f805 6b01 	strb.w	r6, [r5], #1
 8009380:	4652      	mov	r2, sl
 8009382:	465b      	mov	r3, fp
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	f7f7 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800938c:	2800      	cmp	r0, #0
 800938e:	d163      	bne.n	8009458 <_dtoa_r+0x608>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	4936      	ldr	r1, [pc, #216]	; (8009470 <_dtoa_r+0x620>)
 8009396:	2000      	movs	r0, #0
 8009398:	f7f6 ff7e 	bl	8000298 <__aeabi_dsub>
 800939c:	4652      	mov	r2, sl
 800939e:	465b      	mov	r3, fp
 80093a0:	f7f7 fba4 	bl	8000aec <__aeabi_dcmplt>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f040 80b5 	bne.w	8009514 <_dtoa_r+0x6c4>
 80093aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ac:	429d      	cmp	r5, r3
 80093ae:	d081      	beq.n	80092b4 <_dtoa_r+0x464>
 80093b0:	4b30      	ldr	r3, [pc, #192]	; (8009474 <_dtoa_r+0x624>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	4650      	mov	r0, sl
 80093b6:	4659      	mov	r1, fp
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	4b2d      	ldr	r3, [pc, #180]	; (8009474 <_dtoa_r+0x624>)
 80093be:	4682      	mov	sl, r0
 80093c0:	468b      	mov	fp, r1
 80093c2:	4640      	mov	r0, r8
 80093c4:	4649      	mov	r1, r9
 80093c6:	2200      	movs	r2, #0
 80093c8:	f7f7 f91e 	bl	8000608 <__aeabi_dmul>
 80093cc:	4680      	mov	r8, r0
 80093ce:	4689      	mov	r9, r1
 80093d0:	e7c6      	b.n	8009360 <_dtoa_r+0x510>
 80093d2:	4650      	mov	r0, sl
 80093d4:	4659      	mov	r1, fp
 80093d6:	f7f7 f917 	bl	8000608 <__aeabi_dmul>
 80093da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093dc:	9d01      	ldr	r5, [sp, #4]
 80093de:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e0:	4682      	mov	sl, r0
 80093e2:	468b      	mov	fp, r1
 80093e4:	4649      	mov	r1, r9
 80093e6:	4640      	mov	r0, r8
 80093e8:	f7f7 fbbe 	bl	8000b68 <__aeabi_d2iz>
 80093ec:	4606      	mov	r6, r0
 80093ee:	f7f7 f8a1 	bl	8000534 <__aeabi_i2d>
 80093f2:	3630      	adds	r6, #48	; 0x30
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f6 ff4c 	bl	8000298 <__aeabi_dsub>
 8009400:	f805 6b01 	strb.w	r6, [r5], #1
 8009404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009406:	429d      	cmp	r5, r3
 8009408:	4680      	mov	r8, r0
 800940a:	4689      	mov	r9, r1
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	d124      	bne.n	800945c <_dtoa_r+0x60c>
 8009412:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <_dtoa_r+0x630>)
 8009414:	4650      	mov	r0, sl
 8009416:	4659      	mov	r1, fp
 8009418:	f7f6 ff40 	bl	800029c <__adddf3>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4640      	mov	r0, r8
 8009422:	4649      	mov	r1, r9
 8009424:	f7f7 fb80 	bl	8000b28 <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	d173      	bne.n	8009514 <_dtoa_r+0x6c4>
 800942c:	4652      	mov	r2, sl
 800942e:	465b      	mov	r3, fp
 8009430:	4913      	ldr	r1, [pc, #76]	; (8009480 <_dtoa_r+0x630>)
 8009432:	2000      	movs	r0, #0
 8009434:	f7f6 ff30 	bl	8000298 <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4640      	mov	r0, r8
 800943e:	4649      	mov	r1, r9
 8009440:	f7f7 fb54 	bl	8000aec <__aeabi_dcmplt>
 8009444:	2800      	cmp	r0, #0
 8009446:	f43f af35 	beq.w	80092b4 <_dtoa_r+0x464>
 800944a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800944c:	1e6b      	subs	r3, r5, #1
 800944e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009454:	2b30      	cmp	r3, #48	; 0x30
 8009456:	d0f8      	beq.n	800944a <_dtoa_r+0x5fa>
 8009458:	9700      	str	r7, [sp, #0]
 800945a:	e049      	b.n	80094f0 <_dtoa_r+0x6a0>
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <_dtoa_r+0x624>)
 800945e:	f7f7 f8d3 	bl	8000608 <__aeabi_dmul>
 8009462:	4680      	mov	r8, r0
 8009464:	4689      	mov	r9, r1
 8009466:	e7bd      	b.n	80093e4 <_dtoa_r+0x594>
 8009468:	0800b500 	.word	0x0800b500
 800946c:	0800b4d8 	.word	0x0800b4d8
 8009470:	3ff00000 	.word	0x3ff00000
 8009474:	40240000 	.word	0x40240000
 8009478:	401c0000 	.word	0x401c0000
 800947c:	40140000 	.word	0x40140000
 8009480:	3fe00000 	.word	0x3fe00000
 8009484:	9d01      	ldr	r5, [sp, #4]
 8009486:	4656      	mov	r6, sl
 8009488:	465f      	mov	r7, fp
 800948a:	4642      	mov	r2, r8
 800948c:	464b      	mov	r3, r9
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f7 f9e3 	bl	800085c <__aeabi_ddiv>
 8009496:	f7f7 fb67 	bl	8000b68 <__aeabi_d2iz>
 800949a:	4682      	mov	sl, r0
 800949c:	f7f7 f84a 	bl	8000534 <__aeabi_i2d>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	f7f7 f8b0 	bl	8000608 <__aeabi_dmul>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4630      	mov	r0, r6
 80094ae:	4639      	mov	r1, r7
 80094b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094b4:	f7f6 fef0 	bl	8000298 <__aeabi_dsub>
 80094b8:	f805 6b01 	strb.w	r6, [r5], #1
 80094bc:	9e01      	ldr	r6, [sp, #4]
 80094be:	9f03      	ldr	r7, [sp, #12]
 80094c0:	1bae      	subs	r6, r5, r6
 80094c2:	42b7      	cmp	r7, r6
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	d135      	bne.n	8009536 <_dtoa_r+0x6e6>
 80094ca:	f7f6 fee7 	bl	800029c <__adddf3>
 80094ce:	4642      	mov	r2, r8
 80094d0:	464b      	mov	r3, r9
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	f7f7 fb27 	bl	8000b28 <__aeabi_dcmpgt>
 80094da:	b9d0      	cbnz	r0, 8009512 <_dtoa_r+0x6c2>
 80094dc:	4642      	mov	r2, r8
 80094de:	464b      	mov	r3, r9
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80094e8:	b110      	cbz	r0, 80094f0 <_dtoa_r+0x6a0>
 80094ea:	f01a 0f01 	tst.w	sl, #1
 80094ee:	d110      	bne.n	8009512 <_dtoa_r+0x6c2>
 80094f0:	4620      	mov	r0, r4
 80094f2:	ee18 1a10 	vmov	r1, s16
 80094f6:	f000 faf3 	bl	8009ae0 <_Bfree>
 80094fa:	2300      	movs	r3, #0
 80094fc:	9800      	ldr	r0, [sp, #0]
 80094fe:	702b      	strb	r3, [r5, #0]
 8009500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009502:	3001      	adds	r0, #1
 8009504:	6018      	str	r0, [r3, #0]
 8009506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009508:	2b00      	cmp	r3, #0
 800950a:	f43f acf1 	beq.w	8008ef0 <_dtoa_r+0xa0>
 800950e:	601d      	str	r5, [r3, #0]
 8009510:	e4ee      	b.n	8008ef0 <_dtoa_r+0xa0>
 8009512:	9f00      	ldr	r7, [sp, #0]
 8009514:	462b      	mov	r3, r5
 8009516:	461d      	mov	r5, r3
 8009518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800951c:	2a39      	cmp	r2, #57	; 0x39
 800951e:	d106      	bne.n	800952e <_dtoa_r+0x6de>
 8009520:	9a01      	ldr	r2, [sp, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d1f7      	bne.n	8009516 <_dtoa_r+0x6c6>
 8009526:	9901      	ldr	r1, [sp, #4]
 8009528:	2230      	movs	r2, #48	; 0x30
 800952a:	3701      	adds	r7, #1
 800952c:	700a      	strb	r2, [r1, #0]
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	3201      	adds	r2, #1
 8009532:	701a      	strb	r2, [r3, #0]
 8009534:	e790      	b.n	8009458 <_dtoa_r+0x608>
 8009536:	4ba6      	ldr	r3, [pc, #664]	; (80097d0 <_dtoa_r+0x980>)
 8009538:	2200      	movs	r2, #0
 800953a:	f7f7 f865 	bl	8000608 <__aeabi_dmul>
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	f7f7 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800954a:	2800      	cmp	r0, #0
 800954c:	d09d      	beq.n	800948a <_dtoa_r+0x63a>
 800954e:	e7cf      	b.n	80094f0 <_dtoa_r+0x6a0>
 8009550:	9a08      	ldr	r2, [sp, #32]
 8009552:	2a00      	cmp	r2, #0
 8009554:	f000 80d7 	beq.w	8009706 <_dtoa_r+0x8b6>
 8009558:	9a06      	ldr	r2, [sp, #24]
 800955a:	2a01      	cmp	r2, #1
 800955c:	f300 80ba 	bgt.w	80096d4 <_dtoa_r+0x884>
 8009560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009562:	2a00      	cmp	r2, #0
 8009564:	f000 80b2 	beq.w	80096cc <_dtoa_r+0x87c>
 8009568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800956c:	9e07      	ldr	r6, [sp, #28]
 800956e:	9d04      	ldr	r5, [sp, #16]
 8009570:	9a04      	ldr	r2, [sp, #16]
 8009572:	441a      	add	r2, r3
 8009574:	9204      	str	r2, [sp, #16]
 8009576:	9a05      	ldr	r2, [sp, #20]
 8009578:	2101      	movs	r1, #1
 800957a:	441a      	add	r2, r3
 800957c:	4620      	mov	r0, r4
 800957e:	9205      	str	r2, [sp, #20]
 8009580:	f000 fb66 	bl	8009c50 <__i2b>
 8009584:	4607      	mov	r7, r0
 8009586:	2d00      	cmp	r5, #0
 8009588:	dd0c      	ble.n	80095a4 <_dtoa_r+0x754>
 800958a:	9b05      	ldr	r3, [sp, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dd09      	ble.n	80095a4 <_dtoa_r+0x754>
 8009590:	42ab      	cmp	r3, r5
 8009592:	9a04      	ldr	r2, [sp, #16]
 8009594:	bfa8      	it	ge
 8009596:	462b      	movge	r3, r5
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	9204      	str	r2, [sp, #16]
 800959c:	9a05      	ldr	r2, [sp, #20]
 800959e:	1aed      	subs	r5, r5, r3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	b31b      	cbz	r3, 80095f0 <_dtoa_r+0x7a0>
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 80af 	beq.w	800970e <_dtoa_r+0x8be>
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	dd13      	ble.n	80095dc <_dtoa_r+0x78c>
 80095b4:	4639      	mov	r1, r7
 80095b6:	4632      	mov	r2, r6
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 fc09 	bl	8009dd0 <__pow5mult>
 80095be:	ee18 2a10 	vmov	r2, s16
 80095c2:	4601      	mov	r1, r0
 80095c4:	4607      	mov	r7, r0
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 fb58 	bl	8009c7c <__multiply>
 80095cc:	ee18 1a10 	vmov	r1, s16
 80095d0:	4680      	mov	r8, r0
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fa84 	bl	8009ae0 <_Bfree>
 80095d8:	ee08 8a10 	vmov	s16, r8
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	1b9a      	subs	r2, r3, r6
 80095e0:	d006      	beq.n	80095f0 <_dtoa_r+0x7a0>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 fbf2 	bl	8009dd0 <__pow5mult>
 80095ec:	ee08 0a10 	vmov	s16, r0
 80095f0:	2101      	movs	r1, #1
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 fb2c 	bl	8009c50 <__i2b>
 80095f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	4606      	mov	r6, r0
 80095fe:	f340 8088 	ble.w	8009712 <_dtoa_r+0x8c2>
 8009602:	461a      	mov	r2, r3
 8009604:	4601      	mov	r1, r0
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fbe2 	bl	8009dd0 <__pow5mult>
 800960c:	9b06      	ldr	r3, [sp, #24]
 800960e:	2b01      	cmp	r3, #1
 8009610:	4606      	mov	r6, r0
 8009612:	f340 8081 	ble.w	8009718 <_dtoa_r+0x8c8>
 8009616:	f04f 0800 	mov.w	r8, #0
 800961a:	6933      	ldr	r3, [r6, #16]
 800961c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009620:	6918      	ldr	r0, [r3, #16]
 8009622:	f000 fac5 	bl	8009bb0 <__hi0bits>
 8009626:	f1c0 0020 	rsb	r0, r0, #32
 800962a:	9b05      	ldr	r3, [sp, #20]
 800962c:	4418      	add	r0, r3
 800962e:	f010 001f 	ands.w	r0, r0, #31
 8009632:	f000 8092 	beq.w	800975a <_dtoa_r+0x90a>
 8009636:	f1c0 0320 	rsb	r3, r0, #32
 800963a:	2b04      	cmp	r3, #4
 800963c:	f340 808a 	ble.w	8009754 <_dtoa_r+0x904>
 8009640:	f1c0 001c 	rsb	r0, r0, #28
 8009644:	9b04      	ldr	r3, [sp, #16]
 8009646:	4403      	add	r3, r0
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	9b05      	ldr	r3, [sp, #20]
 800964c:	4403      	add	r3, r0
 800964e:	4405      	add	r5, r0
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	dd07      	ble.n	8009668 <_dtoa_r+0x818>
 8009658:	ee18 1a10 	vmov	r1, s16
 800965c:	461a      	mov	r2, r3
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fc10 	bl	8009e84 <__lshift>
 8009664:	ee08 0a10 	vmov	s16, r0
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	dd05      	ble.n	800967a <_dtoa_r+0x82a>
 800966e:	4631      	mov	r1, r6
 8009670:	461a      	mov	r2, r3
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fc06 	bl	8009e84 <__lshift>
 8009678:	4606      	mov	r6, r0
 800967a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d06e      	beq.n	800975e <_dtoa_r+0x90e>
 8009680:	ee18 0a10 	vmov	r0, s16
 8009684:	4631      	mov	r1, r6
 8009686:	f000 fc6d 	bl	8009f64 <__mcmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	da67      	bge.n	800975e <_dtoa_r+0x90e>
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	3b01      	subs	r3, #1
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	220a      	movs	r2, #10
 800969a:	2300      	movs	r3, #0
 800969c:	4620      	mov	r0, r4
 800969e:	f000 fa41 	bl	8009b24 <__multadd>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	ee08 0a10 	vmov	s16, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 81b1 	beq.w	8009a10 <_dtoa_r+0xbc0>
 80096ae:	2300      	movs	r3, #0
 80096b0:	4639      	mov	r1, r7
 80096b2:	220a      	movs	r2, #10
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fa35 	bl	8009b24 <__multadd>
 80096ba:	9b02      	ldr	r3, [sp, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	4607      	mov	r7, r0
 80096c0:	f300 808e 	bgt.w	80097e0 <_dtoa_r+0x990>
 80096c4:	9b06      	ldr	r3, [sp, #24]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	dc51      	bgt.n	800976e <_dtoa_r+0x91e>
 80096ca:	e089      	b.n	80097e0 <_dtoa_r+0x990>
 80096cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096d2:	e74b      	b.n	800956c <_dtoa_r+0x71c>
 80096d4:	9b03      	ldr	r3, [sp, #12]
 80096d6:	1e5e      	subs	r6, r3, #1
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	42b3      	cmp	r3, r6
 80096dc:	bfbf      	itttt	lt
 80096de:	9b07      	ldrlt	r3, [sp, #28]
 80096e0:	9607      	strlt	r6, [sp, #28]
 80096e2:	1af2      	sublt	r2, r6, r3
 80096e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096e6:	bfb6      	itet	lt
 80096e8:	189b      	addlt	r3, r3, r2
 80096ea:	1b9e      	subge	r6, r3, r6
 80096ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	bfb8      	it	lt
 80096f2:	2600      	movlt	r6, #0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfb7      	itett	lt
 80096f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009700:	1a9d      	sublt	r5, r3, r2
 8009702:	2300      	movlt	r3, #0
 8009704:	e734      	b.n	8009570 <_dtoa_r+0x720>
 8009706:	9e07      	ldr	r6, [sp, #28]
 8009708:	9d04      	ldr	r5, [sp, #16]
 800970a:	9f08      	ldr	r7, [sp, #32]
 800970c:	e73b      	b.n	8009586 <_dtoa_r+0x736>
 800970e:	9a07      	ldr	r2, [sp, #28]
 8009710:	e767      	b.n	80095e2 <_dtoa_r+0x792>
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	2b01      	cmp	r3, #1
 8009716:	dc18      	bgt.n	800974a <_dtoa_r+0x8fa>
 8009718:	f1ba 0f00 	cmp.w	sl, #0
 800971c:	d115      	bne.n	800974a <_dtoa_r+0x8fa>
 800971e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009722:	b993      	cbnz	r3, 800974a <_dtoa_r+0x8fa>
 8009724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009728:	0d1b      	lsrs	r3, r3, #20
 800972a:	051b      	lsls	r3, r3, #20
 800972c:	b183      	cbz	r3, 8009750 <_dtoa_r+0x900>
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	9304      	str	r3, [sp, #16]
 8009734:	9b05      	ldr	r3, [sp, #20]
 8009736:	3301      	adds	r3, #1
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f04f 0801 	mov.w	r8, #1
 800973e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	f47f af6a 	bne.w	800961a <_dtoa_r+0x7ca>
 8009746:	2001      	movs	r0, #1
 8009748:	e76f      	b.n	800962a <_dtoa_r+0x7da>
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	e7f6      	b.n	800973e <_dtoa_r+0x8ee>
 8009750:	4698      	mov	r8, r3
 8009752:	e7f4      	b.n	800973e <_dtoa_r+0x8ee>
 8009754:	f43f af7d 	beq.w	8009652 <_dtoa_r+0x802>
 8009758:	4618      	mov	r0, r3
 800975a:	301c      	adds	r0, #28
 800975c:	e772      	b.n	8009644 <_dtoa_r+0x7f4>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	dc37      	bgt.n	80097d4 <_dtoa_r+0x984>
 8009764:	9b06      	ldr	r3, [sp, #24]
 8009766:	2b02      	cmp	r3, #2
 8009768:	dd34      	ble.n	80097d4 <_dtoa_r+0x984>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	9302      	str	r3, [sp, #8]
 800976e:	9b02      	ldr	r3, [sp, #8]
 8009770:	b96b      	cbnz	r3, 800978e <_dtoa_r+0x93e>
 8009772:	4631      	mov	r1, r6
 8009774:	2205      	movs	r2, #5
 8009776:	4620      	mov	r0, r4
 8009778:	f000 f9d4 	bl	8009b24 <__multadd>
 800977c:	4601      	mov	r1, r0
 800977e:	4606      	mov	r6, r0
 8009780:	ee18 0a10 	vmov	r0, s16
 8009784:	f000 fbee 	bl	8009f64 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	f73f adbb 	bgt.w	8009304 <_dtoa_r+0x4b4>
 800978e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009790:	9d01      	ldr	r5, [sp, #4]
 8009792:	43db      	mvns	r3, r3
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	f04f 0800 	mov.w	r8, #0
 800979a:	4631      	mov	r1, r6
 800979c:	4620      	mov	r0, r4
 800979e:	f000 f99f 	bl	8009ae0 <_Bfree>
 80097a2:	2f00      	cmp	r7, #0
 80097a4:	f43f aea4 	beq.w	80094f0 <_dtoa_r+0x6a0>
 80097a8:	f1b8 0f00 	cmp.w	r8, #0
 80097ac:	d005      	beq.n	80097ba <_dtoa_r+0x96a>
 80097ae:	45b8      	cmp	r8, r7
 80097b0:	d003      	beq.n	80097ba <_dtoa_r+0x96a>
 80097b2:	4641      	mov	r1, r8
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 f993 	bl	8009ae0 <_Bfree>
 80097ba:	4639      	mov	r1, r7
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 f98f 	bl	8009ae0 <_Bfree>
 80097c2:	e695      	b.n	80094f0 <_dtoa_r+0x6a0>
 80097c4:	2600      	movs	r6, #0
 80097c6:	4637      	mov	r7, r6
 80097c8:	e7e1      	b.n	800978e <_dtoa_r+0x93e>
 80097ca:	9700      	str	r7, [sp, #0]
 80097cc:	4637      	mov	r7, r6
 80097ce:	e599      	b.n	8009304 <_dtoa_r+0x4b4>
 80097d0:	40240000 	.word	0x40240000
 80097d4:	9b08      	ldr	r3, [sp, #32]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80ca 	beq.w	8009970 <_dtoa_r+0xb20>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	9302      	str	r3, [sp, #8]
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	dd05      	ble.n	80097f0 <_dtoa_r+0x9a0>
 80097e4:	4639      	mov	r1, r7
 80097e6:	462a      	mov	r2, r5
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fb4b 	bl	8009e84 <__lshift>
 80097ee:	4607      	mov	r7, r0
 80097f0:	f1b8 0f00 	cmp.w	r8, #0
 80097f4:	d05b      	beq.n	80098ae <_dtoa_r+0xa5e>
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 f931 	bl	8009a60 <_Balloc>
 80097fe:	4605      	mov	r5, r0
 8009800:	b928      	cbnz	r0, 800980e <_dtoa_r+0x9be>
 8009802:	4b87      	ldr	r3, [pc, #540]	; (8009a20 <_dtoa_r+0xbd0>)
 8009804:	4602      	mov	r2, r0
 8009806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800980a:	f7ff bb3b 	b.w	8008e84 <_dtoa_r+0x34>
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	3202      	adds	r2, #2
 8009812:	0092      	lsls	r2, r2, #2
 8009814:	f107 010c 	add.w	r1, r7, #12
 8009818:	300c      	adds	r0, #12
 800981a:	f000 f913 	bl	8009a44 <memcpy>
 800981e:	2201      	movs	r2, #1
 8009820:	4629      	mov	r1, r5
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fb2e 	bl	8009e84 <__lshift>
 8009828:	9b01      	ldr	r3, [sp, #4]
 800982a:	f103 0901 	add.w	r9, r3, #1
 800982e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009832:	4413      	add	r3, r2
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	f00a 0301 	and.w	r3, sl, #1
 800983a:	46b8      	mov	r8, r7
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	4607      	mov	r7, r0
 8009840:	4631      	mov	r1, r6
 8009842:	ee18 0a10 	vmov	r0, s16
 8009846:	f7ff fa77 	bl	8008d38 <quorem>
 800984a:	4641      	mov	r1, r8
 800984c:	9002      	str	r0, [sp, #8]
 800984e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009852:	ee18 0a10 	vmov	r0, s16
 8009856:	f000 fb85 	bl	8009f64 <__mcmp>
 800985a:	463a      	mov	r2, r7
 800985c:	9003      	str	r0, [sp, #12]
 800985e:	4631      	mov	r1, r6
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fb9b 	bl	8009f9c <__mdiff>
 8009866:	68c2      	ldr	r2, [r0, #12]
 8009868:	f109 3bff 	add.w	fp, r9, #4294967295
 800986c:	4605      	mov	r5, r0
 800986e:	bb02      	cbnz	r2, 80098b2 <_dtoa_r+0xa62>
 8009870:	4601      	mov	r1, r0
 8009872:	ee18 0a10 	vmov	r0, s16
 8009876:	f000 fb75 	bl	8009f64 <__mcmp>
 800987a:	4602      	mov	r2, r0
 800987c:	4629      	mov	r1, r5
 800987e:	4620      	mov	r0, r4
 8009880:	9207      	str	r2, [sp, #28]
 8009882:	f000 f92d 	bl	8009ae0 <_Bfree>
 8009886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800988a:	ea43 0102 	orr.w	r1, r3, r2
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	430b      	orrs	r3, r1
 8009892:	464d      	mov	r5, r9
 8009894:	d10f      	bne.n	80098b6 <_dtoa_r+0xa66>
 8009896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800989a:	d02a      	beq.n	80098f2 <_dtoa_r+0xaa2>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dd02      	ble.n	80098a8 <_dtoa_r+0xa58>
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098a8:	f88b a000 	strb.w	sl, [fp]
 80098ac:	e775      	b.n	800979a <_dtoa_r+0x94a>
 80098ae:	4638      	mov	r0, r7
 80098b0:	e7ba      	b.n	8009828 <_dtoa_r+0x9d8>
 80098b2:	2201      	movs	r2, #1
 80098b4:	e7e2      	b.n	800987c <_dtoa_r+0xa2c>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	db04      	blt.n	80098c6 <_dtoa_r+0xa76>
 80098bc:	9906      	ldr	r1, [sp, #24]
 80098be:	430b      	orrs	r3, r1
 80098c0:	9904      	ldr	r1, [sp, #16]
 80098c2:	430b      	orrs	r3, r1
 80098c4:	d122      	bne.n	800990c <_dtoa_r+0xabc>
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	ddee      	ble.n	80098a8 <_dtoa_r+0xa58>
 80098ca:	ee18 1a10 	vmov	r1, s16
 80098ce:	2201      	movs	r2, #1
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fad7 	bl	8009e84 <__lshift>
 80098d6:	4631      	mov	r1, r6
 80098d8:	ee08 0a10 	vmov	s16, r0
 80098dc:	f000 fb42 	bl	8009f64 <__mcmp>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	dc03      	bgt.n	80098ec <_dtoa_r+0xa9c>
 80098e4:	d1e0      	bne.n	80098a8 <_dtoa_r+0xa58>
 80098e6:	f01a 0f01 	tst.w	sl, #1
 80098ea:	d0dd      	beq.n	80098a8 <_dtoa_r+0xa58>
 80098ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098f0:	d1d7      	bne.n	80098a2 <_dtoa_r+0xa52>
 80098f2:	2339      	movs	r3, #57	; 0x39
 80098f4:	f88b 3000 	strb.w	r3, [fp]
 80098f8:	462b      	mov	r3, r5
 80098fa:	461d      	mov	r5, r3
 80098fc:	3b01      	subs	r3, #1
 80098fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009902:	2a39      	cmp	r2, #57	; 0x39
 8009904:	d071      	beq.n	80099ea <_dtoa_r+0xb9a>
 8009906:	3201      	adds	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	e746      	b.n	800979a <_dtoa_r+0x94a>
 800990c:	2a00      	cmp	r2, #0
 800990e:	dd07      	ble.n	8009920 <_dtoa_r+0xad0>
 8009910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009914:	d0ed      	beq.n	80098f2 <_dtoa_r+0xaa2>
 8009916:	f10a 0301 	add.w	r3, sl, #1
 800991a:	f88b 3000 	strb.w	r3, [fp]
 800991e:	e73c      	b.n	800979a <_dtoa_r+0x94a>
 8009920:	9b05      	ldr	r3, [sp, #20]
 8009922:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009926:	4599      	cmp	r9, r3
 8009928:	d047      	beq.n	80099ba <_dtoa_r+0xb6a>
 800992a:	ee18 1a10 	vmov	r1, s16
 800992e:	2300      	movs	r3, #0
 8009930:	220a      	movs	r2, #10
 8009932:	4620      	mov	r0, r4
 8009934:	f000 f8f6 	bl	8009b24 <__multadd>
 8009938:	45b8      	cmp	r8, r7
 800993a:	ee08 0a10 	vmov	s16, r0
 800993e:	f04f 0300 	mov.w	r3, #0
 8009942:	f04f 020a 	mov.w	r2, #10
 8009946:	4641      	mov	r1, r8
 8009948:	4620      	mov	r0, r4
 800994a:	d106      	bne.n	800995a <_dtoa_r+0xb0a>
 800994c:	f000 f8ea 	bl	8009b24 <__multadd>
 8009950:	4680      	mov	r8, r0
 8009952:	4607      	mov	r7, r0
 8009954:	f109 0901 	add.w	r9, r9, #1
 8009958:	e772      	b.n	8009840 <_dtoa_r+0x9f0>
 800995a:	f000 f8e3 	bl	8009b24 <__multadd>
 800995e:	4639      	mov	r1, r7
 8009960:	4680      	mov	r8, r0
 8009962:	2300      	movs	r3, #0
 8009964:	220a      	movs	r2, #10
 8009966:	4620      	mov	r0, r4
 8009968:	f000 f8dc 	bl	8009b24 <__multadd>
 800996c:	4607      	mov	r7, r0
 800996e:	e7f1      	b.n	8009954 <_dtoa_r+0xb04>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	9d01      	ldr	r5, [sp, #4]
 8009976:	ee18 0a10 	vmov	r0, s16
 800997a:	4631      	mov	r1, r6
 800997c:	f7ff f9dc 	bl	8008d38 <quorem>
 8009980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	f805 ab01 	strb.w	sl, [r5], #1
 800998a:	1aea      	subs	r2, r5, r3
 800998c:	9b02      	ldr	r3, [sp, #8]
 800998e:	4293      	cmp	r3, r2
 8009990:	dd09      	ble.n	80099a6 <_dtoa_r+0xb56>
 8009992:	ee18 1a10 	vmov	r1, s16
 8009996:	2300      	movs	r3, #0
 8009998:	220a      	movs	r2, #10
 800999a:	4620      	mov	r0, r4
 800999c:	f000 f8c2 	bl	8009b24 <__multadd>
 80099a0:	ee08 0a10 	vmov	s16, r0
 80099a4:	e7e7      	b.n	8009976 <_dtoa_r+0xb26>
 80099a6:	9b02      	ldr	r3, [sp, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bfc8      	it	gt
 80099ac:	461d      	movgt	r5, r3
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	bfd8      	it	le
 80099b2:	2501      	movle	r5, #1
 80099b4:	441d      	add	r5, r3
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	ee18 1a10 	vmov	r1, s16
 80099be:	2201      	movs	r2, #1
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 fa5f 	bl	8009e84 <__lshift>
 80099c6:	4631      	mov	r1, r6
 80099c8:	ee08 0a10 	vmov	s16, r0
 80099cc:	f000 faca 	bl	8009f64 <__mcmp>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	dc91      	bgt.n	80098f8 <_dtoa_r+0xaa8>
 80099d4:	d102      	bne.n	80099dc <_dtoa_r+0xb8c>
 80099d6:	f01a 0f01 	tst.w	sl, #1
 80099da:	d18d      	bne.n	80098f8 <_dtoa_r+0xaa8>
 80099dc:	462b      	mov	r3, r5
 80099de:	461d      	mov	r5, r3
 80099e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e4:	2a30      	cmp	r2, #48	; 0x30
 80099e6:	d0fa      	beq.n	80099de <_dtoa_r+0xb8e>
 80099e8:	e6d7      	b.n	800979a <_dtoa_r+0x94a>
 80099ea:	9a01      	ldr	r2, [sp, #4]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d184      	bne.n	80098fa <_dtoa_r+0xaaa>
 80099f0:	9b00      	ldr	r3, [sp, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	2331      	movs	r3, #49	; 0x31
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	e6ce      	b.n	800979a <_dtoa_r+0x94a>
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <_dtoa_r+0xbd4>)
 80099fe:	f7ff ba95 	b.w	8008f2c <_dtoa_r+0xdc>
 8009a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f47f aa6e 	bne.w	8008ee6 <_dtoa_r+0x96>
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <_dtoa_r+0xbd8>)
 8009a0c:	f7ff ba8e 	b.w	8008f2c <_dtoa_r+0xdc>
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dcae      	bgt.n	8009974 <_dtoa_r+0xb24>
 8009a16:	9b06      	ldr	r3, [sp, #24]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	f73f aea8 	bgt.w	800976e <_dtoa_r+0x91e>
 8009a1e:	e7a9      	b.n	8009974 <_dtoa_r+0xb24>
 8009a20:	0800b464 	.word	0x0800b464
 8009a24:	0800b2c0 	.word	0x0800b2c0
 8009a28:	0800b3e5 	.word	0x0800b3e5

08009a2c <_localeconv_r>:
 8009a2c:	4800      	ldr	r0, [pc, #0]	; (8009a30 <_localeconv_r+0x4>)
 8009a2e:	4770      	bx	lr
 8009a30:	2000016c 	.word	0x2000016c

08009a34 <malloc>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <malloc+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f000 bc17 	b.w	800a26c <_malloc_r>
 8009a3e:	bf00      	nop
 8009a40:	20000018 	.word	0x20000018

08009a44 <memcpy>:
 8009a44:	440a      	add	r2, r1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a4c:	d100      	bne.n	8009a50 <memcpy+0xc>
 8009a4e:	4770      	bx	lr
 8009a50:	b510      	push	{r4, lr}
 8009a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5a:	4291      	cmp	r1, r2
 8009a5c:	d1f9      	bne.n	8009a52 <memcpy+0xe>
 8009a5e:	bd10      	pop	{r4, pc}

08009a60 <_Balloc>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a64:	4604      	mov	r4, r0
 8009a66:	460d      	mov	r5, r1
 8009a68:	b976      	cbnz	r6, 8009a88 <_Balloc+0x28>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7ff ffe2 	bl	8009a34 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	6260      	str	r0, [r4, #36]	; 0x24
 8009a74:	b920      	cbnz	r0, 8009a80 <_Balloc+0x20>
 8009a76:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <_Balloc+0x78>)
 8009a78:	4818      	ldr	r0, [pc, #96]	; (8009adc <_Balloc+0x7c>)
 8009a7a:	2166      	movs	r1, #102	; 0x66
 8009a7c:	f000 fdd6 	bl	800a62c <__assert_func>
 8009a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a84:	6006      	str	r6, [r0, #0]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a8a:	68f3      	ldr	r3, [r6, #12]
 8009a8c:	b183      	cbz	r3, 8009ab0 <_Balloc+0x50>
 8009a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a96:	b9b8      	cbnz	r0, 8009ac8 <_Balloc+0x68>
 8009a98:	2101      	movs	r1, #1
 8009a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a9e:	1d72      	adds	r2, r6, #5
 8009aa0:	0092      	lsls	r2, r2, #2
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fb60 	bl	800a168 <_calloc_r>
 8009aa8:	b160      	cbz	r0, 8009ac4 <_Balloc+0x64>
 8009aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aae:	e00e      	b.n	8009ace <_Balloc+0x6e>
 8009ab0:	2221      	movs	r2, #33	; 0x21
 8009ab2:	2104      	movs	r1, #4
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fb57 	bl	800a168 <_calloc_r>
 8009aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009abc:	60f0      	str	r0, [r6, #12]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e4      	bne.n	8009a8e <_Balloc+0x2e>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	6802      	ldr	r2, [r0, #0]
 8009aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ad4:	e7f7      	b.n	8009ac6 <_Balloc+0x66>
 8009ad6:	bf00      	nop
 8009ad8:	0800b3f2 	.word	0x0800b3f2
 8009adc:	0800b475 	.word	0x0800b475

08009ae0 <_Bfree>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	b976      	cbnz	r6, 8009b08 <_Bfree+0x28>
 8009aea:	2010      	movs	r0, #16
 8009aec:	f7ff ffa2 	bl	8009a34 <malloc>
 8009af0:	4602      	mov	r2, r0
 8009af2:	6268      	str	r0, [r5, #36]	; 0x24
 8009af4:	b920      	cbnz	r0, 8009b00 <_Bfree+0x20>
 8009af6:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <_Bfree+0x3c>)
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <_Bfree+0x40>)
 8009afa:	218a      	movs	r1, #138	; 0x8a
 8009afc:	f000 fd96 	bl	800a62c <__assert_func>
 8009b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b04:	6006      	str	r6, [r0, #0]
 8009b06:	60c6      	str	r6, [r0, #12]
 8009b08:	b13c      	cbz	r4, 8009b1a <_Bfree+0x3a>
 8009b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b0c:	6862      	ldr	r2, [r4, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b14:	6021      	str	r1, [r4, #0]
 8009b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	0800b3f2 	.word	0x0800b3f2
 8009b20:	0800b475 	.word	0x0800b475

08009b24 <__multadd>:
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	690d      	ldr	r5, [r1, #16]
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	461e      	mov	r6, r3
 8009b30:	f101 0c14 	add.w	ip, r1, #20
 8009b34:	2000      	movs	r0, #0
 8009b36:	f8dc 3000 	ldr.w	r3, [ip]
 8009b3a:	b299      	uxth	r1, r3
 8009b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b40:	0c1e      	lsrs	r6, r3, #16
 8009b42:	0c0b      	lsrs	r3, r1, #16
 8009b44:	fb02 3306 	mla	r3, r2, r6, r3
 8009b48:	b289      	uxth	r1, r1
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b50:	4285      	cmp	r5, r0
 8009b52:	f84c 1b04 	str.w	r1, [ip], #4
 8009b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b5a:	dcec      	bgt.n	8009b36 <__multadd+0x12>
 8009b5c:	b30e      	cbz	r6, 8009ba2 <__multadd+0x7e>
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dc19      	bgt.n	8009b98 <__multadd+0x74>
 8009b64:	6861      	ldr	r1, [r4, #4]
 8009b66:	4638      	mov	r0, r7
 8009b68:	3101      	adds	r1, #1
 8009b6a:	f7ff ff79 	bl	8009a60 <_Balloc>
 8009b6e:	4680      	mov	r8, r0
 8009b70:	b928      	cbnz	r0, 8009b7e <__multadd+0x5a>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <__multadd+0x84>)
 8009b76:	480d      	ldr	r0, [pc, #52]	; (8009bac <__multadd+0x88>)
 8009b78:	21b5      	movs	r1, #181	; 0xb5
 8009b7a:	f000 fd57 	bl	800a62c <__assert_func>
 8009b7e:	6922      	ldr	r2, [r4, #16]
 8009b80:	3202      	adds	r2, #2
 8009b82:	f104 010c 	add.w	r1, r4, #12
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	300c      	adds	r0, #12
 8009b8a:	f7ff ff5b 	bl	8009a44 <memcpy>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4638      	mov	r0, r7
 8009b92:	f7ff ffa5 	bl	8009ae0 <_Bfree>
 8009b96:	4644      	mov	r4, r8
 8009b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	615e      	str	r6, [r3, #20]
 8009ba0:	6125      	str	r5, [r4, #16]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	0800b464 	.word	0x0800b464
 8009bac:	0800b475 	.word	0x0800b475

08009bb0 <__hi0bits>:
 8009bb0:	0c03      	lsrs	r3, r0, #16
 8009bb2:	041b      	lsls	r3, r3, #16
 8009bb4:	b9d3      	cbnz	r3, 8009bec <__hi0bits+0x3c>
 8009bb6:	0400      	lsls	r0, r0, #16
 8009bb8:	2310      	movs	r3, #16
 8009bba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bbe:	bf04      	itt	eq
 8009bc0:	0200      	lsleq	r0, r0, #8
 8009bc2:	3308      	addeq	r3, #8
 8009bc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bc8:	bf04      	itt	eq
 8009bca:	0100      	lsleq	r0, r0, #4
 8009bcc:	3304      	addeq	r3, #4
 8009bce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009bd2:	bf04      	itt	eq
 8009bd4:	0080      	lsleq	r0, r0, #2
 8009bd6:	3302      	addeq	r3, #2
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	db05      	blt.n	8009be8 <__hi0bits+0x38>
 8009bdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009be0:	f103 0301 	add.w	r3, r3, #1
 8009be4:	bf08      	it	eq
 8009be6:	2320      	moveq	r3, #32
 8009be8:	4618      	mov	r0, r3
 8009bea:	4770      	bx	lr
 8009bec:	2300      	movs	r3, #0
 8009bee:	e7e4      	b.n	8009bba <__hi0bits+0xa>

08009bf0 <__lo0bits>:
 8009bf0:	6803      	ldr	r3, [r0, #0]
 8009bf2:	f013 0207 	ands.w	r2, r3, #7
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	d00b      	beq.n	8009c12 <__lo0bits+0x22>
 8009bfa:	07da      	lsls	r2, r3, #31
 8009bfc:	d423      	bmi.n	8009c46 <__lo0bits+0x56>
 8009bfe:	0798      	lsls	r0, r3, #30
 8009c00:	bf49      	itett	mi
 8009c02:	085b      	lsrmi	r3, r3, #1
 8009c04:	089b      	lsrpl	r3, r3, #2
 8009c06:	2001      	movmi	r0, #1
 8009c08:	600b      	strmi	r3, [r1, #0]
 8009c0a:	bf5c      	itt	pl
 8009c0c:	600b      	strpl	r3, [r1, #0]
 8009c0e:	2002      	movpl	r0, #2
 8009c10:	4770      	bx	lr
 8009c12:	b298      	uxth	r0, r3
 8009c14:	b9a8      	cbnz	r0, 8009c42 <__lo0bits+0x52>
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	2010      	movs	r0, #16
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	b90a      	cbnz	r2, 8009c22 <__lo0bits+0x32>
 8009c1e:	3008      	adds	r0, #8
 8009c20:	0a1b      	lsrs	r3, r3, #8
 8009c22:	071a      	lsls	r2, r3, #28
 8009c24:	bf04      	itt	eq
 8009c26:	091b      	lsreq	r3, r3, #4
 8009c28:	3004      	addeq	r0, #4
 8009c2a:	079a      	lsls	r2, r3, #30
 8009c2c:	bf04      	itt	eq
 8009c2e:	089b      	lsreq	r3, r3, #2
 8009c30:	3002      	addeq	r0, #2
 8009c32:	07da      	lsls	r2, r3, #31
 8009c34:	d403      	bmi.n	8009c3e <__lo0bits+0x4e>
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	f100 0001 	add.w	r0, r0, #1
 8009c3c:	d005      	beq.n	8009c4a <__lo0bits+0x5a>
 8009c3e:	600b      	str	r3, [r1, #0]
 8009c40:	4770      	bx	lr
 8009c42:	4610      	mov	r0, r2
 8009c44:	e7e9      	b.n	8009c1a <__lo0bits+0x2a>
 8009c46:	2000      	movs	r0, #0
 8009c48:	4770      	bx	lr
 8009c4a:	2020      	movs	r0, #32
 8009c4c:	4770      	bx	lr
	...

08009c50 <__i2b>:
 8009c50:	b510      	push	{r4, lr}
 8009c52:	460c      	mov	r4, r1
 8009c54:	2101      	movs	r1, #1
 8009c56:	f7ff ff03 	bl	8009a60 <_Balloc>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	b928      	cbnz	r0, 8009c6a <__i2b+0x1a>
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <__i2b+0x24>)
 8009c60:	4805      	ldr	r0, [pc, #20]	; (8009c78 <__i2b+0x28>)
 8009c62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c66:	f000 fce1 	bl	800a62c <__assert_func>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	6144      	str	r4, [r0, #20]
 8009c6e:	6103      	str	r3, [r0, #16]
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	bf00      	nop
 8009c74:	0800b464 	.word	0x0800b464
 8009c78:	0800b475 	.word	0x0800b475

08009c7c <__multiply>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	4691      	mov	r9, r2
 8009c82:	690a      	ldr	r2, [r1, #16]
 8009c84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	bfb8      	it	lt
 8009c8c:	460b      	movlt	r3, r1
 8009c8e:	460c      	mov	r4, r1
 8009c90:	bfbc      	itt	lt
 8009c92:	464c      	movlt	r4, r9
 8009c94:	4699      	movlt	r9, r3
 8009c96:	6927      	ldr	r7, [r4, #16]
 8009c98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	6861      	ldr	r1, [r4, #4]
 8009ca0:	eb07 060a 	add.w	r6, r7, sl
 8009ca4:	42b3      	cmp	r3, r6
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	bfb8      	it	lt
 8009caa:	3101      	addlt	r1, #1
 8009cac:	f7ff fed8 	bl	8009a60 <_Balloc>
 8009cb0:	b930      	cbnz	r0, 8009cc0 <__multiply+0x44>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b44      	ldr	r3, [pc, #272]	; (8009dc8 <__multiply+0x14c>)
 8009cb6:	4845      	ldr	r0, [pc, #276]	; (8009dcc <__multiply+0x150>)
 8009cb8:	f240 115d 	movw	r1, #349	; 0x15d
 8009cbc:	f000 fcb6 	bl	800a62c <__assert_func>
 8009cc0:	f100 0514 	add.w	r5, r0, #20
 8009cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cc8:	462b      	mov	r3, r5
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4543      	cmp	r3, r8
 8009cce:	d321      	bcc.n	8009d14 <__multiply+0x98>
 8009cd0:	f104 0314 	add.w	r3, r4, #20
 8009cd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009cd8:	f109 0314 	add.w	r3, r9, #20
 8009cdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ce0:	9202      	str	r2, [sp, #8]
 8009ce2:	1b3a      	subs	r2, r7, r4
 8009ce4:	3a15      	subs	r2, #21
 8009ce6:	f022 0203 	bic.w	r2, r2, #3
 8009cea:	3204      	adds	r2, #4
 8009cec:	f104 0115 	add.w	r1, r4, #21
 8009cf0:	428f      	cmp	r7, r1
 8009cf2:	bf38      	it	cc
 8009cf4:	2204      	movcc	r2, #4
 8009cf6:	9201      	str	r2, [sp, #4]
 8009cf8:	9a02      	ldr	r2, [sp, #8]
 8009cfa:	9303      	str	r3, [sp, #12]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d80c      	bhi.n	8009d1a <__multiply+0x9e>
 8009d00:	2e00      	cmp	r6, #0
 8009d02:	dd03      	ble.n	8009d0c <__multiply+0x90>
 8009d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d05a      	beq.n	8009dc2 <__multiply+0x146>
 8009d0c:	6106      	str	r6, [r0, #16]
 8009d0e:	b005      	add	sp, #20
 8009d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d14:	f843 2b04 	str.w	r2, [r3], #4
 8009d18:	e7d8      	b.n	8009ccc <__multiply+0x50>
 8009d1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d1e:	f1ba 0f00 	cmp.w	sl, #0
 8009d22:	d024      	beq.n	8009d6e <__multiply+0xf2>
 8009d24:	f104 0e14 	add.w	lr, r4, #20
 8009d28:	46a9      	mov	r9, r5
 8009d2a:	f04f 0c00 	mov.w	ip, #0
 8009d2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d32:	f8d9 1000 	ldr.w	r1, [r9]
 8009d36:	fa1f fb82 	uxth.w	fp, r2
 8009d3a:	b289      	uxth	r1, r1
 8009d3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d44:	f8d9 2000 	ldr.w	r2, [r9]
 8009d48:	4461      	add	r1, ip
 8009d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d56:	b289      	uxth	r1, r1
 8009d58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d5c:	4577      	cmp	r7, lr
 8009d5e:	f849 1b04 	str.w	r1, [r9], #4
 8009d62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d66:	d8e2      	bhi.n	8009d2e <__multiply+0xb2>
 8009d68:	9a01      	ldr	r2, [sp, #4]
 8009d6a:	f845 c002 	str.w	ip, [r5, r2]
 8009d6e:	9a03      	ldr	r2, [sp, #12]
 8009d70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d74:	3304      	adds	r3, #4
 8009d76:	f1b9 0f00 	cmp.w	r9, #0
 8009d7a:	d020      	beq.n	8009dbe <__multiply+0x142>
 8009d7c:	6829      	ldr	r1, [r5, #0]
 8009d7e:	f104 0c14 	add.w	ip, r4, #20
 8009d82:	46ae      	mov	lr, r5
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	f8bc b000 	ldrh.w	fp, [ip]
 8009d8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d90:	fb09 220b 	mla	r2, r9, fp, r2
 8009d94:	4492      	add	sl, r2
 8009d96:	b289      	uxth	r1, r1
 8009d98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009da0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009da4:	f8be 1000 	ldrh.w	r1, [lr]
 8009da8:	0c12      	lsrs	r2, r2, #16
 8009daa:	fb09 1102 	mla	r1, r9, r2, r1
 8009dae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009db2:	4567      	cmp	r7, ip
 8009db4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009db8:	d8e6      	bhi.n	8009d88 <__multiply+0x10c>
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	50a9      	str	r1, [r5, r2]
 8009dbe:	3504      	adds	r5, #4
 8009dc0:	e79a      	b.n	8009cf8 <__multiply+0x7c>
 8009dc2:	3e01      	subs	r6, #1
 8009dc4:	e79c      	b.n	8009d00 <__multiply+0x84>
 8009dc6:	bf00      	nop
 8009dc8:	0800b464 	.word	0x0800b464
 8009dcc:	0800b475 	.word	0x0800b475

08009dd0 <__pow5mult>:
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	f012 0203 	ands.w	r2, r2, #3
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	d007      	beq.n	8009df0 <__pow5mult+0x20>
 8009de0:	4c25      	ldr	r4, [pc, #148]	; (8009e78 <__pow5mult+0xa8>)
 8009de2:	3a01      	subs	r2, #1
 8009de4:	2300      	movs	r3, #0
 8009de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dea:	f7ff fe9b 	bl	8009b24 <__multadd>
 8009dee:	4607      	mov	r7, r0
 8009df0:	10ad      	asrs	r5, r5, #2
 8009df2:	d03d      	beq.n	8009e70 <__pow5mult+0xa0>
 8009df4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009df6:	b97c      	cbnz	r4, 8009e18 <__pow5mult+0x48>
 8009df8:	2010      	movs	r0, #16
 8009dfa:	f7ff fe1b 	bl	8009a34 <malloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	6270      	str	r0, [r6, #36]	; 0x24
 8009e02:	b928      	cbnz	r0, 8009e10 <__pow5mult+0x40>
 8009e04:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <__pow5mult+0xac>)
 8009e06:	481e      	ldr	r0, [pc, #120]	; (8009e80 <__pow5mult+0xb0>)
 8009e08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e0c:	f000 fc0e 	bl	800a62c <__assert_func>
 8009e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e14:	6004      	str	r4, [r0, #0]
 8009e16:	60c4      	str	r4, [r0, #12]
 8009e18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e20:	b94c      	cbnz	r4, 8009e36 <__pow5mult+0x66>
 8009e22:	f240 2171 	movw	r1, #625	; 0x271
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ff12 	bl	8009c50 <__i2b>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e32:	4604      	mov	r4, r0
 8009e34:	6003      	str	r3, [r0, #0]
 8009e36:	f04f 0900 	mov.w	r9, #0
 8009e3a:	07eb      	lsls	r3, r5, #31
 8009e3c:	d50a      	bpl.n	8009e54 <__pow5mult+0x84>
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4622      	mov	r2, r4
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ff1a 	bl	8009c7c <__multiply>
 8009e48:	4639      	mov	r1, r7
 8009e4a:	4680      	mov	r8, r0
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7ff fe47 	bl	8009ae0 <_Bfree>
 8009e52:	4647      	mov	r7, r8
 8009e54:	106d      	asrs	r5, r5, #1
 8009e56:	d00b      	beq.n	8009e70 <__pow5mult+0xa0>
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	b938      	cbnz	r0, 8009e6c <__pow5mult+0x9c>
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff ff0b 	bl	8009c7c <__multiply>
 8009e66:	6020      	str	r0, [r4, #0]
 8009e68:	f8c0 9000 	str.w	r9, [r0]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	e7e4      	b.n	8009e3a <__pow5mult+0x6a>
 8009e70:	4638      	mov	r0, r7
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	bf00      	nop
 8009e78:	0800b5c8 	.word	0x0800b5c8
 8009e7c:	0800b3f2 	.word	0x0800b3f2
 8009e80:	0800b475 	.word	0x0800b475

08009e84 <__lshift>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	460c      	mov	r4, r1
 8009e8a:	6849      	ldr	r1, [r1, #4]
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	4607      	mov	r7, r0
 8009e96:	4691      	mov	r9, r2
 8009e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e9c:	f108 0601 	add.w	r6, r8, #1
 8009ea0:	42b3      	cmp	r3, r6
 8009ea2:	db0b      	blt.n	8009ebc <__lshift+0x38>
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff fddb 	bl	8009a60 <_Balloc>
 8009eaa:	4605      	mov	r5, r0
 8009eac:	b948      	cbnz	r0, 8009ec2 <__lshift+0x3e>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <__lshift+0xd8>)
 8009eb2:	482b      	ldr	r0, [pc, #172]	; (8009f60 <__lshift+0xdc>)
 8009eb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009eb8:	f000 fbb8 	bl	800a62c <__assert_func>
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__lshift+0x1c>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f100 0114 	add.w	r1, r0, #20
 8009ec8:	f100 0210 	add.w	r2, r0, #16
 8009ecc:	4618      	mov	r0, r3
 8009ece:	4553      	cmp	r3, sl
 8009ed0:	db37      	blt.n	8009f42 <__lshift+0xbe>
 8009ed2:	6920      	ldr	r0, [r4, #16]
 8009ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ed8:	f104 0314 	add.w	r3, r4, #20
 8009edc:	f019 091f 	ands.w	r9, r9, #31
 8009ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ee4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ee8:	d02f      	beq.n	8009f4a <__lshift+0xc6>
 8009eea:	f1c9 0e20 	rsb	lr, r9, #32
 8009eee:	468a      	mov	sl, r1
 8009ef0:	f04f 0c00 	mov.w	ip, #0
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	fa02 f209 	lsl.w	r2, r2, r9
 8009efa:	ea42 020c 	orr.w	r2, r2, ip
 8009efe:	f84a 2b04 	str.w	r2, [sl], #4
 8009f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f06:	4298      	cmp	r0, r3
 8009f08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f0c:	d8f2      	bhi.n	8009ef4 <__lshift+0x70>
 8009f0e:	1b03      	subs	r3, r0, r4
 8009f10:	3b15      	subs	r3, #21
 8009f12:	f023 0303 	bic.w	r3, r3, #3
 8009f16:	3304      	adds	r3, #4
 8009f18:	f104 0215 	add.w	r2, r4, #21
 8009f1c:	4290      	cmp	r0, r2
 8009f1e:	bf38      	it	cc
 8009f20:	2304      	movcc	r3, #4
 8009f22:	f841 c003 	str.w	ip, [r1, r3]
 8009f26:	f1bc 0f00 	cmp.w	ip, #0
 8009f2a:	d001      	beq.n	8009f30 <__lshift+0xac>
 8009f2c:	f108 0602 	add.w	r6, r8, #2
 8009f30:	3e01      	subs	r6, #1
 8009f32:	4638      	mov	r0, r7
 8009f34:	612e      	str	r6, [r5, #16]
 8009f36:	4621      	mov	r1, r4
 8009f38:	f7ff fdd2 	bl	8009ae0 <_Bfree>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f46:	3301      	adds	r3, #1
 8009f48:	e7c1      	b.n	8009ece <__lshift+0x4a>
 8009f4a:	3904      	subs	r1, #4
 8009f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f54:	4298      	cmp	r0, r3
 8009f56:	d8f9      	bhi.n	8009f4c <__lshift+0xc8>
 8009f58:	e7ea      	b.n	8009f30 <__lshift+0xac>
 8009f5a:	bf00      	nop
 8009f5c:	0800b464 	.word	0x0800b464
 8009f60:	0800b475 	.word	0x0800b475

08009f64 <__mcmp>:
 8009f64:	b530      	push	{r4, r5, lr}
 8009f66:	6902      	ldr	r2, [r0, #16]
 8009f68:	690c      	ldr	r4, [r1, #16]
 8009f6a:	1b12      	subs	r2, r2, r4
 8009f6c:	d10e      	bne.n	8009f8c <__mcmp+0x28>
 8009f6e:	f100 0314 	add.w	r3, r0, #20
 8009f72:	3114      	adds	r1, #20
 8009f74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f84:	42a5      	cmp	r5, r4
 8009f86:	d003      	beq.n	8009f90 <__mcmp+0x2c>
 8009f88:	d305      	bcc.n	8009f96 <__mcmp+0x32>
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	bd30      	pop	{r4, r5, pc}
 8009f90:	4283      	cmp	r3, r0
 8009f92:	d3f3      	bcc.n	8009f7c <__mcmp+0x18>
 8009f94:	e7fa      	b.n	8009f8c <__mcmp+0x28>
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9a:	e7f7      	b.n	8009f8c <__mcmp+0x28>

08009f9c <__mdiff>:
 8009f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4690      	mov	r8, r2
 8009faa:	f7ff ffdb 	bl	8009f64 <__mcmp>
 8009fae:	1e05      	subs	r5, r0, #0
 8009fb0:	d110      	bne.n	8009fd4 <__mdiff+0x38>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff fd53 	bl	8009a60 <_Balloc>
 8009fba:	b930      	cbnz	r0, 8009fca <__mdiff+0x2e>
 8009fbc:	4b3a      	ldr	r3, [pc, #232]	; (800a0a8 <__mdiff+0x10c>)
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	f240 2132 	movw	r1, #562	; 0x232
 8009fc4:	4839      	ldr	r0, [pc, #228]	; (800a0ac <__mdiff+0x110>)
 8009fc6:	f000 fb31 	bl	800a62c <__assert_func>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	bfa4      	itt	ge
 8009fd6:	4643      	movge	r3, r8
 8009fd8:	46a0      	movge	r8, r4
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fe0:	bfa6      	itte	ge
 8009fe2:	461c      	movge	r4, r3
 8009fe4:	2500      	movge	r5, #0
 8009fe6:	2501      	movlt	r5, #1
 8009fe8:	f7ff fd3a 	bl	8009a60 <_Balloc>
 8009fec:	b920      	cbnz	r0, 8009ff8 <__mdiff+0x5c>
 8009fee:	4b2e      	ldr	r3, [pc, #184]	; (800a0a8 <__mdiff+0x10c>)
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ff6:	e7e5      	b.n	8009fc4 <__mdiff+0x28>
 8009ff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ffc:	6926      	ldr	r6, [r4, #16]
 8009ffe:	60c5      	str	r5, [r0, #12]
 800a000:	f104 0914 	add.w	r9, r4, #20
 800a004:	f108 0514 	add.w	r5, r8, #20
 800a008:	f100 0e14 	add.w	lr, r0, #20
 800a00c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a010:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a014:	f108 0210 	add.w	r2, r8, #16
 800a018:	46f2      	mov	sl, lr
 800a01a:	2100      	movs	r1, #0
 800a01c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a020:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a024:	fa1f f883 	uxth.w	r8, r3
 800a028:	fa11 f18b 	uxtah	r1, r1, fp
 800a02c:	0c1b      	lsrs	r3, r3, #16
 800a02e:	eba1 0808 	sub.w	r8, r1, r8
 800a032:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a036:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a03a:	fa1f f888 	uxth.w	r8, r8
 800a03e:	1419      	asrs	r1, r3, #16
 800a040:	454e      	cmp	r6, r9
 800a042:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a046:	f84a 3b04 	str.w	r3, [sl], #4
 800a04a:	d8e7      	bhi.n	800a01c <__mdiff+0x80>
 800a04c:	1b33      	subs	r3, r6, r4
 800a04e:	3b15      	subs	r3, #21
 800a050:	f023 0303 	bic.w	r3, r3, #3
 800a054:	3304      	adds	r3, #4
 800a056:	3415      	adds	r4, #21
 800a058:	42a6      	cmp	r6, r4
 800a05a:	bf38      	it	cc
 800a05c:	2304      	movcc	r3, #4
 800a05e:	441d      	add	r5, r3
 800a060:	4473      	add	r3, lr
 800a062:	469e      	mov	lr, r3
 800a064:	462e      	mov	r6, r5
 800a066:	4566      	cmp	r6, ip
 800a068:	d30e      	bcc.n	800a088 <__mdiff+0xec>
 800a06a:	f10c 0203 	add.w	r2, ip, #3
 800a06e:	1b52      	subs	r2, r2, r5
 800a070:	f022 0203 	bic.w	r2, r2, #3
 800a074:	3d03      	subs	r5, #3
 800a076:	45ac      	cmp	ip, r5
 800a078:	bf38      	it	cc
 800a07a:	2200      	movcc	r2, #0
 800a07c:	441a      	add	r2, r3
 800a07e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a082:	b17b      	cbz	r3, 800a0a4 <__mdiff+0x108>
 800a084:	6107      	str	r7, [r0, #16]
 800a086:	e7a3      	b.n	8009fd0 <__mdiff+0x34>
 800a088:	f856 8b04 	ldr.w	r8, [r6], #4
 800a08c:	fa11 f288 	uxtah	r2, r1, r8
 800a090:	1414      	asrs	r4, r2, #16
 800a092:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a096:	b292      	uxth	r2, r2
 800a098:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a09c:	f84e 2b04 	str.w	r2, [lr], #4
 800a0a0:	1421      	asrs	r1, r4, #16
 800a0a2:	e7e0      	b.n	800a066 <__mdiff+0xca>
 800a0a4:	3f01      	subs	r7, #1
 800a0a6:	e7ea      	b.n	800a07e <__mdiff+0xe2>
 800a0a8:	0800b464 	.word	0x0800b464
 800a0ac:	0800b475 	.word	0x0800b475

0800a0b0 <__d2b>:
 800a0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0b4:	4689      	mov	r9, r1
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	ec57 6b10 	vmov	r6, r7, d0
 800a0bc:	4690      	mov	r8, r2
 800a0be:	f7ff fccf 	bl	8009a60 <_Balloc>
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	b930      	cbnz	r0, 800a0d4 <__d2b+0x24>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <__d2b+0xb0>)
 800a0ca:	4826      	ldr	r0, [pc, #152]	; (800a164 <__d2b+0xb4>)
 800a0cc:	f240 310a 	movw	r1, #778	; 0x30a
 800a0d0:	f000 faac 	bl	800a62c <__assert_func>
 800a0d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0dc:	bb35      	cbnz	r5, 800a12c <__d2b+0x7c>
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	d028      	beq.n	800a136 <__d2b+0x86>
 800a0e4:	4668      	mov	r0, sp
 800a0e6:	9600      	str	r6, [sp, #0]
 800a0e8:	f7ff fd82 	bl	8009bf0 <__lo0bits>
 800a0ec:	9900      	ldr	r1, [sp, #0]
 800a0ee:	b300      	cbz	r0, 800a132 <__d2b+0x82>
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	f1c0 0320 	rsb	r3, r0, #32
 800a0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fa:	430b      	orrs	r3, r1
 800a0fc:	40c2      	lsrs	r2, r0
 800a0fe:	6163      	str	r3, [r4, #20]
 800a100:	9201      	str	r2, [sp, #4]
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	61a3      	str	r3, [r4, #24]
 800a106:	2b00      	cmp	r3, #0
 800a108:	bf14      	ite	ne
 800a10a:	2202      	movne	r2, #2
 800a10c:	2201      	moveq	r2, #1
 800a10e:	6122      	str	r2, [r4, #16]
 800a110:	b1d5      	cbz	r5, 800a148 <__d2b+0x98>
 800a112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a116:	4405      	add	r5, r0
 800a118:	f8c9 5000 	str.w	r5, [r9]
 800a11c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a120:	f8c8 0000 	str.w	r0, [r8]
 800a124:	4620      	mov	r0, r4
 800a126:	b003      	add	sp, #12
 800a128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a130:	e7d5      	b.n	800a0de <__d2b+0x2e>
 800a132:	6161      	str	r1, [r4, #20]
 800a134:	e7e5      	b.n	800a102 <__d2b+0x52>
 800a136:	a801      	add	r0, sp, #4
 800a138:	f7ff fd5a 	bl	8009bf0 <__lo0bits>
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	2201      	movs	r2, #1
 800a142:	6122      	str	r2, [r4, #16]
 800a144:	3020      	adds	r0, #32
 800a146:	e7e3      	b.n	800a110 <__d2b+0x60>
 800a148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a150:	f8c9 0000 	str.w	r0, [r9]
 800a154:	6918      	ldr	r0, [r3, #16]
 800a156:	f7ff fd2b 	bl	8009bb0 <__hi0bits>
 800a15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a15e:	e7df      	b.n	800a120 <__d2b+0x70>
 800a160:	0800b464 	.word	0x0800b464
 800a164:	0800b475 	.word	0x0800b475

0800a168 <_calloc_r>:
 800a168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a16a:	fba1 2402 	umull	r2, r4, r1, r2
 800a16e:	b94c      	cbnz	r4, 800a184 <_calloc_r+0x1c>
 800a170:	4611      	mov	r1, r2
 800a172:	9201      	str	r2, [sp, #4]
 800a174:	f000 f87a 	bl	800a26c <_malloc_r>
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	4605      	mov	r5, r0
 800a17c:	b930      	cbnz	r0, 800a18c <_calloc_r+0x24>
 800a17e:	4628      	mov	r0, r5
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	220c      	movs	r2, #12
 800a186:	6002      	str	r2, [r0, #0]
 800a188:	2500      	movs	r5, #0
 800a18a:	e7f8      	b.n	800a17e <_calloc_r+0x16>
 800a18c:	4621      	mov	r1, r4
 800a18e:	f7fe f8b5 	bl	80082fc <memset>
 800a192:	e7f4      	b.n	800a17e <_calloc_r+0x16>

0800a194 <_free_r>:
 800a194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a196:	2900      	cmp	r1, #0
 800a198:	d044      	beq.n	800a224 <_free_r+0x90>
 800a19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a19e:	9001      	str	r0, [sp, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1a6:	bfb8      	it	lt
 800a1a8:	18e4      	addlt	r4, r4, r3
 800a1aa:	f000 fa9b 	bl	800a6e4 <__malloc_lock>
 800a1ae:	4a1e      	ldr	r2, [pc, #120]	; (800a228 <_free_r+0x94>)
 800a1b0:	9801      	ldr	r0, [sp, #4]
 800a1b2:	6813      	ldr	r3, [r2, #0]
 800a1b4:	b933      	cbnz	r3, 800a1c4 <_free_r+0x30>
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	6014      	str	r4, [r2, #0]
 800a1ba:	b003      	add	sp, #12
 800a1bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c0:	f000 ba96 	b.w	800a6f0 <__malloc_unlock>
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d908      	bls.n	800a1da <_free_r+0x46>
 800a1c8:	6825      	ldr	r5, [r4, #0]
 800a1ca:	1961      	adds	r1, r4, r5
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	bf01      	itttt	eq
 800a1d0:	6819      	ldreq	r1, [r3, #0]
 800a1d2:	685b      	ldreq	r3, [r3, #4]
 800a1d4:	1949      	addeq	r1, r1, r5
 800a1d6:	6021      	streq	r1, [r4, #0]
 800a1d8:	e7ed      	b.n	800a1b6 <_free_r+0x22>
 800a1da:	461a      	mov	r2, r3
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	b10b      	cbz	r3, 800a1e4 <_free_r+0x50>
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	d9fa      	bls.n	800a1da <_free_r+0x46>
 800a1e4:	6811      	ldr	r1, [r2, #0]
 800a1e6:	1855      	adds	r5, r2, r1
 800a1e8:	42a5      	cmp	r5, r4
 800a1ea:	d10b      	bne.n	800a204 <_free_r+0x70>
 800a1ec:	6824      	ldr	r4, [r4, #0]
 800a1ee:	4421      	add	r1, r4
 800a1f0:	1854      	adds	r4, r2, r1
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	6011      	str	r1, [r2, #0]
 800a1f6:	d1e0      	bne.n	800a1ba <_free_r+0x26>
 800a1f8:	681c      	ldr	r4, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	6053      	str	r3, [r2, #4]
 800a1fe:	4421      	add	r1, r4
 800a200:	6011      	str	r1, [r2, #0]
 800a202:	e7da      	b.n	800a1ba <_free_r+0x26>
 800a204:	d902      	bls.n	800a20c <_free_r+0x78>
 800a206:	230c      	movs	r3, #12
 800a208:	6003      	str	r3, [r0, #0]
 800a20a:	e7d6      	b.n	800a1ba <_free_r+0x26>
 800a20c:	6825      	ldr	r5, [r4, #0]
 800a20e:	1961      	adds	r1, r4, r5
 800a210:	428b      	cmp	r3, r1
 800a212:	bf04      	itt	eq
 800a214:	6819      	ldreq	r1, [r3, #0]
 800a216:	685b      	ldreq	r3, [r3, #4]
 800a218:	6063      	str	r3, [r4, #4]
 800a21a:	bf04      	itt	eq
 800a21c:	1949      	addeq	r1, r1, r5
 800a21e:	6021      	streq	r1, [r4, #0]
 800a220:	6054      	str	r4, [r2, #4]
 800a222:	e7ca      	b.n	800a1ba <_free_r+0x26>
 800a224:	b003      	add	sp, #12
 800a226:	bd30      	pop	{r4, r5, pc}
 800a228:	20000528 	.word	0x20000528

0800a22c <sbrk_aligned>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4e0e      	ldr	r6, [pc, #56]	; (800a268 <sbrk_aligned+0x3c>)
 800a230:	460c      	mov	r4, r1
 800a232:	6831      	ldr	r1, [r6, #0]
 800a234:	4605      	mov	r5, r0
 800a236:	b911      	cbnz	r1, 800a23e <sbrk_aligned+0x12>
 800a238:	f000 f9e8 	bl	800a60c <_sbrk_r>
 800a23c:	6030      	str	r0, [r6, #0]
 800a23e:	4621      	mov	r1, r4
 800a240:	4628      	mov	r0, r5
 800a242:	f000 f9e3 	bl	800a60c <_sbrk_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d00a      	beq.n	800a260 <sbrk_aligned+0x34>
 800a24a:	1cc4      	adds	r4, r0, #3
 800a24c:	f024 0403 	bic.w	r4, r4, #3
 800a250:	42a0      	cmp	r0, r4
 800a252:	d007      	beq.n	800a264 <sbrk_aligned+0x38>
 800a254:	1a21      	subs	r1, r4, r0
 800a256:	4628      	mov	r0, r5
 800a258:	f000 f9d8 	bl	800a60c <_sbrk_r>
 800a25c:	3001      	adds	r0, #1
 800a25e:	d101      	bne.n	800a264 <sbrk_aligned+0x38>
 800a260:	f04f 34ff 	mov.w	r4, #4294967295
 800a264:	4620      	mov	r0, r4
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	2000052c 	.word	0x2000052c

0800a26c <_malloc_r>:
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	1ccd      	adds	r5, r1, #3
 800a272:	f025 0503 	bic.w	r5, r5, #3
 800a276:	3508      	adds	r5, #8
 800a278:	2d0c      	cmp	r5, #12
 800a27a:	bf38      	it	cc
 800a27c:	250c      	movcc	r5, #12
 800a27e:	2d00      	cmp	r5, #0
 800a280:	4607      	mov	r7, r0
 800a282:	db01      	blt.n	800a288 <_malloc_r+0x1c>
 800a284:	42a9      	cmp	r1, r5
 800a286:	d905      	bls.n	800a294 <_malloc_r+0x28>
 800a288:	230c      	movs	r3, #12
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	2600      	movs	r6, #0
 800a28e:	4630      	mov	r0, r6
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	4e2e      	ldr	r6, [pc, #184]	; (800a350 <_malloc_r+0xe4>)
 800a296:	f000 fa25 	bl	800a6e4 <__malloc_lock>
 800a29a:	6833      	ldr	r3, [r6, #0]
 800a29c:	461c      	mov	r4, r3
 800a29e:	bb34      	cbnz	r4, 800a2ee <_malloc_r+0x82>
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f7ff ffc2 	bl	800a22c <sbrk_aligned>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	d14d      	bne.n	800a34a <_malloc_r+0xde>
 800a2ae:	6834      	ldr	r4, [r6, #0]
 800a2b0:	4626      	mov	r6, r4
 800a2b2:	2e00      	cmp	r6, #0
 800a2b4:	d140      	bne.n	800a338 <_malloc_r+0xcc>
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	eb04 0803 	add.w	r8, r4, r3
 800a2c0:	f000 f9a4 	bl	800a60c <_sbrk_r>
 800a2c4:	4580      	cmp	r8, r0
 800a2c6:	d13a      	bne.n	800a33e <_malloc_r+0xd2>
 800a2c8:	6821      	ldr	r1, [r4, #0]
 800a2ca:	3503      	adds	r5, #3
 800a2cc:	1a6d      	subs	r5, r5, r1
 800a2ce:	f025 0503 	bic.w	r5, r5, #3
 800a2d2:	3508      	adds	r5, #8
 800a2d4:	2d0c      	cmp	r5, #12
 800a2d6:	bf38      	it	cc
 800a2d8:	250c      	movcc	r5, #12
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f7ff ffa5 	bl	800a22c <sbrk_aligned>
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d02b      	beq.n	800a33e <_malloc_r+0xd2>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	442b      	add	r3, r5
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	e00e      	b.n	800a30c <_malloc_r+0xa0>
 800a2ee:	6822      	ldr	r2, [r4, #0]
 800a2f0:	1b52      	subs	r2, r2, r5
 800a2f2:	d41e      	bmi.n	800a332 <_malloc_r+0xc6>
 800a2f4:	2a0b      	cmp	r2, #11
 800a2f6:	d916      	bls.n	800a326 <_malloc_r+0xba>
 800a2f8:	1961      	adds	r1, r4, r5
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	6025      	str	r5, [r4, #0]
 800a2fe:	bf18      	it	ne
 800a300:	6059      	strne	r1, [r3, #4]
 800a302:	6863      	ldr	r3, [r4, #4]
 800a304:	bf08      	it	eq
 800a306:	6031      	streq	r1, [r6, #0]
 800a308:	5162      	str	r2, [r4, r5]
 800a30a:	604b      	str	r3, [r1, #4]
 800a30c:	4638      	mov	r0, r7
 800a30e:	f104 060b 	add.w	r6, r4, #11
 800a312:	f000 f9ed 	bl	800a6f0 <__malloc_unlock>
 800a316:	f026 0607 	bic.w	r6, r6, #7
 800a31a:	1d23      	adds	r3, r4, #4
 800a31c:	1af2      	subs	r2, r6, r3
 800a31e:	d0b6      	beq.n	800a28e <_malloc_r+0x22>
 800a320:	1b9b      	subs	r3, r3, r6
 800a322:	50a3      	str	r3, [r4, r2]
 800a324:	e7b3      	b.n	800a28e <_malloc_r+0x22>
 800a326:	6862      	ldr	r2, [r4, #4]
 800a328:	42a3      	cmp	r3, r4
 800a32a:	bf0c      	ite	eq
 800a32c:	6032      	streq	r2, [r6, #0]
 800a32e:	605a      	strne	r2, [r3, #4]
 800a330:	e7ec      	b.n	800a30c <_malloc_r+0xa0>
 800a332:	4623      	mov	r3, r4
 800a334:	6864      	ldr	r4, [r4, #4]
 800a336:	e7b2      	b.n	800a29e <_malloc_r+0x32>
 800a338:	4634      	mov	r4, r6
 800a33a:	6876      	ldr	r6, [r6, #4]
 800a33c:	e7b9      	b.n	800a2b2 <_malloc_r+0x46>
 800a33e:	230c      	movs	r3, #12
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	4638      	mov	r0, r7
 800a344:	f000 f9d4 	bl	800a6f0 <__malloc_unlock>
 800a348:	e7a1      	b.n	800a28e <_malloc_r+0x22>
 800a34a:	6025      	str	r5, [r4, #0]
 800a34c:	e7de      	b.n	800a30c <_malloc_r+0xa0>
 800a34e:	bf00      	nop
 800a350:	20000528 	.word	0x20000528

0800a354 <__ssputs_r>:
 800a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	688e      	ldr	r6, [r1, #8]
 800a35a:	429e      	cmp	r6, r3
 800a35c:	4682      	mov	sl, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4690      	mov	r8, r2
 800a362:	461f      	mov	r7, r3
 800a364:	d838      	bhi.n	800a3d8 <__ssputs_r+0x84>
 800a366:	898a      	ldrh	r2, [r1, #12]
 800a368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a36c:	d032      	beq.n	800a3d4 <__ssputs_r+0x80>
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	6909      	ldr	r1, [r1, #16]
 800a372:	eba5 0901 	sub.w	r9, r5, r1
 800a376:	6965      	ldr	r5, [r4, #20]
 800a378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a380:	3301      	adds	r3, #1
 800a382:	444b      	add	r3, r9
 800a384:	106d      	asrs	r5, r5, #1
 800a386:	429d      	cmp	r5, r3
 800a388:	bf38      	it	cc
 800a38a:	461d      	movcc	r5, r3
 800a38c:	0553      	lsls	r3, r2, #21
 800a38e:	d531      	bpl.n	800a3f4 <__ssputs_r+0xa0>
 800a390:	4629      	mov	r1, r5
 800a392:	f7ff ff6b 	bl	800a26c <_malloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	b950      	cbnz	r0, 800a3b0 <__ssputs_r+0x5c>
 800a39a:	230c      	movs	r3, #12
 800a39c:	f8ca 3000 	str.w	r3, [sl]
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	6921      	ldr	r1, [r4, #16]
 800a3b2:	464a      	mov	r2, r9
 800a3b4:	f7ff fb46 	bl	8009a44 <memcpy>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	6126      	str	r6, [r4, #16]
 800a3c6:	6165      	str	r5, [r4, #20]
 800a3c8:	444e      	add	r6, r9
 800a3ca:	eba5 0509 	sub.w	r5, r5, r9
 800a3ce:	6026      	str	r6, [r4, #0]
 800a3d0:	60a5      	str	r5, [r4, #8]
 800a3d2:	463e      	mov	r6, r7
 800a3d4:	42be      	cmp	r6, r7
 800a3d6:	d900      	bls.n	800a3da <__ssputs_r+0x86>
 800a3d8:	463e      	mov	r6, r7
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	4632      	mov	r2, r6
 800a3de:	4641      	mov	r1, r8
 800a3e0:	f000 f966 	bl	800a6b0 <memmove>
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	1b9b      	subs	r3, r3, r6
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	4433      	add	r3, r6
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7db      	b.n	800a3ac <__ssputs_r+0x58>
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	f000 f981 	bl	800a6fc <_realloc_r>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1e1      	bne.n	800a3c4 <__ssputs_r+0x70>
 800a400:	6921      	ldr	r1, [r4, #16]
 800a402:	4650      	mov	r0, sl
 800a404:	f7ff fec6 	bl	800a194 <_free_r>
 800a408:	e7c7      	b.n	800a39a <__ssputs_r+0x46>
	...

0800a40c <_svfiprintf_r>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	4698      	mov	r8, r3
 800a412:	898b      	ldrh	r3, [r1, #12]
 800a414:	061b      	lsls	r3, r3, #24
 800a416:	b09d      	sub	sp, #116	; 0x74
 800a418:	4607      	mov	r7, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	4614      	mov	r4, r2
 800a41e:	d50e      	bpl.n	800a43e <_svfiprintf_r+0x32>
 800a420:	690b      	ldr	r3, [r1, #16]
 800a422:	b963      	cbnz	r3, 800a43e <_svfiprintf_r+0x32>
 800a424:	2140      	movs	r1, #64	; 0x40
 800a426:	f7ff ff21 	bl	800a26c <_malloc_r>
 800a42a:	6028      	str	r0, [r5, #0]
 800a42c:	6128      	str	r0, [r5, #16]
 800a42e:	b920      	cbnz	r0, 800a43a <_svfiprintf_r+0x2e>
 800a430:	230c      	movs	r3, #12
 800a432:	603b      	str	r3, [r7, #0]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	e0d1      	b.n	800a5de <_svfiprintf_r+0x1d2>
 800a43a:	2340      	movs	r3, #64	; 0x40
 800a43c:	616b      	str	r3, [r5, #20]
 800a43e:	2300      	movs	r3, #0
 800a440:	9309      	str	r3, [sp, #36]	; 0x24
 800a442:	2320      	movs	r3, #32
 800a444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a448:	f8cd 800c 	str.w	r8, [sp, #12]
 800a44c:	2330      	movs	r3, #48	; 0x30
 800a44e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5f8 <_svfiprintf_r+0x1ec>
 800a452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a456:	f04f 0901 	mov.w	r9, #1
 800a45a:	4623      	mov	r3, r4
 800a45c:	469a      	mov	sl, r3
 800a45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a462:	b10a      	cbz	r2, 800a468 <_svfiprintf_r+0x5c>
 800a464:	2a25      	cmp	r2, #37	; 0x25
 800a466:	d1f9      	bne.n	800a45c <_svfiprintf_r+0x50>
 800a468:	ebba 0b04 	subs.w	fp, sl, r4
 800a46c:	d00b      	beq.n	800a486 <_svfiprintf_r+0x7a>
 800a46e:	465b      	mov	r3, fp
 800a470:	4622      	mov	r2, r4
 800a472:	4629      	mov	r1, r5
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff ff6d 	bl	800a354 <__ssputs_r>
 800a47a:	3001      	adds	r0, #1
 800a47c:	f000 80aa 	beq.w	800a5d4 <_svfiprintf_r+0x1c8>
 800a480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a482:	445a      	add	r2, fp
 800a484:	9209      	str	r2, [sp, #36]	; 0x24
 800a486:	f89a 3000 	ldrb.w	r3, [sl]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 80a2 	beq.w	800a5d4 <_svfiprintf_r+0x1c8>
 800a490:	2300      	movs	r3, #0
 800a492:	f04f 32ff 	mov.w	r2, #4294967295
 800a496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49a:	f10a 0a01 	add.w	sl, sl, #1
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	9307      	str	r3, [sp, #28]
 800a4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a8:	4654      	mov	r4, sl
 800a4aa:	2205      	movs	r2, #5
 800a4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b0:	4851      	ldr	r0, [pc, #324]	; (800a5f8 <_svfiprintf_r+0x1ec>)
 800a4b2:	f7f5 fe9d 	bl	80001f0 <memchr>
 800a4b6:	9a04      	ldr	r2, [sp, #16]
 800a4b8:	b9d8      	cbnz	r0, 800a4f2 <_svfiprintf_r+0xe6>
 800a4ba:	06d0      	lsls	r0, r2, #27
 800a4bc:	bf44      	itt	mi
 800a4be:	2320      	movmi	r3, #32
 800a4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c4:	0711      	lsls	r1, r2, #28
 800a4c6:	bf44      	itt	mi
 800a4c8:	232b      	movmi	r3, #43	; 0x2b
 800a4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d4:	d015      	beq.n	800a502 <_svfiprintf_r+0xf6>
 800a4d6:	9a07      	ldr	r2, [sp, #28]
 800a4d8:	4654      	mov	r4, sl
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f04f 0c0a 	mov.w	ip, #10
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e6:	3b30      	subs	r3, #48	; 0x30
 800a4e8:	2b09      	cmp	r3, #9
 800a4ea:	d94e      	bls.n	800a58a <_svfiprintf_r+0x17e>
 800a4ec:	b1b0      	cbz	r0, 800a51c <_svfiprintf_r+0x110>
 800a4ee:	9207      	str	r2, [sp, #28]
 800a4f0:	e014      	b.n	800a51c <_svfiprintf_r+0x110>
 800a4f2:	eba0 0308 	sub.w	r3, r0, r8
 800a4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	46a2      	mov	sl, r4
 800a500:	e7d2      	b.n	800a4a8 <_svfiprintf_r+0x9c>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	1d19      	adds	r1, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	9103      	str	r1, [sp, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfbb      	ittet	lt
 800a50e:	425b      	neglt	r3, r3
 800a510:	f042 0202 	orrlt.w	r2, r2, #2
 800a514:	9307      	strge	r3, [sp, #28]
 800a516:	9307      	strlt	r3, [sp, #28]
 800a518:	bfb8      	it	lt
 800a51a:	9204      	strlt	r2, [sp, #16]
 800a51c:	7823      	ldrb	r3, [r4, #0]
 800a51e:	2b2e      	cmp	r3, #46	; 0x2e
 800a520:	d10c      	bne.n	800a53c <_svfiprintf_r+0x130>
 800a522:	7863      	ldrb	r3, [r4, #1]
 800a524:	2b2a      	cmp	r3, #42	; 0x2a
 800a526:	d135      	bne.n	800a594 <_svfiprintf_r+0x188>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	1d1a      	adds	r2, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	9203      	str	r2, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfb8      	it	lt
 800a534:	f04f 33ff 	movlt.w	r3, #4294967295
 800a538:	3402      	adds	r4, #2
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a608 <_svfiprintf_r+0x1fc>
 800a540:	7821      	ldrb	r1, [r4, #0]
 800a542:	2203      	movs	r2, #3
 800a544:	4650      	mov	r0, sl
 800a546:	f7f5 fe53 	bl	80001f0 <memchr>
 800a54a:	b140      	cbz	r0, 800a55e <_svfiprintf_r+0x152>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	eba0 000a 	sub.w	r0, r0, sl
 800a552:	fa03 f000 	lsl.w	r0, r3, r0
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	4303      	orrs	r3, r0
 800a55a:	3401      	adds	r4, #1
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a562:	4826      	ldr	r0, [pc, #152]	; (800a5fc <_svfiprintf_r+0x1f0>)
 800a564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a568:	2206      	movs	r2, #6
 800a56a:	f7f5 fe41 	bl	80001f0 <memchr>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d038      	beq.n	800a5e4 <_svfiprintf_r+0x1d8>
 800a572:	4b23      	ldr	r3, [pc, #140]	; (800a600 <_svfiprintf_r+0x1f4>)
 800a574:	bb1b      	cbnz	r3, 800a5be <_svfiprintf_r+0x1b2>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	3307      	adds	r3, #7
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	3308      	adds	r3, #8
 800a580:	9303      	str	r3, [sp, #12]
 800a582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a584:	4433      	add	r3, r6
 800a586:	9309      	str	r3, [sp, #36]	; 0x24
 800a588:	e767      	b.n	800a45a <_svfiprintf_r+0x4e>
 800a58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a58e:	460c      	mov	r4, r1
 800a590:	2001      	movs	r0, #1
 800a592:	e7a5      	b.n	800a4e0 <_svfiprintf_r+0xd4>
 800a594:	2300      	movs	r3, #0
 800a596:	3401      	adds	r4, #1
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	4619      	mov	r1, r3
 800a59c:	f04f 0c0a 	mov.w	ip, #10
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a6:	3a30      	subs	r2, #48	; 0x30
 800a5a8:	2a09      	cmp	r2, #9
 800a5aa:	d903      	bls.n	800a5b4 <_svfiprintf_r+0x1a8>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0c5      	beq.n	800a53c <_svfiprintf_r+0x130>
 800a5b0:	9105      	str	r1, [sp, #20]
 800a5b2:	e7c3      	b.n	800a53c <_svfiprintf_r+0x130>
 800a5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e7f0      	b.n	800a5a0 <_svfiprintf_r+0x194>
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <_svfiprintf_r+0x1f8>)
 800a5c6:	a904      	add	r1, sp, #16
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7fd ff3f 	bl	800844c <_printf_float>
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	d1d6      	bne.n	800a582 <_svfiprintf_r+0x176>
 800a5d4:	89ab      	ldrh	r3, [r5, #12]
 800a5d6:	065b      	lsls	r3, r3, #25
 800a5d8:	f53f af2c 	bmi.w	800a434 <_svfiprintf_r+0x28>
 800a5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5de:	b01d      	add	sp, #116	; 0x74
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4b06      	ldr	r3, [pc, #24]	; (800a604 <_svfiprintf_r+0x1f8>)
 800a5ec:	a904      	add	r1, sp, #16
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7fe f9d0 	bl	8008994 <_printf_i>
 800a5f4:	e7eb      	b.n	800a5ce <_svfiprintf_r+0x1c2>
 800a5f6:	bf00      	nop
 800a5f8:	0800b5d4 	.word	0x0800b5d4
 800a5fc:	0800b5de 	.word	0x0800b5de
 800a600:	0800844d 	.word	0x0800844d
 800a604:	0800a355 	.word	0x0800a355
 800a608:	0800b5da 	.word	0x0800b5da

0800a60c <_sbrk_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d06      	ldr	r5, [pc, #24]	; (800a628 <_sbrk_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	f7f8 fbca 	bl	8002db0 <_sbrk>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_sbrk_r+0x1a>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_sbrk_r+0x1a>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20000530 	.word	0x20000530

0800a62c <__assert_func>:
 800a62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a62e:	4614      	mov	r4, r2
 800a630:	461a      	mov	r2, r3
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <__assert_func+0x2c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4605      	mov	r5, r0
 800a638:	68d8      	ldr	r0, [r3, #12]
 800a63a:	b14c      	cbz	r4, 800a650 <__assert_func+0x24>
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <__assert_func+0x30>)
 800a63e:	9100      	str	r1, [sp, #0]
 800a640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a644:	4906      	ldr	r1, [pc, #24]	; (800a660 <__assert_func+0x34>)
 800a646:	462b      	mov	r3, r5
 800a648:	f000 f80e 	bl	800a668 <fiprintf>
 800a64c:	f000 faac 	bl	800aba8 <abort>
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <__assert_func+0x38>)
 800a652:	461c      	mov	r4, r3
 800a654:	e7f3      	b.n	800a63e <__assert_func+0x12>
 800a656:	bf00      	nop
 800a658:	20000018 	.word	0x20000018
 800a65c:	0800b5e5 	.word	0x0800b5e5
 800a660:	0800b5f2 	.word	0x0800b5f2
 800a664:	0800b620 	.word	0x0800b620

0800a668 <fiprintf>:
 800a668:	b40e      	push	{r1, r2, r3}
 800a66a:	b503      	push	{r0, r1, lr}
 800a66c:	4601      	mov	r1, r0
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <fiprintf+0x20>)
 800a672:	f853 2b04 	ldr.w	r2, [r3], #4
 800a676:	6800      	ldr	r0, [r0, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f000 f897 	bl	800a7ac <_vfiprintf_r>
 800a67e:	b002      	add	sp, #8
 800a680:	f85d eb04 	ldr.w	lr, [sp], #4
 800a684:	b003      	add	sp, #12
 800a686:	4770      	bx	lr
 800a688:	20000018 	.word	0x20000018

0800a68c <__ascii_mbtowc>:
 800a68c:	b082      	sub	sp, #8
 800a68e:	b901      	cbnz	r1, 800a692 <__ascii_mbtowc+0x6>
 800a690:	a901      	add	r1, sp, #4
 800a692:	b142      	cbz	r2, 800a6a6 <__ascii_mbtowc+0x1a>
 800a694:	b14b      	cbz	r3, 800a6aa <__ascii_mbtowc+0x1e>
 800a696:	7813      	ldrb	r3, [r2, #0]
 800a698:	600b      	str	r3, [r1, #0]
 800a69a:	7812      	ldrb	r2, [r2, #0]
 800a69c:	1e10      	subs	r0, r2, #0
 800a69e:	bf18      	it	ne
 800a6a0:	2001      	movne	r0, #1
 800a6a2:	b002      	add	sp, #8
 800a6a4:	4770      	bx	lr
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	e7fb      	b.n	800a6a2 <__ascii_mbtowc+0x16>
 800a6aa:	f06f 0001 	mvn.w	r0, #1
 800a6ae:	e7f8      	b.n	800a6a2 <__ascii_mbtowc+0x16>

0800a6b0 <memmove>:
 800a6b0:	4288      	cmp	r0, r1
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	eb01 0402 	add.w	r4, r1, r2
 800a6b8:	d902      	bls.n	800a6c0 <memmove+0x10>
 800a6ba:	4284      	cmp	r4, r0
 800a6bc:	4623      	mov	r3, r4
 800a6be:	d807      	bhi.n	800a6d0 <memmove+0x20>
 800a6c0:	1e43      	subs	r3, r0, #1
 800a6c2:	42a1      	cmp	r1, r4
 800a6c4:	d008      	beq.n	800a6d8 <memmove+0x28>
 800a6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ce:	e7f8      	b.n	800a6c2 <memmove+0x12>
 800a6d0:	4402      	add	r2, r0
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	428a      	cmp	r2, r1
 800a6d6:	d100      	bne.n	800a6da <memmove+0x2a>
 800a6d8:	bd10      	pop	{r4, pc}
 800a6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6e2:	e7f7      	b.n	800a6d4 <memmove+0x24>

0800a6e4 <__malloc_lock>:
 800a6e4:	4801      	ldr	r0, [pc, #4]	; (800a6ec <__malloc_lock+0x8>)
 800a6e6:	f000 bc1f 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800a6ea:	bf00      	nop
 800a6ec:	20000534 	.word	0x20000534

0800a6f0 <__malloc_unlock>:
 800a6f0:	4801      	ldr	r0, [pc, #4]	; (800a6f8 <__malloc_unlock+0x8>)
 800a6f2:	f000 bc1a 	b.w	800af2a <__retarget_lock_release_recursive>
 800a6f6:	bf00      	nop
 800a6f8:	20000534 	.word	0x20000534

0800a6fc <_realloc_r>:
 800a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a700:	4680      	mov	r8, r0
 800a702:	4614      	mov	r4, r2
 800a704:	460e      	mov	r6, r1
 800a706:	b921      	cbnz	r1, 800a712 <_realloc_r+0x16>
 800a708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a70c:	4611      	mov	r1, r2
 800a70e:	f7ff bdad 	b.w	800a26c <_malloc_r>
 800a712:	b92a      	cbnz	r2, 800a720 <_realloc_r+0x24>
 800a714:	f7ff fd3e 	bl	800a194 <_free_r>
 800a718:	4625      	mov	r5, r4
 800a71a:	4628      	mov	r0, r5
 800a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a720:	f000 fc6a 	bl	800aff8 <_malloc_usable_size_r>
 800a724:	4284      	cmp	r4, r0
 800a726:	4607      	mov	r7, r0
 800a728:	d802      	bhi.n	800a730 <_realloc_r+0x34>
 800a72a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a72e:	d812      	bhi.n	800a756 <_realloc_r+0x5a>
 800a730:	4621      	mov	r1, r4
 800a732:	4640      	mov	r0, r8
 800a734:	f7ff fd9a 	bl	800a26c <_malloc_r>
 800a738:	4605      	mov	r5, r0
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0ed      	beq.n	800a71a <_realloc_r+0x1e>
 800a73e:	42bc      	cmp	r4, r7
 800a740:	4622      	mov	r2, r4
 800a742:	4631      	mov	r1, r6
 800a744:	bf28      	it	cs
 800a746:	463a      	movcs	r2, r7
 800a748:	f7ff f97c 	bl	8009a44 <memcpy>
 800a74c:	4631      	mov	r1, r6
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff fd20 	bl	800a194 <_free_r>
 800a754:	e7e1      	b.n	800a71a <_realloc_r+0x1e>
 800a756:	4635      	mov	r5, r6
 800a758:	e7df      	b.n	800a71a <_realloc_r+0x1e>

0800a75a <__sfputc_r>:
 800a75a:	6893      	ldr	r3, [r2, #8]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	b410      	push	{r4}
 800a762:	6093      	str	r3, [r2, #8]
 800a764:	da08      	bge.n	800a778 <__sfputc_r+0x1e>
 800a766:	6994      	ldr	r4, [r2, #24]
 800a768:	42a3      	cmp	r3, r4
 800a76a:	db01      	blt.n	800a770 <__sfputc_r+0x16>
 800a76c:	290a      	cmp	r1, #10
 800a76e:	d103      	bne.n	800a778 <__sfputc_r+0x1e>
 800a770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a774:	f000 b94a 	b.w	800aa0c <__swbuf_r>
 800a778:	6813      	ldr	r3, [r2, #0]
 800a77a:	1c58      	adds	r0, r3, #1
 800a77c:	6010      	str	r0, [r2, #0]
 800a77e:	7019      	strb	r1, [r3, #0]
 800a780:	4608      	mov	r0, r1
 800a782:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <__sfputs_r>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	4606      	mov	r6, r0
 800a78c:	460f      	mov	r7, r1
 800a78e:	4614      	mov	r4, r2
 800a790:	18d5      	adds	r5, r2, r3
 800a792:	42ac      	cmp	r4, r5
 800a794:	d101      	bne.n	800a79a <__sfputs_r+0x12>
 800a796:	2000      	movs	r0, #0
 800a798:	e007      	b.n	800a7aa <__sfputs_r+0x22>
 800a79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a79e:	463a      	mov	r2, r7
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff ffda 	bl	800a75a <__sfputc_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d1f3      	bne.n	800a792 <__sfputs_r+0xa>
 800a7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7ac <_vfiprintf_r>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	b09d      	sub	sp, #116	; 0x74
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	4698      	mov	r8, r3
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	b118      	cbz	r0, 800a7c4 <_vfiprintf_r+0x18>
 800a7bc:	6983      	ldr	r3, [r0, #24]
 800a7be:	b90b      	cbnz	r3, 800a7c4 <_vfiprintf_r+0x18>
 800a7c0:	f000 fb14 	bl	800adec <__sinit>
 800a7c4:	4b89      	ldr	r3, [pc, #548]	; (800a9ec <_vfiprintf_r+0x240>)
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	d11b      	bne.n	800a802 <_vfiprintf_r+0x56>
 800a7ca:	6875      	ldr	r5, [r6, #4]
 800a7cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ce:	07d9      	lsls	r1, r3, #31
 800a7d0:	d405      	bmi.n	800a7de <_vfiprintf_r+0x32>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	059a      	lsls	r2, r3, #22
 800a7d6:	d402      	bmi.n	800a7de <_vfiprintf_r+0x32>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7da:	f000 fba5 	bl	800af28 <__retarget_lock_acquire_recursive>
 800a7de:	89ab      	ldrh	r3, [r5, #12]
 800a7e0:	071b      	lsls	r3, r3, #28
 800a7e2:	d501      	bpl.n	800a7e8 <_vfiprintf_r+0x3c>
 800a7e4:	692b      	ldr	r3, [r5, #16]
 800a7e6:	b9eb      	cbnz	r3, 800a824 <_vfiprintf_r+0x78>
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 f96e 	bl	800aacc <__swsetup_r>
 800a7f0:	b1c0      	cbz	r0, 800a824 <_vfiprintf_r+0x78>
 800a7f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f4:	07dc      	lsls	r4, r3, #31
 800a7f6:	d50e      	bpl.n	800a816 <_vfiprintf_r+0x6a>
 800a7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fc:	b01d      	add	sp, #116	; 0x74
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	4b7b      	ldr	r3, [pc, #492]	; (800a9f0 <_vfiprintf_r+0x244>)
 800a804:	429d      	cmp	r5, r3
 800a806:	d101      	bne.n	800a80c <_vfiprintf_r+0x60>
 800a808:	68b5      	ldr	r5, [r6, #8]
 800a80a:	e7df      	b.n	800a7cc <_vfiprintf_r+0x20>
 800a80c:	4b79      	ldr	r3, [pc, #484]	; (800a9f4 <_vfiprintf_r+0x248>)
 800a80e:	429d      	cmp	r5, r3
 800a810:	bf08      	it	eq
 800a812:	68f5      	ldreq	r5, [r6, #12]
 800a814:	e7da      	b.n	800a7cc <_vfiprintf_r+0x20>
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4ed      	bmi.n	800a7f8 <_vfiprintf_r+0x4c>
 800a81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a81e:	f000 fb84 	bl	800af2a <__retarget_lock_release_recursive>
 800a822:	e7e9      	b.n	800a7f8 <_vfiprintf_r+0x4c>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	; 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a832:	2330      	movs	r3, #48	; 0x30
 800a834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9f8 <_vfiprintf_r+0x24c>
 800a838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a83c:	f04f 0901 	mov.w	r9, #1
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0xa2>
 800a84a:	2a25      	cmp	r2, #37	; 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x96>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xc0>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ff94 	bl	800a788 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80aa 	beq.w	800a9ba <_vfiprintf_r+0x20e>
 800a866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	; 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80a2 	beq.w	800a9ba <_vfiprintf_r+0x20e>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a88c:	931a      	str	r3, [sp, #104]	; 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4858      	ldr	r0, [pc, #352]	; (800a9f8 <_vfiprintf_r+0x24c>)
 800a898:	f7f5 fcaa 	bl	80001f0 <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x12c>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	; 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x13c>
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	; 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94e      	bls.n	800a970 <_vfiprintf_r+0x1c4>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x156>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x156>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	46a2      	mov	sl, r4
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xe2>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	; 0x2e
 800a906:	d10c      	bne.n	800a922 <_vfiprintf_r+0x176>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	; 0x2a
 800a90c:	d135      	bne.n	800a97a <_vfiprintf_r+0x1ce>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9203      	str	r2, [sp, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	bfb8      	it	lt
 800a91a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a91e:	3402      	adds	r4, #2
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa08 <_vfiprintf_r+0x25c>
 800a926:	7821      	ldrb	r1, [r4, #0]
 800a928:	2203      	movs	r2, #3
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7f5 fc60 	bl	80001f0 <memchr>
 800a930:	b140      	cbz	r0, 800a944 <_vfiprintf_r+0x198>
 800a932:	2340      	movs	r3, #64	; 0x40
 800a934:	eba0 000a 	sub.w	r0, r0, sl
 800a938:	fa03 f000 	lsl.w	r0, r3, r0
 800a93c:	9b04      	ldr	r3, [sp, #16]
 800a93e:	4303      	orrs	r3, r0
 800a940:	3401      	adds	r4, #1
 800a942:	9304      	str	r3, [sp, #16]
 800a944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a948:	482c      	ldr	r0, [pc, #176]	; (800a9fc <_vfiprintf_r+0x250>)
 800a94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a94e:	2206      	movs	r2, #6
 800a950:	f7f5 fc4e 	bl	80001f0 <memchr>
 800a954:	2800      	cmp	r0, #0
 800a956:	d03f      	beq.n	800a9d8 <_vfiprintf_r+0x22c>
 800a958:	4b29      	ldr	r3, [pc, #164]	; (800aa00 <_vfiprintf_r+0x254>)
 800a95a:	bb1b      	cbnz	r3, 800a9a4 <_vfiprintf_r+0x1f8>
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	3307      	adds	r3, #7
 800a960:	f023 0307 	bic.w	r3, r3, #7
 800a964:	3308      	adds	r3, #8
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96a:	443b      	add	r3, r7
 800a96c:	9309      	str	r3, [sp, #36]	; 0x24
 800a96e:	e767      	b.n	800a840 <_vfiprintf_r+0x94>
 800a970:	fb0c 3202 	mla	r2, ip, r2, r3
 800a974:	460c      	mov	r4, r1
 800a976:	2001      	movs	r0, #1
 800a978:	e7a5      	b.n	800a8c6 <_vfiprintf_r+0x11a>
 800a97a:	2300      	movs	r3, #0
 800a97c:	3401      	adds	r4, #1
 800a97e:	9305      	str	r3, [sp, #20]
 800a980:	4619      	mov	r1, r3
 800a982:	f04f 0c0a 	mov.w	ip, #10
 800a986:	4620      	mov	r0, r4
 800a988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98c:	3a30      	subs	r2, #48	; 0x30
 800a98e:	2a09      	cmp	r2, #9
 800a990:	d903      	bls.n	800a99a <_vfiprintf_r+0x1ee>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0c5      	beq.n	800a922 <_vfiprintf_r+0x176>
 800a996:	9105      	str	r1, [sp, #20]
 800a998:	e7c3      	b.n	800a922 <_vfiprintf_r+0x176>
 800a99a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a99e:	4604      	mov	r4, r0
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7f0      	b.n	800a986 <_vfiprintf_r+0x1da>
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4b16      	ldr	r3, [pc, #88]	; (800aa04 <_vfiprintf_r+0x258>)
 800a9ac:	a904      	add	r1, sp, #16
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f7fd fd4c 	bl	800844c <_printf_float>
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	1c78      	adds	r0, r7, #1
 800a9b8:	d1d6      	bne.n	800a968 <_vfiprintf_r+0x1bc>
 800a9ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9bc:	07d9      	lsls	r1, r3, #31
 800a9be:	d405      	bmi.n	800a9cc <_vfiprintf_r+0x220>
 800a9c0:	89ab      	ldrh	r3, [r5, #12]
 800a9c2:	059a      	lsls	r2, r3, #22
 800a9c4:	d402      	bmi.n	800a9cc <_vfiprintf_r+0x220>
 800a9c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9c8:	f000 faaf 	bl	800af2a <__retarget_lock_release_recursive>
 800a9cc:	89ab      	ldrh	r3, [r5, #12]
 800a9ce:	065b      	lsls	r3, r3, #25
 800a9d0:	f53f af12 	bmi.w	800a7f8 <_vfiprintf_r+0x4c>
 800a9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d6:	e711      	b.n	800a7fc <_vfiprintf_r+0x50>
 800a9d8:	ab03      	add	r3, sp, #12
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	462a      	mov	r2, r5
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <_vfiprintf_r+0x258>)
 800a9e0:	a904      	add	r1, sp, #16
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7fd ffd6 	bl	8008994 <_printf_i>
 800a9e8:	e7e4      	b.n	800a9b4 <_vfiprintf_r+0x208>
 800a9ea:	bf00      	nop
 800a9ec:	0800b64c 	.word	0x0800b64c
 800a9f0:	0800b66c 	.word	0x0800b66c
 800a9f4:	0800b62c 	.word	0x0800b62c
 800a9f8:	0800b5d4 	.word	0x0800b5d4
 800a9fc:	0800b5de 	.word	0x0800b5de
 800aa00:	0800844d 	.word	0x0800844d
 800aa04:	0800a789 	.word	0x0800a789
 800aa08:	0800b5da 	.word	0x0800b5da

0800aa0c <__swbuf_r>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	460e      	mov	r6, r1
 800aa10:	4614      	mov	r4, r2
 800aa12:	4605      	mov	r5, r0
 800aa14:	b118      	cbz	r0, 800aa1e <__swbuf_r+0x12>
 800aa16:	6983      	ldr	r3, [r0, #24]
 800aa18:	b90b      	cbnz	r3, 800aa1e <__swbuf_r+0x12>
 800aa1a:	f000 f9e7 	bl	800adec <__sinit>
 800aa1e:	4b21      	ldr	r3, [pc, #132]	; (800aaa4 <__swbuf_r+0x98>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	d12b      	bne.n	800aa7c <__swbuf_r+0x70>
 800aa24:	686c      	ldr	r4, [r5, #4]
 800aa26:	69a3      	ldr	r3, [r4, #24]
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	071a      	lsls	r2, r3, #28
 800aa2e:	d52f      	bpl.n	800aa90 <__swbuf_r+0x84>
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	b36b      	cbz	r3, 800aa90 <__swbuf_r+0x84>
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	6820      	ldr	r0, [r4, #0]
 800aa38:	1ac0      	subs	r0, r0, r3
 800aa3a:	6963      	ldr	r3, [r4, #20]
 800aa3c:	b2f6      	uxtb	r6, r6
 800aa3e:	4283      	cmp	r3, r0
 800aa40:	4637      	mov	r7, r6
 800aa42:	dc04      	bgt.n	800aa4e <__swbuf_r+0x42>
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f93c 	bl	800acc4 <_fflush_r>
 800aa4c:	bb30      	cbnz	r0, 800aa9c <__swbuf_r+0x90>
 800aa4e:	68a3      	ldr	r3, [r4, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	60a3      	str	r3, [r4, #8]
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	6022      	str	r2, [r4, #0]
 800aa5a:	701e      	strb	r6, [r3, #0]
 800aa5c:	6963      	ldr	r3, [r4, #20]
 800aa5e:	3001      	adds	r0, #1
 800aa60:	4283      	cmp	r3, r0
 800aa62:	d004      	beq.n	800aa6e <__swbuf_r+0x62>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	07db      	lsls	r3, r3, #31
 800aa68:	d506      	bpl.n	800aa78 <__swbuf_r+0x6c>
 800aa6a:	2e0a      	cmp	r6, #10
 800aa6c:	d104      	bne.n	800aa78 <__swbuf_r+0x6c>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4628      	mov	r0, r5
 800aa72:	f000 f927 	bl	800acc4 <_fflush_r>
 800aa76:	b988      	cbnz	r0, 800aa9c <__swbuf_r+0x90>
 800aa78:	4638      	mov	r0, r7
 800aa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <__swbuf_r+0x9c>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	d101      	bne.n	800aa86 <__swbuf_r+0x7a>
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	e7cf      	b.n	800aa26 <__swbuf_r+0x1a>
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <__swbuf_r+0xa0>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	68ec      	ldreq	r4, [r5, #12]
 800aa8e:	e7ca      	b.n	800aa26 <__swbuf_r+0x1a>
 800aa90:	4621      	mov	r1, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f81a 	bl	800aacc <__swsetup_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0cb      	beq.n	800aa34 <__swbuf_r+0x28>
 800aa9c:	f04f 37ff 	mov.w	r7, #4294967295
 800aaa0:	e7ea      	b.n	800aa78 <__swbuf_r+0x6c>
 800aaa2:	bf00      	nop
 800aaa4:	0800b64c 	.word	0x0800b64c
 800aaa8:	0800b66c 	.word	0x0800b66c
 800aaac:	0800b62c 	.word	0x0800b62c

0800aab0 <__ascii_wctomb>:
 800aab0:	b149      	cbz	r1, 800aac6 <__ascii_wctomb+0x16>
 800aab2:	2aff      	cmp	r2, #255	; 0xff
 800aab4:	bf85      	ittet	hi
 800aab6:	238a      	movhi	r3, #138	; 0x8a
 800aab8:	6003      	strhi	r3, [r0, #0]
 800aaba:	700a      	strbls	r2, [r1, #0]
 800aabc:	f04f 30ff 	movhi.w	r0, #4294967295
 800aac0:	bf98      	it	ls
 800aac2:	2001      	movls	r0, #1
 800aac4:	4770      	bx	lr
 800aac6:	4608      	mov	r0, r1
 800aac8:	4770      	bx	lr
	...

0800aacc <__swsetup_r>:
 800aacc:	4b32      	ldr	r3, [pc, #200]	; (800ab98 <__swsetup_r+0xcc>)
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	681d      	ldr	r5, [r3, #0]
 800aad2:	4606      	mov	r6, r0
 800aad4:	460c      	mov	r4, r1
 800aad6:	b125      	cbz	r5, 800aae2 <__swsetup_r+0x16>
 800aad8:	69ab      	ldr	r3, [r5, #24]
 800aada:	b913      	cbnz	r3, 800aae2 <__swsetup_r+0x16>
 800aadc:	4628      	mov	r0, r5
 800aade:	f000 f985 	bl	800adec <__sinit>
 800aae2:	4b2e      	ldr	r3, [pc, #184]	; (800ab9c <__swsetup_r+0xd0>)
 800aae4:	429c      	cmp	r4, r3
 800aae6:	d10f      	bne.n	800ab08 <__swsetup_r+0x3c>
 800aae8:	686c      	ldr	r4, [r5, #4]
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf0:	0719      	lsls	r1, r3, #28
 800aaf2:	d42c      	bmi.n	800ab4e <__swsetup_r+0x82>
 800aaf4:	06dd      	lsls	r5, r3, #27
 800aaf6:	d411      	bmi.n	800ab1c <__swsetup_r+0x50>
 800aaf8:	2309      	movs	r3, #9
 800aafa:	6033      	str	r3, [r6, #0]
 800aafc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	f04f 30ff 	mov.w	r0, #4294967295
 800ab06:	e03e      	b.n	800ab86 <__swsetup_r+0xba>
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <__swsetup_r+0xd4>)
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	d101      	bne.n	800ab12 <__swsetup_r+0x46>
 800ab0e:	68ac      	ldr	r4, [r5, #8]
 800ab10:	e7eb      	b.n	800aaea <__swsetup_r+0x1e>
 800ab12:	4b24      	ldr	r3, [pc, #144]	; (800aba4 <__swsetup_r+0xd8>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	bf08      	it	eq
 800ab18:	68ec      	ldreq	r4, [r5, #12]
 800ab1a:	e7e6      	b.n	800aaea <__swsetup_r+0x1e>
 800ab1c:	0758      	lsls	r0, r3, #29
 800ab1e:	d512      	bpl.n	800ab46 <__swsetup_r+0x7a>
 800ab20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab22:	b141      	cbz	r1, 800ab36 <__swsetup_r+0x6a>
 800ab24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	d002      	beq.n	800ab32 <__swsetup_r+0x66>
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff fb31 	bl	800a194 <_free_r>
 800ab32:	2300      	movs	r3, #0
 800ab34:	6363      	str	r3, [r4, #52]	; 0x34
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6063      	str	r3, [r4, #4]
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	f043 0308 	orr.w	r3, r3, #8
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	b94b      	cbnz	r3, 800ab66 <__swsetup_r+0x9a>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab5c:	d003      	beq.n	800ab66 <__swsetup_r+0x9a>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4630      	mov	r0, r6
 800ab62:	f000 fa09 	bl	800af78 <__smakebuf_r>
 800ab66:	89a0      	ldrh	r0, [r4, #12]
 800ab68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab6c:	f010 0301 	ands.w	r3, r0, #1
 800ab70:	d00a      	beq.n	800ab88 <__swsetup_r+0xbc>
 800ab72:	2300      	movs	r3, #0
 800ab74:	60a3      	str	r3, [r4, #8]
 800ab76:	6963      	ldr	r3, [r4, #20]
 800ab78:	425b      	negs	r3, r3
 800ab7a:	61a3      	str	r3, [r4, #24]
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	b943      	cbnz	r3, 800ab92 <__swsetup_r+0xc6>
 800ab80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab84:	d1ba      	bne.n	800aafc <__swsetup_r+0x30>
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	0781      	lsls	r1, r0, #30
 800ab8a:	bf58      	it	pl
 800ab8c:	6963      	ldrpl	r3, [r4, #20]
 800ab8e:	60a3      	str	r3, [r4, #8]
 800ab90:	e7f4      	b.n	800ab7c <__swsetup_r+0xb0>
 800ab92:	2000      	movs	r0, #0
 800ab94:	e7f7      	b.n	800ab86 <__swsetup_r+0xba>
 800ab96:	bf00      	nop
 800ab98:	20000018 	.word	0x20000018
 800ab9c:	0800b64c 	.word	0x0800b64c
 800aba0:	0800b66c 	.word	0x0800b66c
 800aba4:	0800b62c 	.word	0x0800b62c

0800aba8 <abort>:
 800aba8:	b508      	push	{r3, lr}
 800abaa:	2006      	movs	r0, #6
 800abac:	f000 fa54 	bl	800b058 <raise>
 800abb0:	2001      	movs	r0, #1
 800abb2:	f7f8 f885 	bl	8002cc0 <_exit>
	...

0800abb8 <__sflush_r>:
 800abb8:	898a      	ldrh	r2, [r1, #12]
 800abba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbe:	4605      	mov	r5, r0
 800abc0:	0710      	lsls	r0, r2, #28
 800abc2:	460c      	mov	r4, r1
 800abc4:	d458      	bmi.n	800ac78 <__sflush_r+0xc0>
 800abc6:	684b      	ldr	r3, [r1, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dc05      	bgt.n	800abd8 <__sflush_r+0x20>
 800abcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dc02      	bgt.n	800abd8 <__sflush_r+0x20>
 800abd2:	2000      	movs	r0, #0
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abda:	2e00      	cmp	r6, #0
 800abdc:	d0f9      	beq.n	800abd2 <__sflush_r+0x1a>
 800abde:	2300      	movs	r3, #0
 800abe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abe4:	682f      	ldr	r7, [r5, #0]
 800abe6:	602b      	str	r3, [r5, #0]
 800abe8:	d032      	beq.n	800ac50 <__sflush_r+0x98>
 800abea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	075a      	lsls	r2, r3, #29
 800abf0:	d505      	bpl.n	800abfe <__sflush_r+0x46>
 800abf2:	6863      	ldr	r3, [r4, #4]
 800abf4:	1ac0      	subs	r0, r0, r3
 800abf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abf8:	b10b      	cbz	r3, 800abfe <__sflush_r+0x46>
 800abfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abfc:	1ac0      	subs	r0, r0, r3
 800abfe:	2300      	movs	r3, #0
 800ac00:	4602      	mov	r2, r0
 800ac02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac04:	6a21      	ldr	r1, [r4, #32]
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b0      	blx	r6
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	d106      	bne.n	800ac1e <__sflush_r+0x66>
 800ac10:	6829      	ldr	r1, [r5, #0]
 800ac12:	291d      	cmp	r1, #29
 800ac14:	d82c      	bhi.n	800ac70 <__sflush_r+0xb8>
 800ac16:	4a2a      	ldr	r2, [pc, #168]	; (800acc0 <__sflush_r+0x108>)
 800ac18:	40ca      	lsrs	r2, r1
 800ac1a:	07d6      	lsls	r6, r2, #31
 800ac1c:	d528      	bpl.n	800ac70 <__sflush_r+0xb8>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	6062      	str	r2, [r4, #4]
 800ac22:	04d9      	lsls	r1, r3, #19
 800ac24:	6922      	ldr	r2, [r4, #16]
 800ac26:	6022      	str	r2, [r4, #0]
 800ac28:	d504      	bpl.n	800ac34 <__sflush_r+0x7c>
 800ac2a:	1c42      	adds	r2, r0, #1
 800ac2c:	d101      	bne.n	800ac32 <__sflush_r+0x7a>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	b903      	cbnz	r3, 800ac34 <__sflush_r+0x7c>
 800ac32:	6560      	str	r0, [r4, #84]	; 0x54
 800ac34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac36:	602f      	str	r7, [r5, #0]
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d0ca      	beq.n	800abd2 <__sflush_r+0x1a>
 800ac3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac40:	4299      	cmp	r1, r3
 800ac42:	d002      	beq.n	800ac4a <__sflush_r+0x92>
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7ff faa5 	bl	800a194 <_free_r>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac4e:	e7c1      	b.n	800abd4 <__sflush_r+0x1c>
 800ac50:	6a21      	ldr	r1, [r4, #32]
 800ac52:	2301      	movs	r3, #1
 800ac54:	4628      	mov	r0, r5
 800ac56:	47b0      	blx	r6
 800ac58:	1c41      	adds	r1, r0, #1
 800ac5a:	d1c7      	bne.n	800abec <__sflush_r+0x34>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0c4      	beq.n	800abec <__sflush_r+0x34>
 800ac62:	2b1d      	cmp	r3, #29
 800ac64:	d001      	beq.n	800ac6a <__sflush_r+0xb2>
 800ac66:	2b16      	cmp	r3, #22
 800ac68:	d101      	bne.n	800ac6e <__sflush_r+0xb6>
 800ac6a:	602f      	str	r7, [r5, #0]
 800ac6c:	e7b1      	b.n	800abd2 <__sflush_r+0x1a>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	e7ad      	b.n	800abd4 <__sflush_r+0x1c>
 800ac78:	690f      	ldr	r7, [r1, #16]
 800ac7a:	2f00      	cmp	r7, #0
 800ac7c:	d0a9      	beq.n	800abd2 <__sflush_r+0x1a>
 800ac7e:	0793      	lsls	r3, r2, #30
 800ac80:	680e      	ldr	r6, [r1, #0]
 800ac82:	bf08      	it	eq
 800ac84:	694b      	ldreq	r3, [r1, #20]
 800ac86:	600f      	str	r7, [r1, #0]
 800ac88:	bf18      	it	ne
 800ac8a:	2300      	movne	r3, #0
 800ac8c:	eba6 0807 	sub.w	r8, r6, r7
 800ac90:	608b      	str	r3, [r1, #8]
 800ac92:	f1b8 0f00 	cmp.w	r8, #0
 800ac96:	dd9c      	ble.n	800abd2 <__sflush_r+0x1a>
 800ac98:	6a21      	ldr	r1, [r4, #32]
 800ac9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac9c:	4643      	mov	r3, r8
 800ac9e:	463a      	mov	r2, r7
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b0      	blx	r6
 800aca4:	2800      	cmp	r0, #0
 800aca6:	dc06      	bgt.n	800acb6 <__sflush_r+0xfe>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	e78e      	b.n	800abd4 <__sflush_r+0x1c>
 800acb6:	4407      	add	r7, r0
 800acb8:	eba8 0800 	sub.w	r8, r8, r0
 800acbc:	e7e9      	b.n	800ac92 <__sflush_r+0xda>
 800acbe:	bf00      	nop
 800acc0:	20400001 	.word	0x20400001

0800acc4 <_fflush_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	690b      	ldr	r3, [r1, #16]
 800acc8:	4605      	mov	r5, r0
 800acca:	460c      	mov	r4, r1
 800accc:	b913      	cbnz	r3, 800acd4 <_fflush_r+0x10>
 800acce:	2500      	movs	r5, #0
 800acd0:	4628      	mov	r0, r5
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	b118      	cbz	r0, 800acde <_fflush_r+0x1a>
 800acd6:	6983      	ldr	r3, [r0, #24]
 800acd8:	b90b      	cbnz	r3, 800acde <_fflush_r+0x1a>
 800acda:	f000 f887 	bl	800adec <__sinit>
 800acde:	4b14      	ldr	r3, [pc, #80]	; (800ad30 <_fflush_r+0x6c>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	d11b      	bne.n	800ad1c <_fflush_r+0x58>
 800ace4:	686c      	ldr	r4, [r5, #4]
 800ace6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0ef      	beq.n	800acce <_fflush_r+0xa>
 800acee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acf0:	07d0      	lsls	r0, r2, #31
 800acf2:	d404      	bmi.n	800acfe <_fflush_r+0x3a>
 800acf4:	0599      	lsls	r1, r3, #22
 800acf6:	d402      	bmi.n	800acfe <_fflush_r+0x3a>
 800acf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acfa:	f000 f915 	bl	800af28 <__retarget_lock_acquire_recursive>
 800acfe:	4628      	mov	r0, r5
 800ad00:	4621      	mov	r1, r4
 800ad02:	f7ff ff59 	bl	800abb8 <__sflush_r>
 800ad06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad08:	07da      	lsls	r2, r3, #31
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	d4e0      	bmi.n	800acd0 <_fflush_r+0xc>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	059b      	lsls	r3, r3, #22
 800ad12:	d4dd      	bmi.n	800acd0 <_fflush_r+0xc>
 800ad14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad16:	f000 f908 	bl	800af2a <__retarget_lock_release_recursive>
 800ad1a:	e7d9      	b.n	800acd0 <_fflush_r+0xc>
 800ad1c:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <_fflush_r+0x70>)
 800ad1e:	429c      	cmp	r4, r3
 800ad20:	d101      	bne.n	800ad26 <_fflush_r+0x62>
 800ad22:	68ac      	ldr	r4, [r5, #8]
 800ad24:	e7df      	b.n	800ace6 <_fflush_r+0x22>
 800ad26:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <_fflush_r+0x74>)
 800ad28:	429c      	cmp	r4, r3
 800ad2a:	bf08      	it	eq
 800ad2c:	68ec      	ldreq	r4, [r5, #12]
 800ad2e:	e7da      	b.n	800ace6 <_fflush_r+0x22>
 800ad30:	0800b64c 	.word	0x0800b64c
 800ad34:	0800b66c 	.word	0x0800b66c
 800ad38:	0800b62c 	.word	0x0800b62c

0800ad3c <std>:
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	4604      	mov	r4, r0
 800ad42:	e9c0 3300 	strd	r3, r3, [r0]
 800ad46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad4a:	6083      	str	r3, [r0, #8]
 800ad4c:	8181      	strh	r1, [r0, #12]
 800ad4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad50:	81c2      	strh	r2, [r0, #14]
 800ad52:	6183      	str	r3, [r0, #24]
 800ad54:	4619      	mov	r1, r3
 800ad56:	2208      	movs	r2, #8
 800ad58:	305c      	adds	r0, #92	; 0x5c
 800ad5a:	f7fd facf 	bl	80082fc <memset>
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x38>)
 800ad60:	6263      	str	r3, [r4, #36]	; 0x24
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <std+0x3c>)
 800ad64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <std+0x40>)
 800ad68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad6a:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <std+0x44>)
 800ad6c:	6224      	str	r4, [r4, #32]
 800ad6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	bf00      	nop
 800ad74:	0800b091 	.word	0x0800b091
 800ad78:	0800b0b3 	.word	0x0800b0b3
 800ad7c:	0800b0eb 	.word	0x0800b0eb
 800ad80:	0800b10f 	.word	0x0800b10f

0800ad84 <_cleanup_r>:
 800ad84:	4901      	ldr	r1, [pc, #4]	; (800ad8c <_cleanup_r+0x8>)
 800ad86:	f000 b8af 	b.w	800aee8 <_fwalk_reent>
 800ad8a:	bf00      	nop
 800ad8c:	0800acc5 	.word	0x0800acc5

0800ad90 <__sfmoreglue>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	2268      	movs	r2, #104	; 0x68
 800ad94:	1e4d      	subs	r5, r1, #1
 800ad96:	4355      	muls	r5, r2
 800ad98:	460e      	mov	r6, r1
 800ad9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad9e:	f7ff fa65 	bl	800a26c <_malloc_r>
 800ada2:	4604      	mov	r4, r0
 800ada4:	b140      	cbz	r0, 800adb8 <__sfmoreglue+0x28>
 800ada6:	2100      	movs	r1, #0
 800ada8:	e9c0 1600 	strd	r1, r6, [r0]
 800adac:	300c      	adds	r0, #12
 800adae:	60a0      	str	r0, [r4, #8]
 800adb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adb4:	f7fd faa2 	bl	80082fc <memset>
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}

0800adbc <__sfp_lock_acquire>:
 800adbc:	4801      	ldr	r0, [pc, #4]	; (800adc4 <__sfp_lock_acquire+0x8>)
 800adbe:	f000 b8b3 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800adc2:	bf00      	nop
 800adc4:	20000535 	.word	0x20000535

0800adc8 <__sfp_lock_release>:
 800adc8:	4801      	ldr	r0, [pc, #4]	; (800add0 <__sfp_lock_release+0x8>)
 800adca:	f000 b8ae 	b.w	800af2a <__retarget_lock_release_recursive>
 800adce:	bf00      	nop
 800add0:	20000535 	.word	0x20000535

0800add4 <__sinit_lock_acquire>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__sinit_lock_acquire+0x8>)
 800add6:	f000 b8a7 	b.w	800af28 <__retarget_lock_acquire_recursive>
 800adda:	bf00      	nop
 800addc:	20000536 	.word	0x20000536

0800ade0 <__sinit_lock_release>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__sinit_lock_release+0x8>)
 800ade2:	f000 b8a2 	b.w	800af2a <__retarget_lock_release_recursive>
 800ade6:	bf00      	nop
 800ade8:	20000536 	.word	0x20000536

0800adec <__sinit>:
 800adec:	b510      	push	{r4, lr}
 800adee:	4604      	mov	r4, r0
 800adf0:	f7ff fff0 	bl	800add4 <__sinit_lock_acquire>
 800adf4:	69a3      	ldr	r3, [r4, #24]
 800adf6:	b11b      	cbz	r3, 800ae00 <__sinit+0x14>
 800adf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adfc:	f7ff bff0 	b.w	800ade0 <__sinit_lock_release>
 800ae00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae04:	6523      	str	r3, [r4, #80]	; 0x50
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <__sinit+0x68>)
 800ae08:	4a13      	ldr	r2, [pc, #76]	; (800ae58 <__sinit+0x6c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	bf04      	itt	eq
 800ae12:	2301      	moveq	r3, #1
 800ae14:	61a3      	streq	r3, [r4, #24]
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f820 	bl	800ae5c <__sfp>
 800ae1c:	6060      	str	r0, [r4, #4]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 f81c 	bl	800ae5c <__sfp>
 800ae24:	60a0      	str	r0, [r4, #8]
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 f818 	bl	800ae5c <__sfp>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	60e0      	str	r0, [r4, #12]
 800ae30:	2104      	movs	r1, #4
 800ae32:	6860      	ldr	r0, [r4, #4]
 800ae34:	f7ff ff82 	bl	800ad3c <std>
 800ae38:	68a0      	ldr	r0, [r4, #8]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	2109      	movs	r1, #9
 800ae3e:	f7ff ff7d 	bl	800ad3c <std>
 800ae42:	68e0      	ldr	r0, [r4, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	2112      	movs	r1, #18
 800ae48:	f7ff ff78 	bl	800ad3c <std>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	61a3      	str	r3, [r4, #24]
 800ae50:	e7d2      	b.n	800adf8 <__sinit+0xc>
 800ae52:	bf00      	nop
 800ae54:	0800b2ac 	.word	0x0800b2ac
 800ae58:	0800ad85 	.word	0x0800ad85

0800ae5c <__sfp>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	4607      	mov	r7, r0
 800ae60:	f7ff ffac 	bl	800adbc <__sfp_lock_acquire>
 800ae64:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <__sfp+0x84>)
 800ae66:	681e      	ldr	r6, [r3, #0]
 800ae68:	69b3      	ldr	r3, [r6, #24]
 800ae6a:	b913      	cbnz	r3, 800ae72 <__sfp+0x16>
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff ffbd 	bl	800adec <__sinit>
 800ae72:	3648      	adds	r6, #72	; 0x48
 800ae74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	d503      	bpl.n	800ae84 <__sfp+0x28>
 800ae7c:	6833      	ldr	r3, [r6, #0]
 800ae7e:	b30b      	cbz	r3, 800aec4 <__sfp+0x68>
 800ae80:	6836      	ldr	r6, [r6, #0]
 800ae82:	e7f7      	b.n	800ae74 <__sfp+0x18>
 800ae84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae88:	b9d5      	cbnz	r5, 800aec0 <__sfp+0x64>
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <__sfp+0x88>)
 800ae8c:	60e3      	str	r3, [r4, #12]
 800ae8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae92:	6665      	str	r5, [r4, #100]	; 0x64
 800ae94:	f000 f847 	bl	800af26 <__retarget_lock_init_recursive>
 800ae98:	f7ff ff96 	bl	800adc8 <__sfp_lock_release>
 800ae9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aea4:	6025      	str	r5, [r4, #0]
 800aea6:	61a5      	str	r5, [r4, #24]
 800aea8:	2208      	movs	r2, #8
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeb0:	f7fd fa24 	bl	80082fc <memset>
 800aeb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aebc:	4620      	mov	r0, r4
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	3468      	adds	r4, #104	; 0x68
 800aec2:	e7d9      	b.n	800ae78 <__sfp+0x1c>
 800aec4:	2104      	movs	r1, #4
 800aec6:	4638      	mov	r0, r7
 800aec8:	f7ff ff62 	bl	800ad90 <__sfmoreglue>
 800aecc:	4604      	mov	r4, r0
 800aece:	6030      	str	r0, [r6, #0]
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d1d5      	bne.n	800ae80 <__sfp+0x24>
 800aed4:	f7ff ff78 	bl	800adc8 <__sfp_lock_release>
 800aed8:	230c      	movs	r3, #12
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	e7ee      	b.n	800aebc <__sfp+0x60>
 800aede:	bf00      	nop
 800aee0:	0800b2ac 	.word	0x0800b2ac
 800aee4:	ffff0001 	.word	0xffff0001

0800aee8 <_fwalk_reent>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	4606      	mov	r6, r0
 800aeee:	4688      	mov	r8, r1
 800aef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aef4:	2700      	movs	r7, #0
 800aef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aefa:	f1b9 0901 	subs.w	r9, r9, #1
 800aefe:	d505      	bpl.n	800af0c <_fwalk_reent+0x24>
 800af00:	6824      	ldr	r4, [r4, #0]
 800af02:	2c00      	cmp	r4, #0
 800af04:	d1f7      	bne.n	800aef6 <_fwalk_reent+0xe>
 800af06:	4638      	mov	r0, r7
 800af08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af0c:	89ab      	ldrh	r3, [r5, #12]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d907      	bls.n	800af22 <_fwalk_reent+0x3a>
 800af12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af16:	3301      	adds	r3, #1
 800af18:	d003      	beq.n	800af22 <_fwalk_reent+0x3a>
 800af1a:	4629      	mov	r1, r5
 800af1c:	4630      	mov	r0, r6
 800af1e:	47c0      	blx	r8
 800af20:	4307      	orrs	r7, r0
 800af22:	3568      	adds	r5, #104	; 0x68
 800af24:	e7e9      	b.n	800aefa <_fwalk_reent+0x12>

0800af26 <__retarget_lock_init_recursive>:
 800af26:	4770      	bx	lr

0800af28 <__retarget_lock_acquire_recursive>:
 800af28:	4770      	bx	lr

0800af2a <__retarget_lock_release_recursive>:
 800af2a:	4770      	bx	lr

0800af2c <__swhatbuf_r>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	460e      	mov	r6, r1
 800af30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af34:	2900      	cmp	r1, #0
 800af36:	b096      	sub	sp, #88	; 0x58
 800af38:	4614      	mov	r4, r2
 800af3a:	461d      	mov	r5, r3
 800af3c:	da08      	bge.n	800af50 <__swhatbuf_r+0x24>
 800af3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	061a      	lsls	r2, r3, #24
 800af48:	d410      	bmi.n	800af6c <__swhatbuf_r+0x40>
 800af4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af4e:	e00e      	b.n	800af6e <__swhatbuf_r+0x42>
 800af50:	466a      	mov	r2, sp
 800af52:	f000 f903 	bl	800b15c <_fstat_r>
 800af56:	2800      	cmp	r0, #0
 800af58:	dbf1      	blt.n	800af3e <__swhatbuf_r+0x12>
 800af5a:	9a01      	ldr	r2, [sp, #4]
 800af5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af64:	425a      	negs	r2, r3
 800af66:	415a      	adcs	r2, r3
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	e7ee      	b.n	800af4a <__swhatbuf_r+0x1e>
 800af6c:	2340      	movs	r3, #64	; 0x40
 800af6e:	2000      	movs	r0, #0
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	b016      	add	sp, #88	; 0x58
 800af74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af78 <__smakebuf_r>:
 800af78:	898b      	ldrh	r3, [r1, #12]
 800af7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af7c:	079d      	lsls	r5, r3, #30
 800af7e:	4606      	mov	r6, r0
 800af80:	460c      	mov	r4, r1
 800af82:	d507      	bpl.n	800af94 <__smakebuf_r+0x1c>
 800af84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	2301      	movs	r3, #1
 800af8e:	6163      	str	r3, [r4, #20]
 800af90:	b002      	add	sp, #8
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	ab01      	add	r3, sp, #4
 800af96:	466a      	mov	r2, sp
 800af98:	f7ff ffc8 	bl	800af2c <__swhatbuf_r>
 800af9c:	9900      	ldr	r1, [sp, #0]
 800af9e:	4605      	mov	r5, r0
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff f963 	bl	800a26c <_malloc_r>
 800afa6:	b948      	cbnz	r0, 800afbc <__smakebuf_r+0x44>
 800afa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afac:	059a      	lsls	r2, r3, #22
 800afae:	d4ef      	bmi.n	800af90 <__smakebuf_r+0x18>
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	e7e3      	b.n	800af84 <__smakebuf_r+0xc>
 800afbc:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <__smakebuf_r+0x7c>)
 800afbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800afc0:	89a3      	ldrh	r3, [r4, #12]
 800afc2:	6020      	str	r0, [r4, #0]
 800afc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	9b00      	ldr	r3, [sp, #0]
 800afcc:	6163      	str	r3, [r4, #20]
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	6120      	str	r0, [r4, #16]
 800afd2:	b15b      	cbz	r3, 800afec <__smakebuf_r+0x74>
 800afd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd8:	4630      	mov	r0, r6
 800afda:	f000 f8d1 	bl	800b180 <_isatty_r>
 800afde:	b128      	cbz	r0, 800afec <__smakebuf_r+0x74>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	81a3      	strh	r3, [r4, #12]
 800afec:	89a0      	ldrh	r0, [r4, #12]
 800afee:	4305      	orrs	r5, r0
 800aff0:	81a5      	strh	r5, [r4, #12]
 800aff2:	e7cd      	b.n	800af90 <__smakebuf_r+0x18>
 800aff4:	0800ad85 	.word	0x0800ad85

0800aff8 <_malloc_usable_size_r>:
 800aff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affc:	1f18      	subs	r0, r3, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfbc      	itt	lt
 800b002:	580b      	ldrlt	r3, [r1, r0]
 800b004:	18c0      	addlt	r0, r0, r3
 800b006:	4770      	bx	lr

0800b008 <_raise_r>:
 800b008:	291f      	cmp	r1, #31
 800b00a:	b538      	push	{r3, r4, r5, lr}
 800b00c:	4604      	mov	r4, r0
 800b00e:	460d      	mov	r5, r1
 800b010:	d904      	bls.n	800b01c <_raise_r+0x14>
 800b012:	2316      	movs	r3, #22
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	f04f 30ff 	mov.w	r0, #4294967295
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b01e:	b112      	cbz	r2, 800b026 <_raise_r+0x1e>
 800b020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b024:	b94b      	cbnz	r3, 800b03a <_raise_r+0x32>
 800b026:	4620      	mov	r0, r4
 800b028:	f000 f830 	bl	800b08c <_getpid_r>
 800b02c:	462a      	mov	r2, r5
 800b02e:	4601      	mov	r1, r0
 800b030:	4620      	mov	r0, r4
 800b032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b036:	f000 b817 	b.w	800b068 <_kill_r>
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d00a      	beq.n	800b054 <_raise_r+0x4c>
 800b03e:	1c59      	adds	r1, r3, #1
 800b040:	d103      	bne.n	800b04a <_raise_r+0x42>
 800b042:	2316      	movs	r3, #22
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	2001      	movs	r0, #1
 800b048:	e7e7      	b.n	800b01a <_raise_r+0x12>
 800b04a:	2400      	movs	r4, #0
 800b04c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b050:	4628      	mov	r0, r5
 800b052:	4798      	blx	r3
 800b054:	2000      	movs	r0, #0
 800b056:	e7e0      	b.n	800b01a <_raise_r+0x12>

0800b058 <raise>:
 800b058:	4b02      	ldr	r3, [pc, #8]	; (800b064 <raise+0xc>)
 800b05a:	4601      	mov	r1, r0
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	f7ff bfd3 	b.w	800b008 <_raise_r>
 800b062:	bf00      	nop
 800b064:	20000018 	.word	0x20000018

0800b068 <_kill_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d07      	ldr	r5, [pc, #28]	; (800b088 <_kill_r+0x20>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	4611      	mov	r1, r2
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	f7f7 fe13 	bl	8002ca0 <_kill>
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	d102      	bne.n	800b084 <_kill_r+0x1c>
 800b07e:	682b      	ldr	r3, [r5, #0]
 800b080:	b103      	cbz	r3, 800b084 <_kill_r+0x1c>
 800b082:	6023      	str	r3, [r4, #0]
 800b084:	bd38      	pop	{r3, r4, r5, pc}
 800b086:	bf00      	nop
 800b088:	20000530 	.word	0x20000530

0800b08c <_getpid_r>:
 800b08c:	f7f7 be00 	b.w	8002c90 <_getpid>

0800b090 <__sread>:
 800b090:	b510      	push	{r4, lr}
 800b092:	460c      	mov	r4, r1
 800b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b098:	f000 f894 	bl	800b1c4 <_read_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	bfab      	itete	ge
 800b0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0a4:	181b      	addge	r3, r3, r0
 800b0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0aa:	bfac      	ite	ge
 800b0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ae:	81a3      	strhlt	r3, [r4, #12]
 800b0b0:	bd10      	pop	{r4, pc}

0800b0b2 <__swrite>:
 800b0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b6:	461f      	mov	r7, r3
 800b0b8:	898b      	ldrh	r3, [r1, #12]
 800b0ba:	05db      	lsls	r3, r3, #23
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	d505      	bpl.n	800b0d0 <__swrite+0x1e>
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f000 f868 	bl	800b1a0 <_lseek_r>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	f000 b817 	b.w	800b118 <_write_r>

0800b0ea <__sseek>:
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f2:	f000 f855 	bl	800b1a0 <_lseek_r>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	bf15      	itete	ne
 800b0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b106:	81a3      	strheq	r3, [r4, #12]
 800b108:	bf18      	it	ne
 800b10a:	81a3      	strhne	r3, [r4, #12]
 800b10c:	bd10      	pop	{r4, pc}

0800b10e <__sclose>:
 800b10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b112:	f000 b813 	b.w	800b13c <_close_r>
	...

0800b118 <_write_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d07      	ldr	r5, [pc, #28]	; (800b138 <_write_r+0x20>)
 800b11c:	4604      	mov	r4, r0
 800b11e:	4608      	mov	r0, r1
 800b120:	4611      	mov	r1, r2
 800b122:	2200      	movs	r2, #0
 800b124:	602a      	str	r2, [r5, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	f7f7 fdf1 	bl	8002d0e <_write>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_write_r+0x1e>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_write_r+0x1e>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	20000530 	.word	0x20000530

0800b13c <_close_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d06      	ldr	r5, [pc, #24]	; (800b158 <_close_r+0x1c>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	f7f7 fdfd 	bl	8002d46 <_close>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_close_r+0x1a>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_close_r+0x1a>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	20000530 	.word	0x20000530

0800b15c <_fstat_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d07      	ldr	r5, [pc, #28]	; (800b17c <_fstat_r+0x20>)
 800b160:	2300      	movs	r3, #0
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	f7f7 fdf8 	bl	8002d5e <_fstat>
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	d102      	bne.n	800b178 <_fstat_r+0x1c>
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	b103      	cbz	r3, 800b178 <_fstat_r+0x1c>
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	bd38      	pop	{r3, r4, r5, pc}
 800b17a:	bf00      	nop
 800b17c:	20000530 	.word	0x20000530

0800b180 <_isatty_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d06      	ldr	r5, [pc, #24]	; (800b19c <_isatty_r+0x1c>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	f7f7 fdf7 	bl	8002d7e <_isatty>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_isatty_r+0x1a>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_isatty_r+0x1a>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20000530 	.word	0x20000530

0800b1a0 <_lseek_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d07      	ldr	r5, [pc, #28]	; (800b1c0 <_lseek_r+0x20>)
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	602a      	str	r2, [r5, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f7f7 fdf0 	bl	8002d94 <_lseek>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_lseek_r+0x1e>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_lseek_r+0x1e>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20000530 	.word	0x20000530

0800b1c4 <_read_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	; (800b1e4 <_read_r+0x20>)
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	4608      	mov	r0, r1
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	602a      	str	r2, [r5, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f7f7 fd7e 	bl	8002cd4 <_read>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_read_r+0x1e>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_read_r+0x1e>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20000530 	.word	0x20000530

0800b1e8 <_init>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	bf00      	nop
 800b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ee:	bc08      	pop	{r3}
 800b1f0:	469e      	mov	lr, r3
 800b1f2:	4770      	bx	lr

0800b1f4 <_fini>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	bf00      	nop
 800b1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fa:	bc08      	pop	{r3}
 800b1fc:	469e      	mov	lr, r3
 800b1fe:	4770      	bx	lr
