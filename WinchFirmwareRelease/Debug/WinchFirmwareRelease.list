
WinchFirmwareRelease.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b164  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800b308  0800b308  0001b308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b83c  0800b83c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b83c  0800b83c  0001b83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b844  0800b844  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b844  0800b844  0001b844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b848  0800b848  0001b848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001e0  0800ba2c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800ba2c  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c39  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002987  00000000  00000000  00036e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207dd  00000000  00000000  0003bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bcc  00000000  00000000  0005c595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e97b5  00000000  00000000  0007d161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  00166968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b2ec 	.word	0x0800b2ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b2ec 	.word	0x0800b2ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <AS5600_GetRawAngle>:

	return ret;
}

uint8_t AS5600_GetRawAngle(AS5600_Handle_t* hAS56)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	const AS5600_OpRegister_t angleReg = AS5600_REGISTER_RAWANGLE_H;
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	73fb      	strb	r3, [r7, #15]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]

	uint8_t raw[2] = {0};
 8000fac:	2300      	movs	r3, #0
 8000fae:	81bb      	strh	r3, [r7, #12]

	if((hAS56->I2Chandle == NULL)) return ret;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <AS5600_GetRawAngle+0x20>
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	e019      	b.n	8000ff0 <AS5600_GetRawAngle+0x54>

		//readByte(hAS56->I2Chandle, Address, subAddress);
	if(readMem(hAS56->I2Chandle, WHOAMI, angleReg, raw) != AS55600_SUCCESS) return ret;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	216c      	movs	r1, #108	; 0x6c
 8000fc8:	f000 f816 	bl	8000ff8 <readMem>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d001      	beq.n	8000fd6 <AS5600_GetRawAngle+0x3a>
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	e00c      	b.n	8000ff0 <AS5600_GetRawAngle+0x54>

	else ret = AS55600_SUCCESS;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73bb      	strb	r3, [r7, #14]

	hAS56->rawAngle = ((uint16_t)((uint16_t)raw[0] << 8 | raw[1]));
 8000fda:	7b3b      	ldrb	r3, [r7, #12]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	7b7b      	ldrb	r3, [r7, #13]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	80da      	strh	r2, [r3, #6]

	return ret;
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <readMem>:
/*
 * Reads bytes of data
 */

uint8_t readMem(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress, uint8_t* raw)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	72fb      	strb	r3, [r7, #11]
 8001006:	4613      	mov	r3, r2
 8001008:	72bb      	strb	r3, [r7, #10]

	uint8_t rawData[2];

	if(HAL_I2C_Mem_Read(I2Chandle, Address, subAddress, I2C_MEMADD_SIZE_8BIT, rawData, 2, AS5600_I2C_TIMEOUT) != HAL_ERROR)
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	b299      	uxth	r1, r3
 800100e:	7abb      	ldrb	r3, [r7, #10]
 8001010:	b29a      	uxth	r2, r3
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2302      	movs	r3, #2
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f004 f860 	bl	80050e8 <HAL_I2C_Mem_Read>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d008      	beq.n	8001040 <readMem+0x48>
	{
		raw[0] = rawData[0];
 800102e:	7d3a      	ldrb	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	701a      	strb	r2, [r3, #0]
		raw[1] = rawData[1];
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3301      	adds	r3, #1
 8001038:	7d7a      	ldrb	r2, [r7, #21]
 800103a:	701a      	strb	r2, [r3, #0]

		return 1;
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <readMem+0x4a>
	}

	else return 0;
 8001040:	2300      	movs	r3, #0

}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <PID_Init>:
    Set the Max/Min lim for System anti saturation.
*/

/*Initializer*/
uint8_t PID_Init(PID_Handle_t *pid)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]

    /*Clear all the residuals*/

    pid->derivative = 0.0f;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
    pid->integrator = 0.0f;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
    pid->propotional = 0.0f;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	60da      	str	r2, [r3, #12]

    SetSampleRate(pid, 10); // 0.01 seconds
 800106a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f878 	bl	8001164 <SetSampleRate>


    pid->prevErr = 0.0f;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
    pid->prevMeasure = 0.0f;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	61da      	str	r2, [r3, #28]

    pid->pidout = 0.0f;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	; 0x38

    return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <P_Compute>:

/* P controller only */
float P_Compute(PID_Handle_t *p, float measurement, float setPoint, float hal_tick)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80010a8:	ed87 1a00 	vstr	s2, [r7]

	if(hal_tick > p->Ts)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80010b2:	ed97 7a00 	vldr	s14, [r7]
 80010b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	dd39      	ble.n	8001134 <P_Compute+0x9c>
		*   0-100% after computing the values back to outputs which can be used in the real world.
		*
		*/
		//float err = setPoint - measurement;

		float err = (1 - measurement / setPoint);
 80010c0:	edd7 6a02 	vldr	s13, [r7, #8]
 80010c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	edc7 7a05 	vstr	s15, [r7, #20]

		if( err >=0 )
 80010d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	db26      	blt.n	8001134 <P_Compute+0x9c>
		{
			/*propotional*/
			p->propotional = p->kp * err;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	edc3 7a03 	vstr	s15, [r3, #12]

			return (p->propotional *__8BIT_OUTPUT_MAX) <= (__8BIT_OUTPUT_MAX) ? (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN : __8BIT_OUTPUT_MAX;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001100:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800115c <P_Compute+0xc4>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800115c <P_Compute+0xc4>
 800110c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d80b      	bhi.n	800112e <P_Compute+0x96>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edd3 7a03 	vldr	s15, [r3, #12]
 800111c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800115c <P_Compute+0xc4>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112c:	e00e      	b.n	800114c <P_Compute+0xb4>
 800112e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800115c <P_Compute+0xc4>
 8001132:	e00b      	b.n	800114c <P_Compute+0xb4>

		}

	}

	p->Ts += hal_tick;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800113a:	edd7 7a00 	vldr	s15, [r7]
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return 0;
 8001148:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001160 <P_Compute+0xc8>

	//return (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN;
}
 800114c:	eeb0 0a67 	vmov.f32	s0, s15
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	437f0000 	.word	0x437f0000
 8001160:	00000000 	.word	0x00000000

08001164 <SetSampleRate>:

/* Set sampling period in milliseconds
* And apporiately scale the gains Ki, Kd 
*/
void SetSampleRate(PID_Handle_t *pid, float sampleTime)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	ed87 0a00 	vstr	s0, [r7]
    if(sampleTime > 0)
 8001170:	edd7 7a00 	vldr	s15, [r7]
 8001174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dc00      	bgt.n	8001180 <SetSampleRate+0x1c>
        pid->ki *= ratio;
        pid->kd /= ratio;

        pid->Ts = sampleTime;
    }
}
 800117e:	e01f      	b.n	80011c0 <SetSampleRate+0x5c>
        float ratio = (float)(sampleTime) / (float)(pid->Ts);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001186:	edd7 6a00 	vldr	s13, [r7]
 800118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118e:	edc7 7a03 	vstr	s15, [r7, #12]
        pid->ki *= ratio;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a01 	vldr	s14, [r3, #4]
 8001198:	edd7 7a03 	vldr	s15, [r7, #12]
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	edc3 7a01 	vstr	s15, [r3, #4]
        pid->kd /= ratio;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80011ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a02 	vstr	s15, [r3, #8]
        pid->Ts = sampleTime;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4053      	eors	r3, r2
 80011e2:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4053      	eors	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	4053      	eors	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	b21b      	sxth	r3, r3
 800120e:	4053      	eors	r3, r2
 8001210:	b21a      	sxth	r2, r3
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	b2db      	uxtb	r3, r3
 8001218:	b21b      	sxth	r3, r3
 800121a:	4053      	eors	r3, r2
 800121c:	b21b      	sxth	r3, r3
 800121e:	b29a      	uxth	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	801a      	strh	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123e:	801a      	strh	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8001258:	f107 030e 	add.w	r3, r7, #14
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffe7 	bl	8001230 <crc_init>
	while (length--) {
 8001262:	e009      	b.n	8001278 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f107 020e 	add.w	r2, r7, #14
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ffaa 	bl	80011cc <crc_accumulate>
	while (length--) {
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	807a      	strh	r2, [r7, #2]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <crc_calculate+0x18>
        }
        return crcTmp;
 8001282:	89fb      	ldrh	r3, [r7, #14]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	617b      	str	r3, [r7, #20]
	while (length--) {
 800129e:	e007      	b.n	80012b0 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	617a      	str	r2, [r7, #20]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	68f9      	ldr	r1, [r7, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff8e 	bl	80011cc <crc_accumulate>
	while (length--) {
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	80fa      	strh	r2, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f2      	bne.n	80012a0 <crc_accumulate_buffer+0x14>
        }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <mavlink_sha256_init+0x50>)
 80012dc:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <mavlink_sha256_init+0x54>)
 80012e2:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <mavlink_sha256_init+0x58>)
 80012e8:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <mavlink_sha256_init+0x5c>)
 80012ee:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <mavlink_sha256_init+0x60>)
 80012f4:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <mavlink_sha256_init+0x64>)
 80012fa:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <mavlink_sha256_init+0x68>)
 8001300:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <mavlink_sha256_init+0x6c>)
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	6a09e667 	.word	0x6a09e667
 8001318:	bb67ae85 	.word	0xbb67ae85
 800131c:	3c6ef372 	.word	0x3c6ef372
 8001320:	a54ff53a 	.word	0xa54ff53a
 8001324:	510e527f 	.word	0x510e527f
 8001328:	9b05688c 	.word	0x9b05688c
 800132c:	1f83d9ab 	.word	0x1f83d9ab
 8001330:	5be0cd19 	.word	0x5be0cd19

08001334 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8001334:	b480      	push	{r7}
 8001336:	b0cf      	sub	sp, #316	; 0x13c
 8001338:	af00      	add	r7, sp, #0
 800133a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800133e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001342:	6018      	str	r0, [r3, #0]
 8001344:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001348:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800134c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800134e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001352:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800135e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001362:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800136e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001372:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 800137e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001382:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 800138e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001392:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 800139e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80013ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80013be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80013d4:	e016      	b.n	8001404 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 80013d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80013e0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 80013fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013fe:	3301      	adds	r3, #1
 8001400:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001408:	2b0f      	cmp	r3, #15
 800140a:	dde4      	ble.n	80013d6 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 800140c:	2310      	movs	r3, #16
 800140e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001412:	e069      	b.n	80014e8 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001418:	1e9a      	subs	r2, r3, #2
 800141a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800141e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001426:	ea4f 4273 	mov.w	r2, r3, ror #17
 800142a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800142e:	1e99      	subs	r1, r3, #2
 8001430:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800143c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8001440:	405a      	eors	r2, r3
 8001442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001446:	1e99      	subs	r1, r3, #2
 8001448:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800144c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001450:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001454:	0a9b      	lsrs	r3, r3, #10
 8001456:	405a      	eors	r2, r3
 8001458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800145c:	1fd9      	subs	r1, r3, #7
 800145e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001466:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800146a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800146c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001470:	f1a3 010f 	sub.w	r1, r3, #15
 8001474:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800147c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001480:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001488:	f1a3 000f 	sub.w	r0, r3, #15
 800148c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001494:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001498:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800149c:	4059      	eors	r1, r3
 800149e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014a2:	f1a3 000f 	sub.w	r0, r3, #15
 80014a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014b2:	08db      	lsrs	r3, r3, #3
 80014b4:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014b6:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80014b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014bc:	f1a3 0110 	sub.w	r1, r3, #16
 80014c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014cc:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80014ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80014de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014e2:	3301      	adds	r3, #1
 80014e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014ec:	2b3f      	cmp	r3, #63	; 0x3f
 80014ee:	dd91      	ble.n	8001414 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014f6:	e078      	b.n	80015ea <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80014f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014fc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001500:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001504:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001508:	405a      	eors	r2, r3
 800150a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800150e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001512:	405a      	eors	r2, r3
 8001514:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001518:	441a      	add	r2, r3
 800151a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	4019      	ands	r1, r3
 8001524:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001528:	43d8      	mvns	r0, r3
 800152a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800152e:	4003      	ands	r3, r0
 8001530:	404b      	eors	r3, r1
 8001532:	441a      	add	r2, r3
 8001534:	496e      	ldr	r1, [pc, #440]	; (80016f0 <mavlink_sha256_calc+0x3bc>)
 8001536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800153a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800153e:	441a      	add	r2, r3
 8001540:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001548:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800154c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001550:	4413      	add	r3, r2
 8001552:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8001556:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800155a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800155e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001562:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001566:	405a      	eors	r2, r3
 8001568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800156c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001570:	405a      	eors	r2, r3
 8001572:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800157a:	4059      	eors	r1, r3
 800157c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001580:	4019      	ands	r1, r3
 8001582:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800158a:	4003      	ands	r3, r0
 800158c:	404b      	eors	r3, r1
 800158e:	4413      	add	r3, r2
 8001590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8001594:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001598:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 800159c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 80015a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 80015ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80015b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015b4:	4413      	add	r3, r2
 80015b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 80015ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80015c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80015ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80015d2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015da:	4413      	add	r3, r2
 80015dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80015e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015e4:	3301      	adds	r3, #1
 80015e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ee:	2b3f      	cmp	r3, #63	; 0x3f
 80015f0:	dd82      	ble.n	80014f8 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 80015f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001602:	441a      	add	r2, r3
 8001604:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001608:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8001610:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001614:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001620:	441a      	add	r2, r3
 8001622:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001626:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 800162e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001632:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800163e:	441a      	add	r2, r3
 8001640:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 800164c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001650:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800165c:	441a      	add	r2, r3
 800165e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001662:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 800166a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800166e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800167a:	441a      	add	r2, r3
 800167c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001680:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001688:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800168c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001698:	441a      	add	r2, r3
 800169a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800169e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 80016a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016b6:	441a      	add	r2, r3
 80016b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 80016c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016d4:	441a      	add	r2, r3
 80016d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016e2:	bf00      	nop
 80016e4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	0800b33c 	.word	0x0800b33c

080016f4 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b09c      	sub	sp, #112	; 0x70
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	441a      	add	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800171e:	429a      	cmp	r2, r3
 8001720:	d904      	bls.n	800172c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 800172c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001734:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8001736:	e054      	b.n	80017e2 <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 8001738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800173a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800173e:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001744:	429a      	cmp	r2, r3
 8001746:	d201      	bcs.n	800174c <mavlink_sha256_update+0x58>
            l = len;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001754:	4413      	add	r3, r2
 8001756:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001758:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800175a:	4618      	mov	r0, r3
 800175c:	f007 f81c 	bl	8008798 <memcpy>
	offset += l;
 8001760:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001764:	4413      	add	r3, r2
 8001766:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8001768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800176a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800176c:	4413      	add	r3, r2
 800176e:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800177a:	2b40      	cmp	r3, #64	; 0x40
 800177c:	d131      	bne.n	80017e2 <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3328      	adds	r3, #40	; 0x28
 8001782:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8001784:	2300      	movs	r3, #0
 8001786:	663b      	str	r3, [r7, #96]	; 0x60
 8001788:	e020      	b.n	80017cc <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001790:	4413      	add	r3, r2
 8001792:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001794:	f107 0210 	add.w	r2, r7, #16
 8001798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	78da      	ldrb	r2, [r3, #3]
 80017a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a6:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 80017a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017aa:	3301      	adds	r3, #1
 80017ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017ae:	7892      	ldrb	r2, [r2, #2]
 80017b0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80017b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b4:	3302      	adds	r3, #2
 80017b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017b8:	7852      	ldrb	r2, [r2, #1]
 80017ba:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80017bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017be:	3303      	adds	r3, #3
 80017c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80017c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c8:	3301      	adds	r3, #1
 80017ca:	663b      	str	r3, [r7, #96]	; 0x60
 80017cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	dddb      	ble.n	800178a <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fdab 	bl	8001334 <mavlink_sha256_calc>
	    offset = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1a7      	bne.n	8001738 <mavlink_sha256_update+0x44>
	}
    }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3770      	adds	r7, #112	; 0x70
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b098      	sub	sp, #96	; 0x60
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180a:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 800180e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001812:	3301      	adds	r3, #1
 8001814:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3308      	adds	r3, #8
 800181a:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	3301      	adds	r3, #1
 8001826:	2247      	movs	r2, #71	; 0x47
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f006 ffc2 	bl	80087b4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001836:	3307      	adds	r3, #7
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	3360      	adds	r3, #96	; 0x60
 800183c:	443b      	add	r3, r7
 800183e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0a1a      	lsrs	r2, r3, #8
 8001848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800184a:	3306      	adds	r3, #6
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	3360      	adds	r3, #96	; 0x60
 8001850:	443b      	add	r3, r7
 8001852:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0c1a      	lsrs	r2, r3, #16
 800185c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800185e:	3305      	adds	r3, #5
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	3360      	adds	r3, #96	; 0x60
 8001864:	443b      	add	r3, r7
 8001866:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e1a      	lsrs	r2, r3, #24
 8001870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001872:	3304      	adds	r3, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	3360      	adds	r3, #96	; 0x60
 8001878:	443b      	add	r3, r7
 800187a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001884:	3303      	adds	r3, #3
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	3360      	adds	r3, #96	; 0x60
 800188a:	443b      	add	r3, r7
 800188c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0a1a      	lsrs	r2, r3, #8
 8001896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001898:	3302      	adds	r3, #2
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	3360      	adds	r3, #96	; 0x60
 800189e:	443b      	add	r3, r7
 80018a0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	0c1a      	lsrs	r2, r3, #16
 80018aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	443b      	add	r3, r7
 80018b4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	0e1b      	lsrs	r3, r3, #24
 80018be:	b2d9      	uxtb	r1, r3
 80018c0:	f107 020c 	add.w	r2, r7, #12
 80018c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018c6:	4413      	add	r3, r2
 80018c8:	460a      	mov	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 80018cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ce:	f103 0208 	add.w	r2, r3, #8
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff0b 	bl	80016f4 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80018de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e0:	78da      	ldrb	r2, [r3, #3]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	3301      	adds	r3, #1
 80018ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018ec:	7892      	ldrb	r2, [r2, #2]
 80018ee:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	3302      	adds	r3, #2
 80018f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018f6:	7852      	ldrb	r2, [r2, #1]
 80018f8:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3303      	adds	r3, #3
 80018fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3304      	adds	r3, #4
 8001908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800190a:	79d2      	ldrb	r2, [r2, #7]
 800190c:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3305      	adds	r3, #5
 8001912:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001914:	7992      	ldrb	r2, [r2, #6]
 8001916:	701a      	strb	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	3760      	adds	r7, #96	; 0x60
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <mavlink_get_channel_status+0x24>)
 8001936:	4413      	add	r3, r2
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000528 	.word	0x20000528

08001948 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b0a0      	sub	sp, #128	; 0x80
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <mavlink_sign_packet+0x20>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <mavlink_sign_packet+0x24>
	    return 0;
 8001968:	2300      	movs	r3, #0
 800196a:	e04f      	b.n	8001a0c <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	785a      	ldrb	r2, [r3, #1]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800197a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3301      	adds	r3, #1
 8001982:	f107 0110 	add.w	r1, r7, #16
 8001986:	2206      	movs	r2, #6
 8001988:	4618      	mov	r0, r3
 800198a:	f006 ff05 	bl	8008798 <memcpy>
	signing->timestamp++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001994:	1c54      	adds	r4, r2, #1
 8001996:	f143 0500 	adc.w	r5, r3, #0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fc8d 	bl	80012c4 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f103 0110 	add.w	r1, r3, #16
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	2220      	movs	r2, #32
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fe9c 	bl	80016f4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe95 	bl	80016f4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80019ca:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 80019ce:	f107 0318 	add.w	r3, r7, #24
 80019d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fe8c 	bl	80016f4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	2202      	movs	r2, #2
 80019e2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe84 	bl	80016f4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	2207      	movs	r2, #7
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe7d 	bl	80016f4 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1dda      	adds	r2, r3, #7
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fef4 	bl	80017f2 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001a0a:	230d      	movs	r3, #13
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3780      	adds	r7, #128	; 0x80
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}

08001a14 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001a20:	e002      	b.n	8001a28 <_mav_trim_payload+0x14>
		length--;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d906      	bls.n	8001a3c <_mav_trim_payload+0x28>
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f2      	beq.n	8001a22 <_mav_trim_payload+0xe>
	}
	return length;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4c:	b08f      	sub	sp, #60	; 0x3c
 8001a4e:	af04      	add	r7, sp, #16
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	72fb      	strb	r3, [r7, #11]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf14      	ite	ne
 8001a68:	2301      	movne	r3, #1
 8001a6a:	2300      	moveq	r3, #0
 8001a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001a70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a74:	f083 0301 	eor.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00c      	beq.n	8001a98 <mavlink_finalize_message_buffer+0x4e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <mavlink_finalize_message_buffer+0x4e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <mavlink_finalize_message_buffer+0x4e>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <mavlink_finalize_message_buffer+0x50>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001a9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001aaa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <mavlink_finalize_message_buffer+0x6c>
 8001ab2:	230d      	movs	r3, #13
 8001ab4:	e000      	b.n	8001ab8 <mavlink_finalize_message_buffer+0x6e>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001abc:	230a      	movs	r3, #10
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	22fe      	movs	r2, #254	; 0xfe
 8001ace:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ad6:	e002      	b.n	8001ade <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	22fd      	movs	r2, #253	; 0xfd
 8001adc:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001ade:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <mavlink_finalize_message_buffer+0xb2>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff8f 	bl	8001a14 <_mav_trim_payload>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	e001      	b.n	8001b00 <mavlink_finalize_message_buffer+0xb6>
 8001afc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	7afa      	ldrb	r2, [r7, #11]
 8001b08:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	7aba      	ldrb	r2, [r7, #10]
 8001b0e:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001b16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	799a      	ldrb	r2, [r3, #6]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	799b      	ldrb	r3, [r3, #6]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	789b      	ldrb	r3, [r3, #2]
 8001b4a:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	78db      	ldrb	r3, [r3, #3]
 8001b50:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001b52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d013      	beq.n	8001b82 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	799b      	ldrb	r3, [r3, #6]
 8001b5e:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	79db      	ldrb	r3, [r3, #7]
 8001b64:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	7a1b      	ldrb	r3, [r3, #8]
 8001b6a:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	7a5a      	ldrb	r2, [r3, #9]
 8001b70:	7a99      	ldrb	r1, [r3, #10]
 8001b72:	0209      	lsls	r1, r1, #8
 8001b74:	430a      	orrs	r2, r1
 8001b76:	7adb      	ldrb	r3, [r3, #11]
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	777b      	strb	r3, [r7, #29]
 8001b80:	e030      	b.n	8001be4 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	791b      	ldrb	r3, [r3, #4]
 8001b86:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	795b      	ldrb	r3, [r3, #5]
 8001b8c:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	799b      	ldrb	r3, [r3, #6]
 8001b92:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	79db      	ldrb	r3, [r3, #7]
 8001b98:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	7a1b      	ldrb	r3, [r3, #8]
 8001b9e:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	7a5a      	ldrb	r2, [r3, #9]
 8001ba4:	7a99      	ldrb	r1, [r3, #10]
 8001ba6:	0209      	lsls	r1, r1, #8
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	7adb      	ldrb	r3, [r3, #11]
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	7a5a      	ldrb	r2, [r3, #9]
 8001bb8:	7a99      	ldrb	r1, [r3, #10]
 8001bba:	0209      	lsls	r1, r1, #8
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	7adb      	ldrb	r3, [r3, #11]
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	121b      	asrs	r3, r3, #8
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	7a5a      	ldrb	r2, [r3, #9]
 8001bd0:	7a99      	ldrb	r1, [r3, #10]
 8001bd2:	0209      	lsls	r1, r1, #8
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	7adb      	ldrb	r3, [r3, #11]
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	141b      	asrs	r3, r3, #16
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb28 	bl	800124c <crc_calculate>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f103 010c 	add.w	r1, r3, #12
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f107 0316 	add.w	r3, r7, #22
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fb3b 	bl	800128c <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001c16:	f107 0216 	add.w	r2, r7, #22
 8001c1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fad3 	bl	80011cc <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001c26:	8af9      	ldrh	r1, [r7, #22]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	78d2      	ldrb	r2, [r2, #3]
 8001c30:	4413      	add	r3, r2
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001c36:	8afb      	ldrh	r3, [r7, #22]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	b299      	uxth	r1, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f103 020c 	add.w	r2, r3, #12
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001c4e:	8afa      	ldrh	r2, [r7, #22]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001c54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01a      	beq.n	8001c92 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	310c      	adds	r1, #12
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001c76:	4401      	add	r1, r0
 8001c78:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001c7c:	f107 0018 	add.w	r0, r7, #24
 8001c80:	9102      	str	r1, [sp, #8]
 8001c82:	9201      	str	r2, [sp, #4]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4633      	mov	r3, r6
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff fe5b 	bl	8001948 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	78db      	ldrb	r3, [r3, #3]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3302      	adds	r3, #2
 8001cae:	b29b      	uxth	r3, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	372c      	adds	r7, #44	; 0x2c
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb8 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	70fb      	strb	r3, [r7, #3]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70bb      	strb	r3, [r7, #2]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001cd2:	787b      	ldrb	r3, [r7, #1]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fe23 	bl	8001920 <mavlink_get_channel_status>
 8001cda:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001cdc:	78ba      	ldrb	r2, [r7, #2]
 8001cde:	78f9      	ldrb	r1, [r7, #3]
 8001ce0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	7f3b      	ldrb	r3, [r7, #28]
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	7e3b      	ldrb	r3, [r7, #24]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff feaa 	bl	8001a4a <mavlink_finalize_message_buffer>
 8001cf6:	4603      	mov	r3, r0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af04      	add	r7, sp, #16
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	70fb      	strb	r3, [r7, #3]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70bb      	strb	r3, [r7, #2]
 8001d16:	4613      	mov	r3, r2
 8001d18:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001d1a:	78ba      	ldrb	r2, [r7, #2]
 8001d1c:	78f9      	ldrb	r1, [r7, #3]
 8001d1e:	7d3b      	ldrb	r3, [r7, #20]
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	7c3b      	ldrb	r3, [r7, #16]
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	787b      	ldrb	r3, [r7, #1]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffc3 	bl	8001cb8 <mavlink_finalize_message_chan>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	789b      	ldrb	r3, [r3, #2]
 8001d50:	2bfe      	cmp	r3, #254	; 0xfe
 8001d52:	d13a      	bne.n	8001dca <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001d58:	2305      	movs	r3, #5
 8001d5a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	789a      	ldrb	r2, [r3, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	7992      	ldrb	r2, [r2, #6]
 8001d74:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3303      	adds	r3, #3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	79d2      	ldrb	r2, [r2, #7]
 8001d7e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	7a12      	ldrb	r2, [r2, #8]
 8001d88:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7a5a      	ldrb	r2, [r3, #9]
 8001d8e:	7a99      	ldrb	r1, [r3, #10]
 8001d90:	0209      	lsls	r1, r1, #8
 8001d92:	430a      	orrs	r2, r1
 8001d94:	7adb      	ldrb	r3, [r3, #11]
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3305      	adds	r3, #5
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	1d98      	adds	r0, r3, #6
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f103 010c 	add.w	r1, r3, #12
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	78db      	ldrb	r3, [r3, #3]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f006 fcf0 	bl	8008798 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001db8:	7dbb      	ldrb	r3, [r7, #22]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	78d2      	ldrb	r2, [r2, #3]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e06c      	b.n	8001ea4 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fe1e 	bl	8001a14 <_mav_trim_payload>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001ddc:	2309      	movs	r3, #9
 8001dde:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	789a      	ldrb	r2, [r3, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3302      	adds	r3, #2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	7912      	ldrb	r2, [r2, #4]
 8001df8:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3303      	adds	r3, #3
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	7952      	ldrb	r2, [r2, #5]
 8001e02:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	7992      	ldrb	r2, [r2, #6]
 8001e0c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3305      	adds	r3, #5
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	79d2      	ldrb	r2, [r2, #7]
 8001e16:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3306      	adds	r3, #6
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	7a12      	ldrb	r2, [r2, #8]
 8001e20:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7a5a      	ldrb	r2, [r3, #9]
 8001e26:	7a99      	ldrb	r1, [r3, #10]
 8001e28:	0209      	lsls	r1, r1, #8
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	7adb      	ldrb	r3, [r3, #11]
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	4313      	orrs	r3, r2
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3307      	adds	r3, #7
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	7a5a      	ldrb	r2, [r3, #9]
 8001e40:	7a99      	ldrb	r1, [r3, #10]
 8001e42:	0209      	lsls	r1, r1, #8
 8001e44:	430a      	orrs	r2, r1
 8001e46:	7adb      	ldrb	r3, [r3, #11]
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	121a      	asrs	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3308      	adds	r3, #8
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	7a5a      	ldrb	r2, [r3, #9]
 8001e5a:	7a99      	ldrb	r1, [r3, #10]
 8001e5c:	0209      	lsls	r1, r1, #8
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	7adb      	ldrb	r3, [r3, #11]
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	4313      	orrs	r3, r2
 8001e66:	141a      	asrs	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3309      	adds	r3, #9
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 000a 	add.w	r0, r3, #10
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	330c      	adds	r3, #12
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f006 fc8b 	bl	8008798 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001e82:	7dba      	ldrb	r2, [r7, #22]
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	4413      	add	r3, r2
 8001e88:	3301      	adds	r3, #1
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	791b      	ldrb	r3, [r3, #4]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <mavlink_msg_to_send_buffer+0x164>
 8001e9c:	230d      	movs	r3, #13
 8001e9e:	e000      	b.n	8001ea2 <mavlink_msg_to_send_buffer+0x166>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1c98      	adds	r0, r3, #2
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001ed2:	7dfa      	ldrb	r2, [r7, #23]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f006 fc5f 	bl	8008798 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001eda:	7dbb      	ldrb	r3, [r7, #22]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3303      	adds	r3, #3
 8001ef0:	b29b      	uxth	r3, r3
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <mavlink_msg_winch_status_pack>:
 * @param status  Status flags
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_winch_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float line_length, float speed, float tension, float voltage, float current, int16_t temperature, uint32_t status)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b094      	sub	sp, #80	; 0x50
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	4603      	mov	r3, r0
 8001f02:	61ba      	str	r2, [r7, #24]
 8001f04:	ed87 0a05 	vstr	s0, [r7, #20]
 8001f08:	edc7 0a04 	vstr	s1, [r7, #16]
 8001f0c:	ed87 1a03 	vstr	s2, [r7, #12]
 8001f10:	edc7 1a02 	vstr	s3, [r7, #8]
 8001f14:	ed87 2a01 	vstr	s4, [r7, #4]
 8001f18:	77fb      	strb	r3, [r7, #31]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	77bb      	strb	r3, [r7, #30]
    _mav_put_int16_t(buf, 32, temperature);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_WINCH_STATUS_LEN);
#else
    mavlink_winch_status_t packet;
    packet.time_usec = time_usec;
 8001f1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f22:	e9c7 2308 	strd	r2, r3, [r7, #32]
    packet.line_length = line_length;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
    packet.speed = speed;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    packet.tension = tension;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
    packet.voltage = voltage;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
    packet.current = current;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
    packet.status = status;
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    packet.temperature = temperature;
 8001f3e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001f42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_WINCH_STATUS_LEN);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	f107 0120 	add.w	r1, r7, #32
 8001f4e:	2222      	movs	r2, #34	; 0x22
 8001f50:	4618      	mov	r0, r3
 8001f52:	f006 fc21 	bl	8008798 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_WINCH_STATUS;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8001f5e:	725a      	strb	r2, [r3, #9]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 8001f66:	729a      	strb	r2, [r3, #10]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_WINCH_STATUS_MIN_LEN, MAVLINK_MSG_ID_WINCH_STATUS_LEN, MAVLINK_MSG_ID_WINCH_STATUS_CRC);
 8001f6c:	7fba      	ldrb	r2, [r7, #30]
 8001f6e:	7ff9      	ldrb	r1, [r7, #31]
 8001f70:	2375      	movs	r3, #117	; 0x75
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2322      	movs	r3, #34	; 0x22
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2322      	movs	r3, #34	; 0x22
 8001f7a:	69b8      	ldr	r0, [r7, #24]
 8001f7c:	f7ff fec0 	bl	8001d00 <mavlink_finalize_message>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3748      	adds	r7, #72	; 0x48
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <MavlinkWinchStatus>:

}


uint8_t MavlinkWinchStatus(UART_HandleTypeDef* huart, uint64_t time_usec, float line_length, float speed, float tension, float voltage, float current, int16_t temp, uint32_t status)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8001f92:	af04      	add	r7, sp, #16
 8001f94:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8001f98:	f5a1 7111 	sub.w	r1, r1, #580	; 0x244
 8001f9c:	6008      	str	r0, [r1, #0]
 8001f9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001fa2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fa6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001faa:	ed83 0a00 	vstr	s0, [r3]
 8001fae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fb2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001fb6:	edc3 0a00 	vstr	s1, [r3]
 8001fba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fbe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fc2:	ed83 1a00 	vstr	s2, [r3]
 8001fc6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001fce:	edc3 1a00 	vstr	s3, [r3]
 8001fd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fd6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001fda:	ed83 2a00 	vstr	s4, [r3]

	mavlink_message_t msg;
	uint8_t buf[MAVLINK_MAX_PACKET_LEN];

	// Pack the message
	mavlink_msg_winch_status_pack(1, MAV_COMP_ID_USER1, &msg, uwTick, line_length, speed, tension, voltage, current, temp, status);
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <MavlinkWinchStatus+0xf8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	461c      	mov	r4, r3
 8001fe6:	4615      	mov	r5, r2
 8001fe8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fec:	f5a3 7618 	sub.w	r6, r3, #608	; 0x260
 8001ff0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ff4:	f5a3 7017 	sub.w	r0, r3, #604	; 0x25c
 8001ff8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ffc:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002000:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002004:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8002008:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800200c:	f5a3 7e12 	sub.w	lr, r3, #584	; 0x248
 8002010:	f507 7c9c 	add.w	ip, r7, #312	; 0x138
 8002014:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002018:	9303      	str	r3, [sp, #12]
 800201a:	f9b7 3278 	ldrsh.w	r3, [r7, #632]	; 0x278
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	e9cd 4500 	strd	r4, r5, [sp]
 8002024:	ed96 2a00 	vldr	s4, [r6]
 8002028:	edd0 1a00 	vldr	s3, [r0]
 800202c:	ed91 1a00 	vldr	s2, [r1]
 8002030:	edd2 0a00 	vldr	s1, [r2]
 8002034:	ed9e 0a00 	vldr	s0, [lr]
 8002038:	4662      	mov	r2, ip
 800203a:	2119      	movs	r1, #25
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff ff5c 	bl	8001efa <mavlink_msg_winch_status_pack>

	// Copy the message to the send buffer
	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 8002042:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe75 	bl	8001d3c <mavlink_msg_to_send_buffer>
 8002052:	4603      	mov	r3, r0
 8002054:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e

	HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8002058:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 800205c:	f107 0120 	add.w	r1, r7, #32
 8002060:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002064:	f5a3 7011 	sub.w	r0, r3, #580	; 0x244
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	6800      	ldr	r0, [r0, #0]
 800206e:	f005 fafc 	bl	800766a <HAL_UART_Transmit>

	return len;
 8002072:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8002076:	b2db      	uxtb	r3, r3


}
 8002078:	4618      	mov	r0, r3
 800207a:	f507 7719 	add.w	r7, r7, #612	; 0x264
 800207e:	46bd      	mov	sp, r7
 8002080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002082:	bf00      	nop
 8002084:	200005a0 	.word	0x200005a0

08002088 <MX_Universal_Init>:


uint32_t motor_output = 0;
/* Private user code ---------------------------------------------------------*/
void MX_Universal_Init()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800208c:	f001 fef2 	bl	8003e74 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002090:	f000 fe54 	bl	8002d3c <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_USB_DEVICE_Init();
  MX_DMA_Init();
 8002094:	f001 f892 	bl	80031bc <MX_DMA_Init>
  MX_ADC1_Init();
 8002098:	f000 feba 	bl	8002e10 <MX_ADC1_Init>
  MX_GPIO_Init();
 800209c:	f001 f8ae 	bl	80031fc <MX_GPIO_Init>
  MX_TIM2_Init();
 80020a0:	f000 ff82 	bl	8002fa8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020a4:	f000 ffd2 	bl	800304c <MX_TIM3_Init>
  MX_TIM4_Init();
 80020a8:	f001 f834 	bl	8003114 <MX_TIM4_Init>
  MX_UART1_Init();
 80020ac:	f000 ff30 	bl	8002f10 <MX_UART1_Init>
  MX_UART2_Init();
 80020b0:	f000 ff54 	bl	8002f5c <MX_UART2_Init>
  MX_I2C1_Init();
 80020b4:	f000 fefe 	bl	8002eb4 <MX_I2C1_Init>


}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <MX_Peripheral_Start_Init>:

void MX_Peripheral_Start_Init()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	 *  3. TIM Input Cpature Mode Start
	 *  4. ADC DMA Start
	 */
	//if(HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_Handler();

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80020c0:	2100      	movs	r1, #0
 80020c2:	4827      	ldr	r0, [pc, #156]	; (8002160 <MX_Peripheral_Start_Init+0xa4>)
 80020c4:	f004 f962 	bl	800638c <HAL_TIM_PWM_Start>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_Peripheral_Start_Init+0x16>
 80020ce:	f001 f933 	bl	8003338 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80020d2:	2104      	movs	r1, #4
 80020d4:	4822      	ldr	r0, [pc, #136]	; (8002160 <MX_Peripheral_Start_Init+0xa4>)
 80020d6:	f004 f959 	bl	800638c <HAL_TIM_PWM_Start>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_Peripheral_Start_Init+0x28>
 80020e0:	f001 f92a 	bl	8003338 <Error_Handler>

	if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK) Error_Handler();
 80020e4:	2100      	movs	r1, #0
 80020e6:	481f      	ldr	r0, [pc, #124]	; (8002164 <MX_Peripheral_Start_Init+0xa8>)
 80020e8:	f004 fab4 	bl	8006654 <HAL_TIM_IC_Start_IT>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_Peripheral_Start_Init+0x3a>
 80020f2:	f001 f921 	bl	8003338 <Error_Handler>
	if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3)!= HAL_OK) Error_Handler();
 80020f6:	2108      	movs	r1, #8
 80020f8:	481b      	ldr	r0, [pc, #108]	; (8002168 <MX_Peripheral_Start_Init+0xac>)
 80020fa:	f004 faab 	bl	8006654 <HAL_TIM_IC_Start_IT>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_Peripheral_Start_Init+0x4c>
 8002104:	f001 f918 	bl	8003338 <Error_Handler>


	//if(HAL_ADC_Start_DMA(&hadc1, &Buf, 1) != HAL_OK) Error_Handler();

	memset(buf, 0, sizeof(buf));
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	2100      	movs	r1, #0
 800210c:	4817      	ldr	r0, [pc, #92]	; (800216c <MX_Peripheral_Start_Init+0xb0>)
 800210e:	f006 fb51 	bl	80087b4 <memset>
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);

	/*
	 * 1.GPIO PIN Inits
	 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	2101      	movs	r1, #1
 8002116:	4816      	ldr	r0, [pc, #88]	; (8002170 <MX_Peripheral_Start_Init+0xb4>)
 8002118:	f002 fe64 	bl	8004de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <MX_Peripheral_Start_Init+0xb8>)
 8002124:	f002 fe5e 	bl	8004de4 <HAL_GPIO_WritePin>
	 * Get the raw angle.
	 * Store the Init raw angle to a global var.
	 * Then count the revolutions on the basis of that raw angle.
	 * i.e. if the raw angle is 20 deg, then every time the angle goes above 20 is one revolution.
	 */
	as5600.I2Chandle = &hi2c1;
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_Peripheral_Start_Init+0xbc>)
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <MX_Peripheral_Start_Init+0xc0>)
 800212c:	601a      	str	r2, [r3, #0]
//		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
//		//HAL_Delay(500);
//	}

	//HAL_Delay(500); /*Time to set*/   Why?????????
	while(uwTick < 50)
 800212e:	e002      	b.n	8002136 <MX_Peripheral_Start_Init+0x7a>
	{
		AS5600_GetRawAngle(&as5600);
 8002130:	4811      	ldr	r0, [pc, #68]	; (8002178 <MX_Peripheral_Start_Init+0xbc>)
 8002132:	f7fe ff33 	bl	8000f9c <AS5600_GetRawAngle>
	while(uwTick < 50)
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <MX_Peripheral_Start_Init+0xc4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b31      	cmp	r3, #49	; 0x31
 800213c:	d9f8      	bls.n	8002130 <MX_Peripheral_Start_Init+0x74>
	}

	CurrRead = as5600.rawAngle;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_Peripheral_Start_Init+0xbc>)
 8002140:	88da      	ldrh	r2, [r3, #6]
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_Peripheral_Start_Init+0xc8>)
 8002144:	801a      	strh	r2, [r3, #0]

	LastRead = CurrRead;
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_Peripheral_Start_Init+0xc8>)
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_Peripheral_Start_Init+0xcc>)
 800214c:	801a      	strh	r2, [r3, #0]

	rev = 0;
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_Peripheral_Start_Init+0xd0>)
 8002150:	2200      	movs	r2, #0
 8002152:	801a      	strh	r2, [r3, #0]
	Length = 0;
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_Peripheral_Start_Init+0xd4>)
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
	//user_data = "Initialization successful\r\n";
	//data_len = strlen(user_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);


}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200002ec 	.word	0x200002ec
 8002164:	20000334 	.word	0x20000334
 8002168:	200002a4 	.word	0x200002a4
 800216c:	20000480 	.word	0x20000480
 8002170:	40020800 	.word	0x40020800
 8002174:	40020000 	.word	0x40020000
 8002178:	20000458 	.word	0x20000458
 800217c:	20000404 	.word	0x20000404
 8002180:	200005a0 	.word	0x200005a0
 8002184:	200004f6 	.word	0x200004f6
 8002188:	200004f4 	.word	0x200004f4
 800218c:	200004f8 	.word	0x200004f8
 8002190:	200004fc 	.word	0x200004fc

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b5b0      	push	{r4, r5, r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/
	MX_Universal_Init();
 800219a:	f7ff ff75 	bl	8002088 <MX_Universal_Init>

  /* MCU Peripherals Start Commands-------------------------------------------*/
	MX_Peripheral_Start_Init();
 800219e:	f7ff ff8d 	bl	80020bc <MX_Peripheral_Start_Init>
	/*
	 * Winch Start Sequence
	 * 1. One reception of a signal of particular width start the winch sequence
	 * or else keep looping until forever.
	 */
	MX_WINCH_START_SEQ();
 80021a2:	f000 f843 	bl	800222c <MX_WINCH_START_SEQ>

	HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ac:	4819      	ldr	r0, [pc, #100]	; (8002214 <main+0x80>)
 80021ae:	f002 fe19 	bl	8004de4 <HAL_GPIO_WritePin>
	 *
	 */

	//MX_SOFT_START_P_CONTROLLER_RAMP_UP();

	MX_WINCH_P_CONTROLLER();
 80021b2:	f000 f86d 	bl	8002290 <MX_WINCH_P_CONTROLLER>


	leg_len = Length; //Store the length of the first leg.
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <main+0x84>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <main+0x88>)
 80021bc:	6013      	str	r3, [r2, #0]

	HAL_Delay(2000);  //Delay time
 80021be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021c2:	f001 fec9 	bl	8003f58 <HAL_Delay>


	//MX_WINCH_UP_MOTO_RAMP_UP_DOWN();
	MX_WINCH_UP_P_CONTROLLER();
 80021c6:	f000 f993 	bl	80024f0 <MX_WINCH_UP_P_CONTROLLER>
	 */

	//Start the Door Close sequence
	//MX_BomBay_Door_Close();

	while(!bay_door_close);
 80021ca:	bf00      	nop
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <main+0x8c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f083 0301 	eor.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f8      	bne.n	80021cc <main+0x38>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021da:	201c      	movs	r0, #28
 80021dc:	f002 fa5d 	bl	800469a <HAL_NVIC_EnableIRQ>

	MavlinkWinchStatus(&huart2, uwTick, LINE_LENGTH, LINE_SPEED, LINE_TENSION, LINE_VOLTAGE, LINE_CURRENT, LINE_TEMP, MAV_SUCCESSFUL);
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <main+0x90>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	461c      	mov	r4, r3
 80021e8:	4615      	mov	r5, r2
 80021ea:	2301      	movs	r3, #1
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 80021f6:	eef2 1a08 	vmov.f32	s3, #40	; 0x41400000  12.0
 80021fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80021fe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002202:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002206:	4622      	mov	r2, r4
 8002208:	462b      	mov	r3, r5
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <main+0x94>)
 800220c:	f7ff febe 	bl	8001f8c <MavlinkWinchStatus>

	//Reset the entire Winch Sequence.
	//HAL_NVIC_SystemReset();

	while(1)
 8002210:	e7fe      	b.n	8002210 <main+0x7c>
 8002212:	bf00      	nop
 8002214:	40020800 	.word	0x40020800
 8002218:	200004fc 	.word	0x200004fc
 800221c:	20000510 	.word	0x20000510
 8002220:	2000050e 	.word	0x2000050e
 8002224:	200005a0 	.word	0x200005a0
 8002228:	200003c0 	.word	0x200003c0

0800222c <MX_WINCH_START_SEQ>:

///////////////////////////////////////////////////////////////////////////////////////////APPLICATION_LEVEL_ROUTINES//////////////////////////////////////////////////////////////


static void MX_WINCH_START_SEQ()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	/*
	 * This part loops until a signal of particular pulse width is captured.
	 */
	//UNUSED();
	while(!(START_THE_SEQUENCE)){};
 8002230:	bf00      	nop
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <MX_WINCH_START_SEQ+0x54>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f8      	bne.n	8002232 <MX_WINCH_START_SEQ+0x6>

	Start_Flag = false;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_WINCH_START_SEQ+0x58>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Was door now winch
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224c:	480e      	ldr	r0, [pc, #56]	; (8002288 <MX_WINCH_START_SEQ+0x5c>)
 800224e:	f002 fdc9 	bl	8004de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Was winch now door pin
 8002252:	2200      	movs	r2, #0
 8002254:	2120      	movs	r1, #32
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_WINCH_START_SEQ+0x5c>)
 8002258:	f002 fdc4 	bl	8004de4 <HAL_GPIO_WritePin>
	/*
	 * Disable all the non-critical interrupts in the beginning.
	 * Respective interrupts are enabled when they are required.
	 */

	HAL_NVIC_DisableIRQ(EXTI3_IRQn);  //Spring
 800225c:	2009      	movs	r0, #9
 800225e:	f002 fa2a 	bl	80046b6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //Roof
 8002262:	2006      	movs	r0, #6
 8002264:	f002 fa27 	bl	80046b6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002268:	2025      	movs	r0, #37	; 0x25
 800226a:	f002 fa24 	bl	80046b6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 800226e:	2026      	movs	r0, #38	; 0x26
 8002270:	f002 fa21 	bl	80046b6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8002274:	201c      	movs	r0, #28
 8002276:	f002 fa1e 	bl	80046b6 <HAL_NVIC_DisableIRQ>
	 * 1. Receive the hover current.
	 * 2. So that it could be compared against the current recevied during the touchdown.
	 */
	//MavLinkReceiveHoverCurr(&huart2, receivedData);

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000509 	.word	0x20000509
 8002284:	20000500 	.word	0x20000500
 8002288:	40020000 	.word	0x40020000
 800228c:	00000000 	.word	0x00000000

08002290 <MX_WINCH_P_CONTROLLER>:

/*
 * This sub-routine interfaces the P-based controller for Winch Down with Payload
 */
void MX_WINCH_P_CONTROLLER(void)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b090      	sub	sp, #64	; 0x40
 8002294:	af00      	add	r7, sp, #0
	PID_Handle_t pid;
	//uint32_t motor_output = 0;

	pid.Ts = 10; // 10 milliseconds.
 8002296:	4b88      	ldr	r3, [pc, #544]	; (80024b8 <MX_WINCH_P_CONTROLLER+0x228>)
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
	pid.kp = 3.5;
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <MX_WINCH_P_CONTROLLER+0x22c>)
 800229c:	603b      	str	r3, [r7, #0]
	PID_Init(&pid);
 800229e:	463b      	mov	r3, r7
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fed2 	bl	800104a <PID_Init>



	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig) && !(enable_man_winch))
 80022a6:	e05c      	b.n	8002362 <MX_WINCH_P_CONTROLLER+0xd2>
	{
		motor_output = P_Compute(&pid, Length, LEN_TO_WINCH_DOWN, uwTick);
 80022a8:	4b85      	ldr	r3, [pc, #532]	; (80024c0 <MX_WINCH_P_CONTROLLER+0x230>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <MX_WINCH_P_CONTROLLER+0x234>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	ee07 3a10 	vmov	s14, r3
 80022b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80022ba:	463b      	mov	r3, r7
 80022bc:	eeb0 1a47 	vmov.f32	s2, s14
 80022c0:	eddf 0a81 	vldr	s1, [pc, #516]	; 80024c8 <MX_WINCH_P_CONTROLLER+0x238>
 80022c4:	eeb0 0a67 	vmov.f32	s0, s15
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fee5 	bl	8001098 <P_Compute>
 80022ce:	eef0 7a40 	vmov.f32	s15, s0
 80022d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d6:	ee17 2a90 	vmov	r2, s15
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <MX_WINCH_P_CONTROLLER+0x23c>)
 80022dc:	601a      	str	r2, [r3, #0]

		if(motor_output <= 30) motor_output = __8BIT_OUTPUT_MIN;
 80022de:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <MX_WINCH_P_CONTROLLER+0x23c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b1e      	cmp	r3, #30
 80022e4:	d802      	bhi.n	80022ec <MX_WINCH_P_CONTROLLER+0x5c>
 80022e6:	4b79      	ldr	r3, [pc, #484]	; (80024cc <MX_WINCH_P_CONTROLLER+0x23c>)
 80022e8:	221e      	movs	r2, #30
 80022ea:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(motor_output)/100);
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f90f 	bl	8000514 <__aeabi_ui2d>
 80022f6:	4604      	mov	r4, r0
 80022f8:	460d      	mov	r5, r1
 80022fa:	4b74      	ldr	r3, [pc, #464]	; (80024cc <MX_WINCH_P_CONTROLLER+0x23c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f908 	bl	8000514 <__aeabi_ui2d>
 8002304:	a368      	add	r3, pc, #416	; (adr r3, 80024a8 <MX_WINCH_P_CONTROLLER+0x218>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f97d 	bl	8000608 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fe f977 	bl	8000608 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <MX_WINCH_P_CONTROLLER+0x244>)
 8002328:	f7fe fa98 	bl	800085c <__aeabi_ddiv>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4967      	ldr	r1, [pc, #412]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 8002332:	680c      	ldr	r4, [r1, #0]
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fc3e 	bl	8000bb8 <__aeabi_d2uiz>
 800233c:	4603      	mov	r3, r0
 800233e:	63a3      	str	r3, [r4, #56]	; 0x38

		//sprintf((char*)buf, "PWM: %ld, Length: %f, Tick: %ld\r\n", motor_output, Length, tick); //i*0.019605

		//HAL_Delay(10);

		if(Length >= THRESHOLD_LEN)
 8002340:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <MX_WINCH_P_CONTROLLER+0x230>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800234a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	da00      	bge.n	8002356 <MX_WINCH_P_CONTROLLER+0xc6>
 8002354:	e005      	b.n	8002362 <MX_WINCH_P_CONTROLLER+0xd2>
		{
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002356:	2009      	movs	r0, #9
 8002358:	f002 f99f 	bl	800469a <HAL_NVIC_EnableIRQ>
			poop_back = true;
 800235c:	4b5e      	ldr	r3, [pc, #376]	; (80024d8 <MX_WINCH_P_CONTROLLER+0x248>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig) && !(enable_man_winch))
 8002362:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <MX_WINCH_P_CONTROLLER+0x230>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80024c8 <MX_WINCH_P_CONTROLLER+0x238>
 800236c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d80d      	bhi.n	8002392 <MX_WINCH_P_CONTROLLER+0x102>
 8002376:	4b59      	ldr	r3, [pc, #356]	; (80024dc <MX_WINCH_P_CONTROLLER+0x24c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <MX_WINCH_P_CONTROLLER+0x102>
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <MX_WINCH_P_CONTROLLER+0x250>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d18a      	bne.n	80022a8 <MX_WINCH_P_CONTROLLER+0x18>
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);


	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	2120      	movs	r1, #32
 8002396:	4853      	ldr	r0, [pc, #332]	; (80024e4 <MX_WINCH_P_CONTROLLER+0x254>)
 8002398:	f002 fd24 	bl	8004de4 <HAL_GPIO_WritePin>

	for(int i =0; i<12000; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a0:	e01f      	b.n	80023e2 <MX_WINCH_P_CONTROLLER+0x152>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8b4 	bl	8000514 <__aeabi_ui2d>
 80023ac:	a340      	add	r3, pc, #256	; (adr r3, 80024b0 <MX_WINCH_P_CONTROLLER+0x220>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe f929 	bl	8000608 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <MX_WINCH_P_CONTROLLER+0x244>)
 80023c4:	f7fe fa4a 	bl	800085c <__aeabi_ddiv>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4940      	ldr	r1, [pc, #256]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 80023ce:	680c      	ldr	r4, [r1, #0]
 80023d0:	4610      	mov	r0, r2
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7fe fbf0 	bl	8000bb8 <__aeabi_d2uiz>
 80023d8:	4603      	mov	r3, r0
 80023da:	63a3      	str	r3, [r4, #56]	; 0x38
	for(int i =0; i<12000; i++)
 80023dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023de:	3301      	adds	r3, #1
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e4:	f642 62df 	movw	r2, #11999	; 0x2edf
 80023e8:	4293      	cmp	r3, r2
 80023ea:	ddda      	ble.n	80023a2 <MX_WINCH_P_CONTROLLER+0x112>

	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f88f 	bl	8000514 <__aeabi_ui2d>
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	f7fe f903 	bl	8000608 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <MX_WINCH_P_CONTROLLER+0x244>)
 8002410:	f7fe fa24 	bl	800085c <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	492d      	ldr	r1, [pc, #180]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 800241a:	680c      	ldr	r4, [r1, #0]
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7fe fbca 	bl	8000bb8 <__aeabi_d2uiz>
 8002424:	4603      	mov	r3, r0
 8002426:	63a3      	str	r3, [r4, #56]	; 0x38

	/*
	 * Edge case: If the spring is never triggered. Disable it so has to avoid any false triggers on the way up.
	 */
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8002428:	2009      	movs	r0, #9
 800242a:	f002 f944 	bl	80046b6 <HAL_NVIC_DisableIRQ>


	if(enable_man_winch)
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <MX_WINCH_P_CONTROLLER+0x250>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01d      	beq.n	8002472 <MX_WINCH_P_CONTROLLER+0x1e2>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f86a 	bl	8000514 <__aeabi_ui2d>
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	f7fe f8de 	bl	8000608 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <MX_WINCH_P_CONTROLLER+0x244>)
 800245a:	f7fe f9ff 	bl	800085c <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	491b      	ldr	r1, [pc, #108]	; (80024d0 <MX_WINCH_P_CONTROLLER+0x240>)
 8002464:	680c      	ldr	r4, [r1, #0]
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fba5 	bl	8000bb8 <__aeabi_d2uiz>
 800246e:	4603      	mov	r3, r0
 8002470:	63a3      	str	r3, [r4, #56]	; 0x38

	/*
	 * Saves the no.of revolutions
	 */
	if(rev < 0) Counts = -rev;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <MX_WINCH_P_CONTROLLER+0x258>)
 8002474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002478:	2b00      	cmp	r3, #0
 800247a:	da09      	bge.n	8002490 <MX_WINCH_P_CONTROLLER+0x200>
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_WINCH_P_CONTROLLER+0x258>)
 800247e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002482:	b29b      	uxth	r3, r3
 8002484:	425b      	negs	r3, r3
 8002486:	b29b      	uxth	r3, r3
 8002488:	b21a      	sxth	r2, r3
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_WINCH_P_CONTROLLER+0x25c>)
 800248c:	801a      	strh	r2, [r3, #0]
	else Counts = rev;

}
 800248e:	e004      	b.n	800249a <MX_WINCH_P_CONTROLLER+0x20a>
	else Counts = rev;
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <MX_WINCH_P_CONTROLLER+0x258>)
 8002492:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_WINCH_P_CONTROLLER+0x25c>)
 8002498:	801a      	strh	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3740      	adds	r7, #64	; 0x40
 800249e:	46bd      	mov	sp, r7
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	f3af 8000 	nop.w
 80024a8:	190cb39b 	.word	0x190cb39b
 80024ac:	3fd91919 	.word	0x3fd91919
 80024b0:	877be861 	.word	0x877be861
 80024b4:	40278787 	.word	0x40278787
 80024b8:	41200000 	.word	0x41200000
 80024bc:	40600000 	.word	0x40600000
 80024c0:	200004fc 	.word	0x200004fc
 80024c4:	200005a0 	.word	0x200005a0
 80024c8:	42280000 	.word	0x42280000
 80024cc:	20000524 	.word	0x20000524
 80024d0:	200002ec 	.word	0x200002ec
 80024d4:	40590000 	.word	0x40590000
 80024d8:	2000050b 	.word	0x2000050b
 80024dc:	2000050c 	.word	0x2000050c
 80024e0:	2000050a 	.word	0x2000050a
 80024e4:	40020000 	.word	0x40020000
 80024e8:	200004f8 	.word	0x200004f8
 80024ec:	200004fa 	.word	0x200004fa

080024f0 <MX_WINCH_UP_P_CONTROLLER>:

/*
 * This sub-routine interfaces the P-based controller for Winch Up with Payload
 */
void MX_WINCH_UP_P_CONTROLLER(void)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b092      	sub	sp, #72	; 0x48
 80024f4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80024f6:	2201      	movs	r2, #1
 80024f8:	2120      	movs	r1, #32
 80024fa:	4867      	ldr	r0, [pc, #412]	; (8002698 <MX_WINCH_UP_P_CONTROLLER+0x1a8>)
 80024fc:	f002 fc72 	bl	8004de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002506:	4864      	ldr	r0, [pc, #400]	; (8002698 <MX_WINCH_UP_P_CONTROLLER+0x1a8>)
 8002508:	f002 fc6c 	bl	8004de4 <HAL_GPIO_WritePin>


	PID_Handle_t pid;
	//uint32_t motor_output = 0;

	pid.Ts = 10; // 10 milliseconds.
 800250c:	4b63      	ldr	r3, [pc, #396]	; (800269c <MX_WINCH_UP_P_CONTROLLER+0x1ac>)
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
	pid.kp = 5;
 8002510:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <MX_WINCH_UP_P_CONTROLLER+0x1b0>)
 8002512:	603b      	str	r3, [r7, #0]
	PID_Init(&pid);
 8002514:	463b      	mov	r3, r7
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fd97 	bl	800104a <PID_Init>

	float SetPoint = leg_len;
 800251c:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <MX_WINCH_UP_P_CONTROLLER+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	643b      	str	r3, [r7, #64]	; 0x40
	float Measurement = 0;
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	647b      	str	r3, [r7, #68]	; 0x44
	float ThresholdLen = SetPoint * 0.97;
 8002528:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800252a:	f7fe f815 	bl	8000558 <__aeabi_f2d>
 800252e:	a356      	add	r3, pc, #344	; (adr r3, 8002688 <MX_WINCH_UP_P_CONTROLLER+0x198>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f868 	bl	8000608 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb5a 	bl	8000bf8 <__aeabi_d2f>
 8002544:	4603      	mov	r3, r0
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c

	while((Measurement <= SetPoint) && !(enable_man_winch))
 8002548:	e066      	b.n	8002618 <MX_WINCH_UP_P_CONTROLLER+0x128>
	{
		motor_output = P_Compute(&pid, Measurement, SetPoint, uwTick);
 800254a:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <MX_WINCH_UP_P_CONTROLLER+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002556:	463b      	mov	r3, r7
 8002558:	eeb0 1a67 	vmov.f32	s2, s15
 800255c:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8002560:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fd97 	bl	8001098 <P_Compute>
 800256a:	eef0 7a40 	vmov.f32	s15, s0
 800256e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002572:	ee17 2a90 	vmov	r2, s15
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <MX_WINCH_UP_P_CONTROLLER+0x1bc>)
 8002578:	601a      	str	r2, [r3, #0]

		if(motor_output <= 120) motor_output = 120;
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <MX_WINCH_UP_P_CONTROLLER+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b78      	cmp	r3, #120	; 0x78
 8002580:	d803      	bhi.n	800258a <MX_WINCH_UP_P_CONTROLLER+0x9a>
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <MX_WINCH_UP_P_CONTROLLER+0x1bc>)
 8002584:	2278      	movs	r2, #120	; 0x78
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e003      	b.n	8002592 <MX_WINCH_UP_P_CONTROLLER+0xa2>

		else motor_output += __8BIT_ADD_MAX_OFFSET;
 800258a:	4b48      	ldr	r3, [pc, #288]	; (80026ac <MX_WINCH_UP_P_CONTROLLER+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a47      	ldr	r2, [pc, #284]	; (80026ac <MX_WINCH_UP_P_CONTROLLER+0x1bc>)
 8002590:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(motor_output)/100);
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <MX_WINCH_UP_P_CONTROLLER+0x1c0>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffbc 	bl	8000514 <__aeabi_ui2d>
 800259c:	4604      	mov	r4, r0
 800259e:	460d      	mov	r5, r1
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <MX_WINCH_UP_P_CONTROLLER+0x1bc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ffb5 	bl	8000514 <__aeabi_ui2d>
 80025aa:	a339      	add	r3, pc, #228	; (adr r3, 8002690 <MX_WINCH_UP_P_CONTROLLER+0x1a0>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f82a 	bl	8000608 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fe f824 	bl	8000608 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <MX_WINCH_UP_P_CONTROLLER+0x1c4>)
 80025ce:	f7fe f945 	bl	800085c <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4936      	ldr	r1, [pc, #216]	; (80026b0 <MX_WINCH_UP_P_CONTROLLER+0x1c0>)
 80025d8:	680c      	ldr	r4, [r1, #0]
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe faeb 	bl	8000bb8 <__aeabi_d2uiz>
 80025e2:	4603      	mov	r3, r0
 80025e4:	63a3      	str	r3, [r4, #56]	; 0x38



		if(Measurement >= ThresholdLen)
 80025e6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	db06      	blt.n	8002606 <MX_WINCH_UP_P_CONTROLLER+0x116>
		{

			/*
			 *Enable the close door flag
			 */
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025f8:	2006      	movs	r0, #6
 80025fa:	f002 f84e 	bl	800469a <HAL_NVIC_EnableIRQ>
			close_door = true;
 80025fe:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <MX_WINCH_UP_P_CONTROLLER+0x1c8>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
			break;
 8002604:	e018      	b.n	8002638 <MX_WINCH_UP_P_CONTROLLER+0x148>
//			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
//			break;
//		}


		Measurement = (SetPoint - Length);
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <MX_WINCH_UP_P_CONTROLLER+0x1cc>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002614:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	while((Measurement <= SetPoint) && !(enable_man_winch))
 8002618:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800261c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d806      	bhi.n	8002638 <MX_WINCH_UP_P_CONTROLLER+0x148>
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <MX_WINCH_UP_P_CONTROLLER+0x1d0>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f083 0301 	eor.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d188      	bne.n	800254a <MX_WINCH_UP_P_CONTROLLER+0x5a>

	}

	if(enable_man_winch)
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_WINCH_UP_P_CONTROLLER+0x1d0>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01d      	beq.n	800267c <MX_WINCH_UP_P_CONTROLLER+0x18c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <MX_WINCH_UP_P_CONTROLLER+0x1c0>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff65 	bl	8000514 <__aeabi_ui2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	f7fd ffd9 	bl	8000608 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <MX_WINCH_UP_P_CONTROLLER+0x1c4>)
 8002664:	f7fe f8fa 	bl	800085c <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4910      	ldr	r1, [pc, #64]	; (80026b0 <MX_WINCH_UP_P_CONTROLLER+0x1c0>)
 800266e:	680c      	ldr	r4, [r1, #0]
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe faa0 	bl	8000bb8 <__aeabi_d2uiz>
 8002678:	4603      	mov	r3, r0
 800267a:	63a3      	str	r3, [r4, #56]	; 0x38

}
 800267c:	bf00      	nop
 800267e:	3748      	adds	r7, #72	; 0x48
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}
 8002684:	f3af 8000 	nop.w
 8002688:	70a3d70a 	.word	0x70a3d70a
 800268c:	3fef0a3d 	.word	0x3fef0a3d
 8002690:	190cb39b 	.word	0x190cb39b
 8002694:	3fd91919 	.word	0x3fd91919
 8002698:	40020000 	.word	0x40020000
 800269c:	41200000 	.word	0x41200000
 80026a0:	40a00000 	.word	0x40a00000
 80026a4:	20000510 	.word	0x20000510
 80026a8:	200005a0 	.word	0x200005a0
 80026ac:	20000524 	.word	0x20000524
 80026b0:	200002ec 	.word	0x200002ec
 80026b4:	40590000 	.word	0x40590000
 80026b8:	2000050d 	.word	0x2000050d
 80026bc:	200004fc 	.word	0x200004fc
 80026c0:	2000050a 	.word	0x2000050a

080026c4 <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a85      	ldr	r2, [pc, #532]	; (80028e8 <HAL_TIM_IC_CaptureCallback+0x224>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f040 80de 	bne.w	8002894 <HAL_TIM_IC_CaptureCallback+0x1d0>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80026d8:	4b84      	ldr	r3, [pc, #528]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x228>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80026e0:	2100      	movs	r1, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f004 fb36 	bl	8006d54 <HAL_TIM_ReadCapturedValue>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a81      	ldr	r2, [pc, #516]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80026ec:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80026ee:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x228>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured2 = 0; // set it back to false
		}
	}
}
 80026f4:	e1d7      	b.n	8002aa6 <HAL_TIM_IC_CaptureCallback+0x3e2>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80026f6:	2100      	movs	r1, #0
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f004 fb2b 	bl	8006d54 <HAL_TIM_ReadCapturedValue>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a7c      	ldr	r2, [pc, #496]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002702:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8002704:	4b7b      	ldr	r3, [pc, #492]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d907      	bls.n	8002720 <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8002710:	4b78      	ldr	r3, [pc, #480]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0x234>)
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00f      	b.n	8002740 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8002720:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d909      	bls.n	8002740 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800272c:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x230>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800273a:	33ff      	adds	r3, #255	; 0xff
 800273c:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0x234>)
 800273e:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8002740:	4b6e      	ldr	r3, [pc, #440]	; (80028fc <HAL_TIM_IC_CaptureCallback+0x238>)
 8002742:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8002744:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002750:	edd7 6a03 	vldr	s13, [r7, #12]
 8002754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 800275e:	eddf 6a69 	vldr	s13, [pc, #420]	; 8002904 <HAL_TIM_IC_CaptureCallback+0x240>
 8002762:	ed97 7a03 	vldr	s14, [r7, #12]
 8002766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276a:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 800276e:	4b62      	ldr	r3, [pc, #392]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277a:	edd7 7a02 	vldr	s15, [r7, #8]
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002786:	ee17 2a90 	vmov	r2, s15
 800278a:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x244>)
 800278c:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 800278e:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f240 726b 	movw	r2, #1899	; 0x76b
 8002796:	4293      	cmp	r3, r2
 8002798:	d90d      	bls.n	80027b6 <HAL_TIM_IC_CaptureCallback+0xf2>
				if(!software_deinit)
 800279a:	4b5c      	ldr	r3, [pc, #368]	; (800290c <HAL_TIM_IC_CaptureCallback+0x248>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	f083 0301 	eor.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d06d      	beq.n	8002884 <HAL_TIM_IC_CaptureCallback+0x1c0>
					Start_Flag = true;
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
					software_deinit = false;
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <HAL_TIM_IC_CaptureCallback+0x248>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e066      	b.n	8002884 <HAL_TIM_IC_CaptureCallback+0x1c0>
			else if(usWidth >= THROTTLE_HALF && usWidth < THROTTLE_FULL)
 80027b6:	4b54      	ldr	r3, [pc, #336]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x244>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80027be:	4293      	cmp	r3, r2
 80027c0:	d917      	bls.n	80027f2 <HAL_TIM_IC_CaptureCallback+0x12e>
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x244>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f240 726b 	movw	r2, #1899	; 0x76b
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d811      	bhi.n	80027f2 <HAL_TIM_IC_CaptureCallback+0x12e>
				Start_Flag = false;
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
				trig = 0;
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_TIM_IC_CaptureCallback+0x250>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
				if(enable_man_winch)
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <HAL_TIM_IC_CaptureCallback+0x254>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d050      	beq.n	8002884 <HAL_TIM_IC_CaptureCallback+0x1c0>
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80027e2:	2104      	movs	r1, #4
 80027e4:	484d      	ldr	r0, [pc, #308]	; (800291c <HAL_TIM_IC_CaptureCallback+0x258>)
 80027e6:	f003 fdd1 	bl	800638c <HAL_TIM_PWM_Start>
					HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80027ea:	201e      	movs	r0, #30
 80027ec:	f001 ff63 	bl	80046b6 <HAL_NVIC_DisableIRQ>
				if(enable_man_winch)
 80027f0:	e048      	b.n	8002884 <HAL_TIM_IC_CaptureCallback+0x1c0>
			else if(usWidth < THROTTLE_HALF)
 80027f2:	4b45      	ldr	r3, [pc, #276]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x244>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d842      	bhi.n	8002884 <HAL_TIM_IC_CaptureCallback+0x1c0>
				e_stop = true;
 80027fe:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
				MavlinkWinchStatus(&huart2, uwTick, LINE_LENGTH, LINE_SPEED, LINE_TENSION, LINE_VOLTAGE, LINE_CURRENT, LINE_TEMP, MAV_EMERGENCY_STOP);
 8002804:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	461c      	mov	r4, r3
 800280c:	4615      	mov	r5, r2
 800280e:	2340      	movs	r3, #64	; 0x40
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 800281a:	eef2 1a08 	vmov.f32	s3, #40	; 0x41400000  12.0
 800281e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002822:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002826:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	483e      	ldr	r0, [pc, #248]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x264>)
 8002830:	f7ff fbac 	bl	8001f8c <MavlinkWinchStatus>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8002834:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_TIM_IC_CaptureCallback+0x258>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe6b 	bl	8000514 <__aeabi_ui2d>
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	f7fd fedf 	bl	8000608 <__aeabi_dmul>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_TIM_IC_CaptureCallback+0x268>)
 8002858:	f7fe f800 	bl	800085c <__aeabi_ddiv>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	492e      	ldr	r1, [pc, #184]	; (800291c <HAL_TIM_IC_CaptureCallback+0x258>)
 8002862:	680c      	ldr	r4, [r1, #0]
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe f9a6 	bl	8000bb8 <__aeabi_d2uiz>
 800286c:	4603      	mov	r3, r0
 800286e:	63a3      	str	r3, [r4, #56]	; 0x38
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002870:	2104      	movs	r1, #4
 8002872:	482a      	ldr	r0, [pc, #168]	; (800291c <HAL_TIM_IC_CaptureCallback+0x258>)
 8002874:	f003 fe3a 	bl	80064ec <HAL_TIM_PWM_Stop>
				enable_man_winch = true;
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <HAL_TIM_IC_CaptureCallback+0x254>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
				HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800287e:	201c      	movs	r0, #28
 8002880:	f001 ff0b 	bl	800469a <HAL_NVIC_EnableIRQ>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x228>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
}
 8002892:	e108      	b.n	8002aa6 <HAL_TIM_IC_CaptureCallback+0x3e2>
	else if(htim->Instance == TIM2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	f040 8103 	bne.w	8002aa6 <HAL_TIM_IC_CaptureCallback+0x3e2>
		if (Is_First_Captured2==0) // if the first rising edge is not captured
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_TIM_IC_CaptureCallback+0x1fa>
			IC2_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 80028a8:	2108      	movs	r1, #8
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f004 fa52 	bl	8006d54 <HAL_TIM_ReadCapturedValue>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_TIM_IC_CaptureCallback+0x270>)
 80028b4:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;  // set the first captured as true
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	e0f3      	b.n	8002aa6 <HAL_TIM_IC_CaptureCallback+0x3e2>
			IC2_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80028be:	2108      	movs	r1, #8
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f004 fa47 	bl	8006d54 <HAL_TIM_ReadCapturedValue>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x274>)
 80028ca:	6013      	str	r3, [r2, #0]
			if (IC2_Val2 > IC2_Val1)
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x274>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_TIM_IC_CaptureCallback+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d933      	bls.n	8002940 <HAL_TIM_IC_CaptureCallback+0x27c>
				Difference2 = IC2_Val2-IC2_Val1;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_TIM_IC_CaptureCallback+0x274>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_TIM_IC_CaptureCallback+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_TIM_IC_CaptureCallback+0x278>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e039      	b.n	800295c <HAL_TIM_IC_CaptureCallback+0x298>
 80028e8:	40000800 	.word	0x40000800
 80028ec:	200004cc 	.word	0x200004cc
 80028f0:	200004c0 	.word	0x200004c0
 80028f4:	200004c4 	.word	0x200004c4
 80028f8:	200004c8 	.word	0x200004c8
 80028fc:	49742400 	.word	0x49742400
 8002900:	200004d4 	.word	0x200004d4
 8002904:	49742400 	.word	0x49742400
 8002908:	200004d0 	.word	0x200004d0
 800290c:	200004d8 	.word	0x200004d8
 8002910:	20000500 	.word	0x20000500
 8002914:	20000504 	.word	0x20000504
 8002918:	2000050a 	.word	0x2000050a
 800291c:	200002ec 	.word	0x200002ec
 8002920:	20000508 	.word	0x20000508
 8002924:	200005a0 	.word	0x200005a0
 8002928:	200003c0 	.word	0x200003c0
 800292c:	40590000 	.word	0x40590000
 8002930:	200004e8 	.word	0x200004e8
 8002934:	200004dc 	.word	0x200004dc
 8002938:	200004e0 	.word	0x200004e0
 800293c:	200004e4 	.word	0x200004e4
			else if (IC2_Val1 > IC2_Val2)
 8002940:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d907      	bls.n	800295c <HAL_TIM_IC_CaptureCallback+0x298>
				Difference2 = (0xffffffff - IC2_Val1) + IC2_Val2;
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_TIM_IC_CaptureCallback+0x3f0>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800295a:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 800295c:	4b57      	ldr	r3, [pc, #348]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x3f8>)
 800295e:	617b      	str	r3, [r7, #20]
			frequency2 = refClock/Difference2;
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800296c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002974:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8002976:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 800297a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002ac4 <HAL_TIM_IC_CaptureCallback+0x400>
 800297e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002986:	edc7 7a04 	vstr	s15, [r7, #16]
			usWidth2 = Difference2*mFactor;
 800298a:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002996:	edd7 7a04 	vldr	s15, [r7, #16]
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a2:	ee17 2a90 	vmov	r2, s15
 80029a6:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x404>)
 80029a8:	601a      	str	r2, [r3, #0]
			if(usWidth2 >= MAN_WINCH_UP)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x404>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f240 726b 	movw	r2, #1899	; 0x76b
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d915      	bls.n	80029e2 <HAL_TIM_IC_CaptureCallback+0x31e>
					payload_at_20_up = true;
 80029b6:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x408>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
					payload_at_30_up = false;
 80029bc:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x40c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
					payload_at_0_up  = false;
 80029c2:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <HAL_TIM_IC_CaptureCallback+0x410>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
					payload_at_0_stop = false;
 80029c8:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_TIM_IC_CaptureCallback+0x414>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
					payload_at_20_down = false;
 80029ce:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x418>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
					payload_at_30_down = false;
 80029d4:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_TIM_IC_CaptureCallback+0x41c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
					payload_at_0_down  = false;
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <HAL_TIM_IC_CaptureCallback+0x420>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e05a      	b.n	8002a98 <HAL_TIM_IC_CaptureCallback+0x3d4>
			else if(usWidth2 >= MAN_WINCH_STOP && usWidth2 < MAN_WINCH_UP)
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x404>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d939      	bls.n	8002a62 <HAL_TIM_IC_CaptureCallback+0x39e>
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x404>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f240 726b 	movw	r2, #1899	; 0x76b
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d833      	bhi.n	8002a62 <HAL_TIM_IC_CaptureCallback+0x39e>
				payload_at_0_stop  = true;
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_TIM_IC_CaptureCallback+0x414>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
				payload_at_20_down = false;
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x418>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
				payload_at_30_down = false;
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_TIM_IC_CaptureCallback+0x41c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
				payload_at_0_down  = false;
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_TIM_IC_CaptureCallback+0x420>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
				payload_at_30_up = false;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
				payload_at_20_up = false;
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x408>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
				payload_at_0_up  = false;
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_STOP)/100);
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_TIM_IC_CaptureCallback+0x424>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd73 	bl	8000514 <__aeabi_ui2d>
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f7fd fde7 	bl	8000608 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_TIM_IC_CaptureCallback+0x428>)
 8002a48:	f7fd ff08 	bl	800085c <__aeabi_ddiv>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <HAL_TIM_IC_CaptureCallback+0x424>)
 8002a52:	680c      	ldr	r4, [r1, #0]
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ae 	bl	8000bb8 <__aeabi_d2uiz>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a60:	e01a      	b.n	8002a98 <HAL_TIM_IC_CaptureCallback+0x3d4>
			else if(usWidth2 < MAN_WINCH_STOP)
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d814      	bhi.n	8002a98 <HAL_TIM_IC_CaptureCallback+0x3d4>
					payload_at_20_down = true;
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_TIM_IC_CaptureCallback+0x418>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
					payload_at_30_down = false;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_TIM_IC_CaptureCallback+0x41c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
					payload_at_0_down  = false;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_TIM_IC_CaptureCallback+0x420>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
					payload_at_0_stop = false;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_TIM_IC_CaptureCallback+0x414>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
					payload_at_30_up = false;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
					payload_at_20_up = false;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x408>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
					payload_at_0_up  = false;
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_TIM_IC_CaptureCallback+0x410>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured2 = 0; // set it back to false
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200004dc 	.word	0x200004dc
 8002ab4:	200004e0 	.word	0x200004e0
 8002ab8:	200004e4 	.word	0x200004e4
 8002abc:	49742400 	.word	0x49742400
 8002ac0:	200004f0 	.word	0x200004f0
 8002ac4:	49742400 	.word	0x49742400
 8002ac8:	200004ec 	.word	0x200004ec
 8002acc:	2000051d 	.word	0x2000051d
 8002ad0:	2000051e 	.word	0x2000051e
 8002ad4:	2000051c 	.word	0x2000051c
 8002ad8:	2000051f 	.word	0x2000051f
 8002adc:	20000521 	.word	0x20000521
 8002ae0:	20000522 	.word	0x20000522
 8002ae4:	20000520 	.word	0x20000520
 8002ae8:	200002ec 	.word	0x200002ec
 8002aec:	40590000 	.word	0x40590000
 8002af0:	200004e8 	.word	0x200004e8
 8002af4:	00000000 	.word	0x00000000

08002af8 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 8002af8:	b598      	push	{r3, r4, r7, lr}
 8002afa:	af00      	add	r7, sp, #0

	indx++;  //Monitors the time
 8002afc:	4b80      	ldr	r3, [pc, #512]	; (8002d00 <HAL_SYSTICK_Callback+0x208>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_SYSTICK_Callback+0x208>)
 8002b06:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 8002b08:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <HAL_SYSTICK_Callback+0x20c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a7d      	ldr	r2, [pc, #500]	; (8002d04 <HAL_SYSTICK_Callback+0x20c>)
 8002b10:	6013      	str	r3, [r2, #0]

	if(payload_at_20_up)
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_SYSTICK_Callback+0x210>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d027      	beq.n	8002b6a <HAL_SYSTICK_Callback+0x72>
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b20:	487a      	ldr	r0, [pc, #488]	; (8002d0c <HAL_SYSTICK_Callback+0x214>)
 8002b22:	f002 f95f 	bl	8004de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	2120      	movs	r1, #32
 8002b2a:	4878      	ldr	r0, [pc, #480]	; (8002d0c <HAL_SYSTICK_Callback+0x214>)
 8002b2c:	f002 f95a 	bl	8004de4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_PAYLOAD_2o)/100);
 8002b30:	4b77      	ldr	r3, [pc, #476]	; (8002d10 <HAL_SYSTICK_Callback+0x218>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fced 	bl	8000514 <__aeabi_ui2d>
 8002b3a:	a36b      	add	r3, pc, #428	; (adr r3, 8002ce8 <HAL_SYSTICK_Callback+0x1f0>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fd fd62 	bl	8000608 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_SYSTICK_Callback+0x21c>)
 8002b52:	f7fd fe83 	bl	800085c <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	496d      	ldr	r1, [pc, #436]	; (8002d10 <HAL_SYSTICK_Callback+0x218>)
 8002b5c:	680c      	ldr	r4, [r1, #0]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f829 	bl	8000bb8 <__aeabi_d2uiz>
 8002b66:	4603      	mov	r3, r0
 8002b68:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	if(payload_at_20_down)
 8002b6a:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <HAL_SYSTICK_Callback+0x220>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d027      	beq.n	8002bc2 <HAL_SYSTICK_Callback+0xca>
	{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 8002b72:	2200      	movs	r2, #0
 8002b74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b78:	4864      	ldr	r0, [pc, #400]	; (8002d0c <HAL_SYSTICK_Callback+0x214>)
 8002b7a:	f002 f933 	bl	8004de4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2120      	movs	r1, #32
 8002b82:	4862      	ldr	r0, [pc, #392]	; (8002d0c <HAL_SYSTICK_Callback+0x214>)
 8002b84:	f002 f92e 	bl	8004de4 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_PAYLOAD_2o)/100);
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_SYSTICK_Callback+0x218>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcc1 	bl	8000514 <__aeabi_ui2d>
 8002b92:	a355      	add	r3, pc, #340	; (adr r3, 8002ce8 <HAL_SYSTICK_Callback+0x1f0>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f7fd fd36 	bl	8000608 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	4b5a      	ldr	r3, [pc, #360]	; (8002d14 <HAL_SYSTICK_Callback+0x21c>)
 8002baa:	f7fd fe57 	bl	800085c <__aeabi_ddiv>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4957      	ldr	r1, [pc, #348]	; (8002d10 <HAL_SYSTICK_Callback+0x218>)
 8002bb4:	680c      	ldr	r4, [r1, #0]
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fd fffd 	bl	8000bb8 <__aeabi_d2uiz>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	63a3      	str	r3, [r4, #56]	; 0x38
	}

	if(Start_Flag)
 8002bc2:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <HAL_SYSTICK_Callback+0x224>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d014      	beq.n	8002bf4 <HAL_SYSTICK_Callback+0xfc>
	{
		++trig;
 8002bca:	4b55      	ldr	r3, [pc, #340]	; (8002d20 <HAL_SYSTICK_Callback+0x228>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a53      	ldr	r2, [pc, #332]	; (8002d20 <HAL_SYSTICK_Callback+0x228>)
 8002bd2:	6013      	str	r3, [r2, #0]
		if(trig >= 5000)
 8002bd4:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <HAL_SYSTICK_Callback+0x228>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f241 3287 	movw	r2, #4999	; 0x1387
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d906      	bls.n	8002bee <HAL_SYSTICK_Callback+0xf6>
		{


			START_THE_SEQUENCE = true;
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_SYSTICK_Callback+0x22c>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
			Start_Flag = false;
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <HAL_SYSTICK_Callback+0x224>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e002      	b.n	8002bf4 <HAL_SYSTICK_Callback+0xfc>
			//HAL_TIM_IC_MspDeInit(&htim4);
		}


		else {
			START_THE_SEQUENCE = false;
 8002bee:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <HAL_SYSTICK_Callback+0x22c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(indx == 10)  // every 10 millisecond
 8002bf4:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <HAL_SYSTICK_Callback+0x208>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b0a      	cmp	r3, #10
 8002bfa:	d172      	bne.n	8002ce2 <HAL_SYSTICK_Callback+0x1ea>
	{
		//Calculate the rpm
		indx = 0;
 8002bfc:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_SYSTICK_Callback+0x208>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
		AS5600_GetRawAngle(&as5600);
 8002c02:	4849      	ldr	r0, [pc, #292]	; (8002d28 <HAL_SYSTICK_Callback+0x230>)
 8002c04:	f7fe f9ca 	bl	8000f9c <AS5600_GetRawAngle>

		CurrRead = as5600.rawAngle;
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_SYSTICK_Callback+0x230>)
 8002c0a:	88da      	ldrh	r2, [r3, #6]
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_SYSTICK_Callback+0x234>)
 8002c0e:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  > 2047) rev ++;
 8002c10:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_SYSTICK_Callback+0x238>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <HAL_SYSTICK_Callback+0x234>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c20:	db08      	blt.n	8002c34 <HAL_SYSTICK_Callback+0x13c>
 8002c22:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002c32:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  < -2047) rev --;
 8002c34:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <HAL_SYSTICK_Callback+0x238>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <HAL_SYSTICK_Callback+0x234>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8002c44:	dc08      	bgt.n	8002c58 <HAL_SYSTICK_Callback+0x160>
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002c56:	801a      	strh	r2, [r3, #0]

		//sprintf((char*)buf, "Rev : %d\r\n", rev);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);

		LastRead = CurrRead;
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_SYSTICK_Callback+0x234>)
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_SYSTICK_Callback+0x238>)
 8002c5e:	801a      	strh	r2, [r3, #0]

		if(rev < 0) Length = (2 * __PI * __RADIUS * (-rev)) * 0.01;   //Converting centi to meters
 8002c60:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da1e      	bge.n	8002ca8 <HAL_SYSTICK_Callback+0x1b0>
 8002c6a:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c70:	425b      	negs	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc5e 	bl	8000534 <__aeabi_i2d>
 8002c78:	a31d      	add	r3, pc, #116	; (adr r3, 8002cf0 <HAL_SYSTICK_Callback+0x1f8>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fcc3 	bl	8000608 <__aeabi_dmul>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	a31b      	add	r3, pc, #108	; (adr r3, 8002cf8 <HAL_SYSTICK_Callback+0x200>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f7fd fcba 	bl	8000608 <__aeabi_dmul>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fd ffac 	bl	8000bf8 <__aeabi_d2f>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <HAL_SYSTICK_Callback+0x240>)
 8002ca4:	6013      	str	r3, [r2, #0]
		}


	else{}

}
 8002ca6:	e01c      	b.n	8002ce2 <HAL_SYSTICK_Callback+0x1ea>
		else Length = (2 * __PI * __RADIUS * (rev)) * 0.01;   //Converting centi to meters
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_SYSTICK_Callback+0x23c>)
 8002caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc40 	bl	8000534 <__aeabi_i2d>
 8002cb4:	a30e      	add	r3, pc, #56	; (adr r3, 8002cf0 <HAL_SYSTICK_Callback+0x1f8>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fca5 	bl	8000608 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	a30c      	add	r3, pc, #48	; (adr r3, 8002cf8 <HAL_SYSTICK_Callback+0x200>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc9c 	bl	8000608 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ff8e 	bl	8000bf8 <__aeabi_d2f>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_SYSTICK_Callback+0x240>)
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	bd98      	pop	{r3, r4, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	5f4fe082 	.word	0x5f4fe082
 8002cec:	403f5f5f 	.word	0x403f5f5f
 8002cf0:	39f3c1ae 	.word	0x39f3c1ae
 8002cf4:	402ce714 	.word	0x402ce714
 8002cf8:	47ae147b 	.word	0x47ae147b
 8002cfc:	3f847ae1 	.word	0x3f847ae1
 8002d00:	20000514 	.word	0x20000514
 8002d04:	20000518 	.word	0x20000518
 8002d08:	2000051d 	.word	0x2000051d
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	200002ec 	.word	0x200002ec
 8002d14:	40590000 	.word	0x40590000
 8002d18:	20000521 	.word	0x20000521
 8002d1c:	20000500 	.word	0x20000500
 8002d20:	20000504 	.word	0x20000504
 8002d24:	20000509 	.word	0x20000509
 8002d28:	20000458 	.word	0x20000458
 8002d2c:	200004f6 	.word	0x200004f6
 8002d30:	200004f4 	.word	0x200004f4
 8002d34:	200004f8 	.word	0x200004f8
 8002d38:	200004fc 	.word	0x200004fc

08002d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b094      	sub	sp, #80	; 0x50
 8002d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d42:	f107 0320 	add.w	r3, r7, #32
 8002d46:	2230      	movs	r2, #48	; 0x30
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 fd32 	bl	80087b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <SystemClock_Config+0xcc>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <SystemClock_Config+0xcc>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <SystemClock_Config+0xcc>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <SystemClock_Config+0xd0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d88:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <SystemClock_Config+0xd0>)
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <SystemClock_Config+0xd0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da6:	2302      	movs	r3, #2
 8002da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002daa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002db0:	230f      	movs	r3, #15
 8002db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002db4:	2390      	movs	r3, #144	; 0x90
 8002db6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002db8:	2304      	movs	r3, #4
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002dbc:	2305      	movs	r3, #5
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc0:	f107 0320 	add.w	r3, r7, #32
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 fe39 	bl	8005a3c <HAL_RCC_OscConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002dd0:	f000 fab2 	bl	8003338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 f89b 	bl	8005f2c <HAL_RCC_ClockConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002dfc:	f000 fa9c 	bl	8003338 <Error_Handler>
  }
}
 8002e00:	bf00      	nop
 8002e02:	3750      	adds	r7, #80	; 0x50
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000

08002e10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e16:	463b      	mov	r3, r7
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e22:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <MX_ADC1_Init+0x9c>)
 8002e26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <MX_ADC1_Init+0xa0>)
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e6e:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e70:	f001 f896 	bl	8003fa0 <HAL_ADC_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002e7a:	f000 fa5d 	bl	8003338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002e86:	2306      	movs	r3, #6
 8002e88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4806      	ldr	r0, [pc, #24]	; (8002ea8 <MX_ADC1_Init+0x98>)
 8002e90:	f001 f8ca 	bl	8004028 <HAL_ADC_ConfigChannel>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002e9a:	f000 fa4d 	bl	8003338 <Error_Handler>
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200001fc 	.word	0x200001fc
 8002eac:	40012000 	.word	0x40012000
 8002eb0:	0f000001 	.word	0x0f000001

08002eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002eba:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <MX_I2C1_Init+0x54>)
 8002ebc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <MX_I2C1_Init+0x58>)
 8002ec2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ed6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <MX_I2C1_Init+0x50>)
 8002ef2:	f001 ffb5 	bl	8004e60 <HAL_I2C_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002efc:	f000 fa1c 	bl	8003338 <Error_Handler>
	}
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000404 	.word	0x20000404
 8002f08:	40005400 	.word	0x40005400
 8002f0c:	000186a0 	.word	0x000186a0

08002f10 <MX_UART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart1.Instance = USART1;
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <MX_UART1_Init+0x48>)
 8002f18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.Parity = UART_PARITY_NONE;
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f3c:	220c      	movs	r2, #12
 8002f3e:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK) Error_Handler();  // If there is a problem
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <MX_UART1_Init+0x44>)
 8002f42:	f004 fb45 	bl	80075d0 <HAL_UART_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_UART1_Init+0x40>
 8002f4c:	f000 f9f4 	bl	8003338 <Error_Handler>

}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000037c 	.word	0x2000037c
 8002f58:	40011000 	.word	0x40011000

08002f5c <MX_UART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART2_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <MX_UART2_Init+0x48>)
 8002f64:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f6c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f88:	220c      	movs	r2, #12
 8002f8a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();  // If there is a problem
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <MX_UART2_Init+0x44>)
 8002f8e:	f004 fb1f 	bl	80075d0 <HAL_UART_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_UART2_Init+0x40>
 8002f98:	f000 f9ce 	bl	8003338 <Error_Handler>

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200003c0 	.word	0x200003c0
 8002fa4:	40004400 	.word	0x40004400

08002fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
  	 * Load the number to the ARR register.(Only 16 bit wide)
  	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
  	 *
  	 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fae:	f107 0310 	add.w	r3, r7, #16
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fb8:	463b      	mov	r3, r7
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fca:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 60-1;
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fce:	223b      	movs	r2, #59	; 0x3b
 8002fd0:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 4294967295;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fda:	f04f 32ff 	mov.w	r2, #4294967295
 8002fde:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002fec:	4816      	ldr	r0, [pc, #88]	; (8003048 <MX_TIM2_Init+0xa0>)
 8002fee:	f003 fae1 	bl	80065b4 <HAL_TIM_IC_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM2_Init+0x54>
	  {
		Error_Handler();
 8002ff8:	f000 f99e 	bl	8003338 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4619      	mov	r1, r3
 800300a:	480f      	ldr	r0, [pc, #60]	; (8003048 <MX_TIM2_Init+0xa0>)
 800300c:	f004 fa5e 	bl	80074cc <HAL_TIMEx_MasterConfigSynchronization>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM2_Init+0x72>
	  {
		Error_Handler();
 8003016:	f000 f98f 	bl	8003338 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800301a:	230a      	movs	r3, #10
 800301c:	603b      	str	r3, [r7, #0]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800301e:	2301      	movs	r3, #1
 8003020:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICFilter = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800302a:	463b      	mov	r3, r7
 800302c:	2208      	movs	r2, #8
 800302e:	4619      	mov	r1, r3
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_TIM2_Init+0xa0>)
 8003032:	f003 fd31 	bl	8006a98 <HAL_TIM_IC_ConfigChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM2_Init+0x98>
	  {
		Error_Handler();
 800303c:	f000 f97c 	bl	8003338 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200002a4 	.word	0x200002a4

0800304c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003052:	f107 0320 	add.w	r3, r7, #32
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	615a      	str	r2, [r3, #20]
 800306c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800306e:	4b27      	ldr	r3, [pc, #156]	; (800310c <MX_TIM3_Init+0xc0>)
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <MX_TIM3_Init+0xc4>)
 8003072:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1; //60MHz
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <MX_TIM3_Init+0xc0>)
 8003076:	223b      	movs	r2, #59	; 0x3b
 8003078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <MX_TIM3_Init+0xc0>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64 - 1;  //Generates 15KHz frequency signal.
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <MX_TIM3_Init+0xc0>)
 8003082:	223f      	movs	r2, #63	; 0x3f
 8003084:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <MX_TIM3_Init+0xc0>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <MX_TIM3_Init+0xc0>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003092:	481e      	ldr	r0, [pc, #120]	; (800310c <MX_TIM3_Init+0xc0>)
 8003094:	f003 f92a 	bl	80062ec <HAL_TIM_PWM_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800309e:	f000 f94b 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030aa:	f107 0320 	add.w	r3, r7, #32
 80030ae:	4619      	mov	r1, r3
 80030b0:	4816      	ldr	r0, [pc, #88]	; (800310c <MX_TIM3_Init+0xc0>)
 80030b2:	f004 fa0b 	bl	80074cc <HAL_TIMEx_MasterConfigSynchronization>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80030bc:	f000 f93c 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c0:	2360      	movs	r3, #96	; 0x60
 80030c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	2200      	movs	r2, #0
 80030d4:	4619      	mov	r1, r3
 80030d6:	480d      	ldr	r0, [pc, #52]	; (800310c <MX_TIM3_Init+0xc0>)
 80030d8:	f003 fd7a 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80030e2:	f000 f929 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2204      	movs	r2, #4
 80030ea:	4619      	mov	r1, r3
 80030ec:	4807      	ldr	r0, [pc, #28]	; (800310c <MX_TIM3_Init+0xc0>)
 80030ee:	f003 fd6f 	bl	8006bd0 <HAL_TIM_PWM_ConfigChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80030f8:	f000 f91e 	bl	8003338 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80030fc:	4803      	ldr	r0, [pc, #12]	; (800310c <MX_TIM3_Init+0xc0>)
 80030fe:	f000 fac5 	bl	800368c <HAL_TIM_MspPostInit>

}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200002ec 	.word	0x200002ec
 8003110:	40000400 	.word	0x40000400

08003114 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311a:	f107 0310 	add.w	r3, r7, #16
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003124:	463b      	mov	r3, r7
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <MX_TIM4_Init+0xa0>)
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <MX_TIM4_Init+0xa4>)
 8003134:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <MX_TIM4_Init+0xa0>)
 8003138:	223b      	movs	r2, #59	; 0x3b
 800313a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <MX_TIM4_Init+0xa0>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <MX_TIM4_Init+0xa0>)
 8003144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003148:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <MX_TIM4_Init+0xa0>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <MX_TIM4_Init+0xa0>)
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003156:	4817      	ldr	r0, [pc, #92]	; (80031b4 <MX_TIM4_Init+0xa0>)
 8003158:	f003 fa2c 	bl	80065b4 <HAL_TIM_IC_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003162:	f000 f8e9 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	4619      	mov	r1, r3
 8003174:	480f      	ldr	r0, [pc, #60]	; (80031b4 <MX_TIM4_Init+0xa0>)
 8003176:	f004 f9a9 	bl	80074cc <HAL_TIMEx_MasterConfigSynchronization>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003180:	f000 f8da 	bl	8003338 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003184:	230a      	movs	r3, #10
 8003186:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003188:	2301      	movs	r3, #1
 800318a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	4619      	mov	r1, r3
 800319a:	4806      	ldr	r0, [pc, #24]	; (80031b4 <MX_TIM4_Init+0xa0>)
 800319c:	f003 fc7c 	bl	8006a98 <HAL_TIM_IC_ConfigChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80031a6:	f000 f8c7 	bl	8003338 <Error_Handler>
  }

}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000334 	.word	0x20000334
 80031b8:	40000800 	.word	0x40000800

080031bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <MX_DMA_Init+0x3c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <MX_DMA_Init+0x3c>)
 80031cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <MX_DMA_Init+0x3c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	2038      	movs	r0, #56	; 0x38
 80031e4:	f001 fa3d 	bl	8004662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031e8:	2038      	movs	r0, #56	; 0x38
 80031ea:	f001 fa56 	bl	800469a <HAL_NVIC_EnableIRQ>

}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800

080031fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	4b44      	ldr	r3, [pc, #272]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a43      	ldr	r2, [pc, #268]	; (8003328 <MX_GPIO_Init+0x12c>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a35      	ldr	r2, [pc, #212]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <MX_GPIO_Init+0x12c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <MX_GPIO_Init+0x12c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a2e      	ldr	r2, [pc, #184]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <MX_GPIO_Init+0x12c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, winch_dir_Pin|bay_dir_Pin, GPIO_PIN_RESET);
 8003282:	2200      	movs	r2, #0
 8003284:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003288:	4828      	ldr	r0, [pc, #160]	; (800332c <MX_GPIO_Init+0x130>)
 800328a:	f001 fdab 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : spring_thing_ext_Pin */
  GPIO_InitStruct.Pin = spring_thing_ext_Pin_Pin;
 800328e:	2308      	movs	r3, #8
 8003290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003292:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003298:	2301      	movs	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(spring_thing_ext_Pin_GPIO_Port, &GPIO_InitStruct);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4619      	mov	r1, r3
 80032a2:	4823      	ldr	r0, [pc, #140]	; (8003330 <MX_GPIO_Init+0x134>)
 80032a4:	f001 fc1a 	bl	8004adc <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80032a8:	2009      	movs	r0, #9
 80032aa:	f001 f9f6 	bl	800469a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn,15,0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	210f      	movs	r1, #15
 80032b2:	2009      	movs	r0, #9
 80032b4:	f001 f9d5 	bl	8004662 <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : winch_dir_Pin bay_dir_Pin */
  GPIO_InitStruct.Pin = winch_dir_Pin|bay_dir_Pin;
 80032b8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80032bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	4816      	ldr	r0, [pc, #88]	; (800332c <MX_GPIO_Init+0x130>)
 80032d2:	f001 fc03 	bl	8004adc <HAL_GPIO_Init>

  /*Configure GPIO pin : roof_top_ext_Pin */
  GPIO_InitStruct.Pin = roof_top_ext_Pin;
 80032d6:	2301      	movs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e0:	2301      	movs	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(roof_top_ext_GPIO_Port, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	4811      	ldr	r0, [pc, #68]	; (8003330 <MX_GPIO_Init+0x134>)
 80032ec:	f001 fbf6 	bl	8004adc <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80032f0:	2006      	movs	r0, #6
 80032f2:	f001 f9d2 	bl	800469a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn,15,0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	210f      	movs	r1, #15
 80032fa:	2006      	movs	r0, #6
 80032fc:	f001 f9b1 	bl	8004662 <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : internal LED */
  GPIO_InitStruct.Pin = blue_led_Pin;
 8003300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(blue_led_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4806      	ldr	r0, [pc, #24]	; (8003334 <MX_GPIO_Init+0x138>)
 800331a:	f001 fbdf 	bl	8004adc <HAL_GPIO_Init>


}
 800331e:	bf00      	nop
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020400 	.word	0x40020400
 8003334:	40020800 	.word	0x40020800

08003338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop

	/*
	 * Can Add ASSERT Statements here, for debugging purpose only.
	 */
  __disable_irq();
  while (1)
 8003340:	e7fe      	b.n	8003340 <Error_Handler+0x8>
	...

08003344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_MspInit+0x4c>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_MspInit+0x4c>)
 8003354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003358:	6453      	str	r3, [r2, #68]	; 0x44
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_MspInit+0x4c>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_MspInit+0x4c>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a08      	ldr	r2, [pc, #32]	; (8003390 <HAL_MspInit+0x4c>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_MspInit+0x4c>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800

08003394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a33      	ldr	r2, [pc, #204]	; (8003480 <HAL_ADC_MspInit+0xec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d15f      	bne.n	8003476 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_ADC_MspInit+0xf0>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_ADC_MspInit+0xf0>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_ADC_MspInit+0xf0>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_ADC_MspInit+0xf0>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_ADC_MspInit+0xf0>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_ADC_MspInit+0xf0>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = curr_sensor_Pin;
 80033ee:	2310      	movs	r3, #16
 80033f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f2:	2303      	movs	r3, #3
 80033f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(curr_sensor_GPIO_Port, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	4821      	ldr	r0, [pc, #132]	; (8003488 <HAL_ADC_MspInit+0xf4>)
 8003402:	f001 fb6b 	bl	8004adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003406:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003408:	4a21      	ldr	r2, [pc, #132]	; (8003490 <HAL_ADC_MspInit+0xfc>)
 800340a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_ADC_MspInit+0xf8>)
 800340e:	2200      	movs	r2, #0
 8003410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003412:	4b1e      	ldr	r3, [pc, #120]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_ADC_MspInit+0xf8>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003426:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800342c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003446:	2200      	movs	r2, #0
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800344a:	4810      	ldr	r0, [pc, #64]	; (800348c <HAL_ADC_MspInit+0xf8>)
 800344c:	f001 f954 	bl	80046f8 <HAL_DMA_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003456:	f7ff ff6f 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_ADC_MspInit+0xf8>)
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_ADC_MspInit+0xf8>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2012      	movs	r0, #18
 800346c:	f001 f8f9 	bl	8004662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003470:	2012      	movs	r0, #18
 8003472:	f001 f912 	bl	800469a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40012000 	.word	0x40012000
 8003484:	40023800 	.word	0x40023800
 8003488:	40020000 	.word	0x40020000
 800348c:	20000244 	.word	0x20000244
 8003490:	40026410 	.word	0x40026410

08003494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_I2C_MspInit+0x94>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d134      	bne.n	8003520 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_I2C_MspInit+0x98>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_I2C_MspInit+0x98>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_I2C_MspInit+0x98>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80034d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d8:	2312      	movs	r3, #18
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034e4:	2304      	movs	r3, #4
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4619      	mov	r1, r3
 80034ee:	4810      	ldr	r0, [pc, #64]	; (8003530 <HAL_I2C_MspInit+0x9c>)
 80034f0:	f001 faf4 	bl	8004adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_I2C_MspInit+0x98>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_I2C_MspInit+0x98>)
 80034fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_I2C_MspInit+0x98>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2101      	movs	r1, #1
 8003514:	201f      	movs	r0, #31
 8003516:	f001 f8a4 	bl	8004662 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800351a:	201f      	movs	r0, #31
 800351c:	f001 f8bd 	bl	800469a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003520:	bf00      	nop
 8003522:	3728      	adds	r7, #40	; 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40005400 	.word	0x40005400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020400 	.word	0x40020400

08003534 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_TIM_PWM_MspInit+0x3c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10d      	bne.n	8003562 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_TIM_PWM_MspInit+0x40>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_TIM_PWM_MspInit+0x40>)
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_TIM_PWM_MspInit+0x40>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40000400 	.word	0x40000400
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3a      	ldr	r2, [pc, #232]	; (8003680 <HAL_TIM_IC_MspInit+0x108>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d134      	bne.n	8003604 <HAL_TIM_IC_MspInit+0x8c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a31      	ldr	r2, [pc, #196]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = pixhawk_signal_Pin;
 80035d2:	2340      	movs	r3, #64	; 0x40
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035e2:	2302      	movs	r3, #2
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pixhawk_signal_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	4619      	mov	r1, r3
 80035ec:	4826      	ldr	r0, [pc, #152]	; (8003688 <HAL_TIM_IC_MspInit+0x110>)
 80035ee:	f001 fa75 	bl	8004adc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
   HAL_NVIC_SetPriority(TIM4_IRQn, 8, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2108      	movs	r1, #8
 80035f6:	201e      	movs	r0, #30
 80035f8:	f001 f833 	bl	8004662 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035fc:	201e      	movs	r0, #30
 80035fe:	f001 f84c 	bl	800469a <HAL_NVIC_EnableIRQ>
      /* TIM4 interrupt Init */
     HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
    }

}
 8003602:	e039      	b.n	8003678 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360c:	d134      	bne.n	8003678 <HAL_TIM_IC_MspInit+0x100>
      __HAL_RCC_TIM2_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_TIM_IC_MspInit+0x10c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = man_winch_Pin;
 8003646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003654:	2300      	movs	r3, #0
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003658:	2301      	movs	r3, #1
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
      HAL_GPIO_Init(man_winch_GPIO_Port, &GPIO_InitStruct);
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4619      	mov	r1, r3
 8003662:	4809      	ldr	r0, [pc, #36]	; (8003688 <HAL_TIM_IC_MspInit+0x110>)
 8003664:	f001 fa3a 	bl	8004adc <HAL_GPIO_Init>
     HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2106      	movs	r1, #6
 800366c:	201c      	movs	r0, #28
 800366e:	f000 fff8 	bl	8004662 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003672:	201c      	movs	r0, #28
 8003674:	f001 f811 	bl	800469a <HAL_NVIC_EnableIRQ>
}
 8003678:	bf00      	nop
 800367a:	3730      	adds	r7, #48	; 0x30
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40000800 	.word	0x40000800
 8003684:	40023800 	.word	0x40023800
 8003688:	40020400 	.word	0x40020400

0800368c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <HAL_TIM_MspPostInit+0x68>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d11d      	bne.n	80036ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_TIM_MspPostInit+0x6c>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_TIM_MspPostInit+0x6c>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_TIM_MspPostInit+0x6c>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = winch_pwm_Pin|bay_door_pwm_Pin;
 80036ca:	23c0      	movs	r3, #192	; 0xc0
 80036cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036da:	2302      	movs	r3, #2
 80036dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036de:	f107 030c 	add.w	r3, r7, #12
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <HAL_TIM_MspPostInit+0x70>)
 80036e6:	f001 f9f9 	bl	8004adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036ea:	bf00      	nop
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40020000 	.word	0x40020000

08003700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 031c 	add.w	r3, r7, #28
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_UART_MspInit+0x128>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13d      	bne.n	800379e <HAL_UART_MspInit+0x9e>
  {
      /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_UART_MspInit+0x12c>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a40      	ldr	r2, [pc, #256]	; (800382c <HAL_UART_MspInit+0x12c>)
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <HAL_UART_MspInit+0x12c>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	4b3a      	ldr	r3, [pc, #232]	; (800382c <HAL_UART_MspInit+0x12c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a39      	ldr	r2, [pc, #228]	; (800382c <HAL_UART_MspInit+0x12c>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_UART_MspInit+0x12c>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800375a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800376c:	2307      	movs	r3, #7
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	482e      	ldr	r0, [pc, #184]	; (8003830 <HAL_UART_MspInit+0x130>)
 8003778:	f001 f9b0 	bl	8004adc <HAL_GPIO_Init>


    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800377c:	2025      	movs	r0, #37	; 0x25
 800377e:	f000 ff8c 	bl	800469a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 8003782:	2200      	movs	r2, #0
 8003784:	2106      	movs	r1, #6
 8003786:	2025      	movs	r0, #37	; 0x25
 8003788:	f000 ff6b 	bl	8004662 <HAL_NVIC_SetPriority>

	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_UART_MspInit+0x134>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	4b28      	ldr	r3, [pc, #160]	; (8003834 <HAL_UART_MspInit+0x134>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0220 	orr.w	r2, r2, #32
 800379a:	60da      	str	r2, [r3, #12]

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  }

}
 800379c:	e040      	b.n	8003820 <HAL_UART_MspInit+0x120>
  else if(huart->Instance==USART2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <HAL_UART_MspInit+0x138>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d13b      	bne.n	8003820 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_UART_MspInit+0x12c>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_UART_MspInit+0x12c>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	6413      	str	r3, [r2, #64]	; 0x40
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_UART_MspInit+0x12c>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_UART_MspInit+0x12c>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_UART_MspInit+0x12c>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6313      	str	r3, [r2, #48]	; 0x30
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_UART_MspInit+0x12c>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037e0:	230c      	movs	r3, #12
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037f0:	2307      	movs	r3, #7
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	f107 031c 	add.w	r3, r7, #28
 80037f8:	4619      	mov	r1, r3
 80037fa:	480d      	ldr	r0, [pc, #52]	; (8003830 <HAL_UART_MspInit+0x130>)
 80037fc:	f001 f96e 	bl	8004adc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003800:	2026      	movs	r0, #38	; 0x26
 8003802:	f000 ff4a 	bl	800469a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,3,0);
 8003806:	2200      	movs	r2, #0
 8003808:	2103      	movs	r1, #3
 800380a:	2026      	movs	r0, #38	; 0x26
 800380c:	f000 ff29 	bl	8004662 <HAL_NVIC_SetPriority>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_UART_MspInit+0x13c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_UART_MspInit+0x13c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0220 	orr.w	r2, r2, #32
 800381e:	60da      	str	r2, [r3, #12]
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40011000 	.word	0x40011000
 800382c:	40023800 	.word	0x40023800
 8003830:	40020000 	.word	0x40020000
 8003834:	2000037c 	.word	0x2000037c
 8003838:	40004400 	.word	0x40004400
 800383c:	200003c0 	.word	0x200003c0

08003840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003844:	e7fe      	b.n	8003844 <NMI_Handler+0x4>

08003846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800384a:	e7fe      	b.n	800384a <HardFault_Handler+0x4>

0800384c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <MemManage_Handler+0x4>

08003852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003856:	e7fe      	b.n	8003856 <BusFault_Handler+0x4>

08003858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <UsageFault_Handler+0x4>

0800385e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800388c:	f000 fb44 	bl	8003f18 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003890:	f000 ff2b 	bl	80046ea <HAL_SYSTICK_IRQHandler>
}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}

08003898 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <TIM4_IRQHandler+0x10>)
 800389e:	f002 fff3 	bl	8006888 <HAL_TIM_IRQHandler>
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000334 	.word	0x20000334

080038ac <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <TIM2_IRQHandler+0x10>)
 80038b2:	f002 ffe9 	bl	8006888 <HAL_TIM_IRQHandler>
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200002a4 	.word	0x200002a4

080038c0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80038c0:	b5b0      	push	{r4, r5, r7, lr}
 80038c2:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	2201      	movs	r2, #1
 80038ca:	4985      	ldr	r1, [pc, #532]	; (8003ae0 <USART1_IRQHandler+0x220>)
 80038cc:	4885      	ldr	r0, [pc, #532]	; (8003ae4 <USART1_IRQHandler+0x224>)
 80038ce:	f003 ff5e 	bl	800778e <HAL_UART_Receive>
		if (receivedData == '\r')
 80038d2:	4b83      	ldr	r3, [pc, #524]	; (8003ae0 <USART1_IRQHandler+0x220>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b0d      	cmp	r3, #13
 80038d8:	f040 809e 	bne.w	8003a18 <USART1_IRQHandler+0x158>
			{
				recepCmplt = true;
 80038dc:	4b82      	ldr	r3, [pc, #520]	; (8003ae8 <USART1_IRQHandler+0x228>)
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
				Data = atoi((char*)data_buffer);
 80038e2:	4882      	ldr	r0, [pc, #520]	; (8003aec <USART1_IRQHandler+0x22c>)
 80038e4:	f004 ff2a 	bl	800873c <atoi>
 80038e8:	4603      	mov	r3, r0
 80038ea:	b21a      	sxth	r2, r3
 80038ec:	4b80      	ldr	r3, [pc, #512]	; (8003af0 <USART1_IRQHandler+0x230>)
 80038ee:	801a      	strh	r2, [r3, #0]

				data_buffer[count++] = '\r';
 80038f0:	4b80      	ldr	r3, [pc, #512]	; (8003af4 <USART1_IRQHandler+0x234>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	497f      	ldr	r1, [pc, #508]	; (8003af4 <USART1_IRQHandler+0x234>)
 80038f8:	600a      	str	r2, [r1, #0]
 80038fa:	4a7c      	ldr	r2, [pc, #496]	; (8003aec <USART1_IRQHandler+0x22c>)
 80038fc:	210d      	movs	r1, #13
 80038fe:	54d1      	strb	r1, [r2, r3]

				Data1 = -Data;
 8003900:	4b7b      	ldr	r3, [pc, #492]	; (8003af0 <USART1_IRQHandler+0x230>)
 8003902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003906:	425b      	negs	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <USART1_IRQHandler+0x238>)
 800390c:	601a      	str	r2, [r3, #0]

				if(Data >= 0)
 800390e:	4b78      	ldr	r3, [pc, #480]	; (8003af0 <USART1_IRQHandler+0x230>)
 8003910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db36      	blt.n	8003986 <USART1_IRQHandler+0xc6>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 8003918:	2200      	movs	r2, #0
 800391a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800391e:	4877      	ldr	r0, [pc, #476]	; (8003afc <USART1_IRQHandler+0x23c>)
 8003920:	f001 fa60 	bl	8004de4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003924:	2200      	movs	r2, #0
 8003926:	2120      	movs	r1, #32
 8003928:	4874      	ldr	r0, [pc, #464]	; (8003afc <USART1_IRQHandler+0x23c>)
 800392a:	f001 fa5b 	bl	8004de4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(Data)/100);
 800392e:	4b74      	ldr	r3, [pc, #464]	; (8003b00 <USART1_IRQHandler+0x240>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fdee 	bl	8000514 <__aeabi_ui2d>
 8003938:	4604      	mov	r4, r0
 800393a:	460d      	mov	r5, r1
 800393c:	4b6c      	ldr	r3, [pc, #432]	; (8003af0 <USART1_IRQHandler+0x230>)
 800393e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fdf6 	bl	8000534 <__aeabi_i2d>
 8003948:	a363      	add	r3, pc, #396	; (adr r3, 8003ad8 <USART1_IRQHandler+0x218>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f7fc fe5b 	bl	8000608 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fc fe55 	bl	8000608 <__aeabi_dmul>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <USART1_IRQHandler+0x244>)
 800396c:	f7fc ff76 	bl	800085c <__aeabi_ddiv>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4962      	ldr	r1, [pc, #392]	; (8003b00 <USART1_IRQHandler+0x240>)
 8003976:	680c      	ldr	r4, [r1, #0]
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	f7fd f91c 	bl	8000bb8 <__aeabi_d2uiz>
 8003980:	4603      	mov	r3, r0
 8003982:	63a3      	str	r3, [r4, #56]	; 0x38
 8003984:	e036      	b.n	80039f4 <USART1_IRQHandler+0x134>

				}

				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8003986:	2201      	movs	r2, #1
 8003988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800398c:	485b      	ldr	r0, [pc, #364]	; (8003afc <USART1_IRQHandler+0x23c>)
 800398e:	f001 fa29 	bl	8004de4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003992:	2201      	movs	r2, #1
 8003994:	2120      	movs	r1, #32
 8003996:	4859      	ldr	r0, [pc, #356]	; (8003afc <USART1_IRQHandler+0x23c>)
 8003998:	f001 fa24 	bl	8004de4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(-Data)/100);
 800399c:	4b58      	ldr	r3, [pc, #352]	; (8003b00 <USART1_IRQHandler+0x240>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fdb7 	bl	8000514 <__aeabi_ui2d>
 80039a6:	4604      	mov	r4, r0
 80039a8:	460d      	mov	r5, r1
 80039aa:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <USART1_IRQHandler+0x230>)
 80039ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b0:	425b      	negs	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fdbe 	bl	8000534 <__aeabi_i2d>
 80039b8:	a347      	add	r3, pc, #284	; (adr r3, 8003ad8 <USART1_IRQHandler+0x218>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc fe23 	bl	8000608 <__aeabi_dmul>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fc fe1d 	bl	8000608 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <USART1_IRQHandler+0x244>)
 80039dc:	f7fc ff3e 	bl	800085c <__aeabi_ddiv>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4946      	ldr	r1, [pc, #280]	; (8003b00 <USART1_IRQHandler+0x240>)
 80039e6:	680c      	ldr	r4, [r1, #0]
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fd f8e4 	bl	8000bb8 <__aeabi_d2uiz>
 80039f0:	4603      	mov	r3, r0
 80039f2:	63a3      	str	r3, [r4, #56]	; 0x38

				}


				HAL_UART_Transmit(&huart1, data_buffer, count, HAL_MAX_DELAY);  //send to terminal
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <USART1_IRQHandler+0x234>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	493b      	ldr	r1, [pc, #236]	; (8003aec <USART1_IRQHandler+0x22c>)
 8003a00:	4838      	ldr	r0, [pc, #224]	; (8003ae4 <USART1_IRQHandler+0x224>)
 8003a02:	f003 fe32 	bl	800766a <HAL_UART_Transmit>
				memset(data_buffer, 0, sizeof(data_buffer));
 8003a06:	2205      	movs	r2, #5
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4838      	ldr	r0, [pc, #224]	; (8003aec <USART1_IRQHandler+0x22c>)
 8003a0c:	f004 fed2 	bl	80087b4 <memset>
				count = 0;
 8003a10:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <USART1_IRQHandler+0x234>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		else
		{
			data_buffer[count++] = receivedData;
		}

	return;
 8003a16:	e05c      	b.n	8003ad2 <USART1_IRQHandler+0x212>
		else if(receivedData == ' ')
 8003a18:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <USART1_IRQHandler+0x220>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d136      	bne.n	8003a8e <USART1_IRQHandler+0x1ce>
			HAL_UART_Transmit(&huart1, (uint8_t *)E_Stop, strlen(E_Stop), HAL_MAX_DELAY);  //send to terminal
 8003a20:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <USART1_IRQHandler+0x248>)
 8003a22:	681c      	ldr	r4, [r3, #0]
 8003a24:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <USART1_IRQHandler+0x248>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fbd9 	bl	80001e0 <strlen>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	4621      	mov	r1, r4
 8003a38:	482a      	ldr	r0, [pc, #168]	; (8003ae4 <USART1_IRQHandler+0x224>)
 8003a3a:	f003 fe16 	bl	800766a <HAL_UART_Transmit>
			memset(data_buffer, 0, sizeof(data_buffer));
 8003a3e:	2205      	movs	r2, #5
 8003a40:	2100      	movs	r1, #0
 8003a42:	482a      	ldr	r0, [pc, #168]	; (8003aec <USART1_IRQHandler+0x22c>)
 8003a44:	f004 feb6 	bl	80087b4 <memset>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <USART1_IRQHandler+0x240>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd61 	bl	8000514 <__aeabi_ui2d>
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	f7fc fdd5 	bl	8000608 <__aeabi_dmul>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <USART1_IRQHandler+0x244>)
 8003a6c:	f7fc fef6 	bl	800085c <__aeabi_ddiv>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4922      	ldr	r1, [pc, #136]	; (8003b00 <USART1_IRQHandler+0x240>)
 8003a76:	680c      	ldr	r4, [r1, #0]
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f89c 	bl	8000bb8 <__aeabi_d2uiz>
 8003a80:	4603      	mov	r3, r0
 8003a82:	63a3      	str	r3, [r4, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003a84:	2104      	movs	r1, #4
 8003a86:	481e      	ldr	r0, [pc, #120]	; (8003b00 <USART1_IRQHandler+0x240>)
 8003a88:	f002 fd30 	bl	80064ec <HAL_TIM_PWM_Stop>
	return;
 8003a8c:	e021      	b.n	8003ad2 <USART1_IRQHandler+0x212>
		else if(receivedData == 'r')
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <USART1_IRQHandler+0x220>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b72      	cmp	r3, #114	; 0x72
 8003a94:	d108      	bne.n	8003aa8 <USART1_IRQHandler+0x1e8>
			HAL_GPIO_Init(GPIOA, &tim3ch1gpio);
 8003a96:	491d      	ldr	r1, [pc, #116]	; (8003b0c <USART1_IRQHandler+0x24c>)
 8003a98:	4818      	ldr	r0, [pc, #96]	; (8003afc <USART1_IRQHandler+0x23c>)
 8003a9a:	f001 f81f 	bl	8004adc <HAL_GPIO_Init>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003a9e:	2104      	movs	r1, #4
 8003aa0:	4817      	ldr	r0, [pc, #92]	; (8003b00 <USART1_IRQHandler+0x240>)
 8003aa2:	f002 fc73 	bl	800638c <HAL_TIM_PWM_Start>
	return;
 8003aa6:	e014      	b.n	8003ad2 <USART1_IRQHandler+0x212>
		else if(receivedData == 'v')
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <USART1_IRQHandler+0x220>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b76      	cmp	r3, #118	; 0x76
 8003aae:	d010      	beq.n	8003ad2 <USART1_IRQHandler+0x212>
		else if(receivedData == 's')
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <USART1_IRQHandler+0x220>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b73      	cmp	r3, #115	; 0x73
 8003ab6:	d103      	bne.n	8003ac0 <USART1_IRQHandler+0x200>
			Start_Flag = true;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <USART1_IRQHandler+0x250>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
	return;
 8003abe:	e008      	b.n	8003ad2 <USART1_IRQHandler+0x212>
			data_buffer[count++] = receivedData;
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <USART1_IRQHandler+0x234>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	490b      	ldr	r1, [pc, #44]	; (8003af4 <USART1_IRQHandler+0x234>)
 8003ac8:	600a      	str	r2, [r1, #0]
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <USART1_IRQHandler+0x220>)
 8003acc:	7811      	ldrb	r1, [r2, #0]
 8003ace:	4a07      	ldr	r2, [pc, #28]	; (8003aec <USART1_IRQHandler+0x22c>)
 8003ad0:	54d1      	strb	r1, [r2, r3]
	return;
 8003ad2:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);

}
 8003ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	190cb39b 	.word	0x190cb39b
 8003adc:	3fd91919 	.word	0x3fd91919
 8003ae0:	20000468 	.word	0x20000468
 8003ae4:	2000037c 	.word	0x2000037c
 8003ae8:	20000478 	.word	0x20000478
 8003aec:	2000046c 	.word	0x2000046c
 8003af0:	2000047a 	.word	0x2000047a
 8003af4:	20000474 	.word	0x20000474
 8003af8:	2000047c 	.word	0x2000047c
 8003afc:	40020000 	.word	0x40020000
 8003b00:	200002ec 	.word	0x200002ec
 8003b04:	40590000 	.word	0x40590000
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000588 	.word	0x20000588
 8003b10:	20000500 	.word	0x20000500

08003b14 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
//	if(poop_back)
//	{
//		MavLinkReceive(&huart2, receivedData);
//	}

	HAL_UART_IRQHandler(&huart2);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <USART2_IRQHandler+0x10>)
 8003b1a:	f003 fedb 	bl	80078d4 <HAL_UART_IRQHandler>
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200003c0 	.word	0x200003c0

08003b28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b28:	b598      	push	{r3, r4, r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PB0
	 */

	if(close_door)
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <EXTI0_IRQHandler+0x70>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02c      	beq.n	8003b8e <EXTI0_IRQHandler+0x66>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <EXTI0_IRQHandler+0x74>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fceb 	bl	8000514 <__aeabi_ui2d>
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f7fc fd5f 	bl	8000608 <__aeabi_dmul>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <EXTI0_IRQHandler+0x78>)
 8003b58:	f7fc fe80 	bl	800085c <__aeabi_ddiv>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <EXTI0_IRQHandler+0x74>)
 8003b62:	680c      	ldr	r4, [r1, #0]
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7fd f826 	bl	8000bb8 <__aeabi_d2uiz>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_SET);
 8003b70:	2201      	movs	r2, #1
 8003b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b76:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <EXTI0_IRQHandler+0x7c>)
 8003b78:	f001 f934 	bl	8004de4 <HAL_GPIO_WritePin>
		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <EXTI0_IRQHandler+0x80>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&hhtim3, TIM_CHANNEL_1, hhtim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/

		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		spring_trig = false;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <EXTI0_IRQHandler+0x84>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
		START_THE_SEQUENCE = false;
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <EXTI0_IRQHandler+0x88>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]


	}


  HAL_GPIO_EXTI_IRQHandler(roof_top_ext_Pin);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f001 f942 	bl	8004e18 <HAL_GPIO_EXTI_IRQHandler>

}
 8003b94:	bf00      	nop
 8003b96:	bd98      	pop	{r3, r4, r7, pc}
 8003b98:	2000050d 	.word	0x2000050d
 8003b9c:	200002ec 	.word	0x200002ec
 8003ba0:	40590000 	.word	0x40590000
 8003ba4:	40020800 	.word	0x40020800
 8003ba8:	2000050e 	.word	0x2000050e
 8003bac:	2000050c 	.word	0x2000050c
 8003bb0:	20000509 	.word	0x20000509
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
	 *  This subroutine handles the Spring thing interrupt
	 *
	 *  PB3
	 */

 	if(poop_back)
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <EXTI3_IRQHandler+0xa0>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d03a      	beq.n	8003c3c <EXTI3_IRQHandler+0x84>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8003bc6:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <EXTI3_IRQHandler+0xa4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38

		for(int i =0; i<96000; i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e01f      	b.n	8003c14 <EXTI3_IRQHandler+0x5c>
		{

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <EXTI3_IRQHandler+0xa4>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fc9b 	bl	8000514 <__aeabi_ui2d>
 8003bde:	a31c      	add	r3, pc, #112	; (adr r3, 8003c50 <EXTI3_IRQHandler+0x98>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fd10 	bl	8000608 <__aeabi_dmul>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <EXTI3_IRQHandler+0xa8>)
 8003bf6:	f7fc fe31 	bl	800085c <__aeabi_ddiv>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4917      	ldr	r1, [pc, #92]	; (8003c5c <EXTI3_IRQHandler+0xa4>)
 8003c00:	680c      	ldr	r4, [r1, #0]
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	f7fc ffd7 	bl	8000bb8 <__aeabi_d2uiz>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	63a3      	str	r3, [r4, #56]	; 0x38
		for(int i =0; i<96000; i++)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3301      	adds	r3, #1
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <EXTI3_IRQHandler+0xac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	dddb      	ble.n	8003bd4 <EXTI3_IRQHandler+0x1c>

		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <EXTI3_IRQHandler+0xa4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2200      	movs	r2, #0
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);

		HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_RESET);
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c2a:	480f      	ldr	r0, [pc, #60]	; (8003c68 <EXTI3_IRQHandler+0xb0>)
 8003c2c:	f001 f8da 	bl	8004de4 <HAL_GPIO_WritePin>
		poop_back = false;
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <EXTI3_IRQHandler+0xa0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
		spring_trig = true;
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <EXTI3_IRQHandler+0xb4>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
		//HAL_NVIC_DisableIRQ(EXTI3_IRQn);

	}

  HAL_GPIO_EXTI_IRQHandler(spring_thing_ext_Pin_Pin);
 8003c3c:	2008      	movs	r0, #8
 8003c3e:	f001 f8eb 	bl	8004e18 <HAL_GPIO_EXTI_IRQHandler>

}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	f3af 8000 	nop.w
 8003c50:	877be861 	.word	0x877be861
 8003c54:	40278787 	.word	0x40278787
 8003c58:	2000050b 	.word	0x2000050b
 8003c5c:	200002ec 	.word	0x200002ec
 8003c60:	40590000 	.word	0x40590000
 8003c64:	000176ff 	.word	0x000176ff
 8003c68:	40020800 	.word	0x40020800
 8003c6c:	2000050c 	.word	0x2000050c

08003c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	return 1;
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_kill>:

int _kill(int pid, int sig)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c8a:	f004 fd5b 	bl	8008744 <__errno>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2216      	movs	r2, #22
 8003c92:	601a      	str	r2, [r3, #0]
	return -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <_exit>:

void _exit (int status)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ffe7 	bl	8003c80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cb2:	e7fe      	b.n	8003cb2 <_exit+0x12>

08003cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e00a      	b.n	8003cdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cc6:	f3af 8000 	nop.w
 8003cca:	4601      	mov	r1, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	b2ca      	uxtb	r2, r1
 8003cd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	dbf0      	blt.n	8003cc6 <_read+0x12>
	}

return len;
 8003ce4:	687b      	ldr	r3, [r7, #4]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e009      	b.n	8003d14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	60ba      	str	r2, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dbf1      	blt.n	8003d00 <_write+0x12>
	}
	return len;
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <_close>:

int _close(int file)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_isatty>:

int _isatty(int file)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
	return 1;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <_sbrk+0x5c>)
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <_sbrk+0x60>)
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <_sbrk+0x64>)
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <_sbrk+0x68>)
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d207      	bcs.n	8003dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dc0:	f004 fcc0 	bl	8008744 <__errno>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	e009      	b.n	8003de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <_sbrk+0x64>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <_sbrk+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <_sbrk+0x64>)
 8003de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20010000 	.word	0x20010000
 8003df0:	00000400 	.word	0x00000400
 8003df4:	2000059c 	.word	0x2000059c
 8003df8:	200005b8 	.word	0x200005b8

08003dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <SystemInit+0x20>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <SystemInit+0x20>)
 8003e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e24:	480d      	ldr	r0, [pc, #52]	; (8003e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e26:	490e      	ldr	r1, [pc, #56]	; (8003e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e28:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e2c:	e002      	b.n	8003e34 <LoopCopyDataInit>

08003e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e32:	3304      	adds	r3, #4

08003e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e38:	d3f9      	bcc.n	8003e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e3c:	4c0b      	ldr	r4, [pc, #44]	; (8003e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e40:	e001      	b.n	8003e46 <LoopFillZerobss>

08003e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e44:	3204      	adds	r2, #4

08003e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e48:	d3fb      	bcc.n	8003e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e4a:	f7ff ffd7 	bl	8003dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e4e:	f004 fc7f 	bl	8008750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e52:	f7fe f99f 	bl	8002194 <main>
  bx  lr    
 8003e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e60:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003e64:	0800b84c 	.word	0x0800b84c
  ldr r2, =_sbss
 8003e68:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003e6c:	200005b4 	.word	0x200005b4

08003e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e70:	e7fe      	b.n	8003e70 <ADC_IRQHandler>
	...

08003e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <HAL_Init+0x40>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <HAL_Init+0x40>)
 8003e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_Init+0x40>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <HAL_Init+0x40>)
 8003e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_Init+0x40>)
 8003e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	f000 fbd5 	bl	800464c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ea2:	200f      	movs	r0, #15
 8003ea4:	f000 f808 	bl	8003eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea8:	f7ff fa4c 	bl	8003344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00

08003eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_InitTick+0x54>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_InitTick+0x58>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fbfb 	bl	80046d2 <HAL_SYSTICK_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00e      	b.n	8003f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d80a      	bhi.n	8003f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eec:	2200      	movs	r2, #0
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	f000 fbb5 	bl	8004662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ef8:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <HAL_InitTick+0x5c>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	2000000c 	.word	0x2000000c
 8003f14:	20000008 	.word	0x20000008

08003f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_IncTick+0x20>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_IncTick+0x24>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_IncTick+0x24>)
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	2000000c 	.word	0x2000000c
 8003f3c:	200005a0 	.word	0x200005a0

08003f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_GetTick+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	200005a0 	.word	0x200005a0

08003f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff ffee 	bl	8003f40 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d005      	beq.n	8003f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_Delay+0x44>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f7e:	bf00      	nop
 8003f80:	f7ff ffde 	bl	8003f40 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d8f7      	bhi.n	8003f80 <HAL_Delay+0x28>
  {
  }
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000000c 	.word	0x2000000c

08003fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e033      	b.n	800401e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff f9e8 	bl	8003394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fe6:	f023 0302 	bic.w	r3, r3, #2
 8003fea:	f043 0202 	orr.w	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f93a 	bl	800426c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
 800400e:	e001      	b.n	8004014 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e105      	b.n	8004250 <HAL_ADC_ConfigChannel+0x228>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b09      	cmp	r3, #9
 8004052:	d925      	bls.n	80040a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	3b1e      	subs	r3, #30
 800406a:	2207      	movs	r2, #7
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43da      	mvns	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	400a      	ands	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68d9      	ldr	r1, [r3, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	4618      	mov	r0, r3
 800408c:	4603      	mov	r3, r0
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4403      	add	r3, r0
 8004092:	3b1e      	subs	r3, #30
 8004094:	409a      	lsls	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e022      	b.n	80040e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	2207      	movs	r2, #7
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	400a      	ands	r2, r1
 80040c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4618      	mov	r0, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4403      	add	r3, r0
 80040dc:	409a      	lsls	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d824      	bhi.n	8004138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	3b05      	subs	r3, #5
 8004100:	221f      	movs	r2, #31
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	400a      	ands	r2, r1
 800410e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	4618      	mov	r0, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	3b05      	subs	r3, #5
 800412a:	fa00 f203 	lsl.w	r2, r0, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	635a      	str	r2, [r3, #52]	; 0x34
 8004136:	e04c      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d824      	bhi.n	800418a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	3b23      	subs	r3, #35	; 0x23
 8004152:	221f      	movs	r2, #31
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43da      	mvns	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	400a      	ands	r2, r1
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b23      	subs	r3, #35	; 0x23
 800417c:	fa00 f203 	lsl.w	r2, r0, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
 8004188:	e023      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	3b41      	subs	r3, #65	; 0x41
 800419c:	221f      	movs	r2, #31
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	400a      	ands	r2, r1
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	4618      	mov	r0, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3b41      	subs	r3, #65	; 0x41
 80041c6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_ADC_ConfigChannel+0x234>)
 80041d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_ADC_ConfigChannel+0x238>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d109      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x1cc>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b12      	cmp	r3, #18
 80041e6:	d105      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <HAL_ADC_ConfigChannel+0x238>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d123      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x21e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b10      	cmp	r3, #16
 8004204:	d003      	beq.n	800420e <HAL_ADC_ConfigChannel+0x1e6>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b11      	cmp	r3, #17
 800420c:	d11b      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b10      	cmp	r3, #16
 8004220:	d111      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_ADC_ConfigChannel+0x23c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_ADC_ConfigChannel+0x240>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	0c9a      	lsrs	r2, r3, #18
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004238:	e002      	b.n	8004240 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3b01      	subs	r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f9      	bne.n	800423a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40012300 	.word	0x40012300
 8004260:	40012000 	.word	0x40012000
 8004264:	20000004 	.word	0x20000004
 8004268:	431bde83 	.word	0x431bde83

0800426c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004274:	4b79      	ldr	r3, [pc, #484]	; (800445c <ADC_Init+0x1f0>)
 8004276:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6899      	ldr	r1, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	4a58      	ldr	r2, [pc, #352]	; (8004460 <ADC_Init+0x1f4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d022      	beq.n	800434a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6899      	ldr	r1, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	e00f      	b.n	800436a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004368:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0202 	bic.w	r2, r2, #2
 8004378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7e1b      	ldrb	r3, [r3, #24]
 8004384:	005a      	lsls	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	3b01      	subs	r3, #1
 80043c4:	035a      	lsls	r2, r3, #13
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	e007      	b.n	80043e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	051a      	lsls	r2, r3, #20
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004422:	025a      	lsls	r2, r3, #9
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6899      	ldr	r1, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	029a      	lsls	r2, r3, #10
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40012300 	.word	0x40012300
 8004460:	0f000001 	.word	0x0f000001

08004464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004480:	4013      	ands	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800448c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004496:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	60d3      	str	r3, [r2, #12]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b0:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <__NVIC_GetPriorityGrouping+0x18>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 0307 	and.w	r3, r3, #7
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db0b      	blt.n	80044f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	f003 021f 	and.w	r2, r3, #31
 80044e0:	4907      	ldr	r1, [pc, #28]	; (8004500 <__NVIC_EnableIRQ+0x38>)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2001      	movs	r0, #1
 80044ea:	fa00 f202 	lsl.w	r2, r0, r2
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e100 	.word	0xe000e100

08004504 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	db12      	blt.n	800453c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f003 021f 	and.w	r2, r3, #31
 800451c:	490a      	ldr	r1, [pc, #40]	; (8004548 <__NVIC_DisableIRQ+0x44>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2001      	movs	r0, #1
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	3320      	adds	r3, #32
 800452c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004530:	f3bf 8f4f 	dsb	sy
}
 8004534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004536:	f3bf 8f6f 	isb	sy
}
 800453a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db0a      	blt.n	8004576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	490c      	ldr	r1, [pc, #48]	; (8004598 <__NVIC_SetPriority+0x4c>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	440b      	add	r3, r1
 8004570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004574:	e00a      	b.n	800458c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4908      	ldr	r1, [pc, #32]	; (800459c <__NVIC_SetPriority+0x50>)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	3b04      	subs	r3, #4
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	440b      	add	r3, r1
 800458a:	761a      	strb	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f1c3 0307 	rsb	r3, r3, #7
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf28      	it	cs
 80045be:	2304      	movcs	r3, #4
 80045c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d902      	bls.n	80045d0 <NVIC_EncodePriority+0x30>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3b03      	subs	r3, #3
 80045ce:	e000      	b.n	80045d2 <NVIC_EncodePriority+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	4313      	orrs	r3, r2
         );
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004618:	d301      	bcc.n	800461e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461a:	2301      	movs	r3, #1
 800461c:	e00f      	b.n	800463e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <SysTick_Config+0x40>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004626:	210f      	movs	r1, #15
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	f7ff ff8e 	bl	800454c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <SysTick_Config+0x40>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004636:	4b04      	ldr	r3, [pc, #16]	; (8004648 <SysTick_Config+0x40>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff05 	bl	8004464 <__NVIC_SetPriorityGrouping>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004662:	b580      	push	{r7, lr}
 8004664:	b086      	sub	sp, #24
 8004666:	af00      	add	r7, sp, #0
 8004668:	4603      	mov	r3, r0
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004674:	f7ff ff1a 	bl	80044ac <__NVIC_GetPriorityGrouping>
 8004678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	6978      	ldr	r0, [r7, #20]
 8004680:	f7ff ff8e 	bl	80045a0 <NVIC_EncodePriority>
 8004684:	4602      	mov	r2, r0
 8004686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff ff5d 	bl	800454c <__NVIC_SetPriority>
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff0d 	bl	80044c8 <__NVIC_EnableIRQ>
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff1d 	bl	8004504 <__NVIC_DisableIRQ>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff94 	bl	8004608 <SysTick_Config>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80046ee:	f7fe fa03 	bl	8002af8 <HAL_SYSTICK_Callback>
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fc1c 	bl	8003f40 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e099      	b.n	8004848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004734:	e00f      	b.n	8004756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004736:	f7ff fc03 	bl	8003f40 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b05      	cmp	r3, #5
 8004742:	d908      	bls.n	8004756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e078      	b.n	8004848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e8      	bne.n	8004736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4b38      	ldr	r3, [pc, #224]	; (8004850 <HAL_DMA_Init+0x158>)
 8004770:	4013      	ands	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d107      	bne.n	80047c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	4313      	orrs	r3, r2
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d117      	bne.n	800481a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8f1 	bl	80049e4 <DMA_CheckFifoParam>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004816:	2301      	movs	r3, #1
 8004818:	e016      	b.n	8004848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8a8 	bl	8004978 <DMA_CalcBaseAndBitshift>
 8004828:	4603      	mov	r3, r0
 800482a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	223f      	movs	r2, #63	; 0x3f
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	f010803f 	.word	0xf010803f

08004854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004862:	f7ff fb6d 	bl	8003f40 <HAL_GetTick>
 8004866:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d008      	beq.n	8004886 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e052      	b.n	800492c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0216 	bic.w	r2, r2, #22
 8004894:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_DMA_Abort+0x62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0208 	bic.w	r2, r2, #8
 80048c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d6:	e013      	b.n	8004900 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048d8:	f7ff fb32 	bl	8003f40 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d90c      	bls.n	8004900 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2203      	movs	r2, #3
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e015      	b.n	800492c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e4      	bne.n	80048d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	223f      	movs	r2, #63	; 0x3f
 8004914:	409a      	lsls	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e00c      	b.n	800496c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2205      	movs	r2, #5
 8004956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	3b10      	subs	r3, #16
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <DMA_CalcBaseAndBitshift+0x64>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004992:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d909      	bls.n	80049ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	659a      	str	r2, [r3, #88]	; 0x58
 80049b8:	e007      	b.n	80049ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	aaaaaaab 	.word	0xaaaaaaab
 80049e0:	0800b454 	.word	0x0800b454

080049e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11f      	bne.n	8004a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d856      	bhi.n	8004ab2 <DMA_CheckFifoParam+0xce>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <DMA_CheckFifoParam+0x28>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a2f 	.word	0x08004a2f
 8004a14:	08004a1d 	.word	0x08004a1d
 8004a18:	08004ab3 	.word	0x08004ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d046      	beq.n	8004ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2c:	e043      	b.n	8004ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a36:	d140      	bne.n	8004aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a3c:	e03d      	b.n	8004aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	d121      	bne.n	8004a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d837      	bhi.n	8004abe <DMA_CheckFifoParam+0xda>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <DMA_CheckFifoParam+0x70>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a6b 	.word	0x08004a6b
 8004a5c:	08004a65 	.word	0x08004a65
 8004a60:	08004a7d 	.word	0x08004a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      break;
 8004a68:	e030      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d025      	beq.n	8004ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7a:	e022      	b.n	8004ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a84:	d11f      	bne.n	8004ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a8a:	e01c      	b.n	8004ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d903      	bls.n	8004a9a <DMA_CheckFifoParam+0xb6>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d003      	beq.n	8004aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a98:	e018      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9e:	e015      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00e      	beq.n	8004aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab0:	e00b      	b.n	8004aca <DMA_CheckFifoParam+0xe6>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e00a      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e008      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      break;
 8004aba:	bf00      	nop
 8004abc:	e006      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e004      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ac6:	bf00      	nop
 8004ac8:	e000      	b.n	8004acc <DMA_CheckFifoParam+0xe8>
      break;
 8004aca:	bf00      	nop
    }
  } 
  
  return status; 
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop

08004adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	e159      	b.n	8004dac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004af8:	2201      	movs	r2, #1
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	f040 8148 	bne.w	8004da6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d005      	beq.n	8004b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d130      	bne.n	8004b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	2203      	movs	r2, #3
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b64:	2201      	movs	r2, #1
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 0201 	and.w	r2, r3, #1
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d017      	beq.n	8004bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d123      	bne.n	8004c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	08da      	lsrs	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3208      	adds	r2, #8
 8004be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	220f      	movs	r2, #15
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	08da      	lsrs	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3208      	adds	r2, #8
 8004c1a:	69b9      	ldr	r1, [r7, #24]
 8004c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 0203 	and.w	r2, r3, #3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a2 	beq.w	8004da6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <HAL_GPIO_Init+0x2e8>)
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	4a56      	ldr	r2, [pc, #344]	; (8004dc4 <HAL_GPIO_Init+0x2e8>)
 8004c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c70:	6453      	str	r3, [r2, #68]	; 0x44
 8004c72:	4b54      	ldr	r3, [pc, #336]	; (8004dc4 <HAL_GPIO_Init+0x2e8>)
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7e:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_GPIO_Init+0x2ec>)
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	089b      	lsrs	r3, r3, #2
 8004c84:	3302      	adds	r3, #2
 8004c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	220f      	movs	r2, #15
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a49      	ldr	r2, [pc, #292]	; (8004dcc <HAL_GPIO_Init+0x2f0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d019      	beq.n	8004cde <HAL_GPIO_Init+0x202>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a48      	ldr	r2, [pc, #288]	; (8004dd0 <HAL_GPIO_Init+0x2f4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_GPIO_Init+0x1fe>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a47      	ldr	r2, [pc, #284]	; (8004dd4 <HAL_GPIO_Init+0x2f8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_GPIO_Init+0x1fa>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a46      	ldr	r2, [pc, #280]	; (8004dd8 <HAL_GPIO_Init+0x2fc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <HAL_GPIO_Init+0x1f6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a45      	ldr	r2, [pc, #276]	; (8004ddc <HAL_GPIO_Init+0x300>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <HAL_GPIO_Init+0x1f2>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	e008      	b.n	8004ce0 <HAL_GPIO_Init+0x204>
 8004cce:	2307      	movs	r3, #7
 8004cd0:	e006      	b.n	8004ce0 <HAL_GPIO_Init+0x204>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e004      	b.n	8004ce0 <HAL_GPIO_Init+0x204>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e002      	b.n	8004ce0 <HAL_GPIO_Init+0x204>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_GPIO_Init+0x204>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	f002 0203 	and.w	r2, r2, #3
 8004ce6:	0092      	lsls	r2, r2, #2
 8004ce8:	4093      	lsls	r3, r2
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cf0:	4935      	ldr	r1, [pc, #212]	; (8004dc8 <HAL_GPIO_Init+0x2ec>)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cfe:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d4c:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d76:	4a1a      	ldr	r2, [pc, #104]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d7c:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <HAL_GPIO_Init+0x304>)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	3301      	adds	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	f67f aea2 	bls.w	8004af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40013800 	.word	0x40013800
 8004dcc:	40020000 	.word	0x40020000
 8004dd0:	40020400 	.word	0x40020400
 8004dd4:	40020800 	.word	0x40020800
 8004dd8:	40020c00 	.word	0x40020c00
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40013c00 	.word	0x40013c00

08004de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
 8004df0:	4613      	mov	r3, r2
 8004df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004df4:	787b      	ldrb	r3, [r7, #1]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e00:	e003      	b.n	8004e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	041a      	lsls	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	619a      	str	r2, [r3, #24]
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e2e:	4a05      	ldr	r2, [pc, #20]	; (8004e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f806 	bl	8004e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40013c00 	.word	0x40013c00

08004e48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e12b      	b.n	80050ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fe fb04 	bl	8003494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2224      	movs	r2, #36	; 0x24
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f001 f9ea 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 8004ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4a81      	ldr	r2, [pc, #516]	; (80050d4 <HAL_I2C_Init+0x274>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d807      	bhi.n	8004ee4 <HAL_I2C_Init+0x84>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a80      	ldr	r2, [pc, #512]	; (80050d8 <HAL_I2C_Init+0x278>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	bf94      	ite	ls
 8004edc:	2301      	movls	r3, #1
 8004ede:	2300      	movhi	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e006      	b.n	8004ef2 <HAL_I2C_Init+0x92>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a7d      	ldr	r2, [pc, #500]	; (80050dc <HAL_I2C_Init+0x27c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	bf94      	ite	ls
 8004eec:	2301      	movls	r3, #1
 8004eee:	2300      	movhi	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e0e7      	b.n	80050ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a78      	ldr	r2, [pc, #480]	; (80050e0 <HAL_I2C_Init+0x280>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	0c9b      	lsrs	r3, r3, #18
 8004f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a6a      	ldr	r2, [pc, #424]	; (80050d4 <HAL_I2C_Init+0x274>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d802      	bhi.n	8004f34 <HAL_I2C_Init+0xd4>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3301      	adds	r3, #1
 8004f32:	e009      	b.n	8004f48 <HAL_I2C_Init+0xe8>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	4a69      	ldr	r2, [pc, #420]	; (80050e4 <HAL_I2C_Init+0x284>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	3301      	adds	r3, #1
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	495c      	ldr	r1, [pc, #368]	; (80050d4 <HAL_I2C_Init+0x274>)
 8004f64:	428b      	cmp	r3, r1
 8004f66:	d819      	bhi.n	8004f9c <HAL_I2C_Init+0x13c>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1e59      	subs	r1, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f7c:	400b      	ands	r3, r1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_I2C_Init+0x138>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1e59      	subs	r1, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f90:	3301      	adds	r3, #1
 8004f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f96:	e051      	b.n	800503c <HAL_I2C_Init+0x1dc>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	e04f      	b.n	800503c <HAL_I2C_Init+0x1dc>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d111      	bne.n	8004fc8 <HAL_I2C_Init+0x168>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1e58      	subs	r0, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	440b      	add	r3, r1
 8004fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e012      	b.n	8004fee <HAL_I2C_Init+0x18e>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1e58      	subs	r0, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	0099      	lsls	r1, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Init+0x196>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e022      	b.n	800503c <HAL_I2C_Init+0x1dc>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10e      	bne.n	800501c <HAL_I2C_Init+0x1bc>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1e58      	subs	r0, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	440b      	add	r3, r1
 800500c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005010:	3301      	adds	r3, #1
 8005012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	e00f      	b.n	800503c <HAL_I2C_Init+0x1dc>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1e58      	subs	r0, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	0099      	lsls	r1, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005032:	3301      	adds	r3, #1
 8005034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	6809      	ldr	r1, [r1, #0]
 8005040:	4313      	orrs	r3, r2
 8005042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800506a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6911      	ldr	r1, [r2, #16]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68d2      	ldr	r2, [r2, #12]
 8005076:	4311      	orrs	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	430b      	orrs	r3, r1
 800507e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	000186a0 	.word	0x000186a0
 80050d8:	001e847f 	.word	0x001e847f
 80050dc:	003d08ff 	.word	0x003d08ff
 80050e0:	431bde83 	.word	0x431bde83
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	817b      	strh	r3, [r7, #10]
 80050fa:	460b      	mov	r3, r1
 80050fc:	813b      	strh	r3, [r7, #8]
 80050fe:	4613      	mov	r3, r2
 8005100:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005102:	f7fe ff1d 	bl	8003f40 <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b20      	cmp	r3, #32
 8005112:	f040 8208 	bne.w	8005526 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2319      	movs	r3, #25
 800511c:	2201      	movs	r2, #1
 800511e:	497b      	ldr	r1, [pc, #492]	; (800530c <HAL_I2C_Mem_Read+0x224>)
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 faef 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
 800512e:	e1fb      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_I2C_Mem_Read+0x56>
 800513a:	2302      	movs	r3, #2
 800513c:	e1f4      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d007      	beq.n	8005164 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005172:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2222      	movs	r2, #34	; 0x22
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2240      	movs	r2, #64	; 0x40
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a5b      	ldr	r2, [pc, #364]	; (8005310 <HAL_I2C_Mem_Read+0x228>)
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051a6:	88f8      	ldrh	r0, [r7, #6]
 80051a8:	893a      	ldrh	r2, [r7, #8]
 80051aa:	8979      	ldrh	r1, [r7, #10]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4603      	mov	r3, r0
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f9bc 	bl	8005534 <I2C_RequestMemoryRead>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e1b0      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d113      	bne.n	80051f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ce:	2300      	movs	r3, #0
 80051d0:	623b      	str	r3, [r7, #32]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	623b      	str	r3, [r7, #32]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e184      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d11b      	bne.n	8005236 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e164      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523a:	2b02      	cmp	r3, #2
 800523c:	d11b      	bne.n	8005276 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525e:	2300      	movs	r3, #0
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	e144      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800528c:	e138      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	2b03      	cmp	r3, #3
 8005294:	f200 80f1 	bhi.w	800547a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	2b01      	cmp	r3, #1
 800529e:	d123      	bne.n	80052e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fb44 	bl	8005932 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e139      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e6:	e10b      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d14e      	bne.n	800538e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2200      	movs	r2, #0
 80052f8:	4906      	ldr	r1, [pc, #24]	; (8005314 <HAL_I2C_Mem_Read+0x22c>)
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fa02 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e10e      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
 800530a:	bf00      	nop
 800530c:	00100002 	.word	0x00100002
 8005310:	ffff0000 	.word	0xffff0000
 8005314:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800538c:	e0b8      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	2200      	movs	r2, #0
 8005396:	4966      	ldr	r1, [pc, #408]	; (8005530 <HAL_I2C_Mem_Read+0x448>)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f9b3 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0bf      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2200      	movs	r2, #0
 80053f2:	494f      	ldr	r1, [pc, #316]	; (8005530 <HAL_I2C_Mem_Read+0x448>)
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f985 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e091      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005478:	e042      	b.n	8005500 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fa57 	bl	8005932 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e04c      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d118      	bne.n	8005500 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	2b00      	cmp	r3, #0
 8005506:	f47f aec2 	bne.w	800528e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e000      	b.n	8005528 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	00010004 	.word	0x00010004

08005534 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	4608      	mov	r0, r1
 800553e:	4611      	mov	r1, r2
 8005540:	461a      	mov	r2, r3
 8005542:	4603      	mov	r3, r0
 8005544:	817b      	strh	r3, [r7, #10]
 8005546:	460b      	mov	r3, r1
 8005548:	813b      	strh	r3, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800555c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2200      	movs	r2, #0
 8005576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f8c2 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	d103      	bne.n	800559e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0aa      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	4952      	ldr	r1, [pc, #328]	; (8005700 <I2C_RequestMemoryRead+0x1cc>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f8fa 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e097      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f964 	bl	80058b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d107      	bne.n	8005606 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e076      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	611a      	str	r2, [r3, #16]
 800561a:	e021      	b.n	8005660 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	b29b      	uxth	r3, r3
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	6a39      	ldr	r1, [r7, #32]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f93e 	bl	80058b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	2b04      	cmp	r3, #4
 8005640:	d107      	bne.n	8005652 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e050      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005656:	893b      	ldrh	r3, [r7, #8]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005662:	6a39      	ldr	r1, [r7, #32]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f923 	bl	80058b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2b04      	cmp	r3, #4
 8005676:	d107      	bne.n	8005688 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e035      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800569a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f82b 	bl	8005704 <I2C_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c2:	d103      	bne.n	80056cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e013      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056d0:	897b      	ldrh	r3, [r7, #10]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	4906      	ldr	r1, [pc, #24]	; (8005700 <I2C_RequestMemoryRead+0x1cc>)
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f863 	bl	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00010002 	.word	0x00010002

08005704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005714:	e025      	b.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d021      	beq.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571e:	f7fe fc0f 	bl	8003f40 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d302      	bcc.n	8005734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d116      	bne.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e023      	b.n	80057aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10d      	bne.n	8005788 <I2C_WaitOnFlagUntilTimeout+0x84>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	43da      	mvns	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	e00c      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d0b6      	beq.n	8005716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c0:	e051      	b.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d123      	bne.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f043 0204 	orr.w	r2, r3, #4
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e046      	b.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d021      	beq.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fe fb8d 	bl	8003f40 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d116      	bne.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0220 	orr.w	r2, r3, #32
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e020      	b.n	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d10c      	bne.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e00b      	b.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	43da      	mvns	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d18d      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058bc:	e02d      	b.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f88d 	bl	80059de <I2C_IsAcknowledgeFailed>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e02d      	b.n	800592a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d021      	beq.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d6:	f7fe fb33 	bl	8003f40 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d116      	bne.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e007      	b.n	800592a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b80      	cmp	r3, #128	; 0x80
 8005926:	d1ca      	bne.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800593e:	e042      	b.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b10      	cmp	r3, #16
 800594c:	d119      	bne.n	8005982 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0210 	mvn.w	r2, #16
 8005956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e029      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005982:	f7fe fadd 	bl	8003f40 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	d302      	bcc.n	8005998 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d116      	bne.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e007      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d1b5      	bne.n	8005940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d11b      	bne.n	8005a2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e267      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d075      	beq.n	8005b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5a:	4b88      	ldr	r3, [pc, #544]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d00c      	beq.n	8005a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d112      	bne.n	8005a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a72:	4b82      	ldr	r3, [pc, #520]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	4b7e      	ldr	r3, [pc, #504]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d05b      	beq.n	8005b44 <HAL_RCC_OscConfig+0x108>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d157      	bne.n	8005b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e242      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x74>
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a75      	ldr	r2, [pc, #468]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e01d      	b.n	8005aec <HAL_RCC_OscConfig+0xb0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x98>
 8005aba:	4b70      	ldr	r3, [pc, #448]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6f      	ldr	r2, [pc, #444]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6c      	ldr	r2, [pc, #432]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0xb0>
 8005ad4:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a68      	ldr	r2, [pc, #416]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b66      	ldr	r3, [pc, #408]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a65      	ldr	r2, [pc, #404]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fe fa24 	bl	8003f40 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fe fa20 	bl	8003f40 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e207      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	4b5b      	ldr	r3, [pc, #364]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0xc0>
 8005b1a:	e014      	b.n	8005b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fe fa10 	bl	8003f40 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fe fa0c 	bl	8003f40 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	; 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e1f3      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b36:	4b51      	ldr	r3, [pc, #324]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0xe8>
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d063      	beq.n	8005c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b52:	4b4a      	ldr	r3, [pc, #296]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d11c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6a:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d116      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b76:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_RCC_OscConfig+0x152>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d001      	beq.n	8005b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e1c7      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4937      	ldr	r1, [pc, #220]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba2:	e03a      	b.n	8005c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bac:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <HAL_RCC_OscConfig+0x244>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fe f9c5 	bl	8003f40 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bba:	f7fe f9c1 	bl	8003f40 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e1a8      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4925      	ldr	r1, [pc, #148]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]
 8005bec:	e015      	b.n	8005c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <HAL_RCC_OscConfig+0x244>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fe f9a4 	bl	8003f40 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bfc:	f7fe f9a0 	bl	8003f40 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e187      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d036      	beq.n	8005c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <HAL_RCC_OscConfig+0x248>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c34:	f7fe f984 	bl	8003f40 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c3c:	f7fe f980 	bl	8003f40 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e167      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x200>
 8005c5a:	e01b      	b.n	8005c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <HAL_RCC_OscConfig+0x248>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c62:	f7fe f96d 	bl	8003f40 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c68:	e00e      	b.n	8005c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c6a:	f7fe f969 	bl	8003f40 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d907      	bls.n	8005c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e150      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	42470000 	.word	0x42470000
 8005c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c88:	4b88      	ldr	r3, [pc, #544]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1ea      	bne.n	8005c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8097 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca6:	4b81      	ldr	r3, [pc, #516]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	4b7d      	ldr	r3, [pc, #500]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	4a7c      	ldr	r2, [pc, #496]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc2:	4b7a      	ldr	r3, [pc, #488]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b77      	ldr	r3, [pc, #476]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d118      	bne.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cde:	4b74      	ldr	r3, [pc, #464]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a73      	ldr	r2, [pc, #460]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cea:	f7fe f929 	bl	8003f40 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf2:	f7fe f925 	bl	8003f40 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e10c      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0x2ea>
 8005d18:	4b64      	ldr	r3, [pc, #400]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	4a63      	ldr	r2, [pc, #396]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	6713      	str	r3, [r2, #112]	; 0x70
 8005d24:	e01c      	b.n	8005d60 <HAL_RCC_OscConfig+0x324>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x30c>
 8005d2e:	4b5f      	ldr	r3, [pc, #380]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	4a5e      	ldr	r2, [pc, #376]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d34:	f043 0304 	orr.w	r3, r3, #4
 8005d38:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3a:	4b5c      	ldr	r3, [pc, #368]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	4a5b      	ldr	r2, [pc, #364]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	6713      	str	r3, [r2, #112]	; 0x70
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0x324>
 8005d48:	4b58      	ldr	r3, [pc, #352]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	4a57      	ldr	r2, [pc, #348]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	6713      	str	r3, [r2, #112]	; 0x70
 8005d54:	4b55      	ldr	r3, [pc, #340]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	4a54      	ldr	r2, [pc, #336]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d5a:	f023 0304 	bic.w	r3, r3, #4
 8005d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d015      	beq.n	8005d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d68:	f7fe f8ea 	bl	8003f40 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fe f8e6 	bl	8003f40 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0cb      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d86:	4b49      	ldr	r3, [pc, #292]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ee      	beq.n	8005d70 <HAL_RCC_OscConfig+0x334>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d94:	f7fe f8d4 	bl	8003f40 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fe f8d0 	bl	8003f40 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0b5      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db2:	4b3e      	ldr	r3, [pc, #248]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ee      	bne.n	8005d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc4:	4b39      	ldr	r3, [pc, #228]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	4a38      	ldr	r2, [pc, #224]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a1 	beq.w	8005f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dda:	4b34      	ldr	r3, [pc, #208]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d05c      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d141      	bne.n	8005e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dee:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df4:	f7fe f8a4 	bl	8003f40 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fe f8a0 	bl	8003f40 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e087      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69da      	ldr	r2, [r3, #28]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	3b01      	subs	r3, #1
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	061b      	lsls	r3, r3, #24
 8005e3e:	491b      	ldr	r1, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4a:	f7fe f879 	bl	8003f40 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e52:	f7fe f875 	bl	8003f40 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e05c      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x416>
 8005e70:	e054      	b.n	8005f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fe f862 	bl	8003f40 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fe f85e 	bl	8003f40 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e045      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x444>
 8005e9e:	e03d      	b.n	8005f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e038      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <HAL_RCC_OscConfig+0x4ec>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d028      	beq.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d121      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d11a      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d111      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	3b01      	subs	r3, #1
 8005f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d107      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800

08005f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0cc      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f40:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d90c      	bls.n	8005f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b63      	ldr	r3, [pc, #396]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0b8      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f80:	4b59      	ldr	r3, [pc, #356]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	4a58      	ldr	r2, [pc, #352]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f98:	4b53      	ldr	r3, [pc, #332]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a52      	ldr	r2, [pc, #328]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa4:	4b50      	ldr	r3, [pc, #320]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	494d      	ldr	r1, [pc, #308]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d044      	beq.n	800604c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d107      	bne.n	8005fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d119      	bne.n	800600a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e07f      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d003      	beq.n	8005fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fea:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e06f      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffa:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e067      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800600a:	4b37      	ldr	r3, [pc, #220]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4934      	ldr	r1, [pc, #208]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800601c:	f7fd ff90 	bl	8003f40 <HAL_GetTick>
 8006020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006022:	e00a      	b.n	800603a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006024:	f7fd ff8c 	bl	8003f40 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e04f      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603a:	4b2b      	ldr	r3, [pc, #172]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 020c 	and.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	429a      	cmp	r2, r3
 800604a:	d1eb      	bne.n	8006024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800604c:	4b25      	ldr	r3, [pc, #148]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d20c      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b22      	ldr	r3, [pc, #136]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b20      	ldr	r3, [pc, #128]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e032      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006080:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4916      	ldr	r1, [pc, #88]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609e:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	490e      	ldr	r1, [pc, #56]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060b2:	f000 f821 	bl	80060f8 <HAL_RCC_GetSysClockFreq>
 80060b6:	4602      	mov	r2, r0
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	490a      	ldr	r1, [pc, #40]	; (80060ec <HAL_RCC_ClockConfig+0x1c0>)
 80060c4:	5ccb      	ldrb	r3, [r1, r3]
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <HAL_RCC_ClockConfig+0x1c8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd fef0 	bl	8003eb8 <HAL_InitTick>

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023c00 	.word	0x40023c00
 80060e8:	40023800 	.word	0x40023800
 80060ec:	0800b43c 	.word	0x0800b43c
 80060f0:	20000004 	.word	0x20000004
 80060f4:	20000008 	.word	0x20000008

080060f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060fc:	b090      	sub	sp, #64	; 0x40
 80060fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
 8006104:	2300      	movs	r3, #0
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006108:	2300      	movs	r3, #0
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006110:	4b59      	ldr	r3, [pc, #356]	; (8006278 <HAL_RCC_GetSysClockFreq+0x180>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 030c 	and.w	r3, r3, #12
 8006118:	2b08      	cmp	r3, #8
 800611a:	d00d      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x40>
 800611c:	2b08      	cmp	r3, #8
 800611e:	f200 80a1 	bhi.w	8006264 <HAL_RCC_GetSysClockFreq+0x16c>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_RCC_GetSysClockFreq+0x34>
 8006126:	2b04      	cmp	r3, #4
 8006128:	d003      	beq.n	8006132 <HAL_RCC_GetSysClockFreq+0x3a>
 800612a:	e09b      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800612c:	4b53      	ldr	r3, [pc, #332]	; (800627c <HAL_RCC_GetSysClockFreq+0x184>)
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006130:	e09b      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006132:	4b53      	ldr	r3, [pc, #332]	; (8006280 <HAL_RCC_GetSysClockFreq+0x188>)
 8006134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006136:	e098      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006138:	4b4f      	ldr	r3, [pc, #316]	; (8006278 <HAL_RCC_GetSysClockFreq+0x180>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006142:	4b4d      	ldr	r3, [pc, #308]	; (8006278 <HAL_RCC_GetSysClockFreq+0x180>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d028      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614e:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <HAL_RCC_GetSysClockFreq+0x180>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	099b      	lsrs	r3, r3, #6
 8006154:	2200      	movs	r2, #0
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	627a      	str	r2, [r7, #36]	; 0x24
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006160:	2100      	movs	r1, #0
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <HAL_RCC_GetSysClockFreq+0x188>)
 8006164:	fb03 f201 	mul.w	r2, r3, r1
 8006168:	2300      	movs	r3, #0
 800616a:	fb00 f303 	mul.w	r3, r0, r3
 800616e:	4413      	add	r3, r2
 8006170:	4a43      	ldr	r2, [pc, #268]	; (8006280 <HAL_RCC_GetSysClockFreq+0x188>)
 8006172:	fba0 1202 	umull	r1, r2, r0, r2
 8006176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006178:	460a      	mov	r2, r1
 800617a:	62ba      	str	r2, [r7, #40]	; 0x28
 800617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617e:	4413      	add	r3, r2
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	2200      	movs	r2, #0
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	61fa      	str	r2, [r7, #28]
 800618a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006192:	f7fa fd81 	bl	8000c98 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4613      	mov	r3, r2
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619e:	e053      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a0:	4b35      	ldr	r3, [pc, #212]	; (8006278 <HAL_RCC_GetSysClockFreq+0x180>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	099b      	lsrs	r3, r3, #6
 80061a6:	2200      	movs	r2, #0
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	617a      	str	r2, [r7, #20]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061b2:	f04f 0b00 	mov.w	fp, #0
 80061b6:	4652      	mov	r2, sl
 80061b8:	465b      	mov	r3, fp
 80061ba:	f04f 0000 	mov.w	r0, #0
 80061be:	f04f 0100 	mov.w	r1, #0
 80061c2:	0159      	lsls	r1, r3, #5
 80061c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c8:	0150      	lsls	r0, r2, #5
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	ebb2 080a 	subs.w	r8, r2, sl
 80061d2:	eb63 090b 	sbc.w	r9, r3, fp
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	f04f 0300 	mov.w	r3, #0
 80061de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061ea:	ebb2 0408 	subs.w	r4, r2, r8
 80061ee:	eb63 0509 	sbc.w	r5, r3, r9
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	00eb      	lsls	r3, r5, #3
 80061fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006200:	00e2      	lsls	r2, r4, #3
 8006202:	4614      	mov	r4, r2
 8006204:	461d      	mov	r5, r3
 8006206:	eb14 030a 	adds.w	r3, r4, sl
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	eb45 030b 	adc.w	r3, r5, fp
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800621e:	4629      	mov	r1, r5
 8006220:	028b      	lsls	r3, r1, #10
 8006222:	4621      	mov	r1, r4
 8006224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006228:	4621      	mov	r1, r4
 800622a:	028a      	lsls	r2, r1, #10
 800622c:	4610      	mov	r0, r2
 800622e:	4619      	mov	r1, r3
 8006230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006232:	2200      	movs	r2, #0
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	60fa      	str	r2, [r7, #12]
 8006238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800623c:	f7fa fd2c 	bl	8000c98 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4613      	mov	r3, r2
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_RCC_GetSysClockFreq+0x180>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	3301      	adds	r3, #1
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006262:	e002      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_RCC_GetSysClockFreq+0x184>)
 8006266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800626c:	4618      	mov	r0, r3
 800626e:	3740      	adds	r7, #64	; 0x40
 8006270:	46bd      	mov	sp, r7
 8006272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006276:	bf00      	nop
 8006278:	40023800 	.word	0x40023800
 800627c:	00f42400 	.word	0x00f42400
 8006280:	017d7840 	.word	0x017d7840

08006284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006288:	4b03      	ldr	r3, [pc, #12]	; (8006298 <HAL_RCC_GetHCLKFreq+0x14>)
 800628a:	681b      	ldr	r3, [r3, #0]
}
 800628c:	4618      	mov	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000004 	.word	0x20000004

0800629c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062a0:	f7ff fff0 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	0a9b      	lsrs	r3, r3, #10
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	4903      	ldr	r1, [pc, #12]	; (80062c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b2:	5ccb      	ldrb	r3, [r1, r3]
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40023800 	.word	0x40023800
 80062c0:	0800b44c 	.word	0x0800b44c

080062c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062c8:	f7ff ffdc 	bl	8006284 <HAL_RCC_GetHCLKFreq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0b5b      	lsrs	r3, r3, #13
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	4903      	ldr	r1, [pc, #12]	; (80062e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062da:	5ccb      	ldrb	r3, [r1, r3]
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40023800 	.word	0x40023800
 80062e8:	0800b44c 	.word	0x0800b44c

080062ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e041      	b.n	8006382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fd f90e 	bl	8003534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f000 fd7e 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_PWM_Start+0x24>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e022      	b.n	80063f6 <HAL_TIM_PWM_Start+0x6a>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d109      	bne.n	80063ca <HAL_TIM_PWM_Start+0x3e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b01      	cmp	r3, #1
 80063c0:	bf14      	ite	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	2300      	moveq	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	e015      	b.n	80063f6 <HAL_TIM_PWM_Start+0x6a>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d109      	bne.n	80063e4 <HAL_TIM_PWM_Start+0x58>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	e008      	b.n	80063f6 <HAL_TIM_PWM_Start+0x6a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e068      	b.n	80064d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0x82>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800640c:	e013      	b.n	8006436 <HAL_TIM_PWM_Start+0xaa>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0x92>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800641c:	e00b      	b.n	8006436 <HAL_TIM_PWM_Start+0xaa>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xa2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800642c:	e003      	b.n	8006436 <HAL_TIM_PWM_Start+0xaa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2201      	movs	r2, #1
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f001 f81e 	bl	8007480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a23      	ldr	r2, [pc, #140]	; (80064d8 <HAL_TIM_PWM_Start+0x14c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d107      	bne.n	800645e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800645c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <HAL_TIM_PWM_Start+0x14c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_TIM_PWM_Start+0x10e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006470:	d013      	beq.n	800649a <HAL_TIM_PWM_Start+0x10e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a19      	ldr	r2, [pc, #100]	; (80064dc <HAL_TIM_PWM_Start+0x150>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_TIM_PWM_Start+0x10e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <HAL_TIM_PWM_Start+0x154>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIM_PWM_Start+0x10e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <HAL_TIM_PWM_Start+0x158>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_TIM_PWM_Start+0x10e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a14      	ldr	r2, [pc, #80]	; (80064e8 <HAL_TIM_PWM_Start+0x15c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d111      	bne.n	80064be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b06      	cmp	r3, #6
 80064aa:	d010      	beq.n	80064ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064bc:	e007      	b.n	80064ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40014000 	.word	0x40014000

080064ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ffbe 	bl	8007480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a29      	ldr	r2, [pc, #164]	; (80065b0 <HAL_TIM_PWM_Stop+0xc4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d117      	bne.n	800653e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	f241 1311 	movw	r3, #4369	; 0x1111
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <HAL_TIM_PWM_Stop+0x52>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	f240 4344 	movw	r3, #1092	; 0x444
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <HAL_TIM_PWM_Stop+0x52>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	f241 1311 	movw	r3, #4369	; 0x1111
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10f      	bne.n	800656e <HAL_TIM_PWM_Stop+0x82>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6a1a      	ldr	r2, [r3, #32]
 8006554:	f240 4344 	movw	r3, #1092	; 0x444
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d107      	bne.n	800656e <HAL_TIM_PWM_Stop+0x82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Stop+0x92>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800657c:	e013      	b.n	80065a6 <HAL_TIM_PWM_Stop+0xba>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Stop+0xa2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800658c:	e00b      	b.n	80065a6 <HAL_TIM_PWM_Stop+0xba>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Stop+0xb2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659c:	e003      	b.n	80065a6 <HAL_TIM_PWM_Stop+0xba>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40010000 	.word	0x40010000

080065b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e041      	b.n	800664a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fc ffcc 	bl	8003578 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f000 fc1a 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_TIM_IC_Start_IT+0x1e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e013      	b.n	800669a <HAL_TIM_IC_Start_IT+0x46>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b04      	cmp	r3, #4
 8006676:	d104      	bne.n	8006682 <HAL_TIM_IC_Start_IT+0x2e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800667e:	b2db      	uxtb	r3, r3
 8006680:	e00b      	b.n	800669a <HAL_TIM_IC_Start_IT+0x46>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b08      	cmp	r3, #8
 8006686:	d104      	bne.n	8006692 <HAL_TIM_IC_Start_IT+0x3e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800668e:	b2db      	uxtb	r3, r3
 8006690:	e003      	b.n	800669a <HAL_TIM_IC_Start_IT+0x46>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_TIM_IC_Start_IT+0x58>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e013      	b.n	80066d4 <HAL_TIM_IC_Start_IT+0x80>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d104      	bne.n	80066bc <HAL_TIM_IC_Start_IT+0x68>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	e00b      	b.n	80066d4 <HAL_TIM_IC_Start_IT+0x80>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d104      	bne.n	80066cc <HAL_TIM_IC_Start_IT+0x78>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_IC_Start_IT+0x80>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d102      	bne.n	80066e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066dc:	7b7b      	ldrb	r3, [r7, #13]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0c2      	b.n	800686c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <HAL_TIM_IC_Start_IT+0xa2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f4:	e013      	b.n	800671e <HAL_TIM_IC_Start_IT+0xca>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_IC_Start_IT+0xb2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006704:	e00b      	b.n	800671e <HAL_TIM_IC_Start_IT+0xca>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d104      	bne.n	8006716 <HAL_TIM_IC_Start_IT+0xc2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006714:	e003      	b.n	800671e <HAL_TIM_IC_Start_IT+0xca>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_TIM_IC_Start_IT+0xda>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800672c:	e013      	b.n	8006756 <HAL_TIM_IC_Start_IT+0x102>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d104      	bne.n	800673e <HAL_TIM_IC_Start_IT+0xea>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800673c:	e00b      	b.n	8006756 <HAL_TIM_IC_Start_IT+0x102>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d104      	bne.n	800674e <HAL_TIM_IC_Start_IT+0xfa>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800674c:	e003      	b.n	8006756 <HAL_TIM_IC_Start_IT+0x102>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b0c      	cmp	r3, #12
 800675a:	d841      	bhi.n	80067e0 <HAL_TIM_IC_Start_IT+0x18c>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <HAL_TIM_IC_Start_IT+0x110>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006799 	.word	0x08006799
 8006768:	080067e1 	.word	0x080067e1
 800676c:	080067e1 	.word	0x080067e1
 8006770:	080067e1 	.word	0x080067e1
 8006774:	080067ab 	.word	0x080067ab
 8006778:	080067e1 	.word	0x080067e1
 800677c:	080067e1 	.word	0x080067e1
 8006780:	080067e1 	.word	0x080067e1
 8006784:	080067bd 	.word	0x080067bd
 8006788:	080067e1 	.word	0x080067e1
 800678c:	080067e1 	.word	0x080067e1
 8006790:	080067e1 	.word	0x080067e1
 8006794:	080067cf 	.word	0x080067cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0202 	orr.w	r2, r2, #2
 80067a6:	60da      	str	r2, [r3, #12]
      break;
 80067a8:	e01d      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0204 	orr.w	r2, r2, #4
 80067b8:	60da      	str	r2, [r3, #12]
      break;
 80067ba:	e014      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0208 	orr.w	r2, r2, #8
 80067ca:	60da      	str	r2, [r3, #12]
      break;
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0210 	orr.w	r2, r2, #16
 80067dc:	60da      	str	r2, [r3, #12]
      break;
 80067de:	e002      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
      break;
 80067e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d13e      	bne.n	800686a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2201      	movs	r2, #1
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fe43 	bl	8007480 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_TIM_IC_Start_IT+0x220>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d018      	beq.n	8006836 <HAL_TIM_IC_Start_IT+0x1e2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680c:	d013      	beq.n	8006836 <HAL_TIM_IC_Start_IT+0x1e2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a19      	ldr	r2, [pc, #100]	; (8006878 <HAL_TIM_IC_Start_IT+0x224>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_TIM_IC_Start_IT+0x1e2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <HAL_TIM_IC_Start_IT+0x228>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d009      	beq.n	8006836 <HAL_TIM_IC_Start_IT+0x1e2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a16      	ldr	r2, [pc, #88]	; (8006880 <HAL_TIM_IC_Start_IT+0x22c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d004      	beq.n	8006836 <HAL_TIM_IC_Start_IT+0x1e2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a14      	ldr	r2, [pc, #80]	; (8006884 <HAL_TIM_IC_Start_IT+0x230>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d111      	bne.n	800685a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b06      	cmp	r3, #6
 8006846:	d010      	beq.n	800686a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006858:	e007      	b.n	800686a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40014000 	.word	0x40014000

08006888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d122      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d11b      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0202 	mvn.w	r2, #2
 80068b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb fefa 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa8c 	bl	8006df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa93 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d122      	bne.n	8006938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d11b      	bne.n	8006938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0204 	mvn.w	r2, #4
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2202      	movs	r2, #2
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fb fed0 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa62 	bl	8006df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa69 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b08      	cmp	r3, #8
 8006944:	d122      	bne.n	800698c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b08      	cmp	r3, #8
 8006952:	d11b      	bne.n	800698c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0208 	mvn.w	r2, #8
 800695c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2204      	movs	r2, #4
 8006962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb fea6 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 8006978:	e005      	b.n	8006986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa38 	bl	8006df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa3f 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b10      	cmp	r3, #16
 8006998:	d122      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d11b      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0210 	mvn.w	r2, #16
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2208      	movs	r2, #8
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fe7c 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa0e 	bl	8006df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fa15 	bl	8006e04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d10e      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d107      	bne.n	8006a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0201 	mvn.w	r2, #1
 8006a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9e8 	bl	8006ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b80      	cmp	r3, #128	; 0x80
 8006a18:	d10e      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a24:	2b80      	cmp	r3, #128	; 0x80
 8006a26:	d107      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fdc2 	bl	80075bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d10e      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d107      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9da 	bl	8006e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d10e      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d107      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0220 	mvn.w	r2, #32
 8006a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fd8c 	bl	80075a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e088      	b.n	8006bc8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11b      	bne.n	8006afc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6819      	ldr	r1, [r3, #0]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f000 fbb6 	bl	8007244 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 020c 	bic.w	r2, r2, #12
 8006ae6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6999      	ldr	r1, [r3, #24]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	619a      	str	r2, [r3, #24]
 8006afa:	e060      	b.n	8006bbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d11c      	bne.n	8006b3c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f000 fbff 	bl	8007314 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b24:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6999      	ldr	r1, [r3, #24]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	619a      	str	r2, [r3, #24]
 8006b3a:	e040      	b.n	8006bbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d11b      	bne.n	8006b7a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6819      	ldr	r1, [r3, #0]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f000 fc1c 	bl	800738e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 020c 	bic.w	r2, r2, #12
 8006b64:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69d9      	ldr	r1, [r3, #28]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	61da      	str	r2, [r3, #28]
 8006b78:	e021      	b.n	8006bbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d11c      	bne.n	8006bba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6819      	ldr	r1, [r3, #0]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f000 fc39 	bl	8007406 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ba2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69d9      	ldr	r1, [r3, #28]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	61da      	str	r2, [r3, #28]
 8006bb8:	e001      	b.n	8006bbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e0ae      	b.n	8006d4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b0c      	cmp	r3, #12
 8006bfa:	f200 809f 	bhi.w	8006d3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006d3d 	.word	0x08006d3d
 8006c0c:	08006d3d 	.word	0x08006d3d
 8006c10:	08006d3d 	.word	0x08006d3d
 8006c14:	08006c79 	.word	0x08006c79
 8006c18:	08006d3d 	.word	0x08006d3d
 8006c1c:	08006d3d 	.word	0x08006d3d
 8006c20:	08006d3d 	.word	0x08006d3d
 8006c24:	08006cbb 	.word	0x08006cbb
 8006c28:	08006d3d 	.word	0x08006d3d
 8006c2c:	08006d3d 	.word	0x08006d3d
 8006c30:	08006d3d 	.word	0x08006d3d
 8006c34:	08006cfb 	.word	0x08006cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f974 	bl	8006f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0208 	orr.w	r2, r2, #8
 8006c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0204 	bic.w	r2, r2, #4
 8006c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6999      	ldr	r1, [r3, #24]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	619a      	str	r2, [r3, #24]
      break;
 8006c76:	e064      	b.n	8006d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f9ba 	bl	8006ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6999      	ldr	r1, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	021a      	lsls	r2, r3, #8
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	619a      	str	r2, [r3, #24]
      break;
 8006cb8:	e043      	b.n	8006d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fa05 	bl	80070d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0208 	orr.w	r2, r2, #8
 8006cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0204 	bic.w	r2, r2, #4
 8006ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	61da      	str	r2, [r3, #28]
      break;
 8006cf8:	e023      	b.n	8006d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fa4f 	bl	80071a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69d9      	ldr	r1, [r3, #28]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	021a      	lsls	r2, r3, #8
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	61da      	str	r2, [r3, #28]
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b0c      	cmp	r3, #12
 8006d66:	d831      	bhi.n	8006dcc <HAL_TIM_ReadCapturedValue+0x78>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006da5 	.word	0x08006da5
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006daf 	.word	0x08006daf
 8006d84:	08006dcd 	.word	0x08006dcd
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dcd 	.word	0x08006dcd
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006dc3 	.word	0x08006dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	60fb      	str	r3, [r7, #12]

      break;
 8006dac:	e00f      	b.n	8006dce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	60fb      	str	r3, [r7, #12]

      break;
 8006db6:	e00a      	b.n	8006dce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	60fb      	str	r3, [r7, #12]

      break;
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	60fb      	str	r3, [r7, #12]

      break;
 8006dca:	e000      	b.n	8006dce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006dcc:	bf00      	nop
  }

  return tmpreg;
 8006dce:	68fb      	ldr	r3, [r7, #12]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a34      	ldr	r2, [pc, #208]	; (8006f10 <TIM_Base_SetConfig+0xe4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00f      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4a:	d00b      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a31      	ldr	r2, [pc, #196]	; (8006f14 <TIM_Base_SetConfig+0xe8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d007      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a30      	ldr	r2, [pc, #192]	; (8006f18 <TIM_Base_SetConfig+0xec>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_Base_SetConfig+0x38>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a2f      	ldr	r2, [pc, #188]	; (8006f1c <TIM_Base_SetConfig+0xf0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d108      	bne.n	8006e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a25      	ldr	r2, [pc, #148]	; (8006f10 <TIM_Base_SetConfig+0xe4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01b      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e84:	d017      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <TIM_Base_SetConfig+0xe8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a21      	ldr	r2, [pc, #132]	; (8006f18 <TIM_Base_SetConfig+0xec>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00f      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <TIM_Base_SetConfig+0xf0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <TIM_Base_SetConfig+0xf4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1e      	ldr	r2, [pc, #120]	; (8006f24 <TIM_Base_SetConfig+0xf8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_Base_SetConfig+0x8a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	; (8006f28 <TIM_Base_SetConfig+0xfc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <TIM_Base_SetConfig+0xe4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d103      	bne.n	8006efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	615a      	str	r2, [r3, #20]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800

08006f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f023 0302 	bic.w	r3, r3, #2
 8006f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <TIM_OC1_SetConfig+0xc8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d10c      	bne.n	8006fa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0308 	bic.w	r3, r3, #8
 8006f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f023 0304 	bic.w	r3, r3, #4
 8006fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <TIM_OC1_SetConfig+0xc8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d111      	bne.n	8006fce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40010000 	.word	0x40010000

08006ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0210 	bic.w	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0320 	bic.w	r3, r3, #32
 8007042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <TIM_OC2_SetConfig+0xd4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d10d      	bne.n	8007074 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800705e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a15      	ldr	r2, [pc, #84]	; (80070cc <TIM_OC2_SetConfig+0xd4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d113      	bne.n	80070a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800708a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000

080070d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <TIM_OC3_SetConfig+0xd0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d10d      	bne.n	800714a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <TIM_OC3_SetConfig+0xd0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d113      	bne.n	800717a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	621a      	str	r2, [r3, #32]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40010000 	.word	0x40010000

080071a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a10      	ldr	r2, [pc, #64]	; (8007240 <TIM_OC4_SetConfig+0x9c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d109      	bne.n	8007218 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	019b      	lsls	r3, r3, #6
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000

08007244 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0201 	bic.w	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <TIM_TI1_SetConfig+0xbc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <TIM_TI1_SetConfig+0x56>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d00f      	beq.n	800729a <TIM_TI1_SetConfig+0x56>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a21      	ldr	r2, [pc, #132]	; (8007304 <TIM_TI1_SetConfig+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_TI1_SetConfig+0x56>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a20      	ldr	r2, [pc, #128]	; (8007308 <TIM_TI1_SetConfig+0xc4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_TI1_SetConfig+0x56>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <TIM_TI1_SetConfig+0xc8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_TI1_SetConfig+0x56>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <TIM_TI1_SetConfig+0xcc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <TIM_TI1_SetConfig+0x5a>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <TIM_TI1_SetConfig+0x5c>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e003      	b.n	80072be <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f043 0301 	orr.w	r3, r3, #1
 80072bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f023 030a 	bic.w	r3, r3, #10
 80072d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f003 030a 	and.w	r3, r3, #10
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40014000 	.word	0x40014000

08007314 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f023 0210 	bic.w	r2, r3, #16
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007352:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	031b      	lsls	r3, r3, #12
 8007358:	b29b      	uxth	r3, r3
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4313      	orrs	r3, r2
 800735e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007366:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800738e:	b480      	push	{r7}
 8007390:	b087      	sub	sp, #28
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80073de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007406:	b480      	push	{r7}
 8007408:	b087      	sub	sp, #28
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007432:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007444:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	031b      	lsls	r3, r3, #12
 800744a:	b29b      	uxth	r3, r3
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007458:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	031b      	lsls	r3, r3, #12
 800745e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2201      	movs	r2, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1a      	ldr	r2, [r3, #32]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a1a      	ldr	r2, [r3, #32]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	fa01 f303 	lsl.w	r3, r1, r3
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e050      	b.n	8007586 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d018      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007530:	d013      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a18      	ldr	r2, [pc, #96]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10c      	bne.n	8007574 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4313      	orrs	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40010000 	.word	0x40010000
 8007598:	40000400 	.word	0x40000400
 800759c:	40000800 	.word	0x40000800
 80075a0:	40000c00 	.word	0x40000c00
 80075a4:	40014000 	.word	0x40014000

080075a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e03f      	b.n	8007662 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fc f882 	bl	8003700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2224      	movs	r2, #36	; 0x24
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fe1d 	bl	8008254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695a      	ldr	r2, [r3, #20]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b08a      	sub	sp, #40	; 0x28
 800766e:	af02      	add	r7, sp, #8
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	4613      	mov	r3, r2
 8007678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b20      	cmp	r3, #32
 8007688:	d17c      	bne.n	8007784 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_UART_Transmit+0x2c>
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e075      	b.n	8007786 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_UART_Transmit+0x3e>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e06e      	b.n	8007786 <HAL_UART_Transmit+0x11c>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2221      	movs	r2, #33	; 0x21
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076be:	f7fc fc3f 	bl	8003f40 <HAL_GetTick>
 80076c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	88fa      	ldrh	r2, [r7, #6]
 80076ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d8:	d108      	bne.n	80076ec <HAL_UART_Transmit+0x82>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	e003      	b.n	80076f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076fc:	e02a      	b.n	8007754 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2200      	movs	r2, #0
 8007706:	2180      	movs	r1, #128	; 0x80
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fb9b 	bl	8007e44 <UART_WaitOnFlagUntilTimeout>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e036      	b.n	8007786 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800772c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	3302      	adds	r3, #2
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	e007      	b.n	8007746 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	781a      	ldrb	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1cf      	bne.n	80076fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2200      	movs	r2, #0
 8007766:	2140      	movs	r1, #64	; 0x40
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fb6b 	bl	8007e44 <UART_WaitOnFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e006      	b.n	8007786 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	e000      	b.n	8007786 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b08a      	sub	sp, #40	; 0x28
 8007792:	af02      	add	r7, sp, #8
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	f040 808c 	bne.w	80078c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_UART_Receive+0x2e>
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e084      	b.n	80078ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Receive+0x40>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e07d      	b.n	80078ca <HAL_UART_Receive+0x13c>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2222      	movs	r2, #34	; 0x22
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ea:	f7fc fba9 	bl	8003f40 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007804:	d108      	bne.n	8007818 <HAL_UART_Receive+0x8a>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e003      	b.n	8007820 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007828:	e043      	b.n	80078b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	2120      	movs	r1, #32
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fb05 	bl	8007e44 <UART_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e042      	b.n	80078ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10c      	bne.n	8007864 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	b29a      	uxth	r2, r3
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	3302      	adds	r3, #2
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	e01f      	b.n	80078a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786c:	d007      	beq.n	800787e <HAL_UART_Receive+0xf0>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <HAL_UART_Receive+0xfe>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	b2da      	uxtb	r2, r3
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e008      	b.n	800789e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007898:	b2da      	uxtb	r2, r3
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1b6      	bne.n	800782a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	e000      	b.n	80078ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80078c8:	2302      	movs	r3, #2
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b0ba      	sub	sp, #232	; 0xe8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007900:	2300      	movs	r3, #0
 8007902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10f      	bne.n	800793a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <HAL_UART_IRQHandler+0x66>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fbd3 	bl	80080de <UART_Receive_IT>
      return;
 8007938:	e256      	b.n	8007de8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800793a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80de 	beq.w	8007b00 <HAL_UART_IRQHandler+0x22c>
 8007944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007954:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80d1 	beq.w	8007b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <HAL_UART_IRQHandler+0xae>
 800796a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007972:	2b00      	cmp	r3, #0
 8007974:	d005      	beq.n	8007982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f043 0201 	orr.w	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <HAL_UART_IRQHandler+0xd2>
 800798e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0202 	orr.w	r2, r3, #2
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <HAL_UART_IRQHandler+0xf6>
 80079b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	f043 0204 	orr.w	r2, r3, #4
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d011      	beq.n	80079fa <HAL_UART_IRQHandler+0x126>
 80079d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d105      	bne.n	80079ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80079e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	f043 0208 	orr.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 81ed 	beq.w	8007dde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_UART_IRQHandler+0x14e>
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fb5e 	bl	80080de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d103      	bne.n	8007a4e <HAL_UART_IRQHandler+0x17a>
 8007a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d04f      	beq.n	8007aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa66 	bl	8007f20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d141      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3314      	adds	r3, #20
 8007a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1d9      	bne.n	8007a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d013      	beq.n	8007ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	4a7d      	ldr	r2, [pc, #500]	; (8007cb0 <HAL_UART_IRQHandler+0x3dc>)
 8007abc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fc ff36 	bl	8004934 <HAL_DMA_Abort_IT>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007adc:	e00e      	b.n	8007afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f99a 	bl	8007e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae4:	e00a      	b.n	8007afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f996 	bl	8007e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	e006      	b.n	8007afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f992 	bl	8007e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007afa:	e170      	b.n	8007dde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	bf00      	nop
    return;
 8007afe:	e16e      	b.n	8007dde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	f040 814a 	bne.w	8007d9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8143 	beq.w	8007d9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1c:	f003 0310 	and.w	r3, r3, #16
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 813c 	beq.w	8007d9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60bb      	str	r3, [r7, #8]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	f040 80b4 	bne.w	8007cb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8140 	beq.w	8007de2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	f080 8139 	bcs.w	8007de2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b82:	f000 8088 	beq.w	8007c96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d9      	bne.n	8007b86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e1      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3314      	adds	r3, #20
 8007c14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e3      	bne.n	8007c0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c66:	f023 0310 	bic.w	r3, r3, #16
 8007c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e3      	bne.n	8007c54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fc fddf 	bl	8004854 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8c0 	bl	8007e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cac:	e099      	b.n	8007de2 <HAL_UART_IRQHandler+0x50e>
 8007cae:	bf00      	nop
 8007cb0:	08007fe7 	.word	0x08007fe7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 808b 	beq.w	8007de6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8086 	beq.w	8007de6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8007d00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e3      	bne.n	8007cda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3314      	adds	r3, #20
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	623b      	str	r3, [r7, #32]
   return(result);
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3314      	adds	r3, #20
 8007d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d36:	633a      	str	r2, [r7, #48]	; 0x30
 8007d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e3      	bne.n	8007d12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0310 	bic.w	r3, r3, #16
 8007d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007d7c:	61fa      	str	r2, [r7, #28]
 8007d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e3      	bne.n	8007d58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f848 	bl	8007e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d9c:	e023      	b.n	8007de6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_UART_IRQHandler+0x4ea>
 8007daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f929 	bl	800800e <UART_Transmit_IT>
    return;
 8007dbc:	e014      	b.n	8007de8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00e      	beq.n	8007de8 <HAL_UART_IRQHandler+0x514>
 8007dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d008      	beq.n	8007de8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f969 	bl	80080ae <UART_EndTransmit_IT>
    return;
 8007ddc:	e004      	b.n	8007de8 <HAL_UART_IRQHandler+0x514>
    return;
 8007dde:	bf00      	nop
 8007de0:	e002      	b.n	8007de8 <HAL_UART_IRQHandler+0x514>
      return;
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <HAL_UART_IRQHandler+0x514>
      return;
 8007de6:	bf00      	nop
  }
}
 8007de8:	37e8      	adds	r7, #232	; 0xe8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b090      	sub	sp, #64	; 0x40
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e54:	e050      	b.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d04c      	beq.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e64:	f7fc f86c 	bl	8003f40 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d241      	bcs.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	330c      	adds	r3, #12
 8007e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e94:	637a      	str	r2, [r7, #52]	; 0x34
 8007e96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e5      	bne.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3314      	adds	r3, #20
 8007eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f023 0301 	bic.w	r3, r3, #1
 8007ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3314      	adds	r3, #20
 8007ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec8:	623a      	str	r2, [r7, #32]
 8007eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	69f9      	ldr	r1, [r7, #28]
 8007ece:	6a3a      	ldr	r2, [r7, #32]
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e5      	bne.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e00f      	b.n	8007f18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d09f      	beq.n	8007e56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3740      	adds	r7, #64	; 0x40
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b095      	sub	sp, #84	; 0x54
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f48:	643a      	str	r2, [r7, #64]	; 0x40
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e5      	bne.n	8007f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3314      	adds	r3, #20
 8007f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3314      	adds	r3, #20
 8007f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e5      	bne.n	8007f5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d119      	bne.n	8007fcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f023 0310 	bic.w	r3, r3, #16
 8007fae:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	330c      	adds	r3, #12
 8007fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fb8:	61ba      	str	r2, [r7, #24]
 8007fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6979      	ldr	r1, [r7, #20]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e5      	bne.n	8007f98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fda:	bf00      	nop
 8007fdc:	3754      	adds	r7, #84	; 0x54
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff ff09 	bl	8007e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b21      	cmp	r3, #33	; 0x21
 8008020:	d13e      	bne.n	80080a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802a:	d114      	bne.n	8008056 <UART_Transmit_IT+0x48>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d110      	bne.n	8008056 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008048:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	1c9a      	adds	r2, r3, #2
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	621a      	str	r2, [r3, #32]
 8008054:	e008      	b.n	8008068 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6211      	str	r1, [r2, #32]
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800806c:	b29b      	uxth	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	b29b      	uxth	r3, r3
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4619      	mov	r1, r3
 8008076:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10f      	bne.n	800809c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800808a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800809a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	e000      	b.n	80080a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7ff fe8e 	bl	8007df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b08c      	sub	sp, #48	; 0x30
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b22      	cmp	r3, #34	; 0x22
 80080f0:	f040 80ab 	bne.w	800824a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fc:	d117      	bne.n	800812e <UART_Receive_IT+0x50>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d113      	bne.n	800812e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811c:	b29a      	uxth	r2, r3
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	1c9a      	adds	r2, r3, #2
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	629a      	str	r2, [r3, #40]	; 0x28
 800812c:	e026      	b.n	800817c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008134:	2300      	movs	r3, #0
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008140:	d007      	beq.n	8008152 <UART_Receive_IT+0x74>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <UART_Receive_IT+0x82>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	b2da      	uxtb	r2, r3
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e008      	b.n	8008172 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816c:	b2da      	uxtb	r2, r3
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	b29b      	uxth	r3, r3
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	4619      	mov	r1, r3
 800818a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800818c:	2b00      	cmp	r3, #0
 800818e:	d15a      	bne.n	8008246 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0220 	bic.w	r2, r2, #32
 800819e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d135      	bne.n	800823c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	330c      	adds	r3, #12
 80081dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	613b      	str	r3, [r7, #16]
   return(result);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f023 0310 	bic.w	r3, r3, #16
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	330c      	adds	r3, #12
 80081f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f6:	623a      	str	r2, [r7, #32]
 80081f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	69f9      	ldr	r1, [r7, #28]
 80081fc:	6a3a      	ldr	r2, [r7, #32]
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	61bb      	str	r3, [r7, #24]
   return(result);
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b10      	cmp	r3, #16
 8008216:	d10a      	bne.n	800822e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff fdf9 	bl	8007e2c <HAL_UARTEx_RxEventCallback>
 800823a:	e002      	b.n	8008242 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff fde1 	bl	8007e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	e002      	b.n	800824c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	e000      	b.n	800824c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800824a:	2302      	movs	r3, #2
  }
}
 800824c:	4618      	mov	r0, r3
 800824e:	3730      	adds	r7, #48	; 0x30
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008258:	b0c0      	sub	sp, #256	; 0x100
 800825a:	af00      	add	r7, sp, #0
 800825c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	68d9      	ldr	r1, [r3, #12]
 8008272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	ea40 0301 	orr.w	r3, r0, r1
 800827c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800827e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	431a      	orrs	r2, r3
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	431a      	orrs	r2, r3
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082ac:	f021 010c 	bic.w	r1, r1, #12
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ba:	430b      	orrs	r3, r1
 80082bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ce:	6999      	ldr	r1, [r3, #24]
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	ea40 0301 	orr.w	r3, r0, r1
 80082da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b8f      	ldr	r3, [pc, #572]	; (8008520 <UART_SetConfig+0x2cc>)
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d005      	beq.n	80082f4 <UART_SetConfig+0xa0>
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b8d      	ldr	r3, [pc, #564]	; (8008524 <UART_SetConfig+0x2d0>)
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d104      	bne.n	80082fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082f4:	f7fd ffe6 	bl	80062c4 <HAL_RCC_GetPCLK2Freq>
 80082f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082fc:	e003      	b.n	8008306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082fe:	f7fd ffcd 	bl	800629c <HAL_RCC_GetPCLK1Freq>
 8008302:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008310:	f040 810c 	bne.w	800852c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800831e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008326:	4622      	mov	r2, r4
 8008328:	462b      	mov	r3, r5
 800832a:	1891      	adds	r1, r2, r2
 800832c:	65b9      	str	r1, [r7, #88]	; 0x58
 800832e:	415b      	adcs	r3, r3
 8008330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008336:	4621      	mov	r1, r4
 8008338:	eb12 0801 	adds.w	r8, r2, r1
 800833c:	4629      	mov	r1, r5
 800833e:	eb43 0901 	adc.w	r9, r3, r1
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800834e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008356:	4690      	mov	r8, r2
 8008358:	4699      	mov	r9, r3
 800835a:	4623      	mov	r3, r4
 800835c:	eb18 0303 	adds.w	r3, r8, r3
 8008360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008364:	462b      	mov	r3, r5
 8008366:	eb49 0303 	adc.w	r3, r9, r3
 800836a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800836e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800837a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800837e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008382:	460b      	mov	r3, r1
 8008384:	18db      	adds	r3, r3, r3
 8008386:	653b      	str	r3, [r7, #80]	; 0x50
 8008388:	4613      	mov	r3, r2
 800838a:	eb42 0303 	adc.w	r3, r2, r3
 800838e:	657b      	str	r3, [r7, #84]	; 0x54
 8008390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008398:	f7f8 fc7e 	bl	8000c98 <__aeabi_uldivmod>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4b61      	ldr	r3, [pc, #388]	; (8008528 <UART_SetConfig+0x2d4>)
 80083a2:	fba3 2302 	umull	r2, r3, r3, r2
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	011c      	lsls	r4, r3, #4
 80083aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80083b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80083bc:	4642      	mov	r2, r8
 80083be:	464b      	mov	r3, r9
 80083c0:	1891      	adds	r1, r2, r2
 80083c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80083c4:	415b      	adcs	r3, r3
 80083c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083cc:	4641      	mov	r1, r8
 80083ce:	eb12 0a01 	adds.w	sl, r2, r1
 80083d2:	4649      	mov	r1, r9
 80083d4:	eb43 0b01 	adc.w	fp, r3, r1
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083ec:	4692      	mov	sl, r2
 80083ee:	469b      	mov	fp, r3
 80083f0:	4643      	mov	r3, r8
 80083f2:	eb1a 0303 	adds.w	r3, sl, r3
 80083f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083fa:	464b      	mov	r3, r9
 80083fc:	eb4b 0303 	adc.w	r3, fp, r3
 8008400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008410:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008418:	460b      	mov	r3, r1
 800841a:	18db      	adds	r3, r3, r3
 800841c:	643b      	str	r3, [r7, #64]	; 0x40
 800841e:	4613      	mov	r3, r2
 8008420:	eb42 0303 	adc.w	r3, r2, r3
 8008424:	647b      	str	r3, [r7, #68]	; 0x44
 8008426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800842a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800842e:	f7f8 fc33 	bl	8000c98 <__aeabi_uldivmod>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4611      	mov	r1, r2
 8008438:	4b3b      	ldr	r3, [pc, #236]	; (8008528 <UART_SetConfig+0x2d4>)
 800843a:	fba3 2301 	umull	r2, r3, r3, r1
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	2264      	movs	r2, #100	; 0x64
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	1acb      	subs	r3, r1, r3
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800844e:	4b36      	ldr	r3, [pc, #216]	; (8008528 <UART_SetConfig+0x2d4>)
 8008450:	fba3 2302 	umull	r2, r3, r3, r2
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800845c:	441c      	add	r4, r3
 800845e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008462:	2200      	movs	r2, #0
 8008464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008468:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800846c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	1891      	adds	r1, r2, r2
 8008476:	63b9      	str	r1, [r7, #56]	; 0x38
 8008478:	415b      	adcs	r3, r3
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008480:	4641      	mov	r1, r8
 8008482:	1851      	adds	r1, r2, r1
 8008484:	6339      	str	r1, [r7, #48]	; 0x30
 8008486:	4649      	mov	r1, r9
 8008488:	414b      	adcs	r3, r1
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008498:	4659      	mov	r1, fp
 800849a:	00cb      	lsls	r3, r1, #3
 800849c:	4651      	mov	r1, sl
 800849e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084a2:	4651      	mov	r1, sl
 80084a4:	00ca      	lsls	r2, r1, #3
 80084a6:	4610      	mov	r0, r2
 80084a8:	4619      	mov	r1, r3
 80084aa:	4603      	mov	r3, r0
 80084ac:	4642      	mov	r2, r8
 80084ae:	189b      	adds	r3, r3, r2
 80084b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b4:	464b      	mov	r3, r9
 80084b6:	460a      	mov	r2, r1
 80084b8:	eb42 0303 	adc.w	r3, r2, r3
 80084bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084d4:	460b      	mov	r3, r1
 80084d6:	18db      	adds	r3, r3, r3
 80084d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084da:	4613      	mov	r3, r2
 80084dc:	eb42 0303 	adc.w	r3, r2, r3
 80084e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084ea:	f7f8 fbd5 	bl	8000c98 <__aeabi_uldivmod>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <UART_SetConfig+0x2d4>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	2164      	movs	r1, #100	; 0x64
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	3332      	adds	r3, #50	; 0x32
 8008506:	4a08      	ldr	r2, [pc, #32]	; (8008528 <UART_SetConfig+0x2d4>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	f003 0207 	and.w	r2, r3, #7
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4422      	add	r2, r4
 800851a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800851c:	e105      	b.n	800872a <UART_SetConfig+0x4d6>
 800851e:	bf00      	nop
 8008520:	40011000 	.word	0x40011000
 8008524:	40011400 	.word	0x40011400
 8008528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800852c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008530:	2200      	movs	r2, #0
 8008532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800853a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800853e:	4642      	mov	r2, r8
 8008540:	464b      	mov	r3, r9
 8008542:	1891      	adds	r1, r2, r2
 8008544:	6239      	str	r1, [r7, #32]
 8008546:	415b      	adcs	r3, r3
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
 800854a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800854e:	4641      	mov	r1, r8
 8008550:	1854      	adds	r4, r2, r1
 8008552:	4649      	mov	r1, r9
 8008554:	eb43 0501 	adc.w	r5, r3, r1
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	00eb      	lsls	r3, r5, #3
 8008562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008566:	00e2      	lsls	r2, r4, #3
 8008568:	4614      	mov	r4, r2
 800856a:	461d      	mov	r5, r3
 800856c:	4643      	mov	r3, r8
 800856e:	18e3      	adds	r3, r4, r3
 8008570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008574:	464b      	mov	r3, r9
 8008576:	eb45 0303 	adc.w	r3, r5, r3
 800857a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800858a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800859a:	4629      	mov	r1, r5
 800859c:	008b      	lsls	r3, r1, #2
 800859e:	4621      	mov	r1, r4
 80085a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085a4:	4621      	mov	r1, r4
 80085a6:	008a      	lsls	r2, r1, #2
 80085a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085ac:	f7f8 fb74 	bl	8000c98 <__aeabi_uldivmod>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4b60      	ldr	r3, [pc, #384]	; (8008738 <UART_SetConfig+0x4e4>)
 80085b6:	fba3 2302 	umull	r2, r3, r3, r2
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	011c      	lsls	r4, r3, #4
 80085be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085d0:	4642      	mov	r2, r8
 80085d2:	464b      	mov	r3, r9
 80085d4:	1891      	adds	r1, r2, r2
 80085d6:	61b9      	str	r1, [r7, #24]
 80085d8:	415b      	adcs	r3, r3
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085e0:	4641      	mov	r1, r8
 80085e2:	1851      	adds	r1, r2, r1
 80085e4:	6139      	str	r1, [r7, #16]
 80085e6:	4649      	mov	r1, r9
 80085e8:	414b      	adcs	r3, r1
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085f8:	4659      	mov	r1, fp
 80085fa:	00cb      	lsls	r3, r1, #3
 80085fc:	4651      	mov	r1, sl
 80085fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008602:	4651      	mov	r1, sl
 8008604:	00ca      	lsls	r2, r1, #3
 8008606:	4610      	mov	r0, r2
 8008608:	4619      	mov	r1, r3
 800860a:	4603      	mov	r3, r0
 800860c:	4642      	mov	r2, r8
 800860e:	189b      	adds	r3, r3, r2
 8008610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008614:	464b      	mov	r3, r9
 8008616:	460a      	mov	r2, r1
 8008618:	eb42 0303 	adc.w	r3, r2, r3
 800861c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	67bb      	str	r3, [r7, #120]	; 0x78
 800862a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800862c:	f04f 0200 	mov.w	r2, #0
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008638:	4649      	mov	r1, r9
 800863a:	008b      	lsls	r3, r1, #2
 800863c:	4641      	mov	r1, r8
 800863e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008642:	4641      	mov	r1, r8
 8008644:	008a      	lsls	r2, r1, #2
 8008646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800864a:	f7f8 fb25 	bl	8000c98 <__aeabi_uldivmod>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4b39      	ldr	r3, [pc, #228]	; (8008738 <UART_SetConfig+0x4e4>)
 8008654:	fba3 1302 	umull	r1, r3, r3, r2
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	2164      	movs	r1, #100	; 0x64
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	3332      	adds	r3, #50	; 0x32
 8008666:	4a34      	ldr	r2, [pc, #208]	; (8008738 <UART_SetConfig+0x4e4>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008672:	441c      	add	r4, r3
 8008674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008678:	2200      	movs	r2, #0
 800867a:	673b      	str	r3, [r7, #112]	; 0x70
 800867c:	677a      	str	r2, [r7, #116]	; 0x74
 800867e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008682:	4642      	mov	r2, r8
 8008684:	464b      	mov	r3, r9
 8008686:	1891      	adds	r1, r2, r2
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	415b      	adcs	r3, r3
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008692:	4641      	mov	r1, r8
 8008694:	1851      	adds	r1, r2, r1
 8008696:	6039      	str	r1, [r7, #0]
 8008698:	4649      	mov	r1, r9
 800869a:	414b      	adcs	r3, r1
 800869c:	607b      	str	r3, [r7, #4]
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	f04f 0300 	mov.w	r3, #0
 80086a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086aa:	4659      	mov	r1, fp
 80086ac:	00cb      	lsls	r3, r1, #3
 80086ae:	4651      	mov	r1, sl
 80086b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086b4:	4651      	mov	r1, sl
 80086b6:	00ca      	lsls	r2, r1, #3
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	4603      	mov	r3, r0
 80086be:	4642      	mov	r2, r8
 80086c0:	189b      	adds	r3, r3, r2
 80086c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80086c4:	464b      	mov	r3, r9
 80086c6:	460a      	mov	r2, r1
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	663b      	str	r3, [r7, #96]	; 0x60
 80086d8:	667a      	str	r2, [r7, #100]	; 0x64
 80086da:	f04f 0200 	mov.w	r2, #0
 80086de:	f04f 0300 	mov.w	r3, #0
 80086e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086e6:	4649      	mov	r1, r9
 80086e8:	008b      	lsls	r3, r1, #2
 80086ea:	4641      	mov	r1, r8
 80086ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086f0:	4641      	mov	r1, r8
 80086f2:	008a      	lsls	r2, r1, #2
 80086f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086f8:	f7f8 face 	bl	8000c98 <__aeabi_uldivmod>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <UART_SetConfig+0x4e4>)
 8008702:	fba3 1302 	umull	r1, r3, r3, r2
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	2164      	movs	r1, #100	; 0x64
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	3332      	adds	r3, #50	; 0x32
 8008714:	4a08      	ldr	r2, [pc, #32]	; (8008738 <UART_SetConfig+0x4e4>)
 8008716:	fba2 2303 	umull	r2, r3, r2, r3
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4422      	add	r2, r4
 8008728:	609a      	str	r2, [r3, #8]
}
 800872a:	bf00      	nop
 800872c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008730:	46bd      	mov	sp, r7
 8008732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008736:	bf00      	nop
 8008738:	51eb851f 	.word	0x51eb851f

0800873c <atoi>:
 800873c:	220a      	movs	r2, #10
 800873e:	2100      	movs	r1, #0
 8008740:	f000 bd2c 	b.w	800919c <strtol>

08008744 <__errno>:
 8008744:	4b01      	ldr	r3, [pc, #4]	; (800874c <__errno+0x8>)
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000010 	.word	0x20000010

08008750 <__libc_init_array>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4d0d      	ldr	r5, [pc, #52]	; (8008788 <__libc_init_array+0x38>)
 8008754:	4c0d      	ldr	r4, [pc, #52]	; (800878c <__libc_init_array+0x3c>)
 8008756:	1b64      	subs	r4, r4, r5
 8008758:	10a4      	asrs	r4, r4, #2
 800875a:	2600      	movs	r6, #0
 800875c:	42a6      	cmp	r6, r4
 800875e:	d109      	bne.n	8008774 <__libc_init_array+0x24>
 8008760:	4d0b      	ldr	r5, [pc, #44]	; (8008790 <__libc_init_array+0x40>)
 8008762:	4c0c      	ldr	r4, [pc, #48]	; (8008794 <__libc_init_array+0x44>)
 8008764:	f002 fdc2 	bl	800b2ec <_init>
 8008768:	1b64      	subs	r4, r4, r5
 800876a:	10a4      	asrs	r4, r4, #2
 800876c:	2600      	movs	r6, #0
 800876e:	42a6      	cmp	r6, r4
 8008770:	d105      	bne.n	800877e <__libc_init_array+0x2e>
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	f855 3b04 	ldr.w	r3, [r5], #4
 8008778:	4798      	blx	r3
 800877a:	3601      	adds	r6, #1
 800877c:	e7ee      	b.n	800875c <__libc_init_array+0xc>
 800877e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008782:	4798      	blx	r3
 8008784:	3601      	adds	r6, #1
 8008786:	e7f2      	b.n	800876e <__libc_init_array+0x1e>
 8008788:	0800b844 	.word	0x0800b844
 800878c:	0800b844 	.word	0x0800b844
 8008790:	0800b844 	.word	0x0800b844
 8008794:	0800b848 	.word	0x0800b848

08008798 <memcpy>:
 8008798:	440a      	add	r2, r1
 800879a:	4291      	cmp	r1, r2
 800879c:	f100 33ff 	add.w	r3, r0, #4294967295
 80087a0:	d100      	bne.n	80087a4 <memcpy+0xc>
 80087a2:	4770      	bx	lr
 80087a4:	b510      	push	{r4, lr}
 80087a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ae:	4291      	cmp	r1, r2
 80087b0:	d1f9      	bne.n	80087a6 <memcpy+0xe>
 80087b2:	bd10      	pop	{r4, pc}

080087b4 <memset>:
 80087b4:	4402      	add	r2, r0
 80087b6:	4603      	mov	r3, r0
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d100      	bne.n	80087be <memset+0xa>
 80087bc:	4770      	bx	lr
 80087be:	f803 1b01 	strb.w	r1, [r3], #1
 80087c2:	e7f9      	b.n	80087b8 <memset+0x4>

080087c4 <__cvt>:
 80087c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	ec55 4b10 	vmov	r4, r5, d0
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	460e      	mov	r6, r1
 80087d0:	4619      	mov	r1, r3
 80087d2:	462b      	mov	r3, r5
 80087d4:	bfbb      	ittet	lt
 80087d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087da:	461d      	movlt	r5, r3
 80087dc:	2300      	movge	r3, #0
 80087de:	232d      	movlt	r3, #45	; 0x2d
 80087e0:	700b      	strb	r3, [r1, #0]
 80087e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087e8:	4691      	mov	r9, r2
 80087ea:	f023 0820 	bic.w	r8, r3, #32
 80087ee:	bfbc      	itt	lt
 80087f0:	4622      	movlt	r2, r4
 80087f2:	4614      	movlt	r4, r2
 80087f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087f8:	d005      	beq.n	8008806 <__cvt+0x42>
 80087fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087fe:	d100      	bne.n	8008802 <__cvt+0x3e>
 8008800:	3601      	adds	r6, #1
 8008802:	2102      	movs	r1, #2
 8008804:	e000      	b.n	8008808 <__cvt+0x44>
 8008806:	2103      	movs	r1, #3
 8008808:	ab03      	add	r3, sp, #12
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	ab02      	add	r3, sp, #8
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	ec45 4b10 	vmov	d0, r4, r5
 8008814:	4653      	mov	r3, sl
 8008816:	4632      	mov	r2, r6
 8008818:	f000 fd56 	bl	80092c8 <_dtoa_r>
 800881c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008820:	4607      	mov	r7, r0
 8008822:	d102      	bne.n	800882a <__cvt+0x66>
 8008824:	f019 0f01 	tst.w	r9, #1
 8008828:	d022      	beq.n	8008870 <__cvt+0xac>
 800882a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800882e:	eb07 0906 	add.w	r9, r7, r6
 8008832:	d110      	bne.n	8008856 <__cvt+0x92>
 8008834:	783b      	ldrb	r3, [r7, #0]
 8008836:	2b30      	cmp	r3, #48	; 0x30
 8008838:	d10a      	bne.n	8008850 <__cvt+0x8c>
 800883a:	2200      	movs	r2, #0
 800883c:	2300      	movs	r3, #0
 800883e:	4620      	mov	r0, r4
 8008840:	4629      	mov	r1, r5
 8008842:	f7f8 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8008846:	b918      	cbnz	r0, 8008850 <__cvt+0x8c>
 8008848:	f1c6 0601 	rsb	r6, r6, #1
 800884c:	f8ca 6000 	str.w	r6, [sl]
 8008850:	f8da 3000 	ldr.w	r3, [sl]
 8008854:	4499      	add	r9, r3
 8008856:	2200      	movs	r2, #0
 8008858:	2300      	movs	r3, #0
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	f7f8 f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008862:	b108      	cbz	r0, 8008868 <__cvt+0xa4>
 8008864:	f8cd 900c 	str.w	r9, [sp, #12]
 8008868:	2230      	movs	r2, #48	; 0x30
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	454b      	cmp	r3, r9
 800886e:	d307      	bcc.n	8008880 <__cvt+0xbc>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008874:	1bdb      	subs	r3, r3, r7
 8008876:	4638      	mov	r0, r7
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	b004      	add	sp, #16
 800887c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008880:	1c59      	adds	r1, r3, #1
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e7f0      	b.n	800886a <__cvt+0xa6>

08008888 <__exponent>:
 8008888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888a:	4603      	mov	r3, r0
 800888c:	2900      	cmp	r1, #0
 800888e:	bfb8      	it	lt
 8008890:	4249      	neglt	r1, r1
 8008892:	f803 2b02 	strb.w	r2, [r3], #2
 8008896:	bfb4      	ite	lt
 8008898:	222d      	movlt	r2, #45	; 0x2d
 800889a:	222b      	movge	r2, #43	; 0x2b
 800889c:	2909      	cmp	r1, #9
 800889e:	7042      	strb	r2, [r0, #1]
 80088a0:	dd2a      	ble.n	80088f8 <__exponent+0x70>
 80088a2:	f10d 0407 	add.w	r4, sp, #7
 80088a6:	46a4      	mov	ip, r4
 80088a8:	270a      	movs	r7, #10
 80088aa:	46a6      	mov	lr, r4
 80088ac:	460a      	mov	r2, r1
 80088ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80088b2:	fb07 1516 	mls	r5, r7, r6, r1
 80088b6:	3530      	adds	r5, #48	; 0x30
 80088b8:	2a63      	cmp	r2, #99	; 0x63
 80088ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80088be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088c2:	4631      	mov	r1, r6
 80088c4:	dcf1      	bgt.n	80088aa <__exponent+0x22>
 80088c6:	3130      	adds	r1, #48	; 0x30
 80088c8:	f1ae 0502 	sub.w	r5, lr, #2
 80088cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088d0:	1c44      	adds	r4, r0, #1
 80088d2:	4629      	mov	r1, r5
 80088d4:	4561      	cmp	r1, ip
 80088d6:	d30a      	bcc.n	80088ee <__exponent+0x66>
 80088d8:	f10d 0209 	add.w	r2, sp, #9
 80088dc:	eba2 020e 	sub.w	r2, r2, lr
 80088e0:	4565      	cmp	r5, ip
 80088e2:	bf88      	it	hi
 80088e4:	2200      	movhi	r2, #0
 80088e6:	4413      	add	r3, r2
 80088e8:	1a18      	subs	r0, r3, r0
 80088ea:	b003      	add	sp, #12
 80088ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80088f6:	e7ed      	b.n	80088d4 <__exponent+0x4c>
 80088f8:	2330      	movs	r3, #48	; 0x30
 80088fa:	3130      	adds	r1, #48	; 0x30
 80088fc:	7083      	strb	r3, [r0, #2]
 80088fe:	70c1      	strb	r1, [r0, #3]
 8008900:	1d03      	adds	r3, r0, #4
 8008902:	e7f1      	b.n	80088e8 <__exponent+0x60>

08008904 <_printf_float>:
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	ed2d 8b02 	vpush	{d8}
 800890c:	b08d      	sub	sp, #52	; 0x34
 800890e:	460c      	mov	r4, r1
 8008910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008914:	4616      	mov	r6, r2
 8008916:	461f      	mov	r7, r3
 8008918:	4605      	mov	r5, r0
 800891a:	f001 fac3 	bl	8009ea4 <_localeconv_r>
 800891e:	f8d0 a000 	ldr.w	sl, [r0]
 8008922:	4650      	mov	r0, sl
 8008924:	f7f7 fc5c 	bl	80001e0 <strlen>
 8008928:	2300      	movs	r3, #0
 800892a:	930a      	str	r3, [sp, #40]	; 0x28
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	f8d8 3000 	ldr.w	r3, [r8]
 8008934:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008938:	3307      	adds	r3, #7
 800893a:	f023 0307 	bic.w	r3, r3, #7
 800893e:	f103 0208 	add.w	r2, r3, #8
 8008942:	f8c8 2000 	str.w	r2, [r8]
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800894e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008956:	9307      	str	r3, [sp, #28]
 8008958:	f8cd 8018 	str.w	r8, [sp, #24]
 800895c:	ee08 0a10 	vmov	s16, r0
 8008960:	4b9f      	ldr	r3, [pc, #636]	; (8008be0 <_printf_float+0x2dc>)
 8008962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	f7f8 f8e7 	bl	8000b3c <__aeabi_dcmpun>
 800896e:	bb88      	cbnz	r0, 80089d4 <_printf_float+0xd0>
 8008970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008974:	4b9a      	ldr	r3, [pc, #616]	; (8008be0 <_printf_float+0x2dc>)
 8008976:	f04f 32ff 	mov.w	r2, #4294967295
 800897a:	f7f8 f8c1 	bl	8000b00 <__aeabi_dcmple>
 800897e:	bb48      	cbnz	r0, 80089d4 <_printf_float+0xd0>
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	4640      	mov	r0, r8
 8008986:	4649      	mov	r1, r9
 8008988:	f7f8 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800898c:	b110      	cbz	r0, 8008994 <_printf_float+0x90>
 800898e:	232d      	movs	r3, #45	; 0x2d
 8008990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008994:	4b93      	ldr	r3, [pc, #588]	; (8008be4 <_printf_float+0x2e0>)
 8008996:	4894      	ldr	r0, [pc, #592]	; (8008be8 <_printf_float+0x2e4>)
 8008998:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800899c:	bf94      	ite	ls
 800899e:	4698      	movls	r8, r3
 80089a0:	4680      	movhi	r8, r0
 80089a2:	2303      	movs	r3, #3
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	f023 0204 	bic.w	r2, r3, #4
 80089ac:	6022      	str	r2, [r4, #0]
 80089ae:	f04f 0900 	mov.w	r9, #0
 80089b2:	9700      	str	r7, [sp, #0]
 80089b4:	4633      	mov	r3, r6
 80089b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 f9d8 	bl	8008d70 <_printf_common>
 80089c0:	3001      	adds	r0, #1
 80089c2:	f040 8090 	bne.w	8008ae6 <_printf_float+0x1e2>
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	b00d      	add	sp, #52	; 0x34
 80089cc:	ecbd 8b02 	vpop	{d8}
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	4640      	mov	r0, r8
 80089da:	4649      	mov	r1, r9
 80089dc:	f7f8 f8ae 	bl	8000b3c <__aeabi_dcmpun>
 80089e0:	b140      	cbz	r0, 80089f4 <_printf_float+0xf0>
 80089e2:	464b      	mov	r3, r9
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfbc      	itt	lt
 80089e8:	232d      	movlt	r3, #45	; 0x2d
 80089ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089ee:	487f      	ldr	r0, [pc, #508]	; (8008bec <_printf_float+0x2e8>)
 80089f0:	4b7f      	ldr	r3, [pc, #508]	; (8008bf0 <_printf_float+0x2ec>)
 80089f2:	e7d1      	b.n	8008998 <_printf_float+0x94>
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089fa:	9206      	str	r2, [sp, #24]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	d13f      	bne.n	8008a80 <_printf_float+0x17c>
 8008a00:	2306      	movs	r3, #6
 8008a02:	6063      	str	r3, [r4, #4]
 8008a04:	9b05      	ldr	r3, [sp, #20]
 8008a06:	6861      	ldr	r1, [r4, #4]
 8008a08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	ab0a      	add	r3, sp, #40	; 0x28
 8008a12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a16:	ab09      	add	r3, sp, #36	; 0x24
 8008a18:	ec49 8b10 	vmov	d0, r8, r9
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a24:	4628      	mov	r0, r5
 8008a26:	f7ff fecd 	bl	80087c4 <__cvt>
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2e:	2b47      	cmp	r3, #71	; 0x47
 8008a30:	4680      	mov	r8, r0
 8008a32:	d108      	bne.n	8008a46 <_printf_float+0x142>
 8008a34:	1cc8      	adds	r0, r1, #3
 8008a36:	db02      	blt.n	8008a3e <_printf_float+0x13a>
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	dd41      	ble.n	8008ac2 <_printf_float+0x1be>
 8008a3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a42:	fa5f fb8b 	uxtb.w	fp, fp
 8008a46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a4a:	d820      	bhi.n	8008a8e <_printf_float+0x18a>
 8008a4c:	3901      	subs	r1, #1
 8008a4e:	465a      	mov	r2, fp
 8008a50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a54:	9109      	str	r1, [sp, #36]	; 0x24
 8008a56:	f7ff ff17 	bl	8008888 <__exponent>
 8008a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a5c:	1813      	adds	r3, r2, r0
 8008a5e:	2a01      	cmp	r2, #1
 8008a60:	4681      	mov	r9, r0
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	dc02      	bgt.n	8008a6c <_printf_float+0x168>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	07d2      	lsls	r2, r2, #31
 8008a6a:	d501      	bpl.n	8008a70 <_printf_float+0x16c>
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d09c      	beq.n	80089b2 <_printf_float+0xae>
 8008a78:	232d      	movs	r3, #45	; 0x2d
 8008a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a7e:	e798      	b.n	80089b2 <_printf_float+0xae>
 8008a80:	9a06      	ldr	r2, [sp, #24]
 8008a82:	2a47      	cmp	r2, #71	; 0x47
 8008a84:	d1be      	bne.n	8008a04 <_printf_float+0x100>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1bc      	bne.n	8008a04 <_printf_float+0x100>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e7b9      	b.n	8008a02 <_printf_float+0xfe>
 8008a8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a92:	d118      	bne.n	8008ac6 <_printf_float+0x1c2>
 8008a94:	2900      	cmp	r1, #0
 8008a96:	6863      	ldr	r3, [r4, #4]
 8008a98:	dd0b      	ble.n	8008ab2 <_printf_float+0x1ae>
 8008a9a:	6121      	str	r1, [r4, #16]
 8008a9c:	b913      	cbnz	r3, 8008aa4 <_printf_float+0x1a0>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	07d0      	lsls	r0, r2, #31
 8008aa2:	d502      	bpl.n	8008aaa <_printf_float+0x1a6>
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	440b      	add	r3, r1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8008aac:	f04f 0900 	mov.w	r9, #0
 8008ab0:	e7de      	b.n	8008a70 <_printf_float+0x16c>
 8008ab2:	b913      	cbnz	r3, 8008aba <_printf_float+0x1b6>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	07d2      	lsls	r2, r2, #31
 8008ab8:	d501      	bpl.n	8008abe <_printf_float+0x1ba>
 8008aba:	3302      	adds	r3, #2
 8008abc:	e7f4      	b.n	8008aa8 <_printf_float+0x1a4>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7f2      	b.n	8008aa8 <_printf_float+0x1a4>
 8008ac2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	db05      	blt.n	8008ad8 <_printf_float+0x1d4>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	6121      	str	r1, [r4, #16]
 8008ad0:	07d8      	lsls	r0, r3, #31
 8008ad2:	d5ea      	bpl.n	8008aaa <_printf_float+0x1a6>
 8008ad4:	1c4b      	adds	r3, r1, #1
 8008ad6:	e7e7      	b.n	8008aa8 <_printf_float+0x1a4>
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	bfd4      	ite	le
 8008adc:	f1c1 0202 	rsble	r2, r1, #2
 8008ae0:	2201      	movgt	r2, #1
 8008ae2:	4413      	add	r3, r2
 8008ae4:	e7e0      	b.n	8008aa8 <_printf_float+0x1a4>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	055a      	lsls	r2, r3, #21
 8008aea:	d407      	bmi.n	8008afc <_printf_float+0x1f8>
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	4642      	mov	r2, r8
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	d12c      	bne.n	8008b54 <_printf_float+0x250>
 8008afa:	e764      	b.n	80089c6 <_printf_float+0xc2>
 8008afc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b00:	f240 80e0 	bls.w	8008cc4 <_printf_float+0x3c0>
 8008b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f7f7 ffe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d034      	beq.n	8008b7e <_printf_float+0x27a>
 8008b14:	4a37      	ldr	r2, [pc, #220]	; (8008bf4 <_printf_float+0x2f0>)
 8008b16:	2301      	movs	r3, #1
 8008b18:	4631      	mov	r1, r6
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	47b8      	blx	r7
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f43f af51 	beq.w	80089c6 <_printf_float+0xc2>
 8008b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	db02      	blt.n	8008b32 <_printf_float+0x22e>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	07d8      	lsls	r0, r3, #31
 8008b30:	d510      	bpl.n	8008b54 <_printf_float+0x250>
 8008b32:	ee18 3a10 	vmov	r3, s16
 8008b36:	4652      	mov	r2, sl
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f af41 	beq.w	80089c6 <_printf_float+0xc2>
 8008b44:	f04f 0800 	mov.w	r8, #0
 8008b48:	f104 091a 	add.w	r9, r4, #26
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4543      	cmp	r3, r8
 8008b52:	dc09      	bgt.n	8008b68 <_printf_float+0x264>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	079b      	lsls	r3, r3, #30
 8008b58:	f100 8105 	bmi.w	8008d66 <_printf_float+0x462>
 8008b5c:	68e0      	ldr	r0, [r4, #12]
 8008b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b60:	4298      	cmp	r0, r3
 8008b62:	bfb8      	it	lt
 8008b64:	4618      	movlt	r0, r3
 8008b66:	e730      	b.n	80089ca <_printf_float+0xc6>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	464a      	mov	r2, r9
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f af27 	beq.w	80089c6 <_printf_float+0xc2>
 8008b78:	f108 0801 	add.w	r8, r8, #1
 8008b7c:	e7e6      	b.n	8008b4c <_printf_float+0x248>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dc39      	bgt.n	8008bf8 <_printf_float+0x2f4>
 8008b84:	4a1b      	ldr	r2, [pc, #108]	; (8008bf4 <_printf_float+0x2f0>)
 8008b86:	2301      	movs	r3, #1
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f af19 	beq.w	80089c6 <_printf_float+0xc2>
 8008b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	d102      	bne.n	8008ba2 <_printf_float+0x29e>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d5d8      	bpl.n	8008b54 <_printf_float+0x250>
 8008ba2:	ee18 3a10 	vmov	r3, s16
 8008ba6:	4652      	mov	r2, sl
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f af09 	beq.w	80089c6 <_printf_float+0xc2>
 8008bb4:	f04f 0900 	mov.w	r9, #0
 8008bb8:	f104 0a1a 	add.w	sl, r4, #26
 8008bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbe:	425b      	negs	r3, r3
 8008bc0:	454b      	cmp	r3, r9
 8008bc2:	dc01      	bgt.n	8008bc8 <_printf_float+0x2c4>
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc6:	e792      	b.n	8008aee <_printf_float+0x1ea>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4652      	mov	r2, sl
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f aef7 	beq.w	80089c6 <_printf_float+0xc2>
 8008bd8:	f109 0901 	add.w	r9, r9, #1
 8008bdc:	e7ee      	b.n	8008bbc <_printf_float+0x2b8>
 8008bde:	bf00      	nop
 8008be0:	7fefffff 	.word	0x7fefffff
 8008be4:	0800b460 	.word	0x0800b460
 8008be8:	0800b464 	.word	0x0800b464
 8008bec:	0800b46c 	.word	0x0800b46c
 8008bf0:	0800b468 	.word	0x0800b468
 8008bf4:	0800b470 	.word	0x0800b470
 8008bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	bfa8      	it	ge
 8008c00:	461a      	movge	r2, r3
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	4691      	mov	r9, r2
 8008c06:	dc37      	bgt.n	8008c78 <_printf_float+0x374>
 8008c08:	f04f 0b00 	mov.w	fp, #0
 8008c0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c10:	f104 021a 	add.w	r2, r4, #26
 8008c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c16:	9305      	str	r3, [sp, #20]
 8008c18:	eba3 0309 	sub.w	r3, r3, r9
 8008c1c:	455b      	cmp	r3, fp
 8008c1e:	dc33      	bgt.n	8008c88 <_printf_float+0x384>
 8008c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c24:	429a      	cmp	r2, r3
 8008c26:	db3b      	blt.n	8008ca0 <_printf_float+0x39c>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	07da      	lsls	r2, r3, #31
 8008c2c:	d438      	bmi.n	8008ca0 <_printf_float+0x39c>
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c30:	9a05      	ldr	r2, [sp, #20]
 8008c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c34:	1a9a      	subs	r2, r3, r2
 8008c36:	eba3 0901 	sub.w	r9, r3, r1
 8008c3a:	4591      	cmp	r9, r2
 8008c3c:	bfa8      	it	ge
 8008c3e:	4691      	movge	r9, r2
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	dc35      	bgt.n	8008cb2 <_printf_float+0x3ae>
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c4e:	f104 0a1a 	add.w	sl, r4, #26
 8008c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	eba3 0309 	sub.w	r3, r3, r9
 8008c5c:	4543      	cmp	r3, r8
 8008c5e:	f77f af79 	ble.w	8008b54 <_printf_float+0x250>
 8008c62:	2301      	movs	r3, #1
 8008c64:	4652      	mov	r2, sl
 8008c66:	4631      	mov	r1, r6
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b8      	blx	r7
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f43f aeaa 	beq.w	80089c6 <_printf_float+0xc2>
 8008c72:	f108 0801 	add.w	r8, r8, #1
 8008c76:	e7ec      	b.n	8008c52 <_printf_float+0x34e>
 8008c78:	4613      	mov	r3, r2
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	d1c0      	bne.n	8008c08 <_printf_float+0x304>
 8008c86:	e69e      	b.n	80089c6 <_printf_float+0xc2>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	9205      	str	r2, [sp, #20]
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f ae97 	beq.w	80089c6 <_printf_float+0xc2>
 8008c98:	9a05      	ldr	r2, [sp, #20]
 8008c9a:	f10b 0b01 	add.w	fp, fp, #1
 8008c9e:	e7b9      	b.n	8008c14 <_printf_float+0x310>
 8008ca0:	ee18 3a10 	vmov	r3, s16
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1be      	bne.n	8008c2e <_printf_float+0x32a>
 8008cb0:	e689      	b.n	80089c6 <_printf_float+0xc2>
 8008cb2:	9a05      	ldr	r2, [sp, #20]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	4442      	add	r2, r8
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d1c1      	bne.n	8008c46 <_printf_float+0x342>
 8008cc2:	e680      	b.n	80089c6 <_printf_float+0xc2>
 8008cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc6:	2a01      	cmp	r2, #1
 8008cc8:	dc01      	bgt.n	8008cce <_printf_float+0x3ca>
 8008cca:	07db      	lsls	r3, r3, #31
 8008ccc:	d538      	bpl.n	8008d40 <_printf_float+0x43c>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f ae74 	beq.w	80089c6 <_printf_float+0xc2>
 8008cde:	ee18 3a10 	vmov	r3, s16
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	f43f ae6b 	beq.w	80089c6 <_printf_float+0xc2>
 8008cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f7f7 feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cfc:	b9d8      	cbnz	r0, 8008d36 <_printf_float+0x432>
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	f108 0201 	add.w	r2, r8, #1
 8008d04:	3b01      	subs	r3, #1
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d10e      	bne.n	8008d2e <_printf_float+0x42a>
 8008d10:	e659      	b.n	80089c6 <_printf_float+0xc2>
 8008d12:	2301      	movs	r3, #1
 8008d14:	4652      	mov	r2, sl
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae52 	beq.w	80089c6 <_printf_float+0xc2>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4543      	cmp	r3, r8
 8008d2c:	dcf1      	bgt.n	8008d12 <_printf_float+0x40e>
 8008d2e:	464b      	mov	r3, r9
 8008d30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d34:	e6dc      	b.n	8008af0 <_printf_float+0x1ec>
 8008d36:	f04f 0800 	mov.w	r8, #0
 8008d3a:	f104 0a1a 	add.w	sl, r4, #26
 8008d3e:	e7f2      	b.n	8008d26 <_printf_float+0x422>
 8008d40:	2301      	movs	r3, #1
 8008d42:	4642      	mov	r2, r8
 8008d44:	e7df      	b.n	8008d06 <_printf_float+0x402>
 8008d46:	2301      	movs	r3, #1
 8008d48:	464a      	mov	r2, r9
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae38 	beq.w	80089c6 <_printf_float+0xc2>
 8008d56:	f108 0801 	add.w	r8, r8, #1
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d5e:	1a5b      	subs	r3, r3, r1
 8008d60:	4543      	cmp	r3, r8
 8008d62:	dcf0      	bgt.n	8008d46 <_printf_float+0x442>
 8008d64:	e6fa      	b.n	8008b5c <_printf_float+0x258>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	f104 0919 	add.w	r9, r4, #25
 8008d6e:	e7f4      	b.n	8008d5a <_printf_float+0x456>

08008d70 <_printf_common>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	4616      	mov	r6, r2
 8008d76:	4699      	mov	r9, r3
 8008d78:	688a      	ldr	r2, [r1, #8]
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d80:	4293      	cmp	r3, r2
 8008d82:	bfb8      	it	lt
 8008d84:	4613      	movlt	r3, r2
 8008d86:	6033      	str	r3, [r6, #0]
 8008d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b10a      	cbz	r2, 8008d96 <_printf_common+0x26>
 8008d92:	3301      	adds	r3, #1
 8008d94:	6033      	str	r3, [r6, #0]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	0699      	lsls	r1, r3, #26
 8008d9a:	bf42      	ittt	mi
 8008d9c:	6833      	ldrmi	r3, [r6, #0]
 8008d9e:	3302      	addmi	r3, #2
 8008da0:	6033      	strmi	r3, [r6, #0]
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	f015 0506 	ands.w	r5, r5, #6
 8008da8:	d106      	bne.n	8008db8 <_printf_common+0x48>
 8008daa:	f104 0a19 	add.w	sl, r4, #25
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	6832      	ldr	r2, [r6, #0]
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	42ab      	cmp	r3, r5
 8008db6:	dc26      	bgt.n	8008e06 <_printf_common+0x96>
 8008db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dbc:	1e13      	subs	r3, r2, #0
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	bf18      	it	ne
 8008dc2:	2301      	movne	r3, #1
 8008dc4:	0692      	lsls	r2, r2, #26
 8008dc6:	d42b      	bmi.n	8008e20 <_printf_common+0xb0>
 8008dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dcc:	4649      	mov	r1, r9
 8008dce:	4638      	mov	r0, r7
 8008dd0:	47c0      	blx	r8
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d01e      	beq.n	8008e14 <_printf_common+0xa4>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	68e5      	ldr	r5, [r4, #12]
 8008dda:	6832      	ldr	r2, [r6, #0]
 8008ddc:	f003 0306 	and.w	r3, r3, #6
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	bf08      	it	eq
 8008de4:	1aad      	subeq	r5, r5, r2
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	bf0c      	ite	eq
 8008dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df0:	2500      	movne	r5, #0
 8008df2:	4293      	cmp	r3, r2
 8008df4:	bfc4      	itt	gt
 8008df6:	1a9b      	subgt	r3, r3, r2
 8008df8:	18ed      	addgt	r5, r5, r3
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	341a      	adds	r4, #26
 8008dfe:	42b5      	cmp	r5, r6
 8008e00:	d11a      	bne.n	8008e38 <_printf_common+0xc8>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e008      	b.n	8008e18 <_printf_common+0xa8>
 8008e06:	2301      	movs	r3, #1
 8008e08:	4652      	mov	r2, sl
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	47c0      	blx	r8
 8008e10:	3001      	adds	r0, #1
 8008e12:	d103      	bne.n	8008e1c <_printf_common+0xac>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	e7c6      	b.n	8008dae <_printf_common+0x3e>
 8008e20:	18e1      	adds	r1, r4, r3
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	2030      	movs	r0, #48	; 0x30
 8008e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e2a:	4422      	add	r2, r4
 8008e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e34:	3302      	adds	r3, #2
 8008e36:	e7c7      	b.n	8008dc8 <_printf_common+0x58>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	4638      	mov	r0, r7
 8008e40:	47c0      	blx	r8
 8008e42:	3001      	adds	r0, #1
 8008e44:	d0e6      	beq.n	8008e14 <_printf_common+0xa4>
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7d9      	b.n	8008dfe <_printf_common+0x8e>
	...

08008e4c <_printf_i>:
 8008e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	7e0f      	ldrb	r7, [r1, #24]
 8008e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e54:	2f78      	cmp	r7, #120	; 0x78
 8008e56:	4691      	mov	r9, r2
 8008e58:	4680      	mov	r8, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	469a      	mov	sl, r3
 8008e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e62:	d807      	bhi.n	8008e74 <_printf_i+0x28>
 8008e64:	2f62      	cmp	r7, #98	; 0x62
 8008e66:	d80a      	bhi.n	8008e7e <_printf_i+0x32>
 8008e68:	2f00      	cmp	r7, #0
 8008e6a:	f000 80d8 	beq.w	800901e <_printf_i+0x1d2>
 8008e6e:	2f58      	cmp	r7, #88	; 0x58
 8008e70:	f000 80a3 	beq.w	8008fba <_printf_i+0x16e>
 8008e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e7c:	e03a      	b.n	8008ef4 <_printf_i+0xa8>
 8008e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e82:	2b15      	cmp	r3, #21
 8008e84:	d8f6      	bhi.n	8008e74 <_printf_i+0x28>
 8008e86:	a101      	add	r1, pc, #4	; (adr r1, 8008e8c <_printf_i+0x40>)
 8008e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e8c:	08008ee5 	.word	0x08008ee5
 8008e90:	08008ef9 	.word	0x08008ef9
 8008e94:	08008e75 	.word	0x08008e75
 8008e98:	08008e75 	.word	0x08008e75
 8008e9c:	08008e75 	.word	0x08008e75
 8008ea0:	08008e75 	.word	0x08008e75
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	08008e75 	.word	0x08008e75
 8008eac:	08008e75 	.word	0x08008e75
 8008eb0:	08008e75 	.word	0x08008e75
 8008eb4:	08008e75 	.word	0x08008e75
 8008eb8:	08009005 	.word	0x08009005
 8008ebc:	08008f29 	.word	0x08008f29
 8008ec0:	08008fe7 	.word	0x08008fe7
 8008ec4:	08008e75 	.word	0x08008e75
 8008ec8:	08008e75 	.word	0x08008e75
 8008ecc:	08009027 	.word	0x08009027
 8008ed0:	08008e75 	.word	0x08008e75
 8008ed4:	08008f29 	.word	0x08008f29
 8008ed8:	08008e75 	.word	0x08008e75
 8008edc:	08008e75 	.word	0x08008e75
 8008ee0:	08008fef 	.word	0x08008fef
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	1d1a      	adds	r2, r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	602a      	str	r2, [r5, #0]
 8008eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e0a3      	b.n	8009040 <_printf_i+0x1f4>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	6829      	ldr	r1, [r5, #0]
 8008efc:	0606      	lsls	r6, r0, #24
 8008efe:	f101 0304 	add.w	r3, r1, #4
 8008f02:	d50a      	bpl.n	8008f1a <_printf_i+0xce>
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	2e00      	cmp	r6, #0
 8008f0a:	da03      	bge.n	8008f14 <_printf_i+0xc8>
 8008f0c:	232d      	movs	r3, #45	; 0x2d
 8008f0e:	4276      	negs	r6, r6
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f14:	485e      	ldr	r0, [pc, #376]	; (8009090 <_printf_i+0x244>)
 8008f16:	230a      	movs	r3, #10
 8008f18:	e019      	b.n	8008f4e <_printf_i+0x102>
 8008f1a:	680e      	ldr	r6, [r1, #0]
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f22:	bf18      	it	ne
 8008f24:	b236      	sxthne	r6, r6
 8008f26:	e7ef      	b.n	8008f08 <_printf_i+0xbc>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	1d19      	adds	r1, r3, #4
 8008f2e:	6029      	str	r1, [r5, #0]
 8008f30:	0601      	lsls	r1, r0, #24
 8008f32:	d501      	bpl.n	8008f38 <_printf_i+0xec>
 8008f34:	681e      	ldr	r6, [r3, #0]
 8008f36:	e002      	b.n	8008f3e <_printf_i+0xf2>
 8008f38:	0646      	lsls	r6, r0, #25
 8008f3a:	d5fb      	bpl.n	8008f34 <_printf_i+0xe8>
 8008f3c:	881e      	ldrh	r6, [r3, #0]
 8008f3e:	4854      	ldr	r0, [pc, #336]	; (8009090 <_printf_i+0x244>)
 8008f40:	2f6f      	cmp	r7, #111	; 0x6f
 8008f42:	bf0c      	ite	eq
 8008f44:	2308      	moveq	r3, #8
 8008f46:	230a      	movne	r3, #10
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f4e:	6865      	ldr	r5, [r4, #4]
 8008f50:	60a5      	str	r5, [r4, #8]
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	bfa2      	ittt	ge
 8008f56:	6821      	ldrge	r1, [r4, #0]
 8008f58:	f021 0104 	bicge.w	r1, r1, #4
 8008f5c:	6021      	strge	r1, [r4, #0]
 8008f5e:	b90e      	cbnz	r6, 8008f64 <_printf_i+0x118>
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	d04d      	beq.n	8009000 <_printf_i+0x1b4>
 8008f64:	4615      	mov	r5, r2
 8008f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8008f6e:	5dc7      	ldrb	r7, [r0, r7]
 8008f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f74:	4637      	mov	r7, r6
 8008f76:	42bb      	cmp	r3, r7
 8008f78:	460e      	mov	r6, r1
 8008f7a:	d9f4      	bls.n	8008f66 <_printf_i+0x11a>
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d10b      	bne.n	8008f98 <_printf_i+0x14c>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07de      	lsls	r6, r3, #31
 8008f84:	d508      	bpl.n	8008f98 <_printf_i+0x14c>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	6861      	ldr	r1, [r4, #4]
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	bfde      	ittt	le
 8008f8e:	2330      	movle	r3, #48	; 0x30
 8008f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f98:	1b52      	subs	r2, r2, r5
 8008f9a:	6122      	str	r2, [r4, #16]
 8008f9c:	f8cd a000 	str.w	sl, [sp]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	aa03      	add	r2, sp, #12
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7ff fee2 	bl	8008d70 <_printf_common>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d14c      	bne.n	800904a <_printf_i+0x1fe>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	b004      	add	sp, #16
 8008fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fba:	4835      	ldr	r0, [pc, #212]	; (8009090 <_printf_i+0x244>)
 8008fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fc8:	6029      	str	r1, [r5, #0]
 8008fca:	061d      	lsls	r5, r3, #24
 8008fcc:	d514      	bpl.n	8008ff8 <_printf_i+0x1ac>
 8008fce:	07df      	lsls	r7, r3, #31
 8008fd0:	bf44      	itt	mi
 8008fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fd6:	6023      	strmi	r3, [r4, #0]
 8008fd8:	b91e      	cbnz	r6, 8008fe2 <_printf_i+0x196>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	f023 0320 	bic.w	r3, r3, #32
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	2310      	movs	r3, #16
 8008fe4:	e7b0      	b.n	8008f48 <_printf_i+0xfc>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	f043 0320 	orr.w	r3, r3, #32
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	2378      	movs	r3, #120	; 0x78
 8008ff0:	4828      	ldr	r0, [pc, #160]	; (8009094 <_printf_i+0x248>)
 8008ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ff6:	e7e3      	b.n	8008fc0 <_printf_i+0x174>
 8008ff8:	0659      	lsls	r1, r3, #25
 8008ffa:	bf48      	it	mi
 8008ffc:	b2b6      	uxthmi	r6, r6
 8008ffe:	e7e6      	b.n	8008fce <_printf_i+0x182>
 8009000:	4615      	mov	r5, r2
 8009002:	e7bb      	b.n	8008f7c <_printf_i+0x130>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	6826      	ldr	r6, [r4, #0]
 8009008:	6961      	ldr	r1, [r4, #20]
 800900a:	1d18      	adds	r0, r3, #4
 800900c:	6028      	str	r0, [r5, #0]
 800900e:	0635      	lsls	r5, r6, #24
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	d501      	bpl.n	8009018 <_printf_i+0x1cc>
 8009014:	6019      	str	r1, [r3, #0]
 8009016:	e002      	b.n	800901e <_printf_i+0x1d2>
 8009018:	0670      	lsls	r0, r6, #25
 800901a:	d5fb      	bpl.n	8009014 <_printf_i+0x1c8>
 800901c:	8019      	strh	r1, [r3, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	4615      	mov	r5, r2
 8009024:	e7ba      	b.n	8008f9c <_printf_i+0x150>
 8009026:	682b      	ldr	r3, [r5, #0]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	602a      	str	r2, [r5, #0]
 800902c:	681d      	ldr	r5, [r3, #0]
 800902e:	6862      	ldr	r2, [r4, #4]
 8009030:	2100      	movs	r1, #0
 8009032:	4628      	mov	r0, r5
 8009034:	f7f7 f8dc 	bl	80001f0 <memchr>
 8009038:	b108      	cbz	r0, 800903e <_printf_i+0x1f2>
 800903a:	1b40      	subs	r0, r0, r5
 800903c:	6060      	str	r0, [r4, #4]
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	2300      	movs	r3, #0
 8009044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009048:	e7a8      	b.n	8008f9c <_printf_i+0x150>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	462a      	mov	r2, r5
 800904e:	4649      	mov	r1, r9
 8009050:	4640      	mov	r0, r8
 8009052:	47d0      	blx	sl
 8009054:	3001      	adds	r0, #1
 8009056:	d0ab      	beq.n	8008fb0 <_printf_i+0x164>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	079b      	lsls	r3, r3, #30
 800905c:	d413      	bmi.n	8009086 <_printf_i+0x23a>
 800905e:	68e0      	ldr	r0, [r4, #12]
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	4298      	cmp	r0, r3
 8009064:	bfb8      	it	lt
 8009066:	4618      	movlt	r0, r3
 8009068:	e7a4      	b.n	8008fb4 <_printf_i+0x168>
 800906a:	2301      	movs	r3, #1
 800906c:	4632      	mov	r2, r6
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	47d0      	blx	sl
 8009074:	3001      	adds	r0, #1
 8009076:	d09b      	beq.n	8008fb0 <_printf_i+0x164>
 8009078:	3501      	adds	r5, #1
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	9903      	ldr	r1, [sp, #12]
 800907e:	1a5b      	subs	r3, r3, r1
 8009080:	42ab      	cmp	r3, r5
 8009082:	dcf2      	bgt.n	800906a <_printf_i+0x21e>
 8009084:	e7eb      	b.n	800905e <_printf_i+0x212>
 8009086:	2500      	movs	r5, #0
 8009088:	f104 0619 	add.w	r6, r4, #25
 800908c:	e7f5      	b.n	800907a <_printf_i+0x22e>
 800908e:	bf00      	nop
 8009090:	0800b472 	.word	0x0800b472
 8009094:	0800b483 	.word	0x0800b483

08009098 <_strtol_l.constprop.0>:
 8009098:	2b01      	cmp	r3, #1
 800909a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909e:	d001      	beq.n	80090a4 <_strtol_l.constprop.0+0xc>
 80090a0:	2b24      	cmp	r3, #36	; 0x24
 80090a2:	d906      	bls.n	80090b2 <_strtol_l.constprop.0+0x1a>
 80090a4:	f7ff fb4e 	bl	8008744 <__errno>
 80090a8:	2316      	movs	r3, #22
 80090aa:	6003      	str	r3, [r0, #0]
 80090ac:	2000      	movs	r0, #0
 80090ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009198 <_strtol_l.constprop.0+0x100>
 80090b6:	460d      	mov	r5, r1
 80090b8:	462e      	mov	r6, r5
 80090ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80090c2:	f017 0708 	ands.w	r7, r7, #8
 80090c6:	d1f7      	bne.n	80090b8 <_strtol_l.constprop.0+0x20>
 80090c8:	2c2d      	cmp	r4, #45	; 0x2d
 80090ca:	d132      	bne.n	8009132 <_strtol_l.constprop.0+0x9a>
 80090cc:	782c      	ldrb	r4, [r5, #0]
 80090ce:	2701      	movs	r7, #1
 80090d0:	1cb5      	adds	r5, r6, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d05b      	beq.n	800918e <_strtol_l.constprop.0+0xf6>
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d109      	bne.n	80090ee <_strtol_l.constprop.0+0x56>
 80090da:	2c30      	cmp	r4, #48	; 0x30
 80090dc:	d107      	bne.n	80090ee <_strtol_l.constprop.0+0x56>
 80090de:	782c      	ldrb	r4, [r5, #0]
 80090e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80090e4:	2c58      	cmp	r4, #88	; 0x58
 80090e6:	d14d      	bne.n	8009184 <_strtol_l.constprop.0+0xec>
 80090e8:	786c      	ldrb	r4, [r5, #1]
 80090ea:	2310      	movs	r3, #16
 80090ec:	3502      	adds	r5, #2
 80090ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80090f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80090f6:	f04f 0c00 	mov.w	ip, #0
 80090fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80090fe:	4666      	mov	r6, ip
 8009100:	fb03 8a19 	mls	sl, r3, r9, r8
 8009104:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009108:	f1be 0f09 	cmp.w	lr, #9
 800910c:	d816      	bhi.n	800913c <_strtol_l.constprop.0+0xa4>
 800910e:	4674      	mov	r4, lr
 8009110:	42a3      	cmp	r3, r4
 8009112:	dd24      	ble.n	800915e <_strtol_l.constprop.0+0xc6>
 8009114:	f1bc 0f00 	cmp.w	ip, #0
 8009118:	db1e      	blt.n	8009158 <_strtol_l.constprop.0+0xc0>
 800911a:	45b1      	cmp	r9, r6
 800911c:	d31c      	bcc.n	8009158 <_strtol_l.constprop.0+0xc0>
 800911e:	d101      	bne.n	8009124 <_strtol_l.constprop.0+0x8c>
 8009120:	45a2      	cmp	sl, r4
 8009122:	db19      	blt.n	8009158 <_strtol_l.constprop.0+0xc0>
 8009124:	fb06 4603 	mla	r6, r6, r3, r4
 8009128:	f04f 0c01 	mov.w	ip, #1
 800912c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009130:	e7e8      	b.n	8009104 <_strtol_l.constprop.0+0x6c>
 8009132:	2c2b      	cmp	r4, #43	; 0x2b
 8009134:	bf04      	itt	eq
 8009136:	782c      	ldrbeq	r4, [r5, #0]
 8009138:	1cb5      	addeq	r5, r6, #2
 800913a:	e7ca      	b.n	80090d2 <_strtol_l.constprop.0+0x3a>
 800913c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009140:	f1be 0f19 	cmp.w	lr, #25
 8009144:	d801      	bhi.n	800914a <_strtol_l.constprop.0+0xb2>
 8009146:	3c37      	subs	r4, #55	; 0x37
 8009148:	e7e2      	b.n	8009110 <_strtol_l.constprop.0+0x78>
 800914a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800914e:	f1be 0f19 	cmp.w	lr, #25
 8009152:	d804      	bhi.n	800915e <_strtol_l.constprop.0+0xc6>
 8009154:	3c57      	subs	r4, #87	; 0x57
 8009156:	e7db      	b.n	8009110 <_strtol_l.constprop.0+0x78>
 8009158:	f04f 3cff 	mov.w	ip, #4294967295
 800915c:	e7e6      	b.n	800912c <_strtol_l.constprop.0+0x94>
 800915e:	f1bc 0f00 	cmp.w	ip, #0
 8009162:	da05      	bge.n	8009170 <_strtol_l.constprop.0+0xd8>
 8009164:	2322      	movs	r3, #34	; 0x22
 8009166:	6003      	str	r3, [r0, #0]
 8009168:	4646      	mov	r6, r8
 800916a:	b942      	cbnz	r2, 800917e <_strtol_l.constprop.0+0xe6>
 800916c:	4630      	mov	r0, r6
 800916e:	e79e      	b.n	80090ae <_strtol_l.constprop.0+0x16>
 8009170:	b107      	cbz	r7, 8009174 <_strtol_l.constprop.0+0xdc>
 8009172:	4276      	negs	r6, r6
 8009174:	2a00      	cmp	r2, #0
 8009176:	d0f9      	beq.n	800916c <_strtol_l.constprop.0+0xd4>
 8009178:	f1bc 0f00 	cmp.w	ip, #0
 800917c:	d000      	beq.n	8009180 <_strtol_l.constprop.0+0xe8>
 800917e:	1e69      	subs	r1, r5, #1
 8009180:	6011      	str	r1, [r2, #0]
 8009182:	e7f3      	b.n	800916c <_strtol_l.constprop.0+0xd4>
 8009184:	2430      	movs	r4, #48	; 0x30
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1b1      	bne.n	80090ee <_strtol_l.constprop.0+0x56>
 800918a:	2308      	movs	r3, #8
 800918c:	e7af      	b.n	80090ee <_strtol_l.constprop.0+0x56>
 800918e:	2c30      	cmp	r4, #48	; 0x30
 8009190:	d0a5      	beq.n	80090de <_strtol_l.constprop.0+0x46>
 8009192:	230a      	movs	r3, #10
 8009194:	e7ab      	b.n	80090ee <_strtol_l.constprop.0+0x56>
 8009196:	bf00      	nop
 8009198:	0800b495 	.word	0x0800b495

0800919c <strtol>:
 800919c:	4613      	mov	r3, r2
 800919e:	460a      	mov	r2, r1
 80091a0:	4601      	mov	r1, r0
 80091a2:	4802      	ldr	r0, [pc, #8]	; (80091ac <strtol+0x10>)
 80091a4:	6800      	ldr	r0, [r0, #0]
 80091a6:	f7ff bf77 	b.w	8009098 <_strtol_l.constprop.0>
 80091aa:	bf00      	nop
 80091ac:	20000010 	.word	0x20000010

080091b0 <quorem>:
 80091b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	6903      	ldr	r3, [r0, #16]
 80091b6:	690c      	ldr	r4, [r1, #16]
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	4607      	mov	r7, r0
 80091bc:	f2c0 8081 	blt.w	80092c2 <quorem+0x112>
 80091c0:	3c01      	subs	r4, #1
 80091c2:	f101 0814 	add.w	r8, r1, #20
 80091c6:	f100 0514 	add.w	r5, r0, #20
 80091ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091d8:	3301      	adds	r3, #1
 80091da:	429a      	cmp	r2, r3
 80091dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80091e8:	d331      	bcc.n	800924e <quorem+0x9e>
 80091ea:	f04f 0e00 	mov.w	lr, #0
 80091ee:	4640      	mov	r0, r8
 80091f0:	46ac      	mov	ip, r5
 80091f2:	46f2      	mov	sl, lr
 80091f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80091f8:	b293      	uxth	r3, r2
 80091fa:	fb06 e303 	mla	r3, r6, r3, lr
 80091fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009202:	b29b      	uxth	r3, r3
 8009204:	ebaa 0303 	sub.w	r3, sl, r3
 8009208:	f8dc a000 	ldr.w	sl, [ip]
 800920c:	0c12      	lsrs	r2, r2, #16
 800920e:	fa13 f38a 	uxtah	r3, r3, sl
 8009212:	fb06 e202 	mla	r2, r6, r2, lr
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	9b00      	ldr	r3, [sp, #0]
 800921a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800921e:	b292      	uxth	r2, r2
 8009220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009228:	f8bd 3000 	ldrh.w	r3, [sp]
 800922c:	4581      	cmp	r9, r0
 800922e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009232:	f84c 3b04 	str.w	r3, [ip], #4
 8009236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800923a:	d2db      	bcs.n	80091f4 <quorem+0x44>
 800923c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009240:	b92b      	cbnz	r3, 800924e <quorem+0x9e>
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	3b04      	subs	r3, #4
 8009246:	429d      	cmp	r5, r3
 8009248:	461a      	mov	r2, r3
 800924a:	d32e      	bcc.n	80092aa <quorem+0xfa>
 800924c:	613c      	str	r4, [r7, #16]
 800924e:	4638      	mov	r0, r7
 8009250:	f001 f8b6 	bl	800a3c0 <__mcmp>
 8009254:	2800      	cmp	r0, #0
 8009256:	db24      	blt.n	80092a2 <quorem+0xf2>
 8009258:	3601      	adds	r6, #1
 800925a:	4628      	mov	r0, r5
 800925c:	f04f 0c00 	mov.w	ip, #0
 8009260:	f858 2b04 	ldr.w	r2, [r8], #4
 8009264:	f8d0 e000 	ldr.w	lr, [r0]
 8009268:	b293      	uxth	r3, r2
 800926a:	ebac 0303 	sub.w	r3, ip, r3
 800926e:	0c12      	lsrs	r2, r2, #16
 8009270:	fa13 f38e 	uxtah	r3, r3, lr
 8009274:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800927c:	b29b      	uxth	r3, r3
 800927e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009282:	45c1      	cmp	r9, r8
 8009284:	f840 3b04 	str.w	r3, [r0], #4
 8009288:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800928c:	d2e8      	bcs.n	8009260 <quorem+0xb0>
 800928e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009296:	b922      	cbnz	r2, 80092a2 <quorem+0xf2>
 8009298:	3b04      	subs	r3, #4
 800929a:	429d      	cmp	r5, r3
 800929c:	461a      	mov	r2, r3
 800929e:	d30a      	bcc.n	80092b6 <quorem+0x106>
 80092a0:	613c      	str	r4, [r7, #16]
 80092a2:	4630      	mov	r0, r6
 80092a4:	b003      	add	sp, #12
 80092a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	3b04      	subs	r3, #4
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	d1cc      	bne.n	800924c <quorem+0x9c>
 80092b2:	3c01      	subs	r4, #1
 80092b4:	e7c7      	b.n	8009246 <quorem+0x96>
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	d1f0      	bne.n	80092a0 <quorem+0xf0>
 80092be:	3c01      	subs	r4, #1
 80092c0:	e7eb      	b.n	800929a <quorem+0xea>
 80092c2:	2000      	movs	r0, #0
 80092c4:	e7ee      	b.n	80092a4 <quorem+0xf4>
	...

080092c8 <_dtoa_r>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	ed2d 8b04 	vpush	{d8-d9}
 80092d0:	ec57 6b10 	vmov	r6, r7, d0
 80092d4:	b093      	sub	sp, #76	; 0x4c
 80092d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092dc:	9106      	str	r1, [sp, #24]
 80092de:	ee10 aa10 	vmov	sl, s0
 80092e2:	4604      	mov	r4, r0
 80092e4:	9209      	str	r2, [sp, #36]	; 0x24
 80092e6:	930c      	str	r3, [sp, #48]	; 0x30
 80092e8:	46bb      	mov	fp, r7
 80092ea:	b975      	cbnz	r5, 800930a <_dtoa_r+0x42>
 80092ec:	2010      	movs	r0, #16
 80092ee:	f000 fddd 	bl	8009eac <malloc>
 80092f2:	4602      	mov	r2, r0
 80092f4:	6260      	str	r0, [r4, #36]	; 0x24
 80092f6:	b920      	cbnz	r0, 8009302 <_dtoa_r+0x3a>
 80092f8:	4ba7      	ldr	r3, [pc, #668]	; (8009598 <_dtoa_r+0x2d0>)
 80092fa:	21ea      	movs	r1, #234	; 0xea
 80092fc:	48a7      	ldr	r0, [pc, #668]	; (800959c <_dtoa_r+0x2d4>)
 80092fe:	f001 fa67 	bl	800a7d0 <__assert_func>
 8009302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009306:	6005      	str	r5, [r0, #0]
 8009308:	60c5      	str	r5, [r0, #12]
 800930a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930c:	6819      	ldr	r1, [r3, #0]
 800930e:	b151      	cbz	r1, 8009326 <_dtoa_r+0x5e>
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	604a      	str	r2, [r1, #4]
 8009314:	2301      	movs	r3, #1
 8009316:	4093      	lsls	r3, r2
 8009318:	608b      	str	r3, [r1, #8]
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fe0e 	bl	8009f3c <_Bfree>
 8009320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	1e3b      	subs	r3, r7, #0
 8009328:	bfaa      	itet	ge
 800932a:	2300      	movge	r3, #0
 800932c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009330:	f8c8 3000 	strge.w	r3, [r8]
 8009334:	4b9a      	ldr	r3, [pc, #616]	; (80095a0 <_dtoa_r+0x2d8>)
 8009336:	bfbc      	itt	lt
 8009338:	2201      	movlt	r2, #1
 800933a:	f8c8 2000 	strlt.w	r2, [r8]
 800933e:	ea33 030b 	bics.w	r3, r3, fp
 8009342:	d11b      	bne.n	800937c <_dtoa_r+0xb4>
 8009344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009346:	f242 730f 	movw	r3, #9999	; 0x270f
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009350:	4333      	orrs	r3, r6
 8009352:	f000 8592 	beq.w	8009e7a <_dtoa_r+0xbb2>
 8009356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009358:	b963      	cbnz	r3, 8009374 <_dtoa_r+0xac>
 800935a:	4b92      	ldr	r3, [pc, #584]	; (80095a4 <_dtoa_r+0x2dc>)
 800935c:	e022      	b.n	80093a4 <_dtoa_r+0xdc>
 800935e:	4b92      	ldr	r3, [pc, #584]	; (80095a8 <_dtoa_r+0x2e0>)
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	3308      	adds	r3, #8
 8009364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	9801      	ldr	r0, [sp, #4]
 800936a:	b013      	add	sp, #76	; 0x4c
 800936c:	ecbd 8b04 	vpop	{d8-d9}
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	4b8b      	ldr	r3, [pc, #556]	; (80095a4 <_dtoa_r+0x2dc>)
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	3303      	adds	r3, #3
 800937a:	e7f3      	b.n	8009364 <_dtoa_r+0x9c>
 800937c:	2200      	movs	r2, #0
 800937e:	2300      	movs	r3, #0
 8009380:	4650      	mov	r0, sl
 8009382:	4659      	mov	r1, fp
 8009384:	f7f7 fba8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009388:	ec4b ab19 	vmov	d9, sl, fp
 800938c:	4680      	mov	r8, r0
 800938e:	b158      	cbz	r0, 80093a8 <_dtoa_r+0xe0>
 8009390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009392:	2301      	movs	r3, #1
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 856b 	beq.w	8009e74 <_dtoa_r+0xbac>
 800939e:	4883      	ldr	r0, [pc, #524]	; (80095ac <_dtoa_r+0x2e4>)
 80093a0:	6018      	str	r0, [r3, #0]
 80093a2:	1e43      	subs	r3, r0, #1
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	e7df      	b.n	8009368 <_dtoa_r+0xa0>
 80093a8:	ec4b ab10 	vmov	d0, sl, fp
 80093ac:	aa10      	add	r2, sp, #64	; 0x40
 80093ae:	a911      	add	r1, sp, #68	; 0x44
 80093b0:	4620      	mov	r0, r4
 80093b2:	f001 f8ab 	bl	800a50c <__d2b>
 80093b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80093ba:	ee08 0a10 	vmov	s16, r0
 80093be:	2d00      	cmp	r5, #0
 80093c0:	f000 8084 	beq.w	80094cc <_dtoa_r+0x204>
 80093c4:	ee19 3a90 	vmov	r3, s19
 80093c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80093d0:	4656      	mov	r6, sl
 80093d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80093d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80093de:	4b74      	ldr	r3, [pc, #464]	; (80095b0 <_dtoa_r+0x2e8>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	4630      	mov	r0, r6
 80093e4:	4639      	mov	r1, r7
 80093e6:	f7f6 ff57 	bl	8000298 <__aeabi_dsub>
 80093ea:	a365      	add	r3, pc, #404	; (adr r3, 8009580 <_dtoa_r+0x2b8>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f7 f90a 	bl	8000608 <__aeabi_dmul>
 80093f4:	a364      	add	r3, pc, #400	; (adr r3, 8009588 <_dtoa_r+0x2c0>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	f7f6 ff4f 	bl	800029c <__adddf3>
 80093fe:	4606      	mov	r6, r0
 8009400:	4628      	mov	r0, r5
 8009402:	460f      	mov	r7, r1
 8009404:	f7f7 f896 	bl	8000534 <__aeabi_i2d>
 8009408:	a361      	add	r3, pc, #388	; (adr r3, 8009590 <_dtoa_r+0x2c8>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f7 f8fb 	bl	8000608 <__aeabi_dmul>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4630      	mov	r0, r6
 8009418:	4639      	mov	r1, r7
 800941a:	f7f6 ff3f 	bl	800029c <__adddf3>
 800941e:	4606      	mov	r6, r0
 8009420:	460f      	mov	r7, r1
 8009422:	f7f7 fba1 	bl	8000b68 <__aeabi_d2iz>
 8009426:	2200      	movs	r2, #0
 8009428:	9000      	str	r0, [sp, #0]
 800942a:	2300      	movs	r3, #0
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	f7f7 fb5c 	bl	8000aec <__aeabi_dcmplt>
 8009434:	b150      	cbz	r0, 800944c <_dtoa_r+0x184>
 8009436:	9800      	ldr	r0, [sp, #0]
 8009438:	f7f7 f87c 	bl	8000534 <__aeabi_i2d>
 800943c:	4632      	mov	r2, r6
 800943e:	463b      	mov	r3, r7
 8009440:	f7f7 fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009444:	b910      	cbnz	r0, 800944c <_dtoa_r+0x184>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	3b01      	subs	r3, #1
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	9b00      	ldr	r3, [sp, #0]
 800944e:	2b16      	cmp	r3, #22
 8009450:	d85a      	bhi.n	8009508 <_dtoa_r+0x240>
 8009452:	9a00      	ldr	r2, [sp, #0]
 8009454:	4b57      	ldr	r3, [pc, #348]	; (80095b4 <_dtoa_r+0x2ec>)
 8009456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	ec51 0b19 	vmov	r0, r1, d9
 8009462:	f7f7 fb43 	bl	8000aec <__aeabi_dcmplt>
 8009466:	2800      	cmp	r0, #0
 8009468:	d050      	beq.n	800950c <_dtoa_r+0x244>
 800946a:	9b00      	ldr	r3, [sp, #0]
 800946c:	3b01      	subs	r3, #1
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	2300      	movs	r3, #0
 8009472:	930b      	str	r3, [sp, #44]	; 0x2c
 8009474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009476:	1b5d      	subs	r5, r3, r5
 8009478:	1e6b      	subs	r3, r5, #1
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	bf45      	ittet	mi
 800947e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009482:	9304      	strmi	r3, [sp, #16]
 8009484:	2300      	movpl	r3, #0
 8009486:	2300      	movmi	r3, #0
 8009488:	bf4c      	ite	mi
 800948a:	9305      	strmi	r3, [sp, #20]
 800948c:	9304      	strpl	r3, [sp, #16]
 800948e:	9b00      	ldr	r3, [sp, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	db3d      	blt.n	8009510 <_dtoa_r+0x248>
 8009494:	9b05      	ldr	r3, [sp, #20]
 8009496:	9a00      	ldr	r2, [sp, #0]
 8009498:	920a      	str	r2, [sp, #40]	; 0x28
 800949a:	4413      	add	r3, r2
 800949c:	9305      	str	r3, [sp, #20]
 800949e:	2300      	movs	r3, #0
 80094a0:	9307      	str	r3, [sp, #28]
 80094a2:	9b06      	ldr	r3, [sp, #24]
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	f200 8089 	bhi.w	80095bc <_dtoa_r+0x2f4>
 80094aa:	2b05      	cmp	r3, #5
 80094ac:	bfc4      	itt	gt
 80094ae:	3b04      	subgt	r3, #4
 80094b0:	9306      	strgt	r3, [sp, #24]
 80094b2:	9b06      	ldr	r3, [sp, #24]
 80094b4:	f1a3 0302 	sub.w	r3, r3, #2
 80094b8:	bfcc      	ite	gt
 80094ba:	2500      	movgt	r5, #0
 80094bc:	2501      	movle	r5, #1
 80094be:	2b03      	cmp	r3, #3
 80094c0:	f200 8087 	bhi.w	80095d2 <_dtoa_r+0x30a>
 80094c4:	e8df f003 	tbb	[pc, r3]
 80094c8:	59383a2d 	.word	0x59383a2d
 80094cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80094d0:	441d      	add	r5, r3
 80094d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	bfc1      	itttt	gt
 80094da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80094e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80094e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80094ea:	bfda      	itte	le
 80094ec:	f1c3 0320 	rsble	r3, r3, #32
 80094f0:	fa06 f003 	lslle.w	r0, r6, r3
 80094f4:	4318      	orrgt	r0, r3
 80094f6:	f7f7 f80d 	bl	8000514 <__aeabi_ui2d>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4606      	mov	r6, r0
 80094fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009502:	3d01      	subs	r5, #1
 8009504:	930e      	str	r3, [sp, #56]	; 0x38
 8009506:	e76a      	b.n	80093de <_dtoa_r+0x116>
 8009508:	2301      	movs	r3, #1
 800950a:	e7b2      	b.n	8009472 <_dtoa_r+0x1aa>
 800950c:	900b      	str	r0, [sp, #44]	; 0x2c
 800950e:	e7b1      	b.n	8009474 <_dtoa_r+0x1ac>
 8009510:	9b04      	ldr	r3, [sp, #16]
 8009512:	9a00      	ldr	r2, [sp, #0]
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	4253      	negs	r3, r2
 800951a:	9307      	str	r3, [sp, #28]
 800951c:	2300      	movs	r3, #0
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	e7bf      	b.n	80094a2 <_dtoa_r+0x1da>
 8009522:	2300      	movs	r3, #0
 8009524:	9308      	str	r3, [sp, #32]
 8009526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	dc55      	bgt.n	80095d8 <_dtoa_r+0x310>
 800952c:	2301      	movs	r3, #1
 800952e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009532:	461a      	mov	r2, r3
 8009534:	9209      	str	r2, [sp, #36]	; 0x24
 8009536:	e00c      	b.n	8009552 <_dtoa_r+0x28a>
 8009538:	2301      	movs	r3, #1
 800953a:	e7f3      	b.n	8009524 <_dtoa_r+0x25c>
 800953c:	2300      	movs	r3, #0
 800953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009540:	9308      	str	r3, [sp, #32]
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	4413      	add	r3, r2
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	3301      	adds	r3, #1
 800954a:	2b01      	cmp	r3, #1
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	bfb8      	it	lt
 8009550:	2301      	movlt	r3, #1
 8009552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009554:	2200      	movs	r2, #0
 8009556:	6042      	str	r2, [r0, #4]
 8009558:	2204      	movs	r2, #4
 800955a:	f102 0614 	add.w	r6, r2, #20
 800955e:	429e      	cmp	r6, r3
 8009560:	6841      	ldr	r1, [r0, #4]
 8009562:	d93d      	bls.n	80095e0 <_dtoa_r+0x318>
 8009564:	4620      	mov	r0, r4
 8009566:	f000 fca9 	bl	8009ebc <_Balloc>
 800956a:	9001      	str	r0, [sp, #4]
 800956c:	2800      	cmp	r0, #0
 800956e:	d13b      	bne.n	80095e8 <_dtoa_r+0x320>
 8009570:	4b11      	ldr	r3, [pc, #68]	; (80095b8 <_dtoa_r+0x2f0>)
 8009572:	4602      	mov	r2, r0
 8009574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009578:	e6c0      	b.n	80092fc <_dtoa_r+0x34>
 800957a:	2301      	movs	r3, #1
 800957c:	e7df      	b.n	800953e <_dtoa_r+0x276>
 800957e:	bf00      	nop
 8009580:	636f4361 	.word	0x636f4361
 8009584:	3fd287a7 	.word	0x3fd287a7
 8009588:	8b60c8b3 	.word	0x8b60c8b3
 800958c:	3fc68a28 	.word	0x3fc68a28
 8009590:	509f79fb 	.word	0x509f79fb
 8009594:	3fd34413 	.word	0x3fd34413
 8009598:	0800b5a2 	.word	0x0800b5a2
 800959c:	0800b5b9 	.word	0x0800b5b9
 80095a0:	7ff00000 	.word	0x7ff00000
 80095a4:	0800b59e 	.word	0x0800b59e
 80095a8:	0800b595 	.word	0x0800b595
 80095ac:	0800b471 	.word	0x0800b471
 80095b0:	3ff80000 	.word	0x3ff80000
 80095b4:	0800b6b0 	.word	0x0800b6b0
 80095b8:	0800b614 	.word	0x0800b614
 80095bc:	2501      	movs	r5, #1
 80095be:	2300      	movs	r3, #0
 80095c0:	9306      	str	r3, [sp, #24]
 80095c2:	9508      	str	r5, [sp, #32]
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295
 80095c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095cc:	2200      	movs	r2, #0
 80095ce:	2312      	movs	r3, #18
 80095d0:	e7b0      	b.n	8009534 <_dtoa_r+0x26c>
 80095d2:	2301      	movs	r3, #1
 80095d4:	9308      	str	r3, [sp, #32]
 80095d6:	e7f5      	b.n	80095c4 <_dtoa_r+0x2fc>
 80095d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095de:	e7b8      	b.n	8009552 <_dtoa_r+0x28a>
 80095e0:	3101      	adds	r1, #1
 80095e2:	6041      	str	r1, [r0, #4]
 80095e4:	0052      	lsls	r2, r2, #1
 80095e6:	e7b8      	b.n	800955a <_dtoa_r+0x292>
 80095e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ea:	9a01      	ldr	r2, [sp, #4]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	2b0e      	cmp	r3, #14
 80095f2:	f200 809d 	bhi.w	8009730 <_dtoa_r+0x468>
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	f000 809a 	beq.w	8009730 <_dtoa_r+0x468>
 80095fc:	9b00      	ldr	r3, [sp, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dd32      	ble.n	8009668 <_dtoa_r+0x3a0>
 8009602:	4ab7      	ldr	r2, [pc, #732]	; (80098e0 <_dtoa_r+0x618>)
 8009604:	f003 030f 	and.w	r3, r3, #15
 8009608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800960c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009610:	9b00      	ldr	r3, [sp, #0]
 8009612:	05d8      	lsls	r0, r3, #23
 8009614:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009618:	d516      	bpl.n	8009648 <_dtoa_r+0x380>
 800961a:	4bb2      	ldr	r3, [pc, #712]	; (80098e4 <_dtoa_r+0x61c>)
 800961c:	ec51 0b19 	vmov	r0, r1, d9
 8009620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009624:	f7f7 f91a 	bl	800085c <__aeabi_ddiv>
 8009628:	f007 070f 	and.w	r7, r7, #15
 800962c:	4682      	mov	sl, r0
 800962e:	468b      	mov	fp, r1
 8009630:	2503      	movs	r5, #3
 8009632:	4eac      	ldr	r6, [pc, #688]	; (80098e4 <_dtoa_r+0x61c>)
 8009634:	b957      	cbnz	r7, 800964c <_dtoa_r+0x384>
 8009636:	4642      	mov	r2, r8
 8009638:	464b      	mov	r3, r9
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f7 f90d 	bl	800085c <__aeabi_ddiv>
 8009642:	4682      	mov	sl, r0
 8009644:	468b      	mov	fp, r1
 8009646:	e028      	b.n	800969a <_dtoa_r+0x3d2>
 8009648:	2502      	movs	r5, #2
 800964a:	e7f2      	b.n	8009632 <_dtoa_r+0x36a>
 800964c:	07f9      	lsls	r1, r7, #31
 800964e:	d508      	bpl.n	8009662 <_dtoa_r+0x39a>
 8009650:	4640      	mov	r0, r8
 8009652:	4649      	mov	r1, r9
 8009654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009658:	f7f6 ffd6 	bl	8000608 <__aeabi_dmul>
 800965c:	3501      	adds	r5, #1
 800965e:	4680      	mov	r8, r0
 8009660:	4689      	mov	r9, r1
 8009662:	107f      	asrs	r7, r7, #1
 8009664:	3608      	adds	r6, #8
 8009666:	e7e5      	b.n	8009634 <_dtoa_r+0x36c>
 8009668:	f000 809b 	beq.w	80097a2 <_dtoa_r+0x4da>
 800966c:	9b00      	ldr	r3, [sp, #0]
 800966e:	4f9d      	ldr	r7, [pc, #628]	; (80098e4 <_dtoa_r+0x61c>)
 8009670:	425e      	negs	r6, r3
 8009672:	4b9b      	ldr	r3, [pc, #620]	; (80098e0 <_dtoa_r+0x618>)
 8009674:	f006 020f 	and.w	r2, r6, #15
 8009678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	ec51 0b19 	vmov	r0, r1, d9
 8009684:	f7f6 ffc0 	bl	8000608 <__aeabi_dmul>
 8009688:	1136      	asrs	r6, r6, #4
 800968a:	4682      	mov	sl, r0
 800968c:	468b      	mov	fp, r1
 800968e:	2300      	movs	r3, #0
 8009690:	2502      	movs	r5, #2
 8009692:	2e00      	cmp	r6, #0
 8009694:	d17a      	bne.n	800978c <_dtoa_r+0x4c4>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1d3      	bne.n	8009642 <_dtoa_r+0x37a>
 800969a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8082 	beq.w	80097a6 <_dtoa_r+0x4de>
 80096a2:	4b91      	ldr	r3, [pc, #580]	; (80098e8 <_dtoa_r+0x620>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	4650      	mov	r0, sl
 80096a8:	4659      	mov	r1, fp
 80096aa:	f7f7 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d079      	beq.n	80097a6 <_dtoa_r+0x4de>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d076      	beq.n	80097a6 <_dtoa_r+0x4de>
 80096b8:	9b02      	ldr	r3, [sp, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	dd36      	ble.n	800972c <_dtoa_r+0x464>
 80096be:	9b00      	ldr	r3, [sp, #0]
 80096c0:	4650      	mov	r0, sl
 80096c2:	4659      	mov	r1, fp
 80096c4:	1e5f      	subs	r7, r3, #1
 80096c6:	2200      	movs	r2, #0
 80096c8:	4b88      	ldr	r3, [pc, #544]	; (80098ec <_dtoa_r+0x624>)
 80096ca:	f7f6 ff9d 	bl	8000608 <__aeabi_dmul>
 80096ce:	9e02      	ldr	r6, [sp, #8]
 80096d0:	4682      	mov	sl, r0
 80096d2:	468b      	mov	fp, r1
 80096d4:	3501      	adds	r5, #1
 80096d6:	4628      	mov	r0, r5
 80096d8:	f7f6 ff2c 	bl	8000534 <__aeabi_i2d>
 80096dc:	4652      	mov	r2, sl
 80096de:	465b      	mov	r3, fp
 80096e0:	f7f6 ff92 	bl	8000608 <__aeabi_dmul>
 80096e4:	4b82      	ldr	r3, [pc, #520]	; (80098f0 <_dtoa_r+0x628>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	f7f6 fdd8 	bl	800029c <__adddf3>
 80096ec:	46d0      	mov	r8, sl
 80096ee:	46d9      	mov	r9, fp
 80096f0:	4682      	mov	sl, r0
 80096f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	d158      	bne.n	80097ac <_dtoa_r+0x4e4>
 80096fa:	4b7e      	ldr	r3, [pc, #504]	; (80098f4 <_dtoa_r+0x62c>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 fdc9 	bl	8000298 <__aeabi_dsub>
 8009706:	4652      	mov	r2, sl
 8009708:	465b      	mov	r3, fp
 800970a:	4680      	mov	r8, r0
 800970c:	4689      	mov	r9, r1
 800970e:	f7f7 fa0b 	bl	8000b28 <__aeabi_dcmpgt>
 8009712:	2800      	cmp	r0, #0
 8009714:	f040 8295 	bne.w	8009c42 <_dtoa_r+0x97a>
 8009718:	4652      	mov	r2, sl
 800971a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 f9e3 	bl	8000aec <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	f040 8289 	bne.w	8009c3e <_dtoa_r+0x976>
 800972c:	ec5b ab19 	vmov	sl, fp, d9
 8009730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009732:	2b00      	cmp	r3, #0
 8009734:	f2c0 8148 	blt.w	80099c8 <_dtoa_r+0x700>
 8009738:	9a00      	ldr	r2, [sp, #0]
 800973a:	2a0e      	cmp	r2, #14
 800973c:	f300 8144 	bgt.w	80099c8 <_dtoa_r+0x700>
 8009740:	4b67      	ldr	r3, [pc, #412]	; (80098e0 <_dtoa_r+0x618>)
 8009742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009746:	e9d3 8900 	ldrd	r8, r9, [r3]
 800974a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	f280 80d5 	bge.w	80098fc <_dtoa_r+0x634>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f300 80d1 	bgt.w	80098fc <_dtoa_r+0x634>
 800975a:	f040 826f 	bne.w	8009c3c <_dtoa_r+0x974>
 800975e:	4b65      	ldr	r3, [pc, #404]	; (80098f4 <_dtoa_r+0x62c>)
 8009760:	2200      	movs	r2, #0
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	f7f6 ff4f 	bl	8000608 <__aeabi_dmul>
 800976a:	4652      	mov	r2, sl
 800976c:	465b      	mov	r3, fp
 800976e:	f7f7 f9d1 	bl	8000b14 <__aeabi_dcmpge>
 8009772:	9e03      	ldr	r6, [sp, #12]
 8009774:	4637      	mov	r7, r6
 8009776:	2800      	cmp	r0, #0
 8009778:	f040 8245 	bne.w	8009c06 <_dtoa_r+0x93e>
 800977c:	9d01      	ldr	r5, [sp, #4]
 800977e:	2331      	movs	r3, #49	; 0x31
 8009780:	f805 3b01 	strb.w	r3, [r5], #1
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	3301      	adds	r3, #1
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	e240      	b.n	8009c0e <_dtoa_r+0x946>
 800978c:	07f2      	lsls	r2, r6, #31
 800978e:	d505      	bpl.n	800979c <_dtoa_r+0x4d4>
 8009790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009794:	f7f6 ff38 	bl	8000608 <__aeabi_dmul>
 8009798:	3501      	adds	r5, #1
 800979a:	2301      	movs	r3, #1
 800979c:	1076      	asrs	r6, r6, #1
 800979e:	3708      	adds	r7, #8
 80097a0:	e777      	b.n	8009692 <_dtoa_r+0x3ca>
 80097a2:	2502      	movs	r5, #2
 80097a4:	e779      	b.n	800969a <_dtoa_r+0x3d2>
 80097a6:	9f00      	ldr	r7, [sp, #0]
 80097a8:	9e03      	ldr	r6, [sp, #12]
 80097aa:	e794      	b.n	80096d6 <_dtoa_r+0x40e>
 80097ac:	9901      	ldr	r1, [sp, #4]
 80097ae:	4b4c      	ldr	r3, [pc, #304]	; (80098e0 <_dtoa_r+0x618>)
 80097b0:	4431      	add	r1, r6
 80097b2:	910d      	str	r1, [sp, #52]	; 0x34
 80097b4:	9908      	ldr	r1, [sp, #32]
 80097b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097be:	2900      	cmp	r1, #0
 80097c0:	d043      	beq.n	800984a <_dtoa_r+0x582>
 80097c2:	494d      	ldr	r1, [pc, #308]	; (80098f8 <_dtoa_r+0x630>)
 80097c4:	2000      	movs	r0, #0
 80097c6:	f7f7 f849 	bl	800085c <__aeabi_ddiv>
 80097ca:	4652      	mov	r2, sl
 80097cc:	465b      	mov	r3, fp
 80097ce:	f7f6 fd63 	bl	8000298 <__aeabi_dsub>
 80097d2:	9d01      	ldr	r5, [sp, #4]
 80097d4:	4682      	mov	sl, r0
 80097d6:	468b      	mov	fp, r1
 80097d8:	4649      	mov	r1, r9
 80097da:	4640      	mov	r0, r8
 80097dc:	f7f7 f9c4 	bl	8000b68 <__aeabi_d2iz>
 80097e0:	4606      	mov	r6, r0
 80097e2:	f7f6 fea7 	bl	8000534 <__aeabi_i2d>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f6 fd53 	bl	8000298 <__aeabi_dsub>
 80097f2:	3630      	adds	r6, #48	; 0x30
 80097f4:	f805 6b01 	strb.w	r6, [r5], #1
 80097f8:	4652      	mov	r2, sl
 80097fa:	465b      	mov	r3, fp
 80097fc:	4680      	mov	r8, r0
 80097fe:	4689      	mov	r9, r1
 8009800:	f7f7 f974 	bl	8000aec <__aeabi_dcmplt>
 8009804:	2800      	cmp	r0, #0
 8009806:	d163      	bne.n	80098d0 <_dtoa_r+0x608>
 8009808:	4642      	mov	r2, r8
 800980a:	464b      	mov	r3, r9
 800980c:	4936      	ldr	r1, [pc, #216]	; (80098e8 <_dtoa_r+0x620>)
 800980e:	2000      	movs	r0, #0
 8009810:	f7f6 fd42 	bl	8000298 <__aeabi_dsub>
 8009814:	4652      	mov	r2, sl
 8009816:	465b      	mov	r3, fp
 8009818:	f7f7 f968 	bl	8000aec <__aeabi_dcmplt>
 800981c:	2800      	cmp	r0, #0
 800981e:	f040 80b5 	bne.w	800998c <_dtoa_r+0x6c4>
 8009822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009824:	429d      	cmp	r5, r3
 8009826:	d081      	beq.n	800972c <_dtoa_r+0x464>
 8009828:	4b30      	ldr	r3, [pc, #192]	; (80098ec <_dtoa_r+0x624>)
 800982a:	2200      	movs	r2, #0
 800982c:	4650      	mov	r0, sl
 800982e:	4659      	mov	r1, fp
 8009830:	f7f6 feea 	bl	8000608 <__aeabi_dmul>
 8009834:	4b2d      	ldr	r3, [pc, #180]	; (80098ec <_dtoa_r+0x624>)
 8009836:	4682      	mov	sl, r0
 8009838:	468b      	mov	fp, r1
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	2200      	movs	r2, #0
 8009840:	f7f6 fee2 	bl	8000608 <__aeabi_dmul>
 8009844:	4680      	mov	r8, r0
 8009846:	4689      	mov	r9, r1
 8009848:	e7c6      	b.n	80097d8 <_dtoa_r+0x510>
 800984a:	4650      	mov	r0, sl
 800984c:	4659      	mov	r1, fp
 800984e:	f7f6 fedb 	bl	8000608 <__aeabi_dmul>
 8009852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009854:	9d01      	ldr	r5, [sp, #4]
 8009856:	930f      	str	r3, [sp, #60]	; 0x3c
 8009858:	4682      	mov	sl, r0
 800985a:	468b      	mov	fp, r1
 800985c:	4649      	mov	r1, r9
 800985e:	4640      	mov	r0, r8
 8009860:	f7f7 f982 	bl	8000b68 <__aeabi_d2iz>
 8009864:	4606      	mov	r6, r0
 8009866:	f7f6 fe65 	bl	8000534 <__aeabi_i2d>
 800986a:	3630      	adds	r6, #48	; 0x30
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4640      	mov	r0, r8
 8009872:	4649      	mov	r1, r9
 8009874:	f7f6 fd10 	bl	8000298 <__aeabi_dsub>
 8009878:	f805 6b01 	strb.w	r6, [r5], #1
 800987c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800987e:	429d      	cmp	r5, r3
 8009880:	4680      	mov	r8, r0
 8009882:	4689      	mov	r9, r1
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	d124      	bne.n	80098d4 <_dtoa_r+0x60c>
 800988a:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <_dtoa_r+0x630>)
 800988c:	4650      	mov	r0, sl
 800988e:	4659      	mov	r1, fp
 8009890:	f7f6 fd04 	bl	800029c <__adddf3>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4640      	mov	r0, r8
 800989a:	4649      	mov	r1, r9
 800989c:	f7f7 f944 	bl	8000b28 <__aeabi_dcmpgt>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d173      	bne.n	800998c <_dtoa_r+0x6c4>
 80098a4:	4652      	mov	r2, sl
 80098a6:	465b      	mov	r3, fp
 80098a8:	4913      	ldr	r1, [pc, #76]	; (80098f8 <_dtoa_r+0x630>)
 80098aa:	2000      	movs	r0, #0
 80098ac:	f7f6 fcf4 	bl	8000298 <__aeabi_dsub>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4640      	mov	r0, r8
 80098b6:	4649      	mov	r1, r9
 80098b8:	f7f7 f918 	bl	8000aec <__aeabi_dcmplt>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f43f af35 	beq.w	800972c <_dtoa_r+0x464>
 80098c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80098c4:	1e6b      	subs	r3, r5, #1
 80098c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098cc:	2b30      	cmp	r3, #48	; 0x30
 80098ce:	d0f8      	beq.n	80098c2 <_dtoa_r+0x5fa>
 80098d0:	9700      	str	r7, [sp, #0]
 80098d2:	e049      	b.n	8009968 <_dtoa_r+0x6a0>
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <_dtoa_r+0x624>)
 80098d6:	f7f6 fe97 	bl	8000608 <__aeabi_dmul>
 80098da:	4680      	mov	r8, r0
 80098dc:	4689      	mov	r9, r1
 80098de:	e7bd      	b.n	800985c <_dtoa_r+0x594>
 80098e0:	0800b6b0 	.word	0x0800b6b0
 80098e4:	0800b688 	.word	0x0800b688
 80098e8:	3ff00000 	.word	0x3ff00000
 80098ec:	40240000 	.word	0x40240000
 80098f0:	401c0000 	.word	0x401c0000
 80098f4:	40140000 	.word	0x40140000
 80098f8:	3fe00000 	.word	0x3fe00000
 80098fc:	9d01      	ldr	r5, [sp, #4]
 80098fe:	4656      	mov	r6, sl
 8009900:	465f      	mov	r7, fp
 8009902:	4642      	mov	r2, r8
 8009904:	464b      	mov	r3, r9
 8009906:	4630      	mov	r0, r6
 8009908:	4639      	mov	r1, r7
 800990a:	f7f6 ffa7 	bl	800085c <__aeabi_ddiv>
 800990e:	f7f7 f92b 	bl	8000b68 <__aeabi_d2iz>
 8009912:	4682      	mov	sl, r0
 8009914:	f7f6 fe0e 	bl	8000534 <__aeabi_i2d>
 8009918:	4642      	mov	r2, r8
 800991a:	464b      	mov	r3, r9
 800991c:	f7f6 fe74 	bl	8000608 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4630      	mov	r0, r6
 8009926:	4639      	mov	r1, r7
 8009928:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800992c:	f7f6 fcb4 	bl	8000298 <__aeabi_dsub>
 8009930:	f805 6b01 	strb.w	r6, [r5], #1
 8009934:	9e01      	ldr	r6, [sp, #4]
 8009936:	9f03      	ldr	r7, [sp, #12]
 8009938:	1bae      	subs	r6, r5, r6
 800993a:	42b7      	cmp	r7, r6
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	d135      	bne.n	80099ae <_dtoa_r+0x6e6>
 8009942:	f7f6 fcab 	bl	800029c <__adddf3>
 8009946:	4642      	mov	r2, r8
 8009948:	464b      	mov	r3, r9
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	f7f7 f8eb 	bl	8000b28 <__aeabi_dcmpgt>
 8009952:	b9d0      	cbnz	r0, 800998a <_dtoa_r+0x6c2>
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	4630      	mov	r0, r6
 800995a:	4639      	mov	r1, r7
 800995c:	f7f7 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009960:	b110      	cbz	r0, 8009968 <_dtoa_r+0x6a0>
 8009962:	f01a 0f01 	tst.w	sl, #1
 8009966:	d110      	bne.n	800998a <_dtoa_r+0x6c2>
 8009968:	4620      	mov	r0, r4
 800996a:	ee18 1a10 	vmov	r1, s16
 800996e:	f000 fae5 	bl	8009f3c <_Bfree>
 8009972:	2300      	movs	r3, #0
 8009974:	9800      	ldr	r0, [sp, #0]
 8009976:	702b      	strb	r3, [r5, #0]
 8009978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800997a:	3001      	adds	r0, #1
 800997c:	6018      	str	r0, [r3, #0]
 800997e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009980:	2b00      	cmp	r3, #0
 8009982:	f43f acf1 	beq.w	8009368 <_dtoa_r+0xa0>
 8009986:	601d      	str	r5, [r3, #0]
 8009988:	e4ee      	b.n	8009368 <_dtoa_r+0xa0>
 800998a:	9f00      	ldr	r7, [sp, #0]
 800998c:	462b      	mov	r3, r5
 800998e:	461d      	mov	r5, r3
 8009990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009994:	2a39      	cmp	r2, #57	; 0x39
 8009996:	d106      	bne.n	80099a6 <_dtoa_r+0x6de>
 8009998:	9a01      	ldr	r2, [sp, #4]
 800999a:	429a      	cmp	r2, r3
 800999c:	d1f7      	bne.n	800998e <_dtoa_r+0x6c6>
 800999e:	9901      	ldr	r1, [sp, #4]
 80099a0:	2230      	movs	r2, #48	; 0x30
 80099a2:	3701      	adds	r7, #1
 80099a4:	700a      	strb	r2, [r1, #0]
 80099a6:	781a      	ldrb	r2, [r3, #0]
 80099a8:	3201      	adds	r2, #1
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	e790      	b.n	80098d0 <_dtoa_r+0x608>
 80099ae:	4ba6      	ldr	r3, [pc, #664]	; (8009c48 <_dtoa_r+0x980>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	f7f6 fe29 	bl	8000608 <__aeabi_dmul>
 80099b6:	2200      	movs	r2, #0
 80099b8:	2300      	movs	r3, #0
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	f7f7 f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d09d      	beq.n	8009902 <_dtoa_r+0x63a>
 80099c6:	e7cf      	b.n	8009968 <_dtoa_r+0x6a0>
 80099c8:	9a08      	ldr	r2, [sp, #32]
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	f000 80d7 	beq.w	8009b7e <_dtoa_r+0x8b6>
 80099d0:	9a06      	ldr	r2, [sp, #24]
 80099d2:	2a01      	cmp	r2, #1
 80099d4:	f300 80ba 	bgt.w	8009b4c <_dtoa_r+0x884>
 80099d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099da:	2a00      	cmp	r2, #0
 80099dc:	f000 80b2 	beq.w	8009b44 <_dtoa_r+0x87c>
 80099e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099e4:	9e07      	ldr	r6, [sp, #28]
 80099e6:	9d04      	ldr	r5, [sp, #16]
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	441a      	add	r2, r3
 80099ec:	9204      	str	r2, [sp, #16]
 80099ee:	9a05      	ldr	r2, [sp, #20]
 80099f0:	2101      	movs	r1, #1
 80099f2:	441a      	add	r2, r3
 80099f4:	4620      	mov	r0, r4
 80099f6:	9205      	str	r2, [sp, #20]
 80099f8:	f000 fb58 	bl	800a0ac <__i2b>
 80099fc:	4607      	mov	r7, r0
 80099fe:	2d00      	cmp	r5, #0
 8009a00:	dd0c      	ble.n	8009a1c <_dtoa_r+0x754>
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dd09      	ble.n	8009a1c <_dtoa_r+0x754>
 8009a08:	42ab      	cmp	r3, r5
 8009a0a:	9a04      	ldr	r2, [sp, #16]
 8009a0c:	bfa8      	it	ge
 8009a0e:	462b      	movge	r3, r5
 8009a10:	1ad2      	subs	r2, r2, r3
 8009a12:	9204      	str	r2, [sp, #16]
 8009a14:	9a05      	ldr	r2, [sp, #20]
 8009a16:	1aed      	subs	r5, r5, r3
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	9b07      	ldr	r3, [sp, #28]
 8009a1e:	b31b      	cbz	r3, 8009a68 <_dtoa_r+0x7a0>
 8009a20:	9b08      	ldr	r3, [sp, #32]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80af 	beq.w	8009b86 <_dtoa_r+0x8be>
 8009a28:	2e00      	cmp	r6, #0
 8009a2a:	dd13      	ble.n	8009a54 <_dtoa_r+0x78c>
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	4632      	mov	r2, r6
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 fbfb 	bl	800a22c <__pow5mult>
 8009a36:	ee18 2a10 	vmov	r2, s16
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fb4a 	bl	800a0d8 <__multiply>
 8009a44:	ee18 1a10 	vmov	r1, s16
 8009a48:	4680      	mov	r8, r0
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 fa76 	bl	8009f3c <_Bfree>
 8009a50:	ee08 8a10 	vmov	s16, r8
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	1b9a      	subs	r2, r3, r6
 8009a58:	d006      	beq.n	8009a68 <_dtoa_r+0x7a0>
 8009a5a:	ee18 1a10 	vmov	r1, s16
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 fbe4 	bl	800a22c <__pow5mult>
 8009a64:	ee08 0a10 	vmov	s16, r0
 8009a68:	2101      	movs	r1, #1
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fb1e 	bl	800a0ac <__i2b>
 8009a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	4606      	mov	r6, r0
 8009a76:	f340 8088 	ble.w	8009b8a <_dtoa_r+0x8c2>
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	4601      	mov	r1, r0
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 fbd4 	bl	800a22c <__pow5mult>
 8009a84:	9b06      	ldr	r3, [sp, #24]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	4606      	mov	r6, r0
 8009a8a:	f340 8081 	ble.w	8009b90 <_dtoa_r+0x8c8>
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	6933      	ldr	r3, [r6, #16]
 8009a94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a98:	6918      	ldr	r0, [r3, #16]
 8009a9a:	f000 fab7 	bl	800a00c <__hi0bits>
 8009a9e:	f1c0 0020 	rsb	r0, r0, #32
 8009aa2:	9b05      	ldr	r3, [sp, #20]
 8009aa4:	4418      	add	r0, r3
 8009aa6:	f010 001f 	ands.w	r0, r0, #31
 8009aaa:	f000 8092 	beq.w	8009bd2 <_dtoa_r+0x90a>
 8009aae:	f1c0 0320 	rsb	r3, r0, #32
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	f340 808a 	ble.w	8009bcc <_dtoa_r+0x904>
 8009ab8:	f1c0 001c 	rsb	r0, r0, #28
 8009abc:	9b04      	ldr	r3, [sp, #16]
 8009abe:	4403      	add	r3, r0
 8009ac0:	9304      	str	r3, [sp, #16]
 8009ac2:	9b05      	ldr	r3, [sp, #20]
 8009ac4:	4403      	add	r3, r0
 8009ac6:	4405      	add	r5, r0
 8009ac8:	9305      	str	r3, [sp, #20]
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dd07      	ble.n	8009ae0 <_dtoa_r+0x818>
 8009ad0:	ee18 1a10 	vmov	r1, s16
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 fc02 	bl	800a2e0 <__lshift>
 8009adc:	ee08 0a10 	vmov	s16, r0
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dd05      	ble.n	8009af2 <_dtoa_r+0x82a>
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 fbf8 	bl	800a2e0 <__lshift>
 8009af0:	4606      	mov	r6, r0
 8009af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d06e      	beq.n	8009bd6 <_dtoa_r+0x90e>
 8009af8:	ee18 0a10 	vmov	r0, s16
 8009afc:	4631      	mov	r1, r6
 8009afe:	f000 fc5f 	bl	800a3c0 <__mcmp>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	da67      	bge.n	8009bd6 <_dtoa_r+0x90e>
 8009b06:	9b00      	ldr	r3, [sp, #0]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	ee18 1a10 	vmov	r1, s16
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	220a      	movs	r2, #10
 8009b12:	2300      	movs	r3, #0
 8009b14:	4620      	mov	r0, r4
 8009b16:	f000 fa33 	bl	8009f80 <__multadd>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	ee08 0a10 	vmov	s16, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 81b1 	beq.w	8009e88 <_dtoa_r+0xbc0>
 8009b26:	2300      	movs	r3, #0
 8009b28:	4639      	mov	r1, r7
 8009b2a:	220a      	movs	r2, #10
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fa27 	bl	8009f80 <__multadd>
 8009b32:	9b02      	ldr	r3, [sp, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	4607      	mov	r7, r0
 8009b38:	f300 808e 	bgt.w	8009c58 <_dtoa_r+0x990>
 8009b3c:	9b06      	ldr	r3, [sp, #24]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	dc51      	bgt.n	8009be6 <_dtoa_r+0x91e>
 8009b42:	e089      	b.n	8009c58 <_dtoa_r+0x990>
 8009b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b4a:	e74b      	b.n	80099e4 <_dtoa_r+0x71c>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	1e5e      	subs	r6, r3, #1
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	42b3      	cmp	r3, r6
 8009b54:	bfbf      	itttt	lt
 8009b56:	9b07      	ldrlt	r3, [sp, #28]
 8009b58:	9607      	strlt	r6, [sp, #28]
 8009b5a:	1af2      	sublt	r2, r6, r3
 8009b5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b5e:	bfb6      	itet	lt
 8009b60:	189b      	addlt	r3, r3, r2
 8009b62:	1b9e      	subge	r6, r3, r6
 8009b64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	bfb8      	it	lt
 8009b6a:	2600      	movlt	r6, #0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfb7      	itett	lt
 8009b70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009b74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009b78:	1a9d      	sublt	r5, r3, r2
 8009b7a:	2300      	movlt	r3, #0
 8009b7c:	e734      	b.n	80099e8 <_dtoa_r+0x720>
 8009b7e:	9e07      	ldr	r6, [sp, #28]
 8009b80:	9d04      	ldr	r5, [sp, #16]
 8009b82:	9f08      	ldr	r7, [sp, #32]
 8009b84:	e73b      	b.n	80099fe <_dtoa_r+0x736>
 8009b86:	9a07      	ldr	r2, [sp, #28]
 8009b88:	e767      	b.n	8009a5a <_dtoa_r+0x792>
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	dc18      	bgt.n	8009bc2 <_dtoa_r+0x8fa>
 8009b90:	f1ba 0f00 	cmp.w	sl, #0
 8009b94:	d115      	bne.n	8009bc2 <_dtoa_r+0x8fa>
 8009b96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b9a:	b993      	cbnz	r3, 8009bc2 <_dtoa_r+0x8fa>
 8009b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ba0:	0d1b      	lsrs	r3, r3, #20
 8009ba2:	051b      	lsls	r3, r3, #20
 8009ba4:	b183      	cbz	r3, 8009bc8 <_dtoa_r+0x900>
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	9b05      	ldr	r3, [sp, #20]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	9305      	str	r3, [sp, #20]
 8009bb2:	f04f 0801 	mov.w	r8, #1
 8009bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f47f af6a 	bne.w	8009a92 <_dtoa_r+0x7ca>
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e76f      	b.n	8009aa2 <_dtoa_r+0x7da>
 8009bc2:	f04f 0800 	mov.w	r8, #0
 8009bc6:	e7f6      	b.n	8009bb6 <_dtoa_r+0x8ee>
 8009bc8:	4698      	mov	r8, r3
 8009bca:	e7f4      	b.n	8009bb6 <_dtoa_r+0x8ee>
 8009bcc:	f43f af7d 	beq.w	8009aca <_dtoa_r+0x802>
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	301c      	adds	r0, #28
 8009bd4:	e772      	b.n	8009abc <_dtoa_r+0x7f4>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	dc37      	bgt.n	8009c4c <_dtoa_r+0x984>
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	dd34      	ble.n	8009c4c <_dtoa_r+0x984>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	9302      	str	r3, [sp, #8]
 8009be6:	9b02      	ldr	r3, [sp, #8]
 8009be8:	b96b      	cbnz	r3, 8009c06 <_dtoa_r+0x93e>
 8009bea:	4631      	mov	r1, r6
 8009bec:	2205      	movs	r2, #5
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f9c6 	bl	8009f80 <__multadd>
 8009bf4:	4601      	mov	r1, r0
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	ee18 0a10 	vmov	r0, s16
 8009bfc:	f000 fbe0 	bl	800a3c0 <__mcmp>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	f73f adbb 	bgt.w	800977c <_dtoa_r+0x4b4>
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	9d01      	ldr	r5, [sp, #4]
 8009c0a:	43db      	mvns	r3, r3
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	4631      	mov	r1, r6
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 f991 	bl	8009f3c <_Bfree>
 8009c1a:	2f00      	cmp	r7, #0
 8009c1c:	f43f aea4 	beq.w	8009968 <_dtoa_r+0x6a0>
 8009c20:	f1b8 0f00 	cmp.w	r8, #0
 8009c24:	d005      	beq.n	8009c32 <_dtoa_r+0x96a>
 8009c26:	45b8      	cmp	r8, r7
 8009c28:	d003      	beq.n	8009c32 <_dtoa_r+0x96a>
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 f985 	bl	8009f3c <_Bfree>
 8009c32:	4639      	mov	r1, r7
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 f981 	bl	8009f3c <_Bfree>
 8009c3a:	e695      	b.n	8009968 <_dtoa_r+0x6a0>
 8009c3c:	2600      	movs	r6, #0
 8009c3e:	4637      	mov	r7, r6
 8009c40:	e7e1      	b.n	8009c06 <_dtoa_r+0x93e>
 8009c42:	9700      	str	r7, [sp, #0]
 8009c44:	4637      	mov	r7, r6
 8009c46:	e599      	b.n	800977c <_dtoa_r+0x4b4>
 8009c48:	40240000 	.word	0x40240000
 8009c4c:	9b08      	ldr	r3, [sp, #32]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 80ca 	beq.w	8009de8 <_dtoa_r+0xb20>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	9302      	str	r3, [sp, #8]
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	dd05      	ble.n	8009c68 <_dtoa_r+0x9a0>
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	462a      	mov	r2, r5
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fb3d 	bl	800a2e0 <__lshift>
 8009c66:	4607      	mov	r7, r0
 8009c68:	f1b8 0f00 	cmp.w	r8, #0
 8009c6c:	d05b      	beq.n	8009d26 <_dtoa_r+0xa5e>
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 f923 	bl	8009ebc <_Balloc>
 8009c76:	4605      	mov	r5, r0
 8009c78:	b928      	cbnz	r0, 8009c86 <_dtoa_r+0x9be>
 8009c7a:	4b87      	ldr	r3, [pc, #540]	; (8009e98 <_dtoa_r+0xbd0>)
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c82:	f7ff bb3b 	b.w	80092fc <_dtoa_r+0x34>
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	3202      	adds	r2, #2
 8009c8a:	0092      	lsls	r2, r2, #2
 8009c8c:	f107 010c 	add.w	r1, r7, #12
 8009c90:	300c      	adds	r0, #12
 8009c92:	f7fe fd81 	bl	8008798 <memcpy>
 8009c96:	2201      	movs	r2, #1
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fb20 	bl	800a2e0 <__lshift>
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	f103 0901 	add.w	r9, r3, #1
 8009ca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009caa:	4413      	add	r3, r2
 8009cac:	9305      	str	r3, [sp, #20]
 8009cae:	f00a 0301 	and.w	r3, sl, #1
 8009cb2:	46b8      	mov	r8, r7
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	4631      	mov	r1, r6
 8009cba:	ee18 0a10 	vmov	r0, s16
 8009cbe:	f7ff fa77 	bl	80091b0 <quorem>
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	9002      	str	r0, [sp, #8]
 8009cc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cca:	ee18 0a10 	vmov	r0, s16
 8009cce:	f000 fb77 	bl	800a3c0 <__mcmp>
 8009cd2:	463a      	mov	r2, r7
 8009cd4:	9003      	str	r0, [sp, #12]
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fb8d 	bl	800a3f8 <__mdiff>
 8009cde:	68c2      	ldr	r2, [r0, #12]
 8009ce0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	bb02      	cbnz	r2, 8009d2a <_dtoa_r+0xa62>
 8009ce8:	4601      	mov	r1, r0
 8009cea:	ee18 0a10 	vmov	r0, s16
 8009cee:	f000 fb67 	bl	800a3c0 <__mcmp>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	9207      	str	r2, [sp, #28]
 8009cfa:	f000 f91f 	bl	8009f3c <_Bfree>
 8009cfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d02:	ea43 0102 	orr.w	r1, r3, r2
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	464d      	mov	r5, r9
 8009d0c:	d10f      	bne.n	8009d2e <_dtoa_r+0xa66>
 8009d0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d12:	d02a      	beq.n	8009d6a <_dtoa_r+0xaa2>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dd02      	ble.n	8009d20 <_dtoa_r+0xa58>
 8009d1a:	9b02      	ldr	r3, [sp, #8]
 8009d1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009d20:	f88b a000 	strb.w	sl, [fp]
 8009d24:	e775      	b.n	8009c12 <_dtoa_r+0x94a>
 8009d26:	4638      	mov	r0, r7
 8009d28:	e7ba      	b.n	8009ca0 <_dtoa_r+0x9d8>
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	e7e2      	b.n	8009cf4 <_dtoa_r+0xa2c>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	db04      	blt.n	8009d3e <_dtoa_r+0xa76>
 8009d34:	9906      	ldr	r1, [sp, #24]
 8009d36:	430b      	orrs	r3, r1
 8009d38:	9904      	ldr	r1, [sp, #16]
 8009d3a:	430b      	orrs	r3, r1
 8009d3c:	d122      	bne.n	8009d84 <_dtoa_r+0xabc>
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	ddee      	ble.n	8009d20 <_dtoa_r+0xa58>
 8009d42:	ee18 1a10 	vmov	r1, s16
 8009d46:	2201      	movs	r2, #1
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fac9 	bl	800a2e0 <__lshift>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	ee08 0a10 	vmov	s16, r0
 8009d54:	f000 fb34 	bl	800a3c0 <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dc03      	bgt.n	8009d64 <_dtoa_r+0xa9c>
 8009d5c:	d1e0      	bne.n	8009d20 <_dtoa_r+0xa58>
 8009d5e:	f01a 0f01 	tst.w	sl, #1
 8009d62:	d0dd      	beq.n	8009d20 <_dtoa_r+0xa58>
 8009d64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d68:	d1d7      	bne.n	8009d1a <_dtoa_r+0xa52>
 8009d6a:	2339      	movs	r3, #57	; 0x39
 8009d6c:	f88b 3000 	strb.w	r3, [fp]
 8009d70:	462b      	mov	r3, r5
 8009d72:	461d      	mov	r5, r3
 8009d74:	3b01      	subs	r3, #1
 8009d76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d7a:	2a39      	cmp	r2, #57	; 0x39
 8009d7c:	d071      	beq.n	8009e62 <_dtoa_r+0xb9a>
 8009d7e:	3201      	adds	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	e746      	b.n	8009c12 <_dtoa_r+0x94a>
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	dd07      	ble.n	8009d98 <_dtoa_r+0xad0>
 8009d88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d8c:	d0ed      	beq.n	8009d6a <_dtoa_r+0xaa2>
 8009d8e:	f10a 0301 	add.w	r3, sl, #1
 8009d92:	f88b 3000 	strb.w	r3, [fp]
 8009d96:	e73c      	b.n	8009c12 <_dtoa_r+0x94a>
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009d9e:	4599      	cmp	r9, r3
 8009da0:	d047      	beq.n	8009e32 <_dtoa_r+0xb6a>
 8009da2:	ee18 1a10 	vmov	r1, s16
 8009da6:	2300      	movs	r3, #0
 8009da8:	220a      	movs	r2, #10
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 f8e8 	bl	8009f80 <__multadd>
 8009db0:	45b8      	cmp	r8, r7
 8009db2:	ee08 0a10 	vmov	s16, r0
 8009db6:	f04f 0300 	mov.w	r3, #0
 8009dba:	f04f 020a 	mov.w	r2, #10
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	d106      	bne.n	8009dd2 <_dtoa_r+0xb0a>
 8009dc4:	f000 f8dc 	bl	8009f80 <__multadd>
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4607      	mov	r7, r0
 8009dcc:	f109 0901 	add.w	r9, r9, #1
 8009dd0:	e772      	b.n	8009cb8 <_dtoa_r+0x9f0>
 8009dd2:	f000 f8d5 	bl	8009f80 <__multadd>
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	4680      	mov	r8, r0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	220a      	movs	r2, #10
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 f8ce 	bl	8009f80 <__multadd>
 8009de4:	4607      	mov	r7, r0
 8009de6:	e7f1      	b.n	8009dcc <_dtoa_r+0xb04>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	9302      	str	r3, [sp, #8]
 8009dec:	9d01      	ldr	r5, [sp, #4]
 8009dee:	ee18 0a10 	vmov	r0, s16
 8009df2:	4631      	mov	r1, r6
 8009df4:	f7ff f9dc 	bl	80091b0 <quorem>
 8009df8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	f805 ab01 	strb.w	sl, [r5], #1
 8009e02:	1aea      	subs	r2, r5, r3
 8009e04:	9b02      	ldr	r3, [sp, #8]
 8009e06:	4293      	cmp	r3, r2
 8009e08:	dd09      	ble.n	8009e1e <_dtoa_r+0xb56>
 8009e0a:	ee18 1a10 	vmov	r1, s16
 8009e0e:	2300      	movs	r3, #0
 8009e10:	220a      	movs	r2, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 f8b4 	bl	8009f80 <__multadd>
 8009e18:	ee08 0a10 	vmov	s16, r0
 8009e1c:	e7e7      	b.n	8009dee <_dtoa_r+0xb26>
 8009e1e:	9b02      	ldr	r3, [sp, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bfc8      	it	gt
 8009e24:	461d      	movgt	r5, r3
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	bfd8      	it	le
 8009e2a:	2501      	movle	r5, #1
 8009e2c:	441d      	add	r5, r3
 8009e2e:	f04f 0800 	mov.w	r8, #0
 8009e32:	ee18 1a10 	vmov	r1, s16
 8009e36:	2201      	movs	r2, #1
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fa51 	bl	800a2e0 <__lshift>
 8009e3e:	4631      	mov	r1, r6
 8009e40:	ee08 0a10 	vmov	s16, r0
 8009e44:	f000 fabc 	bl	800a3c0 <__mcmp>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	dc91      	bgt.n	8009d70 <_dtoa_r+0xaa8>
 8009e4c:	d102      	bne.n	8009e54 <_dtoa_r+0xb8c>
 8009e4e:	f01a 0f01 	tst.w	sl, #1
 8009e52:	d18d      	bne.n	8009d70 <_dtoa_r+0xaa8>
 8009e54:	462b      	mov	r3, r5
 8009e56:	461d      	mov	r5, r3
 8009e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e5c:	2a30      	cmp	r2, #48	; 0x30
 8009e5e:	d0fa      	beq.n	8009e56 <_dtoa_r+0xb8e>
 8009e60:	e6d7      	b.n	8009c12 <_dtoa_r+0x94a>
 8009e62:	9a01      	ldr	r2, [sp, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d184      	bne.n	8009d72 <_dtoa_r+0xaaa>
 8009e68:	9b00      	ldr	r3, [sp, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	2331      	movs	r3, #49	; 0x31
 8009e70:	7013      	strb	r3, [r2, #0]
 8009e72:	e6ce      	b.n	8009c12 <_dtoa_r+0x94a>
 8009e74:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <_dtoa_r+0xbd4>)
 8009e76:	f7ff ba95 	b.w	80093a4 <_dtoa_r+0xdc>
 8009e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f47f aa6e 	bne.w	800935e <_dtoa_r+0x96>
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <_dtoa_r+0xbd8>)
 8009e84:	f7ff ba8e 	b.w	80093a4 <_dtoa_r+0xdc>
 8009e88:	9b02      	ldr	r3, [sp, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	dcae      	bgt.n	8009dec <_dtoa_r+0xb24>
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	f73f aea8 	bgt.w	8009be6 <_dtoa_r+0x91e>
 8009e96:	e7a9      	b.n	8009dec <_dtoa_r+0xb24>
 8009e98:	0800b614 	.word	0x0800b614
 8009e9c:	0800b470 	.word	0x0800b470
 8009ea0:	0800b595 	.word	0x0800b595

08009ea4 <_localeconv_r>:
 8009ea4:	4800      	ldr	r0, [pc, #0]	; (8009ea8 <_localeconv_r+0x4>)
 8009ea6:	4770      	bx	lr
 8009ea8:	20000164 	.word	0x20000164

08009eac <malloc>:
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <malloc+0xc>)
 8009eae:	4601      	mov	r1, r0
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	f000 bc09 	b.w	800a6c8 <_malloc_r>
 8009eb6:	bf00      	nop
 8009eb8:	20000010 	.word	0x20000010

08009ebc <_Balloc>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	b976      	cbnz	r6, 8009ee4 <_Balloc+0x28>
 8009ec6:	2010      	movs	r0, #16
 8009ec8:	f7ff fff0 	bl	8009eac <malloc>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6260      	str	r0, [r4, #36]	; 0x24
 8009ed0:	b920      	cbnz	r0, 8009edc <_Balloc+0x20>
 8009ed2:	4b18      	ldr	r3, [pc, #96]	; (8009f34 <_Balloc+0x78>)
 8009ed4:	4818      	ldr	r0, [pc, #96]	; (8009f38 <_Balloc+0x7c>)
 8009ed6:	2166      	movs	r1, #102	; 0x66
 8009ed8:	f000 fc7a 	bl	800a7d0 <__assert_func>
 8009edc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee0:	6006      	str	r6, [r0, #0]
 8009ee2:	60c6      	str	r6, [r0, #12]
 8009ee4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ee6:	68f3      	ldr	r3, [r6, #12]
 8009ee8:	b183      	cbz	r3, 8009f0c <_Balloc+0x50>
 8009eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ef2:	b9b8      	cbnz	r0, 8009f24 <_Balloc+0x68>
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	fa01 f605 	lsl.w	r6, r1, r5
 8009efa:	1d72      	adds	r2, r6, #5
 8009efc:	0092      	lsls	r2, r2, #2
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fb60 	bl	800a5c4 <_calloc_r>
 8009f04:	b160      	cbz	r0, 8009f20 <_Balloc+0x64>
 8009f06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f0a:	e00e      	b.n	8009f2a <_Balloc+0x6e>
 8009f0c:	2221      	movs	r2, #33	; 0x21
 8009f0e:	2104      	movs	r1, #4
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 fb57 	bl	800a5c4 <_calloc_r>
 8009f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f18:	60f0      	str	r0, [r6, #12]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e4      	bne.n	8009eea <_Balloc+0x2e>
 8009f20:	2000      	movs	r0, #0
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	6802      	ldr	r2, [r0, #0]
 8009f26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f30:	e7f7      	b.n	8009f22 <_Balloc+0x66>
 8009f32:	bf00      	nop
 8009f34:	0800b5a2 	.word	0x0800b5a2
 8009f38:	0800b625 	.word	0x0800b625

08009f3c <_Bfree>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f40:	4605      	mov	r5, r0
 8009f42:	460c      	mov	r4, r1
 8009f44:	b976      	cbnz	r6, 8009f64 <_Bfree+0x28>
 8009f46:	2010      	movs	r0, #16
 8009f48:	f7ff ffb0 	bl	8009eac <malloc>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	6268      	str	r0, [r5, #36]	; 0x24
 8009f50:	b920      	cbnz	r0, 8009f5c <_Bfree+0x20>
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <_Bfree+0x3c>)
 8009f54:	4809      	ldr	r0, [pc, #36]	; (8009f7c <_Bfree+0x40>)
 8009f56:	218a      	movs	r1, #138	; 0x8a
 8009f58:	f000 fc3a 	bl	800a7d0 <__assert_func>
 8009f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f60:	6006      	str	r6, [r0, #0]
 8009f62:	60c6      	str	r6, [r0, #12]
 8009f64:	b13c      	cbz	r4, 8009f76 <_Bfree+0x3a>
 8009f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f68:	6862      	ldr	r2, [r4, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f70:	6021      	str	r1, [r4, #0]
 8009f72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	0800b5a2 	.word	0x0800b5a2
 8009f7c:	0800b625 	.word	0x0800b625

08009f80 <__multadd>:
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	690d      	ldr	r5, [r1, #16]
 8009f86:	4607      	mov	r7, r0
 8009f88:	460c      	mov	r4, r1
 8009f8a:	461e      	mov	r6, r3
 8009f8c:	f101 0c14 	add.w	ip, r1, #20
 8009f90:	2000      	movs	r0, #0
 8009f92:	f8dc 3000 	ldr.w	r3, [ip]
 8009f96:	b299      	uxth	r1, r3
 8009f98:	fb02 6101 	mla	r1, r2, r1, r6
 8009f9c:	0c1e      	lsrs	r6, r3, #16
 8009f9e:	0c0b      	lsrs	r3, r1, #16
 8009fa0:	fb02 3306 	mla	r3, r2, r6, r3
 8009fa4:	b289      	uxth	r1, r1
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fac:	4285      	cmp	r5, r0
 8009fae:	f84c 1b04 	str.w	r1, [ip], #4
 8009fb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fb6:	dcec      	bgt.n	8009f92 <__multadd+0x12>
 8009fb8:	b30e      	cbz	r6, 8009ffe <__multadd+0x7e>
 8009fba:	68a3      	ldr	r3, [r4, #8]
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	dc19      	bgt.n	8009ff4 <__multadd+0x74>
 8009fc0:	6861      	ldr	r1, [r4, #4]
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	3101      	adds	r1, #1
 8009fc6:	f7ff ff79 	bl	8009ebc <_Balloc>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	b928      	cbnz	r0, 8009fda <__multadd+0x5a>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <__multadd+0x84>)
 8009fd2:	480d      	ldr	r0, [pc, #52]	; (800a008 <__multadd+0x88>)
 8009fd4:	21b5      	movs	r1, #181	; 0xb5
 8009fd6:	f000 fbfb 	bl	800a7d0 <__assert_func>
 8009fda:	6922      	ldr	r2, [r4, #16]
 8009fdc:	3202      	adds	r2, #2
 8009fde:	f104 010c 	add.w	r1, r4, #12
 8009fe2:	0092      	lsls	r2, r2, #2
 8009fe4:	300c      	adds	r0, #12
 8009fe6:	f7fe fbd7 	bl	8008798 <memcpy>
 8009fea:	4621      	mov	r1, r4
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff ffa5 	bl	8009f3c <_Bfree>
 8009ff2:	4644      	mov	r4, r8
 8009ff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	615e      	str	r6, [r3, #20]
 8009ffc:	6125      	str	r5, [r4, #16]
 8009ffe:	4620      	mov	r0, r4
 800a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a004:	0800b614 	.word	0x0800b614
 800a008:	0800b625 	.word	0x0800b625

0800a00c <__hi0bits>:
 800a00c:	0c03      	lsrs	r3, r0, #16
 800a00e:	041b      	lsls	r3, r3, #16
 800a010:	b9d3      	cbnz	r3, 800a048 <__hi0bits+0x3c>
 800a012:	0400      	lsls	r0, r0, #16
 800a014:	2310      	movs	r3, #16
 800a016:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a01a:	bf04      	itt	eq
 800a01c:	0200      	lsleq	r0, r0, #8
 800a01e:	3308      	addeq	r3, #8
 800a020:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a024:	bf04      	itt	eq
 800a026:	0100      	lsleq	r0, r0, #4
 800a028:	3304      	addeq	r3, #4
 800a02a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a02e:	bf04      	itt	eq
 800a030:	0080      	lsleq	r0, r0, #2
 800a032:	3302      	addeq	r3, #2
 800a034:	2800      	cmp	r0, #0
 800a036:	db05      	blt.n	800a044 <__hi0bits+0x38>
 800a038:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a03c:	f103 0301 	add.w	r3, r3, #1
 800a040:	bf08      	it	eq
 800a042:	2320      	moveq	r3, #32
 800a044:	4618      	mov	r0, r3
 800a046:	4770      	bx	lr
 800a048:	2300      	movs	r3, #0
 800a04a:	e7e4      	b.n	800a016 <__hi0bits+0xa>

0800a04c <__lo0bits>:
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	f013 0207 	ands.w	r2, r3, #7
 800a052:	4601      	mov	r1, r0
 800a054:	d00b      	beq.n	800a06e <__lo0bits+0x22>
 800a056:	07da      	lsls	r2, r3, #31
 800a058:	d423      	bmi.n	800a0a2 <__lo0bits+0x56>
 800a05a:	0798      	lsls	r0, r3, #30
 800a05c:	bf49      	itett	mi
 800a05e:	085b      	lsrmi	r3, r3, #1
 800a060:	089b      	lsrpl	r3, r3, #2
 800a062:	2001      	movmi	r0, #1
 800a064:	600b      	strmi	r3, [r1, #0]
 800a066:	bf5c      	itt	pl
 800a068:	600b      	strpl	r3, [r1, #0]
 800a06a:	2002      	movpl	r0, #2
 800a06c:	4770      	bx	lr
 800a06e:	b298      	uxth	r0, r3
 800a070:	b9a8      	cbnz	r0, 800a09e <__lo0bits+0x52>
 800a072:	0c1b      	lsrs	r3, r3, #16
 800a074:	2010      	movs	r0, #16
 800a076:	b2da      	uxtb	r2, r3
 800a078:	b90a      	cbnz	r2, 800a07e <__lo0bits+0x32>
 800a07a:	3008      	adds	r0, #8
 800a07c:	0a1b      	lsrs	r3, r3, #8
 800a07e:	071a      	lsls	r2, r3, #28
 800a080:	bf04      	itt	eq
 800a082:	091b      	lsreq	r3, r3, #4
 800a084:	3004      	addeq	r0, #4
 800a086:	079a      	lsls	r2, r3, #30
 800a088:	bf04      	itt	eq
 800a08a:	089b      	lsreq	r3, r3, #2
 800a08c:	3002      	addeq	r0, #2
 800a08e:	07da      	lsls	r2, r3, #31
 800a090:	d403      	bmi.n	800a09a <__lo0bits+0x4e>
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	f100 0001 	add.w	r0, r0, #1
 800a098:	d005      	beq.n	800a0a6 <__lo0bits+0x5a>
 800a09a:	600b      	str	r3, [r1, #0]
 800a09c:	4770      	bx	lr
 800a09e:	4610      	mov	r0, r2
 800a0a0:	e7e9      	b.n	800a076 <__lo0bits+0x2a>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	4770      	bx	lr
 800a0a6:	2020      	movs	r0, #32
 800a0a8:	4770      	bx	lr
	...

0800a0ac <__i2b>:
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	f7ff ff03 	bl	8009ebc <_Balloc>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	b928      	cbnz	r0, 800a0c6 <__i2b+0x1a>
 800a0ba:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <__i2b+0x24>)
 800a0bc:	4805      	ldr	r0, [pc, #20]	; (800a0d4 <__i2b+0x28>)
 800a0be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0c2:	f000 fb85 	bl	800a7d0 <__assert_func>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	6144      	str	r4, [r0, #20]
 800a0ca:	6103      	str	r3, [r0, #16]
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	bf00      	nop
 800a0d0:	0800b614 	.word	0x0800b614
 800a0d4:	0800b625 	.word	0x0800b625

0800a0d8 <__multiply>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	4691      	mov	r9, r2
 800a0de:	690a      	ldr	r2, [r1, #16]
 800a0e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	bfb8      	it	lt
 800a0e8:	460b      	movlt	r3, r1
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	bfbc      	itt	lt
 800a0ee:	464c      	movlt	r4, r9
 800a0f0:	4699      	movlt	r9, r3
 800a0f2:	6927      	ldr	r7, [r4, #16]
 800a0f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0f8:	68a3      	ldr	r3, [r4, #8]
 800a0fa:	6861      	ldr	r1, [r4, #4]
 800a0fc:	eb07 060a 	add.w	r6, r7, sl
 800a100:	42b3      	cmp	r3, r6
 800a102:	b085      	sub	sp, #20
 800a104:	bfb8      	it	lt
 800a106:	3101      	addlt	r1, #1
 800a108:	f7ff fed8 	bl	8009ebc <_Balloc>
 800a10c:	b930      	cbnz	r0, 800a11c <__multiply+0x44>
 800a10e:	4602      	mov	r2, r0
 800a110:	4b44      	ldr	r3, [pc, #272]	; (800a224 <__multiply+0x14c>)
 800a112:	4845      	ldr	r0, [pc, #276]	; (800a228 <__multiply+0x150>)
 800a114:	f240 115d 	movw	r1, #349	; 0x15d
 800a118:	f000 fb5a 	bl	800a7d0 <__assert_func>
 800a11c:	f100 0514 	add.w	r5, r0, #20
 800a120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a124:	462b      	mov	r3, r5
 800a126:	2200      	movs	r2, #0
 800a128:	4543      	cmp	r3, r8
 800a12a:	d321      	bcc.n	800a170 <__multiply+0x98>
 800a12c:	f104 0314 	add.w	r3, r4, #20
 800a130:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a134:	f109 0314 	add.w	r3, r9, #20
 800a138:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a13c:	9202      	str	r2, [sp, #8]
 800a13e:	1b3a      	subs	r2, r7, r4
 800a140:	3a15      	subs	r2, #21
 800a142:	f022 0203 	bic.w	r2, r2, #3
 800a146:	3204      	adds	r2, #4
 800a148:	f104 0115 	add.w	r1, r4, #21
 800a14c:	428f      	cmp	r7, r1
 800a14e:	bf38      	it	cc
 800a150:	2204      	movcc	r2, #4
 800a152:	9201      	str	r2, [sp, #4]
 800a154:	9a02      	ldr	r2, [sp, #8]
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d80c      	bhi.n	800a176 <__multiply+0x9e>
 800a15c:	2e00      	cmp	r6, #0
 800a15e:	dd03      	ble.n	800a168 <__multiply+0x90>
 800a160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a164:	2b00      	cmp	r3, #0
 800a166:	d05a      	beq.n	800a21e <__multiply+0x146>
 800a168:	6106      	str	r6, [r0, #16]
 800a16a:	b005      	add	sp, #20
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a170:	f843 2b04 	str.w	r2, [r3], #4
 800a174:	e7d8      	b.n	800a128 <__multiply+0x50>
 800a176:	f8b3 a000 	ldrh.w	sl, [r3]
 800a17a:	f1ba 0f00 	cmp.w	sl, #0
 800a17e:	d024      	beq.n	800a1ca <__multiply+0xf2>
 800a180:	f104 0e14 	add.w	lr, r4, #20
 800a184:	46a9      	mov	r9, r5
 800a186:	f04f 0c00 	mov.w	ip, #0
 800a18a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a18e:	f8d9 1000 	ldr.w	r1, [r9]
 800a192:	fa1f fb82 	uxth.w	fp, r2
 800a196:	b289      	uxth	r1, r1
 800a198:	fb0a 110b 	mla	r1, sl, fp, r1
 800a19c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1a4:	4461      	add	r1, ip
 800a1a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1b2:	b289      	uxth	r1, r1
 800a1b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1b8:	4577      	cmp	r7, lr
 800a1ba:	f849 1b04 	str.w	r1, [r9], #4
 800a1be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1c2:	d8e2      	bhi.n	800a18a <__multiply+0xb2>
 800a1c4:	9a01      	ldr	r2, [sp, #4]
 800a1c6:	f845 c002 	str.w	ip, [r5, r2]
 800a1ca:	9a03      	ldr	r2, [sp, #12]
 800a1cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d020      	beq.n	800a21a <__multiply+0x142>
 800a1d8:	6829      	ldr	r1, [r5, #0]
 800a1da:	f104 0c14 	add.w	ip, r4, #20
 800a1de:	46ae      	mov	lr, r5
 800a1e0:	f04f 0a00 	mov.w	sl, #0
 800a1e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a1f0:	4492      	add	sl, r2
 800a1f2:	b289      	uxth	r1, r1
 800a1f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a1fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a200:	f8be 1000 	ldrh.w	r1, [lr]
 800a204:	0c12      	lsrs	r2, r2, #16
 800a206:	fb09 1102 	mla	r1, r9, r2, r1
 800a20a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a20e:	4567      	cmp	r7, ip
 800a210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a214:	d8e6      	bhi.n	800a1e4 <__multiply+0x10c>
 800a216:	9a01      	ldr	r2, [sp, #4]
 800a218:	50a9      	str	r1, [r5, r2]
 800a21a:	3504      	adds	r5, #4
 800a21c:	e79a      	b.n	800a154 <__multiply+0x7c>
 800a21e:	3e01      	subs	r6, #1
 800a220:	e79c      	b.n	800a15c <__multiply+0x84>
 800a222:	bf00      	nop
 800a224:	0800b614 	.word	0x0800b614
 800a228:	0800b625 	.word	0x0800b625

0800a22c <__pow5mult>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	4615      	mov	r5, r2
 800a232:	f012 0203 	ands.w	r2, r2, #3
 800a236:	4606      	mov	r6, r0
 800a238:	460f      	mov	r7, r1
 800a23a:	d007      	beq.n	800a24c <__pow5mult+0x20>
 800a23c:	4c25      	ldr	r4, [pc, #148]	; (800a2d4 <__pow5mult+0xa8>)
 800a23e:	3a01      	subs	r2, #1
 800a240:	2300      	movs	r3, #0
 800a242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a246:	f7ff fe9b 	bl	8009f80 <__multadd>
 800a24a:	4607      	mov	r7, r0
 800a24c:	10ad      	asrs	r5, r5, #2
 800a24e:	d03d      	beq.n	800a2cc <__pow5mult+0xa0>
 800a250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a252:	b97c      	cbnz	r4, 800a274 <__pow5mult+0x48>
 800a254:	2010      	movs	r0, #16
 800a256:	f7ff fe29 	bl	8009eac <malloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	6270      	str	r0, [r6, #36]	; 0x24
 800a25e:	b928      	cbnz	r0, 800a26c <__pow5mult+0x40>
 800a260:	4b1d      	ldr	r3, [pc, #116]	; (800a2d8 <__pow5mult+0xac>)
 800a262:	481e      	ldr	r0, [pc, #120]	; (800a2dc <__pow5mult+0xb0>)
 800a264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a268:	f000 fab2 	bl	800a7d0 <__assert_func>
 800a26c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a270:	6004      	str	r4, [r0, #0]
 800a272:	60c4      	str	r4, [r0, #12]
 800a274:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a27c:	b94c      	cbnz	r4, 800a292 <__pow5mult+0x66>
 800a27e:	f240 2171 	movw	r1, #625	; 0x271
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ff12 	bl	800a0ac <__i2b>
 800a288:	2300      	movs	r3, #0
 800a28a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a28e:	4604      	mov	r4, r0
 800a290:	6003      	str	r3, [r0, #0]
 800a292:	f04f 0900 	mov.w	r9, #0
 800a296:	07eb      	lsls	r3, r5, #31
 800a298:	d50a      	bpl.n	800a2b0 <__pow5mult+0x84>
 800a29a:	4639      	mov	r1, r7
 800a29c:	4622      	mov	r2, r4
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ff1a 	bl	800a0d8 <__multiply>
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff fe47 	bl	8009f3c <_Bfree>
 800a2ae:	4647      	mov	r7, r8
 800a2b0:	106d      	asrs	r5, r5, #1
 800a2b2:	d00b      	beq.n	800a2cc <__pow5mult+0xa0>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	b938      	cbnz	r0, 800a2c8 <__pow5mult+0x9c>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff ff0b 	bl	800a0d8 <__multiply>
 800a2c2:	6020      	str	r0, [r4, #0]
 800a2c4:	f8c0 9000 	str.w	r9, [r0]
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	e7e4      	b.n	800a296 <__pow5mult+0x6a>
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800b778 	.word	0x0800b778
 800a2d8:	0800b5a2 	.word	0x0800b5a2
 800a2dc:	0800b625 	.word	0x0800b625

0800a2e0 <__lshift>:
 800a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	6849      	ldr	r1, [r1, #4]
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	4691      	mov	r9, r2
 800a2f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2f8:	f108 0601 	add.w	r6, r8, #1
 800a2fc:	42b3      	cmp	r3, r6
 800a2fe:	db0b      	blt.n	800a318 <__lshift+0x38>
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff fddb 	bl	8009ebc <_Balloc>
 800a306:	4605      	mov	r5, r0
 800a308:	b948      	cbnz	r0, 800a31e <__lshift+0x3e>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4b2a      	ldr	r3, [pc, #168]	; (800a3b8 <__lshift+0xd8>)
 800a30e:	482b      	ldr	r0, [pc, #172]	; (800a3bc <__lshift+0xdc>)
 800a310:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a314:	f000 fa5c 	bl	800a7d0 <__assert_func>
 800a318:	3101      	adds	r1, #1
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	e7ee      	b.n	800a2fc <__lshift+0x1c>
 800a31e:	2300      	movs	r3, #0
 800a320:	f100 0114 	add.w	r1, r0, #20
 800a324:	f100 0210 	add.w	r2, r0, #16
 800a328:	4618      	mov	r0, r3
 800a32a:	4553      	cmp	r3, sl
 800a32c:	db37      	blt.n	800a39e <__lshift+0xbe>
 800a32e:	6920      	ldr	r0, [r4, #16]
 800a330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a334:	f104 0314 	add.w	r3, r4, #20
 800a338:	f019 091f 	ands.w	r9, r9, #31
 800a33c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a340:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a344:	d02f      	beq.n	800a3a6 <__lshift+0xc6>
 800a346:	f1c9 0e20 	rsb	lr, r9, #32
 800a34a:	468a      	mov	sl, r1
 800a34c:	f04f 0c00 	mov.w	ip, #0
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	fa02 f209 	lsl.w	r2, r2, r9
 800a356:	ea42 020c 	orr.w	r2, r2, ip
 800a35a:	f84a 2b04 	str.w	r2, [sl], #4
 800a35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a362:	4298      	cmp	r0, r3
 800a364:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a368:	d8f2      	bhi.n	800a350 <__lshift+0x70>
 800a36a:	1b03      	subs	r3, r0, r4
 800a36c:	3b15      	subs	r3, #21
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	3304      	adds	r3, #4
 800a374:	f104 0215 	add.w	r2, r4, #21
 800a378:	4290      	cmp	r0, r2
 800a37a:	bf38      	it	cc
 800a37c:	2304      	movcc	r3, #4
 800a37e:	f841 c003 	str.w	ip, [r1, r3]
 800a382:	f1bc 0f00 	cmp.w	ip, #0
 800a386:	d001      	beq.n	800a38c <__lshift+0xac>
 800a388:	f108 0602 	add.w	r6, r8, #2
 800a38c:	3e01      	subs	r6, #1
 800a38e:	4638      	mov	r0, r7
 800a390:	612e      	str	r6, [r5, #16]
 800a392:	4621      	mov	r1, r4
 800a394:	f7ff fdd2 	bl	8009f3c <_Bfree>
 800a398:	4628      	mov	r0, r5
 800a39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	e7c1      	b.n	800a32a <__lshift+0x4a>
 800a3a6:	3904      	subs	r1, #4
 800a3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3b0:	4298      	cmp	r0, r3
 800a3b2:	d8f9      	bhi.n	800a3a8 <__lshift+0xc8>
 800a3b4:	e7ea      	b.n	800a38c <__lshift+0xac>
 800a3b6:	bf00      	nop
 800a3b8:	0800b614 	.word	0x0800b614
 800a3bc:	0800b625 	.word	0x0800b625

0800a3c0 <__mcmp>:
 800a3c0:	b530      	push	{r4, r5, lr}
 800a3c2:	6902      	ldr	r2, [r0, #16]
 800a3c4:	690c      	ldr	r4, [r1, #16]
 800a3c6:	1b12      	subs	r2, r2, r4
 800a3c8:	d10e      	bne.n	800a3e8 <__mcmp+0x28>
 800a3ca:	f100 0314 	add.w	r3, r0, #20
 800a3ce:	3114      	adds	r1, #20
 800a3d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3e0:	42a5      	cmp	r5, r4
 800a3e2:	d003      	beq.n	800a3ec <__mcmp+0x2c>
 800a3e4:	d305      	bcc.n	800a3f2 <__mcmp+0x32>
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	bd30      	pop	{r4, r5, pc}
 800a3ec:	4283      	cmp	r3, r0
 800a3ee:	d3f3      	bcc.n	800a3d8 <__mcmp+0x18>
 800a3f0:	e7fa      	b.n	800a3e8 <__mcmp+0x28>
 800a3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f6:	e7f7      	b.n	800a3e8 <__mcmp+0x28>

0800a3f8 <__mdiff>:
 800a3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	4606      	mov	r6, r0
 800a400:	4611      	mov	r1, r2
 800a402:	4620      	mov	r0, r4
 800a404:	4690      	mov	r8, r2
 800a406:	f7ff ffdb 	bl	800a3c0 <__mcmp>
 800a40a:	1e05      	subs	r5, r0, #0
 800a40c:	d110      	bne.n	800a430 <__mdiff+0x38>
 800a40e:	4629      	mov	r1, r5
 800a410:	4630      	mov	r0, r6
 800a412:	f7ff fd53 	bl	8009ebc <_Balloc>
 800a416:	b930      	cbnz	r0, 800a426 <__mdiff+0x2e>
 800a418:	4b3a      	ldr	r3, [pc, #232]	; (800a504 <__mdiff+0x10c>)
 800a41a:	4602      	mov	r2, r0
 800a41c:	f240 2132 	movw	r1, #562	; 0x232
 800a420:	4839      	ldr	r0, [pc, #228]	; (800a508 <__mdiff+0x110>)
 800a422:	f000 f9d5 	bl	800a7d0 <__assert_func>
 800a426:	2301      	movs	r3, #1
 800a428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	bfa4      	itt	ge
 800a432:	4643      	movge	r3, r8
 800a434:	46a0      	movge	r8, r4
 800a436:	4630      	mov	r0, r6
 800a438:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a43c:	bfa6      	itte	ge
 800a43e:	461c      	movge	r4, r3
 800a440:	2500      	movge	r5, #0
 800a442:	2501      	movlt	r5, #1
 800a444:	f7ff fd3a 	bl	8009ebc <_Balloc>
 800a448:	b920      	cbnz	r0, 800a454 <__mdiff+0x5c>
 800a44a:	4b2e      	ldr	r3, [pc, #184]	; (800a504 <__mdiff+0x10c>)
 800a44c:	4602      	mov	r2, r0
 800a44e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a452:	e7e5      	b.n	800a420 <__mdiff+0x28>
 800a454:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a458:	6926      	ldr	r6, [r4, #16]
 800a45a:	60c5      	str	r5, [r0, #12]
 800a45c:	f104 0914 	add.w	r9, r4, #20
 800a460:	f108 0514 	add.w	r5, r8, #20
 800a464:	f100 0e14 	add.w	lr, r0, #20
 800a468:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a46c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a470:	f108 0210 	add.w	r2, r8, #16
 800a474:	46f2      	mov	sl, lr
 800a476:	2100      	movs	r1, #0
 800a478:	f859 3b04 	ldr.w	r3, [r9], #4
 800a47c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a480:	fa1f f883 	uxth.w	r8, r3
 800a484:	fa11 f18b 	uxtah	r1, r1, fp
 800a488:	0c1b      	lsrs	r3, r3, #16
 800a48a:	eba1 0808 	sub.w	r8, r1, r8
 800a48e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a492:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a496:	fa1f f888 	uxth.w	r8, r8
 800a49a:	1419      	asrs	r1, r3, #16
 800a49c:	454e      	cmp	r6, r9
 800a49e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a4a6:	d8e7      	bhi.n	800a478 <__mdiff+0x80>
 800a4a8:	1b33      	subs	r3, r6, r4
 800a4aa:	3b15      	subs	r3, #21
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	3415      	adds	r4, #21
 800a4b4:	42a6      	cmp	r6, r4
 800a4b6:	bf38      	it	cc
 800a4b8:	2304      	movcc	r3, #4
 800a4ba:	441d      	add	r5, r3
 800a4bc:	4473      	add	r3, lr
 800a4be:	469e      	mov	lr, r3
 800a4c0:	462e      	mov	r6, r5
 800a4c2:	4566      	cmp	r6, ip
 800a4c4:	d30e      	bcc.n	800a4e4 <__mdiff+0xec>
 800a4c6:	f10c 0203 	add.w	r2, ip, #3
 800a4ca:	1b52      	subs	r2, r2, r5
 800a4cc:	f022 0203 	bic.w	r2, r2, #3
 800a4d0:	3d03      	subs	r5, #3
 800a4d2:	45ac      	cmp	ip, r5
 800a4d4:	bf38      	it	cc
 800a4d6:	2200      	movcc	r2, #0
 800a4d8:	441a      	add	r2, r3
 800a4da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4de:	b17b      	cbz	r3, 800a500 <__mdiff+0x108>
 800a4e0:	6107      	str	r7, [r0, #16]
 800a4e2:	e7a3      	b.n	800a42c <__mdiff+0x34>
 800a4e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4e8:	fa11 f288 	uxtah	r2, r1, r8
 800a4ec:	1414      	asrs	r4, r2, #16
 800a4ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4f2:	b292      	uxth	r2, r2
 800a4f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a4fc:	1421      	asrs	r1, r4, #16
 800a4fe:	e7e0      	b.n	800a4c2 <__mdiff+0xca>
 800a500:	3f01      	subs	r7, #1
 800a502:	e7ea      	b.n	800a4da <__mdiff+0xe2>
 800a504:	0800b614 	.word	0x0800b614
 800a508:	0800b625 	.word	0x0800b625

0800a50c <__d2b>:
 800a50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a510:	4689      	mov	r9, r1
 800a512:	2101      	movs	r1, #1
 800a514:	ec57 6b10 	vmov	r6, r7, d0
 800a518:	4690      	mov	r8, r2
 800a51a:	f7ff fccf 	bl	8009ebc <_Balloc>
 800a51e:	4604      	mov	r4, r0
 800a520:	b930      	cbnz	r0, 800a530 <__d2b+0x24>
 800a522:	4602      	mov	r2, r0
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <__d2b+0xb0>)
 800a526:	4826      	ldr	r0, [pc, #152]	; (800a5c0 <__d2b+0xb4>)
 800a528:	f240 310a 	movw	r1, #778	; 0x30a
 800a52c:	f000 f950 	bl	800a7d0 <__assert_func>
 800a530:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a534:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a538:	bb35      	cbnz	r5, 800a588 <__d2b+0x7c>
 800a53a:	2e00      	cmp	r6, #0
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	d028      	beq.n	800a592 <__d2b+0x86>
 800a540:	4668      	mov	r0, sp
 800a542:	9600      	str	r6, [sp, #0]
 800a544:	f7ff fd82 	bl	800a04c <__lo0bits>
 800a548:	9900      	ldr	r1, [sp, #0]
 800a54a:	b300      	cbz	r0, 800a58e <__d2b+0x82>
 800a54c:	9a01      	ldr	r2, [sp, #4]
 800a54e:	f1c0 0320 	rsb	r3, r0, #32
 800a552:	fa02 f303 	lsl.w	r3, r2, r3
 800a556:	430b      	orrs	r3, r1
 800a558:	40c2      	lsrs	r2, r0
 800a55a:	6163      	str	r3, [r4, #20]
 800a55c:	9201      	str	r2, [sp, #4]
 800a55e:	9b01      	ldr	r3, [sp, #4]
 800a560:	61a3      	str	r3, [r4, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	bf14      	ite	ne
 800a566:	2202      	movne	r2, #2
 800a568:	2201      	moveq	r2, #1
 800a56a:	6122      	str	r2, [r4, #16]
 800a56c:	b1d5      	cbz	r5, 800a5a4 <__d2b+0x98>
 800a56e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a572:	4405      	add	r5, r0
 800a574:	f8c9 5000 	str.w	r5, [r9]
 800a578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a57c:	f8c8 0000 	str.w	r0, [r8]
 800a580:	4620      	mov	r0, r4
 800a582:	b003      	add	sp, #12
 800a584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a58c:	e7d5      	b.n	800a53a <__d2b+0x2e>
 800a58e:	6161      	str	r1, [r4, #20]
 800a590:	e7e5      	b.n	800a55e <__d2b+0x52>
 800a592:	a801      	add	r0, sp, #4
 800a594:	f7ff fd5a 	bl	800a04c <__lo0bits>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	6163      	str	r3, [r4, #20]
 800a59c:	2201      	movs	r2, #1
 800a59e:	6122      	str	r2, [r4, #16]
 800a5a0:	3020      	adds	r0, #32
 800a5a2:	e7e3      	b.n	800a56c <__d2b+0x60>
 800a5a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5ac:	f8c9 0000 	str.w	r0, [r9]
 800a5b0:	6918      	ldr	r0, [r3, #16]
 800a5b2:	f7ff fd2b 	bl	800a00c <__hi0bits>
 800a5b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ba:	e7df      	b.n	800a57c <__d2b+0x70>
 800a5bc:	0800b614 	.word	0x0800b614
 800a5c0:	0800b625 	.word	0x0800b625

0800a5c4 <_calloc_r>:
 800a5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a5ca:	b94c      	cbnz	r4, 800a5e0 <_calloc_r+0x1c>
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	9201      	str	r2, [sp, #4]
 800a5d0:	f000 f87a 	bl	800a6c8 <_malloc_r>
 800a5d4:	9a01      	ldr	r2, [sp, #4]
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	b930      	cbnz	r0, 800a5e8 <_calloc_r+0x24>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	b003      	add	sp, #12
 800a5de:	bd30      	pop	{r4, r5, pc}
 800a5e0:	220c      	movs	r2, #12
 800a5e2:	6002      	str	r2, [r0, #0]
 800a5e4:	2500      	movs	r5, #0
 800a5e6:	e7f8      	b.n	800a5da <_calloc_r+0x16>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7fe f8e3 	bl	80087b4 <memset>
 800a5ee:	e7f4      	b.n	800a5da <_calloc_r+0x16>

0800a5f0 <_free_r>:
 800a5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5f2:	2900      	cmp	r1, #0
 800a5f4:	d044      	beq.n	800a680 <_free_r+0x90>
 800a5f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5fa:	9001      	str	r0, [sp, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a602:	bfb8      	it	lt
 800a604:	18e4      	addlt	r4, r4, r3
 800a606:	f000 f925 	bl	800a854 <__malloc_lock>
 800a60a:	4a1e      	ldr	r2, [pc, #120]	; (800a684 <_free_r+0x94>)
 800a60c:	9801      	ldr	r0, [sp, #4]
 800a60e:	6813      	ldr	r3, [r2, #0]
 800a610:	b933      	cbnz	r3, 800a620 <_free_r+0x30>
 800a612:	6063      	str	r3, [r4, #4]
 800a614:	6014      	str	r4, [r2, #0]
 800a616:	b003      	add	sp, #12
 800a618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a61c:	f000 b920 	b.w	800a860 <__malloc_unlock>
 800a620:	42a3      	cmp	r3, r4
 800a622:	d908      	bls.n	800a636 <_free_r+0x46>
 800a624:	6825      	ldr	r5, [r4, #0]
 800a626:	1961      	adds	r1, r4, r5
 800a628:	428b      	cmp	r3, r1
 800a62a:	bf01      	itttt	eq
 800a62c:	6819      	ldreq	r1, [r3, #0]
 800a62e:	685b      	ldreq	r3, [r3, #4]
 800a630:	1949      	addeq	r1, r1, r5
 800a632:	6021      	streq	r1, [r4, #0]
 800a634:	e7ed      	b.n	800a612 <_free_r+0x22>
 800a636:	461a      	mov	r2, r3
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	b10b      	cbz	r3, 800a640 <_free_r+0x50>
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	d9fa      	bls.n	800a636 <_free_r+0x46>
 800a640:	6811      	ldr	r1, [r2, #0]
 800a642:	1855      	adds	r5, r2, r1
 800a644:	42a5      	cmp	r5, r4
 800a646:	d10b      	bne.n	800a660 <_free_r+0x70>
 800a648:	6824      	ldr	r4, [r4, #0]
 800a64a:	4421      	add	r1, r4
 800a64c:	1854      	adds	r4, r2, r1
 800a64e:	42a3      	cmp	r3, r4
 800a650:	6011      	str	r1, [r2, #0]
 800a652:	d1e0      	bne.n	800a616 <_free_r+0x26>
 800a654:	681c      	ldr	r4, [r3, #0]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	6053      	str	r3, [r2, #4]
 800a65a:	4421      	add	r1, r4
 800a65c:	6011      	str	r1, [r2, #0]
 800a65e:	e7da      	b.n	800a616 <_free_r+0x26>
 800a660:	d902      	bls.n	800a668 <_free_r+0x78>
 800a662:	230c      	movs	r3, #12
 800a664:	6003      	str	r3, [r0, #0]
 800a666:	e7d6      	b.n	800a616 <_free_r+0x26>
 800a668:	6825      	ldr	r5, [r4, #0]
 800a66a:	1961      	adds	r1, r4, r5
 800a66c:	428b      	cmp	r3, r1
 800a66e:	bf04      	itt	eq
 800a670:	6819      	ldreq	r1, [r3, #0]
 800a672:	685b      	ldreq	r3, [r3, #4]
 800a674:	6063      	str	r3, [r4, #4]
 800a676:	bf04      	itt	eq
 800a678:	1949      	addeq	r1, r1, r5
 800a67a:	6021      	streq	r1, [r4, #0]
 800a67c:	6054      	str	r4, [r2, #4]
 800a67e:	e7ca      	b.n	800a616 <_free_r+0x26>
 800a680:	b003      	add	sp, #12
 800a682:	bd30      	pop	{r4, r5, pc}
 800a684:	200005a4 	.word	0x200005a4

0800a688 <sbrk_aligned>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	4e0e      	ldr	r6, [pc, #56]	; (800a6c4 <sbrk_aligned+0x3c>)
 800a68c:	460c      	mov	r4, r1
 800a68e:	6831      	ldr	r1, [r6, #0]
 800a690:	4605      	mov	r5, r0
 800a692:	b911      	cbnz	r1, 800a69a <sbrk_aligned+0x12>
 800a694:	f000 f88c 	bl	800a7b0 <_sbrk_r>
 800a698:	6030      	str	r0, [r6, #0]
 800a69a:	4621      	mov	r1, r4
 800a69c:	4628      	mov	r0, r5
 800a69e:	f000 f887 	bl	800a7b0 <_sbrk_r>
 800a6a2:	1c43      	adds	r3, r0, #1
 800a6a4:	d00a      	beq.n	800a6bc <sbrk_aligned+0x34>
 800a6a6:	1cc4      	adds	r4, r0, #3
 800a6a8:	f024 0403 	bic.w	r4, r4, #3
 800a6ac:	42a0      	cmp	r0, r4
 800a6ae:	d007      	beq.n	800a6c0 <sbrk_aligned+0x38>
 800a6b0:	1a21      	subs	r1, r4, r0
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 f87c 	bl	800a7b0 <_sbrk_r>
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d101      	bne.n	800a6c0 <sbrk_aligned+0x38>
 800a6bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	200005a8 	.word	0x200005a8

0800a6c8 <_malloc_r>:
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	1ccd      	adds	r5, r1, #3
 800a6ce:	f025 0503 	bic.w	r5, r5, #3
 800a6d2:	3508      	adds	r5, #8
 800a6d4:	2d0c      	cmp	r5, #12
 800a6d6:	bf38      	it	cc
 800a6d8:	250c      	movcc	r5, #12
 800a6da:	2d00      	cmp	r5, #0
 800a6dc:	4607      	mov	r7, r0
 800a6de:	db01      	blt.n	800a6e4 <_malloc_r+0x1c>
 800a6e0:	42a9      	cmp	r1, r5
 800a6e2:	d905      	bls.n	800a6f0 <_malloc_r+0x28>
 800a6e4:	230c      	movs	r3, #12
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	2600      	movs	r6, #0
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	4e2e      	ldr	r6, [pc, #184]	; (800a7ac <_malloc_r+0xe4>)
 800a6f2:	f000 f8af 	bl	800a854 <__malloc_lock>
 800a6f6:	6833      	ldr	r3, [r6, #0]
 800a6f8:	461c      	mov	r4, r3
 800a6fa:	bb34      	cbnz	r4, 800a74a <_malloc_r+0x82>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4638      	mov	r0, r7
 800a700:	f7ff ffc2 	bl	800a688 <sbrk_aligned>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	4604      	mov	r4, r0
 800a708:	d14d      	bne.n	800a7a6 <_malloc_r+0xde>
 800a70a:	6834      	ldr	r4, [r6, #0]
 800a70c:	4626      	mov	r6, r4
 800a70e:	2e00      	cmp	r6, #0
 800a710:	d140      	bne.n	800a794 <_malloc_r+0xcc>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	4631      	mov	r1, r6
 800a716:	4638      	mov	r0, r7
 800a718:	eb04 0803 	add.w	r8, r4, r3
 800a71c:	f000 f848 	bl	800a7b0 <_sbrk_r>
 800a720:	4580      	cmp	r8, r0
 800a722:	d13a      	bne.n	800a79a <_malloc_r+0xd2>
 800a724:	6821      	ldr	r1, [r4, #0]
 800a726:	3503      	adds	r5, #3
 800a728:	1a6d      	subs	r5, r5, r1
 800a72a:	f025 0503 	bic.w	r5, r5, #3
 800a72e:	3508      	adds	r5, #8
 800a730:	2d0c      	cmp	r5, #12
 800a732:	bf38      	it	cc
 800a734:	250c      	movcc	r5, #12
 800a736:	4629      	mov	r1, r5
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff ffa5 	bl	800a688 <sbrk_aligned>
 800a73e:	3001      	adds	r0, #1
 800a740:	d02b      	beq.n	800a79a <_malloc_r+0xd2>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	442b      	add	r3, r5
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	e00e      	b.n	800a768 <_malloc_r+0xa0>
 800a74a:	6822      	ldr	r2, [r4, #0]
 800a74c:	1b52      	subs	r2, r2, r5
 800a74e:	d41e      	bmi.n	800a78e <_malloc_r+0xc6>
 800a750:	2a0b      	cmp	r2, #11
 800a752:	d916      	bls.n	800a782 <_malloc_r+0xba>
 800a754:	1961      	adds	r1, r4, r5
 800a756:	42a3      	cmp	r3, r4
 800a758:	6025      	str	r5, [r4, #0]
 800a75a:	bf18      	it	ne
 800a75c:	6059      	strne	r1, [r3, #4]
 800a75e:	6863      	ldr	r3, [r4, #4]
 800a760:	bf08      	it	eq
 800a762:	6031      	streq	r1, [r6, #0]
 800a764:	5162      	str	r2, [r4, r5]
 800a766:	604b      	str	r3, [r1, #4]
 800a768:	4638      	mov	r0, r7
 800a76a:	f104 060b 	add.w	r6, r4, #11
 800a76e:	f000 f877 	bl	800a860 <__malloc_unlock>
 800a772:	f026 0607 	bic.w	r6, r6, #7
 800a776:	1d23      	adds	r3, r4, #4
 800a778:	1af2      	subs	r2, r6, r3
 800a77a:	d0b6      	beq.n	800a6ea <_malloc_r+0x22>
 800a77c:	1b9b      	subs	r3, r3, r6
 800a77e:	50a3      	str	r3, [r4, r2]
 800a780:	e7b3      	b.n	800a6ea <_malloc_r+0x22>
 800a782:	6862      	ldr	r2, [r4, #4]
 800a784:	42a3      	cmp	r3, r4
 800a786:	bf0c      	ite	eq
 800a788:	6032      	streq	r2, [r6, #0]
 800a78a:	605a      	strne	r2, [r3, #4]
 800a78c:	e7ec      	b.n	800a768 <_malloc_r+0xa0>
 800a78e:	4623      	mov	r3, r4
 800a790:	6864      	ldr	r4, [r4, #4]
 800a792:	e7b2      	b.n	800a6fa <_malloc_r+0x32>
 800a794:	4634      	mov	r4, r6
 800a796:	6876      	ldr	r6, [r6, #4]
 800a798:	e7b9      	b.n	800a70e <_malloc_r+0x46>
 800a79a:	230c      	movs	r3, #12
 800a79c:	603b      	str	r3, [r7, #0]
 800a79e:	4638      	mov	r0, r7
 800a7a0:	f000 f85e 	bl	800a860 <__malloc_unlock>
 800a7a4:	e7a1      	b.n	800a6ea <_malloc_r+0x22>
 800a7a6:	6025      	str	r5, [r4, #0]
 800a7a8:	e7de      	b.n	800a768 <_malloc_r+0xa0>
 800a7aa:	bf00      	nop
 800a7ac:	200005a4 	.word	0x200005a4

0800a7b0 <_sbrk_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d06      	ldr	r5, [pc, #24]	; (800a7cc <_sbrk_r+0x1c>)
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	602b      	str	r3, [r5, #0]
 800a7bc:	f7f9 fae8 	bl	8003d90 <_sbrk>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_sbrk_r+0x1a>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_sbrk_r+0x1a>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	200005ac 	.word	0x200005ac

0800a7d0 <__assert_func>:
 800a7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7d2:	4614      	mov	r4, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <__assert_func+0x2c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4605      	mov	r5, r0
 800a7dc:	68d8      	ldr	r0, [r3, #12]
 800a7de:	b14c      	cbz	r4, 800a7f4 <__assert_func+0x24>
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <__assert_func+0x30>)
 800a7e2:	9100      	str	r1, [sp, #0]
 800a7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7e8:	4906      	ldr	r1, [pc, #24]	; (800a804 <__assert_func+0x34>)
 800a7ea:	462b      	mov	r3, r5
 800a7ec:	f000 f80e 	bl	800a80c <fiprintf>
 800a7f0:	f000 fa64 	bl	800acbc <abort>
 800a7f4:	4b04      	ldr	r3, [pc, #16]	; (800a808 <__assert_func+0x38>)
 800a7f6:	461c      	mov	r4, r3
 800a7f8:	e7f3      	b.n	800a7e2 <__assert_func+0x12>
 800a7fa:	bf00      	nop
 800a7fc:	20000010 	.word	0x20000010
 800a800:	0800b784 	.word	0x0800b784
 800a804:	0800b791 	.word	0x0800b791
 800a808:	0800b7bf 	.word	0x0800b7bf

0800a80c <fiprintf>:
 800a80c:	b40e      	push	{r1, r2, r3}
 800a80e:	b503      	push	{r0, r1, lr}
 800a810:	4601      	mov	r1, r0
 800a812:	ab03      	add	r3, sp, #12
 800a814:	4805      	ldr	r0, [pc, #20]	; (800a82c <fiprintf+0x20>)
 800a816:	f853 2b04 	ldr.w	r2, [r3], #4
 800a81a:	6800      	ldr	r0, [r0, #0]
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	f000 f84f 	bl	800a8c0 <_vfiprintf_r>
 800a822:	b002      	add	sp, #8
 800a824:	f85d eb04 	ldr.w	lr, [sp], #4
 800a828:	b003      	add	sp, #12
 800a82a:	4770      	bx	lr
 800a82c:	20000010 	.word	0x20000010

0800a830 <__ascii_mbtowc>:
 800a830:	b082      	sub	sp, #8
 800a832:	b901      	cbnz	r1, 800a836 <__ascii_mbtowc+0x6>
 800a834:	a901      	add	r1, sp, #4
 800a836:	b142      	cbz	r2, 800a84a <__ascii_mbtowc+0x1a>
 800a838:	b14b      	cbz	r3, 800a84e <__ascii_mbtowc+0x1e>
 800a83a:	7813      	ldrb	r3, [r2, #0]
 800a83c:	600b      	str	r3, [r1, #0]
 800a83e:	7812      	ldrb	r2, [r2, #0]
 800a840:	1e10      	subs	r0, r2, #0
 800a842:	bf18      	it	ne
 800a844:	2001      	movne	r0, #1
 800a846:	b002      	add	sp, #8
 800a848:	4770      	bx	lr
 800a84a:	4610      	mov	r0, r2
 800a84c:	e7fb      	b.n	800a846 <__ascii_mbtowc+0x16>
 800a84e:	f06f 0001 	mvn.w	r0, #1
 800a852:	e7f8      	b.n	800a846 <__ascii_mbtowc+0x16>

0800a854 <__malloc_lock>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <__malloc_lock+0x8>)
 800a856:	f000 bbf1 	b.w	800b03c <__retarget_lock_acquire_recursive>
 800a85a:	bf00      	nop
 800a85c:	200005b0 	.word	0x200005b0

0800a860 <__malloc_unlock>:
 800a860:	4801      	ldr	r0, [pc, #4]	; (800a868 <__malloc_unlock+0x8>)
 800a862:	f000 bbec 	b.w	800b03e <__retarget_lock_release_recursive>
 800a866:	bf00      	nop
 800a868:	200005b0 	.word	0x200005b0

0800a86c <__sfputc_r>:
 800a86c:	6893      	ldr	r3, [r2, #8]
 800a86e:	3b01      	subs	r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	b410      	push	{r4}
 800a874:	6093      	str	r3, [r2, #8]
 800a876:	da08      	bge.n	800a88a <__sfputc_r+0x1e>
 800a878:	6994      	ldr	r4, [r2, #24]
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	db01      	blt.n	800a882 <__sfputc_r+0x16>
 800a87e:	290a      	cmp	r1, #10
 800a880:	d103      	bne.n	800a88a <__sfputc_r+0x1e>
 800a882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a886:	f000 b94b 	b.w	800ab20 <__swbuf_r>
 800a88a:	6813      	ldr	r3, [r2, #0]
 800a88c:	1c58      	adds	r0, r3, #1
 800a88e:	6010      	str	r0, [r2, #0]
 800a890:	7019      	strb	r1, [r3, #0]
 800a892:	4608      	mov	r0, r1
 800a894:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <__sfputs_r>:
 800a89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89c:	4606      	mov	r6, r0
 800a89e:	460f      	mov	r7, r1
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	18d5      	adds	r5, r2, r3
 800a8a4:	42ac      	cmp	r4, r5
 800a8a6:	d101      	bne.n	800a8ac <__sfputs_r+0x12>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e007      	b.n	800a8bc <__sfputs_r+0x22>
 800a8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b0:	463a      	mov	r2, r7
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f7ff ffda 	bl	800a86c <__sfputc_r>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d1f3      	bne.n	800a8a4 <__sfputs_r+0xa>
 800a8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8c0 <_vfiprintf_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	b09d      	sub	sp, #116	; 0x74
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	4698      	mov	r8, r3
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	b118      	cbz	r0, 800a8d8 <_vfiprintf_r+0x18>
 800a8d0:	6983      	ldr	r3, [r0, #24]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <_vfiprintf_r+0x18>
 800a8d4:	f000 fb14 	bl	800af00 <__sinit>
 800a8d8:	4b89      	ldr	r3, [pc, #548]	; (800ab00 <_vfiprintf_r+0x240>)
 800a8da:	429d      	cmp	r5, r3
 800a8dc:	d11b      	bne.n	800a916 <_vfiprintf_r+0x56>
 800a8de:	6875      	ldr	r5, [r6, #4]
 800a8e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e2:	07d9      	lsls	r1, r3, #31
 800a8e4:	d405      	bmi.n	800a8f2 <_vfiprintf_r+0x32>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	059a      	lsls	r2, r3, #22
 800a8ea:	d402      	bmi.n	800a8f2 <_vfiprintf_r+0x32>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ee:	f000 fba5 	bl	800b03c <__retarget_lock_acquire_recursive>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	071b      	lsls	r3, r3, #28
 800a8f6:	d501      	bpl.n	800a8fc <_vfiprintf_r+0x3c>
 800a8f8:	692b      	ldr	r3, [r5, #16]
 800a8fa:	b9eb      	cbnz	r3, 800a938 <_vfiprintf_r+0x78>
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 f96e 	bl	800abe0 <__swsetup_r>
 800a904:	b1c0      	cbz	r0, 800a938 <_vfiprintf_r+0x78>
 800a906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a908:	07dc      	lsls	r4, r3, #31
 800a90a:	d50e      	bpl.n	800a92a <_vfiprintf_r+0x6a>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	b01d      	add	sp, #116	; 0x74
 800a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a916:	4b7b      	ldr	r3, [pc, #492]	; (800ab04 <_vfiprintf_r+0x244>)
 800a918:	429d      	cmp	r5, r3
 800a91a:	d101      	bne.n	800a920 <_vfiprintf_r+0x60>
 800a91c:	68b5      	ldr	r5, [r6, #8]
 800a91e:	e7df      	b.n	800a8e0 <_vfiprintf_r+0x20>
 800a920:	4b79      	ldr	r3, [pc, #484]	; (800ab08 <_vfiprintf_r+0x248>)
 800a922:	429d      	cmp	r5, r3
 800a924:	bf08      	it	eq
 800a926:	68f5      	ldreq	r5, [r6, #12]
 800a928:	e7da      	b.n	800a8e0 <_vfiprintf_r+0x20>
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	0598      	lsls	r0, r3, #22
 800a92e:	d4ed      	bmi.n	800a90c <_vfiprintf_r+0x4c>
 800a930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a932:	f000 fb84 	bl	800b03e <__retarget_lock_release_recursive>
 800a936:	e7e9      	b.n	800a90c <_vfiprintf_r+0x4c>
 800a938:	2300      	movs	r3, #0
 800a93a:	9309      	str	r3, [sp, #36]	; 0x24
 800a93c:	2320      	movs	r3, #32
 800a93e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a942:	f8cd 800c 	str.w	r8, [sp, #12]
 800a946:	2330      	movs	r3, #48	; 0x30
 800a948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab0c <_vfiprintf_r+0x24c>
 800a94c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a950:	f04f 0901 	mov.w	r9, #1
 800a954:	4623      	mov	r3, r4
 800a956:	469a      	mov	sl, r3
 800a958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95c:	b10a      	cbz	r2, 800a962 <_vfiprintf_r+0xa2>
 800a95e:	2a25      	cmp	r2, #37	; 0x25
 800a960:	d1f9      	bne.n	800a956 <_vfiprintf_r+0x96>
 800a962:	ebba 0b04 	subs.w	fp, sl, r4
 800a966:	d00b      	beq.n	800a980 <_vfiprintf_r+0xc0>
 800a968:	465b      	mov	r3, fp
 800a96a:	4622      	mov	r2, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ff93 	bl	800a89a <__sfputs_r>
 800a974:	3001      	adds	r0, #1
 800a976:	f000 80aa 	beq.w	800aace <_vfiprintf_r+0x20e>
 800a97a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97c:	445a      	add	r2, fp
 800a97e:	9209      	str	r2, [sp, #36]	; 0x24
 800a980:	f89a 3000 	ldrb.w	r3, [sl]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80a2 	beq.w	800aace <_vfiprintf_r+0x20e>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a994:	f10a 0a01 	add.w	sl, sl, #1
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	9307      	str	r3, [sp, #28]
 800a99c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a9a2:	4654      	mov	r4, sl
 800a9a4:	2205      	movs	r2, #5
 800a9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9aa:	4858      	ldr	r0, [pc, #352]	; (800ab0c <_vfiprintf_r+0x24c>)
 800a9ac:	f7f5 fc20 	bl	80001f0 <memchr>
 800a9b0:	9a04      	ldr	r2, [sp, #16]
 800a9b2:	b9d8      	cbnz	r0, 800a9ec <_vfiprintf_r+0x12c>
 800a9b4:	06d1      	lsls	r1, r2, #27
 800a9b6:	bf44      	itt	mi
 800a9b8:	2320      	movmi	r3, #32
 800a9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9be:	0713      	lsls	r3, r2, #28
 800a9c0:	bf44      	itt	mi
 800a9c2:	232b      	movmi	r3, #43	; 0x2b
 800a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ce:	d015      	beq.n	800a9fc <_vfiprintf_r+0x13c>
 800a9d0:	9a07      	ldr	r2, [sp, #28]
 800a9d2:	4654      	mov	r4, sl
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	f04f 0c0a 	mov.w	ip, #10
 800a9da:	4621      	mov	r1, r4
 800a9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e0:	3b30      	subs	r3, #48	; 0x30
 800a9e2:	2b09      	cmp	r3, #9
 800a9e4:	d94e      	bls.n	800aa84 <_vfiprintf_r+0x1c4>
 800a9e6:	b1b0      	cbz	r0, 800aa16 <_vfiprintf_r+0x156>
 800a9e8:	9207      	str	r2, [sp, #28]
 800a9ea:	e014      	b.n	800aa16 <_vfiprintf_r+0x156>
 800a9ec:	eba0 0308 	sub.w	r3, r0, r8
 800a9f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	9304      	str	r3, [sp, #16]
 800a9f8:	46a2      	mov	sl, r4
 800a9fa:	e7d2      	b.n	800a9a2 <_vfiprintf_r+0xe2>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	1d19      	adds	r1, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	9103      	str	r1, [sp, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfbb      	ittet	lt
 800aa08:	425b      	neglt	r3, r3
 800aa0a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa0e:	9307      	strge	r3, [sp, #28]
 800aa10:	9307      	strlt	r3, [sp, #28]
 800aa12:	bfb8      	it	lt
 800aa14:	9204      	strlt	r2, [sp, #16]
 800aa16:	7823      	ldrb	r3, [r4, #0]
 800aa18:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1a:	d10c      	bne.n	800aa36 <_vfiprintf_r+0x176>
 800aa1c:	7863      	ldrb	r3, [r4, #1]
 800aa1e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa20:	d135      	bne.n	800aa8e <_vfiprintf_r+0x1ce>
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	1d1a      	adds	r2, r3, #4
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	9203      	str	r2, [sp, #12]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bfb8      	it	lt
 800aa2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa32:	3402      	adds	r4, #2
 800aa34:	9305      	str	r3, [sp, #20]
 800aa36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab1c <_vfiprintf_r+0x25c>
 800aa3a:	7821      	ldrb	r1, [r4, #0]
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	4650      	mov	r0, sl
 800aa40:	f7f5 fbd6 	bl	80001f0 <memchr>
 800aa44:	b140      	cbz	r0, 800aa58 <_vfiprintf_r+0x198>
 800aa46:	2340      	movs	r3, #64	; 0x40
 800aa48:	eba0 000a 	sub.w	r0, r0, sl
 800aa4c:	fa03 f000 	lsl.w	r0, r3, r0
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	4303      	orrs	r3, r0
 800aa54:	3401      	adds	r4, #1
 800aa56:	9304      	str	r3, [sp, #16]
 800aa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5c:	482c      	ldr	r0, [pc, #176]	; (800ab10 <_vfiprintf_r+0x250>)
 800aa5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa62:	2206      	movs	r2, #6
 800aa64:	f7f5 fbc4 	bl	80001f0 <memchr>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d03f      	beq.n	800aaec <_vfiprintf_r+0x22c>
 800aa6c:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <_vfiprintf_r+0x254>)
 800aa6e:	bb1b      	cbnz	r3, 800aab8 <_vfiprintf_r+0x1f8>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	3307      	adds	r3, #7
 800aa74:	f023 0307 	bic.w	r3, r3, #7
 800aa78:	3308      	adds	r3, #8
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7e:	443b      	add	r3, r7
 800aa80:	9309      	str	r3, [sp, #36]	; 0x24
 800aa82:	e767      	b.n	800a954 <_vfiprintf_r+0x94>
 800aa84:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa88:	460c      	mov	r4, r1
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7a5      	b.n	800a9da <_vfiprintf_r+0x11a>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	3401      	adds	r4, #1
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	4619      	mov	r1, r3
 800aa96:	f04f 0c0a 	mov.w	ip, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa0:	3a30      	subs	r2, #48	; 0x30
 800aaa2:	2a09      	cmp	r2, #9
 800aaa4:	d903      	bls.n	800aaae <_vfiprintf_r+0x1ee>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0c5      	beq.n	800aa36 <_vfiprintf_r+0x176>
 800aaaa:	9105      	str	r1, [sp, #20]
 800aaac:	e7c3      	b.n	800aa36 <_vfiprintf_r+0x176>
 800aaae:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab2:	4604      	mov	r4, r0
 800aab4:	2301      	movs	r3, #1
 800aab6:	e7f0      	b.n	800aa9a <_vfiprintf_r+0x1da>
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	462a      	mov	r2, r5
 800aabe:	4b16      	ldr	r3, [pc, #88]	; (800ab18 <_vfiprintf_r+0x258>)
 800aac0:	a904      	add	r1, sp, #16
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7fd ff1e 	bl	8008904 <_printf_float>
 800aac8:	4607      	mov	r7, r0
 800aaca:	1c78      	adds	r0, r7, #1
 800aacc:	d1d6      	bne.n	800aa7c <_vfiprintf_r+0x1bc>
 800aace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aad0:	07d9      	lsls	r1, r3, #31
 800aad2:	d405      	bmi.n	800aae0 <_vfiprintf_r+0x220>
 800aad4:	89ab      	ldrh	r3, [r5, #12]
 800aad6:	059a      	lsls	r2, r3, #22
 800aad8:	d402      	bmi.n	800aae0 <_vfiprintf_r+0x220>
 800aada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aadc:	f000 faaf 	bl	800b03e <__retarget_lock_release_recursive>
 800aae0:	89ab      	ldrh	r3, [r5, #12]
 800aae2:	065b      	lsls	r3, r3, #25
 800aae4:	f53f af12 	bmi.w	800a90c <_vfiprintf_r+0x4c>
 800aae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaea:	e711      	b.n	800a910 <_vfiprintf_r+0x50>
 800aaec:	ab03      	add	r3, sp, #12
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <_vfiprintf_r+0x258>)
 800aaf4:	a904      	add	r1, sp, #16
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f7fe f9a8 	bl	8008e4c <_printf_i>
 800aafc:	e7e4      	b.n	800aac8 <_vfiprintf_r+0x208>
 800aafe:	bf00      	nop
 800ab00:	0800b7fc 	.word	0x0800b7fc
 800ab04:	0800b81c 	.word	0x0800b81c
 800ab08:	0800b7dc 	.word	0x0800b7dc
 800ab0c:	0800b7ca 	.word	0x0800b7ca
 800ab10:	0800b7d4 	.word	0x0800b7d4
 800ab14:	08008905 	.word	0x08008905
 800ab18:	0800a89b 	.word	0x0800a89b
 800ab1c:	0800b7d0 	.word	0x0800b7d0

0800ab20 <__swbuf_r>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	460e      	mov	r6, r1
 800ab24:	4614      	mov	r4, r2
 800ab26:	4605      	mov	r5, r0
 800ab28:	b118      	cbz	r0, 800ab32 <__swbuf_r+0x12>
 800ab2a:	6983      	ldr	r3, [r0, #24]
 800ab2c:	b90b      	cbnz	r3, 800ab32 <__swbuf_r+0x12>
 800ab2e:	f000 f9e7 	bl	800af00 <__sinit>
 800ab32:	4b21      	ldr	r3, [pc, #132]	; (800abb8 <__swbuf_r+0x98>)
 800ab34:	429c      	cmp	r4, r3
 800ab36:	d12b      	bne.n	800ab90 <__swbuf_r+0x70>
 800ab38:	686c      	ldr	r4, [r5, #4]
 800ab3a:	69a3      	ldr	r3, [r4, #24]
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	071a      	lsls	r2, r3, #28
 800ab42:	d52f      	bpl.n	800aba4 <__swbuf_r+0x84>
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	b36b      	cbz	r3, 800aba4 <__swbuf_r+0x84>
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	6820      	ldr	r0, [r4, #0]
 800ab4c:	1ac0      	subs	r0, r0, r3
 800ab4e:	6963      	ldr	r3, [r4, #20]
 800ab50:	b2f6      	uxtb	r6, r6
 800ab52:	4283      	cmp	r3, r0
 800ab54:	4637      	mov	r7, r6
 800ab56:	dc04      	bgt.n	800ab62 <__swbuf_r+0x42>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f000 f93c 	bl	800add8 <_fflush_r>
 800ab60:	bb30      	cbnz	r0, 800abb0 <__swbuf_r+0x90>
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	60a3      	str	r3, [r4, #8]
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	6022      	str	r2, [r4, #0]
 800ab6e:	701e      	strb	r6, [r3, #0]
 800ab70:	6963      	ldr	r3, [r4, #20]
 800ab72:	3001      	adds	r0, #1
 800ab74:	4283      	cmp	r3, r0
 800ab76:	d004      	beq.n	800ab82 <__swbuf_r+0x62>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	07db      	lsls	r3, r3, #31
 800ab7c:	d506      	bpl.n	800ab8c <__swbuf_r+0x6c>
 800ab7e:	2e0a      	cmp	r6, #10
 800ab80:	d104      	bne.n	800ab8c <__swbuf_r+0x6c>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f927 	bl	800add8 <_fflush_r>
 800ab8a:	b988      	cbnz	r0, 800abb0 <__swbuf_r+0x90>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <__swbuf_r+0x9c>)
 800ab92:	429c      	cmp	r4, r3
 800ab94:	d101      	bne.n	800ab9a <__swbuf_r+0x7a>
 800ab96:	68ac      	ldr	r4, [r5, #8]
 800ab98:	e7cf      	b.n	800ab3a <__swbuf_r+0x1a>
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <__swbuf_r+0xa0>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	bf08      	it	eq
 800aba0:	68ec      	ldreq	r4, [r5, #12]
 800aba2:	e7ca      	b.n	800ab3a <__swbuf_r+0x1a>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f81a 	bl	800abe0 <__swsetup_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	d0cb      	beq.n	800ab48 <__swbuf_r+0x28>
 800abb0:	f04f 37ff 	mov.w	r7, #4294967295
 800abb4:	e7ea      	b.n	800ab8c <__swbuf_r+0x6c>
 800abb6:	bf00      	nop
 800abb8:	0800b7fc 	.word	0x0800b7fc
 800abbc:	0800b81c 	.word	0x0800b81c
 800abc0:	0800b7dc 	.word	0x0800b7dc

0800abc4 <__ascii_wctomb>:
 800abc4:	b149      	cbz	r1, 800abda <__ascii_wctomb+0x16>
 800abc6:	2aff      	cmp	r2, #255	; 0xff
 800abc8:	bf85      	ittet	hi
 800abca:	238a      	movhi	r3, #138	; 0x8a
 800abcc:	6003      	strhi	r3, [r0, #0]
 800abce:	700a      	strbls	r2, [r1, #0]
 800abd0:	f04f 30ff 	movhi.w	r0, #4294967295
 800abd4:	bf98      	it	ls
 800abd6:	2001      	movls	r0, #1
 800abd8:	4770      	bx	lr
 800abda:	4608      	mov	r0, r1
 800abdc:	4770      	bx	lr
	...

0800abe0 <__swsetup_r>:
 800abe0:	4b32      	ldr	r3, [pc, #200]	; (800acac <__swsetup_r+0xcc>)
 800abe2:	b570      	push	{r4, r5, r6, lr}
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	4606      	mov	r6, r0
 800abe8:	460c      	mov	r4, r1
 800abea:	b125      	cbz	r5, 800abf6 <__swsetup_r+0x16>
 800abec:	69ab      	ldr	r3, [r5, #24]
 800abee:	b913      	cbnz	r3, 800abf6 <__swsetup_r+0x16>
 800abf0:	4628      	mov	r0, r5
 800abf2:	f000 f985 	bl	800af00 <__sinit>
 800abf6:	4b2e      	ldr	r3, [pc, #184]	; (800acb0 <__swsetup_r+0xd0>)
 800abf8:	429c      	cmp	r4, r3
 800abfa:	d10f      	bne.n	800ac1c <__swsetup_r+0x3c>
 800abfc:	686c      	ldr	r4, [r5, #4]
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac04:	0719      	lsls	r1, r3, #28
 800ac06:	d42c      	bmi.n	800ac62 <__swsetup_r+0x82>
 800ac08:	06dd      	lsls	r5, r3, #27
 800ac0a:	d411      	bmi.n	800ac30 <__swsetup_r+0x50>
 800ac0c:	2309      	movs	r3, #9
 800ac0e:	6033      	str	r3, [r6, #0]
 800ac10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1a:	e03e      	b.n	800ac9a <__swsetup_r+0xba>
 800ac1c:	4b25      	ldr	r3, [pc, #148]	; (800acb4 <__swsetup_r+0xd4>)
 800ac1e:	429c      	cmp	r4, r3
 800ac20:	d101      	bne.n	800ac26 <__swsetup_r+0x46>
 800ac22:	68ac      	ldr	r4, [r5, #8]
 800ac24:	e7eb      	b.n	800abfe <__swsetup_r+0x1e>
 800ac26:	4b24      	ldr	r3, [pc, #144]	; (800acb8 <__swsetup_r+0xd8>)
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	bf08      	it	eq
 800ac2c:	68ec      	ldreq	r4, [r5, #12]
 800ac2e:	e7e6      	b.n	800abfe <__swsetup_r+0x1e>
 800ac30:	0758      	lsls	r0, r3, #29
 800ac32:	d512      	bpl.n	800ac5a <__swsetup_r+0x7a>
 800ac34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac36:	b141      	cbz	r1, 800ac4a <__swsetup_r+0x6a>
 800ac38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac3c:	4299      	cmp	r1, r3
 800ac3e:	d002      	beq.n	800ac46 <__swsetup_r+0x66>
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff fcd5 	bl	800a5f0 <_free_r>
 800ac46:	2300      	movs	r3, #0
 800ac48:	6363      	str	r3, [r4, #52]	; 0x34
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac50:	81a3      	strh	r3, [r4, #12]
 800ac52:	2300      	movs	r3, #0
 800ac54:	6063      	str	r3, [r4, #4]
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f043 0308 	orr.w	r3, r3, #8
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	b94b      	cbnz	r3, 800ac7a <__swsetup_r+0x9a>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac70:	d003      	beq.n	800ac7a <__swsetup_r+0x9a>
 800ac72:	4621      	mov	r1, r4
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 fa09 	bl	800b08c <__smakebuf_r>
 800ac7a:	89a0      	ldrh	r0, [r4, #12]
 800ac7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac80:	f010 0301 	ands.w	r3, r0, #1
 800ac84:	d00a      	beq.n	800ac9c <__swsetup_r+0xbc>
 800ac86:	2300      	movs	r3, #0
 800ac88:	60a3      	str	r3, [r4, #8]
 800ac8a:	6963      	ldr	r3, [r4, #20]
 800ac8c:	425b      	negs	r3, r3
 800ac8e:	61a3      	str	r3, [r4, #24]
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	b943      	cbnz	r3, 800aca6 <__swsetup_r+0xc6>
 800ac94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac98:	d1ba      	bne.n	800ac10 <__swsetup_r+0x30>
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	0781      	lsls	r1, r0, #30
 800ac9e:	bf58      	it	pl
 800aca0:	6963      	ldrpl	r3, [r4, #20]
 800aca2:	60a3      	str	r3, [r4, #8]
 800aca4:	e7f4      	b.n	800ac90 <__swsetup_r+0xb0>
 800aca6:	2000      	movs	r0, #0
 800aca8:	e7f7      	b.n	800ac9a <__swsetup_r+0xba>
 800acaa:	bf00      	nop
 800acac:	20000010 	.word	0x20000010
 800acb0:	0800b7fc 	.word	0x0800b7fc
 800acb4:	0800b81c 	.word	0x0800b81c
 800acb8:	0800b7dc 	.word	0x0800b7dc

0800acbc <abort>:
 800acbc:	b508      	push	{r3, lr}
 800acbe:	2006      	movs	r0, #6
 800acc0:	f000 fa4c 	bl	800b15c <raise>
 800acc4:	2001      	movs	r0, #1
 800acc6:	f7f8 ffeb 	bl	8003ca0 <_exit>
	...

0800accc <__sflush_r>:
 800accc:	898a      	ldrh	r2, [r1, #12]
 800acce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	4605      	mov	r5, r0
 800acd4:	0710      	lsls	r0, r2, #28
 800acd6:	460c      	mov	r4, r1
 800acd8:	d458      	bmi.n	800ad8c <__sflush_r+0xc0>
 800acda:	684b      	ldr	r3, [r1, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	dc05      	bgt.n	800acec <__sflush_r+0x20>
 800ace0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dc02      	bgt.n	800acec <__sflush_r+0x20>
 800ace6:	2000      	movs	r0, #0
 800ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acee:	2e00      	cmp	r6, #0
 800acf0:	d0f9      	beq.n	800ace6 <__sflush_r+0x1a>
 800acf2:	2300      	movs	r3, #0
 800acf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acf8:	682f      	ldr	r7, [r5, #0]
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	d032      	beq.n	800ad64 <__sflush_r+0x98>
 800acfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	075a      	lsls	r2, r3, #29
 800ad04:	d505      	bpl.n	800ad12 <__sflush_r+0x46>
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	1ac0      	subs	r0, r0, r3
 800ad0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad0c:	b10b      	cbz	r3, 800ad12 <__sflush_r+0x46>
 800ad0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad10:	1ac0      	subs	r0, r0, r3
 800ad12:	2300      	movs	r3, #0
 800ad14:	4602      	mov	r2, r0
 800ad16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad18:	6a21      	ldr	r1, [r4, #32]
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	47b0      	blx	r6
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	d106      	bne.n	800ad32 <__sflush_r+0x66>
 800ad24:	6829      	ldr	r1, [r5, #0]
 800ad26:	291d      	cmp	r1, #29
 800ad28:	d82c      	bhi.n	800ad84 <__sflush_r+0xb8>
 800ad2a:	4a2a      	ldr	r2, [pc, #168]	; (800add4 <__sflush_r+0x108>)
 800ad2c:	40ca      	lsrs	r2, r1
 800ad2e:	07d6      	lsls	r6, r2, #31
 800ad30:	d528      	bpl.n	800ad84 <__sflush_r+0xb8>
 800ad32:	2200      	movs	r2, #0
 800ad34:	6062      	str	r2, [r4, #4]
 800ad36:	04d9      	lsls	r1, r3, #19
 800ad38:	6922      	ldr	r2, [r4, #16]
 800ad3a:	6022      	str	r2, [r4, #0]
 800ad3c:	d504      	bpl.n	800ad48 <__sflush_r+0x7c>
 800ad3e:	1c42      	adds	r2, r0, #1
 800ad40:	d101      	bne.n	800ad46 <__sflush_r+0x7a>
 800ad42:	682b      	ldr	r3, [r5, #0]
 800ad44:	b903      	cbnz	r3, 800ad48 <__sflush_r+0x7c>
 800ad46:	6560      	str	r0, [r4, #84]	; 0x54
 800ad48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad4a:	602f      	str	r7, [r5, #0]
 800ad4c:	2900      	cmp	r1, #0
 800ad4e:	d0ca      	beq.n	800ace6 <__sflush_r+0x1a>
 800ad50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad54:	4299      	cmp	r1, r3
 800ad56:	d002      	beq.n	800ad5e <__sflush_r+0x92>
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f7ff fc49 	bl	800a5f0 <_free_r>
 800ad5e:	2000      	movs	r0, #0
 800ad60:	6360      	str	r0, [r4, #52]	; 0x34
 800ad62:	e7c1      	b.n	800ace8 <__sflush_r+0x1c>
 800ad64:	6a21      	ldr	r1, [r4, #32]
 800ad66:	2301      	movs	r3, #1
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b0      	blx	r6
 800ad6c:	1c41      	adds	r1, r0, #1
 800ad6e:	d1c7      	bne.n	800ad00 <__sflush_r+0x34>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0c4      	beq.n	800ad00 <__sflush_r+0x34>
 800ad76:	2b1d      	cmp	r3, #29
 800ad78:	d001      	beq.n	800ad7e <__sflush_r+0xb2>
 800ad7a:	2b16      	cmp	r3, #22
 800ad7c:	d101      	bne.n	800ad82 <__sflush_r+0xb6>
 800ad7e:	602f      	str	r7, [r5, #0]
 800ad80:	e7b1      	b.n	800ace6 <__sflush_r+0x1a>
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	e7ad      	b.n	800ace8 <__sflush_r+0x1c>
 800ad8c:	690f      	ldr	r7, [r1, #16]
 800ad8e:	2f00      	cmp	r7, #0
 800ad90:	d0a9      	beq.n	800ace6 <__sflush_r+0x1a>
 800ad92:	0793      	lsls	r3, r2, #30
 800ad94:	680e      	ldr	r6, [r1, #0]
 800ad96:	bf08      	it	eq
 800ad98:	694b      	ldreq	r3, [r1, #20]
 800ad9a:	600f      	str	r7, [r1, #0]
 800ad9c:	bf18      	it	ne
 800ad9e:	2300      	movne	r3, #0
 800ada0:	eba6 0807 	sub.w	r8, r6, r7
 800ada4:	608b      	str	r3, [r1, #8]
 800ada6:	f1b8 0f00 	cmp.w	r8, #0
 800adaa:	dd9c      	ble.n	800ace6 <__sflush_r+0x1a>
 800adac:	6a21      	ldr	r1, [r4, #32]
 800adae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adb0:	4643      	mov	r3, r8
 800adb2:	463a      	mov	r2, r7
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b0      	blx	r6
 800adb8:	2800      	cmp	r0, #0
 800adba:	dc06      	bgt.n	800adca <__sflush_r+0xfe>
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	f04f 30ff 	mov.w	r0, #4294967295
 800adc8:	e78e      	b.n	800ace8 <__sflush_r+0x1c>
 800adca:	4407      	add	r7, r0
 800adcc:	eba8 0800 	sub.w	r8, r8, r0
 800add0:	e7e9      	b.n	800ada6 <__sflush_r+0xda>
 800add2:	bf00      	nop
 800add4:	20400001 	.word	0x20400001

0800add8 <_fflush_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	690b      	ldr	r3, [r1, #16]
 800addc:	4605      	mov	r5, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	b913      	cbnz	r3, 800ade8 <_fflush_r+0x10>
 800ade2:	2500      	movs	r5, #0
 800ade4:	4628      	mov	r0, r5
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	b118      	cbz	r0, 800adf2 <_fflush_r+0x1a>
 800adea:	6983      	ldr	r3, [r0, #24]
 800adec:	b90b      	cbnz	r3, 800adf2 <_fflush_r+0x1a>
 800adee:	f000 f887 	bl	800af00 <__sinit>
 800adf2:	4b14      	ldr	r3, [pc, #80]	; (800ae44 <_fflush_r+0x6c>)
 800adf4:	429c      	cmp	r4, r3
 800adf6:	d11b      	bne.n	800ae30 <_fflush_r+0x58>
 800adf8:	686c      	ldr	r4, [r5, #4]
 800adfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0ef      	beq.n	800ade2 <_fflush_r+0xa>
 800ae02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae04:	07d0      	lsls	r0, r2, #31
 800ae06:	d404      	bmi.n	800ae12 <_fflush_r+0x3a>
 800ae08:	0599      	lsls	r1, r3, #22
 800ae0a:	d402      	bmi.n	800ae12 <_fflush_r+0x3a>
 800ae0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0e:	f000 f915 	bl	800b03c <__retarget_lock_acquire_recursive>
 800ae12:	4628      	mov	r0, r5
 800ae14:	4621      	mov	r1, r4
 800ae16:	f7ff ff59 	bl	800accc <__sflush_r>
 800ae1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae1c:	07da      	lsls	r2, r3, #31
 800ae1e:	4605      	mov	r5, r0
 800ae20:	d4e0      	bmi.n	800ade4 <_fflush_r+0xc>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	059b      	lsls	r3, r3, #22
 800ae26:	d4dd      	bmi.n	800ade4 <_fflush_r+0xc>
 800ae28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae2a:	f000 f908 	bl	800b03e <__retarget_lock_release_recursive>
 800ae2e:	e7d9      	b.n	800ade4 <_fflush_r+0xc>
 800ae30:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <_fflush_r+0x70>)
 800ae32:	429c      	cmp	r4, r3
 800ae34:	d101      	bne.n	800ae3a <_fflush_r+0x62>
 800ae36:	68ac      	ldr	r4, [r5, #8]
 800ae38:	e7df      	b.n	800adfa <_fflush_r+0x22>
 800ae3a:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <_fflush_r+0x74>)
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	bf08      	it	eq
 800ae40:	68ec      	ldreq	r4, [r5, #12]
 800ae42:	e7da      	b.n	800adfa <_fflush_r+0x22>
 800ae44:	0800b7fc 	.word	0x0800b7fc
 800ae48:	0800b81c 	.word	0x0800b81c
 800ae4c:	0800b7dc 	.word	0x0800b7dc

0800ae50 <std>:
 800ae50:	2300      	movs	r3, #0
 800ae52:	b510      	push	{r4, lr}
 800ae54:	4604      	mov	r4, r0
 800ae56:	e9c0 3300 	strd	r3, r3, [r0]
 800ae5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae5e:	6083      	str	r3, [r0, #8]
 800ae60:	8181      	strh	r1, [r0, #12]
 800ae62:	6643      	str	r3, [r0, #100]	; 0x64
 800ae64:	81c2      	strh	r2, [r0, #14]
 800ae66:	6183      	str	r3, [r0, #24]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	2208      	movs	r2, #8
 800ae6c:	305c      	adds	r0, #92	; 0x5c
 800ae6e:	f7fd fca1 	bl	80087b4 <memset>
 800ae72:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <std+0x38>)
 800ae74:	6263      	str	r3, [r4, #36]	; 0x24
 800ae76:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <std+0x3c>)
 800ae78:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae7a:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <std+0x40>)
 800ae7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae7e:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <std+0x44>)
 800ae80:	6224      	str	r4, [r4, #32]
 800ae82:	6323      	str	r3, [r4, #48]	; 0x30
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	bf00      	nop
 800ae88:	0800b195 	.word	0x0800b195
 800ae8c:	0800b1b7 	.word	0x0800b1b7
 800ae90:	0800b1ef 	.word	0x0800b1ef
 800ae94:	0800b213 	.word	0x0800b213

0800ae98 <_cleanup_r>:
 800ae98:	4901      	ldr	r1, [pc, #4]	; (800aea0 <_cleanup_r+0x8>)
 800ae9a:	f000 b8af 	b.w	800affc <_fwalk_reent>
 800ae9e:	bf00      	nop
 800aea0:	0800add9 	.word	0x0800add9

0800aea4 <__sfmoreglue>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	2268      	movs	r2, #104	; 0x68
 800aea8:	1e4d      	subs	r5, r1, #1
 800aeaa:	4355      	muls	r5, r2
 800aeac:	460e      	mov	r6, r1
 800aeae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aeb2:	f7ff fc09 	bl	800a6c8 <_malloc_r>
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	b140      	cbz	r0, 800aecc <__sfmoreglue+0x28>
 800aeba:	2100      	movs	r1, #0
 800aebc:	e9c0 1600 	strd	r1, r6, [r0]
 800aec0:	300c      	adds	r0, #12
 800aec2:	60a0      	str	r0, [r4, #8]
 800aec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aec8:	f7fd fc74 	bl	80087b4 <memset>
 800aecc:	4620      	mov	r0, r4
 800aece:	bd70      	pop	{r4, r5, r6, pc}

0800aed0 <__sfp_lock_acquire>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__sfp_lock_acquire+0x8>)
 800aed2:	f000 b8b3 	b.w	800b03c <__retarget_lock_acquire_recursive>
 800aed6:	bf00      	nop
 800aed8:	200005b1 	.word	0x200005b1

0800aedc <__sfp_lock_release>:
 800aedc:	4801      	ldr	r0, [pc, #4]	; (800aee4 <__sfp_lock_release+0x8>)
 800aede:	f000 b8ae 	b.w	800b03e <__retarget_lock_release_recursive>
 800aee2:	bf00      	nop
 800aee4:	200005b1 	.word	0x200005b1

0800aee8 <__sinit_lock_acquire>:
 800aee8:	4801      	ldr	r0, [pc, #4]	; (800aef0 <__sinit_lock_acquire+0x8>)
 800aeea:	f000 b8a7 	b.w	800b03c <__retarget_lock_acquire_recursive>
 800aeee:	bf00      	nop
 800aef0:	200005b2 	.word	0x200005b2

0800aef4 <__sinit_lock_release>:
 800aef4:	4801      	ldr	r0, [pc, #4]	; (800aefc <__sinit_lock_release+0x8>)
 800aef6:	f000 b8a2 	b.w	800b03e <__retarget_lock_release_recursive>
 800aefa:	bf00      	nop
 800aefc:	200005b2 	.word	0x200005b2

0800af00 <__sinit>:
 800af00:	b510      	push	{r4, lr}
 800af02:	4604      	mov	r4, r0
 800af04:	f7ff fff0 	bl	800aee8 <__sinit_lock_acquire>
 800af08:	69a3      	ldr	r3, [r4, #24]
 800af0a:	b11b      	cbz	r3, 800af14 <__sinit+0x14>
 800af0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af10:	f7ff bff0 	b.w	800aef4 <__sinit_lock_release>
 800af14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af18:	6523      	str	r3, [r4, #80]	; 0x50
 800af1a:	4b13      	ldr	r3, [pc, #76]	; (800af68 <__sinit+0x68>)
 800af1c:	4a13      	ldr	r2, [pc, #76]	; (800af6c <__sinit+0x6c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	62a2      	str	r2, [r4, #40]	; 0x28
 800af22:	42a3      	cmp	r3, r4
 800af24:	bf04      	itt	eq
 800af26:	2301      	moveq	r3, #1
 800af28:	61a3      	streq	r3, [r4, #24]
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 f820 	bl	800af70 <__sfp>
 800af30:	6060      	str	r0, [r4, #4]
 800af32:	4620      	mov	r0, r4
 800af34:	f000 f81c 	bl	800af70 <__sfp>
 800af38:	60a0      	str	r0, [r4, #8]
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 f818 	bl	800af70 <__sfp>
 800af40:	2200      	movs	r2, #0
 800af42:	60e0      	str	r0, [r4, #12]
 800af44:	2104      	movs	r1, #4
 800af46:	6860      	ldr	r0, [r4, #4]
 800af48:	f7ff ff82 	bl	800ae50 <std>
 800af4c:	68a0      	ldr	r0, [r4, #8]
 800af4e:	2201      	movs	r2, #1
 800af50:	2109      	movs	r1, #9
 800af52:	f7ff ff7d 	bl	800ae50 <std>
 800af56:	68e0      	ldr	r0, [r4, #12]
 800af58:	2202      	movs	r2, #2
 800af5a:	2112      	movs	r1, #18
 800af5c:	f7ff ff78 	bl	800ae50 <std>
 800af60:	2301      	movs	r3, #1
 800af62:	61a3      	str	r3, [r4, #24]
 800af64:	e7d2      	b.n	800af0c <__sinit+0xc>
 800af66:	bf00      	nop
 800af68:	0800b45c 	.word	0x0800b45c
 800af6c:	0800ae99 	.word	0x0800ae99

0800af70 <__sfp>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	4607      	mov	r7, r0
 800af74:	f7ff ffac 	bl	800aed0 <__sfp_lock_acquire>
 800af78:	4b1e      	ldr	r3, [pc, #120]	; (800aff4 <__sfp+0x84>)
 800af7a:	681e      	ldr	r6, [r3, #0]
 800af7c:	69b3      	ldr	r3, [r6, #24]
 800af7e:	b913      	cbnz	r3, 800af86 <__sfp+0x16>
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff ffbd 	bl	800af00 <__sinit>
 800af86:	3648      	adds	r6, #72	; 0x48
 800af88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	d503      	bpl.n	800af98 <__sfp+0x28>
 800af90:	6833      	ldr	r3, [r6, #0]
 800af92:	b30b      	cbz	r3, 800afd8 <__sfp+0x68>
 800af94:	6836      	ldr	r6, [r6, #0]
 800af96:	e7f7      	b.n	800af88 <__sfp+0x18>
 800af98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af9c:	b9d5      	cbnz	r5, 800afd4 <__sfp+0x64>
 800af9e:	4b16      	ldr	r3, [pc, #88]	; (800aff8 <__sfp+0x88>)
 800afa0:	60e3      	str	r3, [r4, #12]
 800afa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afa6:	6665      	str	r5, [r4, #100]	; 0x64
 800afa8:	f000 f847 	bl	800b03a <__retarget_lock_init_recursive>
 800afac:	f7ff ff96 	bl	800aedc <__sfp_lock_release>
 800afb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afb8:	6025      	str	r5, [r4, #0]
 800afba:	61a5      	str	r5, [r4, #24]
 800afbc:	2208      	movs	r2, #8
 800afbe:	4629      	mov	r1, r5
 800afc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afc4:	f7fd fbf6 	bl	80087b4 <memset>
 800afc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afd0:	4620      	mov	r0, r4
 800afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd4:	3468      	adds	r4, #104	; 0x68
 800afd6:	e7d9      	b.n	800af8c <__sfp+0x1c>
 800afd8:	2104      	movs	r1, #4
 800afda:	4638      	mov	r0, r7
 800afdc:	f7ff ff62 	bl	800aea4 <__sfmoreglue>
 800afe0:	4604      	mov	r4, r0
 800afe2:	6030      	str	r0, [r6, #0]
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d1d5      	bne.n	800af94 <__sfp+0x24>
 800afe8:	f7ff ff78 	bl	800aedc <__sfp_lock_release>
 800afec:	230c      	movs	r3, #12
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	e7ee      	b.n	800afd0 <__sfp+0x60>
 800aff2:	bf00      	nop
 800aff4:	0800b45c 	.word	0x0800b45c
 800aff8:	ffff0001 	.word	0xffff0001

0800affc <_fwalk_reent>:
 800affc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b000:	4606      	mov	r6, r0
 800b002:	4688      	mov	r8, r1
 800b004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b008:	2700      	movs	r7, #0
 800b00a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b00e:	f1b9 0901 	subs.w	r9, r9, #1
 800b012:	d505      	bpl.n	800b020 <_fwalk_reent+0x24>
 800b014:	6824      	ldr	r4, [r4, #0]
 800b016:	2c00      	cmp	r4, #0
 800b018:	d1f7      	bne.n	800b00a <_fwalk_reent+0xe>
 800b01a:	4638      	mov	r0, r7
 800b01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b020:	89ab      	ldrh	r3, [r5, #12]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d907      	bls.n	800b036 <_fwalk_reent+0x3a>
 800b026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b02a:	3301      	adds	r3, #1
 800b02c:	d003      	beq.n	800b036 <_fwalk_reent+0x3a>
 800b02e:	4629      	mov	r1, r5
 800b030:	4630      	mov	r0, r6
 800b032:	47c0      	blx	r8
 800b034:	4307      	orrs	r7, r0
 800b036:	3568      	adds	r5, #104	; 0x68
 800b038:	e7e9      	b.n	800b00e <_fwalk_reent+0x12>

0800b03a <__retarget_lock_init_recursive>:
 800b03a:	4770      	bx	lr

0800b03c <__retarget_lock_acquire_recursive>:
 800b03c:	4770      	bx	lr

0800b03e <__retarget_lock_release_recursive>:
 800b03e:	4770      	bx	lr

0800b040 <__swhatbuf_r>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	460e      	mov	r6, r1
 800b044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b048:	2900      	cmp	r1, #0
 800b04a:	b096      	sub	sp, #88	; 0x58
 800b04c:	4614      	mov	r4, r2
 800b04e:	461d      	mov	r5, r3
 800b050:	da08      	bge.n	800b064 <__swhatbuf_r+0x24>
 800b052:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	061a      	lsls	r2, r3, #24
 800b05c:	d410      	bmi.n	800b080 <__swhatbuf_r+0x40>
 800b05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b062:	e00e      	b.n	800b082 <__swhatbuf_r+0x42>
 800b064:	466a      	mov	r2, sp
 800b066:	f000 f8fb 	bl	800b260 <_fstat_r>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	dbf1      	blt.n	800b052 <__swhatbuf_r+0x12>
 800b06e:	9a01      	ldr	r2, [sp, #4]
 800b070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b078:	425a      	negs	r2, r3
 800b07a:	415a      	adcs	r2, r3
 800b07c:	602a      	str	r2, [r5, #0]
 800b07e:	e7ee      	b.n	800b05e <__swhatbuf_r+0x1e>
 800b080:	2340      	movs	r3, #64	; 0x40
 800b082:	2000      	movs	r0, #0
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	b016      	add	sp, #88	; 0x58
 800b088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b08c <__smakebuf_r>:
 800b08c:	898b      	ldrh	r3, [r1, #12]
 800b08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b090:	079d      	lsls	r5, r3, #30
 800b092:	4606      	mov	r6, r0
 800b094:	460c      	mov	r4, r1
 800b096:	d507      	bpl.n	800b0a8 <__smakebuf_r+0x1c>
 800b098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	6163      	str	r3, [r4, #20]
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}
 800b0a8:	ab01      	add	r3, sp, #4
 800b0aa:	466a      	mov	r2, sp
 800b0ac:	f7ff ffc8 	bl	800b040 <__swhatbuf_r>
 800b0b0:	9900      	ldr	r1, [sp, #0]
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7ff fb07 	bl	800a6c8 <_malloc_r>
 800b0ba:	b948      	cbnz	r0, 800b0d0 <__smakebuf_r+0x44>
 800b0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c0:	059a      	lsls	r2, r3, #22
 800b0c2:	d4ef      	bmi.n	800b0a4 <__smakebuf_r+0x18>
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	f043 0302 	orr.w	r3, r3, #2
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	e7e3      	b.n	800b098 <__smakebuf_r+0xc>
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <__smakebuf_r+0x7c>)
 800b0d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0d4:	89a3      	ldrh	r3, [r4, #12]
 800b0d6:	6020      	str	r0, [r4, #0]
 800b0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	6163      	str	r3, [r4, #20]
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	6120      	str	r0, [r4, #16]
 800b0e6:	b15b      	cbz	r3, 800b100 <__smakebuf_r+0x74>
 800b0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f000 f8c9 	bl	800b284 <_isatty_r>
 800b0f2:	b128      	cbz	r0, 800b100 <__smakebuf_r+0x74>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	89a0      	ldrh	r0, [r4, #12]
 800b102:	4305      	orrs	r5, r0
 800b104:	81a5      	strh	r5, [r4, #12]
 800b106:	e7cd      	b.n	800b0a4 <__smakebuf_r+0x18>
 800b108:	0800ae99 	.word	0x0800ae99

0800b10c <_raise_r>:
 800b10c:	291f      	cmp	r1, #31
 800b10e:	b538      	push	{r3, r4, r5, lr}
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	d904      	bls.n	800b120 <_raise_r+0x14>
 800b116:	2316      	movs	r3, #22
 800b118:	6003      	str	r3, [r0, #0]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b122:	b112      	cbz	r2, 800b12a <_raise_r+0x1e>
 800b124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b128:	b94b      	cbnz	r3, 800b13e <_raise_r+0x32>
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f830 	bl	800b190 <_getpid_r>
 800b130:	462a      	mov	r2, r5
 800b132:	4601      	mov	r1, r0
 800b134:	4620      	mov	r0, r4
 800b136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b13a:	f000 b817 	b.w	800b16c <_kill_r>
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d00a      	beq.n	800b158 <_raise_r+0x4c>
 800b142:	1c59      	adds	r1, r3, #1
 800b144:	d103      	bne.n	800b14e <_raise_r+0x42>
 800b146:	2316      	movs	r3, #22
 800b148:	6003      	str	r3, [r0, #0]
 800b14a:	2001      	movs	r0, #1
 800b14c:	e7e7      	b.n	800b11e <_raise_r+0x12>
 800b14e:	2400      	movs	r4, #0
 800b150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b154:	4628      	mov	r0, r5
 800b156:	4798      	blx	r3
 800b158:	2000      	movs	r0, #0
 800b15a:	e7e0      	b.n	800b11e <_raise_r+0x12>

0800b15c <raise>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	; (800b168 <raise+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f7ff bfd3 	b.w	800b10c <_raise_r>
 800b166:	bf00      	nop
 800b168:	20000010 	.word	0x20000010

0800b16c <_kill_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d07      	ldr	r5, [pc, #28]	; (800b18c <_kill_r+0x20>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	4611      	mov	r1, r2
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	f7f8 fd81 	bl	8003c80 <_kill>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	d102      	bne.n	800b188 <_kill_r+0x1c>
 800b182:	682b      	ldr	r3, [r5, #0]
 800b184:	b103      	cbz	r3, 800b188 <_kill_r+0x1c>
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	bd38      	pop	{r3, r4, r5, pc}
 800b18a:	bf00      	nop
 800b18c:	200005ac 	.word	0x200005ac

0800b190 <_getpid_r>:
 800b190:	f7f8 bd6e 	b.w	8003c70 <_getpid>

0800b194 <__sread>:
 800b194:	b510      	push	{r4, lr}
 800b196:	460c      	mov	r4, r1
 800b198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b19c:	f000 f894 	bl	800b2c8 <_read_r>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	bfab      	itete	ge
 800b1a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b1a8:	181b      	addge	r3, r3, r0
 800b1aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1ae:	bfac      	ite	ge
 800b1b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1b2:	81a3      	strhlt	r3, [r4, #12]
 800b1b4:	bd10      	pop	{r4, pc}

0800b1b6 <__swrite>:
 800b1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ba:	461f      	mov	r7, r3
 800b1bc:	898b      	ldrh	r3, [r1, #12]
 800b1be:	05db      	lsls	r3, r3, #23
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	4616      	mov	r6, r2
 800b1c6:	d505      	bpl.n	800b1d4 <__swrite+0x1e>
 800b1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f000 f868 	bl	800b2a4 <_lseek_r>
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	4632      	mov	r2, r6
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ea:	f000 b817 	b.w	800b21c <_write_r>

0800b1ee <__sseek>:
 800b1ee:	b510      	push	{r4, lr}
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f6:	f000 f855 	bl	800b2a4 <_lseek_r>
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	bf15      	itete	ne
 800b200:	6560      	strne	r0, [r4, #84]	; 0x54
 800b202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b20a:	81a3      	strheq	r3, [r4, #12]
 800b20c:	bf18      	it	ne
 800b20e:	81a3      	strhne	r3, [r4, #12]
 800b210:	bd10      	pop	{r4, pc}

0800b212 <__sclose>:
 800b212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b216:	f000 b813 	b.w	800b240 <_close_r>
	...

0800b21c <_write_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	; (800b23c <_write_r+0x20>)
 800b220:	4604      	mov	r4, r0
 800b222:	4608      	mov	r0, r1
 800b224:	4611      	mov	r1, r2
 800b226:	2200      	movs	r2, #0
 800b228:	602a      	str	r2, [r5, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	f7f8 fd5f 	bl	8003cee <_write>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_write_r+0x1e>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_write_r+0x1e>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	200005ac 	.word	0x200005ac

0800b240 <_close_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d06      	ldr	r5, [pc, #24]	; (800b25c <_close_r+0x1c>)
 800b244:	2300      	movs	r3, #0
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	f7f8 fd6b 	bl	8003d26 <_close>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_close_r+0x1a>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_close_r+0x1a>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	200005ac 	.word	0x200005ac

0800b260 <_fstat_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d07      	ldr	r5, [pc, #28]	; (800b280 <_fstat_r+0x20>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	4611      	mov	r1, r2
 800b26c:	602b      	str	r3, [r5, #0]
 800b26e:	f7f8 fd66 	bl	8003d3e <_fstat>
 800b272:	1c43      	adds	r3, r0, #1
 800b274:	d102      	bne.n	800b27c <_fstat_r+0x1c>
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	b103      	cbz	r3, 800b27c <_fstat_r+0x1c>
 800b27a:	6023      	str	r3, [r4, #0]
 800b27c:	bd38      	pop	{r3, r4, r5, pc}
 800b27e:	bf00      	nop
 800b280:	200005ac 	.word	0x200005ac

0800b284 <_isatty_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d06      	ldr	r5, [pc, #24]	; (800b2a0 <_isatty_r+0x1c>)
 800b288:	2300      	movs	r3, #0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	f7f8 fd65 	bl	8003d5e <_isatty>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d102      	bne.n	800b29e <_isatty_r+0x1a>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	b103      	cbz	r3, 800b29e <_isatty_r+0x1a>
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	200005ac 	.word	0x200005ac

0800b2a4 <_lseek_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d07      	ldr	r5, [pc, #28]	; (800b2c4 <_lseek_r+0x20>)
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	4608      	mov	r0, r1
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	602a      	str	r2, [r5, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f7f8 fd5e 	bl	8003d74 <_lseek>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d102      	bne.n	800b2c2 <_lseek_r+0x1e>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b103      	cbz	r3, 800b2c2 <_lseek_r+0x1e>
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	200005ac 	.word	0x200005ac

0800b2c8 <_read_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d07      	ldr	r5, [pc, #28]	; (800b2e8 <_read_r+0x20>)
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	4608      	mov	r0, r1
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	602a      	str	r2, [r5, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	f7f8 fcec 	bl	8003cb4 <_read>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_read_r+0x1e>
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_read_r+0x1e>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	200005ac 	.word	0x200005ac

0800b2ec <_init>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <_fini>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr
