
WinchFirmwareRelease.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800b468  0800b468  0001b468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b93c  0800b93c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b944  0800b944  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b948  0800b948  0001b948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001e4  0800bb30  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800bb30  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a85  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002972  00000000  00000000  00036c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020746  00000000  00000000  0003bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209ee  00000000  00000000  0005c31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e92fe  00000000  00000000  0007cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016600a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  0016605c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b44c 	.word	0x0800b44c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b44c 	.word	0x0800b44c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <AS5600_Init>:

#include "AS5600.h"


uint8_t AS5600_Init(AS5600_Handle_t *hAS56)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/*Initialize with the necessary mode*/
	uint8_t temp = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
	 */

	/*
	 * Get the status of the Magnetic sensor by touching the mag register sensor
	 */
	const AS5600_StatusRegister_t agcReg = AS5600_REGISTER_AGC_H;
 8000fac:	231a      	movs	r3, #26
 8000fae:	737b      	strb	r3, [r7, #13]
	if(readByte(hAS56->I2Chandle, WHOAMI, agcReg) >= AS55600_SUCCESS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	7b7a      	ldrb	r2, [r7, #13]
 8000fb6:	216c      	movs	r1, #108	; 0x6c
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f85d 	bl	8001078 <readByte>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00d      	beq.n	8000fe0 <AS5600_Init+0x44>
	{
		ret = AS55600_SUCCESS;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
		hAS56->agcCount = readByte(hAS56->I2Chandle, WHOAMI, agcReg); /* useful while debugging */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	7b7a      	ldrb	r2, [r7, #13]
 8000fce:	216c      	movs	r1, #108	; 0x6c
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f851 	bl	8001078 <readByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	735a      	strb	r2, [r3, #13]
 8000fde:	e001      	b.n	8000fe4 <AS5600_Init+0x48>
	}

	else ret = AS5600_ERROR;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

	const AS5600_StatusRegister_t statusReg = AS5600_REGISTER_STATUS;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	733b      	strb	r3, [r7, #12]

	if((temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg)) >= AS55600_SUCCESS)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	216c      	movs	r1, #108	; 0x6c
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f841 	bl	8001078 <readByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <AS5600_Init+0x72>
	{
		//temp = readByte(hAS56->I2Chandle, WHOAMI, statusReg);

		ret = (temp & AS5600_MD) ? AS55600_SUCCESS : AS5600_ERROR;
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	115b      	asrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <AS5600_Init+0x76>
	}

	else ret = AS5600_ERROR;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <AS5600_GetRawAngle>:

uint8_t AS5600_GetRawAngle(AS5600_Handle_t* hAS56)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	const AS5600_OpRegister_t angleReg = AS5600_REGISTER_RAWANGLE_H;
 8001024:	230c      	movs	r3, #12
 8001026:	73fb      	strb	r3, [r7, #15]
	AS5600_OpStatus_t ret = AS5600_ERROR;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]

	uint8_t raw[2] = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	81bb      	strh	r3, [r7, #12]

	if((hAS56->I2Chandle == NULL)) return ret;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <AS5600_GetRawAngle+0x20>
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	e019      	b.n	8001070 <AS5600_GetRawAngle+0x54>

		//readByte(hAS56->I2Chandle, Address, subAddress);
	if(readMem(hAS56->I2Chandle, WHOAMI, angleReg, raw) != AS55600_SUCCESS) return ret;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	216c      	movs	r1, #108	; 0x6c
 8001048:	f000 f840 	bl	80010cc <readMem>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d001      	beq.n	8001056 <AS5600_GetRawAngle+0x3a>
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	e00c      	b.n	8001070 <AS5600_GetRawAngle+0x54>

	else ret = AS55600_SUCCESS;
 8001056:	2301      	movs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]

	hAS56->rawAngle = ((uint16_t)((uint16_t)raw[0] << 8 | raw[1]));
 800105a:	7b3b      	ldrb	r3, [r7, #12]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	80da      	strh	r2, [r3, #6]

	return ret;
 800106e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <readByte>:
		 return 0;

}

uint8_t readByte(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	4613      	mov	r3, r2
 8001086:	70bb      	strb	r3, [r7, #2]
	uint8_t rxData[1] = {0};
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
	uint8_t txData[] = {subAddress};
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(I2Chandle, Address, txData, 1, AS5600_I2C_TIMEOUT);
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	b299      	uxth	r1, r3
 8001094:	f107 0208 	add.w	r2, r7, #8
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f003 f8fa 	bl	8004298 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(I2Chandle, Address, rxData, 1, AS5600_I2C_TIMEOUT) != HAL_ERROR) return rxData[0];
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f003 f9ee 	bl	8004494 <HAL_I2C_Master_Receive>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <readByte+0x4a>
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	e000      	b.n	80010c4 <readByte+0x4c>

	else return 0;
 80010c2:	2300      	movs	r3, #0

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <readMem>:
/*
 * Reads bytes of data
 */

uint8_t readMem(I2C_HandleTypeDef *I2Chandle, uint8_t Address, uint8_t subAddress, uint8_t* raw)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	72fb      	strb	r3, [r7, #11]
 80010da:	4613      	mov	r3, r2
 80010dc:	72bb      	strb	r3, [r7, #10]

	uint8_t rawData[2];

	if(HAL_I2C_Mem_Read(I2Chandle, Address, subAddress, I2C_MEMADD_SIZE_8BIT, rawData, 2, AS5600_I2C_TIMEOUT) != HAL_ERROR)
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b299      	uxth	r1, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2302      	movs	r3, #2
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f003 fbf2 	bl	80048e0 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d008      	beq.n	8001114 <readMem+0x48>
	{
		raw[0] = rawData[0];
 8001102:	7d3a      	ldrb	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	701a      	strb	r2, [r3, #0]
		raw[1] = rawData[1];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	7d7a      	ldrb	r2, [r7, #21]
 800110e:	701a      	strb	r2, [r3, #0]

		return 1;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <readMem+0x4a>
	}

	else return 0;
 8001114:	2300      	movs	r3, #0

}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <PID_Init>:
    Set the Max/Min lim for System anti saturation.
*/

/*Initializer*/
uint8_t PID_Init(PID_Handle_t *pid)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]

    /*Clear all the residuals*/

    pid->derivative = 0.0f;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
    pid->integrator = 0.0f;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
    pid->propotional = 0.0f;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	60da      	str	r2, [r3, #12]

    SetSampleRate(pid, 10); // 0.01 seconds
 800113e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f878 	bl	8001238 <SetSampleRate>


    pid->prevErr = 0.0f;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
    pid->prevMeasure = 0.0f;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	61da      	str	r2, [r3, #28]

    pid->pidout = 0.0f;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38

    return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <P_Compute>:

/* P controller only */
float P_Compute(PID_Handle_t *p, float measurement, float setPoint, float hal_tick)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	ed87 0a02 	vstr	s0, [r7, #8]
 8001178:	edc7 0a01 	vstr	s1, [r7, #4]
 800117c:	ed87 1a00 	vstr	s2, [r7]

	if(hal_tick > p->Ts)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001186:	ed97 7a00 	vldr	s14, [r7]
 800118a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dd39      	ble.n	8001208 <P_Compute+0x9c>
		*   0-100% after computing the values back to outputs which can be used in the real world.
		*
		*/
		//float err = setPoint - measurement;

		float err = (1 - measurement / setPoint);
 8001194:	edd7 6a02 	vldr	s13, [r7, #8]
 8001198:	ed97 7a01 	vldr	s14, [r7, #4]
 800119c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a8:	edc7 7a05 	vstr	s15, [r7, #20]

		if( err >=0 )
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	db26      	blt.n	8001208 <P_Compute+0x9c>
		{
			/*propotional*/
			p->propotional = p->kp * err;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edc3 7a03 	vstr	s15, [r3, #12]

			return (p->propotional *__8BIT_OUTPUT_MAX) <= (__8BIT_OUTPUT_MAX) ? (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN : __8BIT_OUTPUT_MAX;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001230 <P_Compute+0xc4>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001230 <P_Compute+0xc4>
 80011e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	d80b      	bhi.n	8001202 <P_Compute+0x96>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001230 <P_Compute+0xc4>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80011fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001200:	e00e      	b.n	8001220 <P_Compute+0xb4>
 8001202:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8001230 <P_Compute+0xc4>
 8001206:	e00b      	b.n	8001220 <P_Compute+0xb4>

		}

	}

	p->Ts += hal_tick;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800120e:	edd7 7a00 	vldr	s15, [r7]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return 0;
 800121c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001234 <P_Compute+0xc8>

	//return (p->propotional *__8BIT_OUTPUT_MAX) + __8BIT_OUTPUT_MIN;
}
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	43340000 	.word	0x43340000
 8001234:	00000000 	.word	0x00000000

08001238 <SetSampleRate>:

/* Set sampling period in milliseconds
* And apporiately scale the gains Ki, Kd 
*/
void SetSampleRate(PID_Handle_t *pid, float sampleTime)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	ed87 0a00 	vstr	s0, [r7]
    if(sampleTime > 0)
 8001244:	edd7 7a00 	vldr	s15, [r7]
 8001248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	dc00      	bgt.n	8001254 <SetSampleRate+0x1c>
        pid->ki *= ratio;
        pid->kd /= ratio;

        pid->Ts = sampleTime;
    }
}
 8001252:	e01f      	b.n	8001294 <SetSampleRate+0x5c>
        float ratio = (float)(sampleTime) / (float)(pid->Ts);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800125a:	edd7 6a00 	vldr	s13, [r7]
 800125e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001262:	edc7 7a03 	vstr	s15, [r7, #12]
        pid->ki *= ratio;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ed93 7a01 	vldr	s14, [r3, #4]
 800126c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a01 	vstr	s15, [r3, #4]
        pid->kd /= ratio;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001280:	ed97 7a03 	vldr	s14, [r7, #12]
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a02 	vstr	s15, [r3, #8]
        pid->Ts = sampleTime;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <MX_Universal_Init>:
static void MX_BomBay_Door_Close(void);
static void MX_Jump(void);

/* Private user code ---------------------------------------------------------*/
void MX_Universal_Init()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f001 fe0c 	bl	8002ec0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 fd68 	bl	8001d7c <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_USB_DEVICE_Init();
  MX_DMA_Init();
 80012ac:	f000 ffa8 	bl	8002200 <MX_DMA_Init>
  MX_ADC1_Init();
 80012b0:	f000 fdce 	bl	8001e50 <MX_ADC1_Init>
  MX_GPIO_Init();
 80012b4:	f000 ffc4 	bl	8002240 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b8:	f000 fe96 	bl	8001fe8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012bc:	f000 fee8 	bl	8002090 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c0:	f000 ff4a 	bl	8002158 <MX_TIM4_Init>
  MX_UART1_Init();
 80012c4:	f000 fe44 	bl	8001f50 <MX_UART1_Init>
  MX_UART2_Init();
 80012c8:	f000 fe68 	bl	8001f9c <MX_UART2_Init>
  MX_I2C1_Init();
 80012cc:	f000 fe12 	bl	8001ef4 <MX_I2C1_Init>


}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MX_Peripheral_Start_Init>:

void MX_Peripheral_Start_Init()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	 *  1. Encoder IT Start
	 *  2. PWM CH1, CH2 Start
	 *  3. TIM Input Cpature Mode Start
	 *  4. ADC DMA Start
	 */
	if(HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL) != HAL_OK)  Error_Handler();
 80012d8:	213c      	movs	r1, #60	; 0x3c
 80012da:	4831      	ldr	r0, [pc, #196]	; (80013a0 <MX_Peripheral_Start_Init+0xcc>)
 80012dc:	f005 f908 	bl	80064f0 <HAL_TIM_Encoder_Start_IT>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_Peripheral_Start_Init+0x16>
 80012e6:	f001 f84e 	bl	8002386 <Error_Handler>

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80012ea:	2100      	movs	r1, #0
 80012ec:	482d      	ldr	r0, [pc, #180]	; (80013a4 <MX_Peripheral_Start_Init+0xd0>)
 80012ee:	f004 fddb 	bl	8005ea8 <HAL_TIM_PWM_Start>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_Peripheral_Start_Init+0x28>
 80012f8:	f001 f845 	bl	8002386 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80012fc:	2104      	movs	r1, #4
 80012fe:	4829      	ldr	r0, [pc, #164]	; (80013a4 <MX_Peripheral_Start_Init+0xd0>)
 8001300:	f004 fdd2 	bl	8005ea8 <HAL_TIM_PWM_Start>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_Peripheral_Start_Init+0x3a>
 800130a:	f001 f83c 	bl	8002386 <Error_Handler>

	if(HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1)!= HAL_OK) Error_Handler();
 800130e:	2100      	movs	r1, #0
 8001310:	4825      	ldr	r0, [pc, #148]	; (80013a8 <MX_Peripheral_Start_Init+0xd4>)
 8001312:	f004 ff2d 	bl	8006170 <HAL_TIM_IC_Start_IT>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_Peripheral_Start_Init+0x4c>
 800131c:	f001 f833 	bl	8002386 <Error_Handler>

	//if(HAL_ADC_Start_DMA(&hadc1, &Buf, 1) != HAL_OK) Error_Handler();

	memset(buf, 0, sizeof(buf));
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2100      	movs	r1, #0
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_Peripheral_Start_Init+0xd8>)
 8001326:	f007 f927 	bl	8008578 <memset>
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);

	/*
	 * 1.GPIO PIN Inits
	 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2101      	movs	r1, #1
 800132e:	4820      	ldr	r0, [pc, #128]	; (80013b0 <MX_Peripheral_Start_Init+0xdc>)
 8001330:	f002 fe30 	bl	8003f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133a:	481e      	ldr	r0, [pc, #120]	; (80013b4 <MX_Peripheral_Start_Init+0xe0>)
 800133c:	f002 fe2a 	bl	8003f94 <HAL_GPIO_WritePin>
	 * Get the raw angle.
	 * Store the Init raw angle to a global var.
	 * Then count the revolutions on the basis of that raw angle.
	 * i.e. if the raw angle is 20 deg, then every time the angle goes above 20 is one revolution.
	 */
	as5600.I2Chandle = &hi2c1;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <MX_Peripheral_Start_Init+0xe8>)
 8001344:	601a      	str	r2, [r3, #0]
	while(!AS5600_Init(&as5600))
 8001346:	e007      	b.n	8001358 <MX_Peripheral_Start_Init+0x84>
	{
		sprintf((char*)buf, "Can't detect the Magnet\r\n");
 8001348:	491d      	ldr	r1, [pc, #116]	; (80013c0 <MX_Peripheral_Start_Init+0xec>)
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <MX_Peripheral_Start_Init+0xd8>)
 800134c:	f007 fd86 	bl	8008e5c <siprintf>
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		HAL_Delay(500);
 8001350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001354:	f001 fe26 	bl	8002fa4 <HAL_Delay>
	while(!AS5600_Init(&as5600))
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 800135a:	f7ff fe1f 	bl	8000f9c <AS5600_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f1      	beq.n	8001348 <MX_Peripheral_Start_Init+0x74>
	}

	HAL_Delay(500); /*Time to set*/
 8001364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001368:	f001 fe1c 	bl	8002fa4 <HAL_Delay>

	AS5600_GetRawAngle(&as5600);
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 800136e:	f7ff fe55 	bl	800101c <AS5600_GetRawAngle>
	CurrRead = as5600.rawAngle;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_Peripheral_Start_Init+0xe4>)
 8001374:	88da      	ldrh	r2, [r3, #6]
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_Peripheral_Start_Init+0xf0>)
 8001378:	801a      	strh	r2, [r3, #0]

	LastRead = CurrRead;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_Peripheral_Start_Init+0xf0>)
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_Peripheral_Start_Init+0xf4>)
 8001380:	801a      	strh	r2, [r3, #0]

	rev = 0;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_Peripheral_Start_Init+0xf8>)
 8001384:	2200      	movs	r2, #0
 8001386:	801a      	strh	r2, [r3, #0]
	Length = 0;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_Peripheral_Start_Init+0xfc>)
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
	//sprintf((char*)buf, "Initial Angle : %d\r\n", rawAngle);
	//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
//
	memset(buf, 0, sizeof(buf));
 8001390:	2240      	movs	r2, #64	; 0x40
 8001392:	2100      	movs	r1, #0
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_Peripheral_Start_Init+0xd8>)
 8001396:	f007 f8ef 	bl	8008578 <memset>
	//user_data = "Initialization successful\r\n";
	//data_len = strlen(user_data);
	//HAL_UART_Transmit(&huart1, (uint8_t*)user_data, data_len, HAL_MAX_DELAY);


}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002a8 	.word	0x200002a8
 80013a4:	200002f0 	.word	0x200002f0
 80013a8:	20000338 	.word	0x20000338
 80013ac:	20000484 	.word	0x20000484
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	2000045c 	.word	0x2000045c
 80013bc:	20000408 	.word	0x20000408
 80013c0:	0800b4d8 	.word	0x0800b4d8
 80013c4:	200004de 	.word	0x200004de
 80013c8:	200004dc 	.word	0x200004dc
 80013cc:	200004e0 	.word	0x200004e0
 80013d0:	200004e4 	.word	0x200004e4

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
	MX_Universal_Init();
 80013d8:	f7ff ff62 	bl	80012a0 <MX_Universal_Init>

  /* MCU Peripherals Start Commands-------------------------------------------*/
	MX_Peripheral_Start_Init();
 80013dc:	f7ff ff7a 	bl	80012d4 <MX_Peripheral_Start_Init>
	/*
	 * Winch Start Sequence
	 * 1. One reception of a signal of particular width start the winch sequence
	 * or else keep looping until forever.
	 */
	MX_WINCH_START_SEQ();
 80013e0:	f000 f81e 	bl	8001420 <MX_WINCH_START_SEQ>

	HAL_GPIO_WritePin(blue_led_GPIO_Port, blue_led_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	480a      	ldr	r0, [pc, #40]	; (8001414 <main+0x40>)
 80013ec:	f002 fdd2 	bl	8003f94 <HAL_GPIO_WritePin>
	 */
	//MX_BomBay_Door_Open();

	//HAL_Delay(2000); //Delay for the door to settle and prep for winch down.

	MX_WINCH_DOWN_GP_RAMP_UP();
 80013f0:	f000 f82e 	bl	8001450 <MX_WINCH_DOWN_GP_RAMP_UP>
	 *
	 * note TODO: current thing for detecting if payload is landed.
	 *
	 */

	MX_SOFT_START_P_CONTROLLER_RAMP_UP();
 80013f4:	f000 f9e4 	bl	80017c0 <MX_SOFT_START_P_CONTROLLER_RAMP_UP>

	MX_WINCH_P_CONTROLLER();
 80013f8:	f000 fa2e 	bl	8001858 <MX_WINCH_P_CONTROLLER>


	leg_len = Length; //Store the length of the first leg.
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <main+0x44>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <main+0x48>)
 8001402:	6013      	str	r3, [r2, #0]

	HAL_Delay(8000);  //Delay time
 8001404:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001408:	f001 fdcc 	bl	8002fa4 <HAL_Delay>


	MX_WINCH_UP_MOTO_RAMP_UP_DOWN();
 800140c:	f000 f880 	bl	8001510 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>

	//Start the Door Close sequence
	//MX_BomBay_Door_Close();

	while(1)
 8001410:	e7fe      	b.n	8001410 <main+0x3c>
 8001412:	bf00      	nop
 8001414:	40020800 	.word	0x40020800
 8001418:	200004e4 	.word	0x200004e4
 800141c:	200004fc 	.word	0x200004fc

08001420 <MX_WINCH_START_SEQ>:

///////////////////////////////////////////////////////////////////////////////////////////APPLICATION_LEVEL_ROUTINES//////////////////////////////////////////////////////////////


static void MX_WINCH_START_SEQ()
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	/*
	 * This part loops until a signal of particular pulse width is captured.
	 */
	//UNUSED();
	while(!(START_THE_SEQUENCE)){};
 8001424:	bf00      	nop
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <MX_WINCH_START_SEQ+0x24>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f8      	bne.n	8001426 <MX_WINCH_START_SEQ+0x6>

	Start_Flag = false;
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <MX_WINCH_START_SEQ+0x28>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]

	//MavLinkReceiveHoverCurr(&huart2, receivedData);

}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	200004f1 	.word	0x200004f1
 8001448:	200004e8 	.word	0x200004e8
 800144c:	00000000 	.word	0x00000000

08001450 <MX_WINCH_DOWN_GP_RAMP_UP>:
	}
}


void MX_WINCH_DOWN_GP_RAMP_UP(void)
{
 8001450:	b598      	push	{r3, r4, r7, lr}
 8001452:	af00      	add	r7, sp, #0


	while(gp_i >= 16)
 8001454:	e048      	b.n	80014e8 <MX_WINCH_DOWN_GP_RAMP_UP+0x98>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PWM_FIXED)/100);
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f85a 	bl	8000514 <__aeabi_ui2d>
 8001460:	a325      	add	r3, pc, #148	; (adr r3, 80014f8 <MX_WINCH_DOWN_GP_RAMP_UP+0xa8>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f8cf 	bl	8000608 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <MX_WINCH_DOWN_GP_RAMP_UP+0xb4>)
 8001478:	f7ff f9f0 	bl	800085c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	491f      	ldr	r1, [pc, #124]	; (8001500 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 8001482:	680c      	ldr	r4, [r1, #0]
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fb96 	bl	8000bb8 <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_Delay(PWM_ON_DELAY(PWM_FIXED));
 8001490:	2001      	movs	r0, #1
 8001492:	f001 fd87 	bl	8002fa4 <HAL_Delay>

		//sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f83a 	bl	8000514 <__aeabi_ui2d>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	f7ff f8ae 	bl	8000608 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_WINCH_DOWN_GP_RAMP_UP+0xb4>)
 80014ba:	f7ff f9cf 	bl	800085c <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	490f      	ldr	r1, [pc, #60]	; (8001500 <MX_WINCH_DOWN_GP_RAMP_UP+0xb0>)
 80014c4:	680c      	ldr	r4, [r1, #0]
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb75 	bl	8000bb8 <__aeabi_d2uiz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	63a3      	str	r3, [r4, #56]	; 0x38

		gp_i /= GP_DIV;
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 80014dc:	801a      	strh	r2, [r3, #0]
		HAL_Delay(gp_i);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fd5e 	bl	8002fa4 <HAL_Delay>
	while(gp_i >= 16)
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_WINCH_DOWN_GP_RAMP_UP+0xb8>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d8b2      	bhi.n	8001456 <MX_WINCH_DOWN_GP_RAMP_UP+0x6>

	}

}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	bd98      	pop	{r3, r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	877be861 	.word	0x877be861
 80014fc:	40478787 	.word	0x40478787
 8001500:	200002f0 	.word	0x200002f0
 8001504:	40590000 	.word	0x40590000
 8001508:	20000000 	.word	0x20000000
 800150c:	00000000 	.word	0x00000000

08001510 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN>:
 	memset(buf, 0, sizeof(buf));

}

void MX_WINCH_UP_MOTO_RAMP_UP_DOWN(void)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af02      	add	r7, sp, #8

	//First things first change the direction
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2120      	movs	r1, #32
 800151a:	489f      	ldr	r0, [pc, #636]	; (8001798 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x288>)
 800151c:	f002 fd3a 	bl	8003f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001526:	489c      	ldr	r0, [pc, #624]	; (8001798 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x288>)
 8001528:	f002 fd34 	bl	8003f94 <HAL_GPIO_WritePin>

	uint32_t loop_5 = Counts * 0.1;  //Set the threshold
 800152c:	4b9b      	ldr	r3, [pc, #620]	; (800179c <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x28c>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fffe 	bl	8000534 <__aeabi_i2d>
 8001538:	a38f      	add	r3, pc, #572	; (adr r3, 8001778 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x268>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff f863 	bl	8000608 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb35 	bl	8000bb8 <__aeabi_d2uiz>
 800154e:	4603      	mov	r3, r0
 8001550:	607b      	str	r3, [r7, #4]

	//Ramp Up Sequence

	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 8001552:	4b93      	ldr	r3, [pc, #588]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001554:	221e      	movs	r2, #30
 8001556:	801a      	strh	r2, [r3, #0]
 8001558:	e0ab      	b.n	80016b2 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1a2>
	{
		if(rev > loop_5)
 800155a:	4b92      	ldr	r3, [pc, #584]	; (80017a4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x294>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4293      	cmp	r3, r2
 8001566:	d23e      	bcs.n	80015e6 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0xd6>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 8001568:	4b8f      	ldr	r3, [pc, #572]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffd1 	bl	8000514 <__aeabi_ui2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	4b8a      	ldr	r3, [pc, #552]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffda 	bl	8000534 <__aeabi_i2d>
 8001580:	a37f      	add	r3, pc, #508	; (adr r3, 8001780 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x270>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f83f 	bl	8000608 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4620      	mov	r0, r4
 8001590:	4629      	mov	r1, r5
 8001592:	f7ff f839 	bl	8000608 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b82      	ldr	r3, [pc, #520]	; (80017ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 80015a4:	f7ff f95a 	bl	800085c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	497e      	ldr	r1, [pc, #504]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 80015ae:	680c      	ldr	r4, [r1, #0]
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fb00 	bl	8000bb8 <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	63a3      	str	r3, [r4, #56]	; 0x38
			sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);
 80015bc:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	461c      	mov	r4, r3
 80015c2:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffc6 	bl	8000558 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9cd 2300 	strd	r2, r3, [sp]
 80015d4:	4622      	mov	r2, r4
 80015d6:	4977      	ldr	r1, [pc, #476]	; (80017b4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a4>)
 80015d8:	4877      	ldr	r0, [pc, #476]	; (80017b8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a8>)
 80015da:	f007 fc3f 	bl	8008e5c <siprintf>

			//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
			//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

			HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 80015de:	2028      	movs	r0, #40	; 0x28
 80015e0:	f001 fce0 	bl	8002fa4 <HAL_Delay>
 80015e4:	e05f      	b.n	80016a6 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x196>

		//This is unlikely to ever happen but for safety.
		else
		{
			//Write a very short but effective ramp_down so that there is not jerk at zero.
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(40)/100);
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff92 	bl	8000514 <__aeabi_ui2d>
 80015f0:	a365      	add	r3, pc, #404	; (adr r3, 8001788 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x278>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f807 	bl	8000608 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b69      	ldr	r3, [pc, #420]	; (80017ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 8001608:	f7ff f928 	bl	800085c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4965      	ldr	r1, [pc, #404]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001612:	680c      	ldr	r4, [r1, #0]
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff face 	bl	8000bb8 <__aeabi_d2uiz>
 800161c:	4603      	mov	r3, r0
 800161e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 8001620:	2014      	movs	r0, #20
 8001622:	f001 fcbf 	bl	8002fa4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(20)/100);
 8001626:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff72 	bl	8000514 <__aeabi_ui2d>
 8001630:	a357      	add	r3, pc, #348	; (adr r3, 8001790 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x280>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffe7 	bl	8000608 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b59      	ldr	r3, [pc, #356]	; (80017ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 8001648:	f7ff f908 	bl	800085c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4955      	ldr	r1, [pc, #340]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001652:	680c      	ldr	r4, [r1, #0]
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff faae 	bl	8000bb8 <__aeabi_d2uiz>
 800165c:	4603      	mov	r3, r0
 800165e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_Delay(20);
 8001660:	2014      	movs	r0, #20
 8001662:	f001 fc9f 	bl	8002fa4 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001666:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff52 	bl	8000514 <__aeabi_ui2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	f7fe ffc6 	bl	8000608 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b48      	ldr	r3, [pc, #288]	; (80017ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 800168a:	f7ff f8e7 	bl	800085c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4945      	ldr	r1, [pc, #276]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001694:	680c      	ldr	r4, [r1, #0]
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff fa8d 	bl	8000bb8 <__aeabi_d2uiz>
 800169e:	4603      	mov	r3, r0
 80016a0:	6363      	str	r3, [r4, #52]	; 0x34

			//And just stop, something's fishy!
			MX_Jump();
 80016a2:	f000 fe6b 	bl	800237c <MX_Jump>
	for(i = PWM_UP_START; i< INTERMITENT_DC; i ++ )
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80016b0:	801a      	strh	r2, [r3, #0]
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2bb3      	cmp	r3, #179	; 0xb3
 80016b8:	f67f af4f 	bls.w	800155a <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x4a>
	}


	//Ramp Down Sequence

	for(i = INTERMITENT_DC; i> 60; i -- )
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80016be:	22b4      	movs	r2, #180	; 0xb4
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	e04a      	b.n	800175a <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x24a>
		{
			if(rev > loop_5)
 80016c4:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x294>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d248      	bcs.n	8001764 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x254>
			{
				//There is enough room to spool at the current rate do nothing different.
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff1c 	bl	8000514 <__aeabi_ui2d>
 80016dc:	4604      	mov	r4, r0
 80016de:	460d      	mov	r5, r1
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff25 	bl	8000534 <__aeabi_i2d>
 80016ea:	a325      	add	r3, pc, #148	; (adr r3, 8001780 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x270>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff8a 	bl	8000608 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7fe ff84 	bl	8000608 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x29c>)
 800170e:	f7ff f8a5 	bl	800085c <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4924      	ldr	r1, [pc, #144]	; (80017a8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x298>)
 8001718:	680c      	ldr	r4, [r1, #0]
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa4b 	bl	8000bb8 <__aeabi_d2uiz>
 8001722:	4603      	mov	r3, r0
 8001724:	63a3      	str	r3, [r4, #56]	; 0x38
				sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length); //i*0.019605
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461c      	mov	r4, r3
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff11 	bl	8000558 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9cd 2300 	strd	r2, r3, [sp]
 800173e:	4622      	mov	r2, r4
 8001740:	491c      	ldr	r1, [pc, #112]	; (80017b4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a4>)
 8001742:	481d      	ldr	r0, [pc, #116]	; (80017b8 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2a8>)
 8001744:	f007 fb8a 	bl	8008e5c <siprintf>

				//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
				//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

				HAL_Delay(PWM_RAMP_DOWN_DURATION);    //This finishes the ramp up in
 8001748:	2078      	movs	r0, #120	; 0x78
 800174a:	f001 fc2b 	bl	8002fa4 <HAL_Delay>
	for(i = INTERMITENT_DC; i> 60; i -- )
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x290>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	2b3c      	cmp	r3, #60	; 0x3c
 8001760:	d8b0      	bhi.n	80016c4 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x1b4>
 8001762:	e000      	b.n	8001766 <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x256>
			}

			else break;
 8001764:	bf00      	nop
		}


	//Its only after this point we need to activate the door close interrupt flag
	close_door = true;
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_WINCH_UP_MOTO_RAMP_UP_DOWN+0x2ac>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
	//sprintf((char*)buf, "About to reach the payload bay @ PWM: %d\r\n", PWM_CONSTANT);

	//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
	//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bdb0      	pop	{r4, r5, r7, pc}
 8001774:	f3af 8000 	nop.w
 8001778:	9999999a 	.word	0x9999999a
 800177c:	3fb99999 	.word	0x3fb99999
 8001780:	190cb39b 	.word	0x190cb39b
 8001784:	3fd91919 	.word	0x3fd91919
 8001788:	5f4fe082 	.word	0x5f4fe082
 800178c:	402f5f5f 	.word	0x402f5f5f
 8001790:	5f4fe082 	.word	0x5f4fe082
 8001794:	401f5f5f 	.word	0x401f5f5f
 8001798:	40020000 	.word	0x40020000
 800179c:	200004e2 	.word	0x200004e2
 80017a0:	200004fa 	.word	0x200004fa
 80017a4:	200004e0 	.word	0x200004e0
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	40590000 	.word	0x40590000
 80017b0:	200004e4 	.word	0x200004e4
 80017b4:	0800b4f4 	.word	0x0800b4f4
 80017b8:	20000484 	.word	0x20000484
 80017bc:	200004f8 	.word	0x200004f8

080017c0 <MX_SOFT_START_P_CONTROLLER_RAMP_UP>:


static void MX_SOFT_START_P_CONTROLLER_RAMP_UP(void)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 80017c6:	2279      	movs	r2, #121	; 0x79
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	e032      	b.n	8001832 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x72>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(i)/100);
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x8c>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe9f 	bl	8000514 <__aeabi_ui2d>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fea8 	bl	8000534 <__aeabi_i2d>
 80017e4:	a316      	add	r3, pc, #88	; (adr r3, 8001840 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x80>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff0d 	bl	8000608 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe ff07 	bl	8000608 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x90>)
 8001808:	f7ff f828 	bl	800085c <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	490e      	ldr	r1, [pc, #56]	; (800184c <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x8c>)
 8001812:	680c      	ldr	r4, [r1, #0]
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9ce 	bl	8000bb8 <__aeabi_d2uiz>
 800181c:	4603      	mov	r3, r0
 800181e:	63a3      	str	r3, [r4, #56]	; 0x38
		//sprintf((char*)buf, "PWM: %d, Length: %f\r\n", i, Length);

		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);
		//CDC_Transmit_FS((uint8_t *)buf, sizeof(buf));

		HAL_Delay(PWM_INTERMITANT_UP);    //This finishes the ramp up in
 8001820:	2028      	movs	r0, #40	; 0x28
 8001822:	f001 fbbf 	bl	8002fa4 <HAL_Delay>
	for(i = PWM_START; i< INTERMITENT_DC; i ++ )
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0x88>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2bb3      	cmp	r3, #179	; 0xb3
 8001838:	d9c8      	bls.n	80017cc <MX_SOFT_START_P_CONTROLLER_RAMP_UP+0xc>
	}
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	190cb39b 	.word	0x190cb39b
 8001844:	3fd91919 	.word	0x3fd91919
 8001848:	200004fa 	.word	0x200004fa
 800184c:	200002f0 	.word	0x200002f0
 8001850:	40590000 	.word	0x40590000
 8001854:	00000000 	.word	0x00000000

08001858 <MX_WINCH_P_CONTROLLER>:

/*
 * This sub-routine interfaces the P-based controller
 */
void MX_WINCH_P_CONTROLLER(void)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b092      	sub	sp, #72	; 0x48
 800185c:	af00      	add	r7, sp, #0
	PID_Handle_t pid;
	uint32_t motor_output = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	647b      	str	r3, [r7, #68]	; 0x44

	pid.Ts = 10; // 10 milliseconds.
 8001862:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <MX_WINCH_P_CONTROLLER+0x1d0>)
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
	pid.kp = 1.5;
 8001866:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800186a:	607b      	str	r3, [r7, #4]
	PID_Init(&pid);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc55 	bl	800111e <PID_Init>



	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig))
 8001874:	e057      	b.n	8001926 <MX_WINCH_P_CONTROLLER+0xce>
	{
		motor_output = P_Compute(&pid, Length, LEN_TO_WINCH_DOWN, uwTick);
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <MX_WINCH_P_CONTROLLER+0x1d4>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <MX_WINCH_P_CONTROLLER+0x1d8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	ee07 3a10 	vmov	s14, r3
 8001884:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	eeb0 1a47 	vmov.f32	s2, s14
 800188e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc68 	bl	800116c <P_Compute>
 800189c:	eef0 7a40 	vmov.f32	s15, s0
 80018a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a4:	ee17 3a90 	vmov	r3, s15
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44

		if(motor_output <= 30) motor_output = __8BIT_OUTPUT_MIN;
 80018aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ac:	2b1e      	cmp	r3, #30
 80018ae:	d801      	bhi.n	80018b4 <MX_WINCH_P_CONTROLLER+0x5c>
 80018b0:	231e      	movs	r3, #30
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(motor_output)/100);
 80018b4:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <MX_WINCH_P_CONTROLLER+0x1dc>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe2b 	bl	8000514 <__aeabi_ui2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80018c4:	f7fe fe26 	bl	8000514 <__aeabi_ui2d>
 80018c8:	a351      	add	r3, pc, #324	; (adr r3, 8001a10 <MX_WINCH_P_CONTROLLER+0x1b8>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fe9b 	bl	8000608 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4620      	mov	r0, r4
 80018d8:	4629      	mov	r1, r5
 80018da:	f7fe fe95 	bl	8000608 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <MX_WINCH_P_CONTROLLER+0x1e0>)
 80018ec:	f7fe ffb6 	bl	800085c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	494f      	ldr	r1, [pc, #316]	; (8001a34 <MX_WINCH_P_CONTROLLER+0x1dc>)
 80018f6:	680c      	ldr	r4, [r1, #0]
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f95c 	bl	8000bb8 <__aeabi_d2uiz>
 8001900:	4603      	mov	r3, r0
 8001902:	63a3      	str	r3, [r4, #56]	; 0x38

		//sprintf((char*)buf, "PWM: %ld, Length: %f, Tick: %ld\r\n", motor_output, Length, tick); //i*0.019605

		//HAL_Delay(10);

		if(Length >= THRESHOLD_LEN)
 8001904:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <MX_WINCH_P_CONTROLLER+0x1d4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe25 	bl	8000558 <__aeabi_f2d>
 800190e:	a342      	add	r3, pc, #264	; (adr r3, 8001a18 <MX_WINCH_P_CONTROLLER+0x1c0>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7ff f8fe 	bl	8000b14 <__aeabi_dcmpge>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d100      	bne.n	8001920 <MX_WINCH_P_CONTROLLER+0xc8>
 800191e:	e002      	b.n	8001926 <MX_WINCH_P_CONTROLLER+0xce>
		{
			poop_back = true;
 8001920:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <MX_WINCH_P_CONTROLLER+0x1e4>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
	while((Length <= LEN_TO_WINCH_DOWN)  && !(spring_trig))
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <MX_WINCH_P_CONTROLLER+0x1d4>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d806      	bhi.n	8001948 <MX_WINCH_P_CONTROLLER+0xf0>
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <MX_WINCH_P_CONTROLLER+0x1e8>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	f083 0301 	eor.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d196      	bne.n	8001876 <MX_WINCH_P_CONTROLLER+0x1e>
	}

	//__HAL_TIM_SET_COMPARE(&tim3, TIM_CHANNEL_1, tim3.Init.Period * 0/100);


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2120      	movs	r1, #32
 800194c:	483d      	ldr	r0, [pc, #244]	; (8001a44 <MX_WINCH_P_CONTROLLER+0x1ec>)
 800194e:	f002 fb21 	bl	8003f94 <HAL_GPIO_WritePin>

	for(int i =0; i<12000; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	643b      	str	r3, [r7, #64]	; 0x40
 8001956:	e01f      	b.n	8001998 <MX_WINCH_P_CONTROLLER+0x140>
	{

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <MX_WINCH_P_CONTROLLER+0x1dc>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdd9 	bl	8000514 <__aeabi_ui2d>
 8001962:	a32f      	add	r3, pc, #188	; (adr r3, 8001a20 <MX_WINCH_P_CONTROLLER+0x1c8>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe4e 	bl	8000608 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_WINCH_P_CONTROLLER+0x1e0>)
 800197a:	f7fe ff6f 	bl	800085c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	492c      	ldr	r1, [pc, #176]	; (8001a34 <MX_WINCH_P_CONTROLLER+0x1dc>)
 8001984:	680c      	ldr	r4, [r1, #0]
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f915 	bl	8000bb8 <__aeabi_d2uiz>
 800198e:	4603      	mov	r3, r0
 8001990:	63a3      	str	r3, [r4, #56]	; 0x38
	for(int i =0; i<12000; i++)
 8001992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001994:	3301      	adds	r3, #1
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
 8001998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800199e:	4293      	cmp	r3, r2
 80019a0:	ddda      	ble.n	8001958 <MX_WINCH_P_CONTROLLER+0x100>

	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <MX_WINCH_P_CONTROLLER+0x1dc>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdb4 	bl	8000514 <__aeabi_ui2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	f7fe fe28 	bl	8000608 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_WINCH_P_CONTROLLER+0x1e0>)
 80019c6:	f7fe ff49 	bl	800085c <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4919      	ldr	r1, [pc, #100]	; (8001a34 <MX_WINCH_P_CONTROLLER+0x1dc>)
 80019d0:	680c      	ldr	r4, [r1, #0]
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f8ef 	bl	8000bb8 <__aeabi_d2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	63a3      	str	r3, [r4, #56]	; 0x38

	if(rev < 0) Counts = -rev;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_WINCH_P_CONTROLLER+0x1f0>)
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da09      	bge.n	80019fc <MX_WINCH_P_CONTROLLER+0x1a4>
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_WINCH_P_CONTROLLER+0x1f0>)
 80019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	425b      	negs	r3, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_WINCH_P_CONTROLLER+0x1f4>)
 80019f8:	801a      	strh	r2, [r3, #0]
	else Counts = rev;

}
 80019fa:	e004      	b.n	8001a06 <MX_WINCH_P_CONTROLLER+0x1ae>
	else Counts = rev;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_WINCH_P_CONTROLLER+0x1f0>)
 80019fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_WINCH_P_CONTROLLER+0x1f4>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	3748      	adds	r7, #72	; 0x48
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	190cb39b 	.word	0x190cb39b
 8001a14:	3fd91919 	.word	0x3fd91919
 8001a18:	66666666 	.word	0x66666666
 8001a1c:	40306666 	.word	0x40306666
 8001a20:	877be861 	.word	0x877be861
 8001a24:	40278787 	.word	0x40278787
 8001a28:	41200000 	.word	0x41200000
 8001a2c:	200004e4 	.word	0x200004e4
 8001a30:	20000520 	.word	0x20000520
 8001a34:	200002f0 	.word	0x200002f0
 8001a38:	40590000 	.word	0x40590000
 8001a3c:	200004f2 	.word	0x200004f2
 8001a40:	200004f3 	.word	0x200004f3
 8001a44:	40020000 	.word	0x40020000
 8001a48:	200004e0 	.word	0x200004e0
 8001a4c:	200004e2 	.word	0x200004e2

08001a50 <HAL_TIM_IC_CaptureCallback>:
 * Based on the pre-defined signal type, routine scans for the particular DC signal
 * If obtained initiates the Winch Start Sequence.
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	f040 80aa 	bne.w	8001bb8 <HAL_TIM_IC_CaptureCallback+0x168>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8001a64:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 f852 	bl	8006b18 <HAL_TIM_ReadCapturedValue>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001a78:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
			}
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 8001a80:	e09a      	b.n	8001bb8 <HAL_TIM_IC_CaptureCallback+0x168>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001a82:	2100      	movs	r1, #0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f005 f847 	bl	8006b18 <HAL_TIM_ReadCapturedValue>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a8e:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8001a90:	4b4e      	ldr	r3, [pc, #312]	; (8001bcc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d907      	bls.n	8001aac <HAL_TIM_IC_CaptureCallback+0x5c>
				Difference = IC_Val2-IC_Val1;
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	; (8001bcc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	4a4a      	ldr	r2, [pc, #296]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00f      	b.n	8001acc <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d909      	bls.n	8001acc <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ac6:	33ff      	adds	r3, #255	; 0xff
 8001ac8:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001aca:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001acc:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001ace:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001adc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
			float mFactor = 1000000/refClock;
 8001aea:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001bdc <HAL_TIM_IC_CaptureCallback+0x18c>
 8001aee:	ed97 7a03 	vldr	s14, [r7, #12]
 8001af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af6:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b12:	ee17 2a90 	vmov	r2, s15
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b18:	601a      	str	r2, [r3, #0]
			if(usWidth >= THROTTLE_FULL)
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f240 726b 	movw	r2, #1899	; 0x76b
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d903      	bls.n	8001b2e <HAL_TIM_IC_CaptureCallback+0xde>
				Start_Flag = true;
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e03d      	b.n	8001baa <HAL_TIM_IC_CaptureCallback+0x15a>
			else if(usWidth >= THROTTLE_HALF && usWidth < THROTTLE_FULL)
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d90c      	bls.n	8001b54 <HAL_TIM_IC_CaptureCallback+0x104>
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f240 726b 	movw	r2, #1899	; 0x76b
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d806      	bhi.n	8001b54 <HAL_TIM_IC_CaptureCallback+0x104>
				Start_Flag = false;
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
				trig = 0;
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e02a      	b.n	8001baa <HAL_TIM_IC_CaptureCallback+0x15a>
			else if(usWidth < THROTTLE_HALF)
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d824      	bhi.n	8001baa <HAL_TIM_IC_CaptureCallback+0x15a>
				e_stop = true;
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcd2 	bl	8000514 <__aeabi_ui2d>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	f7fe fd46 	bl	8000608 <__aeabi_dmul>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001b8a:	f7fe fe67 	bl	800085c <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4917      	ldr	r1, [pc, #92]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001b94:	680c      	ldr	r4, [r1, #0]
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f80d 	bl	8000bb8 <__aeabi_d2uiz>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6363      	str	r3, [r4, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001ba6:	f004 fa2f 	bl	8006008 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	200004d0 	.word	0x200004d0
 8001bc8:	200004c4 	.word	0x200004c4
 8001bcc:	200004c8 	.word	0x200004c8
 8001bd0:	200004cc 	.word	0x200004cc
 8001bd4:	49742400 	.word	0x49742400
 8001bd8:	200004d8 	.word	0x200004d8
 8001bdc:	49742400 	.word	0x49742400
 8001be0:	200004d4 	.word	0x200004d4
 8001be4:	200004e8 	.word	0x200004e8
 8001be8:	200004ec 	.word	0x200004ec
 8001bec:	200004f0 	.word	0x200004f0
 8001bf0:	200002f0 	.word	0x200002f0
 8001bf4:	40590000 	.word	0x40590000

08001bf8 <HAL_SYSTICK_Callback>:
 *  2. Time is based on the Ramp_Up PWM
 *  3. Second time after the Ramp_Down PWM.
 */

void HAL_SYSTICK_Callback()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

	indx++;  //Monitors the time
 8001bfc:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <HAL_SYSTICK_Callback+0x158>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <HAL_SYSTICK_Callback+0x158>)
 8001c06:	801a      	strh	r2, [r3, #0]
	++tick;  // Updates the tick
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_SYSTICK_Callback+0x15c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_SYSTICK_Callback+0x15c>)
 8001c10:	6013      	str	r3, [r2, #0]

	if(Start_Flag)
 8001c12:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <HAL_SYSTICK_Callback+0x160>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d017      	beq.n	8001c4a <HAL_SYSTICK_Callback+0x52>
	{
		++trig;
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_SYSTICK_Callback+0x164>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <HAL_SYSTICK_Callback+0x164>)
 8001c22:	6013      	str	r3, [r2, #0]
		if(trig >= 5000)
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_SYSTICK_Callback+0x164>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d909      	bls.n	8001c44 <HAL_SYSTICK_Callback+0x4c>
		{
			START_THE_SEQUENCE = true;
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_SYSTICK_Callback+0x168>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
			Start_Flag = false;
 8001c36:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <HAL_SYSTICK_Callback+0x160>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

			//DeInit the IC interrupt
			HAL_TIM_IC_MspDeInit(&htim4);
 8001c3c:	4849      	ldr	r0, [pc, #292]	; (8001d64 <HAL_SYSTICK_Callback+0x16c>)
 8001c3e:	f000 fd91 	bl	8002764 <HAL_TIM_IC_MspDeInit>
 8001c42:	e002      	b.n	8001c4a <HAL_SYSTICK_Callback+0x52>

		}


		else {
			START_THE_SEQUENCE = false;
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_SYSTICK_Callback+0x168>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
		}
	}

	if(indx == 10)  // every 10 millisecond
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_SYSTICK_Callback+0x158>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	d172      	bne.n	8001d38 <HAL_SYSTICK_Callback+0x140>
	{
		//Calculate the rpm
		indx = 0;
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_SYSTICK_Callback+0x158>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	801a      	strh	r2, [r3, #0]
		AS5600_GetRawAngle(&as5600);
 8001c58:	4843      	ldr	r0, [pc, #268]	; (8001d68 <HAL_SYSTICK_Callback+0x170>)
 8001c5a:	f7ff f9df 	bl	800101c <AS5600_GetRawAngle>

		CurrRead = as5600.rawAngle;
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_SYSTICK_Callback+0x170>)
 8001c60:	88da      	ldrh	r2, [r3, #6]
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_SYSTICK_Callback+0x174>)
 8001c64:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  > 2047) rev ++;
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_SYSTICK_Callback+0x178>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_SYSTICK_Callback+0x174>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c76:	db08      	blt.n	8001c8a <HAL_SYSTICK_Callback+0x92>
 8001c78:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001c88:	801a      	strh	r2, [r3, #0]

		if((LastRead - CurrRead)  < -2047) rev --;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_SYSTICK_Callback+0x178>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_SYSTICK_Callback+0x174>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8001c9a:	dc08      	bgt.n	8001cae <HAL_SYSTICK_Callback+0xb6>
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001cac:	801a      	strh	r2, [r3, #0]

		//sprintf((char*)buf, "Rev : %d\r\n", rev);
		//HAL_UART_Transmit(&huart1, (uint8_t *)buf, sizeof(buf), HAL_MAX_DELAY);

		LastRead = CurrRead;
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_SYSTICK_Callback+0x174>)
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_SYSTICK_Callback+0x178>)
 8001cb4:	801a      	strh	r2, [r3, #0]

		if(rev < 0) Length = (2 * __PI * __RADIUS * (-rev)) * 0.01;   //Converting centi to meters
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da1e      	bge.n	8001cfe <HAL_SYSTICK_Callback+0x106>
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc33 	bl	8000534 <__aeabi_i2d>
 8001cce:	a31c      	add	r3, pc, #112	; (adr r3, 8001d40 <HAL_SYSTICK_Callback+0x148>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc98 	bl	8000608 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	a319      	add	r3, pc, #100	; (adr r3, 8001d48 <HAL_SYSTICK_Callback+0x150>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fc8f 	bl	8000608 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff81 	bl	8000bf8 <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_SYSTICK_Callback+0x180>)
 8001cfa:	6013      	str	r3, [r2, #0]
		}


	else{}

}
 8001cfc:	e01c      	b.n	8001d38 <HAL_SYSTICK_Callback+0x140>
		else Length = (2 * __PI * __RADIUS * (rev)) * 0.01;   //Converting centi to meters
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_SYSTICK_Callback+0x17c>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc15 	bl	8000534 <__aeabi_i2d>
 8001d0a:	a30d      	add	r3, pc, #52	; (adr r3, 8001d40 <HAL_SYSTICK_Callback+0x148>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fc7a 	bl	8000608 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	a30a      	add	r3, pc, #40	; (adr r3, 8001d48 <HAL_SYSTICK_Callback+0x150>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff63 	bl	8000bf8 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_SYSTICK_Callback+0x180>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	f3af 8000 	nop.w
 8001d40:	fa8871d5 	.word	0xfa8871d5
 8001d44:	40237a55 	.word	0x40237a55
 8001d48:	47ae147b 	.word	0x47ae147b
 8001d4c:	3f847ae1 	.word	0x3f847ae1
 8001d50:	20000500 	.word	0x20000500
 8001d54:	20000504 	.word	0x20000504
 8001d58:	200004e8 	.word	0x200004e8
 8001d5c:	200004ec 	.word	0x200004ec
 8001d60:	200004f1 	.word	0x200004f1
 8001d64:	20000338 	.word	0x20000338
 8001d68:	2000045c 	.word	0x2000045c
 8001d6c:	200004de 	.word	0x200004de
 8001d70:	200004dc 	.word	0x200004dc
 8001d74:	200004e0 	.word	0x200004e0
 8001d78:	200004e4 	.word	0x200004e4

08001d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b094      	sub	sp, #80	; 0x50
 8001d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	2230      	movs	r2, #48	; 0x30
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f006 fbf4 	bl	8008578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <SystemClock_Config+0xcc>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <SystemClock_Config+0xcc>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <SystemClock_Config+0xcc>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <SystemClock_Config+0xd0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc8:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <SystemClock_Config+0xd0>)
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <SystemClock_Config+0xd0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2302      	movs	r3, #2
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001df0:	230f      	movs	r3, #15
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001df4:	2390      	movs	r3, #144	; 0x90
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fba7 	bl	8005558 <HAL_RCC_OscConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e10:	f000 fab9 	bl	8002386 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e14:	230f      	movs	r3, #15
 8001e16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fe09 	bl	8005a48 <HAL_RCC_ClockConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e3c:	f000 faa3 	bl	8002386 <Error_Handler>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <MX_ADC1_Init+0x9c>)
 8001e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <MX_ADC1_Init+0xa0>)
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eae:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001eb0:	f001 f89c 	bl	8002fec <HAL_ADC_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001eba:	f000 fa64 	bl	8002386 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <MX_ADC1_Init+0x98>)
 8001ed0:	f001 f8d0 	bl	8003074 <HAL_ADC_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001eda:	f000 fa54 	bl	8002386 <Error_Handler>
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000200 	.word	0x20000200
 8001eec:	40012000 	.word	0x40012000
 8001ef0:	0f000001 	.word	0x0f000001

08001ef4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <MX_I2C1_Init+0x54>)
 8001efc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <MX_I2C1_Init+0x58>)
 8001f02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f16:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_I2C1_Init+0x50>)
 8001f32:	f002 f86d 	bl	8004010 <HAL_I2C_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001f3c:	f000 fa23 	bl	8002386 <Error_Handler>
	}
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000408 	.word	0x20000408
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	000186a0 	.word	0x000186a0

08001f50 <MX_UART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart1.Instance = USART1;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <MX_UART1_Init+0x48>)
 8001f58:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart1.Init.Parity = UART_PARITY_NONE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f7c:	220c      	movs	r2, #12
 8001f7e:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart1) != HAL_OK) Error_Handler();  // If there is a problem
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_UART1_Init+0x44>)
 8001f82:	f005 fa07 	bl	8007394 <HAL_UART_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_UART1_Init+0x40>
 8001f8c:	f000 f9fb 	bl	8002386 <Error_Handler>

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000380 	.word	0x20000380
 8001f98:	40011000 	.word	0x40011000

08001f9c <MX_UART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	/*
	 * High level initialization
	 */
	huart2.Instance = USART2;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <MX_UART2_Init+0x48>)
 8001fa4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
	//huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.Parity = UART_PARITY_NONE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fc8:	220c      	movs	r2, #12
 8001fca:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();  // If there is a problem
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_UART2_Init+0x44>)
 8001fce:	f005 f9e1 	bl	8007394 <HAL_UART_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_UART2_Init+0x40>
 8001fd8:	f000 f9d5 	bl	8002386 <Error_Handler>

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200003c4 	.word	0x200003c4
 8001fe4:	40004400 	.word	0x40004400

08001fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f006 fabe 	bl	8008578 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
  	 * Load the number to the ARR register.(Only 16 bit wide)
  	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
  	 *
  	 */

  htim2.Instance = TIM2;
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <MX_TIM2_Init+0xa4>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MX_TIM2_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <MX_TIM2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MX_TIM2_Init+0xa4>)
 800201a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <MX_TIM2_Init+0xa4>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <MX_TIM2_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800202c:	2303      	movs	r3, #3
 800202e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002030:	2302      	movs	r3, #2
 8002032:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002034:	2301      	movs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002044:	2301      	movs	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4619      	mov	r1, r3
 8002056:	480d      	ldr	r0, [pc, #52]	; (800208c <MX_TIM2_Init+0xa4>)
 8002058:	f004 f9a4 	bl	80063a4 <HAL_TIM_Encoder_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002062:	f000 f990 	bl	8002386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_TIM2_Init+0xa4>)
 8002074:	f005 f90c 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800207e:	f000 f982 	bl	8002386 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	3730      	adds	r7, #48	; 0x30
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200002a8 	.word	0x200002a8

08002090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
	 * Load the number to the ARR register.(Only 16 bit wide)
	 * side note-> Max ARR value can be upto and not more than 65535 since its a 16 bit register
	 *
	 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002096:	f107 0320 	add.w	r3, r7, #32
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	615a      	str	r2, [r3, #20]
 80020b0:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80020b2:	4b27      	ldr	r3, [pc, #156]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <MX_TIM3_Init+0xc4>)
 80020b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1; //60MHz
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020ba:	223b      	movs	r2, #59	; 0x3b
 80020bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64 - 1;  //Generates 15KHz frequency signal.
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020d6:	481e      	ldr	r0, [pc, #120]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020d8:	f003 fe96 	bl	8005e08 <HAL_TIM_PWM_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80020e2:	f000 f950 	bl	8002386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ee:	f107 0320 	add.w	r3, r7, #32
 80020f2:	4619      	mov	r1, r3
 80020f4:	4816      	ldr	r0, [pc, #88]	; (8002150 <MX_TIM3_Init+0xc0>)
 80020f6:	f005 f8cb 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002100:	f000 f941 	bl	8002386 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002104:	2360      	movs	r3, #96	; 0x60
 8002106:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <MX_TIM3_Init+0xc0>)
 800211c:	f004 fc3a 	bl	8006994 <HAL_TIM_PWM_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002126:	f000 f92e 	bl	8002386 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2204      	movs	r2, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <MX_TIM3_Init+0xc0>)
 8002132:	f004 fc2f 	bl	8006994 <HAL_TIM_PWM_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800213c:	f000 f923 	bl	8002386 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <MX_TIM3_Init+0xc0>)
 8002142:	f000 fad5 	bl	80026f0 <HAL_TIM_MspPostInit>

}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	; 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200002f0 	.word	0x200002f0
 8002154:	40000400 	.word	0x40000400

08002158 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002168:	463b      	mov	r3, r7
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <MX_TIM4_Init+0xa0>)
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <MX_TIM4_Init+0xa4>)
 8002178:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60-1;
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <MX_TIM4_Init+0xa0>)
 800217c:	223b      	movs	r2, #59	; 0x3b
 800217e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_TIM4_Init+0xa0>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_TIM4_Init+0xa0>)
 8002188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM4_Init+0xa0>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_TIM4_Init+0xa0>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800219a:	4817      	ldr	r0, [pc, #92]	; (80021f8 <MX_TIM4_Init+0xa0>)
 800219c:	f003 ff98 	bl	80060d0 <HAL_TIM_IC_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80021a6:	f000 f8ee 	bl	8002386 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4619      	mov	r1, r3
 80021b8:	480f      	ldr	r0, [pc, #60]	; (80021f8 <MX_TIM4_Init+0xa0>)
 80021ba:	f005 f869 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80021c4:	f000 f8df 	bl	8002386 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80021c8:	230a      	movs	r3, #10
 80021ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021cc:	2301      	movs	r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021d8:	463b      	mov	r3, r7
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <MX_TIM4_Init+0xa0>)
 80021e0:	f004 fb3c 	bl	800685c <HAL_TIM_IC_ConfigChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80021ea:	f000 f8cc 	bl	8002386 <Error_Handler>
  }

}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000338 	.word	0x20000338
 80021fc:	40000800 	.word	0x40000800

08002200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_DMA_Init+0x3c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <MX_DMA_Init+0x3c>)
 8002210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_DMA_Init+0x3c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2038      	movs	r0, #56	; 0x38
 8002228:	f001 fa1d 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800222c:	2038      	movs	r0, #56	; 0x38
 800222e:	f001 fa36 	bl	800369e <HAL_NVIC_EnableIRQ>

}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800

08002240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <MX_GPIO_Init+0x12c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a43      	ldr	r2, [pc, #268]	; (800236c <MX_GPIO_Init+0x12c>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <MX_GPIO_Init+0x12c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <MX_GPIO_Init+0x12c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a3c      	ldr	r2, [pc, #240]	; (800236c <MX_GPIO_Init+0x12c>)
 800227c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <MX_GPIO_Init+0x12c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <MX_GPIO_Init+0x12c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a35      	ldr	r2, [pc, #212]	; (800236c <MX_GPIO_Init+0x12c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <MX_GPIO_Init+0x12c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <MX_GPIO_Init+0x12c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a2e      	ldr	r2, [pc, #184]	; (800236c <MX_GPIO_Init+0x12c>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <MX_GPIO_Init+0x12c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, winch_dir_Pin|bay_dir_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80022cc:	4828      	ldr	r0, [pc, #160]	; (8002370 <MX_GPIO_Init+0x130>)
 80022ce:	f001 fe61 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : spring_thing_ext_Pin */
  GPIO_InitStruct.Pin = spring_thing_ext_Pin_Pin;
 80022d2:	2308      	movs	r3, #8
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(spring_thing_ext_Pin_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4823      	ldr	r0, [pc, #140]	; (8002374 <MX_GPIO_Init+0x134>)
 80022e8:	f001 fbec 	bl	8003ac4 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022ec:	2009      	movs	r0, #9
 80022ee:	f001 f9d6 	bl	800369e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn,15,0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	210f      	movs	r1, #15
 80022f6:	2009      	movs	r0, #9
 80022f8:	f001 f9b5 	bl	8003666 <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : winch_dir_Pin bay_dir_Pin */
  GPIO_InitStruct.Pin = winch_dir_Pin|bay_dir_Pin;
 80022fc:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4816      	ldr	r0, [pc, #88]	; (8002370 <MX_GPIO_Init+0x130>)
 8002316:	f001 fbd5 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : roof_top_ext_Pin */
  GPIO_InitStruct.Pin = roof_top_ext_Pin;
 800231a:	2301      	movs	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800231e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002324:	2301      	movs	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(roof_top_ext_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_GPIO_Init+0x134>)
 8002330:	f001 fbc8 	bl	8003ac4 <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002334:	2006      	movs	r0, #6
 8002336:	f001 f9b2 	bl	800369e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn,15,0);
 800233a:	2200      	movs	r2, #0
 800233c:	210f      	movs	r1, #15
 800233e:	2006      	movs	r0, #6
 8002340:	f001 f991 	bl	8003666 <HAL_NVIC_SetPriority>

  /*Configure GPIO pins : internal LED */
  GPIO_InitStruct.Pin = blue_led_Pin;
 8002344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(blue_led_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4806      	ldr	r0, [pc, #24]	; (8002378 <MX_GPIO_Init+0x138>)
 800235e:	f001 fbb1 	bl	8003ac4 <HAL_GPIO_Init>


}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800

0800237c <MX_Jump>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void MX_Jump()
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
}
 8002382:	bf00      	nop
	__disable_irq();
	while(1);
 8002384:	e7fe      	b.n	8002384 <MX_Jump+0x8>

08002386 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800238a:	b672      	cpsid	i
}
 800238c:	bf00      	nop

	/*
	 * Can Add ASSERT Statements here, for debugging purpose only.
	 */
  __disable_irq();
  while (1)
 800238e:	e7fe      	b.n	800238e <Error_Handler+0x8>

08002390 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_MspInit+0x4c>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_MspInit+0x4c>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a33      	ldr	r2, [pc, #204]	; (80024cc <HAL_ADC_MspInit+0xec>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d15f      	bne.n	80024c2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_ADC_MspInit+0xf0>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_ADC_MspInit+0xf0>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_ADC_MspInit+0xf0>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_ADC_MspInit+0xf0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <HAL_ADC_MspInit+0xf0>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_ADC_MspInit+0xf0>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = curr_sensor_Pin;
 800243a:	2310      	movs	r3, #16
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(curr_sensor_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4821      	ldr	r0, [pc, #132]	; (80024d4 <HAL_ADC_MspInit+0xf4>)
 800244e:	f001 fb39 	bl	8003ac4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_ADC_MspInit+0xfc>)
 8002456:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 800245a:	2200      	movs	r2, #0
 800245c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 800246c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002470:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002478:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 800247c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002480:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002488:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002496:	4810      	ldr	r0, [pc, #64]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 8002498:	f001 f922 	bl	80036e0 <HAL_DMA_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80024a2:	f7ff ff70 	bl	8002386 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_ADC_MspInit+0xf8>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2012      	movs	r0, #18
 80024b8:	f001 f8d5 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024bc:	2012      	movs	r0, #18
 80024be:	f001 f8ee 	bl	800369e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40012000 	.word	0x40012000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	20000248 	.word	0x20000248
 80024dc:	40026410 	.word	0x40026410

080024e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_I2C_MspInit+0x94>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d134      	bne.n	800256c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_I2C_MspInit+0x98>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_I2C_MspInit+0x98>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_I2C_MspInit+0x98>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800251e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002524:	2312      	movs	r3, #18
 8002526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002530:	2304      	movs	r3, #4
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	4810      	ldr	r0, [pc, #64]	; (800257c <HAL_I2C_MspInit+0x9c>)
 800253c:	f001 fac2 	bl	8003ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <HAL_I2C_MspInit+0x98>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <HAL_I2C_MspInit+0x98>)
 800254a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_I2C_MspInit+0x98>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2101      	movs	r1, #1
 8002560:	201f      	movs	r0, #31
 8002562:	f001 f880 	bl	8003666 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002566:	201f      	movs	r0, #31
 8002568:	f001 f899 	bl	800369e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40005400 	.word	0x40005400
 8002578:	40023800 	.word	0x40023800
 800257c:	40020400 	.word	0x40020400

08002580 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d12b      	bne.n	80025fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_TIM_Encoder_MspInit+0x84>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <HAL_TIM_Encoder_MspInit+0x84>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_TIM_Encoder_MspInit+0x84>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_TIM_Encoder_MspInit+0x84>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_TIM_Encoder_MspInit+0x84>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_TIM_Encoder_MspInit+0x84>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = encoder_a_Pin|encoder_b_Pin;
 80025da:	2303      	movs	r3, #3
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ea:	2301      	movs	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <HAL_TIM_Encoder_MspInit+0x88>)
 80025f6:	f001 fa65 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3728      	adds	r7, #40	; 0x28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000

0800260c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_TIM_PWM_MspInit+0x3c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10d      	bne.n	800263a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_TIM_PWM_MspInit+0x40>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_TIM_PWM_MspInit+0x40>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_TIM_PWM_MspInit+0x40>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40000400 	.word	0x40000400
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_TIM_IC_MspInit+0x94>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d133      	bne.n	80026da <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HAL_TIM_IC_MspInit+0x98>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_TIM_IC_MspInit+0x98>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_TIM_IC_MspInit+0x98>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_TIM_IC_MspInit+0x98>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_TIM_IC_MspInit+0x98>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_TIM_IC_MspInit+0x98>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = pixhawk_signal_Pin;
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026ba:	2302      	movs	r3, #2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(pixhawk_signal_GPIO_Port, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4809      	ldr	r0, [pc, #36]	; (80026ec <HAL_TIM_IC_MspInit+0x9c>)
 80026c6:	f001 f9fd 	bl	8003ac4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
   HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	201e      	movs	r0, #30
 80026d0:	f000 ffc9 	bl	8003666 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026d4:	201e      	movs	r0, #30
 80026d6:	f000 ffe2 	bl	800369e <HAL_NVIC_EnableIRQ>
  }

}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_TIM_MspPostInit+0x68>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d11d      	bne.n	800274e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_TIM_MspPostInit+0x6c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_TIM_MspPostInit+0x6c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_TIM_MspPostInit+0x6c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = winch_pwm_Pin|bay_door_pwm_Pin;
 800272e:	23c0      	movs	r3, #192	; 0xc0
 8002730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800273e:	2302      	movs	r3, #2
 8002740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <HAL_TIM_MspPostInit+0x70>)
 800274a:	f001 f9bb 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000400 	.word	0x40000400
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_TIM_IC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef* htim_ic)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_ic->Instance==TIM4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_TIM_IC_MspDeInit+0x30>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d109      	bne.n	800278a <HAL_TIM_IC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_TIM_IC_MspDeInit+0x34>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_TIM_IC_MspDeInit+0x34>)
 800277c:	f023 0304 	bic.w	r3, r3, #4
 8002780:	6413      	str	r3, [r2, #64]	; 0x40

    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    HAL_GPIO_DeInit(pixhawk_signal_GPIO_Port, pixhawk_signal_Pin);
 8002782:	2140      	movs	r1, #64	; 0x40
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <HAL_TIM_IC_MspDeInit+0x38>)
 8002786:	f001 fb21 	bl	8003dcc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40000800 	.word	0x40000800
 8002798:	40023800 	.word	0x40023800
 800279c:	40020400 	.word	0x40020400

080027a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <HAL_UART_MspInit+0x108>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d13d      	bne.n	800283e <HAL_UART_MspInit+0x9e>
  {
      /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_UART_MspInit+0x10c>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a38      	ldr	r2, [pc, #224]	; (80028ac <HAL_UART_MspInit+0x10c>)
 80027cc:	f043 0310 	orr.w	r3, r3, #16
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_UART_MspInit+0x10c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_UART_MspInit+0x10c>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a31      	ldr	r2, [pc, #196]	; (80028ac <HAL_UART_MspInit+0x10c>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_UART_MspInit+0x10c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800280c:	2307      	movs	r3, #7
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	4826      	ldr	r0, [pc, #152]	; (80028b0 <HAL_UART_MspInit+0x110>)
 8002818:	f001 f954 	bl	8003ac4 <HAL_GPIO_Init>


    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800281c:	2025      	movs	r0, #37	; 0x25
 800281e:	f000 ff3e 	bl	800369e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn,6,0);
 8002822:	2200      	movs	r2, #0
 8002824:	2106      	movs	r1, #6
 8002826:	2025      	movs	r0, #37	; 0x25
 8002828:	f000 ff1d 	bl	8003666 <HAL_NVIC_SetPriority>

	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800282c:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_UART_MspInit+0x114>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_UART_MspInit+0x114>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	60da      	str	r2, [r3, #12]

	//__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  }

}
 800283c:	e030      	b.n	80028a0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_UART_MspInit+0x118>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d12b      	bne.n	80028a0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_UART_MspInit+0x10c>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_UART_MspInit+0x10c>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	6413      	str	r3, [r2, #64]	; 0x40
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_UART_MspInit+0x10c>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_UART_MspInit+0x10c>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_UART_MspInit+0x10c>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_UART_MspInit+0x10c>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002880:	230c      	movs	r3, #12
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002890:	2307      	movs	r3, #7
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4619      	mov	r1, r3
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <HAL_UART_MspInit+0x110>)
 800289c:	f001 f912 	bl	8003ac4 <HAL_GPIO_Init>
}
 80028a0:	bf00      	nop
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	20000380 	.word	0x20000380
 80028b8:	40004400 	.word	0x40004400

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8002908:	f000 fb2c 	bl	8002f64 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800290c:	f000 fee1 	bl	80036d2 <HAL_SYSTICK_IRQHandler>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM4_IRQHandler+0x10>)
 800291a:	f003 fe97 	bl	800664c <HAL_TIM_IRQHandler>
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000338 	.word	0x20000338

08002928 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, &receivedData, 1, HAL_MAX_DELAY);
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	2201      	movs	r2, #1
 8002932:	4985      	ldr	r1, [pc, #532]	; (8002b48 <USART1_IRQHandler+0x220>)
 8002934:	4885      	ldr	r0, [pc, #532]	; (8002b4c <USART1_IRQHandler+0x224>)
 8002936:	f004 fe0c 	bl	8007552 <HAL_UART_Receive>
		if (receivedData == '\r')
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <USART1_IRQHandler+0x220>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b0d      	cmp	r3, #13
 8002940:	f040 809e 	bne.w	8002a80 <USART1_IRQHandler+0x158>
			{
				recepCmplt = true;
 8002944:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <USART1_IRQHandler+0x228>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
				Data = atoi((char*)data_buffer);
 800294a:	4882      	ldr	r0, [pc, #520]	; (8002b54 <USART1_IRQHandler+0x22c>)
 800294c:	f005 fdd8 	bl	8008500 <atoi>
 8002950:	4603      	mov	r3, r0
 8002952:	b21a      	sxth	r2, r3
 8002954:	4b80      	ldr	r3, [pc, #512]	; (8002b58 <USART1_IRQHandler+0x230>)
 8002956:	801a      	strh	r2, [r3, #0]

				data_buffer[count++] = '\r';
 8002958:	4b80      	ldr	r3, [pc, #512]	; (8002b5c <USART1_IRQHandler+0x234>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	497f      	ldr	r1, [pc, #508]	; (8002b5c <USART1_IRQHandler+0x234>)
 8002960:	600a      	str	r2, [r1, #0]
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <USART1_IRQHandler+0x22c>)
 8002964:	210d      	movs	r1, #13
 8002966:	54d1      	strb	r1, [r2, r3]

				Data1 = -Data;
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <USART1_IRQHandler+0x230>)
 800296a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296e:	425b      	negs	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4b7b      	ldr	r3, [pc, #492]	; (8002b60 <USART1_IRQHandler+0x238>)
 8002974:	601a      	str	r2, [r3, #0]

				if(Data >= 0)
 8002976:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <USART1_IRQHandler+0x230>)
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db36      	blt.n	80029ee <USART1_IRQHandler+0xc6>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); //GPIOC and PIN_0 changed
 8002980:	2200      	movs	r2, #0
 8002982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002986:	4877      	ldr	r0, [pc, #476]	; (8002b64 <USART1_IRQHandler+0x23c>)
 8002988:	f001 fb04 	bl	8003f94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	2120      	movs	r1, #32
 8002990:	4874      	ldr	r0, [pc, #464]	; (8002b64 <USART1_IRQHandler+0x23c>)
 8002992:	f001 faff 	bl	8003f94 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(Data)/100);
 8002996:	4b74      	ldr	r3, [pc, #464]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdba 	bl	8000514 <__aeabi_ui2d>
 80029a0:	4604      	mov	r4, r0
 80029a2:	460d      	mov	r5, r1
 80029a4:	4b6c      	ldr	r3, [pc, #432]	; (8002b58 <USART1_IRQHandler+0x230>)
 80029a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fdc2 	bl	8000534 <__aeabi_i2d>
 80029b0:	a363      	add	r3, pc, #396	; (adr r3, 8002b40 <USART1_IRQHandler+0x218>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fe27 	bl	8000608 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4620      	mov	r0, r4
 80029c0:	4629      	mov	r1, r5
 80029c2:	f7fd fe21 	bl	8000608 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <USART1_IRQHandler+0x244>)
 80029d4:	f7fd ff42 	bl	800085c <__aeabi_ddiv>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4962      	ldr	r1, [pc, #392]	; (8002b68 <USART1_IRQHandler+0x240>)
 80029de:	680c      	ldr	r4, [r1, #0]
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f8e8 	bl	8000bb8 <__aeabi_d2uiz>
 80029e8:	4603      	mov	r3, r0
 80029ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80029ec:	e036      	b.n	8002a5c <USART1_IRQHandler+0x134>

				}

				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); //GPIOC and PIN_0 changed
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f4:	485b      	ldr	r0, [pc, #364]	; (8002b64 <USART1_IRQHandler+0x23c>)
 80029f6:	f001 facd 	bl	8003f94 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80029fa:	2201      	movs	r2, #1
 80029fc:	2120      	movs	r1, #32
 80029fe:	4859      	ldr	r0, [pc, #356]	; (8002b64 <USART1_IRQHandler+0x23c>)
 8002a00:	f001 fac8 	bl	8003f94 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(-Data)/100);
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fd83 	bl	8000514 <__aeabi_ui2d>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	460d      	mov	r5, r1
 8002a12:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <USART1_IRQHandler+0x230>)
 8002a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a18:	425b      	negs	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd8a 	bl	8000534 <__aeabi_i2d>
 8002a20:	a347      	add	r3, pc, #284	; (adr r3, 8002b40 <USART1_IRQHandler+0x218>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fdef 	bl	8000608 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4620      	mov	r0, r4
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fd fde9 	bl	8000608 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <USART1_IRQHandler+0x244>)
 8002a44:	f7fd ff0a 	bl	800085c <__aeabi_ddiv>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4946      	ldr	r1, [pc, #280]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002a4e:	680c      	ldr	r4, [r1, #0]
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f8b0 	bl	8000bb8 <__aeabi_d2uiz>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	63a3      	str	r3, [r4, #56]	; 0x38

				}


				HAL_UART_Transmit(&huart1, data_buffer, count, HAL_MAX_DELAY);  //send to terminal
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <USART1_IRQHandler+0x234>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
 8002a66:	493b      	ldr	r1, [pc, #236]	; (8002b54 <USART1_IRQHandler+0x22c>)
 8002a68:	4838      	ldr	r0, [pc, #224]	; (8002b4c <USART1_IRQHandler+0x224>)
 8002a6a:	f004 fce0 	bl	800742e <HAL_UART_Transmit>
				memset(data_buffer, 0, sizeof(data_buffer));
 8002a6e:	2205      	movs	r2, #5
 8002a70:	2100      	movs	r1, #0
 8002a72:	4838      	ldr	r0, [pc, #224]	; (8002b54 <USART1_IRQHandler+0x22c>)
 8002a74:	f005 fd80 	bl	8008578 <memset>
				count = 0;
 8002a78:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <USART1_IRQHandler+0x234>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
		else
		{
			data_buffer[count++] = receivedData;
		}

	return;
 8002a7e:	e05c      	b.n	8002b3a <USART1_IRQHandler+0x212>
		else if(receivedData == ' ')
 8002a80:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <USART1_IRQHandler+0x220>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d136      	bne.n	8002af6 <USART1_IRQHandler+0x1ce>
			HAL_UART_Transmit(&huart1, (uint8_t *)E_Stop, strlen(E_Stop), HAL_MAX_DELAY);  //send to terminal
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <USART1_IRQHandler+0x248>)
 8002a8a:	681c      	ldr	r4, [r3, #0]
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <USART1_IRQHandler+0x248>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fba5 	bl	80001e0 <strlen>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	482a      	ldr	r0, [pc, #168]	; (8002b4c <USART1_IRQHandler+0x224>)
 8002aa2:	f004 fcc4 	bl	800742e <HAL_UART_Transmit>
			memset(data_buffer, 0, sizeof(data_buffer));
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	482a      	ldr	r0, [pc, #168]	; (8002b54 <USART1_IRQHandler+0x22c>)
 8002aac:	f005 fd64 	bl	8008578 <memset>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd2d 	bl	8000514 <__aeabi_ui2d>
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	f7fd fda1 	bl	8000608 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <USART1_IRQHandler+0x244>)
 8002ad4:	f7fd fec2 	bl	800085c <__aeabi_ddiv>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4922      	ldr	r1, [pc, #136]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002ade:	680c      	ldr	r4, [r1, #0]
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f868 	bl	8000bb8 <__aeabi_d2uiz>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	63a3      	str	r3, [r4, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8002aec:	2104      	movs	r1, #4
 8002aee:	481e      	ldr	r0, [pc, #120]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002af0:	f003 fa8a 	bl	8006008 <HAL_TIM_PWM_Stop>
	return;
 8002af4:	e021      	b.n	8002b3a <USART1_IRQHandler+0x212>
		else if(receivedData == 'r')
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <USART1_IRQHandler+0x220>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b72      	cmp	r3, #114	; 0x72
 8002afc:	d108      	bne.n	8002b10 <USART1_IRQHandler+0x1e8>
			HAL_GPIO_Init(GPIOA, &tim3ch1gpio);
 8002afe:	491d      	ldr	r1, [pc, #116]	; (8002b74 <USART1_IRQHandler+0x24c>)
 8002b00:	4818      	ldr	r0, [pc, #96]	; (8002b64 <USART1_IRQHandler+0x23c>)
 8002b02:	f000 ffdf 	bl	8003ac4 <HAL_GPIO_Init>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002b06:	2104      	movs	r1, #4
 8002b08:	4817      	ldr	r0, [pc, #92]	; (8002b68 <USART1_IRQHandler+0x240>)
 8002b0a:	f003 f9cd 	bl	8005ea8 <HAL_TIM_PWM_Start>
	return;
 8002b0e:	e014      	b.n	8002b3a <USART1_IRQHandler+0x212>
		else if(receivedData == 'v')
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <USART1_IRQHandler+0x220>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b76      	cmp	r3, #118	; 0x76
 8002b16:	d010      	beq.n	8002b3a <USART1_IRQHandler+0x212>
		else if(receivedData == 's')
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <USART1_IRQHandler+0x220>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b73      	cmp	r3, #115	; 0x73
 8002b1e:	d103      	bne.n	8002b28 <USART1_IRQHandler+0x200>
			Start_Flag = true;
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <USART1_IRQHandler+0x250>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
	return;
 8002b26:	e008      	b.n	8002b3a <USART1_IRQHandler+0x212>
			data_buffer[count++] = receivedData;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <USART1_IRQHandler+0x234>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	490b      	ldr	r1, [pc, #44]	; (8002b5c <USART1_IRQHandler+0x234>)
 8002b30:	600a      	str	r2, [r1, #0]
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <USART1_IRQHandler+0x220>)
 8002b34:	7811      	ldrb	r1, [r2, #0]
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <USART1_IRQHandler+0x22c>)
 8002b38:	54d1      	strb	r1, [r2, r3]
	return;
 8002b3a:	bf00      	nop

	HAL_UART_IRQHandler(&huart1);

}
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	190cb39b 	.word	0x190cb39b
 8002b44:	3fd91919 	.word	0x3fd91919
 8002b48:	2000046c 	.word	0x2000046c
 8002b4c:	20000380 	.word	0x20000380
 8002b50:	2000047c 	.word	0x2000047c
 8002b54:	20000470 	.word	0x20000470
 8002b58:	2000047e 	.word	0x2000047e
 8002b5c:	20000478 	.word	0x20000478
 8002b60:	20000480 	.word	0x20000480
 8002b64:	40020000 	.word	0x40020000
 8002b68:	200002f0 	.word	0x200002f0
 8002b6c:	40590000 	.word	0x40590000
 8002b70:	20000004 	.word	0x20000004
 8002b74:	20000508 	.word	0x20000508
 8002b78:	200004e8 	.word	0x200004e8

08002b7c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
	/*
	 * This handler is reserved for the Mavlink interface. Future Implementation.
	 */
	HAL_UART_IRQHandler(&huart2);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <USART2_IRQHandler+0x10>)
 8002b82:	f004 fd89 	bl	8007698 <HAL_UART_IRQHandler>
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200003c4 	.word	0x200003c4

08002b90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b90:	b598      	push	{r3, r4, r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	 * 2.Initiate the bay close door seq.
	 *
	 * PB0
	 */

	if(close_door)
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <EXTI0_IRQHandler+0x60>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <EXTI0_IRQHandler+0x54>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)parked, strlen(parked), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(0)/100);
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <EXTI0_IRQHandler+0x64>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcb7 	bl	8000514 <__aeabi_ui2d>
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	f7fd fd2b 	bl	8000608 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <EXTI0_IRQHandler+0x68>)
 8002bc0:	f7fd fe4c 	bl	800085c <__aeabi_ddiv>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <EXTI0_IRQHandler+0x64>)
 8002bca:	680c      	ldr	r4, [r1, #0]
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f7fd fff2 	bl	8000bb8 <__aeabi_d2uiz>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	63a3      	str	r3, [r4, #56]	; 0x38


		//Flip the bay_door flag to initiate bayclose door seq
		bay_door_close = true;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <EXTI0_IRQHandler+0x6c>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&hhtim3, TIM_CHANNEL_1, hhtim3.Init.Period * _8_BIT_MAP(PAYLOAD_2)/100);
			}
		*/

		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		spring_trig = false;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <EXTI0_IRQHandler+0x70>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
	}


  HAL_GPIO_EXTI_IRQHandler(roof_top_ext_Pin);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f001 f9ef 	bl	8003fc8 <HAL_GPIO_EXTI_IRQHandler>

}
 8002bea:	bf00      	nop
 8002bec:	bd98      	pop	{r3, r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200004f8 	.word	0x200004f8
 8002bf4:	200002f0 	.word	0x200002f0
 8002bf8:	40590000 	.word	0x40590000
 8002bfc:	200004f9 	.word	0x200004f9
 8002c00:	200004f3 	.word	0x200004f3
 8002c04:	00000000 	.word	0x00000000

08002c08 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
	 */

	/*
	 * Just a check for how many times does the spring trigger
	 */
	spring_trig_count++;
 8002c0e:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <EXTI3_IRQHandler+0xa0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <EXTI3_IRQHandler+0xa0>)
 8002c16:	6013      	str	r3, [r2, #0]

 	if(poop_back)
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <EXTI3_IRQHandler+0xa4>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d035      	beq.n	8002c8c <EXTI3_IRQHandler+0x84>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)data_btn, strlen(data_btn), HAL_MAX_DELAY);

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <EXTI3_IRQHandler+0xa8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38

		for(int i =0; i<24000; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	e01f      	b.n	8002c6e <EXTI3_IRQHandler+0x66>
		{

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * _8_BIT_MAP(PAYLOAD_3)/100);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <EXTI3_IRQHandler+0xa8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc6e 	bl	8000514 <__aeabi_ui2d>
 8002c38:	a319      	add	r3, pc, #100	; (adr r3, 8002ca0 <EXTI3_IRQHandler+0x98>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fce3 	bl	8000608 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <EXTI3_IRQHandler+0xac>)
 8002c50:	f7fd fe04 	bl	800085c <__aeabi_ddiv>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4915      	ldr	r1, [pc, #84]	; (8002cb0 <EXTI3_IRQHandler+0xa8>)
 8002c5a:	680c      	ldr	r4, [r1, #0]
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd ffaa 	bl	8000bb8 <__aeabi_d2uiz>
 8002c64:	4603      	mov	r3, r0
 8002c66:	63a3      	str	r3, [r4, #56]	; 0x38
		for(int i =0; i<24000; i++)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8002c74:	4293      	cmp	r3, r2
 8002c76:	ddda      	ble.n	8002c2e <EXTI3_IRQHandler+0x26>

		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period * 0/100);
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <EXTI3_IRQHandler+0xa8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
		//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);


		poop_back = false;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <EXTI3_IRQHandler+0xa4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
		spring_trig = true;
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <EXTI3_IRQHandler+0xb0>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]

	}

  HAL_GPIO_EXTI_IRQHandler(spring_thing_ext_Pin_Pin);
 8002c8c:	2008      	movs	r0, #8
 8002c8e:	f001 f99b 	bl	8003fc8 <HAL_GPIO_EXTI_IRQHandler>

}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	877be861 	.word	0x877be861
 8002ca4:	40278787 	.word	0x40278787
 8002ca8:	200004f4 	.word	0x200004f4
 8002cac:	200004f2 	.word	0x200004f2
 8002cb0:	200002f0 	.word	0x200002f0
 8002cb4:	40590000 	.word	0x40590000
 8002cb8:	200004f3 	.word	0x200004f3

08002cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
	return 1;
 8002cc0:	2301      	movs	r3, #1
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_kill>:

int _kill(int pid, int sig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cd6:	f005 fc17 	bl	8008508 <__errno>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2216      	movs	r2, #22
 8002cde:	601a      	str	r2, [r3, #0]
	return -1;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_exit>:

void _exit (int status)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ffe7 	bl	8002ccc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cfe:	e7fe      	b.n	8002cfe <_exit+0x12>

08002d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e00a      	b.n	8002d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d12:	f3af 8000 	nop.w
 8002d16:	4601      	mov	r1, r0
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	b2ca      	uxtb	r2, r1
 8002d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3301      	adds	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dbf0      	blt.n	8002d12 <_read+0x12>
	}

return len;
 8002d30:	687b      	ldr	r3, [r7, #4]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e009      	b.n	8002d60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	60ba      	str	r2, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dbf1      	blt.n	8002d4c <_write+0x12>
	}
	return len;
 8002d68:	687b      	ldr	r3, [r7, #4]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_close>:

int _close(int file)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
	return -1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_isatty>:

int _isatty(int file)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
	return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <_sbrk+0x5c>)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <_sbrk+0x60>)
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_sbrk+0x64>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <_sbrk+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e0c:	f005 fb7c 	bl	8008508 <__errno>
 8002e10:	4603      	mov	r3, r0
 8002e12:	220c      	movs	r2, #12
 8002e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e009      	b.n	8002e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <_sbrk+0x64>)
 8002e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20010000 	.word	0x20010000
 8002e3c:	00000400 	.word	0x00000400
 8002e40:	2000051c 	.word	0x2000051c
 8002e44:	20000538 	.word	0x20000538

08002e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <SystemInit+0x20>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <SystemInit+0x20>)
 8002e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e72:	490e      	ldr	r1, [pc, #56]	; (8002eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e74:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e88:	4c0b      	ldr	r4, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e96:	f7ff ffd7 	bl	8002e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f005 fb3b 	bl	8008514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9e:	f7fe fa99 	bl	80013d4 <main>
  bx  lr    
 8002ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ea4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002eb0:	0800b94c 	.word	0x0800b94c
  ldr r2, =_sbss
 8002eb4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002eb8:	20000534 	.word	0x20000534

08002ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC_IRQHandler>
	...

08002ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_Init+0x40>)
 8002eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_Init+0x40>)
 8002ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_Init+0x40>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <HAL_Init+0x40>)
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee8:	2003      	movs	r0, #3
 8002eea:	f000 fbb1 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eee:	200f      	movs	r0, #15
 8002ef0:	f000 f808 	bl	8002f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef4:	f7ff fa4c 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023c00 	.word	0x40023c00

08002f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_InitTick+0x54>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_InitTick+0x58>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fbc9 	bl	80036ba <HAL_SYSTICK_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00e      	b.n	8002f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b0f      	cmp	r3, #15
 8002f36:	d80a      	bhi.n	8002f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f000 fb91 	bl	8003666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <HAL_InitTick+0x5c>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e000      	b.n	8002f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	20000010 	.word	0x20000010
 8002f60:	2000000c 	.word	0x2000000c

08002f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x20>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_IncTick+0x24>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_IncTick+0x24>)
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000010 	.word	0x20000010
 8002f88:	20000520 	.word	0x20000520

08002f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_GetTick+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000520 	.word	0x20000520

08002fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fac:	f7ff ffee 	bl	8002f8c <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d005      	beq.n	8002fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_Delay+0x44>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fca:	bf00      	nop
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d8f7      	bhi.n	8002fcc <HAL_Delay+0x28>
  {
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000010 	.word	0x20000010

08002fec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e033      	b.n	800306a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff f9e8 	bl	80023e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003032:	f023 0302 	bic.w	r3, r3, #2
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f93a 	bl	80032b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f023 0303 	bic.w	r3, r3, #3
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
 800305a:	e001      	b.n	8003060 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x1c>
 800308c:	2302      	movs	r3, #2
 800308e:	e105      	b.n	800329c <HAL_ADC_ConfigChannel+0x228>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b09      	cmp	r3, #9
 800309e:	d925      	bls.n	80030ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68d9      	ldr	r1, [r3, #12]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	3b1e      	subs	r3, #30
 80030b6:	2207      	movs	r2, #7
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43da      	mvns	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	400a      	ands	r2, r1
 80030c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68d9      	ldr	r1, [r3, #12]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	4603      	mov	r3, r0
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4403      	add	r3, r0
 80030de:	3b1e      	subs	r3, #30
 80030e0:	409a      	lsls	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	e022      	b.n	8003132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6919      	ldr	r1, [r3, #16]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	2207      	movs	r2, #7
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6919      	ldr	r1, [r3, #16]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	4618      	mov	r0, r3
 8003122:	4603      	mov	r3, r0
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4403      	add	r3, r0
 8003128:	409a      	lsls	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b06      	cmp	r3, #6
 8003138:	d824      	bhi.n	8003184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3b05      	subs	r3, #5
 800314c:	221f      	movs	r2, #31
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	400a      	ands	r2, r1
 800315a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	4618      	mov	r0, r3
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	3b05      	subs	r3, #5
 8003176:	fa00 f203 	lsl.w	r2, r0, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
 8003182:	e04c      	b.n	800321e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d824      	bhi.n	80031d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	3b23      	subs	r3, #35	; 0x23
 800319e:	221f      	movs	r2, #31
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43da      	mvns	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	400a      	ands	r2, r1
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	3b23      	subs	r3, #35	; 0x23
 80031c8:	fa00 f203 	lsl.w	r2, r0, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
 80031d4:	e023      	b.n	800321e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	3b41      	subs	r3, #65	; 0x41
 80031e8:	221f      	movs	r2, #31
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	400a      	ands	r2, r1
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	3b41      	subs	r3, #65	; 0x41
 8003212:	fa00 f203 	lsl.w	r2, r0, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_ADC_ConfigChannel+0x234>)
 8003220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_ADC_ConfigChannel+0x238>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d109      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x1cc>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b12      	cmp	r3, #18
 8003232:	d105      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_ADC_ConfigChannel+0x238>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d123      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x21e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b10      	cmp	r3, #16
 8003250:	d003      	beq.n	800325a <HAL_ADC_ConfigChannel+0x1e6>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b11      	cmp	r3, #17
 8003258:	d11b      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b10      	cmp	r3, #16
 800326c:	d111      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_ADC_ConfigChannel+0x23c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <HAL_ADC_ConfigChannel+0x240>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9a      	lsrs	r2, r3, #18
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003284:	e002      	b.n	800328c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3b01      	subs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f9      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40012300 	.word	0x40012300
 80032ac:	40012000 	.word	0x40012000
 80032b0:	20000008 	.word	0x20000008
 80032b4:	431bde83 	.word	0x431bde83

080032b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c0:	4b79      	ldr	r3, [pc, #484]	; (80034a8 <ADC_Init+0x1f0>)
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	4a58      	ldr	r2, [pc, #352]	; (80034ac <ADC_Init+0x1f4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d022      	beq.n	8003396 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800335e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	e00f      	b.n	80033b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0202 	bic.w	r2, r2, #2
 80033c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7e1b      	ldrb	r3, [r3, #24]
 80033d0:	005a      	lsls	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003402:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	3b01      	subs	r3, #1
 8003410:	035a      	lsls	r2, r3, #13
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	e007      	b.n	800342c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	3b01      	subs	r3, #1
 8003448:	051a      	lsls	r2, r3, #20
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6899      	ldr	r1, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800346e:	025a      	lsls	r2, r3, #9
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	029a      	lsls	r2, r3, #10
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40012300 	.word	0x40012300
 80034ac:	0f000001 	.word	0x0f000001

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f7ff ff8e 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff29 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003678:	f7ff ff3e 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 800367c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ff8e 	bl	80035a4 <NVIC_EncodePriority>
 8003688:	4602      	mov	r2, r0
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff5d 	bl	8003550 <__NVIC_SetPriority>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff31 	bl	8003514 <__NVIC_EnableIRQ>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffa2 	bl	800360c <SysTick_Config>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80036d6:	f7fe fa8f 	bl	8001bf8 <HAL_SYSTICK_Callback>
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fc4e 	bl	8002f8c <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e099      	b.n	8003830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	e00f      	b.n	800373e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371e:	f7ff fc35 	bl	8002f8c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b05      	cmp	r3, #5
 800372a:	d908      	bls.n	800373e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e078      	b.n	8003830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e8      	bne.n	800371e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <HAL_DMA_Init+0x158>)
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	4313      	orrs	r3, r2
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d117      	bne.n	8003802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8f1 	bl	80039cc <DMA_CheckFifoParam>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037fe:	2301      	movs	r3, #1
 8003800:	e016      	b.n	8003830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8a8 	bl	8003960 <DMA_CalcBaseAndBitshift>
 8003810:	4603      	mov	r3, r0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	223f      	movs	r2, #63	; 0x3f
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	f010803f 	.word	0xf010803f

0800383c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800384a:	f7ff fb9f 	bl	8002f8c <HAL_GetTick>
 800384e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d008      	beq.n	800386e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e052      	b.n	8003914 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0216 	bic.w	r2, r2, #22
 800387c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800388c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_DMA_Abort+0x62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038be:	e013      	b.n	80038e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c0:	f7ff fb64 	bl	8002f8c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d90c      	bls.n	80038e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e015      	b.n	8003914 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e4      	bne.n	80038c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	223f      	movs	r2, #63	; 0x3f
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d004      	beq.n	800393a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e00c      	b.n	8003954 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2205      	movs	r2, #5
 800393e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3b10      	subs	r3, #16
 8003970:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397a:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <DMA_CalcBaseAndBitshift+0x68>)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d909      	bls.n	80039a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	659a      	str	r2, [r3, #88]	; 0x58
 80039a0:	e007      	b.n	80039b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	aaaaaaab 	.word	0xaaaaaaab
 80039c8:	0800b558 	.word	0x0800b558

080039cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11f      	bne.n	8003a26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d856      	bhi.n	8003a9a <DMA_CheckFifoParam+0xce>
 80039ec:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <DMA_CheckFifoParam+0x28>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a17 	.word	0x08003a17
 80039fc:	08003a05 	.word	0x08003a05
 8003a00:	08003a9b 	.word	0x08003a9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d046      	beq.n	8003a9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e043      	b.n	8003a9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a1e:	d140      	bne.n	8003aa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a24:	e03d      	b.n	8003aa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2e:	d121      	bne.n	8003a74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d837      	bhi.n	8003aa6 <DMA_CheckFifoParam+0xda>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <DMA_CheckFifoParam+0x70>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a53 	.word	0x08003a53
 8003a44:	08003a4d 	.word	0x08003a4d
 8003a48:	08003a65 	.word	0x08003a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e030      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d025      	beq.n	8003aaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a62:	e022      	b.n	8003aaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a72:	e01c      	b.n	8003aae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d903      	bls.n	8003a82 <DMA_CheckFifoParam+0xb6>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a80:	e018      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      break;
 8003a86:	e015      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      break;
 8003a98:	e00b      	b.n	8003ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e00a      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e008      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e006      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e004      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e002      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e159      	b.n	8003d94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f040 8148 	bne.w	8003d8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d005      	beq.n	8003b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d130      	bne.n	8003b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2203      	movs	r2, #3
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0201 	and.w	r2, r3, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d017      	beq.n	8003bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d123      	bne.n	8003c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a2 	beq.w	8003d8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b57      	ldr	r3, [pc, #348]	; (8003dac <HAL_GPIO_Init+0x2e8>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4a56      	ldr	r2, [pc, #344]	; (8003dac <HAL_GPIO_Init+0x2e8>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	4b54      	ldr	r3, [pc, #336]	; (8003dac <HAL_GPIO_Init+0x2e8>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c66:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_GPIO_Init+0x2ec>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a49      	ldr	r2, [pc, #292]	; (8003db4 <HAL_GPIO_Init+0x2f0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d019      	beq.n	8003cc6 <HAL_GPIO_Init+0x202>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a48      	ldr	r2, [pc, #288]	; (8003db8 <HAL_GPIO_Init+0x2f4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_GPIO_Init+0x1fe>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a47      	ldr	r2, [pc, #284]	; (8003dbc <HAL_GPIO_Init+0x2f8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00d      	beq.n	8003cbe <HAL_GPIO_Init+0x1fa>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a46      	ldr	r2, [pc, #280]	; (8003dc0 <HAL_GPIO_Init+0x2fc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <HAL_GPIO_Init+0x1f6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a45      	ldr	r2, [pc, #276]	; (8003dc4 <HAL_GPIO_Init+0x300>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_GPIO_Init+0x1f2>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e008      	b.n	8003cc8 <HAL_GPIO_Init+0x204>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e006      	b.n	8003cc8 <HAL_GPIO_Init+0x204>
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e004      	b.n	8003cc8 <HAL_GPIO_Init+0x204>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e002      	b.n	8003cc8 <HAL_GPIO_Init+0x204>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_GPIO_Init+0x204>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	f002 0203 	and.w	r2, r2, #3
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	4093      	lsls	r3, r2
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd8:	4935      	ldr	r1, [pc, #212]	; (8003db0 <HAL_GPIO_Init+0x2ec>)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	3302      	adds	r3, #2
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d0a:	4a2f      	ldr	r2, [pc, #188]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d64:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d88:	4a0f      	ldr	r2, [pc, #60]	; (8003dc8 <HAL_GPIO_Init+0x304>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	3301      	adds	r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b0f      	cmp	r3, #15
 8003d98:	f67f aea2 	bls.w	8003ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40013800 	.word	0x40013800
 8003db4:	40020000 	.word	0x40020000
 8003db8:	40020400 	.word	0x40020400
 8003dbc:	40020800 	.word	0x40020800
 8003dc0:	40020c00 	.word	0x40020c00
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40013c00 	.word	0x40013c00

08003dcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e0bb      	b.n	8003f60 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003de8:	2201      	movs	r2, #1
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	f040 80ab 	bne.w	8003f5a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e04:	4a5c      	ldr	r2, [pc, #368]	; (8003f78 <HAL_GPIO_DeInit+0x1ac>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_GPIO_DeInit+0x1b0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d019      	beq.n	8003e62 <HAL_GPIO_DeInit+0x96>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a53      	ldr	r2, [pc, #332]	; (8003f80 <HAL_GPIO_DeInit+0x1b4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_GPIO_DeInit+0x92>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_GPIO_DeInit+0x1b8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00d      	beq.n	8003e5a <HAL_GPIO_DeInit+0x8e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_GPIO_DeInit+0x1bc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <HAL_GPIO_DeInit+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_GPIO_DeInit+0x1c0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_GPIO_DeInit+0x86>
 8003e4e:	2304      	movs	r3, #4
 8003e50:	e008      	b.n	8003e64 <HAL_GPIO_DeInit+0x98>
 8003e52:	2307      	movs	r3, #7
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_DeInit+0x98>
 8003e56:	2303      	movs	r3, #3
 8003e58:	e004      	b.n	8003e64 <HAL_GPIO_DeInit+0x98>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_DeInit+0x98>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_GPIO_DeInit+0x98>
 8003e62:	2300      	movs	r3, #0
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	f002 0203 	and.w	r2, r2, #3
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d132      	bne.n	8003eda <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e74:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	4944      	ldr	r1, [pc, #272]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	4941      	ldr	r1, [pc, #260]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	493d      	ldr	r1, [pc, #244]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e9e:	4b3c      	ldr	r3, [pc, #240]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	493a      	ldr	r1, [pc, #232]	; (8003f90 <HAL_GPIO_DeInit+0x1c4>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <HAL_GPIO_DeInit+0x1ac>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	482a      	ldr	r0, [pc, #168]	; (8003f78 <HAL_GPIO_DeInit+0x1ac>)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	401a      	ands	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	08d2      	lsrs	r2, r2, #3
 8003f10:	4019      	ands	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3208      	adds	r2, #8
 8003f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2103      	movs	r1, #3
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	2101      	movs	r1, #1
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2103      	movs	r1, #3
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	401a      	ands	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	f67f af40 	bls.w	8003de8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	40020000 	.word	0x40020000
 8003f80:	40020400 	.word	0x40020400
 8003f84:	40020800 	.word	0x40020800
 8003f88:	40020c00 	.word	0x40020c00
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40013c00 	.word	0x40013c00

08003f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa4:	787b      	ldrb	r3, [r7, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fb0:	e003      	b.n	8003fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	619a      	str	r2, [r3, #24]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fde:	4a05      	ldr	r2, [pc, #20]	; (8003ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f806 	bl	8003ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40013c00 	.word	0x40013c00

08003ff8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e12b      	b.n	800427a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fa52 	bl	80024e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004074:	f001 fea0 	bl	8005db8 <HAL_RCC_GetPCLK1Freq>
 8004078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4a81      	ldr	r2, [pc, #516]	; (8004284 <HAL_I2C_Init+0x274>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d807      	bhi.n	8004094 <HAL_I2C_Init+0x84>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a80      	ldr	r2, [pc, #512]	; (8004288 <HAL_I2C_Init+0x278>)
 8004088:	4293      	cmp	r3, r2
 800408a:	bf94      	ite	ls
 800408c:	2301      	movls	r3, #1
 800408e:	2300      	movhi	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e006      	b.n	80040a2 <HAL_I2C_Init+0x92>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a7d      	ldr	r2, [pc, #500]	; (800428c <HAL_I2C_Init+0x27c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0e7      	b.n	800427a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4a78      	ldr	r2, [pc, #480]	; (8004290 <HAL_I2C_Init+0x280>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <HAL_I2C_Init+0x274>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d802      	bhi.n	80040e4 <HAL_I2C_Init+0xd4>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3301      	adds	r3, #1
 80040e2:	e009      	b.n	80040f8 <HAL_I2C_Init+0xe8>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	4a69      	ldr	r2, [pc, #420]	; (8004294 <HAL_I2C_Init+0x284>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	099b      	lsrs	r3, r3, #6
 80040f6:	3301      	adds	r3, #1
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800410a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	495c      	ldr	r1, [pc, #368]	; (8004284 <HAL_I2C_Init+0x274>)
 8004114:	428b      	cmp	r3, r1
 8004116:	d819      	bhi.n	800414c <HAL_I2C_Init+0x13c>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1e59      	subs	r1, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	fbb1 f3f3 	udiv	r3, r1, r3
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	f640 73fc 	movw	r3, #4092	; 0xffc
 800412c:	400b      	ands	r3, r1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_I2C_Init+0x138>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1e59      	subs	r1, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004146:	e051      	b.n	80041ec <HAL_I2C_Init+0x1dc>
 8004148:	2304      	movs	r3, #4
 800414a:	e04f      	b.n	80041ec <HAL_I2C_Init+0x1dc>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d111      	bne.n	8004178 <HAL_I2C_Init+0x168>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1e58      	subs	r0, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e012      	b.n	800419e <HAL_I2C_Init+0x18e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	0099      	lsls	r1, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	fbb0 f3f3 	udiv	r3, r0, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Init+0x196>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e022      	b.n	80041ec <HAL_I2C_Init+0x1dc>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10e      	bne.n	80041cc <HAL_I2C_Init+0x1bc>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1e58      	subs	r0, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6859      	ldr	r1, [r3, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	440b      	add	r3, r1
 80041bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c0:	3301      	adds	r3, #1
 80041c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ca:	e00f      	b.n	80041ec <HAL_I2C_Init+0x1dc>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e58      	subs	r0, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	0099      	lsls	r1, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e2:	3301      	adds	r3, #1
 80041e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	6809      	ldr	r1, [r1, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800421a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6911      	ldr	r1, [r2, #16]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	4311      	orrs	r1, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	430b      	orrs	r3, r1
 800422e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	000186a0 	.word	0x000186a0
 8004288:	001e847f 	.word	0x001e847f
 800428c:	003d08ff 	.word	0x003d08ff
 8004290:	431bde83 	.word	0x431bde83
 8004294:	10624dd3 	.word	0x10624dd3

08004298 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	461a      	mov	r2, r3
 80042a4:	460b      	mov	r3, r1
 80042a6:	817b      	strh	r3, [r7, #10]
 80042a8:	4613      	mov	r3, r2
 80042aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7fe fe6e 	bl	8002f8c <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	f040 80e0 	bne.w	8004480 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2319      	movs	r3, #25
 80042c6:	2201      	movs	r2, #1
 80042c8:	4970      	ldr	r1, [pc, #448]	; (800448c <HAL_I2C_Master_Transmit+0x1f4>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 ff66 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0d3      	b.n	8004482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_I2C_Master_Transmit+0x50>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e0cc      	b.n	8004482 <HAL_I2C_Master_Transmit+0x1ea>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d007      	beq.n	800430e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2221      	movs	r2, #33	; 0x21
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2210      	movs	r2, #16
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	893a      	ldrh	r2, [r7, #8]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a50      	ldr	r2, [pc, #320]	; (8004490 <HAL_I2C_Master_Transmit+0x1f8>)
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fce8 	bl	8004d2c <I2C_MasterRequestWrite>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e08d      	b.n	8004482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800437c:	e066      	b.n	800444c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	6a39      	ldr	r1, [r7, #32]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 ffe0 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b04      	cmp	r3, #4
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06b      	b.n	8004482 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_I2C_Master_Transmit+0x188>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d017      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	6a39      	ldr	r1, [r7, #32]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 ffd0 	bl	80053ca <I2C_WaitOnBTFFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2b04      	cmp	r3, #4
 8004436:	d107      	bne.n	8004448 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e01a      	b.n	8004482 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d194      	bne.n	800437e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	00100002 	.word	0x00100002
 8004490:	ffff0000 	.word	0xffff0000

08004494 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	; 0x30
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	461a      	mov	r2, r3
 80044a0:	460b      	mov	r3, r1
 80044a2:	817b      	strh	r3, [r7, #10]
 80044a4:	4613      	mov	r3, r2
 80044a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fe fd70 	bl	8002f8c <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	f040 820b 	bne.w	80048d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2319      	movs	r3, #25
 80044c2:	2201      	movs	r2, #1
 80044c4:	497c      	ldr	r1, [pc, #496]	; (80046b8 <HAL_I2C_Master_Receive+0x224>)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fe68 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	e1fe      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_I2C_Master_Receive+0x50>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e1f7      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d007      	beq.n	800450a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2222      	movs	r2, #34	; 0x22
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2210      	movs	r2, #16
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	893a      	ldrh	r2, [r7, #8]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a5c      	ldr	r2, [pc, #368]	; (80046bc <HAL_I2C_Master_Receive+0x228>)
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800454c:	8979      	ldrh	r1, [r7, #10]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fc6c 	bl	8004e30 <I2C_MasterRequestRead>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1b8      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	623b      	str	r3, [r7, #32]
 800457e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e18c      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	2b01      	cmp	r3, #1
 8004598:	d11b      	bne.n	80045d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e16c      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d11b      	bne.n	8004612 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	e14c      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004638:	e138      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b03      	cmp	r3, #3
 8004640:	f200 80f1 	bhi.w	8004826 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b01      	cmp	r3, #1
 800464a:	d123      	bne.n	8004694 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fefb 	bl	800544c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e139      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004692:	e10b      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b02      	cmp	r3, #2
 800469a:	d14e      	bne.n	800473a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	2200      	movs	r2, #0
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <HAL_I2C_Master_Receive+0x22c>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fd78 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e10e      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
 80046b6:	bf00      	nop
 80046b8:	00100002 	.word	0x00100002
 80046bc:	ffff0000 	.word	0xffff0000
 80046c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004738:	e0b8      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	2200      	movs	r2, #0
 8004742:	4966      	ldr	r1, [pc, #408]	; (80048dc <HAL_I2C_Master_Receive+0x448>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fd29 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0bf      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2200      	movs	r2, #0
 800479e:	494f      	ldr	r1, [pc, #316]	; (80048dc <HAL_I2C_Master_Receive+0x448>)
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fcfb 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e091      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004824:	e042      	b.n	80048ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fe0e 	bl	800544c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e04c      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	d118      	bne.n	80048ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f aec2 	bne.w	800463a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00010004 	.word	0x00010004

080048e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	817b      	strh	r3, [r7, #10]
 80048f2:	460b      	mov	r3, r1
 80048f4:	813b      	strh	r3, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048fa:	f7fe fb47 	bl	8002f8c <HAL_GetTick>
 80048fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b20      	cmp	r3, #32
 800490a:	f040 8208 	bne.w	8004d1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2319      	movs	r3, #25
 8004914:	2201      	movs	r2, #1
 8004916:	497b      	ldr	r1, [pc, #492]	; (8004b04 <HAL_I2C_Mem_Read+0x224>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fc3f 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	e1fb      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_I2C_Mem_Read+0x56>
 8004932:	2302      	movs	r3, #2
 8004934:	e1f4      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d007      	beq.n	800495c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2222      	movs	r2, #34	; 0x22
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a5b      	ldr	r2, [pc, #364]	; (8004b08 <HAL_I2C_Mem_Read+0x228>)
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800499e:	88f8      	ldrh	r0, [r7, #6]
 80049a0:	893a      	ldrh	r2, [r7, #8]
 80049a2:	8979      	ldrh	r1, [r7, #10]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4603      	mov	r3, r0
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fb0c 	bl	8004fcc <I2C_RequestMemoryRead>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1b0      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d113      	bne.n	80049ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e184      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d11b      	bne.n	8004a2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e164      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d11b      	bne.n	8004a6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	e144      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a84:	e138      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	f200 80f1 	bhi.w	8004c72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d123      	bne.n	8004ae0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fcd5 	bl	800544c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e139      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ade:	e10b      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d14e      	bne.n	8004b86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2200      	movs	r2, #0
 8004af0:	4906      	ldr	r1, [pc, #24]	; (8004b0c <HAL_I2C_Mem_Read+0x22c>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fb52 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e10e      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
 8004b02:	bf00      	nop
 8004b04:	00100002 	.word	0x00100002
 8004b08:	ffff0000 	.word	0xffff0000
 8004b0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b84:	e0b8      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	4966      	ldr	r1, [pc, #408]	; (8004d28 <HAL_I2C_Mem_Read+0x448>)
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fb03 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0bf      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2200      	movs	r2, #0
 8004bea:	494f      	ldr	r1, [pc, #316]	; (8004d28 <HAL_I2C_Mem_Read+0x448>)
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fad5 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e091      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c70:	e042      	b.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fbe8 	bl	800544c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e04c      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d118      	bne.n	8004cf8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f47f aec2 	bne.w	8004a86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	; 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	00010004 	.word	0x00010004

08004d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d006      	beq.n	8004d56 <I2C_MasterRequestWrite+0x2a>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d003      	beq.n	8004d56 <I2C_MasterRequestWrite+0x2a>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d54:	d108      	bne.n	8004d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e00b      	b.n	8004d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	2b12      	cmp	r3, #18
 8004d6e:	d107      	bne.n	8004d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fa05 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da6:	d103      	bne.n	8004db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e035      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dbc:	d108      	bne.n	8004dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	e01b      	b.n	8004e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dd0:	897b      	ldrh	r3, [r7, #10]
 8004dd2:	11db      	asrs	r3, r3, #7
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f063 030f 	orn	r3, r3, #15
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	490e      	ldr	r1, [pc, #56]	; (8004e28 <I2C_MasterRequestWrite+0xfc>)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fa2b 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e010      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dfe:	897b      	ldrh	r3, [r7, #10]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4907      	ldr	r1, [pc, #28]	; (8004e2c <I2C_MasterRequestWrite+0x100>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 fa1b 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	00010008 	.word	0x00010008
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d006      	beq.n	8004e6a <I2C_MasterRequestRead+0x3a>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d003      	beq.n	8004e6a <I2C_MasterRequestRead+0x3a>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e68:	d108      	bne.n	8004e7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e00b      	b.n	8004e94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	2b11      	cmp	r3, #17
 8004e82:	d107      	bne.n	8004e94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f97b 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00d      	beq.n	8004ec8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eba:	d103      	bne.n	8004ec4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e079      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed0:	d108      	bne.n	8004ee4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ed2:	897b      	ldrh	r3, [r7, #10]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]
 8004ee2:	e05f      	b.n	8004fa4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ee4:	897b      	ldrh	r3, [r7, #10]
 8004ee6:	11db      	asrs	r3, r3, #7
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f063 030f 	orn	r3, r3, #15
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4930      	ldr	r1, [pc, #192]	; (8004fc4 <I2C_MasterRequestRead+0x194>)
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f9a1 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e054      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4929      	ldr	r1, [pc, #164]	; (8004fc8 <I2C_MasterRequestRead+0x198>)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f991 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e044      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f919 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d103      	bne.n	8004f88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e017      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f8c:	897b      	ldrh	r3, [r7, #10]
 8004f8e:	11db      	asrs	r3, r3, #7
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0306 	and.w	r3, r3, #6
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f063 030e 	orn	r3, r3, #14
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <I2C_MasterRequestRead+0x198>)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f94d 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	00010008 	.word	0x00010008
 8004fc8:	00010002 	.word	0x00010002

08004fcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	817b      	strh	r3, [r7, #10]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	813b      	strh	r3, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005004:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2200      	movs	r2, #0
 800500e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f8c2 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502c:	d103      	bne.n	8005036 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e0aa      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800503a:	897b      	ldrh	r3, [r7, #10]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005048:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	4952      	ldr	r1, [pc, #328]	; (8005198 <I2C_RequestMemoryRead+0x1cc>)
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f8fa 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e097      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	6a39      	ldr	r1, [r7, #32]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f964 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b04      	cmp	r3, #4
 800508c:	d107      	bne.n	800509e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e076      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	611a      	str	r2, [r3, #16]
 80050b2:	e021      	b.n	80050f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050b4:	893b      	ldrh	r3, [r7, #8]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	6a39      	ldr	r1, [r7, #32]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f93e 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d107      	bne.n	80050ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e050      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ee:	893b      	ldrh	r3, [r7, #8]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	6a39      	ldr	r1, [r7, #32]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f923 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b04      	cmp	r3, #4
 800510e:	d107      	bne.n	8005120 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e035      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005132:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2200      	movs	r2, #0
 800513c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f82b 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515a:	d103      	bne.n	8005164 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e013      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	4906      	ldr	r1, [pc, #24]	; (8005198 <I2C_RequestMemoryRead+0x1cc>)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f863 	bl	800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	00010002 	.word	0x00010002

0800519c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ac:	e025      	b.n	80051fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d021      	beq.n	80051fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7fd fee9 	bl	8002f8c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d116      	bne.n	80051fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e023      	b.n	8005242 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10d      	bne.n	8005220 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	43da      	mvns	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	e00c      	b.n	800523a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	43da      	mvns	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	429a      	cmp	r2, r3
 800523e:	d0b6      	beq.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005258:	e051      	b.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005268:	d123      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005278:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005282:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0204 	orr.w	r2, r3, #4
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e046      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d021      	beq.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fd fe67 	bl	8002f8c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d116      	bne.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	f043 0220 	orr.w	r2, r3, #32
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e020      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10c      	bne.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	43da      	mvns	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e00b      	b.n	800533a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	43da      	mvns	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d18d      	bne.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005354:	e02d      	b.n	80053b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f8ce 	bl	80054f8 <I2C_IsAcknowledgeFailed>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e02d      	b.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d021      	beq.n	80053b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fd fe0d 	bl	8002f8c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d116      	bne.n	80053b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e007      	b.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d1ca      	bne.n	8005356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053d6:	e02d      	b.n	8005434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f88d 	bl	80054f8 <I2C_IsAcknowledgeFailed>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e02d      	b.n	8005444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d021      	beq.n	8005434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f0:	f7fd fdcc 	bl	8002f8c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d116      	bne.n	8005434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d1ca      	bne.n	80053d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005458:	e042      	b.n	80054e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b10      	cmp	r3, #16
 8005466:	d119      	bne.n	800549c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0210 	mvn.w	r2, #16
 8005470:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e029      	b.n	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549c:	f7fd fd76 	bl	8002f8c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d116      	bne.n	80054e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e007      	b.n	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d1b5      	bne.n	800545a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	d11b      	bne.n	8005548 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005518:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e267      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d075      	beq.n	8005662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005576:	4b88      	ldr	r3, [pc, #544]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b04      	cmp	r3, #4
 8005580:	d00c      	beq.n	800559c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005582:	4b85      	ldr	r3, [pc, #532]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800558a:	2b08      	cmp	r3, #8
 800558c:	d112      	bne.n	80055b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800558e:	4b82      	ldr	r3, [pc, #520]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559a:	d10b      	bne.n	80055b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559c:	4b7e      	ldr	r3, [pc, #504]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05b      	beq.n	8005660 <HAL_RCC_OscConfig+0x108>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d157      	bne.n	8005660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e242      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055bc:	d106      	bne.n	80055cc <HAL_RCC_OscConfig+0x74>
 80055be:	4b76      	ldr	r3, [pc, #472]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a75      	ldr	r2, [pc, #468]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e01d      	b.n	8005608 <HAL_RCC_OscConfig+0xb0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0x98>
 80055d6:	4b70      	ldr	r3, [pc, #448]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a6f      	ldr	r2, [pc, #444]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b6d      	ldr	r3, [pc, #436]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6c      	ldr	r2, [pc, #432]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e00b      	b.n	8005608 <HAL_RCC_OscConfig+0xb0>
 80055f0:	4b69      	ldr	r3, [pc, #420]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a68      	ldr	r2, [pc, #416]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	4b66      	ldr	r3, [pc, #408]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a65      	ldr	r2, [pc, #404]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fd fcbc 	bl	8002f8c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7fd fcb8 	bl	8002f8c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e207      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0xc0>
 8005636:	e014      	b.n	8005662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fd fca8 	bl	8002f8c <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005640:	f7fd fca4 	bl	8002f8c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e1f3      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005652:	4b51      	ldr	r3, [pc, #324]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0xe8>
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d063      	beq.n	8005736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800566e:	4b4a      	ldr	r3, [pc, #296]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00b      	beq.n	8005692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005682:	2b08      	cmp	r3, #8
 8005684:	d11c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005686:	4b44      	ldr	r3, [pc, #272]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d116      	bne.n	80056c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005692:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_RCC_OscConfig+0x152>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d001      	beq.n	80056aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e1c7      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4937      	ldr	r1, [pc, #220]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056be:	e03a      	b.n	8005736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c8:	4b34      	ldr	r3, [pc, #208]	; (800579c <HAL_RCC_OscConfig+0x244>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fd fc5d 	bl	8002f8c <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d6:	f7fd fc59 	bl	8002f8c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e1a8      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e8:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f4:	4b28      	ldr	r3, [pc, #160]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4925      	ldr	r1, [pc, #148]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]
 8005708:	e015      	b.n	8005736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <HAL_RCC_OscConfig+0x244>)
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fd fc3c 	bl	8002f8c <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005718:	f7fd fc38 	bl	8002f8c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e187      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572a:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d036      	beq.n	80057b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d016      	beq.n	8005778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <HAL_RCC_OscConfig+0x248>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fd fc1c 	bl	8002f8c <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005758:	f7fd fc18 	bl	8002f8c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e167      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_OscConfig+0x240>)
 800576c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x200>
 8005776:	e01b      	b.n	80057b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_OscConfig+0x248>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800577e:	f7fd fc05 	bl	8002f8c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005784:	e00e      	b.n	80057a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005786:	f7fd fc01 	bl	8002f8c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d907      	bls.n	80057a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e150      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
 8005798:	40023800 	.word	0x40023800
 800579c:	42470000 	.word	0x42470000
 80057a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a4:	4b88      	ldr	r3, [pc, #544]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ea      	bne.n	8005786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8097 	beq.w	80058ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c2:	4b81      	ldr	r3, [pc, #516]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10f      	bne.n	80057ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	4b7d      	ldr	r3, [pc, #500]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	4a7c      	ldr	r2, [pc, #496]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6413      	str	r3, [r2, #64]	; 0x40
 80057de:	4b7a      	ldr	r3, [pc, #488]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ee:	4b77      	ldr	r3, [pc, #476]	; (80059cc <HAL_RCC_OscConfig+0x474>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d118      	bne.n	800582c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057fa:	4b74      	ldr	r3, [pc, #464]	; (80059cc <HAL_RCC_OscConfig+0x474>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a73      	ldr	r2, [pc, #460]	; (80059cc <HAL_RCC_OscConfig+0x474>)
 8005800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005806:	f7fd fbc1 	bl	8002f8c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580e:	f7fd fbbd 	bl	8002f8c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e10c      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005820:	4b6a      	ldr	r3, [pc, #424]	; (80059cc <HAL_RCC_OscConfig+0x474>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d106      	bne.n	8005842 <HAL_RCC_OscConfig+0x2ea>
 8005834:	4b64      	ldr	r3, [pc, #400]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a63      	ldr	r2, [pc, #396]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	e01c      	b.n	800587c <HAL_RCC_OscConfig+0x324>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b05      	cmp	r3, #5
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x30c>
 800584a:	4b5f      	ldr	r3, [pc, #380]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a5e      	ldr	r2, [pc, #376]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005850:	f043 0304 	orr.w	r3, r3, #4
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
 8005856:	4b5c      	ldr	r3, [pc, #368]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a5b      	ldr	r2, [pc, #364]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
 8005862:	e00b      	b.n	800587c <HAL_RCC_OscConfig+0x324>
 8005864:	4b58      	ldr	r3, [pc, #352]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005868:	4a57      	ldr	r2, [pc, #348]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	6713      	str	r3, [r2, #112]	; 0x70
 8005870:	4b55      	ldr	r3, [pc, #340]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	4a54      	ldr	r2, [pc, #336]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005876:	f023 0304 	bic.w	r3, r3, #4
 800587a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d015      	beq.n	80058b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005884:	f7fd fb82 	bl	8002f8c <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588c:	f7fd fb7e 	bl	8002f8c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e0cb      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a2:	4b49      	ldr	r3, [pc, #292]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ee      	beq.n	800588c <HAL_RCC_OscConfig+0x334>
 80058ae:	e014      	b.n	80058da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b0:	f7fd fb6c 	bl	8002f8c <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fd fb68 	bl	8002f8c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e0b5      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ce:	4b3e      	ldr	r3, [pc, #248]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1ee      	bne.n	80058b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d105      	bne.n	80058ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e0:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	4a38      	ldr	r2, [pc, #224]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80058e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a1 	beq.w	8005a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058f6:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d05c      	beq.n	80059bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d141      	bne.n	800598e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590a:	4b31      	ldr	r3, [pc, #196]	; (80059d0 <HAL_RCC_OscConfig+0x478>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fd fb3c 	bl	8002f8c <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005918:	f7fd fb38 	bl	8002f8c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e087      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	019b      	lsls	r3, r3, #6
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	3b01      	subs	r3, #1
 8005950:	041b      	lsls	r3, r3, #16
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	061b      	lsls	r3, r3, #24
 800595a:	491b      	ldr	r1, [pc, #108]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005960:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_RCC_OscConfig+0x478>)
 8005962:	2201      	movs	r2, #1
 8005964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005966:	f7fd fb11 	bl	8002f8c <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800596e:	f7fd fb0d 	bl	8002f8c <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e05c      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005980:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x416>
 800598c:	e054      	b.n	8005a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <HAL_RCC_OscConfig+0x478>)
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005994:	f7fd fafa 	bl	8002f8c <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599c:	f7fd faf6 	bl	8002f8c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e045      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCC_OscConfig+0x470>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x444>
 80059ba:	e03d      	b.n	8005a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d107      	bne.n	80059d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e038      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40007000 	.word	0x40007000
 80059d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <HAL_RCC_OscConfig+0x4ec>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d028      	beq.n	8005a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d121      	bne.n	8005a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d11a      	bne.n	8005a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a04:	4013      	ands	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d111      	bne.n	8005a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d107      	bne.n	8005a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800

08005a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0cc      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b68      	ldr	r3, [pc, #416]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d90c      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0b8      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a9c:	4b59      	ldr	r3, [pc, #356]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ab4:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4a52      	ldr	r2, [pc, #328]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b50      	ldr	r3, [pc, #320]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	494d      	ldr	r1, [pc, #308]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d044      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d119      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e07f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d003      	beq.n	8005b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b06:	4b3f      	ldr	r3, [pc, #252]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e06f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b16:	4b3b      	ldr	r3, [pc, #236]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e067      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b26:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 0203 	bic.w	r2, r3, #3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4934      	ldr	r1, [pc, #208]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b38:	f7fd fa28 	bl	8002f8c <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fd fa24 	bl	8002f8c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e04f      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 020c 	and.w	r2, r3, #12
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1eb      	bne.n	8005b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d20c      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b76:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e032      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4916      	ldr	r1, [pc, #88]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	490e      	ldr	r1, [pc, #56]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bce:	f000 f821 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	091b      	lsrs	r3, r3, #4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	490a      	ldr	r1, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x1c0>)
 8005be0:	5ccb      	ldrb	r3, [r1, r3]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_ClockConfig+0x1c8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd f988 	bl	8002f04 <HAL_InitTick>

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40023c00 	.word	0x40023c00
 8005c04:	40023800 	.word	0x40023800
 8005c08:	0800b540 	.word	0x0800b540
 8005c0c:	20000008 	.word	0x20000008
 8005c10:	2000000c 	.word	0x2000000c

08005c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c18:	b090      	sub	sp, #64	; 0x40
 8005c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c20:	2300      	movs	r3, #0
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c24:	2300      	movs	r3, #0
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2c:	4b59      	ldr	r3, [pc, #356]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d00d      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x40>
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	f200 80a1 	bhi.w	8005d80 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x34>
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d003      	beq.n	8005c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c46:	e09b      	b.n	8005d80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c48:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c4c:	e09b      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c4e:	4b53      	ldr	r3, [pc, #332]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c52:	e098      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c54:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c5e:	4b4d      	ldr	r3, [pc, #308]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d028      	beq.n	8005cbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c6a:	4b4a      	ldr	r3, [pc, #296]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	099b      	lsrs	r3, r3, #6
 8005c70:	2200      	movs	r2, #0
 8005c72:	623b      	str	r3, [r7, #32]
 8005c74:	627a      	str	r2, [r7, #36]	; 0x24
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4b47      	ldr	r3, [pc, #284]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c80:	fb03 f201 	mul.w	r2, r3, r1
 8005c84:	2300      	movs	r3, #0
 8005c86:	fb00 f303 	mul.w	r3, r0, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	4a43      	ldr	r2, [pc, #268]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c8e:	fba0 1202 	umull	r1, r2, r0, r2
 8005c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c94:	460a      	mov	r2, r1
 8005c96:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9a:	4413      	add	r3, r2
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	61fa      	str	r2, [r7, #28]
 8005ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005caa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005cae:	f7fa fff3 	bl	8000c98 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cba:	e053      	b.n	8005d64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	099b      	lsrs	r3, r3, #6
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	617a      	str	r2, [r7, #20]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005cce:	f04f 0b00 	mov.w	fp, #0
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	465b      	mov	r3, fp
 8005cd6:	f04f 0000 	mov.w	r0, #0
 8005cda:	f04f 0100 	mov.w	r1, #0
 8005cde:	0159      	lsls	r1, r3, #5
 8005ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ce4:	0150      	lsls	r0, r2, #5
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	ebb2 080a 	subs.w	r8, r2, sl
 8005cee:	eb63 090b 	sbc.w	r9, r3, fp
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d06:	ebb2 0408 	subs.w	r4, r2, r8
 8005d0a:	eb63 0509 	sbc.w	r5, r3, r9
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	00eb      	lsls	r3, r5, #3
 8005d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d1c:	00e2      	lsls	r2, r4, #3
 8005d1e:	4614      	mov	r4, r2
 8005d20:	461d      	mov	r5, r3
 8005d22:	eb14 030a 	adds.w	r3, r4, sl
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	eb45 030b 	adc.w	r3, r5, fp
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	028b      	lsls	r3, r1, #10
 8005d3e:	4621      	mov	r1, r4
 8005d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d44:	4621      	mov	r1, r4
 8005d46:	028a      	lsls	r2, r1, #10
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	2200      	movs	r2, #0
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	60fa      	str	r2, [r7, #12]
 8005d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d58:	f7fa ff9e 	bl	8000c98 <__aeabi_uldivmod>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4613      	mov	r3, r2
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	3301      	adds	r3, #1
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d7e:	e002      	b.n	8005d86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3740      	adds	r7, #64	; 0x40
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	00f42400 	.word	0x00f42400
 8005d9c:	017d7840 	.word	0x017d7840

08005da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005da6:	681b      	ldr	r3, [r3, #0]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000008 	.word	0x20000008

08005db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dbc:	f7ff fff0 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	0a9b      	lsrs	r3, r3, #10
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	0800b550 	.word	0x0800b550

08005de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005de4:	f7ff ffdc 	bl	8005da0 <HAL_RCC_GetHCLKFreq>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	0b5b      	lsrs	r3, r3, #13
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	4903      	ldr	r1, [pc, #12]	; (8005e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005df6:	5ccb      	ldrb	r3, [r1, r3]
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40023800 	.word	0x40023800
 8005e04:	0800b550 	.word	0x0800b550

08005e08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e041      	b.n	8005e9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fc fbec 	bl	800260c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f000 fed2 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d109      	bne.n	8005ecc <HAL_TIM_PWM_Start+0x24>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	bf14      	ite	ne
 8005ec4:	2301      	movne	r3, #1
 8005ec6:	2300      	moveq	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	e022      	b.n	8005f12 <HAL_TIM_PWM_Start+0x6a>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d109      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0x3e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	bf14      	ite	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	2300      	moveq	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	e015      	b.n	8005f12 <HAL_TIM_PWM_Start+0x6a>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d109      	bne.n	8005f00 <HAL_TIM_PWM_Start+0x58>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	bf14      	ite	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	2300      	moveq	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e008      	b.n	8005f12 <HAL_TIM_PWM_Start+0x6a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e068      	b.n	8005fec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_PWM_Start+0x82>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f28:	e013      	b.n	8005f52 <HAL_TIM_PWM_Start+0xaa>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x92>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f38:	e00b      	b.n	8005f52 <HAL_TIM_PWM_Start+0xaa>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Start+0xa2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	e003      	b.n	8005f52 <HAL_TIM_PWM_Start+0xaa>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2201      	movs	r2, #1
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f972 	bl	8007244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a23      	ldr	r2, [pc, #140]	; (8005ff4 <HAL_TIM_PWM_Start+0x14c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d107      	bne.n	8005f7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <HAL_TIM_PWM_Start+0x14c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x10e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x10e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a19      	ldr	r2, [pc, #100]	; (8005ff8 <HAL_TIM_PWM_Start+0x150>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x10e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <HAL_TIM_PWM_Start+0x154>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x10e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_TIM_PWM_Start+0x158>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x10e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <HAL_TIM_PWM_Start+0x15c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d111      	bne.n	8005fda <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d010      	beq.n	8005fea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	e007      	b.n	8005fea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40014000 	.word	0x40014000

08006008 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2200      	movs	r2, #0
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f001 f912 	bl	8007244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_TIM_PWM_Stop+0xc4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d117      	bne.n	800605a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	f241 1311 	movw	r3, #4369	; 0x1111
 8006034:	4013      	ands	r3, r2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10f      	bne.n	800605a <HAL_TIM_PWM_Stop+0x52>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	f240 4344 	movw	r3, #1092	; 0x444
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <HAL_TIM_PWM_Stop+0x52>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	f241 1311 	movw	r3, #4369	; 0x1111
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <HAL_TIM_PWM_Stop+0x82>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	f240 4344 	movw	r3, #1092	; 0x444
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d107      	bne.n	800608a <HAL_TIM_PWM_Stop+0x82>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Stop+0x92>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006098:	e013      	b.n	80060c2 <HAL_TIM_PWM_Stop+0xba>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d104      	bne.n	80060aa <HAL_TIM_PWM_Stop+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a8:	e00b      	b.n	80060c2 <HAL_TIM_PWM_Stop+0xba>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d104      	bne.n	80060ba <HAL_TIM_PWM_Stop+0xb2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b8:	e003      	b.n	80060c2 <HAL_TIM_PWM_Stop+0xba>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40010000 	.word	0x40010000

080060d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e041      	b.n	8006166 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fc faaa 	bl	8002650 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f000 fd6e 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_TIM_IC_Start_IT+0x1e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800618a:	b2db      	uxtb	r3, r3
 800618c:	e013      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0x46>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d104      	bne.n	800619e <HAL_TIM_IC_Start_IT+0x2e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e00b      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0x46>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_IC_Start_IT+0x3e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e003      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0x46>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <HAL_TIM_IC_Start_IT+0x58>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e013      	b.n	80061f0 <HAL_TIM_IC_Start_IT+0x80>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d104      	bne.n	80061d8 <HAL_TIM_IC_Start_IT+0x68>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e00b      	b.n	80061f0 <HAL_TIM_IC_Start_IT+0x80>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d104      	bne.n	80061e8 <HAL_TIM_IC_Start_IT+0x78>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e003      	b.n	80061f0 <HAL_TIM_IC_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d102      	bne.n	80061fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80061f8:	7b7b      	ldrb	r3, [r7, #13]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d001      	beq.n	8006202 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e0c2      	b.n	8006388 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <HAL_TIM_IC_Start_IT+0xa2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006210:	e013      	b.n	800623a <HAL_TIM_IC_Start_IT+0xca>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b04      	cmp	r3, #4
 8006216:	d104      	bne.n	8006222 <HAL_TIM_IC_Start_IT+0xb2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006220:	e00b      	b.n	800623a <HAL_TIM_IC_Start_IT+0xca>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d104      	bne.n	8006232 <HAL_TIM_IC_Start_IT+0xc2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006230:	e003      	b.n	800623a <HAL_TIM_IC_Start_IT+0xca>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <HAL_TIM_IC_Start_IT+0xda>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006248:	e013      	b.n	8006272 <HAL_TIM_IC_Start_IT+0x102>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d104      	bne.n	800625a <HAL_TIM_IC_Start_IT+0xea>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006258:	e00b      	b.n	8006272 <HAL_TIM_IC_Start_IT+0x102>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b08      	cmp	r3, #8
 800625e:	d104      	bne.n	800626a <HAL_TIM_IC_Start_IT+0xfa>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006268:	e003      	b.n	8006272 <HAL_TIM_IC_Start_IT+0x102>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d841      	bhi.n	80062fc <HAL_TIM_IC_Start_IT+0x18c>
 8006278:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <HAL_TIM_IC_Start_IT+0x110>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	080062b5 	.word	0x080062b5
 8006284:	080062fd 	.word	0x080062fd
 8006288:	080062fd 	.word	0x080062fd
 800628c:	080062fd 	.word	0x080062fd
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062fd 	.word	0x080062fd
 8006298:	080062fd 	.word	0x080062fd
 800629c:	080062fd 	.word	0x080062fd
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062fd 	.word	0x080062fd
 80062a8:	080062fd 	.word	0x080062fd
 80062ac:	080062fd 	.word	0x080062fd
 80062b0:	080062eb 	.word	0x080062eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0202 	orr.w	r2, r2, #2
 80062c2:	60da      	str	r2, [r3, #12]
      break;
 80062c4:	e01d      	b.n	8006302 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0204 	orr.w	r2, r2, #4
 80062d4:	60da      	str	r2, [r3, #12]
      break;
 80062d6:	e014      	b.n	8006302 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	60da      	str	r2, [r3, #12]
      break;
 80062e8:	e00b      	b.n	8006302 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0210 	orr.w	r2, r2, #16
 80062f8:	60da      	str	r2, [r3, #12]
      break;
 80062fa:	e002      	b.n	8006302 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	bf00      	nop
  }

  if (status == HAL_OK)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d13e      	bne.n	8006386 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2201      	movs	r2, #1
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 ff97 	bl	8007244 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <HAL_TIM_IC_Start_IT+0x220>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d018      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x1e2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d013      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x1e2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a19      	ldr	r2, [pc, #100]	; (8006394 <HAL_TIM_IC_Start_IT+0x224>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00e      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x1e2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a17      	ldr	r2, [pc, #92]	; (8006398 <HAL_TIM_IC_Start_IT+0x228>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x1e2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a16      	ldr	r2, [pc, #88]	; (800639c <HAL_TIM_IC_Start_IT+0x22c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <HAL_TIM_IC_Start_IT+0x1e2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a14      	ldr	r2, [pc, #80]	; (80063a0 <HAL_TIM_IC_Start_IT+0x230>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d111      	bne.n	8006376 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d010      	beq.n	8006386 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006374:	e007      	b.n	8006386 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 0201 	orr.w	r2, r2, #1
 8006384:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40014000 	.word	0x40014000

080063a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e097      	b.n	80064e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fc f8d7 	bl	8002580 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e8:	f023 0307 	bic.w	r3, r3, #7
 80063ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f000 fbf9 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	4313      	orrs	r3, r2
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006444:	f023 030c 	bic.w	r3, r3, #12
 8006448:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	4313      	orrs	r3, r2
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	011a      	lsls	r2, r3, #4
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	4313      	orrs	r3, r2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	4313      	orrs	r3, r2
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006500:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006508:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006510:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006518:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d110      	bne.n	8006542 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d102      	bne.n	800652c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006526:	7b7b      	ldrb	r3, [r7, #13]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d001      	beq.n	8006530 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e089      	b.n	8006644 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006540:	e031      	b.n	80065a6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d110      	bne.n	800656a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d102      	bne.n	8006554 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800654e:	7b3b      	ldrb	r3, [r7, #12]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d001      	beq.n	8006558 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e075      	b.n	8006644 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006568:	e01d      	b.n	80065a6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d108      	bne.n	8006582 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d105      	bne.n	8006582 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006576:	7b7b      	ldrb	r3, [r7, #13]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d102      	bne.n	8006582 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800657c:	7b3b      	ldrb	r3, [r7, #12]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d001      	beq.n	8006586 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e05e      	b.n	8006644 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d010      	beq.n	80065d4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80065b2:	e01f      	b.n	80065f4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2201      	movs	r2, #1
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fe41 	bl	8007244 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0202 	orr.w	r2, r2, #2
 80065d0:	60da      	str	r2, [r3, #12]
      break;
 80065d2:	e02e      	b.n	8006632 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2201      	movs	r2, #1
 80065da:	2104      	movs	r1, #4
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fe31 	bl	8007244 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0204 	orr.w	r2, r2, #4
 80065f0:	60da      	str	r2, [r3, #12]
      break;
 80065f2:	e01e      	b.n	8006632 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fe21 	bl	8007244 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2201      	movs	r2, #1
 8006608:	2104      	movs	r1, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fe1a 	bl	8007244 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0202 	orr.w	r2, r2, #2
 800661e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0204 	orr.w	r2, r2, #4
 800662e:	60da      	str	r2, [r3, #12]
      break;
 8006630:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b02      	cmp	r3, #2
 8006660:	d122      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d11b      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0202 	mvn.w	r2, #2
 8006678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fb f9de 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa8c 	bl	8006bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa93 	bl	8006bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d122      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d11b      	bne.n	80066fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fb f9b4 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 80066e8:	e005      	b.n	80066f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa62 	bl	8006bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa69 	bl	8006bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b08      	cmp	r3, #8
 8006708:	d122      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d11b      	bne.n	8006750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0208 	mvn.w	r2, #8
 8006720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2204      	movs	r2, #4
 8006726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fb f98a 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 800673c:	e005      	b.n	800674a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa38 	bl	8006bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fa3f 	bl	8006bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0310 	and.w	r3, r3, #16
 800675a:	2b10      	cmp	r3, #16
 800675c:	d122      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d11b      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fb f960 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa0e 	bl	8006bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa15 	bl	8006bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0201 	mvn.w	r2, #1
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9e8 	bl	8006ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fdc2 	bl	8007380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d10e      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	d107      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9da 	bl	8006bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b20      	cmp	r3, #32
 8006842:	d107      	bne.n	8006854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0220 	mvn.w	r2, #32
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fd8c 	bl	800736c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006876:	2302      	movs	r3, #2
 8006878:	e088      	b.n	800698c <HAL_TIM_IC_ConfigChannel+0x130>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f000 fbb6 	bl	8007008 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 020c 	bic.w	r2, r2, #12
 80068aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6999      	ldr	r1, [r3, #24]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	619a      	str	r2, [r3, #24]
 80068be:	e060      	b.n	8006982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d11c      	bne.n	8006900 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f000 fbff 	bl	80070d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6999      	ldr	r1, [r3, #24]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	021a      	lsls	r2, r3, #8
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	619a      	str	r2, [r3, #24]
 80068fe:	e040      	b.n	8006982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11b      	bne.n	800693e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6819      	ldr	r1, [r3, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f000 fc1c 	bl	8007152 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 020c 	bic.w	r2, r2, #12
 8006928:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69d9      	ldr	r1, [r3, #28]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	61da      	str	r2, [r3, #28]
 800693c:	e021      	b.n	8006982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d11c      	bne.n	800697e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f000 fc39 	bl	80071ca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006966:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69d9      	ldr	r1, [r3, #28]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	61da      	str	r2, [r3, #28]
 800697c:	e001      	b.n	8006982 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e0ae      	b.n	8006b10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b0c      	cmp	r3, #12
 80069be:	f200 809f 	bhi.w	8006b00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069c2:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006b01 	.word	0x08006b01
 80069d0:	08006b01 	.word	0x08006b01
 80069d4:	08006b01 	.word	0x08006b01
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	08006b01 	.word	0x08006b01
 80069e0:	08006b01 	.word	0x08006b01
 80069e4:	08006b01 	.word	0x08006b01
 80069e8:	08006a7f 	.word	0x08006a7f
 80069ec:	08006b01 	.word	0x08006b01
 80069f0:	08006b01 	.word	0x08006b01
 80069f4:	08006b01 	.word	0x08006b01
 80069f8:	08006abf 	.word	0x08006abf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f974 	bl	8006cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0208 	orr.w	r2, r2, #8
 8006a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6999      	ldr	r1, [r3, #24]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	619a      	str	r2, [r3, #24]
      break;
 8006a3a:	e064      	b.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f9ba 	bl	8006dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6999      	ldr	r1, [r3, #24]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	021a      	lsls	r2, r3, #8
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	619a      	str	r2, [r3, #24]
      break;
 8006a7c:	e043      	b.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fa05 	bl	8006e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0208 	orr.w	r2, r2, #8
 8006a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0204 	bic.w	r2, r2, #4
 8006aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69d9      	ldr	r1, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	61da      	str	r2, [r3, #28]
      break;
 8006abc:	e023      	b.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fa4f 	bl	8006f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	021a      	lsls	r2, r3, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	61da      	str	r2, [r3, #28]
      break;
 8006afe:	e002      	b.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	75fb      	strb	r3, [r7, #23]
      break;
 8006b04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b0c      	cmp	r3, #12
 8006b2a:	d831      	bhi.n	8006b90 <HAL_TIM_ReadCapturedValue+0x78>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b69 	.word	0x08006b69
 8006b38:	08006b91 	.word	0x08006b91
 8006b3c:	08006b91 	.word	0x08006b91
 8006b40:	08006b91 	.word	0x08006b91
 8006b44:	08006b73 	.word	0x08006b73
 8006b48:	08006b91 	.word	0x08006b91
 8006b4c:	08006b91 	.word	0x08006b91
 8006b50:	08006b91 	.word	0x08006b91
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b91 	.word	0x08006b91
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006b91 	.word	0x08006b91
 8006b64:	08006b87 	.word	0x08006b87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	60fb      	str	r3, [r7, #12]

      break;
 8006b70:	e00f      	b.n	8006b92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	60fb      	str	r3, [r7, #12]

      break;
 8006b7a:	e00a      	b.n	8006b92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	60fb      	str	r3, [r7, #12]

      break;
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	60fb      	str	r3, [r7, #12]

      break;
 8006b8e:	e000      	b.n	8006b92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b90:	bf00      	nop
  }

  return tmpreg;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a34      	ldr	r2, [pc, #208]	; (8006cd4 <TIM_Base_SetConfig+0xe4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00f      	beq.n	8006c28 <TIM_Base_SetConfig+0x38>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d00b      	beq.n	8006c28 <TIM_Base_SetConfig+0x38>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <TIM_Base_SetConfig+0xe8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_Base_SetConfig+0x38>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a30      	ldr	r2, [pc, #192]	; (8006cdc <TIM_Base_SetConfig+0xec>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0x38>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <TIM_Base_SetConfig+0xf0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d108      	bne.n	8006c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a25      	ldr	r2, [pc, #148]	; (8006cd4 <TIM_Base_SetConfig+0xe4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01b      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c48:	d017      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <TIM_Base_SetConfig+0xe8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a21      	ldr	r2, [pc, #132]	; (8006cdc <TIM_Base_SetConfig+0xec>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a20      	ldr	r2, [pc, #128]	; (8006ce0 <TIM_Base_SetConfig+0xf0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1f      	ldr	r2, [pc, #124]	; (8006ce4 <TIM_Base_SetConfig+0xf4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <TIM_Base_SetConfig+0xf8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_Base_SetConfig+0x8a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <TIM_Base_SetConfig+0xfc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d108      	bne.n	8006c8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <TIM_Base_SetConfig+0xe4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d103      	bne.n	8006cc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	615a      	str	r2, [r3, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40000800 	.word	0x40000800
 8006ce0:	40000c00 	.word	0x40000c00
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0201 	bic.w	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0302 	bic.w	r3, r3, #2
 8006d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <TIM_OC1_SetConfig+0xc8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10c      	bne.n	8006d66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0308 	bic.w	r3, r3, #8
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0304 	bic.w	r3, r3, #4
 8006d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <TIM_OC1_SetConfig+0xc8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d111      	bne.n	8006d92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	621a      	str	r2, [r3, #32]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40010000 	.word	0x40010000

08006dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f023 0210 	bic.w	r2, r3, #16
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0320 	bic.w	r3, r3, #32
 8006e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <TIM_OC2_SetConfig+0xd4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10d      	bne.n	8006e38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <TIM_OC2_SetConfig+0xd4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d113      	bne.n	8006e68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40010000 	.word	0x40010000

08006e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <TIM_OC3_SetConfig+0xd0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d10d      	bne.n	8006f0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a14      	ldr	r2, [pc, #80]	; (8006f64 <TIM_OC3_SetConfig+0xd0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d113      	bne.n	8006f3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	621a      	str	r2, [r3, #32]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	40010000 	.word	0x40010000

08006f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	031b      	lsls	r3, r3, #12
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a10      	ldr	r2, [pc, #64]	; (8007004 <TIM_OC4_SetConfig+0x9c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d109      	bne.n	8006fdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40010000 	.word	0x40010000

08007008 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4a24      	ldr	r2, [pc, #144]	; (80070c4 <TIM_TI1_SetConfig+0xbc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d013      	beq.n	800705e <TIM_TI1_SetConfig+0x56>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703c:	d00f      	beq.n	800705e <TIM_TI1_SetConfig+0x56>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a21      	ldr	r2, [pc, #132]	; (80070c8 <TIM_TI1_SetConfig+0xc0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d00b      	beq.n	800705e <TIM_TI1_SetConfig+0x56>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4a20      	ldr	r2, [pc, #128]	; (80070cc <TIM_TI1_SetConfig+0xc4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d007      	beq.n	800705e <TIM_TI1_SetConfig+0x56>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <TIM_TI1_SetConfig+0xc8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_TI1_SetConfig+0x56>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a1e      	ldr	r2, [pc, #120]	; (80070d4 <TIM_TI1_SetConfig+0xcc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <TIM_TI1_SetConfig+0x5a>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <TIM_TI1_SetConfig+0x5c>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e003      	b.n	8007082 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	b2db      	uxtb	r3, r3
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f003 030a 	and.w	r3, r3, #10
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40014000 	.word	0x40014000

080070d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f023 0210 	bic.w	r2, r3, #16
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	031b      	lsls	r3, r3, #12
 800711c:	b29b      	uxth	r3, r3
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800712a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f023 0303 	bic.w	r3, r3, #3
 800717e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	b2db      	uxtb	r3, r3
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b087      	sub	sp, #28
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007208:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	031b      	lsls	r3, r3, #12
 800720e:	b29b      	uxth	r3, r3
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800721c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	031b      	lsls	r3, r3, #12
 8007222:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	621a      	str	r2, [r3, #32]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	43db      	mvns	r3, r3
 8007266:	401a      	ands	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	fa01 f303 	lsl.w	r3, r1, r3
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e050      	b.n	800734a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1c      	ldr	r2, [pc, #112]	; (8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d013      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a18      	ldr	r2, [pc, #96]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a15      	ldr	r2, [pc, #84]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d10c      	bne.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40010000 	.word	0x40010000
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40014000 	.word	0x40014000

0800736c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e03f      	b.n	8007426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fb f9f0 	bl	80027a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	; 0x24
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fe1d 	bl	8008018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695a      	ldr	r2, [r3, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800740c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08a      	sub	sp, #40	; 0x28
 8007432:	af02      	add	r7, sp, #8
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b20      	cmp	r3, #32
 800744c:	d17c      	bne.n	8007548 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <HAL_UART_Transmit+0x2c>
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e075      	b.n	800754a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UART_Transmit+0x3e>
 8007468:	2302      	movs	r3, #2
 800746a:	e06e      	b.n	800754a <HAL_UART_Transmit+0x11c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2221      	movs	r2, #33	; 0x21
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007482:	f7fb fd83 	bl	8002f8c <HAL_GetTick>
 8007486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	88fa      	ldrh	r2, [r7, #6]
 8007492:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749c:	d108      	bne.n	80074b0 <HAL_UART_Transmit+0x82>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	e003      	b.n	80074b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c0:	e02a      	b.n	8007518 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2200      	movs	r2, #0
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 fb9b 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e036      	b.n	800754a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	3302      	adds	r3, #2
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e007      	b.n	800750a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1cf      	bne.n	80074c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2200      	movs	r2, #0
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fb6b 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007548:	2302      	movs	r3, #2
  }
}
 800754a:	4618      	mov	r0, r3
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b08a      	sub	sp, #40	; 0x28
 8007556:	af02      	add	r7, sp, #8
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b20      	cmp	r3, #32
 8007570:	f040 808c 	bne.w	800768c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_UART_Receive+0x2e>
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e084      	b.n	800768e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_UART_Receive+0x40>
 800758e:	2302      	movs	r3, #2
 8007590:	e07d      	b.n	800768e <HAL_UART_Receive+0x13c>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2222      	movs	r2, #34	; 0x22
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ae:	f7fb fced 	bl	8002f8c <HAL_GetTick>
 80075b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	88fa      	ldrh	r2, [r7, #6]
 80075b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	88fa      	ldrh	r2, [r7, #6]
 80075be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c8:	d108      	bne.n	80075dc <HAL_UART_Receive+0x8a>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	e003      	b.n	80075e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80075ec:	e043      	b.n	8007676 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2200      	movs	r2, #0
 80075f6:	2120      	movs	r1, #32
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fb05 	bl	8007c08 <UART_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e042      	b.n	800768e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10c      	bne.n	8007628 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	b29a      	uxth	r2, r3
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	3302      	adds	r3, #2
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e01f      	b.n	8007668 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007630:	d007      	beq.n	8007642 <HAL_UART_Receive+0xf0>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <HAL_UART_Receive+0xfe>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	e008      	b.n	8007662 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765c:	b2da      	uxtb	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3301      	adds	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1b6      	bne.n	80075ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	e000      	b.n	800768e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800768c:	2302      	movs	r3, #2
  }
}
 800768e:	4618      	mov	r0, r3
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b0ba      	sub	sp, #232	; 0xe8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076be:	2300      	movs	r3, #0
 80076c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80076d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <HAL_UART_IRQHandler+0x66>
 80076ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fbd3 	bl	8007ea2 <UART_Receive_IT>
      return;
 80076fc:	e256      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80de 	beq.w	80078c4 <HAL_UART_IRQHandler+0x22c>
 8007708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80d1 	beq.w	80078c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <HAL_UART_IRQHandler+0xae>
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f043 0201 	orr.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <HAL_UART_IRQHandler+0xd2>
 8007752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f043 0202 	orr.w	r2, r3, #2
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800776a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_UART_IRQHandler+0xf6>
 8007776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f043 0204 	orr.w	r2, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d011      	beq.n	80077be <HAL_UART_IRQHandler+0x126>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f043 0208 	orr.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 81ed 	beq.w	8007ba2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_UART_IRQHandler+0x14e>
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fb5e 	bl	8007ea2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_UART_IRQHandler+0x17a>
 800780a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04f      	beq.n	80078b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa66 	bl	8007ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d141      	bne.n	80078aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3314      	adds	r3, #20
 800782c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800783c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800785e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800786a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1d9      	bne.n	8007826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	4a7d      	ldr	r2, [pc, #500]	; (8007a74 <HAL_UART_IRQHandler+0x3dc>)
 8007880:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	4618      	mov	r0, r3
 8007888:	f7fc f848 	bl	800391c <HAL_DMA_Abort_IT>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e00e      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f99a 	bl	8007bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	e00a      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f996 	bl	8007bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	e006      	b.n	80078c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f992 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078be:	e170      	b.n	8007ba2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c0:	bf00      	nop
    return;
 80078c2:	e16e      	b.n	8007ba2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 814a 	bne.w	8007b62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 8143 	beq.w	8007b62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 813c 	beq.w	8007b62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	f040 80b4 	bne.w	8007a78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800791c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8140 	beq.w	8007ba6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800792a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800792e:	429a      	cmp	r2, r3
 8007930:	f080 8139 	bcs.w	8007ba6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800793a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007946:	f000 8088 	beq.w	8007a5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007976:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800797a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007982:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800798e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1d9      	bne.n	800794a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e1      	bne.n	8007996 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3314      	adds	r3, #20
 80079d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2a:	f023 0310 	bic.w	r3, r3, #16
 8007a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	330c      	adds	r3, #12
 8007a38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fb fef1 	bl	800383c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8c0 	bl	8007bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a70:	e099      	b.n	8007ba6 <HAL_UART_IRQHandler+0x50e>
 8007a72:	bf00      	nop
 8007a74:	08007dab 	.word	0x08007dab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 808b 	beq.w	8007baa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8086 	beq.w	8007baa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330c      	adds	r3, #12
 8007aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ac2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e3      	bne.n	8007a9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007afa:	633a      	str	r2, [r7, #48]	; 0x30
 8007afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e3      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0310 	bic.w	r3, r3, #16
 8007b32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b40:	61fa      	str	r2, [r7, #28]
 8007b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69b9      	ldr	r1, [r7, #24]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e3      	bne.n	8007b1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f848 	bl	8007bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b60:	e023      	b.n	8007baa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <HAL_UART_IRQHandler+0x4ea>
 8007b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f929 	bl	8007dd2 <UART_Transmit_IT>
    return;
 8007b80:	e014      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00e      	beq.n	8007bac <HAL_UART_IRQHandler+0x514>
 8007b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f969 	bl	8007e72 <UART_EndTransmit_IT>
    return;
 8007ba0:	e004      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
    return;
 8007ba2:	bf00      	nop
 8007ba4:	e002      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
      return;
 8007ba6:	bf00      	nop
 8007ba8:	e000      	b.n	8007bac <HAL_UART_IRQHandler+0x514>
      return;
 8007baa:	bf00      	nop
  }
}
 8007bac:	37e8      	adds	r7, #232	; 0xe8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop

08007bb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b090      	sub	sp, #64	; 0x40
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c18:	e050      	b.n	8007cbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d04c      	beq.n	8007cbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c28:	f7fb f9b0 	bl	8002f8c <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d241      	bcs.n	8007cbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	330c      	adds	r3, #12
 8007c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c58:	637a      	str	r2, [r7, #52]	; 0x34
 8007c5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e5      	bne.n	8007c38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3314      	adds	r3, #20
 8007c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f023 0301 	bic.w	r3, r3, #1
 8007c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3314      	adds	r3, #20
 8007c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c8c:	623a      	str	r2, [r7, #32]
 8007c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	69f9      	ldr	r1, [r7, #28]
 8007c92:	6a3a      	ldr	r2, [r7, #32]
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e5      	bne.n	8007c6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e00f      	b.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d09f      	beq.n	8007c1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3740      	adds	r7, #64	; 0x40
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b095      	sub	sp, #84	; 0x54
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d0c:	643a      	str	r2, [r7, #64]	; 0x40
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3314      	adds	r3, #20
 8007d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3314      	adds	r3, #20
 8007d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e5      	bne.n	8007d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d119      	bne.n	8007d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	647b      	str	r3, [r7, #68]	; 0x44
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d7c:	61ba      	str	r2, [r7, #24]
 8007d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6979      	ldr	r1, [r7, #20]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d9e:	bf00      	nop
 8007da0:	3754      	adds	r7, #84	; 0x54
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff ff09 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b21      	cmp	r3, #33	; 0x21
 8007de4:	d13e      	bne.n	8007e64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dee:	d114      	bne.n	8007e1a <UART_Transmit_IT+0x48>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d110      	bne.n	8007e1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	1c9a      	adds	r2, r3, #2
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	621a      	str	r2, [r3, #32]
 8007e18:	e008      	b.n	8007e2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	1c59      	adds	r1, r3, #1
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6211      	str	r1, [r2, #32]
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10f      	bne.n	8007e60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	e000      	b.n	8007e66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e64:	2302      	movs	r3, #2
  }
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff fe8e 	bl	8007bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b08c      	sub	sp, #48	; 0x30
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b22      	cmp	r3, #34	; 0x22
 8007eb4:	f040 80ab 	bne.w	800800e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec0:	d117      	bne.n	8007ef2 <UART_Receive_IT+0x50>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d113      	bne.n	8007ef2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	629a      	str	r2, [r3, #40]	; 0x28
 8007ef0:	e026      	b.n	8007f40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f04:	d007      	beq.n	8007f16 <UART_Receive_IT+0x74>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <UART_Receive_IT+0x82>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	e008      	b.n	8007f36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d15a      	bne.n	800800a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0220 	bic.w	r2, r2, #32
 8007f62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695a      	ldr	r2, [r3, #20]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0201 	bic.w	r2, r2, #1
 8007f82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d135      	bne.n	8008000 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f023 0310 	bic.w	r3, r3, #16
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	623a      	str	r2, [r7, #32]
 8007fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	69f9      	ldr	r1, [r7, #28]
 8007fc0:	6a3a      	ldr	r2, [r7, #32]
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d10a      	bne.n	8007ff2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff fdf9 	bl	8007bf0 <HAL_UARTEx_RxEventCallback>
 8007ffe:	e002      	b.n	8008006 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fde1 	bl	8007bc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e002      	b.n	8008010 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800800e:	2302      	movs	r3, #2
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3730      	adds	r7, #48	; 0x30
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800801c:	b0c0      	sub	sp, #256	; 0x100
 800801e:	af00      	add	r7, sp, #0
 8008020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	68d9      	ldr	r1, [r3, #12]
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	ea40 0301 	orr.w	r3, r0, r1
 8008040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	431a      	orrs	r2, r3
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	431a      	orrs	r2, r3
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	4313      	orrs	r3, r2
 8008060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008070:	f021 010c 	bic.w	r1, r1, #12
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800807e:	430b      	orrs	r3, r1
 8008080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800808e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008092:	6999      	ldr	r1, [r3, #24]
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	ea40 0301 	orr.w	r3, r0, r1
 800809e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b8f      	ldr	r3, [pc, #572]	; (80082e4 <UART_SetConfig+0x2cc>)
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d005      	beq.n	80080b8 <UART_SetConfig+0xa0>
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b8d      	ldr	r3, [pc, #564]	; (80082e8 <UART_SetConfig+0x2d0>)
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d104      	bne.n	80080c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080b8:	f7fd fe92 	bl	8005de0 <HAL_RCC_GetPCLK2Freq>
 80080bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080c0:	e003      	b.n	80080ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080c2:	f7fd fe79 	bl	8005db8 <HAL_RCC_GetPCLK1Freq>
 80080c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d4:	f040 810c 	bne.w	80082f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080ea:	4622      	mov	r2, r4
 80080ec:	462b      	mov	r3, r5
 80080ee:	1891      	adds	r1, r2, r2
 80080f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80080f2:	415b      	adcs	r3, r3
 80080f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080fa:	4621      	mov	r1, r4
 80080fc:	eb12 0801 	adds.w	r8, r2, r1
 8008100:	4629      	mov	r1, r5
 8008102:	eb43 0901 	adc.w	r9, r3, r1
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800811a:	4690      	mov	r8, r2
 800811c:	4699      	mov	r9, r3
 800811e:	4623      	mov	r3, r4
 8008120:	eb18 0303 	adds.w	r3, r8, r3
 8008124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008128:	462b      	mov	r3, r5
 800812a:	eb49 0303 	adc.w	r3, r9, r3
 800812e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800813e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008146:	460b      	mov	r3, r1
 8008148:	18db      	adds	r3, r3, r3
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
 800814c:	4613      	mov	r3, r2
 800814e:	eb42 0303 	adc.w	r3, r2, r3
 8008152:	657b      	str	r3, [r7, #84]	; 0x54
 8008154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800815c:	f7f8 fd9c 	bl	8000c98 <__aeabi_uldivmod>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4b61      	ldr	r3, [pc, #388]	; (80082ec <UART_SetConfig+0x2d4>)
 8008166:	fba3 2302 	umull	r2, r3, r3, r2
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	011c      	lsls	r4, r3, #4
 800816e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800817c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	1891      	adds	r1, r2, r2
 8008186:	64b9      	str	r1, [r7, #72]	; 0x48
 8008188:	415b      	adcs	r3, r3
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800818c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008190:	4641      	mov	r1, r8
 8008192:	eb12 0a01 	adds.w	sl, r2, r1
 8008196:	4649      	mov	r1, r9
 8008198:	eb43 0b01 	adc.w	fp, r3, r1
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081b0:	4692      	mov	sl, r2
 80081b2:	469b      	mov	fp, r3
 80081b4:	4643      	mov	r3, r8
 80081b6:	eb1a 0303 	adds.w	r3, sl, r3
 80081ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081be:	464b      	mov	r3, r9
 80081c0:	eb4b 0303 	adc.w	r3, fp, r3
 80081c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081dc:	460b      	mov	r3, r1
 80081de:	18db      	adds	r3, r3, r3
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
 80081e2:	4613      	mov	r3, r2
 80081e4:	eb42 0303 	adc.w	r3, r2, r3
 80081e8:	647b      	str	r3, [r7, #68]	; 0x44
 80081ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081f2:	f7f8 fd51 	bl	8000c98 <__aeabi_uldivmod>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	4b3b      	ldr	r3, [pc, #236]	; (80082ec <UART_SetConfig+0x2d4>)
 80081fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2264      	movs	r2, #100	; 0x64
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	1acb      	subs	r3, r1, r3
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008212:	4b36      	ldr	r3, [pc, #216]	; (80082ec <UART_SetConfig+0x2d4>)
 8008214:	fba3 2302 	umull	r2, r3, r3, r2
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008220:	441c      	add	r4, r3
 8008222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008226:	2200      	movs	r2, #0
 8008228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800822c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	1891      	adds	r1, r2, r2
 800823a:	63b9      	str	r1, [r7, #56]	; 0x38
 800823c:	415b      	adcs	r3, r3
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008244:	4641      	mov	r1, r8
 8008246:	1851      	adds	r1, r2, r1
 8008248:	6339      	str	r1, [r7, #48]	; 0x30
 800824a:	4649      	mov	r1, r9
 800824c:	414b      	adcs	r3, r1
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800825c:	4659      	mov	r1, fp
 800825e:	00cb      	lsls	r3, r1, #3
 8008260:	4651      	mov	r1, sl
 8008262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008266:	4651      	mov	r1, sl
 8008268:	00ca      	lsls	r2, r1, #3
 800826a:	4610      	mov	r0, r2
 800826c:	4619      	mov	r1, r3
 800826e:	4603      	mov	r3, r0
 8008270:	4642      	mov	r2, r8
 8008272:	189b      	adds	r3, r3, r2
 8008274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008278:	464b      	mov	r3, r9
 800827a:	460a      	mov	r2, r1
 800827c:	eb42 0303 	adc.w	r3, r2, r3
 8008280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008298:	460b      	mov	r3, r1
 800829a:	18db      	adds	r3, r3, r3
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
 800829e:	4613      	mov	r3, r2
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082ae:	f7f8 fcf3 	bl	8000c98 <__aeabi_uldivmod>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <UART_SetConfig+0x2d4>)
 80082b8:	fba3 1302 	umull	r1, r3, r3, r2
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	2164      	movs	r1, #100	; 0x64
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	3332      	adds	r3, #50	; 0x32
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <UART_SetConfig+0x2d4>)
 80082cc:	fba2 2303 	umull	r2, r3, r2, r3
 80082d0:	095b      	lsrs	r3, r3, #5
 80082d2:	f003 0207 	and.w	r2, r3, #7
 80082d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4422      	add	r2, r4
 80082de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082e0:	e105      	b.n	80084ee <UART_SetConfig+0x4d6>
 80082e2:	bf00      	nop
 80082e4:	40011000 	.word	0x40011000
 80082e8:	40011400 	.word	0x40011400
 80082ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	1891      	adds	r1, r2, r2
 8008308:	6239      	str	r1, [r7, #32]
 800830a:	415b      	adcs	r3, r3
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
 800830e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008312:	4641      	mov	r1, r8
 8008314:	1854      	adds	r4, r2, r1
 8008316:	4649      	mov	r1, r9
 8008318:	eb43 0501 	adc.w	r5, r3, r1
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	00eb      	lsls	r3, r5, #3
 8008326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800832a:	00e2      	lsls	r2, r4, #3
 800832c:	4614      	mov	r4, r2
 800832e:	461d      	mov	r5, r3
 8008330:	4643      	mov	r3, r8
 8008332:	18e3      	adds	r3, r4, r3
 8008334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008338:	464b      	mov	r3, r9
 800833a:	eb45 0303 	adc.w	r3, r5, r3
 800833e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800834e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008352:	f04f 0200 	mov.w	r2, #0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800835e:	4629      	mov	r1, r5
 8008360:	008b      	lsls	r3, r1, #2
 8008362:	4621      	mov	r1, r4
 8008364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008368:	4621      	mov	r1, r4
 800836a:	008a      	lsls	r2, r1, #2
 800836c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008370:	f7f8 fc92 	bl	8000c98 <__aeabi_uldivmod>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4b60      	ldr	r3, [pc, #384]	; (80084fc <UART_SetConfig+0x4e4>)
 800837a:	fba3 2302 	umull	r2, r3, r3, r2
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	011c      	lsls	r4, r3, #4
 8008382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008386:	2200      	movs	r2, #0
 8008388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800838c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008394:	4642      	mov	r2, r8
 8008396:	464b      	mov	r3, r9
 8008398:	1891      	adds	r1, r2, r2
 800839a:	61b9      	str	r1, [r7, #24]
 800839c:	415b      	adcs	r3, r3
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083a4:	4641      	mov	r1, r8
 80083a6:	1851      	adds	r1, r2, r1
 80083a8:	6139      	str	r1, [r7, #16]
 80083aa:	4649      	mov	r1, r9
 80083ac:	414b      	adcs	r3, r1
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083bc:	4659      	mov	r1, fp
 80083be:	00cb      	lsls	r3, r1, #3
 80083c0:	4651      	mov	r1, sl
 80083c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083c6:	4651      	mov	r1, sl
 80083c8:	00ca      	lsls	r2, r1, #3
 80083ca:	4610      	mov	r0, r2
 80083cc:	4619      	mov	r1, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	4642      	mov	r2, r8
 80083d2:	189b      	adds	r3, r3, r2
 80083d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083d8:	464b      	mov	r3, r9
 80083da:	460a      	mov	r2, r1
 80083dc:	eb42 0303 	adc.w	r3, r2, r3
 80083e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083fc:	4649      	mov	r1, r9
 80083fe:	008b      	lsls	r3, r1, #2
 8008400:	4641      	mov	r1, r8
 8008402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008406:	4641      	mov	r1, r8
 8008408:	008a      	lsls	r2, r1, #2
 800840a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800840e:	f7f8 fc43 	bl	8000c98 <__aeabi_uldivmod>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4b39      	ldr	r3, [pc, #228]	; (80084fc <UART_SetConfig+0x4e4>)
 8008418:	fba3 1302 	umull	r1, r3, r3, r2
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	2164      	movs	r1, #100	; 0x64
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	3332      	adds	r3, #50	; 0x32
 800842a:	4a34      	ldr	r2, [pc, #208]	; (80084fc <UART_SetConfig+0x4e4>)
 800842c:	fba2 2303 	umull	r2, r3, r2, r3
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008436:	441c      	add	r4, r3
 8008438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800843c:	2200      	movs	r2, #0
 800843e:	673b      	str	r3, [r7, #112]	; 0x70
 8008440:	677a      	str	r2, [r7, #116]	; 0x74
 8008442:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008446:	4642      	mov	r2, r8
 8008448:	464b      	mov	r3, r9
 800844a:	1891      	adds	r1, r2, r2
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	415b      	adcs	r3, r3
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008456:	4641      	mov	r1, r8
 8008458:	1851      	adds	r1, r2, r1
 800845a:	6039      	str	r1, [r7, #0]
 800845c:	4649      	mov	r1, r9
 800845e:	414b      	adcs	r3, r1
 8008460:	607b      	str	r3, [r7, #4]
 8008462:	f04f 0200 	mov.w	r2, #0
 8008466:	f04f 0300 	mov.w	r3, #0
 800846a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800846e:	4659      	mov	r1, fp
 8008470:	00cb      	lsls	r3, r1, #3
 8008472:	4651      	mov	r1, sl
 8008474:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008478:	4651      	mov	r1, sl
 800847a:	00ca      	lsls	r2, r1, #3
 800847c:	4610      	mov	r0, r2
 800847e:	4619      	mov	r1, r3
 8008480:	4603      	mov	r3, r0
 8008482:	4642      	mov	r2, r8
 8008484:	189b      	adds	r3, r3, r2
 8008486:	66bb      	str	r3, [r7, #104]	; 0x68
 8008488:	464b      	mov	r3, r9
 800848a:	460a      	mov	r2, r1
 800848c:	eb42 0303 	adc.w	r3, r2, r3
 8008490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	663b      	str	r3, [r7, #96]	; 0x60
 800849c:	667a      	str	r2, [r7, #100]	; 0x64
 800849e:	f04f 0200 	mov.w	r2, #0
 80084a2:	f04f 0300 	mov.w	r3, #0
 80084a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084aa:	4649      	mov	r1, r9
 80084ac:	008b      	lsls	r3, r1, #2
 80084ae:	4641      	mov	r1, r8
 80084b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b4:	4641      	mov	r1, r8
 80084b6:	008a      	lsls	r2, r1, #2
 80084b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084bc:	f7f8 fbec 	bl	8000c98 <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <UART_SetConfig+0x4e4>)
 80084c6:	fba3 1302 	umull	r1, r3, r3, r2
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	2164      	movs	r1, #100	; 0x64
 80084ce:	fb01 f303 	mul.w	r3, r1, r3
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	3332      	adds	r3, #50	; 0x32
 80084d8:	4a08      	ldr	r2, [pc, #32]	; (80084fc <UART_SetConfig+0x4e4>)
 80084da:	fba2 2303 	umull	r2, r3, r2, r3
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	f003 020f 	and.w	r2, r3, #15
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4422      	add	r2, r4
 80084ec:	609a      	str	r2, [r3, #8]
}
 80084ee:	bf00      	nop
 80084f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084f4:	46bd      	mov	sp, r7
 80084f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084fa:	bf00      	nop
 80084fc:	51eb851f 	.word	0x51eb851f

08008500 <atoi>:
 8008500:	220a      	movs	r2, #10
 8008502:	2100      	movs	r1, #0
 8008504:	f000 bd4c 	b.w	8008fa0 <strtol>

08008508 <__errno>:
 8008508:	4b01      	ldr	r3, [pc, #4]	; (8008510 <__errno+0x8>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20000014 	.word	0x20000014

08008514 <__libc_init_array>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4d0d      	ldr	r5, [pc, #52]	; (800854c <__libc_init_array+0x38>)
 8008518:	4c0d      	ldr	r4, [pc, #52]	; (8008550 <__libc_init_array+0x3c>)
 800851a:	1b64      	subs	r4, r4, r5
 800851c:	10a4      	asrs	r4, r4, #2
 800851e:	2600      	movs	r6, #0
 8008520:	42a6      	cmp	r6, r4
 8008522:	d109      	bne.n	8008538 <__libc_init_array+0x24>
 8008524:	4d0b      	ldr	r5, [pc, #44]	; (8008554 <__libc_init_array+0x40>)
 8008526:	4c0c      	ldr	r4, [pc, #48]	; (8008558 <__libc_init_array+0x44>)
 8008528:	f002 ff90 	bl	800b44c <_init>
 800852c:	1b64      	subs	r4, r4, r5
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	2600      	movs	r6, #0
 8008532:	42a6      	cmp	r6, r4
 8008534:	d105      	bne.n	8008542 <__libc_init_array+0x2e>
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	f855 3b04 	ldr.w	r3, [r5], #4
 800853c:	4798      	blx	r3
 800853e:	3601      	adds	r6, #1
 8008540:	e7ee      	b.n	8008520 <__libc_init_array+0xc>
 8008542:	f855 3b04 	ldr.w	r3, [r5], #4
 8008546:	4798      	blx	r3
 8008548:	3601      	adds	r6, #1
 800854a:	e7f2      	b.n	8008532 <__libc_init_array+0x1e>
 800854c:	0800b944 	.word	0x0800b944
 8008550:	0800b944 	.word	0x0800b944
 8008554:	0800b944 	.word	0x0800b944
 8008558:	0800b948 	.word	0x0800b948

0800855c <memcpy>:
 800855c:	440a      	add	r2, r1
 800855e:	4291      	cmp	r1, r2
 8008560:	f100 33ff 	add.w	r3, r0, #4294967295
 8008564:	d100      	bne.n	8008568 <memcpy+0xc>
 8008566:	4770      	bx	lr
 8008568:	b510      	push	{r4, lr}
 800856a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008572:	4291      	cmp	r1, r2
 8008574:	d1f9      	bne.n	800856a <memcpy+0xe>
 8008576:	bd10      	pop	{r4, pc}

08008578 <memset>:
 8008578:	4402      	add	r2, r0
 800857a:	4603      	mov	r3, r0
 800857c:	4293      	cmp	r3, r2
 800857e:	d100      	bne.n	8008582 <memset+0xa>
 8008580:	4770      	bx	lr
 8008582:	f803 1b01 	strb.w	r1, [r3], #1
 8008586:	e7f9      	b.n	800857c <memset+0x4>

08008588 <__cvt>:
 8008588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	ec55 4b10 	vmov	r4, r5, d0
 8008590:	2d00      	cmp	r5, #0
 8008592:	460e      	mov	r6, r1
 8008594:	4619      	mov	r1, r3
 8008596:	462b      	mov	r3, r5
 8008598:	bfbb      	ittet	lt
 800859a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800859e:	461d      	movlt	r5, r3
 80085a0:	2300      	movge	r3, #0
 80085a2:	232d      	movlt	r3, #45	; 0x2d
 80085a4:	700b      	strb	r3, [r1, #0]
 80085a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085ac:	4691      	mov	r9, r2
 80085ae:	f023 0820 	bic.w	r8, r3, #32
 80085b2:	bfbc      	itt	lt
 80085b4:	4622      	movlt	r2, r4
 80085b6:	4614      	movlt	r4, r2
 80085b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085bc:	d005      	beq.n	80085ca <__cvt+0x42>
 80085be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085c2:	d100      	bne.n	80085c6 <__cvt+0x3e>
 80085c4:	3601      	adds	r6, #1
 80085c6:	2102      	movs	r1, #2
 80085c8:	e000      	b.n	80085cc <__cvt+0x44>
 80085ca:	2103      	movs	r1, #3
 80085cc:	ab03      	add	r3, sp, #12
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	ab02      	add	r3, sp, #8
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	ec45 4b10 	vmov	d0, r4, r5
 80085d8:	4653      	mov	r3, sl
 80085da:	4632      	mov	r2, r6
 80085dc:	f000 fd78 	bl	80090d0 <_dtoa_r>
 80085e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085e4:	4607      	mov	r7, r0
 80085e6:	d102      	bne.n	80085ee <__cvt+0x66>
 80085e8:	f019 0f01 	tst.w	r9, #1
 80085ec:	d022      	beq.n	8008634 <__cvt+0xac>
 80085ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085f2:	eb07 0906 	add.w	r9, r7, r6
 80085f6:	d110      	bne.n	800861a <__cvt+0x92>
 80085f8:	783b      	ldrb	r3, [r7, #0]
 80085fa:	2b30      	cmp	r3, #48	; 0x30
 80085fc:	d10a      	bne.n	8008614 <__cvt+0x8c>
 80085fe:	2200      	movs	r2, #0
 8008600:	2300      	movs	r3, #0
 8008602:	4620      	mov	r0, r4
 8008604:	4629      	mov	r1, r5
 8008606:	f7f8 fa67 	bl	8000ad8 <__aeabi_dcmpeq>
 800860a:	b918      	cbnz	r0, 8008614 <__cvt+0x8c>
 800860c:	f1c6 0601 	rsb	r6, r6, #1
 8008610:	f8ca 6000 	str.w	r6, [sl]
 8008614:	f8da 3000 	ldr.w	r3, [sl]
 8008618:	4499      	add	r9, r3
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f8 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 8008626:	b108      	cbz	r0, 800862c <__cvt+0xa4>
 8008628:	f8cd 900c 	str.w	r9, [sp, #12]
 800862c:	2230      	movs	r2, #48	; 0x30
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	454b      	cmp	r3, r9
 8008632:	d307      	bcc.n	8008644 <__cvt+0xbc>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008638:	1bdb      	subs	r3, r3, r7
 800863a:	4638      	mov	r0, r7
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	b004      	add	sp, #16
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	1c59      	adds	r1, r3, #1
 8008646:	9103      	str	r1, [sp, #12]
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e7f0      	b.n	800862e <__cvt+0xa6>

0800864c <__exponent>:
 800864c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800864e:	4603      	mov	r3, r0
 8008650:	2900      	cmp	r1, #0
 8008652:	bfb8      	it	lt
 8008654:	4249      	neglt	r1, r1
 8008656:	f803 2b02 	strb.w	r2, [r3], #2
 800865a:	bfb4      	ite	lt
 800865c:	222d      	movlt	r2, #45	; 0x2d
 800865e:	222b      	movge	r2, #43	; 0x2b
 8008660:	2909      	cmp	r1, #9
 8008662:	7042      	strb	r2, [r0, #1]
 8008664:	dd2a      	ble.n	80086bc <__exponent+0x70>
 8008666:	f10d 0407 	add.w	r4, sp, #7
 800866a:	46a4      	mov	ip, r4
 800866c:	270a      	movs	r7, #10
 800866e:	46a6      	mov	lr, r4
 8008670:	460a      	mov	r2, r1
 8008672:	fb91 f6f7 	sdiv	r6, r1, r7
 8008676:	fb07 1516 	mls	r5, r7, r6, r1
 800867a:	3530      	adds	r5, #48	; 0x30
 800867c:	2a63      	cmp	r2, #99	; 0x63
 800867e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008682:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008686:	4631      	mov	r1, r6
 8008688:	dcf1      	bgt.n	800866e <__exponent+0x22>
 800868a:	3130      	adds	r1, #48	; 0x30
 800868c:	f1ae 0502 	sub.w	r5, lr, #2
 8008690:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008694:	1c44      	adds	r4, r0, #1
 8008696:	4629      	mov	r1, r5
 8008698:	4561      	cmp	r1, ip
 800869a:	d30a      	bcc.n	80086b2 <__exponent+0x66>
 800869c:	f10d 0209 	add.w	r2, sp, #9
 80086a0:	eba2 020e 	sub.w	r2, r2, lr
 80086a4:	4565      	cmp	r5, ip
 80086a6:	bf88      	it	hi
 80086a8:	2200      	movhi	r2, #0
 80086aa:	4413      	add	r3, r2
 80086ac:	1a18      	subs	r0, r3, r0
 80086ae:	b003      	add	sp, #12
 80086b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086ba:	e7ed      	b.n	8008698 <__exponent+0x4c>
 80086bc:	2330      	movs	r3, #48	; 0x30
 80086be:	3130      	adds	r1, #48	; 0x30
 80086c0:	7083      	strb	r3, [r0, #2]
 80086c2:	70c1      	strb	r1, [r0, #3]
 80086c4:	1d03      	adds	r3, r0, #4
 80086c6:	e7f1      	b.n	80086ac <__exponent+0x60>

080086c8 <_printf_float>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	ed2d 8b02 	vpush	{d8}
 80086d0:	b08d      	sub	sp, #52	; 0x34
 80086d2:	460c      	mov	r4, r1
 80086d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086d8:	4616      	mov	r6, r2
 80086da:	461f      	mov	r7, r3
 80086dc:	4605      	mov	r5, r0
 80086de:	f001 fae5 	bl	8009cac <_localeconv_r>
 80086e2:	f8d0 a000 	ldr.w	sl, [r0]
 80086e6:	4650      	mov	r0, sl
 80086e8:	f7f7 fd7a 	bl	80001e0 <strlen>
 80086ec:	2300      	movs	r3, #0
 80086ee:	930a      	str	r3, [sp, #40]	; 0x28
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	f8d8 3000 	ldr.w	r3, [r8]
 80086f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086fc:	3307      	adds	r3, #7
 80086fe:	f023 0307 	bic.w	r3, r3, #7
 8008702:	f103 0208 	add.w	r2, r3, #8
 8008706:	f8c8 2000 	str.w	r2, [r8]
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008712:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008716:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800871a:	9307      	str	r3, [sp, #28]
 800871c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008720:	ee08 0a10 	vmov	s16, r0
 8008724:	4b9f      	ldr	r3, [pc, #636]	; (80089a4 <_printf_float+0x2dc>)
 8008726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	f7f8 fa05 	bl	8000b3c <__aeabi_dcmpun>
 8008732:	bb88      	cbnz	r0, 8008798 <_printf_float+0xd0>
 8008734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008738:	4b9a      	ldr	r3, [pc, #616]	; (80089a4 <_printf_float+0x2dc>)
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	f7f8 f9df 	bl	8000b00 <__aeabi_dcmple>
 8008742:	bb48      	cbnz	r0, 8008798 <_printf_float+0xd0>
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	4640      	mov	r0, r8
 800874a:	4649      	mov	r1, r9
 800874c:	f7f8 f9ce 	bl	8000aec <__aeabi_dcmplt>
 8008750:	b110      	cbz	r0, 8008758 <_printf_float+0x90>
 8008752:	232d      	movs	r3, #45	; 0x2d
 8008754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008758:	4b93      	ldr	r3, [pc, #588]	; (80089a8 <_printf_float+0x2e0>)
 800875a:	4894      	ldr	r0, [pc, #592]	; (80089ac <_printf_float+0x2e4>)
 800875c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008760:	bf94      	ite	ls
 8008762:	4698      	movls	r8, r3
 8008764:	4680      	movhi	r8, r0
 8008766:	2303      	movs	r3, #3
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	9b05      	ldr	r3, [sp, #20]
 800876c:	f023 0204 	bic.w	r2, r3, #4
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	f04f 0900 	mov.w	r9, #0
 8008776:	9700      	str	r7, [sp, #0]
 8008778:	4633      	mov	r3, r6
 800877a:	aa0b      	add	r2, sp, #44	; 0x2c
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 f9d8 	bl	8008b34 <_printf_common>
 8008784:	3001      	adds	r0, #1
 8008786:	f040 8090 	bne.w	80088aa <_printf_float+0x1e2>
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	b00d      	add	sp, #52	; 0x34
 8008790:	ecbd 8b02 	vpop	{d8}
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	4640      	mov	r0, r8
 800879e:	4649      	mov	r1, r9
 80087a0:	f7f8 f9cc 	bl	8000b3c <__aeabi_dcmpun>
 80087a4:	b140      	cbz	r0, 80087b8 <_printf_float+0xf0>
 80087a6:	464b      	mov	r3, r9
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfbc      	itt	lt
 80087ac:	232d      	movlt	r3, #45	; 0x2d
 80087ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087b2:	487f      	ldr	r0, [pc, #508]	; (80089b0 <_printf_float+0x2e8>)
 80087b4:	4b7f      	ldr	r3, [pc, #508]	; (80089b4 <_printf_float+0x2ec>)
 80087b6:	e7d1      	b.n	800875c <_printf_float+0x94>
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087be:	9206      	str	r2, [sp, #24]
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	d13f      	bne.n	8008844 <_printf_float+0x17c>
 80087c4:	2306      	movs	r3, #6
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	9b05      	ldr	r3, [sp, #20]
 80087ca:	6861      	ldr	r1, [r4, #4]
 80087cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087d0:	2300      	movs	r3, #0
 80087d2:	9303      	str	r3, [sp, #12]
 80087d4:	ab0a      	add	r3, sp, #40	; 0x28
 80087d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087da:	ab09      	add	r3, sp, #36	; 0x24
 80087dc:	ec49 8b10 	vmov	d0, r8, r9
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	6022      	str	r2, [r4, #0]
 80087e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7ff fecd 	bl	8008588 <__cvt>
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087f2:	2b47      	cmp	r3, #71	; 0x47
 80087f4:	4680      	mov	r8, r0
 80087f6:	d108      	bne.n	800880a <_printf_float+0x142>
 80087f8:	1cc8      	adds	r0, r1, #3
 80087fa:	db02      	blt.n	8008802 <_printf_float+0x13a>
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	4299      	cmp	r1, r3
 8008800:	dd41      	ble.n	8008886 <_printf_float+0x1be>
 8008802:	f1ab 0b02 	sub.w	fp, fp, #2
 8008806:	fa5f fb8b 	uxtb.w	fp, fp
 800880a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800880e:	d820      	bhi.n	8008852 <_printf_float+0x18a>
 8008810:	3901      	subs	r1, #1
 8008812:	465a      	mov	r2, fp
 8008814:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008818:	9109      	str	r1, [sp, #36]	; 0x24
 800881a:	f7ff ff17 	bl	800864c <__exponent>
 800881e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008820:	1813      	adds	r3, r2, r0
 8008822:	2a01      	cmp	r2, #1
 8008824:	4681      	mov	r9, r0
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	dc02      	bgt.n	8008830 <_printf_float+0x168>
 800882a:	6822      	ldr	r2, [r4, #0]
 800882c:	07d2      	lsls	r2, r2, #31
 800882e:	d501      	bpl.n	8008834 <_printf_float+0x16c>
 8008830:	3301      	adds	r3, #1
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008838:	2b00      	cmp	r3, #0
 800883a:	d09c      	beq.n	8008776 <_printf_float+0xae>
 800883c:	232d      	movs	r3, #45	; 0x2d
 800883e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008842:	e798      	b.n	8008776 <_printf_float+0xae>
 8008844:	9a06      	ldr	r2, [sp, #24]
 8008846:	2a47      	cmp	r2, #71	; 0x47
 8008848:	d1be      	bne.n	80087c8 <_printf_float+0x100>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1bc      	bne.n	80087c8 <_printf_float+0x100>
 800884e:	2301      	movs	r3, #1
 8008850:	e7b9      	b.n	80087c6 <_printf_float+0xfe>
 8008852:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008856:	d118      	bne.n	800888a <_printf_float+0x1c2>
 8008858:	2900      	cmp	r1, #0
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	dd0b      	ble.n	8008876 <_printf_float+0x1ae>
 800885e:	6121      	str	r1, [r4, #16]
 8008860:	b913      	cbnz	r3, 8008868 <_printf_float+0x1a0>
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	07d0      	lsls	r0, r2, #31
 8008866:	d502      	bpl.n	800886e <_printf_float+0x1a6>
 8008868:	3301      	adds	r3, #1
 800886a:	440b      	add	r3, r1
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008870:	f04f 0900 	mov.w	r9, #0
 8008874:	e7de      	b.n	8008834 <_printf_float+0x16c>
 8008876:	b913      	cbnz	r3, 800887e <_printf_float+0x1b6>
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	07d2      	lsls	r2, r2, #31
 800887c:	d501      	bpl.n	8008882 <_printf_float+0x1ba>
 800887e:	3302      	adds	r3, #2
 8008880:	e7f4      	b.n	800886c <_printf_float+0x1a4>
 8008882:	2301      	movs	r3, #1
 8008884:	e7f2      	b.n	800886c <_printf_float+0x1a4>
 8008886:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800888a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888c:	4299      	cmp	r1, r3
 800888e:	db05      	blt.n	800889c <_printf_float+0x1d4>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	6121      	str	r1, [r4, #16]
 8008894:	07d8      	lsls	r0, r3, #31
 8008896:	d5ea      	bpl.n	800886e <_printf_float+0x1a6>
 8008898:	1c4b      	adds	r3, r1, #1
 800889a:	e7e7      	b.n	800886c <_printf_float+0x1a4>
 800889c:	2900      	cmp	r1, #0
 800889e:	bfd4      	ite	le
 80088a0:	f1c1 0202 	rsble	r2, r1, #2
 80088a4:	2201      	movgt	r2, #1
 80088a6:	4413      	add	r3, r2
 80088a8:	e7e0      	b.n	800886c <_printf_float+0x1a4>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	055a      	lsls	r2, r3, #21
 80088ae:	d407      	bmi.n	80088c0 <_printf_float+0x1f8>
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	4642      	mov	r2, r8
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	d12c      	bne.n	8008918 <_printf_float+0x250>
 80088be:	e764      	b.n	800878a <_printf_float+0xc2>
 80088c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088c4:	f240 80e0 	bls.w	8008a88 <_printf_float+0x3c0>
 80088c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088cc:	2200      	movs	r2, #0
 80088ce:	2300      	movs	r3, #0
 80088d0:	f7f8 f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d034      	beq.n	8008942 <_printf_float+0x27a>
 80088d8:	4a37      	ldr	r2, [pc, #220]	; (80089b8 <_printf_float+0x2f0>)
 80088da:	2301      	movs	r3, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af51 	beq.w	800878a <_printf_float+0xc2>
 80088e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ec:	429a      	cmp	r2, r3
 80088ee:	db02      	blt.n	80088f6 <_printf_float+0x22e>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07d8      	lsls	r0, r3, #31
 80088f4:	d510      	bpl.n	8008918 <_printf_float+0x250>
 80088f6:	ee18 3a10 	vmov	r3, s16
 80088fa:	4652      	mov	r2, sl
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af41 	beq.w	800878a <_printf_float+0xc2>
 8008908:	f04f 0800 	mov.w	r8, #0
 800890c:	f104 091a 	add.w	r9, r4, #26
 8008910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008912:	3b01      	subs	r3, #1
 8008914:	4543      	cmp	r3, r8
 8008916:	dc09      	bgt.n	800892c <_printf_float+0x264>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	079b      	lsls	r3, r3, #30
 800891c:	f100 8105 	bmi.w	8008b2a <_printf_float+0x462>
 8008920:	68e0      	ldr	r0, [r4, #12]
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	4298      	cmp	r0, r3
 8008926:	bfb8      	it	lt
 8008928:	4618      	movlt	r0, r3
 800892a:	e730      	b.n	800878e <_printf_float+0xc6>
 800892c:	2301      	movs	r3, #1
 800892e:	464a      	mov	r2, r9
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f af27 	beq.w	800878a <_printf_float+0xc2>
 800893c:	f108 0801 	add.w	r8, r8, #1
 8008940:	e7e6      	b.n	8008910 <_printf_float+0x248>
 8008942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	dc39      	bgt.n	80089bc <_printf_float+0x2f4>
 8008948:	4a1b      	ldr	r2, [pc, #108]	; (80089b8 <_printf_float+0x2f0>)
 800894a:	2301      	movs	r3, #1
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	f43f af19 	beq.w	800878a <_printf_float+0xc2>
 8008958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800895c:	4313      	orrs	r3, r2
 800895e:	d102      	bne.n	8008966 <_printf_float+0x29e>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	07d9      	lsls	r1, r3, #31
 8008964:	d5d8      	bpl.n	8008918 <_printf_float+0x250>
 8008966:	ee18 3a10 	vmov	r3, s16
 800896a:	4652      	mov	r2, sl
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f af09 	beq.w	800878a <_printf_float+0xc2>
 8008978:	f04f 0900 	mov.w	r9, #0
 800897c:	f104 0a1a 	add.w	sl, r4, #26
 8008980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008982:	425b      	negs	r3, r3
 8008984:	454b      	cmp	r3, r9
 8008986:	dc01      	bgt.n	800898c <_printf_float+0x2c4>
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	e792      	b.n	80088b2 <_printf_float+0x1ea>
 800898c:	2301      	movs	r3, #1
 800898e:	4652      	mov	r2, sl
 8008990:	4631      	mov	r1, r6
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	f43f aef7 	beq.w	800878a <_printf_float+0xc2>
 800899c:	f109 0901 	add.w	r9, r9, #1
 80089a0:	e7ee      	b.n	8008980 <_printf_float+0x2b8>
 80089a2:	bf00      	nop
 80089a4:	7fefffff 	.word	0x7fefffff
 80089a8:	0800b564 	.word	0x0800b564
 80089ac:	0800b568 	.word	0x0800b568
 80089b0:	0800b570 	.word	0x0800b570
 80089b4:	0800b56c 	.word	0x0800b56c
 80089b8:	0800b574 	.word	0x0800b574
 80089bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089c0:	429a      	cmp	r2, r3
 80089c2:	bfa8      	it	ge
 80089c4:	461a      	movge	r2, r3
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	4691      	mov	r9, r2
 80089ca:	dc37      	bgt.n	8008a3c <_printf_float+0x374>
 80089cc:	f04f 0b00 	mov.w	fp, #0
 80089d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089d4:	f104 021a 	add.w	r2, r4, #26
 80089d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	eba3 0309 	sub.w	r3, r3, r9
 80089e0:	455b      	cmp	r3, fp
 80089e2:	dc33      	bgt.n	8008a4c <_printf_float+0x384>
 80089e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e8:	429a      	cmp	r2, r3
 80089ea:	db3b      	blt.n	8008a64 <_printf_float+0x39c>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	07da      	lsls	r2, r3, #31
 80089f0:	d438      	bmi.n	8008a64 <_printf_float+0x39c>
 80089f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f4:	9a05      	ldr	r2, [sp, #20]
 80089f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f8:	1a9a      	subs	r2, r3, r2
 80089fa:	eba3 0901 	sub.w	r9, r3, r1
 80089fe:	4591      	cmp	r9, r2
 8008a00:	bfa8      	it	ge
 8008a02:	4691      	movge	r9, r2
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	dc35      	bgt.n	8008a76 <_printf_float+0x3ae>
 8008a0a:	f04f 0800 	mov.w	r8, #0
 8008a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a12:	f104 0a1a 	add.w	sl, r4, #26
 8008a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	eba3 0309 	sub.w	r3, r3, r9
 8008a20:	4543      	cmp	r3, r8
 8008a22:	f77f af79 	ble.w	8008918 <_printf_float+0x250>
 8008a26:	2301      	movs	r3, #1
 8008a28:	4652      	mov	r2, sl
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f aeaa 	beq.w	800878a <_printf_float+0xc2>
 8008a36:	f108 0801 	add.w	r8, r8, #1
 8008a3a:	e7ec      	b.n	8008a16 <_printf_float+0x34e>
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4642      	mov	r2, r8
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	d1c0      	bne.n	80089cc <_printf_float+0x304>
 8008a4a:	e69e      	b.n	800878a <_printf_float+0xc2>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	9205      	str	r2, [sp, #20]
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f ae97 	beq.w	800878a <_printf_float+0xc2>
 8008a5c:	9a05      	ldr	r2, [sp, #20]
 8008a5e:	f10b 0b01 	add.w	fp, fp, #1
 8008a62:	e7b9      	b.n	80089d8 <_printf_float+0x310>
 8008a64:	ee18 3a10 	vmov	r3, s16
 8008a68:	4652      	mov	r2, sl
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	d1be      	bne.n	80089f2 <_printf_float+0x32a>
 8008a74:	e689      	b.n	800878a <_printf_float+0xc2>
 8008a76:	9a05      	ldr	r2, [sp, #20]
 8008a78:	464b      	mov	r3, r9
 8008a7a:	4442      	add	r2, r8
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	d1c1      	bne.n	8008a0a <_printf_float+0x342>
 8008a86:	e680      	b.n	800878a <_printf_float+0xc2>
 8008a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a8a:	2a01      	cmp	r2, #1
 8008a8c:	dc01      	bgt.n	8008a92 <_printf_float+0x3ca>
 8008a8e:	07db      	lsls	r3, r3, #31
 8008a90:	d538      	bpl.n	8008b04 <_printf_float+0x43c>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4642      	mov	r2, r8
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f43f ae74 	beq.w	800878a <_printf_float+0xc2>
 8008aa2:	ee18 3a10 	vmov	r3, s16
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f ae6b 	beq.w	800878a <_printf_float+0xc2>
 8008ab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2300      	movs	r3, #0
 8008abc:	f7f8 f80c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ac0:	b9d8      	cbnz	r0, 8008afa <_printf_float+0x432>
 8008ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac4:	f108 0201 	add.w	r2, r8, #1
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d10e      	bne.n	8008af2 <_printf_float+0x42a>
 8008ad4:	e659      	b.n	800878a <_printf_float+0xc2>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4652      	mov	r2, sl
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f43f ae52 	beq.w	800878a <_printf_float+0xc2>
 8008ae6:	f108 0801 	add.w	r8, r8, #1
 8008aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aec:	3b01      	subs	r3, #1
 8008aee:	4543      	cmp	r3, r8
 8008af0:	dcf1      	bgt.n	8008ad6 <_printf_float+0x40e>
 8008af2:	464b      	mov	r3, r9
 8008af4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008af8:	e6dc      	b.n	80088b4 <_printf_float+0x1ec>
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	f104 0a1a 	add.w	sl, r4, #26
 8008b02:	e7f2      	b.n	8008aea <_printf_float+0x422>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4642      	mov	r2, r8
 8008b08:	e7df      	b.n	8008aca <_printf_float+0x402>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	464a      	mov	r2, r9
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	f43f ae38 	beq.w	800878a <_printf_float+0xc2>
 8008b1a:	f108 0801 	add.w	r8, r8, #1
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	4543      	cmp	r3, r8
 8008b26:	dcf0      	bgt.n	8008b0a <_printf_float+0x442>
 8008b28:	e6fa      	b.n	8008920 <_printf_float+0x258>
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	f104 0919 	add.w	r9, r4, #25
 8008b32:	e7f4      	b.n	8008b1e <_printf_float+0x456>

08008b34 <_printf_common>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	4616      	mov	r6, r2
 8008b3a:	4699      	mov	r9, r3
 8008b3c:	688a      	ldr	r2, [r1, #8]
 8008b3e:	690b      	ldr	r3, [r1, #16]
 8008b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b44:	4293      	cmp	r3, r2
 8008b46:	bfb8      	it	lt
 8008b48:	4613      	movlt	r3, r2
 8008b4a:	6033      	str	r3, [r6, #0]
 8008b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b50:	4607      	mov	r7, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	b10a      	cbz	r2, 8008b5a <_printf_common+0x26>
 8008b56:	3301      	adds	r3, #1
 8008b58:	6033      	str	r3, [r6, #0]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	0699      	lsls	r1, r3, #26
 8008b5e:	bf42      	ittt	mi
 8008b60:	6833      	ldrmi	r3, [r6, #0]
 8008b62:	3302      	addmi	r3, #2
 8008b64:	6033      	strmi	r3, [r6, #0]
 8008b66:	6825      	ldr	r5, [r4, #0]
 8008b68:	f015 0506 	ands.w	r5, r5, #6
 8008b6c:	d106      	bne.n	8008b7c <_printf_common+0x48>
 8008b6e:	f104 0a19 	add.w	sl, r4, #25
 8008b72:	68e3      	ldr	r3, [r4, #12]
 8008b74:	6832      	ldr	r2, [r6, #0]
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	42ab      	cmp	r3, r5
 8008b7a:	dc26      	bgt.n	8008bca <_printf_common+0x96>
 8008b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b80:	1e13      	subs	r3, r2, #0
 8008b82:	6822      	ldr	r2, [r4, #0]
 8008b84:	bf18      	it	ne
 8008b86:	2301      	movne	r3, #1
 8008b88:	0692      	lsls	r2, r2, #26
 8008b8a:	d42b      	bmi.n	8008be4 <_printf_common+0xb0>
 8008b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b90:	4649      	mov	r1, r9
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d01e      	beq.n	8008bd8 <_printf_common+0xa4>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	68e5      	ldr	r5, [r4, #12]
 8008b9e:	6832      	ldr	r2, [r6, #0]
 8008ba0:	f003 0306 	and.w	r3, r3, #6
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	bf08      	it	eq
 8008ba8:	1aad      	subeq	r5, r5, r2
 8008baa:	68a3      	ldr	r3, [r4, #8]
 8008bac:	6922      	ldr	r2, [r4, #16]
 8008bae:	bf0c      	ite	eq
 8008bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb4:	2500      	movne	r5, #0
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	bfc4      	itt	gt
 8008bba:	1a9b      	subgt	r3, r3, r2
 8008bbc:	18ed      	addgt	r5, r5, r3
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	341a      	adds	r4, #26
 8008bc2:	42b5      	cmp	r5, r6
 8008bc4:	d11a      	bne.n	8008bfc <_printf_common+0xc8>
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e008      	b.n	8008bdc <_printf_common+0xa8>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4652      	mov	r2, sl
 8008bce:	4649      	mov	r1, r9
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	47c0      	blx	r8
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d103      	bne.n	8008be0 <_printf_common+0xac>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be0:	3501      	adds	r5, #1
 8008be2:	e7c6      	b.n	8008b72 <_printf_common+0x3e>
 8008be4:	18e1      	adds	r1, r4, r3
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	2030      	movs	r0, #48	; 0x30
 8008bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bee:	4422      	add	r2, r4
 8008bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	e7c7      	b.n	8008b8c <_printf_common+0x58>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4622      	mov	r2, r4
 8008c00:	4649      	mov	r1, r9
 8008c02:	4638      	mov	r0, r7
 8008c04:	47c0      	blx	r8
 8008c06:	3001      	adds	r0, #1
 8008c08:	d0e6      	beq.n	8008bd8 <_printf_common+0xa4>
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	e7d9      	b.n	8008bc2 <_printf_common+0x8e>
	...

08008c10 <_printf_i>:
 8008c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	7e0f      	ldrb	r7, [r1, #24]
 8008c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c18:	2f78      	cmp	r7, #120	; 0x78
 8008c1a:	4691      	mov	r9, r2
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	469a      	mov	sl, r3
 8008c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c26:	d807      	bhi.n	8008c38 <_printf_i+0x28>
 8008c28:	2f62      	cmp	r7, #98	; 0x62
 8008c2a:	d80a      	bhi.n	8008c42 <_printf_i+0x32>
 8008c2c:	2f00      	cmp	r7, #0
 8008c2e:	f000 80d8 	beq.w	8008de2 <_printf_i+0x1d2>
 8008c32:	2f58      	cmp	r7, #88	; 0x58
 8008c34:	f000 80a3 	beq.w	8008d7e <_printf_i+0x16e>
 8008c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c40:	e03a      	b.n	8008cb8 <_printf_i+0xa8>
 8008c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c46:	2b15      	cmp	r3, #21
 8008c48:	d8f6      	bhi.n	8008c38 <_printf_i+0x28>
 8008c4a:	a101      	add	r1, pc, #4	; (adr r1, 8008c50 <_printf_i+0x40>)
 8008c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c50:	08008ca9 	.word	0x08008ca9
 8008c54:	08008cbd 	.word	0x08008cbd
 8008c58:	08008c39 	.word	0x08008c39
 8008c5c:	08008c39 	.word	0x08008c39
 8008c60:	08008c39 	.word	0x08008c39
 8008c64:	08008c39 	.word	0x08008c39
 8008c68:	08008cbd 	.word	0x08008cbd
 8008c6c:	08008c39 	.word	0x08008c39
 8008c70:	08008c39 	.word	0x08008c39
 8008c74:	08008c39 	.word	0x08008c39
 8008c78:	08008c39 	.word	0x08008c39
 8008c7c:	08008dc9 	.word	0x08008dc9
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008dab 	.word	0x08008dab
 8008c88:	08008c39 	.word	0x08008c39
 8008c8c:	08008c39 	.word	0x08008c39
 8008c90:	08008deb 	.word	0x08008deb
 8008c94:	08008c39 	.word	0x08008c39
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008c39 	.word	0x08008c39
 8008ca0:	08008c39 	.word	0x08008c39
 8008ca4:	08008db3 	.word	0x08008db3
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0a3      	b.n	8008e04 <_printf_i+0x1f4>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	6829      	ldr	r1, [r5, #0]
 8008cc0:	0606      	lsls	r6, r0, #24
 8008cc2:	f101 0304 	add.w	r3, r1, #4
 8008cc6:	d50a      	bpl.n	8008cde <_printf_i+0xce>
 8008cc8:	680e      	ldr	r6, [r1, #0]
 8008cca:	602b      	str	r3, [r5, #0]
 8008ccc:	2e00      	cmp	r6, #0
 8008cce:	da03      	bge.n	8008cd8 <_printf_i+0xc8>
 8008cd0:	232d      	movs	r3, #45	; 0x2d
 8008cd2:	4276      	negs	r6, r6
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd8:	485e      	ldr	r0, [pc, #376]	; (8008e54 <_printf_i+0x244>)
 8008cda:	230a      	movs	r3, #10
 8008cdc:	e019      	b.n	8008d12 <_printf_i+0x102>
 8008cde:	680e      	ldr	r6, [r1, #0]
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ce6:	bf18      	it	ne
 8008ce8:	b236      	sxthne	r6, r6
 8008cea:	e7ef      	b.n	8008ccc <_printf_i+0xbc>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	6820      	ldr	r0, [r4, #0]
 8008cf0:	1d19      	adds	r1, r3, #4
 8008cf2:	6029      	str	r1, [r5, #0]
 8008cf4:	0601      	lsls	r1, r0, #24
 8008cf6:	d501      	bpl.n	8008cfc <_printf_i+0xec>
 8008cf8:	681e      	ldr	r6, [r3, #0]
 8008cfa:	e002      	b.n	8008d02 <_printf_i+0xf2>
 8008cfc:	0646      	lsls	r6, r0, #25
 8008cfe:	d5fb      	bpl.n	8008cf8 <_printf_i+0xe8>
 8008d00:	881e      	ldrh	r6, [r3, #0]
 8008d02:	4854      	ldr	r0, [pc, #336]	; (8008e54 <_printf_i+0x244>)
 8008d04:	2f6f      	cmp	r7, #111	; 0x6f
 8008d06:	bf0c      	ite	eq
 8008d08:	2308      	moveq	r3, #8
 8008d0a:	230a      	movne	r3, #10
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d12:	6865      	ldr	r5, [r4, #4]
 8008d14:	60a5      	str	r5, [r4, #8]
 8008d16:	2d00      	cmp	r5, #0
 8008d18:	bfa2      	ittt	ge
 8008d1a:	6821      	ldrge	r1, [r4, #0]
 8008d1c:	f021 0104 	bicge.w	r1, r1, #4
 8008d20:	6021      	strge	r1, [r4, #0]
 8008d22:	b90e      	cbnz	r6, 8008d28 <_printf_i+0x118>
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	d04d      	beq.n	8008dc4 <_printf_i+0x1b4>
 8008d28:	4615      	mov	r5, r2
 8008d2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d2e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d32:	5dc7      	ldrb	r7, [r0, r7]
 8008d34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d38:	4637      	mov	r7, r6
 8008d3a:	42bb      	cmp	r3, r7
 8008d3c:	460e      	mov	r6, r1
 8008d3e:	d9f4      	bls.n	8008d2a <_printf_i+0x11a>
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d10b      	bne.n	8008d5c <_printf_i+0x14c>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	07de      	lsls	r6, r3, #31
 8008d48:	d508      	bpl.n	8008d5c <_printf_i+0x14c>
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	6861      	ldr	r1, [r4, #4]
 8008d4e:	4299      	cmp	r1, r3
 8008d50:	bfde      	ittt	le
 8008d52:	2330      	movle	r3, #48	; 0x30
 8008d54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d5c:	1b52      	subs	r2, r2, r5
 8008d5e:	6122      	str	r2, [r4, #16]
 8008d60:	f8cd a000 	str.w	sl, [sp]
 8008d64:	464b      	mov	r3, r9
 8008d66:	aa03      	add	r2, sp, #12
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f7ff fee2 	bl	8008b34 <_printf_common>
 8008d70:	3001      	adds	r0, #1
 8008d72:	d14c      	bne.n	8008e0e <_printf_i+0x1fe>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	b004      	add	sp, #16
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	4835      	ldr	r0, [pc, #212]	; (8008e54 <_printf_i+0x244>)
 8008d80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d84:	6829      	ldr	r1, [r5, #0]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d8c:	6029      	str	r1, [r5, #0]
 8008d8e:	061d      	lsls	r5, r3, #24
 8008d90:	d514      	bpl.n	8008dbc <_printf_i+0x1ac>
 8008d92:	07df      	lsls	r7, r3, #31
 8008d94:	bf44      	itt	mi
 8008d96:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9a:	6023      	strmi	r3, [r4, #0]
 8008d9c:	b91e      	cbnz	r6, 8008da6 <_printf_i+0x196>
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	f023 0320 	bic.w	r3, r3, #32
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	2310      	movs	r3, #16
 8008da8:	e7b0      	b.n	8008d0c <_printf_i+0xfc>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f043 0320 	orr.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	2378      	movs	r3, #120	; 0x78
 8008db4:	4828      	ldr	r0, [pc, #160]	; (8008e58 <_printf_i+0x248>)
 8008db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dba:	e7e3      	b.n	8008d84 <_printf_i+0x174>
 8008dbc:	0659      	lsls	r1, r3, #25
 8008dbe:	bf48      	it	mi
 8008dc0:	b2b6      	uxthmi	r6, r6
 8008dc2:	e7e6      	b.n	8008d92 <_printf_i+0x182>
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	e7bb      	b.n	8008d40 <_printf_i+0x130>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	6826      	ldr	r6, [r4, #0]
 8008dcc:	6961      	ldr	r1, [r4, #20]
 8008dce:	1d18      	adds	r0, r3, #4
 8008dd0:	6028      	str	r0, [r5, #0]
 8008dd2:	0635      	lsls	r5, r6, #24
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	d501      	bpl.n	8008ddc <_printf_i+0x1cc>
 8008dd8:	6019      	str	r1, [r3, #0]
 8008dda:	e002      	b.n	8008de2 <_printf_i+0x1d2>
 8008ddc:	0670      	lsls	r0, r6, #25
 8008dde:	d5fb      	bpl.n	8008dd8 <_printf_i+0x1c8>
 8008de0:	8019      	strh	r1, [r3, #0]
 8008de2:	2300      	movs	r3, #0
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	4615      	mov	r5, r2
 8008de8:	e7ba      	b.n	8008d60 <_printf_i+0x150>
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	1d1a      	adds	r2, r3, #4
 8008dee:	602a      	str	r2, [r5, #0]
 8008df0:	681d      	ldr	r5, [r3, #0]
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	2100      	movs	r1, #0
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7f7 f9fa 	bl	80001f0 <memchr>
 8008dfc:	b108      	cbz	r0, 8008e02 <_printf_i+0x1f2>
 8008dfe:	1b40      	subs	r0, r0, r5
 8008e00:	6060      	str	r0, [r4, #4]
 8008e02:	6863      	ldr	r3, [r4, #4]
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	2300      	movs	r3, #0
 8008e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0c:	e7a8      	b.n	8008d60 <_printf_i+0x150>
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	462a      	mov	r2, r5
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d0ab      	beq.n	8008d74 <_printf_i+0x164>
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	079b      	lsls	r3, r3, #30
 8008e20:	d413      	bmi.n	8008e4a <_printf_i+0x23a>
 8008e22:	68e0      	ldr	r0, [r4, #12]
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	4298      	cmp	r0, r3
 8008e28:	bfb8      	it	lt
 8008e2a:	4618      	movlt	r0, r3
 8008e2c:	e7a4      	b.n	8008d78 <_printf_i+0x168>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4632      	mov	r2, r6
 8008e32:	4649      	mov	r1, r9
 8008e34:	4640      	mov	r0, r8
 8008e36:	47d0      	blx	sl
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d09b      	beq.n	8008d74 <_printf_i+0x164>
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	68e3      	ldr	r3, [r4, #12]
 8008e40:	9903      	ldr	r1, [sp, #12]
 8008e42:	1a5b      	subs	r3, r3, r1
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	dcf2      	bgt.n	8008e2e <_printf_i+0x21e>
 8008e48:	e7eb      	b.n	8008e22 <_printf_i+0x212>
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	f104 0619 	add.w	r6, r4, #25
 8008e50:	e7f5      	b.n	8008e3e <_printf_i+0x22e>
 8008e52:	bf00      	nop
 8008e54:	0800b576 	.word	0x0800b576
 8008e58:	0800b587 	.word	0x0800b587

08008e5c <siprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b500      	push	{lr}
 8008e60:	b09c      	sub	sp, #112	; 0x70
 8008e62:	ab1d      	add	r3, sp, #116	; 0x74
 8008e64:	9002      	str	r0, [sp, #8]
 8008e66:	9006      	str	r0, [sp, #24]
 8008e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e6c:	4809      	ldr	r0, [pc, #36]	; (8008e94 <siprintf+0x38>)
 8008e6e:	9107      	str	r1, [sp, #28]
 8008e70:	9104      	str	r1, [sp, #16]
 8008e72:	4909      	ldr	r1, [pc, #36]	; (8008e98 <siprintf+0x3c>)
 8008e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e78:	9105      	str	r1, [sp, #20]
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	a902      	add	r1, sp, #8
 8008e80:	f001 fbf6 	bl	800a670 <_svfiprintf_r>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	b01c      	add	sp, #112	; 0x70
 8008e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e90:	b003      	add	sp, #12
 8008e92:	4770      	bx	lr
 8008e94:	20000014 	.word	0x20000014
 8008e98:	ffff0208 	.word	0xffff0208

08008e9c <_strtol_l.constprop.0>:
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea2:	d001      	beq.n	8008ea8 <_strtol_l.constprop.0+0xc>
 8008ea4:	2b24      	cmp	r3, #36	; 0x24
 8008ea6:	d906      	bls.n	8008eb6 <_strtol_l.constprop.0+0x1a>
 8008ea8:	f7ff fb2e 	bl	8008508 <__errno>
 8008eac:	2316      	movs	r3, #22
 8008eae:	6003      	str	r3, [r0, #0]
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f9c <_strtol_l.constprop.0+0x100>
 8008eba:	460d      	mov	r5, r1
 8008ebc:	462e      	mov	r6, r5
 8008ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ec2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008ec6:	f017 0708 	ands.w	r7, r7, #8
 8008eca:	d1f7      	bne.n	8008ebc <_strtol_l.constprop.0+0x20>
 8008ecc:	2c2d      	cmp	r4, #45	; 0x2d
 8008ece:	d132      	bne.n	8008f36 <_strtol_l.constprop.0+0x9a>
 8008ed0:	782c      	ldrb	r4, [r5, #0]
 8008ed2:	2701      	movs	r7, #1
 8008ed4:	1cb5      	adds	r5, r6, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d05b      	beq.n	8008f92 <_strtol_l.constprop.0+0xf6>
 8008eda:	2b10      	cmp	r3, #16
 8008edc:	d109      	bne.n	8008ef2 <_strtol_l.constprop.0+0x56>
 8008ede:	2c30      	cmp	r4, #48	; 0x30
 8008ee0:	d107      	bne.n	8008ef2 <_strtol_l.constprop.0+0x56>
 8008ee2:	782c      	ldrb	r4, [r5, #0]
 8008ee4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ee8:	2c58      	cmp	r4, #88	; 0x58
 8008eea:	d14d      	bne.n	8008f88 <_strtol_l.constprop.0+0xec>
 8008eec:	786c      	ldrb	r4, [r5, #1]
 8008eee:	2310      	movs	r3, #16
 8008ef0:	3502      	adds	r5, #2
 8008ef2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ef6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008efa:	f04f 0c00 	mov.w	ip, #0
 8008efe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f02:	4666      	mov	r6, ip
 8008f04:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008f0c:	f1be 0f09 	cmp.w	lr, #9
 8008f10:	d816      	bhi.n	8008f40 <_strtol_l.constprop.0+0xa4>
 8008f12:	4674      	mov	r4, lr
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	dd24      	ble.n	8008f62 <_strtol_l.constprop.0+0xc6>
 8008f18:	f1bc 0f00 	cmp.w	ip, #0
 8008f1c:	db1e      	blt.n	8008f5c <_strtol_l.constprop.0+0xc0>
 8008f1e:	45b1      	cmp	r9, r6
 8008f20:	d31c      	bcc.n	8008f5c <_strtol_l.constprop.0+0xc0>
 8008f22:	d101      	bne.n	8008f28 <_strtol_l.constprop.0+0x8c>
 8008f24:	45a2      	cmp	sl, r4
 8008f26:	db19      	blt.n	8008f5c <_strtol_l.constprop.0+0xc0>
 8008f28:	fb06 4603 	mla	r6, r6, r3, r4
 8008f2c:	f04f 0c01 	mov.w	ip, #1
 8008f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f34:	e7e8      	b.n	8008f08 <_strtol_l.constprop.0+0x6c>
 8008f36:	2c2b      	cmp	r4, #43	; 0x2b
 8008f38:	bf04      	itt	eq
 8008f3a:	782c      	ldrbeq	r4, [r5, #0]
 8008f3c:	1cb5      	addeq	r5, r6, #2
 8008f3e:	e7ca      	b.n	8008ed6 <_strtol_l.constprop.0+0x3a>
 8008f40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008f44:	f1be 0f19 	cmp.w	lr, #25
 8008f48:	d801      	bhi.n	8008f4e <_strtol_l.constprop.0+0xb2>
 8008f4a:	3c37      	subs	r4, #55	; 0x37
 8008f4c:	e7e2      	b.n	8008f14 <_strtol_l.constprop.0+0x78>
 8008f4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f52:	f1be 0f19 	cmp.w	lr, #25
 8008f56:	d804      	bhi.n	8008f62 <_strtol_l.constprop.0+0xc6>
 8008f58:	3c57      	subs	r4, #87	; 0x57
 8008f5a:	e7db      	b.n	8008f14 <_strtol_l.constprop.0+0x78>
 8008f5c:	f04f 3cff 	mov.w	ip, #4294967295
 8008f60:	e7e6      	b.n	8008f30 <_strtol_l.constprop.0+0x94>
 8008f62:	f1bc 0f00 	cmp.w	ip, #0
 8008f66:	da05      	bge.n	8008f74 <_strtol_l.constprop.0+0xd8>
 8008f68:	2322      	movs	r3, #34	; 0x22
 8008f6a:	6003      	str	r3, [r0, #0]
 8008f6c:	4646      	mov	r6, r8
 8008f6e:	b942      	cbnz	r2, 8008f82 <_strtol_l.constprop.0+0xe6>
 8008f70:	4630      	mov	r0, r6
 8008f72:	e79e      	b.n	8008eb2 <_strtol_l.constprop.0+0x16>
 8008f74:	b107      	cbz	r7, 8008f78 <_strtol_l.constprop.0+0xdc>
 8008f76:	4276      	negs	r6, r6
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	d0f9      	beq.n	8008f70 <_strtol_l.constprop.0+0xd4>
 8008f7c:	f1bc 0f00 	cmp.w	ip, #0
 8008f80:	d000      	beq.n	8008f84 <_strtol_l.constprop.0+0xe8>
 8008f82:	1e69      	subs	r1, r5, #1
 8008f84:	6011      	str	r1, [r2, #0]
 8008f86:	e7f3      	b.n	8008f70 <_strtol_l.constprop.0+0xd4>
 8008f88:	2430      	movs	r4, #48	; 0x30
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1b1      	bne.n	8008ef2 <_strtol_l.constprop.0+0x56>
 8008f8e:	2308      	movs	r3, #8
 8008f90:	e7af      	b.n	8008ef2 <_strtol_l.constprop.0+0x56>
 8008f92:	2c30      	cmp	r4, #48	; 0x30
 8008f94:	d0a5      	beq.n	8008ee2 <_strtol_l.constprop.0+0x46>
 8008f96:	230a      	movs	r3, #10
 8008f98:	e7ab      	b.n	8008ef2 <_strtol_l.constprop.0+0x56>
 8008f9a:	bf00      	nop
 8008f9c:	0800b599 	.word	0x0800b599

08008fa0 <strtol>:
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4802      	ldr	r0, [pc, #8]	; (8008fb0 <strtol+0x10>)
 8008fa8:	6800      	ldr	r0, [r0, #0]
 8008faa:	f7ff bf77 	b.w	8008e9c <_strtol_l.constprop.0>
 8008fae:	bf00      	nop
 8008fb0:	20000014 	.word	0x20000014

08008fb4 <quorem>:
 8008fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	6903      	ldr	r3, [r0, #16]
 8008fba:	690c      	ldr	r4, [r1, #16]
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	f2c0 8081 	blt.w	80090c6 <quorem+0x112>
 8008fc4:	3c01      	subs	r4, #1
 8008fc6:	f101 0814 	add.w	r8, r1, #20
 8008fca:	f100 0514 	add.w	r5, r0, #20
 8008fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fe8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fec:	d331      	bcc.n	8009052 <quorem+0x9e>
 8008fee:	f04f 0e00 	mov.w	lr, #0
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	46ac      	mov	ip, r5
 8008ff6:	46f2      	mov	sl, lr
 8008ff8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ffc:	b293      	uxth	r3, r2
 8008ffe:	fb06 e303 	mla	r3, r6, r3, lr
 8009002:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009006:	b29b      	uxth	r3, r3
 8009008:	ebaa 0303 	sub.w	r3, sl, r3
 800900c:	f8dc a000 	ldr.w	sl, [ip]
 8009010:	0c12      	lsrs	r2, r2, #16
 8009012:	fa13 f38a 	uxtah	r3, r3, sl
 8009016:	fb06 e202 	mla	r2, r6, r2, lr
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009022:	b292      	uxth	r2, r2
 8009024:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800902c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009030:	4581      	cmp	r9, r0
 8009032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009036:	f84c 3b04 	str.w	r3, [ip], #4
 800903a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800903e:	d2db      	bcs.n	8008ff8 <quorem+0x44>
 8009040:	f855 300b 	ldr.w	r3, [r5, fp]
 8009044:	b92b      	cbnz	r3, 8009052 <quorem+0x9e>
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	3b04      	subs	r3, #4
 800904a:	429d      	cmp	r5, r3
 800904c:	461a      	mov	r2, r3
 800904e:	d32e      	bcc.n	80090ae <quorem+0xfa>
 8009050:	613c      	str	r4, [r7, #16]
 8009052:	4638      	mov	r0, r7
 8009054:	f001 f8b8 	bl	800a1c8 <__mcmp>
 8009058:	2800      	cmp	r0, #0
 800905a:	db24      	blt.n	80090a6 <quorem+0xf2>
 800905c:	3601      	adds	r6, #1
 800905e:	4628      	mov	r0, r5
 8009060:	f04f 0c00 	mov.w	ip, #0
 8009064:	f858 2b04 	ldr.w	r2, [r8], #4
 8009068:	f8d0 e000 	ldr.w	lr, [r0]
 800906c:	b293      	uxth	r3, r2
 800906e:	ebac 0303 	sub.w	r3, ip, r3
 8009072:	0c12      	lsrs	r2, r2, #16
 8009074:	fa13 f38e 	uxtah	r3, r3, lr
 8009078:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800907c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009080:	b29b      	uxth	r3, r3
 8009082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009086:	45c1      	cmp	r9, r8
 8009088:	f840 3b04 	str.w	r3, [r0], #4
 800908c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009090:	d2e8      	bcs.n	8009064 <quorem+0xb0>
 8009092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800909a:	b922      	cbnz	r2, 80090a6 <quorem+0xf2>
 800909c:	3b04      	subs	r3, #4
 800909e:	429d      	cmp	r5, r3
 80090a0:	461a      	mov	r2, r3
 80090a2:	d30a      	bcc.n	80090ba <quorem+0x106>
 80090a4:	613c      	str	r4, [r7, #16]
 80090a6:	4630      	mov	r0, r6
 80090a8:	b003      	add	sp, #12
 80090aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ae:	6812      	ldr	r2, [r2, #0]
 80090b0:	3b04      	subs	r3, #4
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	d1cc      	bne.n	8009050 <quorem+0x9c>
 80090b6:	3c01      	subs	r4, #1
 80090b8:	e7c7      	b.n	800904a <quorem+0x96>
 80090ba:	6812      	ldr	r2, [r2, #0]
 80090bc:	3b04      	subs	r3, #4
 80090be:	2a00      	cmp	r2, #0
 80090c0:	d1f0      	bne.n	80090a4 <quorem+0xf0>
 80090c2:	3c01      	subs	r4, #1
 80090c4:	e7eb      	b.n	800909e <quorem+0xea>
 80090c6:	2000      	movs	r0, #0
 80090c8:	e7ee      	b.n	80090a8 <quorem+0xf4>
 80090ca:	0000      	movs	r0, r0
 80090cc:	0000      	movs	r0, r0
	...

080090d0 <_dtoa_r>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	ed2d 8b04 	vpush	{d8-d9}
 80090d8:	ec57 6b10 	vmov	r6, r7, d0
 80090dc:	b093      	sub	sp, #76	; 0x4c
 80090de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090e4:	9106      	str	r1, [sp, #24]
 80090e6:	ee10 aa10 	vmov	sl, s0
 80090ea:	4604      	mov	r4, r0
 80090ec:	9209      	str	r2, [sp, #36]	; 0x24
 80090ee:	930c      	str	r3, [sp, #48]	; 0x30
 80090f0:	46bb      	mov	fp, r7
 80090f2:	b975      	cbnz	r5, 8009112 <_dtoa_r+0x42>
 80090f4:	2010      	movs	r0, #16
 80090f6:	f000 fddd 	bl	8009cb4 <malloc>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6260      	str	r0, [r4, #36]	; 0x24
 80090fe:	b920      	cbnz	r0, 800910a <_dtoa_r+0x3a>
 8009100:	4ba7      	ldr	r3, [pc, #668]	; (80093a0 <_dtoa_r+0x2d0>)
 8009102:	21ea      	movs	r1, #234	; 0xea
 8009104:	48a7      	ldr	r0, [pc, #668]	; (80093a4 <_dtoa_r+0x2d4>)
 8009106:	f001 fbc3 	bl	800a890 <__assert_func>
 800910a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800910e:	6005      	str	r5, [r0, #0]
 8009110:	60c5      	str	r5, [r0, #12]
 8009112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009114:	6819      	ldr	r1, [r3, #0]
 8009116:	b151      	cbz	r1, 800912e <_dtoa_r+0x5e>
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	604a      	str	r2, [r1, #4]
 800911c:	2301      	movs	r3, #1
 800911e:	4093      	lsls	r3, r2
 8009120:	608b      	str	r3, [r1, #8]
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fe0e 	bl	8009d44 <_Bfree>
 8009128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	1e3b      	subs	r3, r7, #0
 8009130:	bfaa      	itet	ge
 8009132:	2300      	movge	r3, #0
 8009134:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009138:	f8c8 3000 	strge.w	r3, [r8]
 800913c:	4b9a      	ldr	r3, [pc, #616]	; (80093a8 <_dtoa_r+0x2d8>)
 800913e:	bfbc      	itt	lt
 8009140:	2201      	movlt	r2, #1
 8009142:	f8c8 2000 	strlt.w	r2, [r8]
 8009146:	ea33 030b 	bics.w	r3, r3, fp
 800914a:	d11b      	bne.n	8009184 <_dtoa_r+0xb4>
 800914c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800914e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009158:	4333      	orrs	r3, r6
 800915a:	f000 8592 	beq.w	8009c82 <_dtoa_r+0xbb2>
 800915e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009160:	b963      	cbnz	r3, 800917c <_dtoa_r+0xac>
 8009162:	4b92      	ldr	r3, [pc, #584]	; (80093ac <_dtoa_r+0x2dc>)
 8009164:	e022      	b.n	80091ac <_dtoa_r+0xdc>
 8009166:	4b92      	ldr	r3, [pc, #584]	; (80093b0 <_dtoa_r+0x2e0>)
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	3308      	adds	r3, #8
 800916c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	9801      	ldr	r0, [sp, #4]
 8009172:	b013      	add	sp, #76	; 0x4c
 8009174:	ecbd 8b04 	vpop	{d8-d9}
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	4b8b      	ldr	r3, [pc, #556]	; (80093ac <_dtoa_r+0x2dc>)
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	3303      	adds	r3, #3
 8009182:	e7f3      	b.n	800916c <_dtoa_r+0x9c>
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	4650      	mov	r0, sl
 800918a:	4659      	mov	r1, fp
 800918c:	f7f7 fca4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009190:	ec4b ab19 	vmov	d9, sl, fp
 8009194:	4680      	mov	r8, r0
 8009196:	b158      	cbz	r0, 80091b0 <_dtoa_r+0xe0>
 8009198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800919a:	2301      	movs	r3, #1
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 856b 	beq.w	8009c7c <_dtoa_r+0xbac>
 80091a6:	4883      	ldr	r0, [pc, #524]	; (80093b4 <_dtoa_r+0x2e4>)
 80091a8:	6018      	str	r0, [r3, #0]
 80091aa:	1e43      	subs	r3, r0, #1
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	e7df      	b.n	8009170 <_dtoa_r+0xa0>
 80091b0:	ec4b ab10 	vmov	d0, sl, fp
 80091b4:	aa10      	add	r2, sp, #64	; 0x40
 80091b6:	a911      	add	r1, sp, #68	; 0x44
 80091b8:	4620      	mov	r0, r4
 80091ba:	f001 f8ab 	bl	800a314 <__d2b>
 80091be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091c2:	ee08 0a10 	vmov	s16, r0
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	f000 8084 	beq.w	80092d4 <_dtoa_r+0x204>
 80091cc:	ee19 3a90 	vmov	r3, s19
 80091d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091d8:	4656      	mov	r6, sl
 80091da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091e6:	4b74      	ldr	r3, [pc, #464]	; (80093b8 <_dtoa_r+0x2e8>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	4630      	mov	r0, r6
 80091ec:	4639      	mov	r1, r7
 80091ee:	f7f7 f853 	bl	8000298 <__aeabi_dsub>
 80091f2:	a365      	add	r3, pc, #404	; (adr r3, 8009388 <_dtoa_r+0x2b8>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 fa06 	bl	8000608 <__aeabi_dmul>
 80091fc:	a364      	add	r3, pc, #400	; (adr r3, 8009390 <_dtoa_r+0x2c0>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f7 f84b 	bl	800029c <__adddf3>
 8009206:	4606      	mov	r6, r0
 8009208:	4628      	mov	r0, r5
 800920a:	460f      	mov	r7, r1
 800920c:	f7f7 f992 	bl	8000534 <__aeabi_i2d>
 8009210:	a361      	add	r3, pc, #388	; (adr r3, 8009398 <_dtoa_r+0x2c8>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f9f7 	bl	8000608 <__aeabi_dmul>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4630      	mov	r0, r6
 8009220:	4639      	mov	r1, r7
 8009222:	f7f7 f83b 	bl	800029c <__adddf3>
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	f7f7 fc9d 	bl	8000b68 <__aeabi_d2iz>
 800922e:	2200      	movs	r2, #0
 8009230:	9000      	str	r0, [sp, #0]
 8009232:	2300      	movs	r3, #0
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc58 	bl	8000aec <__aeabi_dcmplt>
 800923c:	b150      	cbz	r0, 8009254 <_dtoa_r+0x184>
 800923e:	9800      	ldr	r0, [sp, #0]
 8009240:	f7f7 f978 	bl	8000534 <__aeabi_i2d>
 8009244:	4632      	mov	r2, r6
 8009246:	463b      	mov	r3, r7
 8009248:	f7f7 fc46 	bl	8000ad8 <__aeabi_dcmpeq>
 800924c:	b910      	cbnz	r0, 8009254 <_dtoa_r+0x184>
 800924e:	9b00      	ldr	r3, [sp, #0]
 8009250:	3b01      	subs	r3, #1
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	2b16      	cmp	r3, #22
 8009258:	d85a      	bhi.n	8009310 <_dtoa_r+0x240>
 800925a:	9a00      	ldr	r2, [sp, #0]
 800925c:	4b57      	ldr	r3, [pc, #348]	; (80093bc <_dtoa_r+0x2ec>)
 800925e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	ec51 0b19 	vmov	r0, r1, d9
 800926a:	f7f7 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800926e:	2800      	cmp	r0, #0
 8009270:	d050      	beq.n	8009314 <_dtoa_r+0x244>
 8009272:	9b00      	ldr	r3, [sp, #0]
 8009274:	3b01      	subs	r3, #1
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	2300      	movs	r3, #0
 800927a:	930b      	str	r3, [sp, #44]	; 0x2c
 800927c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800927e:	1b5d      	subs	r5, r3, r5
 8009280:	1e6b      	subs	r3, r5, #1
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	bf45      	ittet	mi
 8009286:	f1c5 0301 	rsbmi	r3, r5, #1
 800928a:	9304      	strmi	r3, [sp, #16]
 800928c:	2300      	movpl	r3, #0
 800928e:	2300      	movmi	r3, #0
 8009290:	bf4c      	ite	mi
 8009292:	9305      	strmi	r3, [sp, #20]
 8009294:	9304      	strpl	r3, [sp, #16]
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	db3d      	blt.n	8009318 <_dtoa_r+0x248>
 800929c:	9b05      	ldr	r3, [sp, #20]
 800929e:	9a00      	ldr	r2, [sp, #0]
 80092a0:	920a      	str	r2, [sp, #40]	; 0x28
 80092a2:	4413      	add	r3, r2
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9307      	str	r3, [sp, #28]
 80092aa:	9b06      	ldr	r3, [sp, #24]
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	f200 8089 	bhi.w	80093c4 <_dtoa_r+0x2f4>
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	bfc4      	itt	gt
 80092b6:	3b04      	subgt	r3, #4
 80092b8:	9306      	strgt	r3, [sp, #24]
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	f1a3 0302 	sub.w	r3, r3, #2
 80092c0:	bfcc      	ite	gt
 80092c2:	2500      	movgt	r5, #0
 80092c4:	2501      	movle	r5, #1
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	f200 8087 	bhi.w	80093da <_dtoa_r+0x30a>
 80092cc:	e8df f003 	tbb	[pc, r3]
 80092d0:	59383a2d 	.word	0x59383a2d
 80092d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092d8:	441d      	add	r5, r3
 80092da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092de:	2b20      	cmp	r3, #32
 80092e0:	bfc1      	itttt	gt
 80092e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80092ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092f2:	bfda      	itte	le
 80092f4:	f1c3 0320 	rsble	r3, r3, #32
 80092f8:	fa06 f003 	lslle.w	r0, r6, r3
 80092fc:	4318      	orrgt	r0, r3
 80092fe:	f7f7 f909 	bl	8000514 <__aeabi_ui2d>
 8009302:	2301      	movs	r3, #1
 8009304:	4606      	mov	r6, r0
 8009306:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800930a:	3d01      	subs	r5, #1
 800930c:	930e      	str	r3, [sp, #56]	; 0x38
 800930e:	e76a      	b.n	80091e6 <_dtoa_r+0x116>
 8009310:	2301      	movs	r3, #1
 8009312:	e7b2      	b.n	800927a <_dtoa_r+0x1aa>
 8009314:	900b      	str	r0, [sp, #44]	; 0x2c
 8009316:	e7b1      	b.n	800927c <_dtoa_r+0x1ac>
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	9a00      	ldr	r2, [sp, #0]
 800931c:	1a9b      	subs	r3, r3, r2
 800931e:	9304      	str	r3, [sp, #16]
 8009320:	4253      	negs	r3, r2
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	2300      	movs	r3, #0
 8009326:	930a      	str	r3, [sp, #40]	; 0x28
 8009328:	e7bf      	b.n	80092aa <_dtoa_r+0x1da>
 800932a:	2300      	movs	r3, #0
 800932c:	9308      	str	r3, [sp, #32]
 800932e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	dc55      	bgt.n	80093e0 <_dtoa_r+0x310>
 8009334:	2301      	movs	r3, #1
 8009336:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800933a:	461a      	mov	r2, r3
 800933c:	9209      	str	r2, [sp, #36]	; 0x24
 800933e:	e00c      	b.n	800935a <_dtoa_r+0x28a>
 8009340:	2301      	movs	r3, #1
 8009342:	e7f3      	b.n	800932c <_dtoa_r+0x25c>
 8009344:	2300      	movs	r3, #0
 8009346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009348:	9308      	str	r3, [sp, #32]
 800934a:	9b00      	ldr	r3, [sp, #0]
 800934c:	4413      	add	r3, r2
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	3301      	adds	r3, #1
 8009352:	2b01      	cmp	r3, #1
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	bfb8      	it	lt
 8009358:	2301      	movlt	r3, #1
 800935a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800935c:	2200      	movs	r2, #0
 800935e:	6042      	str	r2, [r0, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	f102 0614 	add.w	r6, r2, #20
 8009366:	429e      	cmp	r6, r3
 8009368:	6841      	ldr	r1, [r0, #4]
 800936a:	d93d      	bls.n	80093e8 <_dtoa_r+0x318>
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fca9 	bl	8009cc4 <_Balloc>
 8009372:	9001      	str	r0, [sp, #4]
 8009374:	2800      	cmp	r0, #0
 8009376:	d13b      	bne.n	80093f0 <_dtoa_r+0x320>
 8009378:	4b11      	ldr	r3, [pc, #68]	; (80093c0 <_dtoa_r+0x2f0>)
 800937a:	4602      	mov	r2, r0
 800937c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009380:	e6c0      	b.n	8009104 <_dtoa_r+0x34>
 8009382:	2301      	movs	r3, #1
 8009384:	e7df      	b.n	8009346 <_dtoa_r+0x276>
 8009386:	bf00      	nop
 8009388:	636f4361 	.word	0x636f4361
 800938c:	3fd287a7 	.word	0x3fd287a7
 8009390:	8b60c8b3 	.word	0x8b60c8b3
 8009394:	3fc68a28 	.word	0x3fc68a28
 8009398:	509f79fb 	.word	0x509f79fb
 800939c:	3fd34413 	.word	0x3fd34413
 80093a0:	0800b6a6 	.word	0x0800b6a6
 80093a4:	0800b6bd 	.word	0x0800b6bd
 80093a8:	7ff00000 	.word	0x7ff00000
 80093ac:	0800b6a2 	.word	0x0800b6a2
 80093b0:	0800b699 	.word	0x0800b699
 80093b4:	0800b575 	.word	0x0800b575
 80093b8:	3ff80000 	.word	0x3ff80000
 80093bc:	0800b7b0 	.word	0x0800b7b0
 80093c0:	0800b718 	.word	0x0800b718
 80093c4:	2501      	movs	r5, #1
 80093c6:	2300      	movs	r3, #0
 80093c8:	9306      	str	r3, [sp, #24]
 80093ca:	9508      	str	r5, [sp, #32]
 80093cc:	f04f 33ff 	mov.w	r3, #4294967295
 80093d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093d4:	2200      	movs	r2, #0
 80093d6:	2312      	movs	r3, #18
 80093d8:	e7b0      	b.n	800933c <_dtoa_r+0x26c>
 80093da:	2301      	movs	r3, #1
 80093dc:	9308      	str	r3, [sp, #32]
 80093de:	e7f5      	b.n	80093cc <_dtoa_r+0x2fc>
 80093e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093e6:	e7b8      	b.n	800935a <_dtoa_r+0x28a>
 80093e8:	3101      	adds	r1, #1
 80093ea:	6041      	str	r1, [r0, #4]
 80093ec:	0052      	lsls	r2, r2, #1
 80093ee:	e7b8      	b.n	8009362 <_dtoa_r+0x292>
 80093f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f2:	9a01      	ldr	r2, [sp, #4]
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	2b0e      	cmp	r3, #14
 80093fa:	f200 809d 	bhi.w	8009538 <_dtoa_r+0x468>
 80093fe:	2d00      	cmp	r5, #0
 8009400:	f000 809a 	beq.w	8009538 <_dtoa_r+0x468>
 8009404:	9b00      	ldr	r3, [sp, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dd32      	ble.n	8009470 <_dtoa_r+0x3a0>
 800940a:	4ab7      	ldr	r2, [pc, #732]	; (80096e8 <_dtoa_r+0x618>)
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009414:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009418:	9b00      	ldr	r3, [sp, #0]
 800941a:	05d8      	lsls	r0, r3, #23
 800941c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009420:	d516      	bpl.n	8009450 <_dtoa_r+0x380>
 8009422:	4bb2      	ldr	r3, [pc, #712]	; (80096ec <_dtoa_r+0x61c>)
 8009424:	ec51 0b19 	vmov	r0, r1, d9
 8009428:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800942c:	f7f7 fa16 	bl	800085c <__aeabi_ddiv>
 8009430:	f007 070f 	and.w	r7, r7, #15
 8009434:	4682      	mov	sl, r0
 8009436:	468b      	mov	fp, r1
 8009438:	2503      	movs	r5, #3
 800943a:	4eac      	ldr	r6, [pc, #688]	; (80096ec <_dtoa_r+0x61c>)
 800943c:	b957      	cbnz	r7, 8009454 <_dtoa_r+0x384>
 800943e:	4642      	mov	r2, r8
 8009440:	464b      	mov	r3, r9
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f7 fa09 	bl	800085c <__aeabi_ddiv>
 800944a:	4682      	mov	sl, r0
 800944c:	468b      	mov	fp, r1
 800944e:	e028      	b.n	80094a2 <_dtoa_r+0x3d2>
 8009450:	2502      	movs	r5, #2
 8009452:	e7f2      	b.n	800943a <_dtoa_r+0x36a>
 8009454:	07f9      	lsls	r1, r7, #31
 8009456:	d508      	bpl.n	800946a <_dtoa_r+0x39a>
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009460:	f7f7 f8d2 	bl	8000608 <__aeabi_dmul>
 8009464:	3501      	adds	r5, #1
 8009466:	4680      	mov	r8, r0
 8009468:	4689      	mov	r9, r1
 800946a:	107f      	asrs	r7, r7, #1
 800946c:	3608      	adds	r6, #8
 800946e:	e7e5      	b.n	800943c <_dtoa_r+0x36c>
 8009470:	f000 809b 	beq.w	80095aa <_dtoa_r+0x4da>
 8009474:	9b00      	ldr	r3, [sp, #0]
 8009476:	4f9d      	ldr	r7, [pc, #628]	; (80096ec <_dtoa_r+0x61c>)
 8009478:	425e      	negs	r6, r3
 800947a:	4b9b      	ldr	r3, [pc, #620]	; (80096e8 <_dtoa_r+0x618>)
 800947c:	f006 020f 	and.w	r2, r6, #15
 8009480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	ec51 0b19 	vmov	r0, r1, d9
 800948c:	f7f7 f8bc 	bl	8000608 <__aeabi_dmul>
 8009490:	1136      	asrs	r6, r6, #4
 8009492:	4682      	mov	sl, r0
 8009494:	468b      	mov	fp, r1
 8009496:	2300      	movs	r3, #0
 8009498:	2502      	movs	r5, #2
 800949a:	2e00      	cmp	r6, #0
 800949c:	d17a      	bne.n	8009594 <_dtoa_r+0x4c4>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1d3      	bne.n	800944a <_dtoa_r+0x37a>
 80094a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 8082 	beq.w	80095ae <_dtoa_r+0x4de>
 80094aa:	4b91      	ldr	r3, [pc, #580]	; (80096f0 <_dtoa_r+0x620>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	f7f7 fb1b 	bl	8000aec <__aeabi_dcmplt>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d079      	beq.n	80095ae <_dtoa_r+0x4de>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d076      	beq.n	80095ae <_dtoa_r+0x4de>
 80094c0:	9b02      	ldr	r3, [sp, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dd36      	ble.n	8009534 <_dtoa_r+0x464>
 80094c6:	9b00      	ldr	r3, [sp, #0]
 80094c8:	4650      	mov	r0, sl
 80094ca:	4659      	mov	r1, fp
 80094cc:	1e5f      	subs	r7, r3, #1
 80094ce:	2200      	movs	r2, #0
 80094d0:	4b88      	ldr	r3, [pc, #544]	; (80096f4 <_dtoa_r+0x624>)
 80094d2:	f7f7 f899 	bl	8000608 <__aeabi_dmul>
 80094d6:	9e02      	ldr	r6, [sp, #8]
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	3501      	adds	r5, #1
 80094de:	4628      	mov	r0, r5
 80094e0:	f7f7 f828 	bl	8000534 <__aeabi_i2d>
 80094e4:	4652      	mov	r2, sl
 80094e6:	465b      	mov	r3, fp
 80094e8:	f7f7 f88e 	bl	8000608 <__aeabi_dmul>
 80094ec:	4b82      	ldr	r3, [pc, #520]	; (80096f8 <_dtoa_r+0x628>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	f7f6 fed4 	bl	800029c <__adddf3>
 80094f4:	46d0      	mov	r8, sl
 80094f6:	46d9      	mov	r9, fp
 80094f8:	4682      	mov	sl, r0
 80094fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80094fe:	2e00      	cmp	r6, #0
 8009500:	d158      	bne.n	80095b4 <_dtoa_r+0x4e4>
 8009502:	4b7e      	ldr	r3, [pc, #504]	; (80096fc <_dtoa_r+0x62c>)
 8009504:	2200      	movs	r2, #0
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 fec5 	bl	8000298 <__aeabi_dsub>
 800950e:	4652      	mov	r2, sl
 8009510:	465b      	mov	r3, fp
 8009512:	4680      	mov	r8, r0
 8009514:	4689      	mov	r9, r1
 8009516:	f7f7 fb07 	bl	8000b28 <__aeabi_dcmpgt>
 800951a:	2800      	cmp	r0, #0
 800951c:	f040 8295 	bne.w	8009a4a <_dtoa_r+0x97a>
 8009520:	4652      	mov	r2, sl
 8009522:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f7 fadf 	bl	8000aec <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	f040 8289 	bne.w	8009a46 <_dtoa_r+0x976>
 8009534:	ec5b ab19 	vmov	sl, fp, d9
 8009538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800953a:	2b00      	cmp	r3, #0
 800953c:	f2c0 8148 	blt.w	80097d0 <_dtoa_r+0x700>
 8009540:	9a00      	ldr	r2, [sp, #0]
 8009542:	2a0e      	cmp	r2, #14
 8009544:	f300 8144 	bgt.w	80097d0 <_dtoa_r+0x700>
 8009548:	4b67      	ldr	r3, [pc, #412]	; (80096e8 <_dtoa_r+0x618>)
 800954a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800954e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009554:	2b00      	cmp	r3, #0
 8009556:	f280 80d5 	bge.w	8009704 <_dtoa_r+0x634>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f300 80d1 	bgt.w	8009704 <_dtoa_r+0x634>
 8009562:	f040 826f 	bne.w	8009a44 <_dtoa_r+0x974>
 8009566:	4b65      	ldr	r3, [pc, #404]	; (80096fc <_dtoa_r+0x62c>)
 8009568:	2200      	movs	r2, #0
 800956a:	4640      	mov	r0, r8
 800956c:	4649      	mov	r1, r9
 800956e:	f7f7 f84b 	bl	8000608 <__aeabi_dmul>
 8009572:	4652      	mov	r2, sl
 8009574:	465b      	mov	r3, fp
 8009576:	f7f7 facd 	bl	8000b14 <__aeabi_dcmpge>
 800957a:	9e03      	ldr	r6, [sp, #12]
 800957c:	4637      	mov	r7, r6
 800957e:	2800      	cmp	r0, #0
 8009580:	f040 8245 	bne.w	8009a0e <_dtoa_r+0x93e>
 8009584:	9d01      	ldr	r5, [sp, #4]
 8009586:	2331      	movs	r3, #49	; 0x31
 8009588:	f805 3b01 	strb.w	r3, [r5], #1
 800958c:	9b00      	ldr	r3, [sp, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	e240      	b.n	8009a16 <_dtoa_r+0x946>
 8009594:	07f2      	lsls	r2, r6, #31
 8009596:	d505      	bpl.n	80095a4 <_dtoa_r+0x4d4>
 8009598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959c:	f7f7 f834 	bl	8000608 <__aeabi_dmul>
 80095a0:	3501      	adds	r5, #1
 80095a2:	2301      	movs	r3, #1
 80095a4:	1076      	asrs	r6, r6, #1
 80095a6:	3708      	adds	r7, #8
 80095a8:	e777      	b.n	800949a <_dtoa_r+0x3ca>
 80095aa:	2502      	movs	r5, #2
 80095ac:	e779      	b.n	80094a2 <_dtoa_r+0x3d2>
 80095ae:	9f00      	ldr	r7, [sp, #0]
 80095b0:	9e03      	ldr	r6, [sp, #12]
 80095b2:	e794      	b.n	80094de <_dtoa_r+0x40e>
 80095b4:	9901      	ldr	r1, [sp, #4]
 80095b6:	4b4c      	ldr	r3, [pc, #304]	; (80096e8 <_dtoa_r+0x618>)
 80095b8:	4431      	add	r1, r6
 80095ba:	910d      	str	r1, [sp, #52]	; 0x34
 80095bc:	9908      	ldr	r1, [sp, #32]
 80095be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095c6:	2900      	cmp	r1, #0
 80095c8:	d043      	beq.n	8009652 <_dtoa_r+0x582>
 80095ca:	494d      	ldr	r1, [pc, #308]	; (8009700 <_dtoa_r+0x630>)
 80095cc:	2000      	movs	r0, #0
 80095ce:	f7f7 f945 	bl	800085c <__aeabi_ddiv>
 80095d2:	4652      	mov	r2, sl
 80095d4:	465b      	mov	r3, fp
 80095d6:	f7f6 fe5f 	bl	8000298 <__aeabi_dsub>
 80095da:	9d01      	ldr	r5, [sp, #4]
 80095dc:	4682      	mov	sl, r0
 80095de:	468b      	mov	fp, r1
 80095e0:	4649      	mov	r1, r9
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7f7 fac0 	bl	8000b68 <__aeabi_d2iz>
 80095e8:	4606      	mov	r6, r0
 80095ea:	f7f6 ffa3 	bl	8000534 <__aeabi_i2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	f7f6 fe4f 	bl	8000298 <__aeabi_dsub>
 80095fa:	3630      	adds	r6, #48	; 0x30
 80095fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009600:	4652      	mov	r2, sl
 8009602:	465b      	mov	r3, fp
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	f7f7 fa70 	bl	8000aec <__aeabi_dcmplt>
 800960c:	2800      	cmp	r0, #0
 800960e:	d163      	bne.n	80096d8 <_dtoa_r+0x608>
 8009610:	4642      	mov	r2, r8
 8009612:	464b      	mov	r3, r9
 8009614:	4936      	ldr	r1, [pc, #216]	; (80096f0 <_dtoa_r+0x620>)
 8009616:	2000      	movs	r0, #0
 8009618:	f7f6 fe3e 	bl	8000298 <__aeabi_dsub>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	f7f7 fa64 	bl	8000aec <__aeabi_dcmplt>
 8009624:	2800      	cmp	r0, #0
 8009626:	f040 80b5 	bne.w	8009794 <_dtoa_r+0x6c4>
 800962a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800962c:	429d      	cmp	r5, r3
 800962e:	d081      	beq.n	8009534 <_dtoa_r+0x464>
 8009630:	4b30      	ldr	r3, [pc, #192]	; (80096f4 <_dtoa_r+0x624>)
 8009632:	2200      	movs	r2, #0
 8009634:	4650      	mov	r0, sl
 8009636:	4659      	mov	r1, fp
 8009638:	f7f6 ffe6 	bl	8000608 <__aeabi_dmul>
 800963c:	4b2d      	ldr	r3, [pc, #180]	; (80096f4 <_dtoa_r+0x624>)
 800963e:	4682      	mov	sl, r0
 8009640:	468b      	mov	fp, r1
 8009642:	4640      	mov	r0, r8
 8009644:	4649      	mov	r1, r9
 8009646:	2200      	movs	r2, #0
 8009648:	f7f6 ffde 	bl	8000608 <__aeabi_dmul>
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	e7c6      	b.n	80095e0 <_dtoa_r+0x510>
 8009652:	4650      	mov	r0, sl
 8009654:	4659      	mov	r1, fp
 8009656:	f7f6 ffd7 	bl	8000608 <__aeabi_dmul>
 800965a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800965c:	9d01      	ldr	r5, [sp, #4]
 800965e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009660:	4682      	mov	sl, r0
 8009662:	468b      	mov	fp, r1
 8009664:	4649      	mov	r1, r9
 8009666:	4640      	mov	r0, r8
 8009668:	f7f7 fa7e 	bl	8000b68 <__aeabi_d2iz>
 800966c:	4606      	mov	r6, r0
 800966e:	f7f6 ff61 	bl	8000534 <__aeabi_i2d>
 8009672:	3630      	adds	r6, #48	; 0x30
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f6 fe0c 	bl	8000298 <__aeabi_dsub>
 8009680:	f805 6b01 	strb.w	r6, [r5], #1
 8009684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009686:	429d      	cmp	r5, r3
 8009688:	4680      	mov	r8, r0
 800968a:	4689      	mov	r9, r1
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	d124      	bne.n	80096dc <_dtoa_r+0x60c>
 8009692:	4b1b      	ldr	r3, [pc, #108]	; (8009700 <_dtoa_r+0x630>)
 8009694:	4650      	mov	r0, sl
 8009696:	4659      	mov	r1, fp
 8009698:	f7f6 fe00 	bl	800029c <__adddf3>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4640      	mov	r0, r8
 80096a2:	4649      	mov	r1, r9
 80096a4:	f7f7 fa40 	bl	8000b28 <__aeabi_dcmpgt>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d173      	bne.n	8009794 <_dtoa_r+0x6c4>
 80096ac:	4652      	mov	r2, sl
 80096ae:	465b      	mov	r3, fp
 80096b0:	4913      	ldr	r1, [pc, #76]	; (8009700 <_dtoa_r+0x630>)
 80096b2:	2000      	movs	r0, #0
 80096b4:	f7f6 fdf0 	bl	8000298 <__aeabi_dsub>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4640      	mov	r0, r8
 80096be:	4649      	mov	r1, r9
 80096c0:	f7f7 fa14 	bl	8000aec <__aeabi_dcmplt>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f43f af35 	beq.w	8009534 <_dtoa_r+0x464>
 80096ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096cc:	1e6b      	subs	r3, r5, #1
 80096ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80096d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096d4:	2b30      	cmp	r3, #48	; 0x30
 80096d6:	d0f8      	beq.n	80096ca <_dtoa_r+0x5fa>
 80096d8:	9700      	str	r7, [sp, #0]
 80096da:	e049      	b.n	8009770 <_dtoa_r+0x6a0>
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <_dtoa_r+0x624>)
 80096de:	f7f6 ff93 	bl	8000608 <__aeabi_dmul>
 80096e2:	4680      	mov	r8, r0
 80096e4:	4689      	mov	r9, r1
 80096e6:	e7bd      	b.n	8009664 <_dtoa_r+0x594>
 80096e8:	0800b7b0 	.word	0x0800b7b0
 80096ec:	0800b788 	.word	0x0800b788
 80096f0:	3ff00000 	.word	0x3ff00000
 80096f4:	40240000 	.word	0x40240000
 80096f8:	401c0000 	.word	0x401c0000
 80096fc:	40140000 	.word	0x40140000
 8009700:	3fe00000 	.word	0x3fe00000
 8009704:	9d01      	ldr	r5, [sp, #4]
 8009706:	4656      	mov	r6, sl
 8009708:	465f      	mov	r7, fp
 800970a:	4642      	mov	r2, r8
 800970c:	464b      	mov	r3, r9
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f7 f8a3 	bl	800085c <__aeabi_ddiv>
 8009716:	f7f7 fa27 	bl	8000b68 <__aeabi_d2iz>
 800971a:	4682      	mov	sl, r0
 800971c:	f7f6 ff0a 	bl	8000534 <__aeabi_i2d>
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	f7f6 ff70 	bl	8000608 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009734:	f7f6 fdb0 	bl	8000298 <__aeabi_dsub>
 8009738:	f805 6b01 	strb.w	r6, [r5], #1
 800973c:	9e01      	ldr	r6, [sp, #4]
 800973e:	9f03      	ldr	r7, [sp, #12]
 8009740:	1bae      	subs	r6, r5, r6
 8009742:	42b7      	cmp	r7, r6
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	d135      	bne.n	80097b6 <_dtoa_r+0x6e6>
 800974a:	f7f6 fda7 	bl	800029c <__adddf3>
 800974e:	4642      	mov	r2, r8
 8009750:	464b      	mov	r3, r9
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	f7f7 f9e7 	bl	8000b28 <__aeabi_dcmpgt>
 800975a:	b9d0      	cbnz	r0, 8009792 <_dtoa_r+0x6c2>
 800975c:	4642      	mov	r2, r8
 800975e:	464b      	mov	r3, r9
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f7 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009768:	b110      	cbz	r0, 8009770 <_dtoa_r+0x6a0>
 800976a:	f01a 0f01 	tst.w	sl, #1
 800976e:	d110      	bne.n	8009792 <_dtoa_r+0x6c2>
 8009770:	4620      	mov	r0, r4
 8009772:	ee18 1a10 	vmov	r1, s16
 8009776:	f000 fae5 	bl	8009d44 <_Bfree>
 800977a:	2300      	movs	r3, #0
 800977c:	9800      	ldr	r0, [sp, #0]
 800977e:	702b      	strb	r3, [r5, #0]
 8009780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009782:	3001      	adds	r0, #1
 8009784:	6018      	str	r0, [r3, #0]
 8009786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009788:	2b00      	cmp	r3, #0
 800978a:	f43f acf1 	beq.w	8009170 <_dtoa_r+0xa0>
 800978e:	601d      	str	r5, [r3, #0]
 8009790:	e4ee      	b.n	8009170 <_dtoa_r+0xa0>
 8009792:	9f00      	ldr	r7, [sp, #0]
 8009794:	462b      	mov	r3, r5
 8009796:	461d      	mov	r5, r3
 8009798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979c:	2a39      	cmp	r2, #57	; 0x39
 800979e:	d106      	bne.n	80097ae <_dtoa_r+0x6de>
 80097a0:	9a01      	ldr	r2, [sp, #4]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d1f7      	bne.n	8009796 <_dtoa_r+0x6c6>
 80097a6:	9901      	ldr	r1, [sp, #4]
 80097a8:	2230      	movs	r2, #48	; 0x30
 80097aa:	3701      	adds	r7, #1
 80097ac:	700a      	strb	r2, [r1, #0]
 80097ae:	781a      	ldrb	r2, [r3, #0]
 80097b0:	3201      	adds	r2, #1
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	e790      	b.n	80096d8 <_dtoa_r+0x608>
 80097b6:	4ba6      	ldr	r3, [pc, #664]	; (8009a50 <_dtoa_r+0x980>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	f7f6 ff25 	bl	8000608 <__aeabi_dmul>
 80097be:	2200      	movs	r2, #0
 80097c0:	2300      	movs	r3, #0
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	f7f7 f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d09d      	beq.n	800970a <_dtoa_r+0x63a>
 80097ce:	e7cf      	b.n	8009770 <_dtoa_r+0x6a0>
 80097d0:	9a08      	ldr	r2, [sp, #32]
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	f000 80d7 	beq.w	8009986 <_dtoa_r+0x8b6>
 80097d8:	9a06      	ldr	r2, [sp, #24]
 80097da:	2a01      	cmp	r2, #1
 80097dc:	f300 80ba 	bgt.w	8009954 <_dtoa_r+0x884>
 80097e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097e2:	2a00      	cmp	r2, #0
 80097e4:	f000 80b2 	beq.w	800994c <_dtoa_r+0x87c>
 80097e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097ec:	9e07      	ldr	r6, [sp, #28]
 80097ee:	9d04      	ldr	r5, [sp, #16]
 80097f0:	9a04      	ldr	r2, [sp, #16]
 80097f2:	441a      	add	r2, r3
 80097f4:	9204      	str	r2, [sp, #16]
 80097f6:	9a05      	ldr	r2, [sp, #20]
 80097f8:	2101      	movs	r1, #1
 80097fa:	441a      	add	r2, r3
 80097fc:	4620      	mov	r0, r4
 80097fe:	9205      	str	r2, [sp, #20]
 8009800:	f000 fb58 	bl	8009eb4 <__i2b>
 8009804:	4607      	mov	r7, r0
 8009806:	2d00      	cmp	r5, #0
 8009808:	dd0c      	ble.n	8009824 <_dtoa_r+0x754>
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dd09      	ble.n	8009824 <_dtoa_r+0x754>
 8009810:	42ab      	cmp	r3, r5
 8009812:	9a04      	ldr	r2, [sp, #16]
 8009814:	bfa8      	it	ge
 8009816:	462b      	movge	r3, r5
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	9204      	str	r2, [sp, #16]
 800981c:	9a05      	ldr	r2, [sp, #20]
 800981e:	1aed      	subs	r5, r5, r3
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	9b07      	ldr	r3, [sp, #28]
 8009826:	b31b      	cbz	r3, 8009870 <_dtoa_r+0x7a0>
 8009828:	9b08      	ldr	r3, [sp, #32]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80af 	beq.w	800998e <_dtoa_r+0x8be>
 8009830:	2e00      	cmp	r6, #0
 8009832:	dd13      	ble.n	800985c <_dtoa_r+0x78c>
 8009834:	4639      	mov	r1, r7
 8009836:	4632      	mov	r2, r6
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fbfb 	bl	800a034 <__pow5mult>
 800983e:	ee18 2a10 	vmov	r2, s16
 8009842:	4601      	mov	r1, r0
 8009844:	4607      	mov	r7, r0
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fb4a 	bl	8009ee0 <__multiply>
 800984c:	ee18 1a10 	vmov	r1, s16
 8009850:	4680      	mov	r8, r0
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fa76 	bl	8009d44 <_Bfree>
 8009858:	ee08 8a10 	vmov	s16, r8
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	1b9a      	subs	r2, r3, r6
 8009860:	d006      	beq.n	8009870 <_dtoa_r+0x7a0>
 8009862:	ee18 1a10 	vmov	r1, s16
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fbe4 	bl	800a034 <__pow5mult>
 800986c:	ee08 0a10 	vmov	s16, r0
 8009870:	2101      	movs	r1, #1
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fb1e 	bl	8009eb4 <__i2b>
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	4606      	mov	r6, r0
 800987e:	f340 8088 	ble.w	8009992 <_dtoa_r+0x8c2>
 8009882:	461a      	mov	r2, r3
 8009884:	4601      	mov	r1, r0
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fbd4 	bl	800a034 <__pow5mult>
 800988c:	9b06      	ldr	r3, [sp, #24]
 800988e:	2b01      	cmp	r3, #1
 8009890:	4606      	mov	r6, r0
 8009892:	f340 8081 	ble.w	8009998 <_dtoa_r+0x8c8>
 8009896:	f04f 0800 	mov.w	r8, #0
 800989a:	6933      	ldr	r3, [r6, #16]
 800989c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098a0:	6918      	ldr	r0, [r3, #16]
 80098a2:	f000 fab7 	bl	8009e14 <__hi0bits>
 80098a6:	f1c0 0020 	rsb	r0, r0, #32
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	4418      	add	r0, r3
 80098ae:	f010 001f 	ands.w	r0, r0, #31
 80098b2:	f000 8092 	beq.w	80099da <_dtoa_r+0x90a>
 80098b6:	f1c0 0320 	rsb	r3, r0, #32
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	f340 808a 	ble.w	80099d4 <_dtoa_r+0x904>
 80098c0:	f1c0 001c 	rsb	r0, r0, #28
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	4403      	add	r3, r0
 80098c8:	9304      	str	r3, [sp, #16]
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	4403      	add	r3, r0
 80098ce:	4405      	add	r5, r0
 80098d0:	9305      	str	r3, [sp, #20]
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dd07      	ble.n	80098e8 <_dtoa_r+0x818>
 80098d8:	ee18 1a10 	vmov	r1, s16
 80098dc:	461a      	mov	r2, r3
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fc02 	bl	800a0e8 <__lshift>
 80098e4:	ee08 0a10 	vmov	s16, r0
 80098e8:	9b05      	ldr	r3, [sp, #20]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dd05      	ble.n	80098fa <_dtoa_r+0x82a>
 80098ee:	4631      	mov	r1, r6
 80098f0:	461a      	mov	r2, r3
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fbf8 	bl	800a0e8 <__lshift>
 80098f8:	4606      	mov	r6, r0
 80098fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d06e      	beq.n	80099de <_dtoa_r+0x90e>
 8009900:	ee18 0a10 	vmov	r0, s16
 8009904:	4631      	mov	r1, r6
 8009906:	f000 fc5f 	bl	800a1c8 <__mcmp>
 800990a:	2800      	cmp	r0, #0
 800990c:	da67      	bge.n	80099de <_dtoa_r+0x90e>
 800990e:	9b00      	ldr	r3, [sp, #0]
 8009910:	3b01      	subs	r3, #1
 8009912:	ee18 1a10 	vmov	r1, s16
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	220a      	movs	r2, #10
 800991a:	2300      	movs	r3, #0
 800991c:	4620      	mov	r0, r4
 800991e:	f000 fa33 	bl	8009d88 <__multadd>
 8009922:	9b08      	ldr	r3, [sp, #32]
 8009924:	ee08 0a10 	vmov	s16, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 81b1 	beq.w	8009c90 <_dtoa_r+0xbc0>
 800992e:	2300      	movs	r3, #0
 8009930:	4639      	mov	r1, r7
 8009932:	220a      	movs	r2, #10
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fa27 	bl	8009d88 <__multadd>
 800993a:	9b02      	ldr	r3, [sp, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	4607      	mov	r7, r0
 8009940:	f300 808e 	bgt.w	8009a60 <_dtoa_r+0x990>
 8009944:	9b06      	ldr	r3, [sp, #24]
 8009946:	2b02      	cmp	r3, #2
 8009948:	dc51      	bgt.n	80099ee <_dtoa_r+0x91e>
 800994a:	e089      	b.n	8009a60 <_dtoa_r+0x990>
 800994c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800994e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009952:	e74b      	b.n	80097ec <_dtoa_r+0x71c>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	1e5e      	subs	r6, r3, #1
 8009958:	9b07      	ldr	r3, [sp, #28]
 800995a:	42b3      	cmp	r3, r6
 800995c:	bfbf      	itttt	lt
 800995e:	9b07      	ldrlt	r3, [sp, #28]
 8009960:	9607      	strlt	r6, [sp, #28]
 8009962:	1af2      	sublt	r2, r6, r3
 8009964:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009966:	bfb6      	itet	lt
 8009968:	189b      	addlt	r3, r3, r2
 800996a:	1b9e      	subge	r6, r3, r6
 800996c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	bfb8      	it	lt
 8009972:	2600      	movlt	r6, #0
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfb7      	itett	lt
 8009978:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800997c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009980:	1a9d      	sublt	r5, r3, r2
 8009982:	2300      	movlt	r3, #0
 8009984:	e734      	b.n	80097f0 <_dtoa_r+0x720>
 8009986:	9e07      	ldr	r6, [sp, #28]
 8009988:	9d04      	ldr	r5, [sp, #16]
 800998a:	9f08      	ldr	r7, [sp, #32]
 800998c:	e73b      	b.n	8009806 <_dtoa_r+0x736>
 800998e:	9a07      	ldr	r2, [sp, #28]
 8009990:	e767      	b.n	8009862 <_dtoa_r+0x792>
 8009992:	9b06      	ldr	r3, [sp, #24]
 8009994:	2b01      	cmp	r3, #1
 8009996:	dc18      	bgt.n	80099ca <_dtoa_r+0x8fa>
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	d115      	bne.n	80099ca <_dtoa_r+0x8fa>
 800999e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099a2:	b993      	cbnz	r3, 80099ca <_dtoa_r+0x8fa>
 80099a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099a8:	0d1b      	lsrs	r3, r3, #20
 80099aa:	051b      	lsls	r3, r3, #20
 80099ac:	b183      	cbz	r3, 80099d0 <_dtoa_r+0x900>
 80099ae:	9b04      	ldr	r3, [sp, #16]
 80099b0:	3301      	adds	r3, #1
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	3301      	adds	r3, #1
 80099b8:	9305      	str	r3, [sp, #20]
 80099ba:	f04f 0801 	mov.w	r8, #1
 80099be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f47f af6a 	bne.w	800989a <_dtoa_r+0x7ca>
 80099c6:	2001      	movs	r0, #1
 80099c8:	e76f      	b.n	80098aa <_dtoa_r+0x7da>
 80099ca:	f04f 0800 	mov.w	r8, #0
 80099ce:	e7f6      	b.n	80099be <_dtoa_r+0x8ee>
 80099d0:	4698      	mov	r8, r3
 80099d2:	e7f4      	b.n	80099be <_dtoa_r+0x8ee>
 80099d4:	f43f af7d 	beq.w	80098d2 <_dtoa_r+0x802>
 80099d8:	4618      	mov	r0, r3
 80099da:	301c      	adds	r0, #28
 80099dc:	e772      	b.n	80098c4 <_dtoa_r+0x7f4>
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dc37      	bgt.n	8009a54 <_dtoa_r+0x984>
 80099e4:	9b06      	ldr	r3, [sp, #24]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	dd34      	ble.n	8009a54 <_dtoa_r+0x984>
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	9302      	str	r3, [sp, #8]
 80099ee:	9b02      	ldr	r3, [sp, #8]
 80099f0:	b96b      	cbnz	r3, 8009a0e <_dtoa_r+0x93e>
 80099f2:	4631      	mov	r1, r6
 80099f4:	2205      	movs	r2, #5
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 f9c6 	bl	8009d88 <__multadd>
 80099fc:	4601      	mov	r1, r0
 80099fe:	4606      	mov	r6, r0
 8009a00:	ee18 0a10 	vmov	r0, s16
 8009a04:	f000 fbe0 	bl	800a1c8 <__mcmp>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f73f adbb 	bgt.w	8009584 <_dtoa_r+0x4b4>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	9d01      	ldr	r5, [sp, #4]
 8009a12:	43db      	mvns	r3, r3
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	f04f 0800 	mov.w	r8, #0
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 f991 	bl	8009d44 <_Bfree>
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	f43f aea4 	beq.w	8009770 <_dtoa_r+0x6a0>
 8009a28:	f1b8 0f00 	cmp.w	r8, #0
 8009a2c:	d005      	beq.n	8009a3a <_dtoa_r+0x96a>
 8009a2e:	45b8      	cmp	r8, r7
 8009a30:	d003      	beq.n	8009a3a <_dtoa_r+0x96a>
 8009a32:	4641      	mov	r1, r8
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 f985 	bl	8009d44 <_Bfree>
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f981 	bl	8009d44 <_Bfree>
 8009a42:	e695      	b.n	8009770 <_dtoa_r+0x6a0>
 8009a44:	2600      	movs	r6, #0
 8009a46:	4637      	mov	r7, r6
 8009a48:	e7e1      	b.n	8009a0e <_dtoa_r+0x93e>
 8009a4a:	9700      	str	r7, [sp, #0]
 8009a4c:	4637      	mov	r7, r6
 8009a4e:	e599      	b.n	8009584 <_dtoa_r+0x4b4>
 8009a50:	40240000 	.word	0x40240000
 8009a54:	9b08      	ldr	r3, [sp, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80ca 	beq.w	8009bf0 <_dtoa_r+0xb20>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9302      	str	r3, [sp, #8]
 8009a60:	2d00      	cmp	r5, #0
 8009a62:	dd05      	ble.n	8009a70 <_dtoa_r+0x9a0>
 8009a64:	4639      	mov	r1, r7
 8009a66:	462a      	mov	r2, r5
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fb3d 	bl	800a0e8 <__lshift>
 8009a6e:	4607      	mov	r7, r0
 8009a70:	f1b8 0f00 	cmp.w	r8, #0
 8009a74:	d05b      	beq.n	8009b2e <_dtoa_r+0xa5e>
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 f923 	bl	8009cc4 <_Balloc>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	b928      	cbnz	r0, 8009a8e <_dtoa_r+0x9be>
 8009a82:	4b87      	ldr	r3, [pc, #540]	; (8009ca0 <_dtoa_r+0xbd0>)
 8009a84:	4602      	mov	r2, r0
 8009a86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a8a:	f7ff bb3b 	b.w	8009104 <_dtoa_r+0x34>
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	3202      	adds	r2, #2
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	f107 010c 	add.w	r1, r7, #12
 8009a98:	300c      	adds	r0, #12
 8009a9a:	f7fe fd5f 	bl	800855c <memcpy>
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fb20 	bl	800a0e8 <__lshift>
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	f103 0901 	add.w	r9, r3, #1
 8009aae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	9305      	str	r3, [sp, #20]
 8009ab6:	f00a 0301 	and.w	r3, sl, #1
 8009aba:	46b8      	mov	r8, r7
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	4607      	mov	r7, r0
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	ee18 0a10 	vmov	r0, s16
 8009ac6:	f7ff fa75 	bl	8008fb4 <quorem>
 8009aca:	4641      	mov	r1, r8
 8009acc:	9002      	str	r0, [sp, #8]
 8009ace:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ad2:	ee18 0a10 	vmov	r0, s16
 8009ad6:	f000 fb77 	bl	800a1c8 <__mcmp>
 8009ada:	463a      	mov	r2, r7
 8009adc:	9003      	str	r0, [sp, #12]
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fb8d 	bl	800a200 <__mdiff>
 8009ae6:	68c2      	ldr	r2, [r0, #12]
 8009ae8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009aec:	4605      	mov	r5, r0
 8009aee:	bb02      	cbnz	r2, 8009b32 <_dtoa_r+0xa62>
 8009af0:	4601      	mov	r1, r0
 8009af2:	ee18 0a10 	vmov	r0, s16
 8009af6:	f000 fb67 	bl	800a1c8 <__mcmp>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4629      	mov	r1, r5
 8009afe:	4620      	mov	r0, r4
 8009b00:	9207      	str	r2, [sp, #28]
 8009b02:	f000 f91f 	bl	8009d44 <_Bfree>
 8009b06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b0a:	ea43 0102 	orr.w	r1, r3, r2
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	430b      	orrs	r3, r1
 8009b12:	464d      	mov	r5, r9
 8009b14:	d10f      	bne.n	8009b36 <_dtoa_r+0xa66>
 8009b16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b1a:	d02a      	beq.n	8009b72 <_dtoa_r+0xaa2>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dd02      	ble.n	8009b28 <_dtoa_r+0xa58>
 8009b22:	9b02      	ldr	r3, [sp, #8]
 8009b24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b28:	f88b a000 	strb.w	sl, [fp]
 8009b2c:	e775      	b.n	8009a1a <_dtoa_r+0x94a>
 8009b2e:	4638      	mov	r0, r7
 8009b30:	e7ba      	b.n	8009aa8 <_dtoa_r+0x9d8>
 8009b32:	2201      	movs	r2, #1
 8009b34:	e7e2      	b.n	8009afc <_dtoa_r+0xa2c>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	db04      	blt.n	8009b46 <_dtoa_r+0xa76>
 8009b3c:	9906      	ldr	r1, [sp, #24]
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	9904      	ldr	r1, [sp, #16]
 8009b42:	430b      	orrs	r3, r1
 8009b44:	d122      	bne.n	8009b8c <_dtoa_r+0xabc>
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	ddee      	ble.n	8009b28 <_dtoa_r+0xa58>
 8009b4a:	ee18 1a10 	vmov	r1, s16
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fac9 	bl	800a0e8 <__lshift>
 8009b56:	4631      	mov	r1, r6
 8009b58:	ee08 0a10 	vmov	s16, r0
 8009b5c:	f000 fb34 	bl	800a1c8 <__mcmp>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	dc03      	bgt.n	8009b6c <_dtoa_r+0xa9c>
 8009b64:	d1e0      	bne.n	8009b28 <_dtoa_r+0xa58>
 8009b66:	f01a 0f01 	tst.w	sl, #1
 8009b6a:	d0dd      	beq.n	8009b28 <_dtoa_r+0xa58>
 8009b6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b70:	d1d7      	bne.n	8009b22 <_dtoa_r+0xa52>
 8009b72:	2339      	movs	r3, #57	; 0x39
 8009b74:	f88b 3000 	strb.w	r3, [fp]
 8009b78:	462b      	mov	r3, r5
 8009b7a:	461d      	mov	r5, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b82:	2a39      	cmp	r2, #57	; 0x39
 8009b84:	d071      	beq.n	8009c6a <_dtoa_r+0xb9a>
 8009b86:	3201      	adds	r2, #1
 8009b88:	701a      	strb	r2, [r3, #0]
 8009b8a:	e746      	b.n	8009a1a <_dtoa_r+0x94a>
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	dd07      	ble.n	8009ba0 <_dtoa_r+0xad0>
 8009b90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b94:	d0ed      	beq.n	8009b72 <_dtoa_r+0xaa2>
 8009b96:	f10a 0301 	add.w	r3, sl, #1
 8009b9a:	f88b 3000 	strb.w	r3, [fp]
 8009b9e:	e73c      	b.n	8009a1a <_dtoa_r+0x94a>
 8009ba0:	9b05      	ldr	r3, [sp, #20]
 8009ba2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009ba6:	4599      	cmp	r9, r3
 8009ba8:	d047      	beq.n	8009c3a <_dtoa_r+0xb6a>
 8009baa:	ee18 1a10 	vmov	r1, s16
 8009bae:	2300      	movs	r3, #0
 8009bb0:	220a      	movs	r2, #10
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 f8e8 	bl	8009d88 <__multadd>
 8009bb8:	45b8      	cmp	r8, r7
 8009bba:	ee08 0a10 	vmov	s16, r0
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	f04f 020a 	mov.w	r2, #10
 8009bc6:	4641      	mov	r1, r8
 8009bc8:	4620      	mov	r0, r4
 8009bca:	d106      	bne.n	8009bda <_dtoa_r+0xb0a>
 8009bcc:	f000 f8dc 	bl	8009d88 <__multadd>
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	f109 0901 	add.w	r9, r9, #1
 8009bd8:	e772      	b.n	8009ac0 <_dtoa_r+0x9f0>
 8009bda:	f000 f8d5 	bl	8009d88 <__multadd>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4680      	mov	r8, r0
 8009be2:	2300      	movs	r3, #0
 8009be4:	220a      	movs	r2, #10
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f8ce 	bl	8009d88 <__multadd>
 8009bec:	4607      	mov	r7, r0
 8009bee:	e7f1      	b.n	8009bd4 <_dtoa_r+0xb04>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	9302      	str	r3, [sp, #8]
 8009bf4:	9d01      	ldr	r5, [sp, #4]
 8009bf6:	ee18 0a10 	vmov	r0, s16
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	f7ff f9da 	bl	8008fb4 <quorem>
 8009c00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	f805 ab01 	strb.w	sl, [r5], #1
 8009c0a:	1aea      	subs	r2, r5, r3
 8009c0c:	9b02      	ldr	r3, [sp, #8]
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	dd09      	ble.n	8009c26 <_dtoa_r+0xb56>
 8009c12:	ee18 1a10 	vmov	r1, s16
 8009c16:	2300      	movs	r3, #0
 8009c18:	220a      	movs	r2, #10
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 f8b4 	bl	8009d88 <__multadd>
 8009c20:	ee08 0a10 	vmov	s16, r0
 8009c24:	e7e7      	b.n	8009bf6 <_dtoa_r+0xb26>
 8009c26:	9b02      	ldr	r3, [sp, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bfc8      	it	gt
 8009c2c:	461d      	movgt	r5, r3
 8009c2e:	9b01      	ldr	r3, [sp, #4]
 8009c30:	bfd8      	it	le
 8009c32:	2501      	movle	r5, #1
 8009c34:	441d      	add	r5, r3
 8009c36:	f04f 0800 	mov.w	r8, #0
 8009c3a:	ee18 1a10 	vmov	r1, s16
 8009c3e:	2201      	movs	r2, #1
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 fa51 	bl	800a0e8 <__lshift>
 8009c46:	4631      	mov	r1, r6
 8009c48:	ee08 0a10 	vmov	s16, r0
 8009c4c:	f000 fabc 	bl	800a1c8 <__mcmp>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dc91      	bgt.n	8009b78 <_dtoa_r+0xaa8>
 8009c54:	d102      	bne.n	8009c5c <_dtoa_r+0xb8c>
 8009c56:	f01a 0f01 	tst.w	sl, #1
 8009c5a:	d18d      	bne.n	8009b78 <_dtoa_r+0xaa8>
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	461d      	mov	r5, r3
 8009c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c64:	2a30      	cmp	r2, #48	; 0x30
 8009c66:	d0fa      	beq.n	8009c5e <_dtoa_r+0xb8e>
 8009c68:	e6d7      	b.n	8009a1a <_dtoa_r+0x94a>
 8009c6a:	9a01      	ldr	r2, [sp, #4]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d184      	bne.n	8009b7a <_dtoa_r+0xaaa>
 8009c70:	9b00      	ldr	r3, [sp, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	2331      	movs	r3, #49	; 0x31
 8009c78:	7013      	strb	r3, [r2, #0]
 8009c7a:	e6ce      	b.n	8009a1a <_dtoa_r+0x94a>
 8009c7c:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <_dtoa_r+0xbd4>)
 8009c7e:	f7ff ba95 	b.w	80091ac <_dtoa_r+0xdc>
 8009c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f47f aa6e 	bne.w	8009166 <_dtoa_r+0x96>
 8009c8a:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <_dtoa_r+0xbd8>)
 8009c8c:	f7ff ba8e 	b.w	80091ac <_dtoa_r+0xdc>
 8009c90:	9b02      	ldr	r3, [sp, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dcae      	bgt.n	8009bf4 <_dtoa_r+0xb24>
 8009c96:	9b06      	ldr	r3, [sp, #24]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	f73f aea8 	bgt.w	80099ee <_dtoa_r+0x91e>
 8009c9e:	e7a9      	b.n	8009bf4 <_dtoa_r+0xb24>
 8009ca0:	0800b718 	.word	0x0800b718
 8009ca4:	0800b574 	.word	0x0800b574
 8009ca8:	0800b699 	.word	0x0800b699

08009cac <_localeconv_r>:
 8009cac:	4800      	ldr	r0, [pc, #0]	; (8009cb0 <_localeconv_r+0x4>)
 8009cae:	4770      	bx	lr
 8009cb0:	20000168 	.word	0x20000168

08009cb4 <malloc>:
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <malloc+0xc>)
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	6818      	ldr	r0, [r3, #0]
 8009cba:	f000 bc09 	b.w	800a4d0 <_malloc_r>
 8009cbe:	bf00      	nop
 8009cc0:	20000014 	.word	0x20000014

08009cc4 <_Balloc>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cc8:	4604      	mov	r4, r0
 8009cca:	460d      	mov	r5, r1
 8009ccc:	b976      	cbnz	r6, 8009cec <_Balloc+0x28>
 8009cce:	2010      	movs	r0, #16
 8009cd0:	f7ff fff0 	bl	8009cb4 <malloc>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6260      	str	r0, [r4, #36]	; 0x24
 8009cd8:	b920      	cbnz	r0, 8009ce4 <_Balloc+0x20>
 8009cda:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <_Balloc+0x78>)
 8009cdc:	4818      	ldr	r0, [pc, #96]	; (8009d40 <_Balloc+0x7c>)
 8009cde:	2166      	movs	r1, #102	; 0x66
 8009ce0:	f000 fdd6 	bl	800a890 <__assert_func>
 8009ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ce8:	6006      	str	r6, [r0, #0]
 8009cea:	60c6      	str	r6, [r0, #12]
 8009cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cee:	68f3      	ldr	r3, [r6, #12]
 8009cf0:	b183      	cbz	r3, 8009d14 <_Balloc+0x50>
 8009cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cfa:	b9b8      	cbnz	r0, 8009d2c <_Balloc+0x68>
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8009d02:	1d72      	adds	r2, r6, #5
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 fb60 	bl	800a3cc <_calloc_r>
 8009d0c:	b160      	cbz	r0, 8009d28 <_Balloc+0x64>
 8009d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d12:	e00e      	b.n	8009d32 <_Balloc+0x6e>
 8009d14:	2221      	movs	r2, #33	; 0x21
 8009d16:	2104      	movs	r1, #4
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fb57 	bl	800a3cc <_calloc_r>
 8009d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d20:	60f0      	str	r0, [r6, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e4      	bne.n	8009cf2 <_Balloc+0x2e>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	6802      	ldr	r2, [r0, #0]
 8009d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d32:	2300      	movs	r3, #0
 8009d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d38:	e7f7      	b.n	8009d2a <_Balloc+0x66>
 8009d3a:	bf00      	nop
 8009d3c:	0800b6a6 	.word	0x0800b6a6
 8009d40:	0800b729 	.word	0x0800b729

08009d44 <_Bfree>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d48:	4605      	mov	r5, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	b976      	cbnz	r6, 8009d6c <_Bfree+0x28>
 8009d4e:	2010      	movs	r0, #16
 8009d50:	f7ff ffb0 	bl	8009cb4 <malloc>
 8009d54:	4602      	mov	r2, r0
 8009d56:	6268      	str	r0, [r5, #36]	; 0x24
 8009d58:	b920      	cbnz	r0, 8009d64 <_Bfree+0x20>
 8009d5a:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <_Bfree+0x3c>)
 8009d5c:	4809      	ldr	r0, [pc, #36]	; (8009d84 <_Bfree+0x40>)
 8009d5e:	218a      	movs	r1, #138	; 0x8a
 8009d60:	f000 fd96 	bl	800a890 <__assert_func>
 8009d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d68:	6006      	str	r6, [r0, #0]
 8009d6a:	60c6      	str	r6, [r0, #12]
 8009d6c:	b13c      	cbz	r4, 8009d7e <_Bfree+0x3a>
 8009d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d70:	6862      	ldr	r2, [r4, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d78:	6021      	str	r1, [r4, #0]
 8009d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	0800b6a6 	.word	0x0800b6a6
 8009d84:	0800b729 	.word	0x0800b729

08009d88 <__multadd>:
 8009d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	690d      	ldr	r5, [r1, #16]
 8009d8e:	4607      	mov	r7, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	461e      	mov	r6, r3
 8009d94:	f101 0c14 	add.w	ip, r1, #20
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d9e:	b299      	uxth	r1, r3
 8009da0:	fb02 6101 	mla	r1, r2, r1, r6
 8009da4:	0c1e      	lsrs	r6, r3, #16
 8009da6:	0c0b      	lsrs	r3, r1, #16
 8009da8:	fb02 3306 	mla	r3, r2, r6, r3
 8009dac:	b289      	uxth	r1, r1
 8009dae:	3001      	adds	r0, #1
 8009db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009db4:	4285      	cmp	r5, r0
 8009db6:	f84c 1b04 	str.w	r1, [ip], #4
 8009dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dbe:	dcec      	bgt.n	8009d9a <__multadd+0x12>
 8009dc0:	b30e      	cbz	r6, 8009e06 <__multadd+0x7e>
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	dc19      	bgt.n	8009dfc <__multadd+0x74>
 8009dc8:	6861      	ldr	r1, [r4, #4]
 8009dca:	4638      	mov	r0, r7
 8009dcc:	3101      	adds	r1, #1
 8009dce:	f7ff ff79 	bl	8009cc4 <_Balloc>
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	b928      	cbnz	r0, 8009de2 <__multadd+0x5a>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <__multadd+0x84>)
 8009dda:	480d      	ldr	r0, [pc, #52]	; (8009e10 <__multadd+0x88>)
 8009ddc:	21b5      	movs	r1, #181	; 0xb5
 8009dde:	f000 fd57 	bl	800a890 <__assert_func>
 8009de2:	6922      	ldr	r2, [r4, #16]
 8009de4:	3202      	adds	r2, #2
 8009de6:	f104 010c 	add.w	r1, r4, #12
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	300c      	adds	r0, #12
 8009dee:	f7fe fbb5 	bl	800855c <memcpy>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7ff ffa5 	bl	8009d44 <_Bfree>
 8009dfa:	4644      	mov	r4, r8
 8009dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e00:	3501      	adds	r5, #1
 8009e02:	615e      	str	r6, [r3, #20]
 8009e04:	6125      	str	r5, [r4, #16]
 8009e06:	4620      	mov	r0, r4
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0c:	0800b718 	.word	0x0800b718
 8009e10:	0800b729 	.word	0x0800b729

08009e14 <__hi0bits>:
 8009e14:	0c03      	lsrs	r3, r0, #16
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	b9d3      	cbnz	r3, 8009e50 <__hi0bits+0x3c>
 8009e1a:	0400      	lsls	r0, r0, #16
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e22:	bf04      	itt	eq
 8009e24:	0200      	lsleq	r0, r0, #8
 8009e26:	3308      	addeq	r3, #8
 8009e28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e2c:	bf04      	itt	eq
 8009e2e:	0100      	lsleq	r0, r0, #4
 8009e30:	3304      	addeq	r3, #4
 8009e32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e36:	bf04      	itt	eq
 8009e38:	0080      	lsleq	r0, r0, #2
 8009e3a:	3302      	addeq	r3, #2
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	db05      	blt.n	8009e4c <__hi0bits+0x38>
 8009e40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e44:	f103 0301 	add.w	r3, r3, #1
 8009e48:	bf08      	it	eq
 8009e4a:	2320      	moveq	r3, #32
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4770      	bx	lr
 8009e50:	2300      	movs	r3, #0
 8009e52:	e7e4      	b.n	8009e1e <__hi0bits+0xa>

08009e54 <__lo0bits>:
 8009e54:	6803      	ldr	r3, [r0, #0]
 8009e56:	f013 0207 	ands.w	r2, r3, #7
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	d00b      	beq.n	8009e76 <__lo0bits+0x22>
 8009e5e:	07da      	lsls	r2, r3, #31
 8009e60:	d423      	bmi.n	8009eaa <__lo0bits+0x56>
 8009e62:	0798      	lsls	r0, r3, #30
 8009e64:	bf49      	itett	mi
 8009e66:	085b      	lsrmi	r3, r3, #1
 8009e68:	089b      	lsrpl	r3, r3, #2
 8009e6a:	2001      	movmi	r0, #1
 8009e6c:	600b      	strmi	r3, [r1, #0]
 8009e6e:	bf5c      	itt	pl
 8009e70:	600b      	strpl	r3, [r1, #0]
 8009e72:	2002      	movpl	r0, #2
 8009e74:	4770      	bx	lr
 8009e76:	b298      	uxth	r0, r3
 8009e78:	b9a8      	cbnz	r0, 8009ea6 <__lo0bits+0x52>
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	2010      	movs	r0, #16
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	b90a      	cbnz	r2, 8009e86 <__lo0bits+0x32>
 8009e82:	3008      	adds	r0, #8
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	071a      	lsls	r2, r3, #28
 8009e88:	bf04      	itt	eq
 8009e8a:	091b      	lsreq	r3, r3, #4
 8009e8c:	3004      	addeq	r0, #4
 8009e8e:	079a      	lsls	r2, r3, #30
 8009e90:	bf04      	itt	eq
 8009e92:	089b      	lsreq	r3, r3, #2
 8009e94:	3002      	addeq	r0, #2
 8009e96:	07da      	lsls	r2, r3, #31
 8009e98:	d403      	bmi.n	8009ea2 <__lo0bits+0x4e>
 8009e9a:	085b      	lsrs	r3, r3, #1
 8009e9c:	f100 0001 	add.w	r0, r0, #1
 8009ea0:	d005      	beq.n	8009eae <__lo0bits+0x5a>
 8009ea2:	600b      	str	r3, [r1, #0]
 8009ea4:	4770      	bx	lr
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	e7e9      	b.n	8009e7e <__lo0bits+0x2a>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4770      	bx	lr
 8009eae:	2020      	movs	r0, #32
 8009eb0:	4770      	bx	lr
	...

08009eb4 <__i2b>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	2101      	movs	r1, #1
 8009eba:	f7ff ff03 	bl	8009cc4 <_Balloc>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	b928      	cbnz	r0, 8009ece <__i2b+0x1a>
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <__i2b+0x24>)
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <__i2b+0x28>)
 8009ec6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009eca:	f000 fce1 	bl	800a890 <__assert_func>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	6144      	str	r4, [r0, #20]
 8009ed2:	6103      	str	r3, [r0, #16]
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0800b718 	.word	0x0800b718
 8009edc:	0800b729 	.word	0x0800b729

08009ee0 <__multiply>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	4691      	mov	r9, r2
 8009ee6:	690a      	ldr	r2, [r1, #16]
 8009ee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	bfb8      	it	lt
 8009ef0:	460b      	movlt	r3, r1
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	bfbc      	itt	lt
 8009ef6:	464c      	movlt	r4, r9
 8009ef8:	4699      	movlt	r9, r3
 8009efa:	6927      	ldr	r7, [r4, #16]
 8009efc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f00:	68a3      	ldr	r3, [r4, #8]
 8009f02:	6861      	ldr	r1, [r4, #4]
 8009f04:	eb07 060a 	add.w	r6, r7, sl
 8009f08:	42b3      	cmp	r3, r6
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	bfb8      	it	lt
 8009f0e:	3101      	addlt	r1, #1
 8009f10:	f7ff fed8 	bl	8009cc4 <_Balloc>
 8009f14:	b930      	cbnz	r0, 8009f24 <__multiply+0x44>
 8009f16:	4602      	mov	r2, r0
 8009f18:	4b44      	ldr	r3, [pc, #272]	; (800a02c <__multiply+0x14c>)
 8009f1a:	4845      	ldr	r0, [pc, #276]	; (800a030 <__multiply+0x150>)
 8009f1c:	f240 115d 	movw	r1, #349	; 0x15d
 8009f20:	f000 fcb6 	bl	800a890 <__assert_func>
 8009f24:	f100 0514 	add.w	r5, r0, #20
 8009f28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4543      	cmp	r3, r8
 8009f32:	d321      	bcc.n	8009f78 <__multiply+0x98>
 8009f34:	f104 0314 	add.w	r3, r4, #20
 8009f38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f3c:	f109 0314 	add.w	r3, r9, #20
 8009f40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f44:	9202      	str	r2, [sp, #8]
 8009f46:	1b3a      	subs	r2, r7, r4
 8009f48:	3a15      	subs	r2, #21
 8009f4a:	f022 0203 	bic.w	r2, r2, #3
 8009f4e:	3204      	adds	r2, #4
 8009f50:	f104 0115 	add.w	r1, r4, #21
 8009f54:	428f      	cmp	r7, r1
 8009f56:	bf38      	it	cc
 8009f58:	2204      	movcc	r2, #4
 8009f5a:	9201      	str	r2, [sp, #4]
 8009f5c:	9a02      	ldr	r2, [sp, #8]
 8009f5e:	9303      	str	r3, [sp, #12]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d80c      	bhi.n	8009f7e <__multiply+0x9e>
 8009f64:	2e00      	cmp	r6, #0
 8009f66:	dd03      	ble.n	8009f70 <__multiply+0x90>
 8009f68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d05a      	beq.n	800a026 <__multiply+0x146>
 8009f70:	6106      	str	r6, [r0, #16]
 8009f72:	b005      	add	sp, #20
 8009f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f78:	f843 2b04 	str.w	r2, [r3], #4
 8009f7c:	e7d8      	b.n	8009f30 <__multiply+0x50>
 8009f7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f82:	f1ba 0f00 	cmp.w	sl, #0
 8009f86:	d024      	beq.n	8009fd2 <__multiply+0xf2>
 8009f88:	f104 0e14 	add.w	lr, r4, #20
 8009f8c:	46a9      	mov	r9, r5
 8009f8e:	f04f 0c00 	mov.w	ip, #0
 8009f92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f96:	f8d9 1000 	ldr.w	r1, [r9]
 8009f9a:	fa1f fb82 	uxth.w	fp, r2
 8009f9e:	b289      	uxth	r1, r1
 8009fa0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8009fac:	4461      	add	r1, ip
 8009fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fb2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fba:	b289      	uxth	r1, r1
 8009fbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fc0:	4577      	cmp	r7, lr
 8009fc2:	f849 1b04 	str.w	r1, [r9], #4
 8009fc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fca:	d8e2      	bhi.n	8009f92 <__multiply+0xb2>
 8009fcc:	9a01      	ldr	r2, [sp, #4]
 8009fce:	f845 c002 	str.w	ip, [r5, r2]
 8009fd2:	9a03      	ldr	r2, [sp, #12]
 8009fd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	f1b9 0f00 	cmp.w	r9, #0
 8009fde:	d020      	beq.n	800a022 <__multiply+0x142>
 8009fe0:	6829      	ldr	r1, [r5, #0]
 8009fe2:	f104 0c14 	add.w	ip, r4, #20
 8009fe6:	46ae      	mov	lr, r5
 8009fe8:	f04f 0a00 	mov.w	sl, #0
 8009fec:	f8bc b000 	ldrh.w	fp, [ip]
 8009ff0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ff4:	fb09 220b 	mla	r2, r9, fp, r2
 8009ff8:	4492      	add	sl, r2
 8009ffa:	b289      	uxth	r1, r1
 8009ffc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a000:	f84e 1b04 	str.w	r1, [lr], #4
 800a004:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a008:	f8be 1000 	ldrh.w	r1, [lr]
 800a00c:	0c12      	lsrs	r2, r2, #16
 800a00e:	fb09 1102 	mla	r1, r9, r2, r1
 800a012:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a016:	4567      	cmp	r7, ip
 800a018:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a01c:	d8e6      	bhi.n	8009fec <__multiply+0x10c>
 800a01e:	9a01      	ldr	r2, [sp, #4]
 800a020:	50a9      	str	r1, [r5, r2]
 800a022:	3504      	adds	r5, #4
 800a024:	e79a      	b.n	8009f5c <__multiply+0x7c>
 800a026:	3e01      	subs	r6, #1
 800a028:	e79c      	b.n	8009f64 <__multiply+0x84>
 800a02a:	bf00      	nop
 800a02c:	0800b718 	.word	0x0800b718
 800a030:	0800b729 	.word	0x0800b729

0800a034 <__pow5mult>:
 800a034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a038:	4615      	mov	r5, r2
 800a03a:	f012 0203 	ands.w	r2, r2, #3
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	d007      	beq.n	800a054 <__pow5mult+0x20>
 800a044:	4c25      	ldr	r4, [pc, #148]	; (800a0dc <__pow5mult+0xa8>)
 800a046:	3a01      	subs	r2, #1
 800a048:	2300      	movs	r3, #0
 800a04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a04e:	f7ff fe9b 	bl	8009d88 <__multadd>
 800a052:	4607      	mov	r7, r0
 800a054:	10ad      	asrs	r5, r5, #2
 800a056:	d03d      	beq.n	800a0d4 <__pow5mult+0xa0>
 800a058:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a05a:	b97c      	cbnz	r4, 800a07c <__pow5mult+0x48>
 800a05c:	2010      	movs	r0, #16
 800a05e:	f7ff fe29 	bl	8009cb4 <malloc>
 800a062:	4602      	mov	r2, r0
 800a064:	6270      	str	r0, [r6, #36]	; 0x24
 800a066:	b928      	cbnz	r0, 800a074 <__pow5mult+0x40>
 800a068:	4b1d      	ldr	r3, [pc, #116]	; (800a0e0 <__pow5mult+0xac>)
 800a06a:	481e      	ldr	r0, [pc, #120]	; (800a0e4 <__pow5mult+0xb0>)
 800a06c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a070:	f000 fc0e 	bl	800a890 <__assert_func>
 800a074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a078:	6004      	str	r4, [r0, #0]
 800a07a:	60c4      	str	r4, [r0, #12]
 800a07c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a084:	b94c      	cbnz	r4, 800a09a <__pow5mult+0x66>
 800a086:	f240 2171 	movw	r1, #625	; 0x271
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ff12 	bl	8009eb4 <__i2b>
 800a090:	2300      	movs	r3, #0
 800a092:	f8c8 0008 	str.w	r0, [r8, #8]
 800a096:	4604      	mov	r4, r0
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	07eb      	lsls	r3, r5, #31
 800a0a0:	d50a      	bpl.n	800a0b8 <__pow5mult+0x84>
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7ff ff1a 	bl	8009ee0 <__multiply>
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	4680      	mov	r8, r0
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7ff fe47 	bl	8009d44 <_Bfree>
 800a0b6:	4647      	mov	r7, r8
 800a0b8:	106d      	asrs	r5, r5, #1
 800a0ba:	d00b      	beq.n	800a0d4 <__pow5mult+0xa0>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	b938      	cbnz	r0, 800a0d0 <__pow5mult+0x9c>
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff ff0b 	bl	8009ee0 <__multiply>
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	f8c0 9000 	str.w	r9, [r0]
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	e7e4      	b.n	800a09e <__pow5mult+0x6a>
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800b878 	.word	0x0800b878
 800a0e0:	0800b6a6 	.word	0x0800b6a6
 800a0e4:	0800b729 	.word	0x0800b729

0800a0e8 <__lshift>:
 800a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6849      	ldr	r1, [r1, #4]
 800a0f0:	6923      	ldr	r3, [r4, #16]
 800a0f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	4691      	mov	r9, r2
 800a0fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a100:	f108 0601 	add.w	r6, r8, #1
 800a104:	42b3      	cmp	r3, r6
 800a106:	db0b      	blt.n	800a120 <__lshift+0x38>
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff fddb 	bl	8009cc4 <_Balloc>
 800a10e:	4605      	mov	r5, r0
 800a110:	b948      	cbnz	r0, 800a126 <__lshift+0x3e>
 800a112:	4602      	mov	r2, r0
 800a114:	4b2a      	ldr	r3, [pc, #168]	; (800a1c0 <__lshift+0xd8>)
 800a116:	482b      	ldr	r0, [pc, #172]	; (800a1c4 <__lshift+0xdc>)
 800a118:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a11c:	f000 fbb8 	bl	800a890 <__assert_func>
 800a120:	3101      	adds	r1, #1
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	e7ee      	b.n	800a104 <__lshift+0x1c>
 800a126:	2300      	movs	r3, #0
 800a128:	f100 0114 	add.w	r1, r0, #20
 800a12c:	f100 0210 	add.w	r2, r0, #16
 800a130:	4618      	mov	r0, r3
 800a132:	4553      	cmp	r3, sl
 800a134:	db37      	blt.n	800a1a6 <__lshift+0xbe>
 800a136:	6920      	ldr	r0, [r4, #16]
 800a138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a13c:	f104 0314 	add.w	r3, r4, #20
 800a140:	f019 091f 	ands.w	r9, r9, #31
 800a144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a148:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a14c:	d02f      	beq.n	800a1ae <__lshift+0xc6>
 800a14e:	f1c9 0e20 	rsb	lr, r9, #32
 800a152:	468a      	mov	sl, r1
 800a154:	f04f 0c00 	mov.w	ip, #0
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	fa02 f209 	lsl.w	r2, r2, r9
 800a15e:	ea42 020c 	orr.w	r2, r2, ip
 800a162:	f84a 2b04 	str.w	r2, [sl], #4
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	4298      	cmp	r0, r3
 800a16c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a170:	d8f2      	bhi.n	800a158 <__lshift+0x70>
 800a172:	1b03      	subs	r3, r0, r4
 800a174:	3b15      	subs	r3, #21
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	3304      	adds	r3, #4
 800a17c:	f104 0215 	add.w	r2, r4, #21
 800a180:	4290      	cmp	r0, r2
 800a182:	bf38      	it	cc
 800a184:	2304      	movcc	r3, #4
 800a186:	f841 c003 	str.w	ip, [r1, r3]
 800a18a:	f1bc 0f00 	cmp.w	ip, #0
 800a18e:	d001      	beq.n	800a194 <__lshift+0xac>
 800a190:	f108 0602 	add.w	r6, r8, #2
 800a194:	3e01      	subs	r6, #1
 800a196:	4638      	mov	r0, r7
 800a198:	612e      	str	r6, [r5, #16]
 800a19a:	4621      	mov	r1, r4
 800a19c:	f7ff fdd2 	bl	8009d44 <_Bfree>
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	e7c1      	b.n	800a132 <__lshift+0x4a>
 800a1ae:	3904      	subs	r1, #4
 800a1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1b8:	4298      	cmp	r0, r3
 800a1ba:	d8f9      	bhi.n	800a1b0 <__lshift+0xc8>
 800a1bc:	e7ea      	b.n	800a194 <__lshift+0xac>
 800a1be:	bf00      	nop
 800a1c0:	0800b718 	.word	0x0800b718
 800a1c4:	0800b729 	.word	0x0800b729

0800a1c8 <__mcmp>:
 800a1c8:	b530      	push	{r4, r5, lr}
 800a1ca:	6902      	ldr	r2, [r0, #16]
 800a1cc:	690c      	ldr	r4, [r1, #16]
 800a1ce:	1b12      	subs	r2, r2, r4
 800a1d0:	d10e      	bne.n	800a1f0 <__mcmp+0x28>
 800a1d2:	f100 0314 	add.w	r3, r0, #20
 800a1d6:	3114      	adds	r1, #20
 800a1d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1e8:	42a5      	cmp	r5, r4
 800a1ea:	d003      	beq.n	800a1f4 <__mcmp+0x2c>
 800a1ec:	d305      	bcc.n	800a1fa <__mcmp+0x32>
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	bd30      	pop	{r4, r5, pc}
 800a1f4:	4283      	cmp	r3, r0
 800a1f6:	d3f3      	bcc.n	800a1e0 <__mcmp+0x18>
 800a1f8:	e7fa      	b.n	800a1f0 <__mcmp+0x28>
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	e7f7      	b.n	800a1f0 <__mcmp+0x28>

0800a200 <__mdiff>:
 800a200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	460c      	mov	r4, r1
 800a206:	4606      	mov	r6, r0
 800a208:	4611      	mov	r1, r2
 800a20a:	4620      	mov	r0, r4
 800a20c:	4690      	mov	r8, r2
 800a20e:	f7ff ffdb 	bl	800a1c8 <__mcmp>
 800a212:	1e05      	subs	r5, r0, #0
 800a214:	d110      	bne.n	800a238 <__mdiff+0x38>
 800a216:	4629      	mov	r1, r5
 800a218:	4630      	mov	r0, r6
 800a21a:	f7ff fd53 	bl	8009cc4 <_Balloc>
 800a21e:	b930      	cbnz	r0, 800a22e <__mdiff+0x2e>
 800a220:	4b3a      	ldr	r3, [pc, #232]	; (800a30c <__mdiff+0x10c>)
 800a222:	4602      	mov	r2, r0
 800a224:	f240 2132 	movw	r1, #562	; 0x232
 800a228:	4839      	ldr	r0, [pc, #228]	; (800a310 <__mdiff+0x110>)
 800a22a:	f000 fb31 	bl	800a890 <__assert_func>
 800a22e:	2301      	movs	r3, #1
 800a230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	bfa4      	itt	ge
 800a23a:	4643      	movge	r3, r8
 800a23c:	46a0      	movge	r8, r4
 800a23e:	4630      	mov	r0, r6
 800a240:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a244:	bfa6      	itte	ge
 800a246:	461c      	movge	r4, r3
 800a248:	2500      	movge	r5, #0
 800a24a:	2501      	movlt	r5, #1
 800a24c:	f7ff fd3a 	bl	8009cc4 <_Balloc>
 800a250:	b920      	cbnz	r0, 800a25c <__mdiff+0x5c>
 800a252:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <__mdiff+0x10c>)
 800a254:	4602      	mov	r2, r0
 800a256:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a25a:	e7e5      	b.n	800a228 <__mdiff+0x28>
 800a25c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a260:	6926      	ldr	r6, [r4, #16]
 800a262:	60c5      	str	r5, [r0, #12]
 800a264:	f104 0914 	add.w	r9, r4, #20
 800a268:	f108 0514 	add.w	r5, r8, #20
 800a26c:	f100 0e14 	add.w	lr, r0, #20
 800a270:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a278:	f108 0210 	add.w	r2, r8, #16
 800a27c:	46f2      	mov	sl, lr
 800a27e:	2100      	movs	r1, #0
 800a280:	f859 3b04 	ldr.w	r3, [r9], #4
 800a284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a288:	fa1f f883 	uxth.w	r8, r3
 800a28c:	fa11 f18b 	uxtah	r1, r1, fp
 800a290:	0c1b      	lsrs	r3, r3, #16
 800a292:	eba1 0808 	sub.w	r8, r1, r8
 800a296:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a29a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a29e:	fa1f f888 	uxth.w	r8, r8
 800a2a2:	1419      	asrs	r1, r3, #16
 800a2a4:	454e      	cmp	r6, r9
 800a2a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2aa:	f84a 3b04 	str.w	r3, [sl], #4
 800a2ae:	d8e7      	bhi.n	800a280 <__mdiff+0x80>
 800a2b0:	1b33      	subs	r3, r6, r4
 800a2b2:	3b15      	subs	r3, #21
 800a2b4:	f023 0303 	bic.w	r3, r3, #3
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	3415      	adds	r4, #21
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	bf38      	it	cc
 800a2c0:	2304      	movcc	r3, #4
 800a2c2:	441d      	add	r5, r3
 800a2c4:	4473      	add	r3, lr
 800a2c6:	469e      	mov	lr, r3
 800a2c8:	462e      	mov	r6, r5
 800a2ca:	4566      	cmp	r6, ip
 800a2cc:	d30e      	bcc.n	800a2ec <__mdiff+0xec>
 800a2ce:	f10c 0203 	add.w	r2, ip, #3
 800a2d2:	1b52      	subs	r2, r2, r5
 800a2d4:	f022 0203 	bic.w	r2, r2, #3
 800a2d8:	3d03      	subs	r5, #3
 800a2da:	45ac      	cmp	ip, r5
 800a2dc:	bf38      	it	cc
 800a2de:	2200      	movcc	r2, #0
 800a2e0:	441a      	add	r2, r3
 800a2e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2e6:	b17b      	cbz	r3, 800a308 <__mdiff+0x108>
 800a2e8:	6107      	str	r7, [r0, #16]
 800a2ea:	e7a3      	b.n	800a234 <__mdiff+0x34>
 800a2ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2f0:	fa11 f288 	uxtah	r2, r1, r8
 800a2f4:	1414      	asrs	r4, r2, #16
 800a2f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2fa:	b292      	uxth	r2, r2
 800a2fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a300:	f84e 2b04 	str.w	r2, [lr], #4
 800a304:	1421      	asrs	r1, r4, #16
 800a306:	e7e0      	b.n	800a2ca <__mdiff+0xca>
 800a308:	3f01      	subs	r7, #1
 800a30a:	e7ea      	b.n	800a2e2 <__mdiff+0xe2>
 800a30c:	0800b718 	.word	0x0800b718
 800a310:	0800b729 	.word	0x0800b729

0800a314 <__d2b>:
 800a314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4689      	mov	r9, r1
 800a31a:	2101      	movs	r1, #1
 800a31c:	ec57 6b10 	vmov	r6, r7, d0
 800a320:	4690      	mov	r8, r2
 800a322:	f7ff fccf 	bl	8009cc4 <_Balloc>
 800a326:	4604      	mov	r4, r0
 800a328:	b930      	cbnz	r0, 800a338 <__d2b+0x24>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <__d2b+0xb0>)
 800a32e:	4826      	ldr	r0, [pc, #152]	; (800a3c8 <__d2b+0xb4>)
 800a330:	f240 310a 	movw	r1, #778	; 0x30a
 800a334:	f000 faac 	bl	800a890 <__assert_func>
 800a338:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a33c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a340:	bb35      	cbnz	r5, 800a390 <__d2b+0x7c>
 800a342:	2e00      	cmp	r6, #0
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	d028      	beq.n	800a39a <__d2b+0x86>
 800a348:	4668      	mov	r0, sp
 800a34a:	9600      	str	r6, [sp, #0]
 800a34c:	f7ff fd82 	bl	8009e54 <__lo0bits>
 800a350:	9900      	ldr	r1, [sp, #0]
 800a352:	b300      	cbz	r0, 800a396 <__d2b+0x82>
 800a354:	9a01      	ldr	r2, [sp, #4]
 800a356:	f1c0 0320 	rsb	r3, r0, #32
 800a35a:	fa02 f303 	lsl.w	r3, r2, r3
 800a35e:	430b      	orrs	r3, r1
 800a360:	40c2      	lsrs	r2, r0
 800a362:	6163      	str	r3, [r4, #20]
 800a364:	9201      	str	r2, [sp, #4]
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	61a3      	str	r3, [r4, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bf14      	ite	ne
 800a36e:	2202      	movne	r2, #2
 800a370:	2201      	moveq	r2, #1
 800a372:	6122      	str	r2, [r4, #16]
 800a374:	b1d5      	cbz	r5, 800a3ac <__d2b+0x98>
 800a376:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a37a:	4405      	add	r5, r0
 800a37c:	f8c9 5000 	str.w	r5, [r9]
 800a380:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a384:	f8c8 0000 	str.w	r0, [r8]
 800a388:	4620      	mov	r0, r4
 800a38a:	b003      	add	sp, #12
 800a38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a394:	e7d5      	b.n	800a342 <__d2b+0x2e>
 800a396:	6161      	str	r1, [r4, #20]
 800a398:	e7e5      	b.n	800a366 <__d2b+0x52>
 800a39a:	a801      	add	r0, sp, #4
 800a39c:	f7ff fd5a 	bl	8009e54 <__lo0bits>
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	6163      	str	r3, [r4, #20]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	6122      	str	r2, [r4, #16]
 800a3a8:	3020      	adds	r0, #32
 800a3aa:	e7e3      	b.n	800a374 <__d2b+0x60>
 800a3ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3b4:	f8c9 0000 	str.w	r0, [r9]
 800a3b8:	6918      	ldr	r0, [r3, #16]
 800a3ba:	f7ff fd2b 	bl	8009e14 <__hi0bits>
 800a3be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3c2:	e7df      	b.n	800a384 <__d2b+0x70>
 800a3c4:	0800b718 	.word	0x0800b718
 800a3c8:	0800b729 	.word	0x0800b729

0800a3cc <_calloc_r>:
 800a3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ce:	fba1 2402 	umull	r2, r4, r1, r2
 800a3d2:	b94c      	cbnz	r4, 800a3e8 <_calloc_r+0x1c>
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	9201      	str	r2, [sp, #4]
 800a3d8:	f000 f87a 	bl	800a4d0 <_malloc_r>
 800a3dc:	9a01      	ldr	r2, [sp, #4]
 800a3de:	4605      	mov	r5, r0
 800a3e0:	b930      	cbnz	r0, 800a3f0 <_calloc_r+0x24>
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	b003      	add	sp, #12
 800a3e6:	bd30      	pop	{r4, r5, pc}
 800a3e8:	220c      	movs	r2, #12
 800a3ea:	6002      	str	r2, [r0, #0]
 800a3ec:	2500      	movs	r5, #0
 800a3ee:	e7f8      	b.n	800a3e2 <_calloc_r+0x16>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	f7fe f8c1 	bl	8008578 <memset>
 800a3f6:	e7f4      	b.n	800a3e2 <_calloc_r+0x16>

0800a3f8 <_free_r>:
 800a3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	d044      	beq.n	800a488 <_free_r+0x90>
 800a3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a402:	9001      	str	r0, [sp, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f1a1 0404 	sub.w	r4, r1, #4
 800a40a:	bfb8      	it	lt
 800a40c:	18e4      	addlt	r4, r4, r3
 800a40e:	f000 fa9b 	bl	800a948 <__malloc_lock>
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <_free_r+0x94>)
 800a414:	9801      	ldr	r0, [sp, #4]
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	b933      	cbnz	r3, 800a428 <_free_r+0x30>
 800a41a:	6063      	str	r3, [r4, #4]
 800a41c:	6014      	str	r4, [r2, #0]
 800a41e:	b003      	add	sp, #12
 800a420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a424:	f000 ba96 	b.w	800a954 <__malloc_unlock>
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d908      	bls.n	800a43e <_free_r+0x46>
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	1961      	adds	r1, r4, r5
 800a430:	428b      	cmp	r3, r1
 800a432:	bf01      	itttt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	1949      	addeq	r1, r1, r5
 800a43a:	6021      	streq	r1, [r4, #0]
 800a43c:	e7ed      	b.n	800a41a <_free_r+0x22>
 800a43e:	461a      	mov	r2, r3
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	b10b      	cbz	r3, 800a448 <_free_r+0x50>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d9fa      	bls.n	800a43e <_free_r+0x46>
 800a448:	6811      	ldr	r1, [r2, #0]
 800a44a:	1855      	adds	r5, r2, r1
 800a44c:	42a5      	cmp	r5, r4
 800a44e:	d10b      	bne.n	800a468 <_free_r+0x70>
 800a450:	6824      	ldr	r4, [r4, #0]
 800a452:	4421      	add	r1, r4
 800a454:	1854      	adds	r4, r2, r1
 800a456:	42a3      	cmp	r3, r4
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	d1e0      	bne.n	800a41e <_free_r+0x26>
 800a45c:	681c      	ldr	r4, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	6053      	str	r3, [r2, #4]
 800a462:	4421      	add	r1, r4
 800a464:	6011      	str	r1, [r2, #0]
 800a466:	e7da      	b.n	800a41e <_free_r+0x26>
 800a468:	d902      	bls.n	800a470 <_free_r+0x78>
 800a46a:	230c      	movs	r3, #12
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	e7d6      	b.n	800a41e <_free_r+0x26>
 800a470:	6825      	ldr	r5, [r4, #0]
 800a472:	1961      	adds	r1, r4, r5
 800a474:	428b      	cmp	r3, r1
 800a476:	bf04      	itt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	bf04      	itt	eq
 800a480:	1949      	addeq	r1, r1, r5
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	6054      	str	r4, [r2, #4]
 800a486:	e7ca      	b.n	800a41e <_free_r+0x26>
 800a488:	b003      	add	sp, #12
 800a48a:	bd30      	pop	{r4, r5, pc}
 800a48c:	20000524 	.word	0x20000524

0800a490 <sbrk_aligned>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	4e0e      	ldr	r6, [pc, #56]	; (800a4cc <sbrk_aligned+0x3c>)
 800a494:	460c      	mov	r4, r1
 800a496:	6831      	ldr	r1, [r6, #0]
 800a498:	4605      	mov	r5, r0
 800a49a:	b911      	cbnz	r1, 800a4a2 <sbrk_aligned+0x12>
 800a49c:	f000 f9e8 	bl	800a870 <_sbrk_r>
 800a4a0:	6030      	str	r0, [r6, #0]
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f9e3 	bl	800a870 <_sbrk_r>
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	d00a      	beq.n	800a4c4 <sbrk_aligned+0x34>
 800a4ae:	1cc4      	adds	r4, r0, #3
 800a4b0:	f024 0403 	bic.w	r4, r4, #3
 800a4b4:	42a0      	cmp	r0, r4
 800a4b6:	d007      	beq.n	800a4c8 <sbrk_aligned+0x38>
 800a4b8:	1a21      	subs	r1, r4, r0
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 f9d8 	bl	800a870 <_sbrk_r>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d101      	bne.n	800a4c8 <sbrk_aligned+0x38>
 800a4c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	20000528 	.word	0x20000528

0800a4d0 <_malloc_r>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	1ccd      	adds	r5, r1, #3
 800a4d6:	f025 0503 	bic.w	r5, r5, #3
 800a4da:	3508      	adds	r5, #8
 800a4dc:	2d0c      	cmp	r5, #12
 800a4de:	bf38      	it	cc
 800a4e0:	250c      	movcc	r5, #12
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	db01      	blt.n	800a4ec <_malloc_r+0x1c>
 800a4e8:	42a9      	cmp	r1, r5
 800a4ea:	d905      	bls.n	800a4f8 <_malloc_r+0x28>
 800a4ec:	230c      	movs	r3, #12
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	2600      	movs	r6, #0
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	4e2e      	ldr	r6, [pc, #184]	; (800a5b4 <_malloc_r+0xe4>)
 800a4fa:	f000 fa25 	bl	800a948 <__malloc_lock>
 800a4fe:	6833      	ldr	r3, [r6, #0]
 800a500:	461c      	mov	r4, r3
 800a502:	bb34      	cbnz	r4, 800a552 <_malloc_r+0x82>
 800a504:	4629      	mov	r1, r5
 800a506:	4638      	mov	r0, r7
 800a508:	f7ff ffc2 	bl	800a490 <sbrk_aligned>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	4604      	mov	r4, r0
 800a510:	d14d      	bne.n	800a5ae <_malloc_r+0xde>
 800a512:	6834      	ldr	r4, [r6, #0]
 800a514:	4626      	mov	r6, r4
 800a516:	2e00      	cmp	r6, #0
 800a518:	d140      	bne.n	800a59c <_malloc_r+0xcc>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	4631      	mov	r1, r6
 800a51e:	4638      	mov	r0, r7
 800a520:	eb04 0803 	add.w	r8, r4, r3
 800a524:	f000 f9a4 	bl	800a870 <_sbrk_r>
 800a528:	4580      	cmp	r8, r0
 800a52a:	d13a      	bne.n	800a5a2 <_malloc_r+0xd2>
 800a52c:	6821      	ldr	r1, [r4, #0]
 800a52e:	3503      	adds	r5, #3
 800a530:	1a6d      	subs	r5, r5, r1
 800a532:	f025 0503 	bic.w	r5, r5, #3
 800a536:	3508      	adds	r5, #8
 800a538:	2d0c      	cmp	r5, #12
 800a53a:	bf38      	it	cc
 800a53c:	250c      	movcc	r5, #12
 800a53e:	4629      	mov	r1, r5
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff ffa5 	bl	800a490 <sbrk_aligned>
 800a546:	3001      	adds	r0, #1
 800a548:	d02b      	beq.n	800a5a2 <_malloc_r+0xd2>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	442b      	add	r3, r5
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	e00e      	b.n	800a570 <_malloc_r+0xa0>
 800a552:	6822      	ldr	r2, [r4, #0]
 800a554:	1b52      	subs	r2, r2, r5
 800a556:	d41e      	bmi.n	800a596 <_malloc_r+0xc6>
 800a558:	2a0b      	cmp	r2, #11
 800a55a:	d916      	bls.n	800a58a <_malloc_r+0xba>
 800a55c:	1961      	adds	r1, r4, r5
 800a55e:	42a3      	cmp	r3, r4
 800a560:	6025      	str	r5, [r4, #0]
 800a562:	bf18      	it	ne
 800a564:	6059      	strne	r1, [r3, #4]
 800a566:	6863      	ldr	r3, [r4, #4]
 800a568:	bf08      	it	eq
 800a56a:	6031      	streq	r1, [r6, #0]
 800a56c:	5162      	str	r2, [r4, r5]
 800a56e:	604b      	str	r3, [r1, #4]
 800a570:	4638      	mov	r0, r7
 800a572:	f104 060b 	add.w	r6, r4, #11
 800a576:	f000 f9ed 	bl	800a954 <__malloc_unlock>
 800a57a:	f026 0607 	bic.w	r6, r6, #7
 800a57e:	1d23      	adds	r3, r4, #4
 800a580:	1af2      	subs	r2, r6, r3
 800a582:	d0b6      	beq.n	800a4f2 <_malloc_r+0x22>
 800a584:	1b9b      	subs	r3, r3, r6
 800a586:	50a3      	str	r3, [r4, r2]
 800a588:	e7b3      	b.n	800a4f2 <_malloc_r+0x22>
 800a58a:	6862      	ldr	r2, [r4, #4]
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	bf0c      	ite	eq
 800a590:	6032      	streq	r2, [r6, #0]
 800a592:	605a      	strne	r2, [r3, #4]
 800a594:	e7ec      	b.n	800a570 <_malloc_r+0xa0>
 800a596:	4623      	mov	r3, r4
 800a598:	6864      	ldr	r4, [r4, #4]
 800a59a:	e7b2      	b.n	800a502 <_malloc_r+0x32>
 800a59c:	4634      	mov	r4, r6
 800a59e:	6876      	ldr	r6, [r6, #4]
 800a5a0:	e7b9      	b.n	800a516 <_malloc_r+0x46>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	603b      	str	r3, [r7, #0]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f000 f9d4 	bl	800a954 <__malloc_unlock>
 800a5ac:	e7a1      	b.n	800a4f2 <_malloc_r+0x22>
 800a5ae:	6025      	str	r5, [r4, #0]
 800a5b0:	e7de      	b.n	800a570 <_malloc_r+0xa0>
 800a5b2:	bf00      	nop
 800a5b4:	20000524 	.word	0x20000524

0800a5b8 <__ssputs_r>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	688e      	ldr	r6, [r1, #8]
 800a5be:	429e      	cmp	r6, r3
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	d838      	bhi.n	800a63c <__ssputs_r+0x84>
 800a5ca:	898a      	ldrh	r2, [r1, #12]
 800a5cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d0:	d032      	beq.n	800a638 <__ssputs_r+0x80>
 800a5d2:	6825      	ldr	r5, [r4, #0]
 800a5d4:	6909      	ldr	r1, [r1, #16]
 800a5d6:	eba5 0901 	sub.w	r9, r5, r1
 800a5da:	6965      	ldr	r5, [r4, #20]
 800a5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	444b      	add	r3, r9
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	bf38      	it	cc
 800a5ee:	461d      	movcc	r5, r3
 800a5f0:	0553      	lsls	r3, r2, #21
 800a5f2:	d531      	bpl.n	800a658 <__ssputs_r+0xa0>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7ff ff6b 	bl	800a4d0 <_malloc_r>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b950      	cbnz	r0, 800a614 <__ssputs_r+0x5c>
 800a5fe:	230c      	movs	r3, #12
 800a600:	f8ca 3000 	str.w	r3, [sl]
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	6921      	ldr	r1, [r4, #16]
 800a616:	464a      	mov	r2, r9
 800a618:	f7fd ffa0 	bl	800855c <memcpy>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	6126      	str	r6, [r4, #16]
 800a62a:	6165      	str	r5, [r4, #20]
 800a62c:	444e      	add	r6, r9
 800a62e:	eba5 0509 	sub.w	r5, r5, r9
 800a632:	6026      	str	r6, [r4, #0]
 800a634:	60a5      	str	r5, [r4, #8]
 800a636:	463e      	mov	r6, r7
 800a638:	42be      	cmp	r6, r7
 800a63a:	d900      	bls.n	800a63e <__ssputs_r+0x86>
 800a63c:	463e      	mov	r6, r7
 800a63e:	6820      	ldr	r0, [r4, #0]
 800a640:	4632      	mov	r2, r6
 800a642:	4641      	mov	r1, r8
 800a644:	f000 f966 	bl	800a914 <memmove>
 800a648:	68a3      	ldr	r3, [r4, #8]
 800a64a:	1b9b      	subs	r3, r3, r6
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	4433      	add	r3, r6
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	2000      	movs	r0, #0
 800a656:	e7db      	b.n	800a610 <__ssputs_r+0x58>
 800a658:	462a      	mov	r2, r5
 800a65a:	f000 f981 	bl	800a960 <_realloc_r>
 800a65e:	4606      	mov	r6, r0
 800a660:	2800      	cmp	r0, #0
 800a662:	d1e1      	bne.n	800a628 <__ssputs_r+0x70>
 800a664:	6921      	ldr	r1, [r4, #16]
 800a666:	4650      	mov	r0, sl
 800a668:	f7ff fec6 	bl	800a3f8 <_free_r>
 800a66c:	e7c7      	b.n	800a5fe <__ssputs_r+0x46>
	...

0800a670 <_svfiprintf_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4698      	mov	r8, r3
 800a676:	898b      	ldrh	r3, [r1, #12]
 800a678:	061b      	lsls	r3, r3, #24
 800a67a:	b09d      	sub	sp, #116	; 0x74
 800a67c:	4607      	mov	r7, r0
 800a67e:	460d      	mov	r5, r1
 800a680:	4614      	mov	r4, r2
 800a682:	d50e      	bpl.n	800a6a2 <_svfiprintf_r+0x32>
 800a684:	690b      	ldr	r3, [r1, #16]
 800a686:	b963      	cbnz	r3, 800a6a2 <_svfiprintf_r+0x32>
 800a688:	2140      	movs	r1, #64	; 0x40
 800a68a:	f7ff ff21 	bl	800a4d0 <_malloc_r>
 800a68e:	6028      	str	r0, [r5, #0]
 800a690:	6128      	str	r0, [r5, #16]
 800a692:	b920      	cbnz	r0, 800a69e <_svfiprintf_r+0x2e>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e0d1      	b.n	800a842 <_svfiprintf_r+0x1d2>
 800a69e:	2340      	movs	r3, #64	; 0x40
 800a6a0:	616b      	str	r3, [r5, #20]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a6:	2320      	movs	r3, #32
 800a6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b0:	2330      	movs	r3, #48	; 0x30
 800a6b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a85c <_svfiprintf_r+0x1ec>
 800a6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ba:	f04f 0901 	mov.w	r9, #1
 800a6be:	4623      	mov	r3, r4
 800a6c0:	469a      	mov	sl, r3
 800a6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c6:	b10a      	cbz	r2, 800a6cc <_svfiprintf_r+0x5c>
 800a6c8:	2a25      	cmp	r2, #37	; 0x25
 800a6ca:	d1f9      	bne.n	800a6c0 <_svfiprintf_r+0x50>
 800a6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d0:	d00b      	beq.n	800a6ea <_svfiprintf_r+0x7a>
 800a6d2:	465b      	mov	r3, fp
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff ff6d 	bl	800a5b8 <__ssputs_r>
 800a6de:	3001      	adds	r0, #1
 800a6e0:	f000 80aa 	beq.w	800a838 <_svfiprintf_r+0x1c8>
 800a6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e6:	445a      	add	r2, fp
 800a6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 80a2 	beq.w	800a838 <_svfiprintf_r+0x1c8>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fe:	f10a 0a01 	add.w	sl, sl, #1
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a70a:	931a      	str	r3, [sp, #104]	; 0x68
 800a70c:	4654      	mov	r4, sl
 800a70e:	2205      	movs	r2, #5
 800a710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a714:	4851      	ldr	r0, [pc, #324]	; (800a85c <_svfiprintf_r+0x1ec>)
 800a716:	f7f5 fd6b 	bl	80001f0 <memchr>
 800a71a:	9a04      	ldr	r2, [sp, #16]
 800a71c:	b9d8      	cbnz	r0, 800a756 <_svfiprintf_r+0xe6>
 800a71e:	06d0      	lsls	r0, r2, #27
 800a720:	bf44      	itt	mi
 800a722:	2320      	movmi	r3, #32
 800a724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a728:	0711      	lsls	r1, r2, #28
 800a72a:	bf44      	itt	mi
 800a72c:	232b      	movmi	r3, #43	; 0x2b
 800a72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a732:	f89a 3000 	ldrb.w	r3, [sl]
 800a736:	2b2a      	cmp	r3, #42	; 0x2a
 800a738:	d015      	beq.n	800a766 <_svfiprintf_r+0xf6>
 800a73a:	9a07      	ldr	r2, [sp, #28]
 800a73c:	4654      	mov	r4, sl
 800a73e:	2000      	movs	r0, #0
 800a740:	f04f 0c0a 	mov.w	ip, #10
 800a744:	4621      	mov	r1, r4
 800a746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74a:	3b30      	subs	r3, #48	; 0x30
 800a74c:	2b09      	cmp	r3, #9
 800a74e:	d94e      	bls.n	800a7ee <_svfiprintf_r+0x17e>
 800a750:	b1b0      	cbz	r0, 800a780 <_svfiprintf_r+0x110>
 800a752:	9207      	str	r2, [sp, #28]
 800a754:	e014      	b.n	800a780 <_svfiprintf_r+0x110>
 800a756:	eba0 0308 	sub.w	r3, r0, r8
 800a75a:	fa09 f303 	lsl.w	r3, r9, r3
 800a75e:	4313      	orrs	r3, r2
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	46a2      	mov	sl, r4
 800a764:	e7d2      	b.n	800a70c <_svfiprintf_r+0x9c>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	1d19      	adds	r1, r3, #4
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	9103      	str	r1, [sp, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfbb      	ittet	lt
 800a772:	425b      	neglt	r3, r3
 800a774:	f042 0202 	orrlt.w	r2, r2, #2
 800a778:	9307      	strge	r3, [sp, #28]
 800a77a:	9307      	strlt	r3, [sp, #28]
 800a77c:	bfb8      	it	lt
 800a77e:	9204      	strlt	r2, [sp, #16]
 800a780:	7823      	ldrb	r3, [r4, #0]
 800a782:	2b2e      	cmp	r3, #46	; 0x2e
 800a784:	d10c      	bne.n	800a7a0 <_svfiprintf_r+0x130>
 800a786:	7863      	ldrb	r3, [r4, #1]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d135      	bne.n	800a7f8 <_svfiprintf_r+0x188>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	1d1a      	adds	r2, r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	9203      	str	r2, [sp, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfb8      	it	lt
 800a798:	f04f 33ff 	movlt.w	r3, #4294967295
 800a79c:	3402      	adds	r4, #2
 800a79e:	9305      	str	r3, [sp, #20]
 800a7a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a86c <_svfiprintf_r+0x1fc>
 800a7a4:	7821      	ldrb	r1, [r4, #0]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	f7f5 fd21 	bl	80001f0 <memchr>
 800a7ae:	b140      	cbz	r0, 800a7c2 <_svfiprintf_r+0x152>
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	eba0 000a 	sub.w	r0, r0, sl
 800a7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	4303      	orrs	r3, r0
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4826      	ldr	r0, [pc, #152]	; (800a860 <_svfiprintf_r+0x1f0>)
 800a7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7cc:	2206      	movs	r2, #6
 800a7ce:	f7f5 fd0f 	bl	80001f0 <memchr>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d038      	beq.n	800a848 <_svfiprintf_r+0x1d8>
 800a7d6:	4b23      	ldr	r3, [pc, #140]	; (800a864 <_svfiprintf_r+0x1f4>)
 800a7d8:	bb1b      	cbnz	r3, 800a822 <_svfiprintf_r+0x1b2>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	4433      	add	r3, r6
 800a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ec:	e767      	b.n	800a6be <_svfiprintf_r+0x4e>
 800a7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7a5      	b.n	800a744 <_svfiprintf_r+0xd4>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	3401      	adds	r4, #1
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	4619      	mov	r1, r3
 800a800:	f04f 0c0a 	mov.w	ip, #10
 800a804:	4620      	mov	r0, r4
 800a806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80a:	3a30      	subs	r2, #48	; 0x30
 800a80c:	2a09      	cmp	r2, #9
 800a80e:	d903      	bls.n	800a818 <_svfiprintf_r+0x1a8>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c5      	beq.n	800a7a0 <_svfiprintf_r+0x130>
 800a814:	9105      	str	r1, [sp, #20]
 800a816:	e7c3      	b.n	800a7a0 <_svfiprintf_r+0x130>
 800a818:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81c:	4604      	mov	r4, r0
 800a81e:	2301      	movs	r3, #1
 800a820:	e7f0      	b.n	800a804 <_svfiprintf_r+0x194>
 800a822:	ab03      	add	r3, sp, #12
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	462a      	mov	r2, r5
 800a828:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <_svfiprintf_r+0x1f8>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	4638      	mov	r0, r7
 800a82e:	f7fd ff4b 	bl	80086c8 <_printf_float>
 800a832:	1c42      	adds	r2, r0, #1
 800a834:	4606      	mov	r6, r0
 800a836:	d1d6      	bne.n	800a7e6 <_svfiprintf_r+0x176>
 800a838:	89ab      	ldrh	r3, [r5, #12]
 800a83a:	065b      	lsls	r3, r3, #25
 800a83c:	f53f af2c 	bmi.w	800a698 <_svfiprintf_r+0x28>
 800a840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a842:	b01d      	add	sp, #116	; 0x74
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	ab03      	add	r3, sp, #12
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <_svfiprintf_r+0x1f8>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	4638      	mov	r0, r7
 800a854:	f7fe f9dc 	bl	8008c10 <_printf_i>
 800a858:	e7eb      	b.n	800a832 <_svfiprintf_r+0x1c2>
 800a85a:	bf00      	nop
 800a85c:	0800b884 	.word	0x0800b884
 800a860:	0800b88e 	.word	0x0800b88e
 800a864:	080086c9 	.word	0x080086c9
 800a868:	0800a5b9 	.word	0x0800a5b9
 800a86c:	0800b88a 	.word	0x0800b88a

0800a870 <_sbrk_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d06      	ldr	r5, [pc, #24]	; (800a88c <_sbrk_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f8 faae 	bl	8002ddc <_sbrk>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_sbrk_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_sbrk_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	2000052c 	.word	0x2000052c

0800a890 <__assert_func>:
 800a890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a892:	4614      	mov	r4, r2
 800a894:	461a      	mov	r2, r3
 800a896:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <__assert_func+0x2c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4605      	mov	r5, r0
 800a89c:	68d8      	ldr	r0, [r3, #12]
 800a89e:	b14c      	cbz	r4, 800a8b4 <__assert_func+0x24>
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <__assert_func+0x30>)
 800a8a2:	9100      	str	r1, [sp, #0]
 800a8a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8a8:	4906      	ldr	r1, [pc, #24]	; (800a8c4 <__assert_func+0x34>)
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	f000 f80e 	bl	800a8cc <fiprintf>
 800a8b0:	f000 faac 	bl	800ae0c <abort>
 800a8b4:	4b04      	ldr	r3, [pc, #16]	; (800a8c8 <__assert_func+0x38>)
 800a8b6:	461c      	mov	r4, r3
 800a8b8:	e7f3      	b.n	800a8a2 <__assert_func+0x12>
 800a8ba:	bf00      	nop
 800a8bc:	20000014 	.word	0x20000014
 800a8c0:	0800b895 	.word	0x0800b895
 800a8c4:	0800b8a2 	.word	0x0800b8a2
 800a8c8:	0800b8d0 	.word	0x0800b8d0

0800a8cc <fiprintf>:
 800a8cc:	b40e      	push	{r1, r2, r3}
 800a8ce:	b503      	push	{r0, r1, lr}
 800a8d0:	4601      	mov	r1, r0
 800a8d2:	ab03      	add	r3, sp, #12
 800a8d4:	4805      	ldr	r0, [pc, #20]	; (800a8ec <fiprintf+0x20>)
 800a8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	f000 f897 	bl	800aa10 <_vfiprintf_r>
 800a8e2:	b002      	add	sp, #8
 800a8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8e8:	b003      	add	sp, #12
 800a8ea:	4770      	bx	lr
 800a8ec:	20000014 	.word	0x20000014

0800a8f0 <__ascii_mbtowc>:
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	b901      	cbnz	r1, 800a8f6 <__ascii_mbtowc+0x6>
 800a8f4:	a901      	add	r1, sp, #4
 800a8f6:	b142      	cbz	r2, 800a90a <__ascii_mbtowc+0x1a>
 800a8f8:	b14b      	cbz	r3, 800a90e <__ascii_mbtowc+0x1e>
 800a8fa:	7813      	ldrb	r3, [r2, #0]
 800a8fc:	600b      	str	r3, [r1, #0]
 800a8fe:	7812      	ldrb	r2, [r2, #0]
 800a900:	1e10      	subs	r0, r2, #0
 800a902:	bf18      	it	ne
 800a904:	2001      	movne	r0, #1
 800a906:	b002      	add	sp, #8
 800a908:	4770      	bx	lr
 800a90a:	4610      	mov	r0, r2
 800a90c:	e7fb      	b.n	800a906 <__ascii_mbtowc+0x16>
 800a90e:	f06f 0001 	mvn.w	r0, #1
 800a912:	e7f8      	b.n	800a906 <__ascii_mbtowc+0x16>

0800a914 <memmove>:
 800a914:	4288      	cmp	r0, r1
 800a916:	b510      	push	{r4, lr}
 800a918:	eb01 0402 	add.w	r4, r1, r2
 800a91c:	d902      	bls.n	800a924 <memmove+0x10>
 800a91e:	4284      	cmp	r4, r0
 800a920:	4623      	mov	r3, r4
 800a922:	d807      	bhi.n	800a934 <memmove+0x20>
 800a924:	1e43      	subs	r3, r0, #1
 800a926:	42a1      	cmp	r1, r4
 800a928:	d008      	beq.n	800a93c <memmove+0x28>
 800a92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a932:	e7f8      	b.n	800a926 <memmove+0x12>
 800a934:	4402      	add	r2, r0
 800a936:	4601      	mov	r1, r0
 800a938:	428a      	cmp	r2, r1
 800a93a:	d100      	bne.n	800a93e <memmove+0x2a>
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a946:	e7f7      	b.n	800a938 <memmove+0x24>

0800a948 <__malloc_lock>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__malloc_lock+0x8>)
 800a94a:	f000 bc1f 	b.w	800b18c <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	20000530 	.word	0x20000530

0800a954 <__malloc_unlock>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__malloc_unlock+0x8>)
 800a956:	f000 bc1a 	b.w	800b18e <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	20000530 	.word	0x20000530

0800a960 <_realloc_r>:
 800a960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a964:	4680      	mov	r8, r0
 800a966:	4614      	mov	r4, r2
 800a968:	460e      	mov	r6, r1
 800a96a:	b921      	cbnz	r1, 800a976 <_realloc_r+0x16>
 800a96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a970:	4611      	mov	r1, r2
 800a972:	f7ff bdad 	b.w	800a4d0 <_malloc_r>
 800a976:	b92a      	cbnz	r2, 800a984 <_realloc_r+0x24>
 800a978:	f7ff fd3e 	bl	800a3f8 <_free_r>
 800a97c:	4625      	mov	r5, r4
 800a97e:	4628      	mov	r0, r5
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	f000 fc6a 	bl	800b25c <_malloc_usable_size_r>
 800a988:	4284      	cmp	r4, r0
 800a98a:	4607      	mov	r7, r0
 800a98c:	d802      	bhi.n	800a994 <_realloc_r+0x34>
 800a98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a992:	d812      	bhi.n	800a9ba <_realloc_r+0x5a>
 800a994:	4621      	mov	r1, r4
 800a996:	4640      	mov	r0, r8
 800a998:	f7ff fd9a 	bl	800a4d0 <_malloc_r>
 800a99c:	4605      	mov	r5, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d0ed      	beq.n	800a97e <_realloc_r+0x1e>
 800a9a2:	42bc      	cmp	r4, r7
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	bf28      	it	cs
 800a9aa:	463a      	movcs	r2, r7
 800a9ac:	f7fd fdd6 	bl	800855c <memcpy>
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7ff fd20 	bl	800a3f8 <_free_r>
 800a9b8:	e7e1      	b.n	800a97e <_realloc_r+0x1e>
 800a9ba:	4635      	mov	r5, r6
 800a9bc:	e7df      	b.n	800a97e <_realloc_r+0x1e>

0800a9be <__sfputc_r>:
 800a9be:	6893      	ldr	r3, [r2, #8]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	b410      	push	{r4}
 800a9c6:	6093      	str	r3, [r2, #8]
 800a9c8:	da08      	bge.n	800a9dc <__sfputc_r+0x1e>
 800a9ca:	6994      	ldr	r4, [r2, #24]
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	db01      	blt.n	800a9d4 <__sfputc_r+0x16>
 800a9d0:	290a      	cmp	r1, #10
 800a9d2:	d103      	bne.n	800a9dc <__sfputc_r+0x1e>
 800a9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9d8:	f000 b94a 	b.w	800ac70 <__swbuf_r>
 800a9dc:	6813      	ldr	r3, [r2, #0]
 800a9de:	1c58      	adds	r0, r3, #1
 800a9e0:	6010      	str	r0, [r2, #0]
 800a9e2:	7019      	strb	r1, [r3, #0]
 800a9e4:	4608      	mov	r0, r1
 800a9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <__sfputs_r>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	4614      	mov	r4, r2
 800a9f4:	18d5      	adds	r5, r2, r3
 800a9f6:	42ac      	cmp	r4, r5
 800a9f8:	d101      	bne.n	800a9fe <__sfputs_r+0x12>
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e007      	b.n	800aa0e <__sfputs_r+0x22>
 800a9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa02:	463a      	mov	r2, r7
 800aa04:	4630      	mov	r0, r6
 800aa06:	f7ff ffda 	bl	800a9be <__sfputc_r>
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	d1f3      	bne.n	800a9f6 <__sfputs_r+0xa>
 800aa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa10 <_vfiprintf_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	460d      	mov	r5, r1
 800aa16:	b09d      	sub	sp, #116	; 0x74
 800aa18:	4614      	mov	r4, r2
 800aa1a:	4698      	mov	r8, r3
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	b118      	cbz	r0, 800aa28 <_vfiprintf_r+0x18>
 800aa20:	6983      	ldr	r3, [r0, #24]
 800aa22:	b90b      	cbnz	r3, 800aa28 <_vfiprintf_r+0x18>
 800aa24:	f000 fb14 	bl	800b050 <__sinit>
 800aa28:	4b89      	ldr	r3, [pc, #548]	; (800ac50 <_vfiprintf_r+0x240>)
 800aa2a:	429d      	cmp	r5, r3
 800aa2c:	d11b      	bne.n	800aa66 <_vfiprintf_r+0x56>
 800aa2e:	6875      	ldr	r5, [r6, #4]
 800aa30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa32:	07d9      	lsls	r1, r3, #31
 800aa34:	d405      	bmi.n	800aa42 <_vfiprintf_r+0x32>
 800aa36:	89ab      	ldrh	r3, [r5, #12]
 800aa38:	059a      	lsls	r2, r3, #22
 800aa3a:	d402      	bmi.n	800aa42 <_vfiprintf_r+0x32>
 800aa3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa3e:	f000 fba5 	bl	800b18c <__retarget_lock_acquire_recursive>
 800aa42:	89ab      	ldrh	r3, [r5, #12]
 800aa44:	071b      	lsls	r3, r3, #28
 800aa46:	d501      	bpl.n	800aa4c <_vfiprintf_r+0x3c>
 800aa48:	692b      	ldr	r3, [r5, #16]
 800aa4a:	b9eb      	cbnz	r3, 800aa88 <_vfiprintf_r+0x78>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 f96e 	bl	800ad30 <__swsetup_r>
 800aa54:	b1c0      	cbz	r0, 800aa88 <_vfiprintf_r+0x78>
 800aa56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa58:	07dc      	lsls	r4, r3, #31
 800aa5a:	d50e      	bpl.n	800aa7a <_vfiprintf_r+0x6a>
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa60:	b01d      	add	sp, #116	; 0x74
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	4b7b      	ldr	r3, [pc, #492]	; (800ac54 <_vfiprintf_r+0x244>)
 800aa68:	429d      	cmp	r5, r3
 800aa6a:	d101      	bne.n	800aa70 <_vfiprintf_r+0x60>
 800aa6c:	68b5      	ldr	r5, [r6, #8]
 800aa6e:	e7df      	b.n	800aa30 <_vfiprintf_r+0x20>
 800aa70:	4b79      	ldr	r3, [pc, #484]	; (800ac58 <_vfiprintf_r+0x248>)
 800aa72:	429d      	cmp	r5, r3
 800aa74:	bf08      	it	eq
 800aa76:	68f5      	ldreq	r5, [r6, #12]
 800aa78:	e7da      	b.n	800aa30 <_vfiprintf_r+0x20>
 800aa7a:	89ab      	ldrh	r3, [r5, #12]
 800aa7c:	0598      	lsls	r0, r3, #22
 800aa7e:	d4ed      	bmi.n	800aa5c <_vfiprintf_r+0x4c>
 800aa80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa82:	f000 fb84 	bl	800b18e <__retarget_lock_release_recursive>
 800aa86:	e7e9      	b.n	800aa5c <_vfiprintf_r+0x4c>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa92:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa96:	2330      	movs	r3, #48	; 0x30
 800aa98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac5c <_vfiprintf_r+0x24c>
 800aa9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaa0:	f04f 0901 	mov.w	r9, #1
 800aaa4:	4623      	mov	r3, r4
 800aaa6:	469a      	mov	sl, r3
 800aaa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaac:	b10a      	cbz	r2, 800aab2 <_vfiprintf_r+0xa2>
 800aaae:	2a25      	cmp	r2, #37	; 0x25
 800aab0:	d1f9      	bne.n	800aaa6 <_vfiprintf_r+0x96>
 800aab2:	ebba 0b04 	subs.w	fp, sl, r4
 800aab6:	d00b      	beq.n	800aad0 <_vfiprintf_r+0xc0>
 800aab8:	465b      	mov	r3, fp
 800aaba:	4622      	mov	r2, r4
 800aabc:	4629      	mov	r1, r5
 800aabe:	4630      	mov	r0, r6
 800aac0:	f7ff ff94 	bl	800a9ec <__sfputs_r>
 800aac4:	3001      	adds	r0, #1
 800aac6:	f000 80aa 	beq.w	800ac1e <_vfiprintf_r+0x20e>
 800aaca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aacc:	445a      	add	r2, fp
 800aace:	9209      	str	r2, [sp, #36]	; 0x24
 800aad0:	f89a 3000 	ldrb.w	r3, [sl]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 80a2 	beq.w	800ac1e <_vfiprintf_r+0x20e>
 800aada:	2300      	movs	r3, #0
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aae4:	f10a 0a01 	add.w	sl, sl, #1
 800aae8:	9304      	str	r3, [sp, #16]
 800aaea:	9307      	str	r3, [sp, #28]
 800aaec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaf0:	931a      	str	r3, [sp, #104]	; 0x68
 800aaf2:	4654      	mov	r4, sl
 800aaf4:	2205      	movs	r2, #5
 800aaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafa:	4858      	ldr	r0, [pc, #352]	; (800ac5c <_vfiprintf_r+0x24c>)
 800aafc:	f7f5 fb78 	bl	80001f0 <memchr>
 800ab00:	9a04      	ldr	r2, [sp, #16]
 800ab02:	b9d8      	cbnz	r0, 800ab3c <_vfiprintf_r+0x12c>
 800ab04:	06d1      	lsls	r1, r2, #27
 800ab06:	bf44      	itt	mi
 800ab08:	2320      	movmi	r3, #32
 800ab0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab0e:	0713      	lsls	r3, r2, #28
 800ab10:	bf44      	itt	mi
 800ab12:	232b      	movmi	r3, #43	; 0x2b
 800ab14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab18:	f89a 3000 	ldrb.w	r3, [sl]
 800ab1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1e:	d015      	beq.n	800ab4c <_vfiprintf_r+0x13c>
 800ab20:	9a07      	ldr	r2, [sp, #28]
 800ab22:	4654      	mov	r4, sl
 800ab24:	2000      	movs	r0, #0
 800ab26:	f04f 0c0a 	mov.w	ip, #10
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab30:	3b30      	subs	r3, #48	; 0x30
 800ab32:	2b09      	cmp	r3, #9
 800ab34:	d94e      	bls.n	800abd4 <_vfiprintf_r+0x1c4>
 800ab36:	b1b0      	cbz	r0, 800ab66 <_vfiprintf_r+0x156>
 800ab38:	9207      	str	r2, [sp, #28]
 800ab3a:	e014      	b.n	800ab66 <_vfiprintf_r+0x156>
 800ab3c:	eba0 0308 	sub.w	r3, r0, r8
 800ab40:	fa09 f303 	lsl.w	r3, r9, r3
 800ab44:	4313      	orrs	r3, r2
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	46a2      	mov	sl, r4
 800ab4a:	e7d2      	b.n	800aaf2 <_vfiprintf_r+0xe2>
 800ab4c:	9b03      	ldr	r3, [sp, #12]
 800ab4e:	1d19      	adds	r1, r3, #4
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	9103      	str	r1, [sp, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bfbb      	ittet	lt
 800ab58:	425b      	neglt	r3, r3
 800ab5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ab5e:	9307      	strge	r3, [sp, #28]
 800ab60:	9307      	strlt	r3, [sp, #28]
 800ab62:	bfb8      	it	lt
 800ab64:	9204      	strlt	r2, [sp, #16]
 800ab66:	7823      	ldrb	r3, [r4, #0]
 800ab68:	2b2e      	cmp	r3, #46	; 0x2e
 800ab6a:	d10c      	bne.n	800ab86 <_vfiprintf_r+0x176>
 800ab6c:	7863      	ldrb	r3, [r4, #1]
 800ab6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab70:	d135      	bne.n	800abde <_vfiprintf_r+0x1ce>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	1d1a      	adds	r2, r3, #4
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	9203      	str	r2, [sp, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	bfb8      	it	lt
 800ab7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab82:	3402      	adds	r4, #2
 800ab84:	9305      	str	r3, [sp, #20]
 800ab86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac6c <_vfiprintf_r+0x25c>
 800ab8a:	7821      	ldrb	r1, [r4, #0]
 800ab8c:	2203      	movs	r2, #3
 800ab8e:	4650      	mov	r0, sl
 800ab90:	f7f5 fb2e 	bl	80001f0 <memchr>
 800ab94:	b140      	cbz	r0, 800aba8 <_vfiprintf_r+0x198>
 800ab96:	2340      	movs	r3, #64	; 0x40
 800ab98:	eba0 000a 	sub.w	r0, r0, sl
 800ab9c:	fa03 f000 	lsl.w	r0, r3, r0
 800aba0:	9b04      	ldr	r3, [sp, #16]
 800aba2:	4303      	orrs	r3, r0
 800aba4:	3401      	adds	r4, #1
 800aba6:	9304      	str	r3, [sp, #16]
 800aba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abac:	482c      	ldr	r0, [pc, #176]	; (800ac60 <_vfiprintf_r+0x250>)
 800abae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abb2:	2206      	movs	r2, #6
 800abb4:	f7f5 fb1c 	bl	80001f0 <memchr>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d03f      	beq.n	800ac3c <_vfiprintf_r+0x22c>
 800abbc:	4b29      	ldr	r3, [pc, #164]	; (800ac64 <_vfiprintf_r+0x254>)
 800abbe:	bb1b      	cbnz	r3, 800ac08 <_vfiprintf_r+0x1f8>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	3307      	adds	r3, #7
 800abc4:	f023 0307 	bic.w	r3, r3, #7
 800abc8:	3308      	adds	r3, #8
 800abca:	9303      	str	r3, [sp, #12]
 800abcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abce:	443b      	add	r3, r7
 800abd0:	9309      	str	r3, [sp, #36]	; 0x24
 800abd2:	e767      	b.n	800aaa4 <_vfiprintf_r+0x94>
 800abd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800abd8:	460c      	mov	r4, r1
 800abda:	2001      	movs	r0, #1
 800abdc:	e7a5      	b.n	800ab2a <_vfiprintf_r+0x11a>
 800abde:	2300      	movs	r3, #0
 800abe0:	3401      	adds	r4, #1
 800abe2:	9305      	str	r3, [sp, #20]
 800abe4:	4619      	mov	r1, r3
 800abe6:	f04f 0c0a 	mov.w	ip, #10
 800abea:	4620      	mov	r0, r4
 800abec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf0:	3a30      	subs	r2, #48	; 0x30
 800abf2:	2a09      	cmp	r2, #9
 800abf4:	d903      	bls.n	800abfe <_vfiprintf_r+0x1ee>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0c5      	beq.n	800ab86 <_vfiprintf_r+0x176>
 800abfa:	9105      	str	r1, [sp, #20]
 800abfc:	e7c3      	b.n	800ab86 <_vfiprintf_r+0x176>
 800abfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac02:	4604      	mov	r4, r0
 800ac04:	2301      	movs	r3, #1
 800ac06:	e7f0      	b.n	800abea <_vfiprintf_r+0x1da>
 800ac08:	ab03      	add	r3, sp, #12
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4b16      	ldr	r3, [pc, #88]	; (800ac68 <_vfiprintf_r+0x258>)
 800ac10:	a904      	add	r1, sp, #16
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7fd fd58 	bl	80086c8 <_printf_float>
 800ac18:	4607      	mov	r7, r0
 800ac1a:	1c78      	adds	r0, r7, #1
 800ac1c:	d1d6      	bne.n	800abcc <_vfiprintf_r+0x1bc>
 800ac1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac20:	07d9      	lsls	r1, r3, #31
 800ac22:	d405      	bmi.n	800ac30 <_vfiprintf_r+0x220>
 800ac24:	89ab      	ldrh	r3, [r5, #12]
 800ac26:	059a      	lsls	r2, r3, #22
 800ac28:	d402      	bmi.n	800ac30 <_vfiprintf_r+0x220>
 800ac2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac2c:	f000 faaf 	bl	800b18e <__retarget_lock_release_recursive>
 800ac30:	89ab      	ldrh	r3, [r5, #12]
 800ac32:	065b      	lsls	r3, r3, #25
 800ac34:	f53f af12 	bmi.w	800aa5c <_vfiprintf_r+0x4c>
 800ac38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac3a:	e711      	b.n	800aa60 <_vfiprintf_r+0x50>
 800ac3c:	ab03      	add	r3, sp, #12
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	462a      	mov	r2, r5
 800ac42:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <_vfiprintf_r+0x258>)
 800ac44:	a904      	add	r1, sp, #16
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7fd ffe2 	bl	8008c10 <_printf_i>
 800ac4c:	e7e4      	b.n	800ac18 <_vfiprintf_r+0x208>
 800ac4e:	bf00      	nop
 800ac50:	0800b8fc 	.word	0x0800b8fc
 800ac54:	0800b91c 	.word	0x0800b91c
 800ac58:	0800b8dc 	.word	0x0800b8dc
 800ac5c:	0800b884 	.word	0x0800b884
 800ac60:	0800b88e 	.word	0x0800b88e
 800ac64:	080086c9 	.word	0x080086c9
 800ac68:	0800a9ed 	.word	0x0800a9ed
 800ac6c:	0800b88a 	.word	0x0800b88a

0800ac70 <__swbuf_r>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	460e      	mov	r6, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	4605      	mov	r5, r0
 800ac78:	b118      	cbz	r0, 800ac82 <__swbuf_r+0x12>
 800ac7a:	6983      	ldr	r3, [r0, #24]
 800ac7c:	b90b      	cbnz	r3, 800ac82 <__swbuf_r+0x12>
 800ac7e:	f000 f9e7 	bl	800b050 <__sinit>
 800ac82:	4b21      	ldr	r3, [pc, #132]	; (800ad08 <__swbuf_r+0x98>)
 800ac84:	429c      	cmp	r4, r3
 800ac86:	d12b      	bne.n	800ace0 <__swbuf_r+0x70>
 800ac88:	686c      	ldr	r4, [r5, #4]
 800ac8a:	69a3      	ldr	r3, [r4, #24]
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	071a      	lsls	r2, r3, #28
 800ac92:	d52f      	bpl.n	800acf4 <__swbuf_r+0x84>
 800ac94:	6923      	ldr	r3, [r4, #16]
 800ac96:	b36b      	cbz	r3, 800acf4 <__swbuf_r+0x84>
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	6820      	ldr	r0, [r4, #0]
 800ac9c:	1ac0      	subs	r0, r0, r3
 800ac9e:	6963      	ldr	r3, [r4, #20]
 800aca0:	b2f6      	uxtb	r6, r6
 800aca2:	4283      	cmp	r3, r0
 800aca4:	4637      	mov	r7, r6
 800aca6:	dc04      	bgt.n	800acb2 <__swbuf_r+0x42>
 800aca8:	4621      	mov	r1, r4
 800acaa:	4628      	mov	r0, r5
 800acac:	f000 f93c 	bl	800af28 <_fflush_r>
 800acb0:	bb30      	cbnz	r0, 800ad00 <__swbuf_r+0x90>
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	60a3      	str	r3, [r4, #8]
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	6022      	str	r2, [r4, #0]
 800acbe:	701e      	strb	r6, [r3, #0]
 800acc0:	6963      	ldr	r3, [r4, #20]
 800acc2:	3001      	adds	r0, #1
 800acc4:	4283      	cmp	r3, r0
 800acc6:	d004      	beq.n	800acd2 <__swbuf_r+0x62>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	07db      	lsls	r3, r3, #31
 800accc:	d506      	bpl.n	800acdc <__swbuf_r+0x6c>
 800acce:	2e0a      	cmp	r6, #10
 800acd0:	d104      	bne.n	800acdc <__swbuf_r+0x6c>
 800acd2:	4621      	mov	r1, r4
 800acd4:	4628      	mov	r0, r5
 800acd6:	f000 f927 	bl	800af28 <_fflush_r>
 800acda:	b988      	cbnz	r0, 800ad00 <__swbuf_r+0x90>
 800acdc:	4638      	mov	r0, r7
 800acde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace0:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <__swbuf_r+0x9c>)
 800ace2:	429c      	cmp	r4, r3
 800ace4:	d101      	bne.n	800acea <__swbuf_r+0x7a>
 800ace6:	68ac      	ldr	r4, [r5, #8]
 800ace8:	e7cf      	b.n	800ac8a <__swbuf_r+0x1a>
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <__swbuf_r+0xa0>)
 800acec:	429c      	cmp	r4, r3
 800acee:	bf08      	it	eq
 800acf0:	68ec      	ldreq	r4, [r5, #12]
 800acf2:	e7ca      	b.n	800ac8a <__swbuf_r+0x1a>
 800acf4:	4621      	mov	r1, r4
 800acf6:	4628      	mov	r0, r5
 800acf8:	f000 f81a 	bl	800ad30 <__swsetup_r>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d0cb      	beq.n	800ac98 <__swbuf_r+0x28>
 800ad00:	f04f 37ff 	mov.w	r7, #4294967295
 800ad04:	e7ea      	b.n	800acdc <__swbuf_r+0x6c>
 800ad06:	bf00      	nop
 800ad08:	0800b8fc 	.word	0x0800b8fc
 800ad0c:	0800b91c 	.word	0x0800b91c
 800ad10:	0800b8dc 	.word	0x0800b8dc

0800ad14 <__ascii_wctomb>:
 800ad14:	b149      	cbz	r1, 800ad2a <__ascii_wctomb+0x16>
 800ad16:	2aff      	cmp	r2, #255	; 0xff
 800ad18:	bf85      	ittet	hi
 800ad1a:	238a      	movhi	r3, #138	; 0x8a
 800ad1c:	6003      	strhi	r3, [r0, #0]
 800ad1e:	700a      	strbls	r2, [r1, #0]
 800ad20:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad24:	bf98      	it	ls
 800ad26:	2001      	movls	r0, #1
 800ad28:	4770      	bx	lr
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4770      	bx	lr
	...

0800ad30 <__swsetup_r>:
 800ad30:	4b32      	ldr	r3, [pc, #200]	; (800adfc <__swsetup_r+0xcc>)
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	681d      	ldr	r5, [r3, #0]
 800ad36:	4606      	mov	r6, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	b125      	cbz	r5, 800ad46 <__swsetup_r+0x16>
 800ad3c:	69ab      	ldr	r3, [r5, #24]
 800ad3e:	b913      	cbnz	r3, 800ad46 <__swsetup_r+0x16>
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 f985 	bl	800b050 <__sinit>
 800ad46:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <__swsetup_r+0xd0>)
 800ad48:	429c      	cmp	r4, r3
 800ad4a:	d10f      	bne.n	800ad6c <__swsetup_r+0x3c>
 800ad4c:	686c      	ldr	r4, [r5, #4]
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad54:	0719      	lsls	r1, r3, #28
 800ad56:	d42c      	bmi.n	800adb2 <__swsetup_r+0x82>
 800ad58:	06dd      	lsls	r5, r3, #27
 800ad5a:	d411      	bmi.n	800ad80 <__swsetup_r+0x50>
 800ad5c:	2309      	movs	r3, #9
 800ad5e:	6033      	str	r3, [r6, #0]
 800ad60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6a:	e03e      	b.n	800adea <__swsetup_r+0xba>
 800ad6c:	4b25      	ldr	r3, [pc, #148]	; (800ae04 <__swsetup_r+0xd4>)
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	d101      	bne.n	800ad76 <__swsetup_r+0x46>
 800ad72:	68ac      	ldr	r4, [r5, #8]
 800ad74:	e7eb      	b.n	800ad4e <__swsetup_r+0x1e>
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <__swsetup_r+0xd8>)
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	bf08      	it	eq
 800ad7c:	68ec      	ldreq	r4, [r5, #12]
 800ad7e:	e7e6      	b.n	800ad4e <__swsetup_r+0x1e>
 800ad80:	0758      	lsls	r0, r3, #29
 800ad82:	d512      	bpl.n	800adaa <__swsetup_r+0x7a>
 800ad84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad86:	b141      	cbz	r1, 800ad9a <__swsetup_r+0x6a>
 800ad88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d002      	beq.n	800ad96 <__swsetup_r+0x66>
 800ad90:	4630      	mov	r0, r6
 800ad92:	f7ff fb31 	bl	800a3f8 <_free_r>
 800ad96:	2300      	movs	r3, #0
 800ad98:	6363      	str	r3, [r4, #52]	; 0x34
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	2300      	movs	r3, #0
 800ada4:	6063      	str	r3, [r4, #4]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f043 0308 	orr.w	r3, r3, #8
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	b94b      	cbnz	r3, 800adca <__swsetup_r+0x9a>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adc0:	d003      	beq.n	800adca <__swsetup_r+0x9a>
 800adc2:	4621      	mov	r1, r4
 800adc4:	4630      	mov	r0, r6
 800adc6:	f000 fa09 	bl	800b1dc <__smakebuf_r>
 800adca:	89a0      	ldrh	r0, [r4, #12]
 800adcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800add0:	f010 0301 	ands.w	r3, r0, #1
 800add4:	d00a      	beq.n	800adec <__swsetup_r+0xbc>
 800add6:	2300      	movs	r3, #0
 800add8:	60a3      	str	r3, [r4, #8]
 800adda:	6963      	ldr	r3, [r4, #20]
 800addc:	425b      	negs	r3, r3
 800adde:	61a3      	str	r3, [r4, #24]
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	b943      	cbnz	r3, 800adf6 <__swsetup_r+0xc6>
 800ade4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ade8:	d1ba      	bne.n	800ad60 <__swsetup_r+0x30>
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	0781      	lsls	r1, r0, #30
 800adee:	bf58      	it	pl
 800adf0:	6963      	ldrpl	r3, [r4, #20]
 800adf2:	60a3      	str	r3, [r4, #8]
 800adf4:	e7f4      	b.n	800ade0 <__swsetup_r+0xb0>
 800adf6:	2000      	movs	r0, #0
 800adf8:	e7f7      	b.n	800adea <__swsetup_r+0xba>
 800adfa:	bf00      	nop
 800adfc:	20000014 	.word	0x20000014
 800ae00:	0800b8fc 	.word	0x0800b8fc
 800ae04:	0800b91c 	.word	0x0800b91c
 800ae08:	0800b8dc 	.word	0x0800b8dc

0800ae0c <abort>:
 800ae0c:	b508      	push	{r3, lr}
 800ae0e:	2006      	movs	r0, #6
 800ae10:	f000 fa54 	bl	800b2bc <raise>
 800ae14:	2001      	movs	r0, #1
 800ae16:	f7f7 ff69 	bl	8002cec <_exit>
	...

0800ae1c <__sflush_r>:
 800ae1c:	898a      	ldrh	r2, [r1, #12]
 800ae1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae22:	4605      	mov	r5, r0
 800ae24:	0710      	lsls	r0, r2, #28
 800ae26:	460c      	mov	r4, r1
 800ae28:	d458      	bmi.n	800aedc <__sflush_r+0xc0>
 800ae2a:	684b      	ldr	r3, [r1, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dc05      	bgt.n	800ae3c <__sflush_r+0x20>
 800ae30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dc02      	bgt.n	800ae3c <__sflush_r+0x20>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	d0f9      	beq.n	800ae36 <__sflush_r+0x1a>
 800ae42:	2300      	movs	r3, #0
 800ae44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae48:	682f      	ldr	r7, [r5, #0]
 800ae4a:	602b      	str	r3, [r5, #0]
 800ae4c:	d032      	beq.n	800aeb4 <__sflush_r+0x98>
 800ae4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	075a      	lsls	r2, r3, #29
 800ae54:	d505      	bpl.n	800ae62 <__sflush_r+0x46>
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	1ac0      	subs	r0, r0, r3
 800ae5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae5c:	b10b      	cbz	r3, 800ae62 <__sflush_r+0x46>
 800ae5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	2300      	movs	r3, #0
 800ae64:	4602      	mov	r2, r0
 800ae66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae68:	6a21      	ldr	r1, [r4, #32]
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b0      	blx	r6
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	d106      	bne.n	800ae82 <__sflush_r+0x66>
 800ae74:	6829      	ldr	r1, [r5, #0]
 800ae76:	291d      	cmp	r1, #29
 800ae78:	d82c      	bhi.n	800aed4 <__sflush_r+0xb8>
 800ae7a:	4a2a      	ldr	r2, [pc, #168]	; (800af24 <__sflush_r+0x108>)
 800ae7c:	40ca      	lsrs	r2, r1
 800ae7e:	07d6      	lsls	r6, r2, #31
 800ae80:	d528      	bpl.n	800aed4 <__sflush_r+0xb8>
 800ae82:	2200      	movs	r2, #0
 800ae84:	6062      	str	r2, [r4, #4]
 800ae86:	04d9      	lsls	r1, r3, #19
 800ae88:	6922      	ldr	r2, [r4, #16]
 800ae8a:	6022      	str	r2, [r4, #0]
 800ae8c:	d504      	bpl.n	800ae98 <__sflush_r+0x7c>
 800ae8e:	1c42      	adds	r2, r0, #1
 800ae90:	d101      	bne.n	800ae96 <__sflush_r+0x7a>
 800ae92:	682b      	ldr	r3, [r5, #0]
 800ae94:	b903      	cbnz	r3, 800ae98 <__sflush_r+0x7c>
 800ae96:	6560      	str	r0, [r4, #84]	; 0x54
 800ae98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae9a:	602f      	str	r7, [r5, #0]
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d0ca      	beq.n	800ae36 <__sflush_r+0x1a>
 800aea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d002      	beq.n	800aeae <__sflush_r+0x92>
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f7ff faa5 	bl	800a3f8 <_free_r>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	6360      	str	r0, [r4, #52]	; 0x34
 800aeb2:	e7c1      	b.n	800ae38 <__sflush_r+0x1c>
 800aeb4:	6a21      	ldr	r1, [r4, #32]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b0      	blx	r6
 800aebc:	1c41      	adds	r1, r0, #1
 800aebe:	d1c7      	bne.n	800ae50 <__sflush_r+0x34>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c4      	beq.n	800ae50 <__sflush_r+0x34>
 800aec6:	2b1d      	cmp	r3, #29
 800aec8:	d001      	beq.n	800aece <__sflush_r+0xb2>
 800aeca:	2b16      	cmp	r3, #22
 800aecc:	d101      	bne.n	800aed2 <__sflush_r+0xb6>
 800aece:	602f      	str	r7, [r5, #0]
 800aed0:	e7b1      	b.n	800ae36 <__sflush_r+0x1a>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	e7ad      	b.n	800ae38 <__sflush_r+0x1c>
 800aedc:	690f      	ldr	r7, [r1, #16]
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d0a9      	beq.n	800ae36 <__sflush_r+0x1a>
 800aee2:	0793      	lsls	r3, r2, #30
 800aee4:	680e      	ldr	r6, [r1, #0]
 800aee6:	bf08      	it	eq
 800aee8:	694b      	ldreq	r3, [r1, #20]
 800aeea:	600f      	str	r7, [r1, #0]
 800aeec:	bf18      	it	ne
 800aeee:	2300      	movne	r3, #0
 800aef0:	eba6 0807 	sub.w	r8, r6, r7
 800aef4:	608b      	str	r3, [r1, #8]
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	dd9c      	ble.n	800ae36 <__sflush_r+0x1a>
 800aefc:	6a21      	ldr	r1, [r4, #32]
 800aefe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af00:	4643      	mov	r3, r8
 800af02:	463a      	mov	r2, r7
 800af04:	4628      	mov	r0, r5
 800af06:	47b0      	blx	r6
 800af08:	2800      	cmp	r0, #0
 800af0a:	dc06      	bgt.n	800af1a <__sflush_r+0xfe>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	e78e      	b.n	800ae38 <__sflush_r+0x1c>
 800af1a:	4407      	add	r7, r0
 800af1c:	eba8 0800 	sub.w	r8, r8, r0
 800af20:	e7e9      	b.n	800aef6 <__sflush_r+0xda>
 800af22:	bf00      	nop
 800af24:	20400001 	.word	0x20400001

0800af28 <_fflush_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	690b      	ldr	r3, [r1, #16]
 800af2c:	4605      	mov	r5, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	b913      	cbnz	r3, 800af38 <_fflush_r+0x10>
 800af32:	2500      	movs	r5, #0
 800af34:	4628      	mov	r0, r5
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	b118      	cbz	r0, 800af42 <_fflush_r+0x1a>
 800af3a:	6983      	ldr	r3, [r0, #24]
 800af3c:	b90b      	cbnz	r3, 800af42 <_fflush_r+0x1a>
 800af3e:	f000 f887 	bl	800b050 <__sinit>
 800af42:	4b14      	ldr	r3, [pc, #80]	; (800af94 <_fflush_r+0x6c>)
 800af44:	429c      	cmp	r4, r3
 800af46:	d11b      	bne.n	800af80 <_fflush_r+0x58>
 800af48:	686c      	ldr	r4, [r5, #4]
 800af4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0ef      	beq.n	800af32 <_fflush_r+0xa>
 800af52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af54:	07d0      	lsls	r0, r2, #31
 800af56:	d404      	bmi.n	800af62 <_fflush_r+0x3a>
 800af58:	0599      	lsls	r1, r3, #22
 800af5a:	d402      	bmi.n	800af62 <_fflush_r+0x3a>
 800af5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af5e:	f000 f915 	bl	800b18c <__retarget_lock_acquire_recursive>
 800af62:	4628      	mov	r0, r5
 800af64:	4621      	mov	r1, r4
 800af66:	f7ff ff59 	bl	800ae1c <__sflush_r>
 800af6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	4605      	mov	r5, r0
 800af70:	d4e0      	bmi.n	800af34 <_fflush_r+0xc>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	059b      	lsls	r3, r3, #22
 800af76:	d4dd      	bmi.n	800af34 <_fflush_r+0xc>
 800af78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af7a:	f000 f908 	bl	800b18e <__retarget_lock_release_recursive>
 800af7e:	e7d9      	b.n	800af34 <_fflush_r+0xc>
 800af80:	4b05      	ldr	r3, [pc, #20]	; (800af98 <_fflush_r+0x70>)
 800af82:	429c      	cmp	r4, r3
 800af84:	d101      	bne.n	800af8a <_fflush_r+0x62>
 800af86:	68ac      	ldr	r4, [r5, #8]
 800af88:	e7df      	b.n	800af4a <_fflush_r+0x22>
 800af8a:	4b04      	ldr	r3, [pc, #16]	; (800af9c <_fflush_r+0x74>)
 800af8c:	429c      	cmp	r4, r3
 800af8e:	bf08      	it	eq
 800af90:	68ec      	ldreq	r4, [r5, #12]
 800af92:	e7da      	b.n	800af4a <_fflush_r+0x22>
 800af94:	0800b8fc 	.word	0x0800b8fc
 800af98:	0800b91c 	.word	0x0800b91c
 800af9c:	0800b8dc 	.word	0x0800b8dc

0800afa0 <std>:
 800afa0:	2300      	movs	r3, #0
 800afa2:	b510      	push	{r4, lr}
 800afa4:	4604      	mov	r4, r0
 800afa6:	e9c0 3300 	strd	r3, r3, [r0]
 800afaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afae:	6083      	str	r3, [r0, #8]
 800afb0:	8181      	strh	r1, [r0, #12]
 800afb2:	6643      	str	r3, [r0, #100]	; 0x64
 800afb4:	81c2      	strh	r2, [r0, #14]
 800afb6:	6183      	str	r3, [r0, #24]
 800afb8:	4619      	mov	r1, r3
 800afba:	2208      	movs	r2, #8
 800afbc:	305c      	adds	r0, #92	; 0x5c
 800afbe:	f7fd fadb 	bl	8008578 <memset>
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <std+0x38>)
 800afc4:	6263      	str	r3, [r4, #36]	; 0x24
 800afc6:	4b05      	ldr	r3, [pc, #20]	; (800afdc <std+0x3c>)
 800afc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <std+0x40>)
 800afcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afce:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <std+0x44>)
 800afd0:	6224      	str	r4, [r4, #32]
 800afd2:	6323      	str	r3, [r4, #48]	; 0x30
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	bf00      	nop
 800afd8:	0800b2f5 	.word	0x0800b2f5
 800afdc:	0800b317 	.word	0x0800b317
 800afe0:	0800b34f 	.word	0x0800b34f
 800afe4:	0800b373 	.word	0x0800b373

0800afe8 <_cleanup_r>:
 800afe8:	4901      	ldr	r1, [pc, #4]	; (800aff0 <_cleanup_r+0x8>)
 800afea:	f000 b8af 	b.w	800b14c <_fwalk_reent>
 800afee:	bf00      	nop
 800aff0:	0800af29 	.word	0x0800af29

0800aff4 <__sfmoreglue>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	2268      	movs	r2, #104	; 0x68
 800aff8:	1e4d      	subs	r5, r1, #1
 800affa:	4355      	muls	r5, r2
 800affc:	460e      	mov	r6, r1
 800affe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b002:	f7ff fa65 	bl	800a4d0 <_malloc_r>
 800b006:	4604      	mov	r4, r0
 800b008:	b140      	cbz	r0, 800b01c <__sfmoreglue+0x28>
 800b00a:	2100      	movs	r1, #0
 800b00c:	e9c0 1600 	strd	r1, r6, [r0]
 800b010:	300c      	adds	r0, #12
 800b012:	60a0      	str	r0, [r4, #8]
 800b014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b018:	f7fd faae 	bl	8008578 <memset>
 800b01c:	4620      	mov	r0, r4
 800b01e:	bd70      	pop	{r4, r5, r6, pc}

0800b020 <__sfp_lock_acquire>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__sfp_lock_acquire+0x8>)
 800b022:	f000 b8b3 	b.w	800b18c <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	20000531 	.word	0x20000531

0800b02c <__sfp_lock_release>:
 800b02c:	4801      	ldr	r0, [pc, #4]	; (800b034 <__sfp_lock_release+0x8>)
 800b02e:	f000 b8ae 	b.w	800b18e <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	20000531 	.word	0x20000531

0800b038 <__sinit_lock_acquire>:
 800b038:	4801      	ldr	r0, [pc, #4]	; (800b040 <__sinit_lock_acquire+0x8>)
 800b03a:	f000 b8a7 	b.w	800b18c <__retarget_lock_acquire_recursive>
 800b03e:	bf00      	nop
 800b040:	20000532 	.word	0x20000532

0800b044 <__sinit_lock_release>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__sinit_lock_release+0x8>)
 800b046:	f000 b8a2 	b.w	800b18e <__retarget_lock_release_recursive>
 800b04a:	bf00      	nop
 800b04c:	20000532 	.word	0x20000532

0800b050 <__sinit>:
 800b050:	b510      	push	{r4, lr}
 800b052:	4604      	mov	r4, r0
 800b054:	f7ff fff0 	bl	800b038 <__sinit_lock_acquire>
 800b058:	69a3      	ldr	r3, [r4, #24]
 800b05a:	b11b      	cbz	r3, 800b064 <__sinit+0x14>
 800b05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b060:	f7ff bff0 	b.w	800b044 <__sinit_lock_release>
 800b064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b068:	6523      	str	r3, [r4, #80]	; 0x50
 800b06a:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <__sinit+0x68>)
 800b06c:	4a13      	ldr	r2, [pc, #76]	; (800b0bc <__sinit+0x6c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	62a2      	str	r2, [r4, #40]	; 0x28
 800b072:	42a3      	cmp	r3, r4
 800b074:	bf04      	itt	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	61a3      	streq	r3, [r4, #24]
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f820 	bl	800b0c0 <__sfp>
 800b080:	6060      	str	r0, [r4, #4]
 800b082:	4620      	mov	r0, r4
 800b084:	f000 f81c 	bl	800b0c0 <__sfp>
 800b088:	60a0      	str	r0, [r4, #8]
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 f818 	bl	800b0c0 <__sfp>
 800b090:	2200      	movs	r2, #0
 800b092:	60e0      	str	r0, [r4, #12]
 800b094:	2104      	movs	r1, #4
 800b096:	6860      	ldr	r0, [r4, #4]
 800b098:	f7ff ff82 	bl	800afa0 <std>
 800b09c:	68a0      	ldr	r0, [r4, #8]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	2109      	movs	r1, #9
 800b0a2:	f7ff ff7d 	bl	800afa0 <std>
 800b0a6:	68e0      	ldr	r0, [r4, #12]
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	2112      	movs	r1, #18
 800b0ac:	f7ff ff78 	bl	800afa0 <std>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	61a3      	str	r3, [r4, #24]
 800b0b4:	e7d2      	b.n	800b05c <__sinit+0xc>
 800b0b6:	bf00      	nop
 800b0b8:	0800b560 	.word	0x0800b560
 800b0bc:	0800afe9 	.word	0x0800afe9

0800b0c0 <__sfp>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	f7ff ffac 	bl	800b020 <__sfp_lock_acquire>
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	; (800b144 <__sfp+0x84>)
 800b0ca:	681e      	ldr	r6, [r3, #0]
 800b0cc:	69b3      	ldr	r3, [r6, #24]
 800b0ce:	b913      	cbnz	r3, 800b0d6 <__sfp+0x16>
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7ff ffbd 	bl	800b050 <__sinit>
 800b0d6:	3648      	adds	r6, #72	; 0x48
 800b0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	d503      	bpl.n	800b0e8 <__sfp+0x28>
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	b30b      	cbz	r3, 800b128 <__sfp+0x68>
 800b0e4:	6836      	ldr	r6, [r6, #0]
 800b0e6:	e7f7      	b.n	800b0d8 <__sfp+0x18>
 800b0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0ec:	b9d5      	cbnz	r5, 800b124 <__sfp+0x64>
 800b0ee:	4b16      	ldr	r3, [pc, #88]	; (800b148 <__sfp+0x88>)
 800b0f0:	60e3      	str	r3, [r4, #12]
 800b0f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b0f8:	f000 f847 	bl	800b18a <__retarget_lock_init_recursive>
 800b0fc:	f7ff ff96 	bl	800b02c <__sfp_lock_release>
 800b100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b108:	6025      	str	r5, [r4, #0]
 800b10a:	61a5      	str	r5, [r4, #24]
 800b10c:	2208      	movs	r2, #8
 800b10e:	4629      	mov	r1, r5
 800b110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b114:	f7fd fa30 	bl	8008578 <memset>
 800b118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b120:	4620      	mov	r0, r4
 800b122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b124:	3468      	adds	r4, #104	; 0x68
 800b126:	e7d9      	b.n	800b0dc <__sfp+0x1c>
 800b128:	2104      	movs	r1, #4
 800b12a:	4638      	mov	r0, r7
 800b12c:	f7ff ff62 	bl	800aff4 <__sfmoreglue>
 800b130:	4604      	mov	r4, r0
 800b132:	6030      	str	r0, [r6, #0]
 800b134:	2800      	cmp	r0, #0
 800b136:	d1d5      	bne.n	800b0e4 <__sfp+0x24>
 800b138:	f7ff ff78 	bl	800b02c <__sfp_lock_release>
 800b13c:	230c      	movs	r3, #12
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	e7ee      	b.n	800b120 <__sfp+0x60>
 800b142:	bf00      	nop
 800b144:	0800b560 	.word	0x0800b560
 800b148:	ffff0001 	.word	0xffff0001

0800b14c <_fwalk_reent>:
 800b14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b150:	4606      	mov	r6, r0
 800b152:	4688      	mov	r8, r1
 800b154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b158:	2700      	movs	r7, #0
 800b15a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b15e:	f1b9 0901 	subs.w	r9, r9, #1
 800b162:	d505      	bpl.n	800b170 <_fwalk_reent+0x24>
 800b164:	6824      	ldr	r4, [r4, #0]
 800b166:	2c00      	cmp	r4, #0
 800b168:	d1f7      	bne.n	800b15a <_fwalk_reent+0xe>
 800b16a:	4638      	mov	r0, r7
 800b16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b170:	89ab      	ldrh	r3, [r5, #12]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d907      	bls.n	800b186 <_fwalk_reent+0x3a>
 800b176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b17a:	3301      	adds	r3, #1
 800b17c:	d003      	beq.n	800b186 <_fwalk_reent+0x3a>
 800b17e:	4629      	mov	r1, r5
 800b180:	4630      	mov	r0, r6
 800b182:	47c0      	blx	r8
 800b184:	4307      	orrs	r7, r0
 800b186:	3568      	adds	r5, #104	; 0x68
 800b188:	e7e9      	b.n	800b15e <_fwalk_reent+0x12>

0800b18a <__retarget_lock_init_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <__retarget_lock_acquire_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <__retarget_lock_release_recursive>:
 800b18e:	4770      	bx	lr

0800b190 <__swhatbuf_r>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	460e      	mov	r6, r1
 800b194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b198:	2900      	cmp	r1, #0
 800b19a:	b096      	sub	sp, #88	; 0x58
 800b19c:	4614      	mov	r4, r2
 800b19e:	461d      	mov	r5, r3
 800b1a0:	da08      	bge.n	800b1b4 <__swhatbuf_r+0x24>
 800b1a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	602a      	str	r2, [r5, #0]
 800b1aa:	061a      	lsls	r2, r3, #24
 800b1ac:	d410      	bmi.n	800b1d0 <__swhatbuf_r+0x40>
 800b1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b2:	e00e      	b.n	800b1d2 <__swhatbuf_r+0x42>
 800b1b4:	466a      	mov	r2, sp
 800b1b6:	f000 f903 	bl	800b3c0 <_fstat_r>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	dbf1      	blt.n	800b1a2 <__swhatbuf_r+0x12>
 800b1be:	9a01      	ldr	r2, [sp, #4]
 800b1c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1c8:	425a      	negs	r2, r3
 800b1ca:	415a      	adcs	r2, r3
 800b1cc:	602a      	str	r2, [r5, #0]
 800b1ce:	e7ee      	b.n	800b1ae <__swhatbuf_r+0x1e>
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	b016      	add	sp, #88	; 0x58
 800b1d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1dc <__smakebuf_r>:
 800b1dc:	898b      	ldrh	r3, [r1, #12]
 800b1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1e0:	079d      	lsls	r5, r3, #30
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	d507      	bpl.n	800b1f8 <__smakebuf_r+0x1c>
 800b1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	6163      	str	r3, [r4, #20]
 800b1f4:	b002      	add	sp, #8
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	ab01      	add	r3, sp, #4
 800b1fa:	466a      	mov	r2, sp
 800b1fc:	f7ff ffc8 	bl	800b190 <__swhatbuf_r>
 800b200:	9900      	ldr	r1, [sp, #0]
 800b202:	4605      	mov	r5, r0
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff f963 	bl	800a4d0 <_malloc_r>
 800b20a:	b948      	cbnz	r0, 800b220 <__smakebuf_r+0x44>
 800b20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b210:	059a      	lsls	r2, r3, #22
 800b212:	d4ef      	bmi.n	800b1f4 <__smakebuf_r+0x18>
 800b214:	f023 0303 	bic.w	r3, r3, #3
 800b218:	f043 0302 	orr.w	r3, r3, #2
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	e7e3      	b.n	800b1e8 <__smakebuf_r+0xc>
 800b220:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <__smakebuf_r+0x7c>)
 800b222:	62b3      	str	r3, [r6, #40]	; 0x28
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	6020      	str	r0, [r4, #0]
 800b228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22c:	81a3      	strh	r3, [r4, #12]
 800b22e:	9b00      	ldr	r3, [sp, #0]
 800b230:	6163      	str	r3, [r4, #20]
 800b232:	9b01      	ldr	r3, [sp, #4]
 800b234:	6120      	str	r0, [r4, #16]
 800b236:	b15b      	cbz	r3, 800b250 <__smakebuf_r+0x74>
 800b238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 f8d1 	bl	800b3e4 <_isatty_r>
 800b242:	b128      	cbz	r0, 800b250 <__smakebuf_r+0x74>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f023 0303 	bic.w	r3, r3, #3
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	89a0      	ldrh	r0, [r4, #12]
 800b252:	4305      	orrs	r5, r0
 800b254:	81a5      	strh	r5, [r4, #12]
 800b256:	e7cd      	b.n	800b1f4 <__smakebuf_r+0x18>
 800b258:	0800afe9 	.word	0x0800afe9

0800b25c <_malloc_usable_size_r>:
 800b25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b260:	1f18      	subs	r0, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	bfbc      	itt	lt
 800b266:	580b      	ldrlt	r3, [r1, r0]
 800b268:	18c0      	addlt	r0, r0, r3
 800b26a:	4770      	bx	lr

0800b26c <_raise_r>:
 800b26c:	291f      	cmp	r1, #31
 800b26e:	b538      	push	{r3, r4, r5, lr}
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	d904      	bls.n	800b280 <_raise_r+0x14>
 800b276:	2316      	movs	r3, #22
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b282:	b112      	cbz	r2, 800b28a <_raise_r+0x1e>
 800b284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b288:	b94b      	cbnz	r3, 800b29e <_raise_r+0x32>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f830 	bl	800b2f0 <_getpid_r>
 800b290:	462a      	mov	r2, r5
 800b292:	4601      	mov	r1, r0
 800b294:	4620      	mov	r0, r4
 800b296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29a:	f000 b817 	b.w	800b2cc <_kill_r>
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d00a      	beq.n	800b2b8 <_raise_r+0x4c>
 800b2a2:	1c59      	adds	r1, r3, #1
 800b2a4:	d103      	bne.n	800b2ae <_raise_r+0x42>
 800b2a6:	2316      	movs	r3, #22
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e7e7      	b.n	800b27e <_raise_r+0x12>
 800b2ae:	2400      	movs	r4, #0
 800b2b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	4798      	blx	r3
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e7e0      	b.n	800b27e <_raise_r+0x12>

0800b2bc <raise>:
 800b2bc:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <raise+0xc>)
 800b2be:	4601      	mov	r1, r0
 800b2c0:	6818      	ldr	r0, [r3, #0]
 800b2c2:	f7ff bfd3 	b.w	800b26c <_raise_r>
 800b2c6:	bf00      	nop
 800b2c8:	20000014 	.word	0x20000014

0800b2cc <_kill_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d07      	ldr	r5, [pc, #28]	; (800b2ec <_kill_r+0x20>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	f7f7 fcf7 	bl	8002ccc <_kill>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d102      	bne.n	800b2e8 <_kill_r+0x1c>
 800b2e2:	682b      	ldr	r3, [r5, #0]
 800b2e4:	b103      	cbz	r3, 800b2e8 <_kill_r+0x1c>
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000052c 	.word	0x2000052c

0800b2f0 <_getpid_r>:
 800b2f0:	f7f7 bce4 	b.w	8002cbc <_getpid>

0800b2f4 <__sread>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fc:	f000 f894 	bl	800b428 <_read_r>
 800b300:	2800      	cmp	r0, #0
 800b302:	bfab      	itete	ge
 800b304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b306:	89a3      	ldrhlt	r3, [r4, #12]
 800b308:	181b      	addge	r3, r3, r0
 800b30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b30e:	bfac      	ite	ge
 800b310:	6563      	strge	r3, [r4, #84]	; 0x54
 800b312:	81a3      	strhlt	r3, [r4, #12]
 800b314:	bd10      	pop	{r4, pc}

0800b316 <__swrite>:
 800b316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31a:	461f      	mov	r7, r3
 800b31c:	898b      	ldrh	r3, [r1, #12]
 800b31e:	05db      	lsls	r3, r3, #23
 800b320:	4605      	mov	r5, r0
 800b322:	460c      	mov	r4, r1
 800b324:	4616      	mov	r6, r2
 800b326:	d505      	bpl.n	800b334 <__swrite+0x1e>
 800b328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32c:	2302      	movs	r3, #2
 800b32e:	2200      	movs	r2, #0
 800b330:	f000 f868 	bl	800b404 <_lseek_r>
 800b334:	89a3      	ldrh	r3, [r4, #12]
 800b336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	4632      	mov	r2, r6
 800b342:	463b      	mov	r3, r7
 800b344:	4628      	mov	r0, r5
 800b346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b34a:	f000 b817 	b.w	800b37c <_write_r>

0800b34e <__sseek>:
 800b34e:	b510      	push	{r4, lr}
 800b350:	460c      	mov	r4, r1
 800b352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b356:	f000 f855 	bl	800b404 <_lseek_r>
 800b35a:	1c43      	adds	r3, r0, #1
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	bf15      	itete	ne
 800b360:	6560      	strne	r0, [r4, #84]	; 0x54
 800b362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b36a:	81a3      	strheq	r3, [r4, #12]
 800b36c:	bf18      	it	ne
 800b36e:	81a3      	strhne	r3, [r4, #12]
 800b370:	bd10      	pop	{r4, pc}

0800b372 <__sclose>:
 800b372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b376:	f000 b813 	b.w	800b3a0 <_close_r>
	...

0800b37c <_write_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d07      	ldr	r5, [pc, #28]	; (800b39c <_write_r+0x20>)
 800b380:	4604      	mov	r4, r0
 800b382:	4608      	mov	r0, r1
 800b384:	4611      	mov	r1, r2
 800b386:	2200      	movs	r2, #0
 800b388:	602a      	str	r2, [r5, #0]
 800b38a:	461a      	mov	r2, r3
 800b38c:	f7f7 fcd5 	bl	8002d3a <_write>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_write_r+0x1e>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_write_r+0x1e>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	2000052c 	.word	0x2000052c

0800b3a0 <_close_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d06      	ldr	r5, [pc, #24]	; (800b3bc <_close_r+0x1c>)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	f7f7 fce1 	bl	8002d72 <_close>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_close_r+0x1a>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_close_r+0x1a>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	2000052c 	.word	0x2000052c

0800b3c0 <_fstat_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d07      	ldr	r5, [pc, #28]	; (800b3e0 <_fstat_r+0x20>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	f7f7 fcdc 	bl	8002d8a <_fstat>
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	d102      	bne.n	800b3dc <_fstat_r+0x1c>
 800b3d6:	682b      	ldr	r3, [r5, #0]
 800b3d8:	b103      	cbz	r3, 800b3dc <_fstat_r+0x1c>
 800b3da:	6023      	str	r3, [r4, #0]
 800b3dc:	bd38      	pop	{r3, r4, r5, pc}
 800b3de:	bf00      	nop
 800b3e0:	2000052c 	.word	0x2000052c

0800b3e4 <_isatty_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d06      	ldr	r5, [pc, #24]	; (800b400 <_isatty_r+0x1c>)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	f7f7 fcdb 	bl	8002daa <_isatty>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_isatty_r+0x1a>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_isatty_r+0x1a>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	2000052c 	.word	0x2000052c

0800b404 <_lseek_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d07      	ldr	r5, [pc, #28]	; (800b424 <_lseek_r+0x20>)
 800b408:	4604      	mov	r4, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	2200      	movs	r2, #0
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f7 fcd4 	bl	8002dc0 <_lseek>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_lseek_r+0x1e>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_lseek_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	2000052c 	.word	0x2000052c

0800b428 <_read_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d07      	ldr	r5, [pc, #28]	; (800b448 <_read_r+0x20>)
 800b42c:	4604      	mov	r4, r0
 800b42e:	4608      	mov	r0, r1
 800b430:	4611      	mov	r1, r2
 800b432:	2200      	movs	r2, #0
 800b434:	602a      	str	r2, [r5, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	f7f7 fc62 	bl	8002d00 <_read>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_read_r+0x1e>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_read_r+0x1e>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	2000052c 	.word	0x2000052c

0800b44c <_init>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr

0800b458 <_fini>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	bf00      	nop
 800b45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45e:	bc08      	pop	{r3}
 800b460:	469e      	mov	lr, r3
 800b462:	4770      	bx	lr
